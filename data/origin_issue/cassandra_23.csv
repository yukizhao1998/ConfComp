Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocked),Inward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Completes),Outward issue link (Completes),Inward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Problem/Incident),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Required),Inward issue link (Testing),Outward issue link (Testing),Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Authors),Custom field (Authors),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Impacts),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Platform),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Reviewer),Custom field (Reviewers),Custom field (Reviewers),Custom field (Reviewers),Custom field (Severity),Custom field (Severity),Custom field (Since Version),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
jackson-databind-2.13.2.2.jar vulnerability: CVE-2023-35116,CASSANDRA-18630,13541550,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,27/Jun/23 11:31,28/Jun/23 11:08,13/Jul/23 08:41,28/Jun/23 11:08,3.0.30,3.11.16,4.0.11,4.1.3,5.0,,Dependencies,,,0,,,,,"https://nvd.nist.gov/vuln/detail/CVE-2023-35116

{noformat}
 An issue was discovered jackson-databind thru 2.15.2 allows attackers to cause a denial of service or other unspecified impacts via crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that the product is not intended for use with untrusted input.
{noformat}",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security -> Denial of Service,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 28 11:08:32 UTC 2023,,,,,,,All,,,,"0|z1it28:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/de7b1584f888eb6acc7d10602e302475169472bb,,,,,,,,,run CI,,,,,"27/Jun/23 18:53;brandon.williams;Reading through the issue [here|https://github.com/FasterXML/jackson-databind/issues/3972] I don't think we need to worry about this and this probably shouldn't have been a CVE.  Patches to suppress:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18630-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1094/workflows/890d2bff-1c0c-4d92-9c2f-1db6dfcc28fa]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18630-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1096/workflows/8be147be-3cba-4912-8786-522c19feb623]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18630-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1092/workflows/361235e2-b54c-470f-bf00-4b5bcb631d7c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1092/workflows/2eb95096-fede-4f7d-9c1b-adffe161ad74]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18630-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1093/workflows/bb1b1b46-9738-4b74-bcc7-c2fefeb7f737], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1093/workflows/6de7df6f-9b5f-4ec1-94ef-d3357d9604df]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18630-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1095/workflows/6114e2e3-8dcc-4bb0-b664-ae7d82c3349f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1095/workflows/d1b2651a-4428-4473-a120-ec655ecfd8c9]|
;;;","28/Jun/23 08:51;bereng;+1 given the community itself disputes the CVE. Also there is one failure that has no ticket, looks definitely unrelated, but does that compaction failure ring a bell [~brandon.williams]?;;;","28/Jun/23 11:08;brandon.williams;Committed this and created CASSANDRA-18635 for the failure, I didn't find it anywhere.  Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compaction_tombstone_warning_threshold and compaction_large_partition_warning_threshold cause deprecation warnings,CASSANDRA-18626,13541441,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,brandon.williams,brandon.williams,26/Jun/23 16:09,29/Jun/23 16:14,13/Jul/23 08:41,28/Jun/23 20:58,5.0,,,,,,Feature/Guardrails,,,0,,,,,"If you start trunk without any changes you will see at startup:

{noformat}
WARN  [main] 2023-06-26 15:59:36,613 YamlConfigurationLoader.java:426 - [compaction_tombstone_warning_threshold, compaction_large_partition_warning_threshold] parameters have been deprecated. They have new names and/or value format; For more information, please refer to NEWS.txt
{noformat}

We should give these the same treatment as CASSANDRA-18617, removing them from the default yaml to stop the warnings, but still accepting them with converters and @Replaces tags.",,adelapena,,,,,,,,,"adelapena opened a new pull request, #2454:
URL: https://github.com/apache/cassandra/pull/2454

   (no comment)


;28/Jun/23 11:05;githubbot;600","adelapena opened a new pull request, #223:
URL: https://github.com/apache/cassandra-dtest/pull/223

   (no comment)


;28/Jun/23 11:07;githubbot;600","driftx commented on code in PR #223:
URL: https://github.com/apache/cassandra-dtest/pull/223#discussion_r1245281905


##########
compaction_test.py:
##########
@@ -346,6 +347,7 @@ def test_compaction_strategy_switching(self, strategy):
                 time.sleep(5)
                 cluster.start()
 
+    @ported_to_in_jvm('4.0')  # org.apache.cassandra.distributed.test.guardrails.GuardrailPartitionSizeTest

Review Comment:
   should this be 5.0?



;28/Jun/23 14:12;githubbot;600","adelapena commented on code in PR #223:
URL: https://github.com/apache/cassandra-dtest/pull/223#discussion_r1245626512


##########
compaction_test.py:
##########
@@ -346,6 +347,7 @@ def test_compaction_strategy_switching(self, strategy):
                 time.sleep(5)
                 cluster.start()
 
+    @ported_to_in_jvm('4.0')  # org.apache.cassandra.distributed.test.guardrails.GuardrailPartitionSizeTest

Review Comment:
   Absolutely, it should be 5.0, thanks



;28/Jun/23 18:53;githubbot;600","smiklosovic closed pull request #2454: CASSANDRA-18626: Remove deprecated compaction_tombstone_warning_threshold and compaction_large_partition_warning_threshold from yaml
URL: https://github.com/apache/cassandra/pull/2454


;29/Jun/23 16:14;githubbot;600",,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 28 20:58:08 UTC 2023,,,,,,,All,,,,"0|z1iseg:",9223372036854775807,,,,brandon.williams,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/c579faa488ec156a59ed8e15dd6db55759b9c942,,,,,,,,,"||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/2454/files]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2990/workflows/9d23824e-29ac-4a11-862d-570913594062] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2990/workflows/a2221f60-588c-4a6a-b80e-24ba1fa0686e]|
|[dtest|https://github.com/apache/cassandra-dtest/pull/223]||",,,,,"28/Jun/23 11:15;adelapena;The proposed patch follows the approach that was discussed for CASSANDRA-18617. The deprecated properties are removed from {{cassandra.yaml}} and transformed into the equivalent guardrails with a {{@Replaces}} tag. If an old {{cassandra.yaml}} contains the old properties they will be used to set the guardrails. But if they are absent, they will be disabled by default, same as the guardrail.
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/2454/files]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2990/workflows/9d23824e-29ac-4a11-862d-570913594062] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2990/workflows/a2221f60-588c-4a6a-b80e-24ba1fa0686e]|
|[dtest|https://github.com/apache/cassandra-dtest/pull/223]||;;;","28/Jun/23 14:13;brandon.williams;Left a comment about the dtest but otherwise this looks good, the warnings are gone and the guardrails work.;;;","28/Jun/23 18:49;brandon.williams;+1;;;","28/Jun/23 18:55;adelapena;Thanks for the review. I have fixed the dtest annotation.;;;","28/Jun/23 20:58;adelapena;Committed to {{trunk}} as [c579faa488ec156a59ed8e15dd6db55759b9c942|https://github.com/apache/cassandra/commit/c579faa488ec156a59ed8e15dd6db55759b9c942].

Dtests committed as [862eeb7980734a2f5e6189cab58592e565b60030|https://github.com/apache/cassandra-dtest/commit/862eeb7980734a2f5e6189cab58592e565b60030].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
snappy-java vulnerability: CVE-2023-34453,CASSANDRA-18609,13540520,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,18/Jun/23 13:40,22/Jun/23 16:45,13/Jul/23 08:41,22/Jun/23 16:45,3.0.x,3.11.x,4.0.x,4.1.x,5.x,,Feature/Compression,,,0,,,,,"Failing owasp:

[https://nvd.nist.gov/vuln/detail/CVE-2023-34453]

bq. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error. ",,kkierer,tsteinmaurer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18608,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jun 22 16:45:14 UTC 2023,,,,,,,All,,,,"0|z1imqg:",9223372036854775807,,,,,,,Normal,,,,,,,,,,,,,,,,,,"20/Jun/23 14:15;brandon.williams;Ditto what I said on CASSANDRA-18608:

bq. I think we can just suppress this, we don't need to be too concerned about corruption when reading streams/disk crashing us, and we've lived with it this long without issue. Owasp is currently experiencing transient failures though, so I can't test my patch and will have to check later.;;;","22/Jun/23 16:45;brandon.williams;Going to handle these together on CASSANDRA-18608;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"snappy-java vulnerability: CVE-2023-34455, CVE-2023-34454, CVE-2023-34453",CASSANDRA-18608,13540519,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,18/Jun/23 13:37,26/Jun/23 11:15,13/Jul/23 08:41,26/Jun/23 11:15,3.0.30,3.11.16,4.0.11,4.1.3,5.0,,Feature/Compression,,,0,,,,,"Failing owasp:

[https://nvd.nist.gov/vuln/detail/CVE-2023-34455]
{quote}Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.
{quote}

[https://nvd.nist.gov/vuln/detail/CVE-2023-34454]
{quote}Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing an unrecoverable fatal error. 
{quote}

[https://nvd.nist.gov/vuln/detail/CVE-2023-34453]
{quote}Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error.
{quote}
",,bereng,kkierer,tsteinmaurer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18609,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 26 11:15:40 UTC 2023,,,,,,,All,,,,"0|z1imq8:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/d99bccd6493ceb7aed4e05b05f81913ea876d855,,,,,,,,,run CI,,,,,"20/Jun/23 14:14;brandon.williams;I think we can just suppress this, we don't need to be too concerned about corruption when reading streams/disk crashing us, and we've lived with it this long without issue.  Owasp is currently experiencing transient failures though, so I can't test my patch and will have to check later.;;;","22/Jun/23 17:09;brandon.williams;Patch to suppress.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1074/workflows/2006f093-f5c6-4c00-9dd8-96afb295b36e]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1073/workflows/be711171-c039-47e7-9f7d-07297682372c]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1071/workflows/b10406d4-c0c7-412f-bddc-5298544ef811], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1071/workflows/c11a6de4-0660-4558-a5cf-1de4ee90febc]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1070/workflows/e19133de-750c-4676-83bb-a67fbcc88aa4], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1070/workflows/fce93d27-1d3a-4ebf-a27e-ec657fabc52f]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1072/workflows/f9c88208-04b6-466b-b692-4be3bff9a575], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1072/workflows/0dbd2dc5-02a3-4cc6-84a0-29ff766524ce]|
;;;","23/Jun/23 05:25;bereng;Meh I can't check the CVE's right now, their website is down. But why replace the comment from CASSANDRA-17907 to CASSANDRA-16150? Checking the tickets the original comment seems the correct one?;;;","23/Jun/23 08:38;bereng;Ok could check it out now. Wouldn't it be better to try to update the lib? or is that bringing some undesired side effect?;;;","23/Jun/23 10:50;brandon.williams;bq. Wouldn't it be better to try to update the lib? 

I don't think that will produce any observable advantages, and doing it this late in the 3.0/3.11 game is not prudent imo.

bq. But why replace the comment from CASSANDRA-17907 to CASSANDRA-16150? 

Because they conflicted between branches so to make future merges easier I decided to pick a winner.  Both are correct enough and the real source of truth is blame anyway.;;;","23/Jun/23 11:59;bereng;Wouldn't updating it for at least 4.0+ prevent future unintended violations of the CVE?;;;","23/Jun/23 14:47;brandon.williams;One could argue if there isn't justification for other branches, we would just be softening our policy to do it in others.  The most risk averse thing we can do is nothing, since we won't introduce any new changes that would carry the possibility of regression.  Without any past occurrences to bolster a hypothetical future where they exist, I think that's unlikely to happen too.

All of that said, I think snappy is pretty solid and has generally only been upgraded for better non-x86 support in the past, so we probably won't run into another chance to upgrade for a while, so let's see how CI looks.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-upgrade-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1076/workflows/8ffef323-6068-4b2c-9f7f-1032013abfb0], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1076/workflows/c2ca8085-c78a-4b77-bffa-fd04eacbf168]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-upgrade-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1077/workflows/af504bcc-0f03-41bc-b374-def601d50409], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1077/workflows/025a4885-8b5e-4016-b1ac-30e764094379]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18608-upgrade-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1075/workflows/cb792fba-04d4-4265-ac2d-dd5f99537a12], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1075/workflows/acc2c087-b4da-4b49-8569-a7deea749519]|


;;;","26/Jun/23 05:10;bereng;Given 4.0+ are active and will get contributions updating snappy is the right thing to do imo. I only see known failures. +1 to PRs to ignore <4.0 and update 4.0+;;;","26/Jun/23 11:15;brandon.williams;Committed suppressions to 3.11 and 3.0, upgraded snappy to 1.1.10.1 in higher branches.  Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assertion error when describing mv as table,CASSANDRA-18596,13539973,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,masokol,masokol,masokol,14/Jun/23 06:08,19/Jun/23 15:41,13/Jul/23 08:41,19/Jun/23 15:40,4.0.11,4.1.3,5.0,,,,Feature/Materialized Views,,,0,,,,,"When describing materialized view as a table Cassandra gets an assertion error.

Steps to reproduce:
CREATE KEYSPACE test WITH replication = \{'class': 'NetworkTopologyStrategy', 'datacenter1': '3'} AND durable_writes = true;
CREATE TABLE test.table1 (key1 text,key2 int,value int,PRIMARY KEY (key1, key2));
CREATE MATERIALIZED VIEW test.table1_by_value AS SELECT key1, key2, value FROM test.table1 WHERE value IS NOT NULL AND key1 IS NOT NULL AND key2 IS NOT NULL PRIMARY KEY(value, key1, key2);
DESCRIBE MATERIALIZED VIEW test.table1;
DESCRIBE TABLE test.table1_by_value;
DESCRIBE TABLE test.non_existing;
 
From the above the ""DESCRIBE TABLE test.table1_by_value;"" throws an assertion error while ""DESCRIBE TABLE test.non_existing;"" returns a meaningful error msg.",,masokol,smiklosovic,,,,,,,,"masokol opened a new pull request, #2418:
URL: https://github.com/apache/cassandra/pull/2418

   (no comment)


;15/Jun/23 07:51;githubbot;600","masokol opened a new pull request, #2419:
URL: https://github.com/apache/cassandra/pull/2419

   (no comment)


;15/Jun/23 07:52;githubbot;600","smiklosovic closed pull request #2417: CASSANDRA-18596-4.0
URL: https://github.com/apache/cassandra/pull/2417


;19/Jun/23 15:41;githubbot;600","smiklosovic closed pull request #2418: CASSANDRA-18596-4.1
URL: https://github.com/apache/cassandra/pull/2418


;19/Jun/23 15:41;githubbot;600","smiklosovic closed pull request #2419: CASSANDRA-18596-trunk
URL: https://github.com/apache/cassandra/pull/2419


;19/Jun/23 15:41;githubbot;600",,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,0.0,masokol,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 19 15:40:18 UTC 2023,,,,,,,All,,,,"0|z1ijds:",9223372036854775807,,,,brandon.williams,smiklosovic,,Normal,,4.0,,https://github.com/apache/cassandra/commit/92d0a40c96c49a5fa8178ee03be170fd26b44340,,,,,,,,,"Unittest included, see linked PRs",,,,,"14/Jun/23 06:12;masokol;[Preliminary PR for 4.0|https://github.com/apache/cassandra/pull/2417];;;","15/Jun/23 07:57;masokol;The patch merges cleanly to 4.1 and trunk. If someone could run CI that would be great.;;;","15/Jun/23 14:49;brandon.williams;Here we go: 

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18596-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1066/workflows/de2a0254-f430-4dcd-9c55-8db3b374c482], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1066/workflows/48ec8f72-a900-4c10-a973-6c827e1a78be]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18596-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1068/workflows/7cbdffeb-fcc1-4329-824c-b8bac5b20b18], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1068/workflows/0f549606-b7fa-4220-acf1-79d37799783e]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18596-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1067/workflows/40fc884f-b93e-4d29-a175-6a19edec2199], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1067/workflows/0509d6cb-78c8-49ae-8554-3ac7a7ace50c]|
;;;","15/Jun/23 16:41;brandon.williams;4.0: CASSANDRA-18366, the infamous CASSANDRA-16677
4.1: unrelated auth_test timeout
trunk: CASSANDRA-18440

+1 from me.;;;","19/Jun/23 15:37;smiklosovic;+1;;;","19/Jun/23 15:40;smiklosovic;[~masokol] thank you for your contribution.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CircleCI: Add separate approval step for oa utests on separate workflows,CASSANDRA-18593,13539845,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,adelapena,adelapena,13/Jun/23 12:15,16/Jun/23 12:10,13/Jul/23 08:41,16/Jun/23 12:10,5.0,,,,,,CI,,,0,,,,,"CASSANDRA-14227 added new {{j*_utests_oa}} jobs to run unit tests with the new, not-default ""oa"" sstable format. Those tests depend on the {{start_j*_unit_tests}} approval step on the separate workflows.

However, the separate workflow is meant to allow running jobs individually, and having a common approval step for both {{j*_unit_tests}} and {{j*_utests_oa}} prevents us from doing so. That's the case for example of the development of CASSANDRA-18504, where I want to run a single unit test job without caring about the specialization, but the common approval step forces me to run both jobs, duplicating the costs. An example run can be seen [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2948/workflows/67e5bfcd-c8df-4558-a889-c8828e8dd310].

I think that {{j*_utests_oa}} should have its own separate approval step, the same way that {{{}j*_utest_cdc{}}}, {{{}j*_utest_fqltool{}}}, {{j*_utest_compression}} or {{j*_utest_system_keyspace_directory}} have their own approval step.",,adelapena,bereng,,,,,,,,"adelapena opened a new pull request, #2413:
URL: https://github.com/apache/cassandra/pull/2413

   (no comment)


;13/Jun/23 12:18;githubbot;600","adelapena closed pull request #2413: CASSANDRA-18593 trunk: Add separate approval step for oa utests on separate workflows
URL: https://github.com/apache/cassandra/pull/2413


;16/Jun/23 12:07;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,CASSANDRA-14227,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,Correctness -> API / Semantic Definition,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jun 16 12:09:38 UTC 2023,,,,,,,All,,,,"0|z1iilc:",9223372036854775807,,,,bereng,,,Low,,5.x,,https://github.com/apache/cassandra/commit/83a331624674755ba90ad19bf206c351b5fcdff5,,,,,,,,,"Multiple CircleCI configs are tested here:
 * [j8-j11 free|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j8-j11-free]
 * [j8-j11 paid|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j8-j11-paid]
 * [j11-j17 free|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j11-j17-free]
 * [j11-j17 paid|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j11-j17-paid]",,,,,"13/Jun/23 12:29;adelapena;Here are some example configs using [the proposed patch|https://github.com/apache/cassandra/pull/2413]:
 * [j8-j11 free|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j8-j11-free]
 * [j8-j11 paid|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j8-j11-paid]
 * [j11-j17 free|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j11-j17-free]
 * [j11-j17 paid|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=18593-trunk-j11-j17-paid];;;","15/Jun/23 09:13;bereng;LGTM +1;;;","16/Jun/23 12:09;adelapena;Committed to {{trunk}} as [83a331624674755ba90ad19bf206c351b5fcdff5|https://github.com/apache/cassandra/commit/83a331624674755ba90ad19bf206c351b5fcdff5].

Thanks for the review;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport Cassandra-10508 Remove hard-coded SSL cipher suites and protocols,CASSANDRA-18575,13539152,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,xgerman42,xgerman42,xgerman42,07/Jun/23 22:13,21/Jun/23 11:28,13/Jul/23 08:41,21/Jun/23 11:28,3.0.30,,,,,,Messaging/Internode,,,0,,,,,Cassandra 3.0 has ciphers hard coded and thus not allow more recent and secure ciphers for storage connections complicating migrations to later versions.,,bereng,xgerman42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,xgerman42,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 21 11:28:52 UTC 2023,,,,,,,All,,,,"0|z1iebc:",9223372036854775807,,,,bereng,brandon.williams,,Normal,,NA,,https://github.com/apache/cassandra/commit/e67fa69114ca8ebd79e31eaced7d91913f91a0c2,,,,,,,,,run CI,,,,,"07/Jun/23 22:16;xgerman42;[[CASSANDRA-18575] Backport remove hard-coded SSL cipher suites and protocols by xgerman · Pull Request #2397 · apache/cassandra (github.com)|https://github.com/apache/cassandra/pull/2397];;;","07/Jun/23 22:23;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18575-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1046/workflows/b0b8a6d7-5941-45e3-b82a-662ddb7f7692], [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2507/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2507/pipeline]
|;;;","08/Jun/23 10:49;brandon.williams;Circle just has: CASSANDRA-17702
Jenkins adds: CASSANDRA-17313, CASSANDRA-17329, CASSANDRA-17139, CASSANDRA-15239

All failures are known, everything looks good to me, +1.;;;","21/Jun/23 07:12;bereng;Agreed all failures align to baseline 3.0 both jenkins and circle. +1;;;","21/Jun/23 11:28;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bti shouldn't be available in compatibility mode,CASSANDRA-18569,13538889,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,06/Jun/23 08:54,09/Jun/23 07:37,13/Jul/23 08:41,09/Jun/23 07:37,5.0,,,,,,Local/SSTable,,,0,,,,,When having a node in compatibility mode sstable tries shouldn't be an option.,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 06 11:57:27 UTC 2023,,,,,,,All,,,,"0|z1icow:",9223372036854775807,,,,adelapena,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/70389abcf78d913ea77b81cf226b10439f8db385,,,,,,,,,See PR,,,,,"06/Jun/23 11:57;bereng;[~adelapena] this one should be a very quick review for you if you find a gap.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
guava vulnerability CVE-2023-2976,CASSANDRA-18562,13538565,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,02/Jun/23 10:37,05/Jul/23 04:19,13/Jul/23 08:41,21/Jun/23 11:20,3.0.30,3.11.16,4.0.11,4.1.3,5.0,,Build,,,0,,,,,This is failing the OWASP check.,,bereng,e.dimitrova,jinguiying,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jul 05 02:01:36 UTC 2023,,,,,,,All,,,,"0|z1iaow:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/e28ef4089ecbc2f64182de0ba5c9e9dea113195b,,,,,,,,,run CI,,,,,"02/Jun/23 11:17;brandon.williams;Near as I can tell this is a false positive and the CVE does not exist, nor any has been filed in 2023 against guava:

https://nvd.nist.gov/vuln/detail/CVE-2023-2976
https://www.cvedetails.com/product/52274/Google-Guava.html?vendor_id=1224

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18562-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1041/workflows/0572683c-4f4a-418c-b6b6-4ddaa22f33b5]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18562-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1042/workflows/6aad569d-bcd3-4e86-bae4-baaf61031d52]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18562-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1044/workflows/29253ff0-6d78-4019-bac1-77bf2bbd0819], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1044/workflows/749d7eaf-c2e7-4b29-b9a0-932221db8c4c]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18562-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1043/workflows/bd637682-9a02-4db2-9d9f-977aa07acdaa], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1043/workflows/a95b57ec-bda7-464d-ad68-2081e1060c9a]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18562-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1040/workflows/f260b72d-6175-4a1a-9bfb-b4ff3e8ff177], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1040/workflows/37004408-718c-4833-8cc3-9227b6cd7648]|
;;;","05/Jun/23 06:16;bereng;Agreed there is no such thing as CVE-2023-2976 apparently. +1;;;","05/Jun/23 11:00;brandon.williams;Thanks, committed.;;;","18/Jun/23 13:31;brandon.williams;Reopening as there is now information about this vulnerability in the links provided earlier:

 {quote}
Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class. Even though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows. 
{quote};;;","18/Jun/23 14:37;e.dimitrova;In the latest versions guava is tested also with Java 17 and recently I did a quick CI run of Cassandra with latest guava and I did not see any surprises. But we need to check also the change log. I think it is worth it to upgrade. Maybe not highest priority but before 5.0. I was planning on opening a ticket, but maybe we can also use this one for the effort? Let me know. I can also take it myself in a few weeks;;;","20/Jun/23 13:16;brandon.williams;I am reluctant to upgrade this late in 3.0's lifetime, but the good news is I don't think we need to, as I don't believe we've ever used FileBackedOutputStream.  So I think we should just resolve this ticket again since we have already suppressed and there's nothing left to do.;;;","20/Jun/23 13:27;e.dimitrova;{quote}I am reluctant to upgrade this late in 3.0's lifetime
{quote}
right; but I do not see a reason why not to upgrade trunk;;;","20/Jun/23 13:28;brandon.williams;Sure, but not on this ticket.;;;","20/Jun/23 13:32;e.dimitrova;{quote}Sure, but not on this ticket.
{quote}
(y);;;","21/Jun/23 04:20;bereng;Right and 3.0 shouldn't be getting new code in, we should be good +1.;;;","05/Jul/23 02:01;jinguiying;Anyone know when the 4.0.11 will be delivered?  Plan to update to the 4.0.11 to fix this VA issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect IP used for gossip across DCs with prefer_local=true,CASSANDRA-18560,13538448,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Urgent,Fixed,brandon.williams,bvernon,bvernon,01/Jun/23 16:58,10/Jul/23 15:08,13/Jul/23 08:41,10/Jul/23 15:07,4.0.11,4.1.3,5.0,,,,Cluster/Gossip,,,0,,,,,"After installing a new node using 4.0.10 we experienced a situation where the new node attempted to connect to the private ip of a random number of nodes remote DCs which are only accessible via public ip for cross dc communications.

The only impact was new nodes outbound connections, inbound from pre-4.0.10 were not affected.  system.peers_v2 (below) showed that the preferred_ip and preferred_port as null, only those in 4.0.10 nodes dc have perferred_ip values as expected.

We believe the issue originated with https://issues.apache.org/jira/browse/CASSANDRA-16718 

Details on cluster:
 * All nodes have public IP configured as well as private IP
 * Listen/rpc addressrs are configured for private ip, broadcast is public IP
 * prefer_local=true is enabled for all nodes

The log that showed the connection failing:
{code:java}
INFO  [Messaging-EventLoop-3-8] 2023-06-01 00:14:21,565 NoSpamLogger.java:92 - /99.81.<redacted>:7000->/44.208.<redacted>:7000-URGENT_MESSAGES-[no-channel] failed to connectio.netty.channel.ConnectTimeoutException: connection timed out: /10.26.5.11:7000  at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe$2.run(AbstractEpollChannel.java:576){code}
99 and 44 instances can only access each other using public ips.

gossipinfo output from 4.0.10 node
{code:java}
/44.208.<redacted>
  generation:1661113358
  heartbeat:25267691
  LOAD:25267683:1.7882044268E10
  SCHEMA:24692061:e98b918d-499f-3ccc-8dbe-5af31f685bda
  DC:13:us-east-1
  RACK:15:1a
  RELEASE_VERSION:6:4.0.5
  NET_VERSION:2:12
  HOST_ID:3:9a41e668-060d-4cfe-bb1e-013f5116422d
  RPC_READY:1407:true
  INTERNAL_ADDRESS_AND_PORT:9:10.26.5.11:7000
  NATIVE_ADDRESS_AND_PORT:4:44.208.<redacted>:9042
  STATUS_WITH_PORT:1393:NORMAL,-2262036356854762881
  SSTABLE_VERSIONS:7:big-nb
  TOKENS:1392:<hidden> {code}
Peers output from 4.0.10 node:
{code:java}
   peer           | peer_port | data_center         | host_id                              | native_address | native_port | preferred_ip | preferred_port | rack | release_version | schema_version                       | tokens----------------+-----------+---------------------+--------------------------------------+----------------+-------------+--------------+----------------+------+-----------------+--------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  44.208.<redacted> |      7000 |      us-east-1 | 9a41e668-060d-4cfe-bb1e-013f5116422d |  44.208.<redacted> |        9042 |         null |           null |   1a |           4.0.5 | e98b918d-499f-3ccc-8dbe-5af31f685bda |    {'-2262036356854762881', '-4197710115038136897', '-7072386316096662315', '2085255826742630980', '249732489387853170', '4976300208126705818', '7187184456885833289', '8777189009399731927'} {code}
To solve temporarily we routed outbound traffic to the private ip to public using iptables which resulted in successful outbound connections.",,bereng,bvernon,masokol,tommy_s,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-16718,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jul 10 15:07:34 UTC 2023,,,,,,,All,,,,"0|z1i9z4:",9223372036854775807,,,,,,,Critical,,4.0.10,,,,,,,,,,,,,,,,"12/Jun/23 19:28;brandon.williams;I can see that we are doing the wrong thing [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/locator/ReconnectableSnitchHelper.java#L78] because maybeReconnectWithNewIp consults SystemKeyspace.updatePreferredIP, but I don't understand why this would defeat the local dc check [right before it|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/locator/ReconnectableSnitchHelper.java#L76].  [~bvernon] do you happen to have the debug log from a 4.0.10 node that had this problem?;;;","14/Jun/23 08:46;masokol;Hey Brandon,

The issue is that streaming uses OutboundConnectionSettings::connectTo() directly without checking if it's local DC or not. Also it completely ignores prefer_local so the problem exists even with prefer_local=false.

Using OutboundConnectionSettings.withConnectTo(using connectTo): [NettyStreamingMessageSender.java#L241|https://github.com/apache/cassandra/blob/5143bd81e82c35ce686dd40860ec2aebe30aaf22/src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java#L241]

Using OutboundConnectionSettings.withDefaults(which uses connectTo): [DefaultConnectionFactory.java#L49|https://github.com/apache/cassandra/blob/5143bd81e82c35ce686dd40860ec2aebe30aaf22/src/java/org/apache/cassandra/streaming/DefaultConnectionFactory.java#L49]

withDefaults: [OutboundConnectionSettings.java#L481|https://github.com/apache/cassandra/blob/5143bd81e82c35ce686dd40860ec2aebe30aaf22/src/java/org/apache/cassandra/net/OutboundConnectionSettings.java#L481]

ConnectTo (the connectTo is always null in case of streaming): [OutboundConnectionSettings.java#L451|https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/net/OutboundConnectionSettings.java#L451]

 ;;;","15/Jun/23 14:05;brandon.williams;Ah, streaming, that makes sense.  Perhaps we should have removed the preferred_ip usage there as well, as I thought about on CASSANDRA-16718 but decided against... it seems that the compromise was a mistake.  I'm not sure we should take another swing at that for the next release, and perhaps should just revert CASSANDRA-16718.  I'm raising the priority of this ticket to hopefully block any releases without it while this is in progress.;;;","15/Jun/23 14:59;bvernon;[~brandon.williams] I don't have a debug log when this happened, we only keep them for a short period of time, but it looks like you were able find the cause of the problem. The connection timeout I shared was the only relevant log I could find since the errors were only on the node joining trying to connect to remote hosts.

I appreciate the quick investigation and attention. If we have another node that exhibits the same issue I will capture the full logs to share.;;;","15/Jun/23 15:10;brandon.williams;Thanks for the update.

bq.  The connection timeout I shared was the only relevant log I could find

Related, I'm having a difficult time coming up with a way to test this.;;;","22/Jun/23 03:10;bvernon;Is there something I can do on my end to help facilitate testing or get you additional info?;;;","22/Jun/23 10:53;brandon.williams;No, I think we have what we need here, but thanks.;;;","07/Jul/23 22:12;bvernon;We did an upgrade with an existing instance from 4.1.1 to 4.1.2 and the same exact issue happened with nodes that previously had no issues connecting across DC using the public IP assigned. Only outbound connections were affected and it was random across the nodes not being able to use the public IP. Downgrading to 4.1.1 restored normal operations.

This seems like a much larger bug that will definitely impact clusters that have both local private IPs and public IPs for cross dc access.

Error message for one node which should be using IP 34.248.<redacted> but instead is using 10.34.37.10 which is the private IP of the host and only available in the local VPC.
{code:java}
WARN  [Messaging-EventLoop-3-3] 2023-07-07 21:52:27,929 NoSpamLogger.java:108 - /3.114.<redacted>:7000->/34.248<redacted>:7000-URGENT_MESSAGES-[no-channel] dropping message of type ECHO_RSP whose timeout expired before reaching the networkINFO  [Messaging-EventLoop-3-3] 2023-07-07 21:52:47,391 NoSpamLogger.java:105 - /3.114.<redacted>:7000->/34.248.<redacted>:7000-URGENT_MESSAGES-[no-channel] failed to connectio.netty.channel.ConnectTimeoutException: connection timed out: /10.34.37.10:7000  at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe$2.run(AbstractEpollChannel.java:576)  at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)  at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:170)  at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)  at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)  at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:384)  at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)  at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)  at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)  at java.base/java.lang.Thread.run(Thread.java:829) {code}
 

Nodetool status showing the randomness of the cross-dc nodes picking to use the private ip.
{code:java}
ubuntu@10.34.51.10(ap-northeast-1-cassandra-node0):~# ntool status
Datacenter: ap-northeast-1
==========================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address         Load      Tokens  Owns (effective)  Host ID                               Rack
UN  54.238.<redacted>  4.26 GiB  8       100.0%            4affb962-7bf0-42f7-9956-fdbec1c07e5f  1d
UN  52.196.<redacted>   3.71 GiB  8       100.0%            6857d4de-c497-440f-a2ff-c4d18907fa39  1c
UN  3.114.<redacted>    4.28 GiB  8       100.0%            d43d2fb3-27a0-4ecd-9887-741c9fc010da  1a

Datacenter: eu-west-1
=====================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address         Load      Tokens  Owns (effective)  Host ID                               Rack
UN  54.229.<redacted>   4.06 GiB  8       100.0%            a8c866d3-bde0-453d-8892-dbe544b7e910  1a
UN  52.18.<redacted>    4.06 GiB  8       100.0%            4530631d-7e2c-455d-89ff-3ddd3e9c64b7  1b
DN  34.248.<redacted>   4.06 GiB  8       100.0%            26daf7cf-5f1a-4969-a7be-c58ff36e9176  1c

Datacenter: us-east-1
=====================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address         Load      Tokens  Owns (effective)  Host ID                               Rack
DN  52.54.<redacted>     4.06 GiB  8       100.0%            a2edd4b1-d286-441d-a0b1-5d98b88ee2f2  1c
UN  34.203.<redacted>2  4.08 GiB  8       100.0%            5c64292f-df51-45f3-b3b6-ed325ea669ff  1a
UN  3.229.<redacted>   4.06 GiB  8       100.0%            53a6d308-25b6-4d87-8581-3cc3fd43c165  1b

Datacenter: us-west-2
=====================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address         Load      Tokens  Owns (effective)  Host ID                               Rack
DN  44.233.<redacted>   4.26 GiB  8       100.0%            d53ab9bf-2606-4516-a689-7e19d053d857  2b
UN  54.200.<redacted>  4.26 GiB  8       100.0%            4ec7c54d-465c-489a-8aed-5ba38264cec8  2a
DN  52.27.<redacted>     4.26 GiB  8       100.0%            8ae55f1a-bf5a-4ce4-892b-4812773036fa  2c {code};;;","07/Jul/23 22:15;brandon.williams;This isn't really surprising given that the fixvers on CASSANDRA-16718 include 4.1.2, but I will revert it and see about releasing.;;;","10/Jul/23 14:58;bereng;+1 to revert as it seems things got worse with the 'fix';;;","10/Jul/23 15:07;brandon.williams;Reverted in 6fa548f9e97ff317307ba23411e570f292a23793;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove dh_python use from debian packaging,CASSANDRA-18558,13538329,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,31/May/23 22:04,01/Jun/23 20:31,13/Jul/23 08:41,01/Jun/23 20:05,2.2.20,3.0.30,3.11.16,4.0.11,4.1.3,5.0,Packaging,,,0,,,,,"It looks like dh_python2 has been removed from debian, but it also looks like we don't need it:

{noformat}
E: dh_python2 dh_python2:408: no package to act on (python-foo or one with ${python:Depends} in Depends)
{noformat}",,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Packaging -> Package Distribution,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Jun 01 20:31:18 UTC 2023,,,,,,,All,,,,"0|z1i994:",9223372036854775807,,,,mck,,,Normal,,NA,,https://github.com/apache/cassandra/commit/527c0cb3a0ed842e08685d9cb9954ddb99f93465,,,,,,,,,"run CI, test packaging",,,,,"31/May/23 22:06;brandon.williams;We should also see if our use of dh_python3 in later branches is needed.;;;","31/May/23 22:12;brandon.williams;Test build on 3.11 (since that is currently broken) running: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2499/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2499/pipeline]

Here's one on 4.0 with dh_python3 removed: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2501/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2501/pipeline]
;;;","01/Jun/23 19:46;brandon.williams;Those look good and I've manually tested the other branches; we can safely remove dh_python altogether.;;;","01/Jun/23 19:56;mck;+1 ( https://github.com/driftx/cassandra/commit/afd6602eb7e6f883bfa1df43d75c8f3c9b6a5d99 ) 

Should we take this patch further back, to 2.2 too? ;;;","01/Jun/23 20:05;brandon.williams;Committed.;;;","01/Jun/23 20:31;brandon.williams;I tested and backported this to 2.2 so packages there can build.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generate.sh -s param to skip autodetection of tests,CASSANDRA-18553,13537749,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,bereng,bereng,bereng,26/May/23 05:47,12/Jun/23 08:07,13/Jul/23 08:41,12/Jun/23 08:07,3.0.30,3.11.16,4.0.11,4.1.3,5.0,,CI,,,0,,,,,When using generate.sh auto detection of modified tests always kicks in. That can be a problem during dev when you want to test a given set of tests without getting all the others in the way. Also when you want to run the script without having to checkout the extra branches auto detection needs.,,adelapena,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,bereng,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jun 09 11:12:28 UTC 2023,,,,,,,All,,,,"0|z1i5oo:",9223372036854775807,,,,adelapena,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/c91e2714b9c43f7959da1b698f2c4e28c94b9b6d,,,,,,,,,Tested manually,,,,,"26/May/23 05:57;bereng;[~adelapena] this should be a quick one as we've already talked about it. If you're happy I'll push the rest of the PRs.;;;","26/May/23 12:12;adelapena;Looks good to me, I have left a couple of nits on the PR. This should also be applied to 3.0 and 3.11, since the automatic detection also exists on those branches. By the way, shouldn't this be a new feature rather than a bug?;;;","26/May/23 12:29;adelapena;[~bereng] you might be interested in being second reviewer on CASSANDRA-17997. It adds a parameter to specify the base branch, which is one of the reasons why the detector of changes sometimes adds more tests than expected when the patch hasn't been rebased in a while.;;;","06/Jun/23 08:37;bereng;CASSANDRA-17997 should merge soon. Let's wait and I'll get this done.;;;","07/Jun/23 10:17;adelapena;I've just merged CASSANDRA-17997.;;;","07/Jun/23 12:11;bereng;I was going to, just waiting on your +1 so thanks. I'll do this next :-);;;","09/Jun/23 08:05;bereng;All PRs added and tested manually;;;","09/Jun/23 11:12;adelapena;They look good to me, +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Debian packaging source should exclude git subdirectory,CASSANDRA-18552,13537640,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mck,brandon.williams,brandon.williams,25/May/23 11:05,26/May/23 09:52,13/Jul/23 08:41,26/May/23 09:52,3.0.29,3.11.16,4.0.10,4.1.2,5.0,,Packaging,,,0,,,,,This balloons the source up to 400+MB instead of the ~13MB necessary.,,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,mck,,,,,,,,,,,,Packaging -> Source Distribution,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 26 09:52:19 UTC 2023,,,,,,,All,,,,"0|z1i50g:",9223372036854775807,,,,brandon.williams,mck,,Normal,,NA,,https://github.com/apache/cassandra-builds/commit/9ffe201ce0d33dd544c85030c2261883ac73aadc,,,,,,,,,tested with releases 4.0.10 and 4.1.2,,,,,"25/May/23 13:43;mck;The line 
{code}
dpkg-buildpackage -rfakeroot -uc -us --source-option=--tar-ignore=.git
{code}

in cassandra-builds/docker/build-debs.sh
worked.;;;","25/May/23 13:46;brandon.williams;I am +1 if you want to just commit that small change.;;;","25/May/23 15:40;mck;full patch at https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:cassandra-builds:mck/18552;;;","25/May/23 15:47;brandon.williams;LGTM, +1;;;","26/May/23 09:52;mck;Committed as [9ffe201ce0d33dd544c85030c2261883ac73aadc |https://github.com/apache/cassandra-builds/commit/9ffe201ce0d33dd544c85030c2261883ac73aadc].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Waiting for gossip to settle does not wait for live endpoints,CASSANDRA-18543,13537232,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,cam1982,cam1982,23/May/23 00:36,15/Jun/23 13:58,13/Jul/23 08:41,15/Jun/23 13:58,3.11.16,4.0.11,4.1.3,5.0,,,Cluster/Gossip,,,0,,,,,"When a node starts it will get endpoint states (via shadow round) but have all nodes marked as down. The problem is the wait to settle only checks the size of endpoint states is stable before starting Native transport. Once native transport starts it will receive queries and fail consistency levels such as LOCAL_QUORUM since it still thinks nodes are down.

This is problem for a number of large clusters for our customers. The cluster has quorum but due to this issue a node restart is causing a bunch of query errors.

My initial solution to this was to only check live endpoints size in addition to size of endpoint states. This worked but I noticed in testing this fix that there also a lot of duplication of checking the same node (via Echo messages) for liveness. So the patch also removes this duplication of checking node is UP in markAlive.

The final problem I found while testing is sometimes could still not see a change in live endpoints due to only 1 second polling, so the patch allows for overridding the settle parameters. I could not reliability reproduce this but think its worth providing a way to override these hardcoded values.",,cam1982,smiklosovic,,,,,,,,"smiklosovic opened a new pull request, #2376:
URL: https://github.com/apache/cassandra/pull/2376

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;28/May/23 17:19;githubbot;600","smiklosovic commented on code in PR #2376:
URL: https://github.com/apache/cassandra/pull/2376#discussion_r1208608695


##########
src/java/org/apache/cassandra/gms/Gossiper.java:
##########
@@ -1299,14 +1304,39 @@ void notifyFailureDetector(InetAddressAndPort endpoint, EndpointState remoteEndp
 
     private void markAlive(final InetAddressAndPort addr, final EndpointState localState)
     {
+        if (inflightEcho.contains(addr))
+        {
+            return;
+        }
+        inflightEcho.add(addr);
+
         localState.markDead();
 
         Message<NoPayload> echoMessage = Message.out(ECHO_REQ, noPayload);
         logger.trace(""Sending ECHO_REQ to {}"", addr);
-        RequestCallback echoHandler = msg ->
+        RequestCallback echoHandler = new RequestCallback()
         {
-            // force processing of the echo response onto the gossip stage, as it comes in on the REQUEST_RESPONSE stage
-            runInGossipStageBlocking(() -> realMarkAlive(addr, localState));
+            @Override
+            public void onResponse(Message msg)
+            {
+                // force processing of the echo response onto the gossip stage, as it comes in on the REQUEST_RESPONSE stage
+                runInGossipStageBlocking(() -> {
+                    realMarkAlive(addr, localState);
+                    inflightEcho.remove(addr);

Review Comment:
   @grom358 what happens when `realMarkAlive` throws an exception? (it might happen if you check closely). Is it guaranteed that exception thrown in `realMarkAlive` will invoke `onFailure`? 
   
   How I understand it is that `onResponse` will be invoked when we have acutal answer from other node, if we do not or there is a failure, `onFailure` is invoked. But does it mean that when we get a response and this method is called, when it fails, onFailure is invoked too?



;28/May/23 17:27;githubbot;600","smiklosovic commented on code in PR #2376:
URL: https://github.com/apache/cassandra/pull/2376#discussion_r1208608770


##########
src/java/org/apache/cassandra/gms/Gossiper.java:
##########
@@ -2224,21 +2255,23 @@ public static void waitToSettle()
         {
             return;
         }
-        final int GOSSIP_SETTLE_MIN_WAIT_MS = 5000;
-        final int GOSSIP_SETTLE_POLL_INTERVAL_MS = 1000;
-        final int GOSSIP_SETTLE_POLL_SUCCESSES_REQUIRED = 3;
+        final int GOSSIP_SETTLE_MIN_WAIT_MS = Integer.getInteger(""cassandra.gossip_settle_min_wait_ms"", 5000);

Review Comment:
   This should be moved to CassandraRelevantProperties



;28/May/23 17:27;githubbot;600","smiklosovic commented on code in PR #2376:
URL: https://github.com/apache/cassandra/pull/2376#discussion_r1208608695


##########
src/java/org/apache/cassandra/gms/Gossiper.java:
##########
@@ -1299,14 +1304,39 @@ void notifyFailureDetector(InetAddressAndPort endpoint, EndpointState remoteEndp
 
     private void markAlive(final InetAddressAndPort addr, final EndpointState localState)
     {
+        if (inflightEcho.contains(addr))
+        {
+            return;
+        }
+        inflightEcho.add(addr);
+
         localState.markDead();
 
         Message<NoPayload> echoMessage = Message.out(ECHO_REQ, noPayload);
         logger.trace(""Sending ECHO_REQ to {}"", addr);
-        RequestCallback echoHandler = msg ->
+        RequestCallback echoHandler = new RequestCallback()
         {
-            // force processing of the echo response onto the gossip stage, as it comes in on the REQUEST_RESPONSE stage
-            runInGossipStageBlocking(() -> realMarkAlive(addr, localState));
+            @Override
+            public void onResponse(Message msg)
+            {
+                // force processing of the echo response onto the gossip stage, as it comes in on the REQUEST_RESPONSE stage
+                runInGossipStageBlocking(() -> {
+                    realMarkAlive(addr, localState);
+                    inflightEcho.remove(addr);

Review Comment:
   @grom358 what happens when `realMarkAlive` throws an exception? (it might happen if you check closely). Is it guaranteed that exception thrown in `realMarkAlive` will invoke `onFailure`? 
   
   How I understand it is that `onResponse` will be invoked when we have actual answer from other node, if we do not or there is a failure, `onFailure` is invoked. But does it mean that when we get a response and this method is called, when it fails, onFailure is invoked too?



;28/May/23 17:31;githubbot;600","smiklosovic closed pull request #2361: CASSANDRA-18543 Gossiper#waitToSettle to wait for live endpoints
URL: https://github.com/apache/cassandra/pull/2361


;15/Jun/23 13:58;githubbot;600","smiklosovic closed pull request #2376: CASSANDRA-18543 4.0
URL: https://github.com/apache/cassandra/pull/2376


;15/Jun/23 13:58;githubbot;600",,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,,,,,,,,"25/May/23 12:24;cam1982;gossip.patch;https://issues.apache.org/jira/secure/attachment/13058534/gossip.patch","25/May/23 12:24;cam1982;gossip4.patch;https://issues.apache.org/jira/secure/attachment/13058533/gossip4.patch",,,2.0,smiklosovic,,,,,,,,,,,,Availability,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 14 13:52:46 UTC 2023,,,,,,,All,,,,"0|z1i2i0:",9223372036854775807,,,,brandon.williams,,,Normal,,NA,,https://github.com/apache/cassandra/commit/64d953fdcac91715898454a3cb04d932910a70b7,,,,,,,,,CI,,,,,"23/May/23 00:39;cam1982;Another potential solution might be to allow shadow round to allow marking nodes as alive (ie UP). That is if you are just starting up and talk to another seed who has view of state of cluster, why can it not just use that as initial state for alive state?;;;","29/May/23 18:57;smiklosovic;4.0 https://github.com/apache/cassandra/pull/2361/files
j11 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2328/workflows/c193288a-7c33-4507-bd92-c7d859c380a2]
j8 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/2328/workflows/bd9a4ef4-0156-428e-8b77-701f5affcccf]
;;;","08/Jun/23 19:04;brandon.williams;I think this looks good and we're ready for the other branches.;;;","12/Jun/23 07:47;smiklosovic;builds:

3.11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2423/workflows/26a6636a-3b8a-4ccd-9d18-192f8945d42a
4.0 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2328/workflows/c193288a-7c33-4507-bd92-c7d859c380a2
4.0 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2328/workflows/bd9a4ef4-0156-428e-8b77-701f5affcccf
4.1 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2416/workflows/b308293d-082e-4700-89cc-e0f1971c82cb
4.1 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2416/workflows/ae61881c-eb8d-4572-92e5-3070ac560f4e
trunk j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2417/workflows/56e01f19-4b96-46e2-bdc7-b3d731bab2ab
trunk j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2417/workflows/c66ecba4-cfc7-4ccc-87e2-85079db8700d

branches:
3.11 https://github.com/instaclustr/cassandra/commits/CASSANDRA-18543-3.11
4.0 https://github.com/instaclustr/cassandra/commits/CASSANDRA-18543-4.0
4.1 https://github.com/instaclustr/cassandra/commits/CASSANDRA-18543-4.1
trunk: https://github.com/instaclustr/cassandra/commits/CASSANDRA-18543-trunk
;;;","14/Jun/23 13:52;brandon.williams;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AUTH requests use too much resources,CASSANDRA-18541,13536935,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,yury.vidineev,yury.vidineev,20/May/23 07:17,27/Jun/23 23:20,13/Jul/23 08:41,27/Jun/23 23:20,,,,,,,,,,0,,,,,"Hello. I see unexpected CPU usage in a rare situation that may be worth digging into.
We have C* 4.0.9 on Debian running on Java 11.0.18.
It's a small cluster of 3 nodes on commodity hardware (6 cores CPU, 32 Gb RAM, 2 x 512 Gb SSD NVME).
This ring has about 35 clients using Datastax Java Driver for Apache Cassandra.
In the driver connection settings, we use the following:
CONNECTION_POOL_LOCAL_SIZE = 400
CONNECTION_POOL_REMOTE_SIZE = 100
 
And for some reason, from time to time, it causes hundreds of AUTH requests per second that leads to an enormous CPU usage.
And yes, it's easy not to use these settings in the driver, leaving defaults that don't produce such an amount of AUTHs. But isn't it weird that ~150 AUTH rps consume ~1200% CPU?
Please see attached graphs.

I have the following in the settings:

authenticator: PasswordAuthenticator

authorizer: CassandraAuthorizer

roles_validity_in_ms: 600000

permissions_validity_in_ms: 600000

credentials_validity_in_ms: 600000

Please let me know if I can provide any other necessary information.
Thanks for your work. Cassandra is amazing :)",,djoshi,mmuzaf,smiklosovic,yury.vidineev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17812,,,,,,"20/May/23 07:07;yury.vidineev;Screenshot_20230520_000633.png;https://issues.apache.org/jira/secure/attachment/13058382/Screenshot_20230520_000633.png","20/May/23 07:07;yury.vidineev;Screenshot_20230520_000654.png;https://issues.apache.org/jira/secure/attachment/13058381/Screenshot_20230520_000654.png",,,2.0,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jun 27 23:20:32 UTC 2023,,,,,,,All,,,,"0|z1i0o0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"21/May/23 10:42;smiklosovic;I think this is a question more for Datastax Java driver Jira rather than for Cassandra itself.

Have you read all of this here? https://docs.datastax.com/en/developer/java-driver/4.4/manual/core/pooling/ 

https://docs.datastax.com/en/developer/java-driver/4.4/manual/core/pooling/#heartbeat;;;","21/May/23 11:17;brandon.williams;If the high cpu is on the server then I don't think it's a driver problem, but it's not clear.  The next step I would take in either case is introspecting the JVM to find out which threads are using all this cpu so I can figure out what they are doing.;;;","21/May/23 11:40;smiklosovic;The provided graphs do not make sense to me but maybe I am interpreting them wrong. When authsuccess rps is compared to cpu usage, it seems like more auth success (more auth requests) are causing more stress on cpu which I would say makes sense in general as some work has to be done right?

These options you set (..._validity_in_ms) caches the credentials so it does not go to the disk to read them from the table. That does not mean that the work will not be done. One potential bottleneck might be PasswordAuthenticator.authenticate which calls checkpw method which uses BCrypt which compares a hash from table (hashed password) with a password a client provided to log in.

What BCrypt does is that it takes the hash from the table (cached), it parses the number of rounds and other details and it will hash the plaintext password with so and so many rounds. Then it will compare the hash in db with just hashed password.

If ""cassandra"" role has e.g. this hash in system_auth.roles ""$2a$10$8XhBMxLGA3px/U0nHOczFOXxUNDcVOrD4czN6zRJHgpaUympsemgW""

""2a"" in ""$2a"" is salt version, ""10"" in ""$10"" is number of salting round.

This can be a number from 4 to 30. Check CassandraRoleManager.getGensaltRounds method. 

More salting rounds you do, more CPU intensive it will be. I am afraid the complexity of this raises exponentially. If you do like 25 rounds it will start to eat too much CPU and requests may timeout. 10 is sweet spot between complexity and security but if you throw 150 requests on it all of a sudden it may look like what you see.;;;","22/May/23 15:09;djoshi;Can you provide steps to repro the issue? The CPU graphs are not entirely actionable on their own. If possible you can even capture flame graphs on one of the Cassandra nodes using the [async profiler|https://github.com/async-profiler/async-profiler].;;;","28/May/23 01:27;yury.vidineev;Hi! [~smiklosovic]  thanks for the most detailed explanation! 

Yes, what you said makes total sense. I just didn't expect that 100 authsuccess rps could be a problem, given that Cassandra can tolerate thousands of read/write rps. I thought that each read/write request has 2 parts: auth and the actual operation. But it looks like it's not the case.

We changed the settings for our Java driver (setting CONNECTION_POOL_LOCAL_SIZE/CONNECTION_POOL_REMOTE_SIZE  to default values) - and it's no longer reproducing.

I'll check system_auth.roles to check how many rounds I have. Thanks again!;;;","28/May/23 11:47;smiklosovic;I dont think this is done every single request. You get a _session_ from a driver through which you execute the requests. You authenticate just once when getting a session. That is how I understand it.;;;","05/Jun/23 19:05;smiklosovic;[~yury.vidineev] you can also play with this in trunk https://github.com/apache/cassandra/commit/09b282d1fdd7d6d62542137003011d144c0227be;;;","27/Jun/23 23:20;yury.vidineev;Thanks for the answer, [~smiklosovic] . Yes, from the [CASSANDRA-17812|https://issues.apache.org/jira/browse/CASSANDRA-17812] description that's exactly the issue I faced.

Since we already fixed it on the client side - it's hard to reproduce, but I'll try.

For now, I think we can close this issue. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"negotiatedProtocolMustBeAcceptedProtocolTest tests fail with ""TLSv1.1 failed to negotiate"" on JDK17",CASSANDRA-18540,13536924,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,djatnieks,djatnieks,djatnieks,20/May/23 00:16,14/Jun/23 18:23,13/Jul/23 08:41,14/Jun/23 18:23,4.0.11,4.1.3,5.0,,,,CI,,,0,,,,,"Note: This depends on having a fix for CASSANDRA-18180, otherwise most/all tests in {{NativeTransportEncryptionOptionsTest}} and {{InternodeEncryptionOptionsTest}} are failing due to that issue.

Using the patch for CASSANDRA-18180, the {{negotiatedProtocolMustBeAcceptedProtocolTest}} test in both {{NativeTransportEncryptionOptionsTest}} and {{InternodeEncryptionOptionsTest}} fails with ""TLSv1.1 failed to negotiate"" on JDK17.

From what I can see, the {{negotiatedProtocolMustBeAcceptedProtocolTest}} is failing because in JDK11 and JDK17 the ""TLSv1.1"" protocol is disabled.

Since TLSv1.1 is disabled in JDK11 and 17, one possibility is to change the test to use TLSv1.2 instead of TLSv1.1. That should work directly with JDK11 and 17, since TLSv1.2 is one of the defaults, and it won't be an issue for JDK8 as that will be dropped.

Also, I think the point of the {{negotiatedProtocolMustBeAcceptedProtocolTest}} is to test that the {{accepted_protocols}} option is working correctly rather than the choice of _which_ protocol is used. Meaning, I don’t think the intent was to test TLSv1.1 specifically, rather that the mechanism of accepted protocols works and choosing TLSv1.1 was at the time convenient - but I could be wrong.

It also seems to me like bit of a coincidence that these tests are currently working on JDK11, at least on CI. Indeed, running locally with JDK11, these fail for me:

{noformat}
$ pwd
/Users/dan.jatnieks/apache/cassandra-4.0

$ java -version
openjdk version ""11.0.11"" 2021-04-20
OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
OpenJDK 64-Bit Server VM AdoptOpenJDK-11.0.11+9 (build 11.0.11+9, mixed mode)

$ ant test-jvm-dtest-some -Dtest.name=org.apache.cassandra.distributed.test.NativeTransportEncryptionOptionsTest -Duse.jdk11=true

...

[junit-timeout] Testcase: negotiatedProtocolMustBeAcceptedProtocolTest(org.apache.cassandra.distributed.test.NativeTransportEncryptionOptionsTest):	FAILED
[junit-timeout] Should be possible to establish a TLSv1.1 connection expected:<NEGOTIATED> but was:<FAILED_TO_NEGOTIATE>
[junit-timeout] junit.framework.AssertionFailedError: Should be possible to establish a TLSv1.1 connection expected:<NEGOTIATED> but was:<FAILED_TO_NEGOTIATE>
[junit-timeout] 	at org.apache.cassandra.distributed.test.NativeTransportEncryptionOptionsTest.negotiatedProtocolMustBeAcceptedProtocolTest(NativeTransportEncryptionOptionsTest.java:160)
[junit-timeout] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{noformat}

I believe these work on CI because of CASSANDRA-16848 - in that ticket, after 2021-Apr JDK8 dropped TLSv1.1 which led to a fix in [cassandra-build|https://github.com/apache/cassandra-builds/commit/d1a3a0c59b3c5c17697d6a6656cd5d4f3a1cdbe9] docker code to make sure TLSv1.1 is accepted. 

I say coincidence because this change also makes it work for JDK11 and JDK17, and I've been able to verify that making a change locally to the JDK {{java.security}} file. I’m not sure that at the time of CASSANDRA-16848 it was intended for any JDK versions.

The point of mentioning this is that if {{negotiatedProtocolMustBeAcceptedProtocolTest}} is changed to use TLSv1.2, and support for JDK8 is dropped, then the changes made in CASSANDRA-16848 could also be reverted.
",,djatnieks,e.dimitrova,mck,,,,,,,"djatnieks opened a new pull request, #2359:
URL: https://github.com/apache/cassandra/pull/2359

   
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;23/May/23 21:45;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,CASSANDRA-18180,,,,,,,,,,,,,,,,,0.0,djatnieks,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jun 14 18:22:39 UTC 2023,,,,,,,All,,,,"0|z1i0lk:",9223372036854775807,,,,brandon.williams,e.dimitrova,,Normal,,,,https://github.com/apache/cassandra/commit/c37bcbf7e9d2b3c8ec4e93aa661d358c9f382edf,,,,,,,,,"Patch: [https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-trunk]

PR: https://github.com/apache/cassandra/pull/2359

CI: TBD because has dependency on CASSANDRA-18180

 ",,,,,"20/May/23 01:35;e.dimitrova;CC [~mck]  (you've been looking into CASSANDRA-16848);;;","22/May/23 14:41;brandon.williams;Seems like we should switch to TLS1.2, I know people are disabling 1.1 in their configs as it is.;;;","24/May/23 14:34;brandon.williams;This is pretty straightforward.  I went ahead and pushed CI with 18180 applied:

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18540-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1025/workflows/78efb893-70ee-4f14-bf74-161cc0c4afec], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1025/workflows/359e06fe-6d4a-4a15-980b-45628f80a51c]|;;;","01/Jun/23 00:55;e.dimitrova;The [article|https://senthilnayagan.medium.com/tlsv1-and-tlsv1-1-protocols-disabled-by-default-in-javas-latest-patch-released-on-april-20-2021-52c309f6b16d] posted in CASSANDRA-16848 points to disabling it in 8, 11, and 17 but not removing it because there might still be legacy applications that require it.

I support the below statement from CASSANDRA-16848.
{quote}Bq.  Given that users can still use TLSv1 and TLSv1.1 (older JDKs or adjusting the java. security file), I would think it makes sense to keep the tests for now.
{quote}
I suggest instead adding a comment and quoting the article in the test, so if someone tries to run it locally and it fails, they can quickly figure out what happened.

 ;;;","08/Jun/23 19:48;djatnieks;Okay, I have made new patches that adds a comment to the test methods:
{noformat}
    /**
     * Tests that the negotiated protocol is the highest common protocol between the client and server.
     * <p> 
     * Note: This test uses TLSV1.1, which is disabled by default in JDK 8 and higher. If the test fails with 
     * FAILED_TO_NEGOTIATE, it may be necessary to check the java.security file in your JDK installation and remove 
     * TLSv1.1 from the jdk.tls.disabledAlgorithms.
     * @see <a href=""https://issues.apache.org/jira/browse/CASSANDRA-18540"">CASSANDRA-18540</a>
     * @see <a href=""https://senthilnayagan.medium.com/tlsv1-and-tlsv1-1-protocols-disabled-by-default-in-javas-latest-patch-released-on-april-20-2021-52c309f6b16d"">
     *     TLSv1 and TLSv1.1 Protocols are Disabled in Java!</a>
     */
{noformat}
 
||name||branch||commit||
|trunk| [trunk branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-trunk]|[trunk commit|https://github.com/djatnieks/cassandra/commit/441346d4be05da5819c19c2086c522b5a1b2fe30]|
|4.0|[4.0 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.0]|[4.0 commit|https://github.com/djatnieks/cassandra/commit/65406161ae56c570fd47a42e61921b841ab6f62d]|
|4.1|[4.1 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.1]|[4.1 commit|https://github.com/apache/cassandra/commit/937683e5d5bf374131e06fad8447d70fd99cec7f]|

 ;;;","09/Jun/23 16:59;e.dimitrova;The patch LGTM, +1. Thanks

[~brandon.williams] , any objections from you?;;;","09/Jun/23 17:14;brandon.williams;So we are not going to switch to TLS 1.2 and instead leave a comment why 1.1 is broken? Don't we want 1.2 covered also?;;;","09/Jun/23 17:23;e.dimitrova;Good catch! You are right! I thought we tested one after another both protocols, but now I double-checked, and it needs to be corrected. :( 
{quote}Don't we want 1.2 covered also?
{quote}
Of course, we do! Let's add another test variation where we try with TLSv1.2 or amend the current one by accepting both protocols. WDYT? Question for both of you;;;","09/Jun/23 20:44;brandon.williams;I'm not sure what devil is in the details there, so I will leave it up to the implementer to decide.;;;","13/Jun/23 17:16;djatnieks;Makes sense to me - I've pushed a new commit to each branch below that adds the check for TLSv1.2 to the existing tests. The tests now accept both TLSv1.1 and TLSv1.2.

||name||branch||commit||
|trunk| [trunk branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-trunk]|[trunk commit|https://github.com/djatnieks/cassandra/commit/93feaa06d2e7fb974ff4e8094b2cdf0d3a9db2b6]|
|4.0|[4.0 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.0]|[4.0 commit|https://github.com/djatnieks/cassandra/commit/8bdfb503f6042c8af8560aac9bbca837eb9670a5]|
|4.1|[4.1 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.1]|[4.1 commit|https://github.com/apache/cassandra/commit/ebe4bcfc0feefa6727b7d5f0015fb6ff7215b179]|

This patch should work with jdk8 and jdk11 on 4.0, 4.1 and trunk. 

And once CASSANDRA-18180 is complete it should also work with jdk17 - so I think this ticket does not need to be blocked by CASSANDRA-18180. wdyt [~e.dimitrova]?
;;;","13/Jun/23 22:09;e.dimitrova;{quote}wdyt [~e.dimitrova]?
{quote}
That looks great, thank you so much [~djatnieks] ! I also tested locally all branches as I do not think we need to run full CI for these changes. The changes made are limited to the tests. I tested trunk with JDK8 and JDK 11 and with JDK11 and JDK17 with the patch from CASSANDRA-18180. Everything looks good. I also adjusted the java.security file as per the note during testing.

[~brandon.williams] , do you mind to review, please?;;;","13/Jun/23 23:14;brandon.williams;bq. I do not think we need to run full CI for these changes. The changes made are limited to the tests.

I agree, but didn't think a [multiplexer|https://app.circleci.com/pipelines/github/driftx/cassandra/1061/workflows/648e3ed0-32f3-43ff-930e-c05b1bfa9f9e/jobs/29939] check on trunk would hurt just to be sure we haven't introduced any flakiness.  Looks good to me, +1.;;;","14/Jun/23 15:13;e.dimitrova;{quote}but didn't think a [multiplexer|https://app.circleci.com/pipelines/github/driftx/cassandra/1061/workflows/648e3ed0-32f3-43ff-930e-c05b1bfa9f9e/jobs/29939] check on trunk would hurt just to be sure we haven't introduced any flakiness. 
{quote}
I was thinking it was pretty deterministic, but you are correct that the world of Cassandra never stops to surprise us. Good call, thanks!

Starting commit soon;;;","14/Jun/23 18:22;e.dimitrova;To [https://github.com/apache/cassandra]

   [2fcdaa5b76..c37bcbf7e9  cassandra-4.0 -> cassandra-4.0|https://github.com/apache/cassandra/commit/c37bcbf7e9d2b3c8ec4e93aa661d358c9f382edf]

   [1f6b37d189..622397e7e5  cassandra-4.1 -> cassandra-4.1|https://github.com/apache/cassandra/commit/622397e7e5a2ab8a0bd902b0155a5379e2bbfab4]

   [4f5cb2a6fa..a55d4183f5  trunk -> trunk|https://github.com/apache/cassandra/commit/a55d4183f507fab7b254a827af0ee6cc821c5674]

Thank you both!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nodetool describecluster command is not showing correct Down count.  ,CASSANDRA-18512,13535590,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,ranju,ranju,ranju,10/May/23 05:27,05/Jun/23 14:07,13/Jul/23 08:41,05/Jun/23 14:07,4.0.11,4.1.3,5.0,,,,Tool/nodetool,,,0,,,,,"There are some nodes down in the cluster of Cassandra Version 4.x

# nodetool describecluster command output shows these ips as unreachable.

UNREACHABLE: [<ip1>, <ip2>, <ip3>]

Stats for all nodes:
        Live: 3
        Joining: 0
        Moving: 0
        Leaving: 0
        Unreachable: 3

But under data center , count of down pod is always shown as 0.

Data Centers: 
    dc1 #Nodes: 3 #Down: 0
    dc2 #Nodes: 3 #Down: 0

 

Steps to reproduce:
 # Setup two Data centers dc1,dc2, each datacenter was having 3 nodes - dc1:3,dc2:3
 # mark down any 3 nodes of two data centers.
 # Run nodetool describecluster command from the live node and check the Unreachable count , which is 3 and Down Count is 0 , both are not matched.

 

Expected Output: Unreachable and Down count should have the same value.

Data Centers:
        dc1 #Nodes: 3 #Down: 1

        dc2 #Nodes: 3 #Down: 2

 

 ",,ranju,smiklosovic,tommy_s,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/May/23 11:19;ranju;0001-Fix-Down-nodes-counter-in-nodetool-describeCluster-c.patch;https://issues.apache.org/jira/secure/attachment/13058391/0001-Fix-Down-nodes-counter-in-nodetool-describeCluster-c.patch",,,,1.0,ranju,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jun 05 14:07:59 UTC 2023,,,,,,,All,,,,"0|z1hsjs:",9223372036854775807,,,,brandon.williams,smiklosovic,,Low,,4.0.0,,https://github.com/apache/cassandra/commit/5655a33bc0fe53db940471fc1cb5972f13cda0de,,,,,,,,,run CI,,,,,"23/May/23 14:40;brandon.williams;Thanks for the patch, [~ranju]!  I've applied this from 4.0 up to trunk and started CI:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18512-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1023/workflows/0230c5f3-1b96-4edc-83e7-638bd52bc896], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1023/workflows/4482c093-a469-47dc-9e94-9b721cdedeab]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18512-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1022/workflows/9531fbae-e7b5-4d23-8f86-dc6707feb8f6], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1022/workflows/6854bd36-cbe9-403a-8d57-6a732e94134b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18512-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1024/workflows/87b8427e-2d1e-4f51-83ce-6664d916b0ad], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1024/workflows/dbf3742d-3a3b-43a9-9316-27d14fe159df]|

I'll check back later when that has completed.;;;","23/May/23 16:50;brandon.williams;4.0 has CASSANDRA-18366 but is otherwise clean, 4.1 is clean aside from an unrelated timeout, and trunk is clean. +1 from me.

;;;","05/Jun/23 14:07;smiklosovic;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Partial compaction can resurrect deleted data,CASSANDRA-18507,13535502,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,toblin,toblin,toblin,09/May/23 10:19,18/May/23 17:44,13/Jul/23 08:41,18/May/23 17:43,4.0.10,4.1.2,5.0,,,,Local/Compaction,,,0,,,,,"If there isn't enough disk space available to compact all existing sstables, Cassandra will attempt to perform a partial compaction by removing sstables from the set of candidate sstables to be compacted, starting with the largest one. It is possible that the sstable removed from the set of sstables to compact contains data for which there are tombstones in another (more recent) sstable. Since the overlaps between sstables is computed when the {{CompactionController}} is created, and the {{CompactionController}} is created before the removal of any sstables from the set of sstables to be compacted this computed overlap will be outdated when checking which sstables are covered by certain tombstones. This leads to the faulty conclusion that the tombstones can be pruned during the compaction, causing the data to be resurrected.

The issue is present in Cassandra 4.0 and 4.1. Cassandra 3.11 creates the {{CompactionController}} after the set of sstables to compact has been reduced, and is thus not affected. {{trunk}} does not appear to support partial compactions at all, but instead refuses to compact when the disk is full.

This regression appears to have been introduced by CASSANDRA-13068.",,bereng,BrandonBordeaux,dcapwell,djatnieks,e.dimitrova,jeromatron,maedhroz,marcuse,toblin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,toblin,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu May 18 17:44:00 UTC 2023,,,,,,,All,,,,"0|z1hs08:",9223372036854775807,,,,dcapwell,marcuse,,Critical,,4.0.0,,https://github.com/apache/cassandra/commit/1053e3b475829c7f2d0dc4ab59322d5819d1496a,,,,,,,,,Unit Tests,,,,,"09/May/23 10:24;toblin;Here is a fix for Cassandra 4.0: branch [thobe/CASSANDRA-18507-4.0|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.0], commit [285323eee48aaf0ff800d0aaba96b94238174e52|https://github.com/thobe/cassandra/commit/285323eee48aaf0ff800d0aaba96b94238174e52].;;;","09/May/23 10:49;toblin;Same fix for Cassandra 4.1: branch [thobe/CASSANDRA-18507-4.1|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1], commit [186b7876bd7f82a50409877427bf420b76854a91|https://github.com/thobe/cassandra/commit/186b7876bd7f82a50409877427bf420b76854a91].

Only the test case required minimal adaptation between 4.0 and 4.1.;;;","09/May/23 22:29;dcapwell;I reverted the change to src so only the test exists, I then ran it and seems the jvm is crashing?

{code}
[junit-timeout] Testcase: org.apache.cassandra.db.compaction.PartialCompactionsTest:null:       Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED (crashed)
{code};;;","09/May/23 22:33;dcapwell;I pulled in the src changes and still the test is crashing 

{code}
[junit-timeout] Testcase: org.apache.cassandra.db.compaction.PartialCompactionsTest:null:       Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED (crashed)
{code};;;","10/May/23 00:10;dcapwell;[~toblin] can you take a look at the test and make sure it passes, and that it detects the issue if you revert the change to src?;;;","10/May/23 07:45;toblin;[~dcapwell] that's odd. When I run the test with the source unchanged (/reverted) I get:

{code:java}
[junit-timeout] Testcase: shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction(org.apache.cassandra.db.compaction.PartialCompactionsTest): FAILED
[junit-timeout] remaining live rows after compaction expected:<100> but was:<105>
[junit-timeout] junit.framework.AssertionFailedError: remaining live rows after compaction expected:<100> but was:<105>
[junit-timeout] at org.apache.cassandra.db.compaction.PartialCompactionsTest.shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction(PartialCompactionsTest.java:90)
[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED
{code}
 
And with the source changes in place:

{code:java}
[junit-timeout] INFO  [main] 2023-05-10 09:01:05,369 ColumnFamilyStore.java:2655 - Truncate of PartialCompactionsTest.shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction is complete
[junit-timeout] ------------- ---------------- ---------------
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/commitlog
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/data
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/saved_caches
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/hints


BUILD SUCCESSFUL
Total time: 24 seconds
{code}
Same exact result on both the {{cassandra-4.0}} branch and the {{cassandra-4.1}} branch.

Maybe I'm doing something non-standard when running tests? I've primarily been running with:

{code:java}
ant test -Dtest.name=PartialCompactionsTest -Duse.jdk11=true {code}
But in order to rule out the possibility of this being Java version related, I also tried with Java 8 now, and that had the exact same outcome as well.

So next I'm wondering if the difference you are experiencing is platform related. I've been running on MacOS. So I tried running the test in a docker container ({{{}eclipse-temurin:8-jdk-jammy{}}}). That also works in the same way as when running natively on my machine, and is able to detect the issue when the change to source is reverted.

Even if I run the test as part of a larger set of tests it works the way it is intended to.

Please let me know if I should be running the test in a different way, or what I should be doing to reproduce the failure you are experiencing.

 ;;;","10/May/23 16:45;dcapwell;That's weird... I know [~marcuse] is looking at this patch as well.;;;","10/May/23 16:48;dcapwell;Overall the patch LGTM... its not clear why the test doesn't work on [~maedhroz] and my laptop, but think [~marcuse] can help here.

For the core patch, I am +1.  I do think we will want this test for trunk just to make sure this regression doesn't come back.;;;","11/May/23 14:17;marcuse;+1 on the patch, very nice catch

pushed an alternative/additional test here:
https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.1
https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.0 
but the existing test is fine as well I think (though we might have a general problem running tests with java11 on macos?)

running cci:
https://app.circleci.com/pipelines/github/krummas/cassandra/868/workflows/0ab45cff-4d06-4f25-ba55-e19a8dcb1ad2
https://app.circleci.com/pipelines/github/krummas/cassandra/869/workflows/a7502533-0524-4669-b450-a8bd3897cb34;;;","11/May/23 15:06;e.dimitrova;Hey everyone,

I also have a Mac available so decided to test on my end too. I can confirm that I pulled [https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.1] and [https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.0].  Then:

 
{code:java}
ant realclean
ant jar
{code}
 
ant test -Dtest.name=PartialCompactionsTest -Duse.jdk11=true 
Everything finished successfully for me.

To be on the safe side I also tested with JDK 8. I ran this with both branches.

I tried on Mac Book pro from 2018, MAC OS 12.06
{code:java}
openjdk version ""11.0.2"" 2019-01-15
OpenJDK Runtime Environment 18.9 (build 11.0.2+9)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)
{code}
and 
{code:java}
java version ""1.8.0_231""
Java(TM) SE Runtime Environment (build 1.8.0_231-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)
{code}
[~marcuse], can you push to run also the JDK 11 workflow In CI, please? I noticed you started only JDK8 workflow.
{quote} I do think we will want this test for trunk just to make sure this regression doesn't come back.
{quote}
That sounds like a great idea to me.;;;","11/May/23 16:55;marcuse;j8/j11 runs;

https://app.circleci.com/pipelines/github/krummas/cassandra?branch=CASSANDRA-18507-4.0
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=CASSANDRA-18507-4.1
;;;","15/May/23 17:19;toblin;I have pushed an update that structures the test to be more in line with how other tests works. This also makes it possible to add other test cases to that test class in the future (I'd made a mistake in the setup that prevented that before). I'm not sure if this has any effect on the issue [~dcapwell] had with running the test or not.
I also incorporated the JVM-DTest that [~marcuse] wrote, since I think it seems useful to have that level of testing for this as well.
* [thobe/CASSANDRA-18507-4.0|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.0]
* [thobe/CASSANDRA-18507-4.1|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1]

I have also done some further analysis of the behavior of this test on {{trunk}}. I said before that the problem does not manifest on {{trunk}}. However, after further analysis, it seems that is because {{trunk}} uses a different method for checking for available disk space, so the limiting that's done in my test (and the limiting don in the JVM-DTest that [~marcuse] wrote) does not work to trigger a partial compaction, but later there is a different check that _is_ triggered by the limiting in my test that rejects the compaction due to lack of disk space. I had misinterpreted this as partial compactions not being supported at all, but I'll see if I can revise the test to be applicable to {{trunk}} as well in order to see if this problem also occurs there.;;;","16/May/23 11:11;toblin;After updating the tests to emulate insufficient disk space correctly for {{{}trunk{}}}, I can conclude that the problem occurs there as well. Here is a branch with changes applicable for {{{}trunk{}}}: [thobe/CASSANDRA-18507|https://github.com/thobe/cassandra/tree/CASSANDRA-18507].;;;","16/May/23 22:02;dcapwell;the trunk patch LGTM, +1

If [~marcuse] doesn't merge today, ill merge tomorrow; assuming he is +1 to trunk patch;;;","17/May/23 10:32;toblin;I have updated the branches to make sure they are in sync. I have also pushed branches of {{4.1}} and {{trunk}} where the change history is based on merging the changes forward from the previous version instead, in case that is more helpful:
* {{4.1}}: [thobe/CASSANDRA-18507-4.1-merge|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1-merge]
* {{trunk}}: [thobe/CASSANDRA-18507-merge|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-merge]

I also added a change to logging that would have made debugging this issue when we first encountered it a little bit quicker.;;;","17/May/23 21:36;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-cassandra-4.0-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-cassandra-4.0-82D47737-2369-4747-BEBD-045157D71017]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2466/]|
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-cassandra-4.1-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-cassandra-4.1-82D47737-2369-4747-BEBD-045157D71017]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2467/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-trunk-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-trunk-82D47737-2369-4747-BEBD-045157D71017]|[build|unknown]|
;;;","18/May/23 16:35;dcapwell;4.0 has org.apache.cassandra.distributed.test.FailingRepairTest crash right away; I don't see any logs... this repo for me locally as well as CI (https://app.circleci.com/pipelines/github/dcapwell/cassandra/2124/workflows/2862d46f-0728-4617-b1a3-1ba15baa672e/jobs/27702/tests)

4.1 looks to be flaky tests

trunk looks good other than upgrade tests... I think I mentioned this to people on slack awhile back... this doesn't look related to your work so I think it's fine to ignore for this patch.

[~toblin] can you take a look at the repair test in 4.0?  Curious if you can repo and figure out what's going on.;;;","18/May/23 16:49;brandon.williams;[~dcapwell] that looks like CASSANDRA-18366 to me.;;;","18/May/23 17:32;dcapwell;ill test out 4.0 in isolation to double check;;;","18/May/23 17:33;dcapwell;thanks for pointing that out, confirmed it fails in cassandra-4.0 branch as well.

With that, CI is clean;;;","18/May/23 17:35;dcapwell;starting the merge now;;;","18/May/23 17:44;dcapwell;Thanks for all the hard work!  merged to 4.0, 4.1, and trunk;;;",,,,,,,,,,,,,,,,,,,,,,,
NPE when deserializing malformed collections from client,CASSANDRA-18505,13535395,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jonmeredith,jonmeredith,jonmeredith,08/May/23 16:32,10/May/23 00:13,13/Jul/23 08:41,10/May/23 00:13,4.0.10,4.1.2,5.0,,,,Messaging/Client,,,0,,,,,"When deserializing collections sent from the client, if an element in the collection is incorrectly serialized, Collections.getValue can return null if the length of the element is negative.  Currently this isn't detected and serialization continues, calling validate and throwing an NPE in serializers that don't handle null value buffers.

Detect the malformed input and throw a better MarshalException so it will be converted to an InvalidRequestException for the client.
",,jonmeredith,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jonmeredith,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue May 09 16:52:18 UTC 2023,,,,,,,All,,,,"0|z1hrco:",9223372036854775807,,,,maedhroz,,,Low,,3.0.0,, https://github.com/apache/cassandra/commit/ae995eb3d3cc1c98f61db0d071522b6f09443927,,,,,,,,,Run through CI,,,,,"08/May/23 16:34;jonmeredith;Example stack trace
{code}
at org.apache.cassandra.db.marshal.ByteBufferAccessor.size(ByteBufferAccessor.java)
        at org.apache.cassandra.db.marshal.ByteBufferAccessor.size(ByteBufferAccessor.java)
        at org.apache.cassandra.serializers.UUIDSerializer.validate(UUIDSerializer.java)
        at org.apache.cassandra.serializers.SetSerializer.deserializeForNativeProtocol(SetSerializer.java)
        at org.apache.cassandra.cql3.Sets$Value.fromSerialized(Sets.java)
        at org.apache.cassandra.cql3.Sets$Marker.bind(Sets.java)
        at org.apache.cassandra.cql3.Sets$Setter.execute(Sets.java)
        at org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(UpdateStatement.java)
        at org.apache.cassandra.cql3.statements.CQL3CasRequest$RowUpdate.applyUpdates(CQL3CasRequest.java)
        at org.apache.cassandra.cql3.statements.CQL3CasRequest.makeUpdates(CQL3CasRequest.java)
        at org.apache.cassandra.service.StorageProxy.lambda$cas$3(StorageProxy.java)
        at org.apache.cassandra.service.StorageProxy.doPaxos(StorageProxy.java)
        at org.apache.cassandra.service.StorageProxy.cas(StorageProxy.java)
{code};;;","08/May/23 16:55;jonmeredith;4.0 [PR|https://github.com/apache/cassandra/pull/2312] - others very similar;;;","08/May/23 22:57;jonmeredith;More difference in each branch than I thought, including additional usage for Lists in 4.1/trunk.  Opening up PRs for the other branches for clarity.

[4.0 PR|https://github.com/apache/cassandra/pull/2312]
[4.1 PR|https://github.com/apache/cassandra/pull/2313]
[trunk PR|https://github.com/apache/cassandra/pull/2314];;;","08/May/23 23:42;jonmeredith;CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-cassandra-4.0-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-cassandra-4.0-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2453]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-cassandra-4.1-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-cassandra-4.1-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2454/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-trunk-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-trunk-4241543C-EA7D-4586-BA9E-34181A5B966A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2455/]|;;;","09/May/23 15:56;jonmeredith;Resubmitted after review feedback

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-cassandra-4.0-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-cassandra-4.0-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2461/]|
|cassandra-4.1|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-cassandra-4.1-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-cassandra-4.1-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2462/]|
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18505-trunk-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18505-trunk-3823DF16-40CB-4A83-9D4D-0D4662C64AF4]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2463/]|
;;;","09/May/23 16:52;maedhroz;+1 on all branches, pending adding a quick test in {{SerDeserTest}} to codify the new expectations around nulls;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
snakeyaml vulnerability: CVE-2023-2251,CASSANDRA-18497,13534999,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,04/May/23 14:01,04/May/23 15:30,13/Jul/23 08:41,04/May/23 15:29,3.0.29,3.11.16,4.0.10,4.1.2,5.0,,Local/Config,,,0,,,,,"This is failing the OWASP scan.

https://nvd.nist.gov/vuln/detail/CVE-2023-2251",,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu May 04 15:29:45 UTC 2023,,,,,,,All,,,,"0|z1howo:",9223372036854775807,,,,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/4a62757624d120a0e493d9d39bcd9bf8282b4f58,,,,,,,,,run CI,,,,,"04/May/23 14:10;brandon.williams;I think the hit for snakeyaml is a false positive, this is for [this repo|https://github.com/eemeli/yaml] which is a javascript yaml parser.  We can simply suppress.;;;","04/May/23 14:17;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18497-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/994/workflows/76de842e-e8d7-4553-9de1-e514e051730d]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18497-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/996/workflows/f34aef4c-a924-4d27-becb-c1bccd21d97e]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18497-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/997/workflows/b1c380ae-32e6-4f19-b417-1f715cb9578b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/997/workflows/37a33da1-6b78-4de4-b2b1-7ae2fdae2048]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18497-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/995/workflows/49dfa2df-43d3-45b6-9004-d8e7f627dbe0], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/995/workflows/1c516cd6-7002-4d61-8436-755fa96a9947]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18497-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/998/workflows/35f5da30-4789-4715-81e1-0adb3e4b90df], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/998/workflows/ce40ec05-f1fe-4ece-b88e-49b2c40fce00]|
;;;","04/May/23 15:14;smiklosovic;+1;;;","04/May/23 15:29;brandon.williams;Committed, thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not require allow filtering when all primary keys are specified in SELECT ,CASSANDRA-18477,13533829,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,24/Apr/23 11:19,24/Apr/23 11:28,13/Jul/23 08:41,24/Apr/23 11:28,5.x,,,,,,CQL/Semantics,,,0,,,,,"This was discussed in

https://lists.apache.org/thread/loj6jgv54szdvyt3wmvbtwwrrg1dtlxq

Basically, when I have this table:

{code}
create table ks.tb (p1 int, c1 int, col1 int, col2 int, primary key (p1, c1));
{code}

and I do this

{code}
select * from ks.tb where p1 = 1 and c1 = 2 and col2 = 1;
{code}

this will fail and it will require to use ALLOW FILTERING just because we are also specifying ""col2"". This is clearly a bug - there is no reason to require it if we are going to fetch one row only as all partition and clustering keys were specified.",,smiklosovic,,,,,,,,,"smiklosovic opened a new pull request, #2293:
URL: https://github.com/apache/cassandra/pull/2293

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Apr/23 11:24;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,CASSANDRA-15803,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Correctness,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 24 11:25:50 UTC 2023,,,,,,,All,,,,"0|z1hhps:",9223372036854775807,,,,,,,Low,,,,,,,,,,,,,ci,,,,,"24/Apr/23 11:24;brandon.williams;Is this different from CASSANDRA-15803?;;;","24/Apr/23 11:24;smiklosovic;https://github.com/apache/cassandra/pull/2293/files;;;","24/Apr/23 11:25;smiklosovic;ah .... havent noticed that one. I am happy to put it under it and close this one.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Docker images can no longer be built due to virtualenv from pip,CASSANDRA-18472,13533567,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,21/Apr/23 14:09,05/May/23 10:18,13/Jul/23 08:41,05/May/23 10:18,3.0.29,3.11.16,4.0.10,4.1.2,5.0,,CI,,,0,,,,,"{noformat}
 => [linux/amd64 35/56] WORKDIR /home/cassandra                                                                                                                                                              0.1s
 => [linux/amd64 36/56] RUN echo 'export ANT_HOME=/usr/share/ant' >> /home/cassandra/.bashrc &&     echo 'export JAVA8_HOME=/usr/lib/jvm/java-8-openjdk-$(dpkg --print-architecture)' >> /home/cassandra/.b  0.2s
 => ERROR [linux/amd64 37/56] RUN virtualenv --python=python2.7 env2.7                                                                                                                                       0.5s
------
 > [linux/amd64 37/56] RUN virtualenv --python=python2.7 env2.7:
#100 0.424 RuntimeError: failed to find interpreter for Builtin discover of python_spec='python2.7'
------
ubuntu2004_j11.docker:128
--------------------
 126 |     # included in the base image, the compiled objects are not updated by pip at run time, which can
 127 |     # cause errors if the tests rely on new driver functionality or bug fixes.
 128 | >>> RUN virtualenv --python=python2.7 env2.7
 129 |     RUN chmod +x env2.7/bin/activate
 130 |     RUN /bin/bash -c ""export CASS_DRIVER_NO_CYTHON=1 CASS_DRIVER_NO_EXTENSIONS=1 && source ~/env2.7/bin/activate && pip2 install --upgrade pip && pip2 install -r /opt/requirements.txt && pip2 freeze --user""
--------------------
error: failed to solve: rpc error: code = Unknown desc = process ""/bin/sh -c virtualenv --python=python2.7 env2.7"" did not complete successfully: exit code: 1
{noformat}",,bereng,djoshi,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18401,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Degradation -> Other Exception,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 05 10:18:15 UTC 2023,,,,,,,All,,,,"0|z1hg4g:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra-builds/commit/a9a200de1673981fae66fc9449390a07d6c2f281,,,,,,,,,run CI,,,,,"21/Apr/23 15:00;brandon.williams;I think adding debugging to venv has revealed something:

{noformat}
#99 0.208 80 failed to query /usr/bin/python2.7 with code 1 err: '  File ""/usr/local/lib/python3.11/dist-packages/virtualenv/discovery/py_info.py"", line 152\n    os.path.join(base_dir, exe) for exe in (f""python{major}"", f""python{major}.{minor}"")\n                                                           ^\nSyntaxError: invalid syntax\n' [INFO cached_py_info:35]
{noformat}

So the problem seems to be using python 3.11 to discover python2.7 (which is indeed at that location.);;;","21/Apr/23 15:07;brandon.williams;Indeed, creating the venv by forcing 2.7 to be the virtualenv backend solves it.  Patch [here|https://github.com/driftx/cassandra-builds/tree/CASSANDRA-18472] that does that.;;;","21/Apr/23 18:18;e.dimitrova;Great, as you already built an image to test this, can you, please, push it to docker hub for testing to ensure there are no other surprises?

Thanks in advance!;;;","21/Apr/23 19:04;brandon.williams;Now we have the problem of 2.7 being unable to find a pytest version high enough to meet the cassandra-dtest requirement:

{noformat}
#101 11.45 ERROR: Could not find a version that satisfies the requirement pytest>=6.5.0 (from -r /opt/requirements.txt (line 18)) (from versions: 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4, 2.3.0, 2.3.1, 2.3.2, 2.3.3, 2.3.4, 2.3.5, 2.4.0, 2.4.1, 2.4.2, 2.5.0, 2.5.1, 2.5.2, 2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.7.0, 2.7.1, 2.7.2, 2.7.3, 2.8.0, 2.8.1, 2.8.2, 2.8.3, 2.8.4, 2.8.5, 2.8.6, 2.8.7, 2.9.0, 2.9.1, 2.9.2, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.0.7, 3.1.0, 3.1.1, 3.1.2, 3.1.3, 3.2.0, 3.2.1, 3.2.2, 3.2.3, 3.2.4, 3.2.5, 3.3.0, 3.3.1, 3.3.2, 3.4.0, 3.4.1, 3.4.2, 3.5.0, 3.5.1, 3.6.0, 3.6.1, 3.6.2, 3.6.3, 3.6.4, 3.7.0, 3.7.1, 3.7.2, 3.7.3, 3.7.4, 3.8.0, 3.8.1, 3.8.2, 3.9.1, 3.9.2, 3.9.3, 3.10.0, 3.10.1, 4.0.0, 4.0.1, 4.0.2, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.3.0, 4.3.1, 4.4.0, 4.4.1, 4.4.2, 4.5.0, 4.6.0, 4.6.1, 4.6.2, 4.6.3, 4.6.4, 4.6.5, 4.6.6, 4.6.7, 4.6.8, 4.6.9, 4.6.10, 4.6.11)
#101 11.45 ERROR: No matching distribution found for pytest>=6.5.0 (from -r /opt/requirements.txt (line 18))
{noformat}

I bumped this in CASSANDRA-18121 when adding 3.11 support, and there probably is not a version higher than 4.6.11 that will work with python2.  I don't think there should be any reason python2 needs to track the dtest requirements though, since we aren't running python2 there.  I'm actually not sure what we need python2.7 for here, [~mck] ?;;;","21/Apr/23 20:47;mck;do older cassandra branches need 2.7 in any part of their building/testing? (ant jar/artifacts, cqlshlib, ?);;;","21/Apr/23 20:55;brandon.williams;Yes, 3.0 and 3.11 still need python2 for cqlsh.  But the dtests don't, and this is getting [those dependencies|https://github.com/apache/cassandra-builds/blob/trunk/docker/testing/ubuntu2004_j11.docker#L74] from the dtests.  I guess I will see about making it only get what is needed, then do an image upload to my account and run the test gamut to make sure it works.;;;","21/Apr/23 22:40;djoshi;It would have been great if we would've had cqlsh as a separate repo / sub-project. It would be easy to avoid issues such as these. Having Python 2 dependency for 3.0 and 3.11 is not great.;;;","25/Apr/23 15:51;brandon.williams;[~djoshi] I agree we don't want to be in this situation again, but it's probably a nuanced enough topic worth raising on dev.

After removing python2, I encountered the same issue I opened this ticket with, except for python3.6! This revealed the real culprit, virtualenv. It appears to be specific to virtualenv from pip on 3.11, so I installed the Ubuntu package instead which should be more stable and allowed removal of my previous 2.7-specific hack.  This just left paring the 2.7 requirements down to only cassandra-driver, which I did [here|https://github.com/driftx/cassandra-builds/tree/CASSANDRA-18472] and built and pushed the image to my docker.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/982/workflows/9240e8b6-bc0e-4fb6-8081-8ec1eef3a6a7]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/983/workflows/e9ce73ea-50a5-4f08-8b33-6d52e42b5366]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/980/workflows/d35e83b3-e59e-41ee-af08-e1324271037f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/980/workflows/836841a0-ebd3-4cef-a123-14c21b424174]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/979/workflows/a2d0a0c7-5ca3-4877-ae36-6d5c4a2434d9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/979/workflows/298c67a3-0c43-4e7d-9f2d-bd148c868a2b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/984/workflows/be07089a-3f8a-431f-81ea-85abca5ab868], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/984/workflows/93b4ac7f-45e6-4311-a5a4-e6bf28e9f130]|
;;;","04/May/23 06:55;bereng;[~brandon.williams] apologies if I am missing sthg but:
- 3.0 seems to be missing changing the docker image to point to your repo. You only changed it in one place, not on the whole file.
- 3.0/3.11 seems to have python-ish failures that don't align to what I see for 3.11 and 3.0 in jenkins;;;","04/May/23 14:31;brandon.williams;bq. You only changed it in one place, not on the whole file.

Argh, you caught me! :)  Let me fix that.... also

bq. 3.0/3.11 seems to have python-ish failures that don't align to what I see for 3.11 and 3.0 in jenkins

Those were temporary failures from some other patch that should now be resolved, so let's just try again:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1000/workflows/6a1490e5-0328-4d9a-b051-99be2d3490c5]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18472-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/999/workflows/756643b4-2cae-4d81-8be9-0af81cc2f9dd]|;;;","05/May/23 06:32;bereng;+1. Throwing out a suggestion of creating a requirements2.7.txt file instead of hardcoding them in the image, should be easier to change if needed :shrug:;;;","05/May/23 10:18;brandon.williams;Thanks, committed.  I think the time to add a 27-specific file will be the next time it needs a dependency, but right now it's just the one so I think it's okay.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-15 Accord: NotWitnessed commands can receive an invalidate promise but would return Zero instead,CASSANDRA-18471,13533467,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,20/Apr/23 23:04,25/Apr/23 16:39,13/Jul/23 08:41,25/Apr/23 16:39,5.0,,,,,,Accord,,,0,,,,,"While working on CASSANDRA-18451 I hit the following failure

{code}
Failed on seed -5929214838499924343
accord.burn.SimulationException: Failed on seed -5929214838499924343
Caused by: java.lang.AssertionError: Unexpected exception encountered
	at accord.impl.basic.PropagatingPendingQueue.poll(PropagatingPendingQueue.java:73)
	at accord.impl.basic.Cluster.processPending(Cluster.java:179)
	at accord.impl.basic.Cluster.run(Cluster.java:296)
	at accord.burn.BurnTest.burn(BurnTest.java:309)
	at accord.burn.BurnTest.run(BurnTest.java:386)
	at accord.burn.BurnTest.testOne(BurnTest.java:372)
	Suppressed: java.lang.IllegalStateException: Received replies from a node that must have known the route, but that did not include it
		at accord.coordinate.Invalidate.invalidate(Invalidate.java:204)
		at accord.coordinate.Invalidate.handle(Invalidate.java:131)
		at accord.coordinate.Invalidate.onSuccess(Invalidate.java:105)
		at accord.coordinate.Invalidate.onSuccess(Invalidate.java:51)
		at accord.impl.basic.Cluster.lambda$processNext$1(Cluster.java:209)
		at accord.impl.basic.Cluster.now(Cluster.java:260)
		at accord.impl.basic.Cluster.processNext(Cluster.java:206)
		at accord.impl.basic.Cluster.processPending(Cluster.java:183)
{code}

In a debugger was able to figure out the state and create a unit test to hit the same situation

{code}
class InvalidateTest
{
    @Test
    void test() throws ExecutionException
    {
        try (MockCluster cluster = MockCluster.builder().replication(2).nodes(2).build())
        {
            Node n1 = cluster.get(1);
            Node n2 = cluster.get(2);

            RoutingKey n1RoutingKey = n1.topology().current().get(0).range.end();
            IntKey.Raw n1key = IntKey.key(((IntKey.Routing) n1RoutingKey).key);

            RoutingKey n2RoutingKey = n1.topology().current().get(1).range.end();
            IntKey.Raw n2key = IntKey.key(((IntKey.Routing) n2RoutingKey).key);

            Keys keys = Keys.of(n1key, n2key);


            Node coordinator = n1;
            TxnId txnId = coordinator.nextTxnId(Txn.Kind.Read, Routable.Domain.Key);
            Txn txn = readOnly(keys);

            AsyncChains.getUninterruptibly(n2.commandStores().unsafeForKey(n2key).execute(PreLoadContext.contextFor(txnId, keys), store -> {
                Ranges ranges = store.ranges().currentRanges();
                PartialTxn partial = txn.slice(ranges, true);
                FullKeyRoute route = keys.toRoute(n2RoutingKey);
//                RoutingKey progressKey = n2RoutingKey.toUnseekable(); // if this is non-null this passes
                RoutingKey progressKey = null;
                CheckedCommands.preaccept(store, txnId, partial, route, progressKey);
                CheckedCommands.accept(store, txnId, Ballot.ZERO, route.slice(ranges), partial.keys().slice(ranges), progressKey, txnId, PartialDeps.builder(ranges).build());
            }));
            AsyncChains.getUninterruptibly(new AsyncChains.Head<Outcome>() {
                @Override
                protected void start(BiConsumer<? super Outcome, Throwable> callback) {
                    Invalidate.invalidate(coordinator, txnId, keys.toUnseekables(), callback);
                }
            });
        }
    }

    private static Txn readOnly(Seekables<?, ?> keys)
    {
        Read read = MockStore.read(keys);
        Query query = Mockito.mock(Query.class);
        return new Txn.InMemory(keys, read, query);
    }
}
{code}",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Availability -> Response Crash,,,,,,,,Low Hanging Fruit,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 25 16:33:48 UTC 2023,,,,,,,All,,,,"0|z1hfig:",9223372036854775807,,,,benedict,,,Normal,,NA,,https://github.com/apache/cassandra-accord/commit/33c91e4489597c1e88df8a5254c015eeb76899f1,,,,,,,,,new test,,,,,"24/Apr/23 23:10;dcapwell;Spoke with [~benedict] in slack (see https://the-asf.slack.com/archives/C0459N9R5C6/p1682368538520669) and looks like the test is not correct, and the issue is the following message ordering

{code}
{from:4, to:2, id:107, body:BeginInvalidate{txnId:[1,4602982,3,2], ballot:[1,4602976,0,4]}}
{from:2, to:4, replyTo:107, body:InvalidatePromised{NotWitnessed,#13085}}
{from:2, to:6, id:162, body:PreAccept{txnId:[1,4602982,3,2], txn:{read:[Range(#34185, #37124]]}, scope:[Range(#34185, #37124]]}}
{from:6, to:2, replyTo:162, body:PreAcceptOk{txnId:[1,4602982,3,2], witnessedAt:[1,4602989,0,6], deps:[Range(#31944, #32765], Range(#32765, #34401], Range(#34401, #36858], Range(#36858, #39318]]:{9:[[1,4602974,2,3]]}, {}}}
{code}

We have a NotWitnessed command that we update the promised for, but looks like we override ""promised"" to be Ballot.ZERO, ignoring this all together.  We should not override else we loose this state.;;;","24/Apr/23 23:14;dcapwell;Marked this as LHF as avoiding overriding ""promised"" fixes this issue

If you check out https://issues.apache.org/jira/browse/CASSANDRA-18451 and roll back history to 057dfa6d0fb4516c4f15a610ddaa82df2c026b70 (git checkout 057dfa6d0fb4516c4f15a610ddaa82df2c026b70) the burn test seed -5929214838499924343 will hit this issue;;;","25/Apr/23 16:33;dcapwell;Benedict +1ed in GH and slack (see https://the-asf.slack.com/archives/C0459N9R5C6/p1682439734127499?thread_ts=1682368538.520669&cid=C0459N9R5C6);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Missing ""SSTable Count"" metric  when using nodetool with ""--format"" option",CASSANDRA-18448,13532568,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,adelapena,Aburadeh,Aburadeh,13/Apr/23 19:58,17/Apr/23 18:35,13/Jul/23 08:41,17/Apr/23 14:10,3.11.15,4.0.10,4.1.2,5.0,,,Tool/nodetool,,,0,,,,,"Hi, 

I'm using ""nodetool cfstats --format json"" to gather some metrics/infomation about our tables. 
I noticed that the ""SSTable Count"" is missing when using ""–format"" option. 

If I don't use ""–format""  option, I can set ""SSTable Count"" in the output. 

*Output of ""nodetool cfstats --format json | jq"":* 
{code:java}
{  ""total_number_of_tables"": 38,  ""stress_test"": {    ""write_latency_ms"": 0.8536725334338424,    ""tables"": {      ""res1"": {        ""average_tombstones_per_slice_last_five_minutes"": null,        ""bloom_filter_off_heap_memory_used"": ""159256"",        ""memtable_switch_count"": 754,        ""maximum_tombstones_per_slice_last_five_minutes"": 0,        ""memtable_cell_count"": 0,        ""memtable_data_size"": ""0"",        ""average_live_cells_per_slice_last_five_minutes"": null,        ""local_read_latency_ms"": ""NaN"",        ""local_write_latency_ms"": ""NaN"",        ""pending_flushes"": 0,        ""compacted_partition_minimum_bytes"": 785940,        ""local_read_count"": 0,        ""sstable_compression_ratio"": 0.6294161376582798,        ""dropped_mutations"": ""52751"",        ""bloom_filter_false_positives"": 0,        ""off_heap_memory_used_total"": ""58842196"",        ""memtable_off_heap_memory_used"": ""0"",        ""index_summary_off_heap_memory_used"": ""18972"",        ""bloom_filter_space_used"": ""159408"",        ""sstables_in_each_level"": [],        ""compacted_partition_maximum_bytes"": 4055269,        ""space_used_total"": ""302694398635"",        ""local_write_count"": 297111,        ""compression_metadata_off_heap_memory_used"": ""58663968"",        ""number_of_partitions_estimate"": 99614,        ""maximum_live_cells_per_slice_last_five_minutes"": 0,        ""space_used_live"": ""302694398635"",        ""compacted_partition_mean_bytes"": 3827283,        ""bloom_filter_false_ratio"": ""0.00000"",        ""percent_repaired"": 0,        ""space_used_by_snapshots_total"": ""0""      }    },    ""read_latency_ms"": null,    ""pending_flushes"": 0,    ""write_count"": 594308,    ""read_latency"": null,    ""read_count"": 0  }}
 {code}
*Output of ""nodetool cfstats"":* 
{code:java}
----------------
Keyspace : stress_test
        Read Count: 0
        Read Latency: NaN ms
        Write Count: 594308
        Write Latency: 0.8536725334338424 ms
        Pending Flushes: 0
                Table: res1
                SSTable count: 19                
                Space used (live): 302694398635
                Space used (total): 302694398635
                Space used by snapshots (total): 0
                Off heap memory used (total): 58842196
                SSTable Compression Ratio: 0.6294161376582798
                Number of partitions (estimate): 99614
                Memtable cell count: 0
                Memtable data size: 0
                Memtable off heap memory used: 0
                Memtable switch count: 754
                Local read count: 0
                Local read latency: NaN ms
                Local write count: 297111
                Local write latency: NaN ms
                Pending flushes: 0
                Percent repaired: 0.0
                Bloom filter false positives: 0
                Bloom filter false ratio: 0.00000
                Bloom filter space used: 159408
                Bloom filter off heap memory used: 159256
                Index summary off heap memory used: 18972
                Compression metadata off heap memory used: 58663968
                Compacted partition minimum bytes: 785940
                Compacted partition maximum bytes: 4055269
                Compacted partition mean bytes: 3827283
                Average live cells per slice (last five minutes): NaN
                Maximum live cells per slice (last five minutes): 0
                Average tombstones per slice (last five minutes): NaN
                Maximum tombstones per slice (last five minutes): 0
                Dropped Mutations: 52751*  
----------------
 {code}
 ",,Aburadeh,adelapena,brandon.williams,e.dimitrova,,,,,,"adelapena opened a new pull request, #2275:
URL: https://github.com/apache/cassandra/pull/2275

   https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/71775e33-1717-43c4-83d6-02f5a849f983
   https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/e1fc878a-a63d-4651-a3b5-4ce2db2d3261


;14/Apr/23 17:20;githubbot;600","adelapena opened a new pull request, #2277:
URL: https://github.com/apache/cassandra/pull/2277

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;17/Apr/23 11:23;githubbot;600","adelapena opened a new pull request, #2278:
URL: https://github.com/apache/cassandra/pull/2278

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;17/Apr/23 11:23;githubbot;600","adelapena opened a new pull request, #2279:
URL: https://github.com/apache/cassandra/pull/2279

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;17/Apr/23 11:24;githubbot;600","smiklosovic closed pull request #2275: CASSANDRA-18448 trunk: Add missing sstable_count metric to tablestats json/yaml output
URL: https://github.com/apache/cassandra/pull/2275


;17/Apr/23 18:35;githubbot;600","smiklosovic closed pull request #2277: CASSANDRA-18448 3.11: Add missing sstable_count metric to tablestats json/yaml output
URL: https://github.com/apache/cassandra/pull/2277


;17/Apr/23 18:35;githubbot;600","smiklosovic closed pull request #2278: CASSANDRA-18448 4.0: Add missing sstable_count metric to tablestats json/yaml output
URL: https://github.com/apache/cassandra/pull/2278


;17/Apr/23 18:35;githubbot;600","smiklosovic closed pull request #2279: CASSANDRA-18448 4.1: Add missing sstable_count metric to tablestats json/yaml output
URL: https://github.com/apache/cassandra/pull/2279


;17/Apr/23 18:35;githubbot;600",,,,,,,,,,,,,,,,,,0,4800,,,0,4800,,,,,,,,,CASSANDRA-12205,,,,,,,,,,,0.0,adelapena,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 17 14:08:48 UTC 2023,,,,,,,All,,,,"0|z1h9zs:",9223372036854775807,,,,brandon.williams,e.dimitrova,,Normal,,3.8,,https://github.com/apache/cassandra/commit/08b9471a1ecfcb326ba4fbfdeed5d60aefcc671b,,,,,,,,,"||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/2275]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/71775e33-1717-43c4-83d6-02f5a849f983] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/e1fc878a-a63d-4651-a3b5-4ce2db2d3261]|",,,,,"14/Apr/23 17:24;adelapena;I think this was missed by CASSANDRA-12205, when it added the sstable count to {{{}TableStatsPrinter.DefaultPrinter{}}}. The patch forgot to add it also to the {{StatsHolder#convert2Map}} method used by {{TableStatsPrinter.JsonPrinter}} and {{{}TableStatsPrinter.YamlPrinter{}}}.

Here is a very simple fix:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/2275]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/71775e33-1717-43c4-83d6-02f5a849f983] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/e1fc878a-a63d-4651-a3b5-4ce2db2d3261]|;;;","14/Apr/23 17:27;brandon.williams;Looks good for trunk, how about the other branches?;;;","14/Apr/23 17:31;adelapena;Thanks, I'll add them if that and CI look good.;;;","14/Apr/23 17:39;e.dimitrova;-I guess in older branches the new output should be under a new flag, no? (respectively this will actually lead to adding new flag in trunk too)-

-The bug is from 3.8 and this means that it kept rolling with that output in newer major versions so it will be breaking the nodetool output for users. 3.11 was here for many years already, that is what bothers me.-

It is about JSON, I was wrong and not the nodetool output per se but I am still not sure whether we should just add it;;;","14/Apr/23 17:43;brandon.williams;I don't think extra fields in json will break anything, but I also don't think anyone will complain about finally getting missing information.;;;","14/Apr/23 17:54;adelapena;The regular nodetool output might be parsed by ad hoc scripts that can be broken by this type of changes, so we need the flag for those cases. 
However, I think that the yaml and json outputs that we are modifying here are well-know standards, probably meant to be read by parsers that shouldn't break on the extra fields. So I'd say we don't need the extra flag.;;;","14/Apr/23 18:15;e.dimitrova;Agreed with both of you, thanks. :) ;;;","17/Apr/23 11:43;adelapena;Thanks for pointing it out nevertheless, one can never be too careful spotting compatibility issues :)

Here are the patches for all the branches:
||PR||CI||
|[3.11 |https://github.com/apache/cassandra/pull/2277]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2851/workflows/c5caa6f2-a315-40a8-922a-2cb8c55f97d7]|
|[4.0 |https://github.com/apache/cassandra/pull/2278]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2850/workflows/19806cf0-51b2-4030-ad21-c312471f19a1] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2850/workflows/6c4a313f-0b72-427f-84b0-406803d4002f]|
|[4.1 |https://github.com/apache/cassandra/pull/2279]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2852/workflows/fe8aae70-8716-4d87-9ce8-54a99fd5a283] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2852/workflows/5c124db9-30e6-4919-817a-ea323eb0418d]|
|[trunk|https://github.com/apache/cassandra/pull/2275]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/71775e33-1717-43c4-83d6-02f5a849f983] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2849/workflows/e1fc878a-a63d-4651-a3b5-4ce2db2d3261]|

3.11 doesn't contain any test at all for {{{}cfstats{}}}/{{{}tablestats{}}}, beyond some sporadic usages on Python dtests meant to tests other things, rather than the tool itself. The tests that are modified on 4.0, 4.1 and trunk to include sstable count on json/yaml output don't exist on 3.11. It neither exist the machinery that makes those tests work, which includes {{ToolRunner}} and changes on {{{}CQLTester{}}}. 

We can port that test machinery back to 3.11, but I'm not sure it's worth it. It would make the changes on 3.11 quite more extensive, and that branch doesn't seem to have a very long life expectancy. wdyt?;;;","17/Apr/23 11:46;brandon.williams;bq. neither exist the machinery that makes those tests work

Oof, yeah, that is a lot of heavy lifting to just test a json/yaml field.  I don't think it's worth the effort.;;;","17/Apr/23 12:24;brandon.williams;No related failures, +1 from me.;;;","17/Apr/23 13:10;e.dimitrova;I also agree about 3.11 patch. I can confirm I tested the 3.11 patch with *nodetool cfstats --format json | jq* locally and it shows sstable_count (old_sstable_count not presented in 3.11)

In regards to CI:

*3.11:*
 * test_dead_async_initiator - CASSANDRA-17702
 * testReprepareMixedVersionWithoutReset - CASSANDRA-18021
 * test_upgrade_legacy_table - CASSANDRA-17329

*4.0:*
 * testPagingWithClustering - CASSANDRA-18432
 * testDropCompactStorage - CASSANDRA-17674
 * testFailingMessage[VALIDATION_REQ/parallel/true] - CASSANDRA-18366

*4.1:*
 * paxosRepairHistoryIsntUpdatedInForcedRepair - CASSANDRA-18047

*trunk:*
 * testPagingWithClustering-.jdk11 - CASSANDRA-18432

+1, thanks;;;","17/Apr/23 14:08;adelapena;Thanks for the reviews.

Committed to 3.11 as [08b9471a1ecfcb326ba4fbfdeed5d60aefcc671b|https://github.com/apache/cassandra/commit/08b9471a1ecfcb326ba4fbfdeed5d60aefcc671b] and merged to [4.0|https://github.com/apache/cassandra/commit/3f67827387cd2fa790c5587d17105fcadeda451c], [4.1|https://github.com/apache/cassandra/commit/2208235ce9928bbf7916e6c37616abe29f939214] and [trunk|https://github.com/apache/cassandra/commit/976b8395f981c5956ef617ea90b483e8e15d576d].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix org.apache.cassandra.transport.MessagePayloadTest-.jdk17,CASSANDRA-18437,13531906,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,07/Apr/23 20:36,10/Apr/23 15:27,13/Jul/23 08:41,10/Apr/23 15:27,5.0,,,,,,CI,,,0,,,,,"[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/e3dc630b-b7a4-4f5b-8f29-489bf43ad90f]
{code:java}
java.lang.RuntimeException: java.lang.NoSuchFieldException: modifiers at org.apache.cassandra.transport.MessagePayloadTest.resetCqlQueryHandlerField(MessagePayloadTest.java:98) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) Caused by: java.lang.NoSuchFieldException: modifiers at java.base/java.lang.Class.getDeclaredField(Class.java:2610) at org.apache.cassandra.transport.MessagePayloadTest.resetCqlQueryHandlerField(MessagePayloadTest.java:88){code}",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 10 15:26:55 UTC 2023,,,,,,,All,,,,"0|z1h5x4:",9223372036854775807,,,,brandon.williams,,,Low,,,,https://github.com/apache/cassandra/commit/99b618fec1015ccf4be6629ec9826c022b343263,,,,,,,,,"Patch - 

[https://github.com/ekaterinadimitrova2/cassandra/pull/new/CASSADRA-18437]

Tested locally with JDK11 and JDK17 - 

ant testsome -Dtest.name=org.apache.cassandra.transport.MessagePayloadTest",,,,,"07/Apr/23 21:01;e.dimitrova;This is the same problem we saw in CASSANDRA-18181. Same solution different test class

Patch - 

[https://github.com/ekaterinadimitrova2/cassandra/pull/new/CASSADRA-18437]

Tested locally with JDK8, JDK11 and JDK17 - 
{code:java}
ant testsome -Dtest.name=org.apache.cassandra.transport.MessagePayloadTest{code}
 ;;;","10/Apr/23 13:43;brandon.williams;+1, works for me on j17.;;;","10/Apr/23 15:26;e.dimitrova;Thank you for the review, I rebased and reran the test, just in case.

Committed to https://github.com/apache/cassandra

   [acd815898d..99b618fec1  trunk -> trunk|https://github.com/apache/cassandra/commit/99b618fec1015ccf4be6629ec9826c022b343263];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unit tests in org.apache.cassandra.cql3.EmptyValuesTest class occasionally failing with JDK17,CASSANDRA-18436,13531898,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,djatnieks,e.dimitrova,e.dimitrova,07/Apr/23 18:10,12/May/23 15:11,13/Jul/23 08:41,12/May/23 15:10,5.0,,,,,,CI,,,0,,,,," 

All of them failed with the below stack trace for the same assertion failing:
{code:java}
junit.framework.AssertionFailedError: at org.apache.cassandra.cql3.EmptyValuesTest.verify(EmptyValuesTest.java:90) at org.apache.cassandra.cql3.EmptyValuesTest.verifyJsonInsert(EmptyValuesTest.java:112) at org.apache.cassandra.cql3.EmptyValuesTest.testEmptyDecimal(EmptyValuesTest.java:192) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
 

Unfortunately I do not have a link to the CI run as this was seen last in private infra and not in CircleCI. Maybe we want to check with the multiplexer for flakiness. ",,bereng,djatnieks,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,djatnieks,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri May 12 15:10:32 UTC 2023,,,,,,,All,,,,"0|z1h5vc:",9223372036854775807,,,,bereng,e.dimitrova,,Normal,,,,https://github.com/apache/cassandra/commit/5768e5ae41879885e7e2aca79b38bed53df55711,,,,,,,,,"||Branch||CI||
|[trunk|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18436-trunk]|[java17|https://app.circleci.com/pipelines/github/djatnieks/cassandra/5/workflows/7678e370-43d6-4a94-a50b-ed30c72257f0]|

The test was also run in a loop [here|https://app.circleci.com/pipelines/github/djatnieks/cassandra/6/workflows/31f3aa2f-4806-420e-83d1-22e2bebcc670/jobs/594/tests]

It seems there was an issue with CI setup before as the test does not fail anymore. Suggested patch is just to add a few more assertions to improve the test",,,,,"04/May/23 23:03;djatnieks;I can reproduce this locally with IntelliJ IDE, but not on the command line. I added some error checking to the {{Process}} result and was able to understand that while my IDE is using JDK17, the default java version on my system is still java 8. Example of test result in IntelliJ
{code:java}
java.lang.AssertionError: Error: A JNI error has occurred, please check your installation and try again
Exception in thread ""main"" java.lang.UnsupportedClassVersionError: org/apache/cassandra/tools/SSTableExport has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
    at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
    at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
    at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:601)
 
Expected :0
Actual   :1 {code}
Maybe something like this would be useful to add?

 
||Branch||CI||
|[trunk|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18436-trunk]|[java17|https://app.circleci.com/pipelines/github/djatnieks/cassandra/5/workflows/7678e370-43d6-4a94-a50b-ed30c72257f0]|;;;","05/May/23 20:23;e.dimitrova;Thanks [~djatnieks] , I did not have the chance to look into detail into the issue and the suggested patch and I am afraid I won't be able to do it in the next week probably. But I wanted to suggest you run the test in the multiplexer in a loop with the different JDK options to ensure there is no additional issues covered. For help with the multiplexer I think you can ask [~adelapena] or [~brandon.williams] while I am away, if they have cycles. More information how to use the multiplexer (running tests in a loop in CircleCI) exists in the .circleci/readme.md.;;;","09/May/23 18:51;djatnieks;I ran
{code}
./generate_11_and_17.sh -f
Generating new config.yml file for free tier from config_template_11_and_17.yml

Detecting new or modified tests with git diff --diff-filter=AMR trunk...HEAD:
  org.apache.cassandra.cql3.EmptyValuesTest

Setting environment variables:
  REPEATED_UTESTS: org.apache.cassandra.cql3.EmptyValuesTest
{code}

and after pushing it created this [CI for java17_separate_tests|https://app.circleci.com/pipelines/github/djatnieks/cassandra/6/workflows/8f11795b-1665-4c82-8a35-3d82c7ff7413] - I approved ""start_j17_unit_tests_repeat"" but it doesn't seem to start. Am I doing it wrong? 

Also the [java_11_separate_tests workflow|https://app.circleci.com/pipelines/github/djatnieks/cassandra/6/workflows/31f3aa2f-4806-420e-83d1-22e2bebcc670] has both ""start_j11_unit_tests_repeat"" and ""start_j17_unit_tests_repeat"" for some reason. I approved them both, but again they don't start and I don't know why?
;;;","09/May/23 19:27;djatnieks;Thanks [~e.dimitrova] for the pointer that (of course) the top level ""start"" must be approved as well :) ;;;","10/May/23 18:35;djatnieks;It looks like these pipeline builds timed out due to lack of resources in the free tier...
{noformat}
Try out a larger resource class or running tests in parallel to speed up job execution.  Upgrade your pricing plan to take advantage of longer max job runtimes.

context deadline exceeded{noformat};;;","11/May/23 15:33;e.dimitrova;{quote}It looks like these pipeline builds timed out due to lack of resources in the free tier...
{quote}
Unfortunately, yes, two of the containers exceeded context deadline.

But the good news are that [here|https://app.circleci.com/pipelines/github/djatnieks/cassandra/6/workflows/31f3aa2f-4806-420e-83d1-22e2bebcc670/jobs/594/tests] the other 2 containers, that finished the builds successfully, completed 3500 repetitions which seems to me to be fairly good amount of successful runs.

I suggest we close this ticket as an improvement, by just adding the assertions [~djatnieks]  suggested [here|https://github.com/djatnieks/cassandra/commit/de637047e5c0601c40dfad8ab73e41e5b9b124d0] but nothing to fix so far.

I suspect the failures we saw before were from times when we were still fixing outstanding issues in the CI setup. Unfortunately, I do not have that setup still available to check the logs but we can always reopen this ticket/open a new one if something changes in the future. I am fairly confident we can close this one.
[~mck], [~adelapena], [~Bereng] anyone of you up for a review?;;;","12/May/23 07:21;bereng;Failures indeed are on Ci resources, test passes and SHA's match. +1;;;","12/May/23 13:24;e.dimitrova;Thanks [~bereng] , I will commit it soon;;;","12/May/23 15:10;e.dimitrova;Committed to https://github.com/apache/cassandra

   [290bd0d337..5768e5ae41  trunk -> trunk|https://github.com/apache/cassandra/commit/5768e5ae41879885e7e2aca79b38bed53df55711];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra doesn't start on JDK17,CASSANDRA-18431,13531653,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,05/Apr/23 19:44,06/Apr/23 19:08,13/Jul/23 08:41,06/Apr/23 19:06,5.0,,,,,,Build,,,0,,,,,"CASSANDRA-17199 added a new call to jamm measureDeep which hits some JDK internals and prevents us from starting Cassandra with JDK17. This will be solved with CASSANDRA-18329.

Until new version of jamm lands we can workaround the problem either by adding add-opens or by replacing temporarily

{code:java}
public static final long IPV6_SOCKET_ADDRESS_SIZE = ObjectSizes.measureDeep(new InetSocketAddress(getIpvAddress(16), 42));
{code}

with

{code:java}
public static final long IPV6_SOCKET_ADDRESS_SIZE = 168;
{code}

measured with JOL.

Then we can switch back to the current call [here|https://github.com/apache/cassandra/commit/4444721b6de555352bf0ac3ef7e36f94dc832f41#diff-1122d7d3efe9721af7244d373e66378f7e90cb05fd65859a52e8a3ea58a7c8f9R45] later.",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17869,,,,,CASSANDRA-17199,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 06 19:08:18 UTC 2023,,,,,,,All,,,,"0|z1h4d4:",9223372036854775807,,,,e.dimitrova,mck,,Low,,,,https://github.com/apache/cassandra/commit/d1d733bee5ba85088a77d5c1430705dbb47ab68c   https://github.com/apache/cassandra/commit/c3874624853f5a734a7751965baa9c28e0c83bfd,,,,,,,,,"[Patch|https://github.com/ekaterinadimitrova2/cassandra/commit/77b2a7a7d230a404339e1d7413e01d3664b8a9c3], [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2326/workflows/73f0ac22-02c5-4155-aad3-cd60c2b0cfb9]

[ninja fix|https://github.com/ekaterinadimitrova2/cassandra/commit/b71260b9695dd97a96661a47ec63042e64d32d70], [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2327/workflows/6cc123af-e2de-41c4-85bb-2841b6d9c679]",,,,,"05/Apr/23 20:52;e.dimitrova;[Patch|https://github.com/ekaterinadimitrova2/cassandra/commit/77b2a7a7d230a404339e1d7413e01d3664b8a9c3],  [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2322/workflows/20db9d1b-90ee-44dc-9cd5-6360b5f9671d]
[~dcapwell], [~mck] - I believe this brought us to the CI run seen [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2322/workflows/20db9d1b-90ee-44dc-9cd5-6360b5f9671d] before CASSANDRA-17199
We can revert when jamm gets upgraded in CASSANDRA-18329
Can I get a review, please?;;;","05/Apr/23 22:10;mck;+1;;;","06/Apr/23 01:06;e.dimitrova;Committed:
To https://github.com/apache/cassandra
   [58f5301e78..d1d733bee5|https://github.com/apache/cassandra/commit/d1d733bee5ba85088a77d5c1430705dbb47ab68c]  trunk -> trunk;;;","06/Apr/23 18:06;e.dimitrova;It seems we fixed the issue partially, but I posted a wrong CI link last night. I am sorry about that. We still have to address some failures here related to opening JDK internals.

This is the right CI link that I should have posted... - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2326/workflows/73f0ac22-02c5-4155-aad3-cd60c2b0cfb9]

We need to add the same add-opens for client-options so tools like the token generator can use it.

Ninja fix [here|https://github.com/ekaterinadimitrova2/cassandra/commit/b71260b9695dd97a96661a47ec63042e64d32d70], running CI [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2327/workflows/6cc123af-e2de-41c4-85bb-2841b6d9c679]

I will commit if nothing new pop up, I ran locally a few of the tests and they were passing now.;;;","06/Apr/23 19:08;e.dimitrova;CI looks ""good"", matches the expected known failures from CASSANDRA-16895.

Committed:

To https://github.com/apache/cassandra

   [d1d733bee5..c387462485|https://github.com/apache/cassandra/commit/c3874624853f5a734a7751965baa9c28e0c83bfd]  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CEP-15 (Accord) Original and recover coordinators may hit a race condition with PreApply where reads and writes are interleaved, causing one of the coordinators to see the writes from the other",CASSANDRA-18422,13531343,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,03/Apr/23 20:54,11/Apr/23 20:25,13/Jul/23 08:41,07/Apr/23 22:42,5.0,,,,,,Accord,,,0,pull-request-available,,,,"While verifying CASSANDRA-18364 I saw the following history violation in simulator

{code}
[junit-timeout] Testcase: simulationTest(org.apache.cassandra.simulator.test.ShortAccordSimulationTest)-.jdk1.8:        Caused an ERROR
[junit-timeout] Failed on seed 0xadaca81151490353
[junit-timeout] org.apache.cassandra.simulator.SimulationException: Failed on seed 0xadaca81151490353
[junit-timeout] Caused by: java.lang.AssertionError: History violations detected
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PaxosSimulation.logAndThrow(PaxosSimulation.java:315)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PaxosSimulation.isDone(PaxosSimulation.java:278)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PaxosSimulation$2.hasNext(PaxosSimulation.java:249)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PaxosSimulation.run(PaxosSimulation.java:224)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.AbstractPairOfSequencesPaxosSimulation.run(AbstractPairOfSequencesPaxosSimulation.java:297)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PairOfSequencesAccordSimulation.run(PairOfSequencesAccordSimulation.java:62)
[junit-timeout]         at org.apache.cassandra.simulator.SimulationRunner$Run.run(SimulationRunner.java:374)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.AccordSimulationRunner$Run.run(AccordSimulationRunner.java:39)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.AccordSimulationRunner$Run.run(AccordSimulationRunner.java:30)
[junit-timeout]         at org.apache.cassandra.simulator.SimulationRunner$BasicCommand.run(SimulationRunner.java:355)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.AccordSimulationRunner.main(AccordSimulationRunner.java:76)
[junit-timeout]         at org.apache.cassandra.simulator.test.ShortAccordSimulationTest.simulationTest(ShortAccordSimulationTest.java:32)
[junit-timeout]         Suppressed: org.apache.cassandra.simulator.paxos.HistoryViolation: Inconsistent sequences on 1: [2, 0, 1, 6, 8, 9, 13, 14, 16, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 40, 43, 47, 48, 49, 54, 56, 57, 58, 60, 64, 68, 70, 71, 74, 76, 79, 80, 83, 85, 87, 87] vs [2, 0, 1, 6, 8, 9, 13, 14, 16, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 40, 43, 47, 48, 49, 54, 56, 57, 58, 60, 64, 68, 70, 71, 74, 76, 79, 80, 83, 85, 87]+90
[junit-timeout]                 at accord.verify.StrictSerializabilityVerifier$Register.updateSequence(StrictSerializabilityVerifier.java:607)
[junit-timeout]                 at accord.verify.StrictSerializabilityVerifier$Register.access$100(StrictSerializabilityVerifier.java:576)
[junit-timeout]                 at accord.verify.StrictSerializabilityVerifier.apply(StrictSerializabilityVerifier.java:825)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.StrictSerializabilityValidator$1.lambda$close$0(StrictSerializabilityValidator.java:66)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.StrictSerializabilityValidator.convertHistoryViolation(StrictSerializabilityValidator.java:89)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.StrictSerializabilityValidator.access$200(StrictSerializabilityValidator.java:27)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.StrictSerializabilityValidator$1.close(StrictSerializabilityValidator.java:66)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.LoggingHistoryValidator$1.close(LoggingHistoryValidator.java:63)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.PairOfSequencesAccordSimulation$ReadWriteOperation.verify(PairOfSequencesAccordSimulation.java:218)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.PaxosSimulation$Operation.accept(PaxosSimulation.java:135)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.PairOfSequencesAccordSimulation$ReadWriteOperation.accept(PairOfSequencesAccordSimulation.java:171)
[junit-timeout]                 at org.apache.cassandra.simulator.paxos.PaxosSimulation$Operation.accept(PaxosSimulation.java:83)
[junit-timeout]                 at org.apache.cassandra.simulator.systems.SimulatedActionCallable$1.run(SimulatedActionCallable.java:47)
[junit-timeout]                 at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]                 at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]                 at java.lang.Thread.run(Thread.java:750)
{code}

Adding logging to track message passing, reads, and writes, I have the following ordering

{code}
[isolatedExecutor:3]  node3 2023-04-03 12:54:30,200 send(/127.0.0.1:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ))
[isolatedExecutor:3]  node3 2023-04-03 12:54:30,200 send(/127.0.0.2:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ))
[isolatedExecutor:3]  node3 2023-04-03 12:54:30,200 send(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ))
[CommandStore[2]:1]   node1 2023-04-03 12:54:30,208 CS:[2] OP:0xea64a268 reply(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ), (from:/127.0.0.1:7012, type:REQUEST_RESPONSE verb:ACCORD_PREACCEPT_RSP))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,209 CS:[2] OP:0x9761fb36 reply(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_PREACCEPT_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,210 CS:[2] OP:0xe62230f2 reply(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_PREACCEPT_REQ), (from:/127.0.0.2:7012, type:REQUEST_RESPONSE verb:ACCORD_PREACCEPT_RSP))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,211 CS:[2] OP:0xc5563e5d send(/127.0.0.1:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,212 CS:[2] OP:0xc5563e5d send(/127.0.0.2:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,212 CS:[2] OP:0xc5563e5d send(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,329 CS:[2] OP:0xa3e62850 send(/127.0.0.1:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,329 CS:[2] OP:0xa3e62850 send(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,329 CS:[2] OP:0xa3e62850 send(/127.0.0.3:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,334 CS:[2] OP:0xf8562cfb reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_RECOVER_RSP))
[CommandStore[2]:1]   node1 2023-04-03 12:54:30,338 CS:[2] OP:0xcfd2540f reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ), (from:/127.0.0.1:7012, type:REQUEST_RESPONSE verb:ACCORD_RECOVER_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,338 CS:[2] OP:0xc4cf5af8 reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_RECOVER_REQ), (from:/127.0.0.2:7012, type:REQUEST_RESPONSE verb:ACCORD_RECOVER_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,340 CS:[2] OP:0x9e4f00f0 send(/127.0.0.1:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,340 CS:[2] OP:0x9e4f00f0 send(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,340 CS:[2] OP:0x9e4f00f0 send(/127.0.0.3:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,343 CS:[2] OP:0xb60153ab reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_GET_DEPS_RSP))
[CommandStore[2]:1]   node1 2023-04-03 12:54:30,344 CS:[2] OP:0xac20a1d6 reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ), (from:/127.0.0.1:7012, type:REQUEST_RESPONSE verb:ACCORD_GET_DEPS_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,345 CS:[2] OP:0xa73f7484 reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_GET_DEPS_REQ), (from:/127.0.0.2:7012, type:REQUEST_RESPONSE verb:ACCORD_GET_DEPS_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,347 CS:[2] OP:0xfc37fb1a send(/127.0.0.1:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,347 CS:[2] OP:0xfc37fb1a send(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,347 CS:[2] OP:0xfc37fb1a send(/127.0.0.3:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,349 CS:[2] OP:0xff574276 Performing read
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,349 CS:[2] OP:0xff574276 Performing read
[ReadStage:1]         node3 2023-04-03 12:54:30,351 Performing read; post
[ReadStage:1]         node3 2023-04-03 12:54:30,351 Performing read; post
[ReadStage:1]         node3 2023-04-03 12:54:30,351 Performing read; pre
[ReadStage:1]         node3 2023-04-03 12:54:30,351 Performing read; pre
[ReadStage:1]         node3 2023-04-03 12:54:30,351 reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_READ_RSP))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,359 Performing coordinated write
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,359 send(/127.0.0.1:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,359 send(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,360 send(/127.0.0.3:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,363 CS:[2] OP:0x8bdb6795 Performing read
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,363 CS:[2] OP:0x8bdb6795 Performing read
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,364 CS:[2] OP:0x92e94460 Performing write
[MutationStage:4]     node3 2023-04-03 12:54:30,364 Performing write: pre
[MutationStage:4]     node3 2023-04-03 12:54:30,365 Performing write: post
[ReadStage:1]         node3 2023-04-03 12:54:30,365 Performing read; post
[ReadStage:1]         node3 2023-04-03 12:54:30,365 Performing read; pre
[ReadStage:1]         node3 2023-04-03 12:54:30,369 Performing read; post
[ReadStage:1]         node3 2023-04-03 12:54:30,369 Performing read; pre
[ReadStage:1]         node3 2023-04-03 12:54:30,369 reply(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_COMMIT_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_READ_RSP))
[CommandStore[2]:1]   node1 2023-04-03 12:54:30,370 CS:[2] OP:0xa59dc286 Performing write
[CommandStore[2]:1]   node2 2023-04-03 12:54:30,374 CS:[2] OP:0xab0f3ca4 Performing write
[MutationStage:1]     node2 2023-04-03 12:54:30,374 Performing write: pre
[MutationStage:1]     node2 2023-04-03 12:54:30,375 Performing write: post
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,376 Performing coordinated write
[MutationStage:3]     node1 2023-04-03 12:54:30,376 Performing write: pre
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,377 send(/127.0.0.1:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,377 send(/127.0.0.2:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,377 send(/127.0.0.3:7012, (from:/127.0.0.3:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ))
[CommandStore[2]:1]   node3 2023-04-03 12:54:30,382 reply(/127.0.0.2:7012, (from:/127.0.0.2:7012, type:IMMEDIATE verb:ACCORD_APPLY_REQ), (from:/127.0.0.3:7012, type:REQUEST_RESPONSE verb:ACCORD_APPLY_RSP))
[MutationStage:3]     node1 2023-04-03 12:54:30,382 Performing write: post
{code}

(The transaction has a returning select and an auto-read, which is why there are double logs for reads)

Here we see the following timing

{code}
T00 node3 starts txn
T01 node3 sends COMMIT
T02 node2 starts recover
T03 all nodes ack to the pending recover
T04 node2 sends COMMIT
T05 node3 performs reads needed for txn
T06 node3 sends read results to node2
T07 node2 performs write locally and send APPLY
T08 node3 performs write
T09 node3 performs reads needed for txn
T10 node3 send reads to node3
T11 node3 performs write and sends APPLY
T12 node3 ACKs APPLY to node2
{code}

Given the fact the simulator got a response back and didn’t get a preempt, this implies that the original coordinator was able to complete the full transaction without issues and reply back, but the reads/writes were interleaved between node3 and node2 causing the second write to observe the first write",,dcapwell,,,,,,,,,"Claudenw commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1156889191


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,142 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation {}
+    private static class Read implements Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
-        {
-            final int pk, id, count;
-            final int[] seq;
+        final int pk, id, count;
+        final int[] seq;
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        Read(int pk, int id, int count, int[] seq)
+        {
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
         }
-        class Write
+    }
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int pk, id;
-            final boolean success;
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
+    }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();
+
+        Witness(int start, int end)
+        {
+            this.start = start;
+            this.end = end;
         }
-        class Witness
+
+        void read(int pk, int id, int count, int[] seq)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            actions.add(new Read(pk, id, count, seq));
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        void write(int pk, int id, boolean success)
+        {
+            actions.add(new Write(pk, id, success));
+        }
 
-            void read(int pk, int id, int count, int[] seq)
+        void process(HistoryValidator validator)
+        {
+            try (HistoryValidator.Checker check = validator.witness(start, end))
             {
-                actions.add(new Read(pk, id, count, seq));
+                for (Object a : actions)
+                {
+                    if (a instanceof Read)
+                    {
+                        Read read = (Read) a;
+                        check.read(read.pk, read.id, read.count, read.seq);
+                    }
+                    else
+                    {
+                        Write write = (Write) a;
+                        check.write(write.pk, write.id, write.success);
+                    }
+                }
             }
+        }
 
-            void write(int pk, int id, boolean success)
+        IntSet pks()
+        {
+            IntSet pks = new IntHashSet();
+            for (Operation action : actions)
             {
-                actions.add(new Write(pk, id, success));
+                if (action instanceof Read)
+                {
+                    pks.add(((Read) action).pk);
+                }
+                else if (action instanceof Write)
+                {
+                    pks.add(((Write) action).pk);
+                }
+                else
+                {
+                    throw new IllegalStateException(""Unknown type: "" + action.getClass());
+                }
             }
+            return pks;
+        }
 
-            void process(HistoryValidator validator)
+        @Override
+        public String toString()
+        {
+            StringBuilder sb = new StringBuilder();
+            sb.append(""Witness(start="").append(start).append("", end="").append(end).append("")\n"");
+            for (Object a : actions)
             {
-                try (HistoryValidator.Checker check = validator.witness(start, end))
+                if (a instanceof Read)
                 {
-                    for (Object a : actions)
-                    {
-                        if (a instanceof Read)
-                        {
-                            Read read = (Read) a;
-                            check.read(read.pk, read.id, read.count, read.seq);
-                        }
-                        else
-                        {
-                            Write write = (Write) a;
-                            check.write(write.pk, write.id, write.success);
-                        }
-                    }
+                    Read read = (Read) a;
+                    sb.append(""\tread(pk="").append(read.pk).append("", id="").append(read.id).append("", count="").append(read.count).append("", seq="").append(Arrays.toString(read.seq)).append("")\n"");
+                }
+                else if (a instanceof Write)
+                {
+                    Write write = (Write) a;
+                    sb.append(""\twrite(pk="").append(write.pk).append("", id="").append(write.id).append("", success="").append(write.success).append("")\n"");
+                }
+                else
+                {
+                    throw new AssertionError(""Unexpected type: "" + a.getClass());
                 }
             }

Review Comment:
   As above, shouldn't the `Operation` implementations `Read` and `Write` override `toString()`?  Then the method could simply be called here on each action.



##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,142 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation {}
+    private static class Read implements Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
-        {
-            final int pk, id, count;
-            final int[] seq;
+        final int pk, id, count;
+        final int[] seq;
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        Read(int pk, int id, int count, int[] seq)
+        {
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
         }
-        class Write
+    }
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int pk, id;
-            final boolean success;
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
+    }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();
+
+        Witness(int start, int end)
+        {
+            this.start = start;
+            this.end = end;
         }
-        class Witness
+
+        void read(int pk, int id, int count, int[] seq)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            actions.add(new Read(pk, id, count, seq));
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        void write(int pk, int id, boolean success)
+        {
+            actions.add(new Write(pk, id, success));
+        }
 
-            void read(int pk, int id, int count, int[] seq)
+        void process(HistoryValidator validator)
+        {
+            try (HistoryValidator.Checker check = validator.witness(start, end))
             {
-                actions.add(new Read(pk, id, count, seq));
+                for (Object a : actions)
+                {
+                    if (a instanceof Read)
+                    {
+                        Read read = (Read) a;
+                        check.read(read.pk, read.id, read.count, read.seq);
+                    }
+                    else
+                    {
+                        Write write = (Write) a;
+                        check.write(write.pk, write.id, write.success);
+                    }
+                }

Review Comment:
   Since `actions` is a List<Operation> would it make sense to add a `validate(HistoryValidator.Checker)` method to `Operaion` and simply call it here passing the `check` variable as an argument?



##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,142 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation {}
+    private static class Read implements Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
-        {
-            final int pk, id, count;
-            final int[] seq;
+        final int pk, id, count;
+        final int[] seq;
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        Read(int pk, int id, int count, int[] seq)
+        {
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
         }
-        class Write
+    }
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int pk, id;
-            final boolean success;
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
+    }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();
+
+        Witness(int start, int end)
+        {
+            this.start = start;
+            this.end = end;
         }
-        class Witness
+
+        void read(int pk, int id, int count, int[] seq)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            actions.add(new Read(pk, id, count, seq));
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        void write(int pk, int id, boolean success)
+        {
+            actions.add(new Write(pk, id, success));
+        }
 
-            void read(int pk, int id, int count, int[] seq)
+        void process(HistoryValidator validator)
+        {
+            try (HistoryValidator.Checker check = validator.witness(start, end))
             {
-                actions.add(new Read(pk, id, count, seq));
+                for (Object a : actions)
+                {
+                    if (a instanceof Read)
+                    {
+                        Read read = (Read) a;
+                        check.read(read.pk, read.id, read.count, read.seq);
+                    }
+                    else
+                    {
+                        Write write = (Write) a;
+                        check.write(write.pk, write.id, write.success);
+                    }
+                }
             }
+        }
 
-            void write(int pk, int id, boolean success)
+        IntSet pks()
+        {
+            IntSet pks = new IntHashSet();
+            for (Operation action : actions)
             {
-                actions.add(new Write(pk, id, success));
+                if (action instanceof Read)
+                {
+                    pks.add(((Read) action).pk);
+                }
+                else if (action instanceof Write)
+                {
+                    pks.add(((Write) action).pk);
+                }
+                else
+                {
+                    throw new IllegalStateException(""Unknown type: "" + action.getClass());
+                }
             }
+            return pks;

Review Comment:
   Like the previous comment, would it not make sense for Operation to have a `getPK()` method to so that the set of PK can be generated without `instanceof` checks?



;04/Apr/23 08:15;githubbot;600","dcapwell commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1157501770


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,142 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation {}
+    private static class Read implements Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
-        {
-            final int pk, id, count;
-            final int[] seq;
+        final int pk, id, count;
+        final int[] seq;
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        Read(int pk, int id, int count, int[] seq)
+        {
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
         }
-        class Write
+    }
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int pk, id;
-            final boolean success;
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
+    }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();
+
+        Witness(int start, int end)
+        {
+            this.start = start;
+            this.end = end;
         }
-        class Witness
+
+        void read(int pk, int id, int count, int[] seq)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            actions.add(new Read(pk, id, count, seq));
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        void write(int pk, int id, boolean success)
+        {
+            actions.add(new Write(pk, id, success));
+        }
 
-            void read(int pk, int id, int count, int[] seq)
+        void process(HistoryValidator validator)
+        {
+            try (HistoryValidator.Checker check = validator.witness(start, end))
             {
-                actions.add(new Read(pk, id, count, seq));
+                for (Object a : actions)
+                {
+                    if (a instanceof Read)
+                    {
+                        Read read = (Read) a;
+                        check.read(read.pk, read.id, read.count, read.seq);
+                    }
+                    else
+                    {
+                        Write write = (Write) a;
+                        check.write(write.pk, write.id, write.success);
+                    }
+                }

Review Comment:
   thanks, did this and all other places that did `instanceOf` checks



;04/Apr/23 16:32;githubbot;600","dcapwell commented on PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#issuecomment-1496274883

   Thanks for the feedback @Claudenw , pushed changes to address your feedback


;04/Apr/23 16:32;githubbot;600","Claudenw commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1158103859


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
+        int pk();
+        void check(HistoryValidator.Checker check);
+        void toString(StringBuilder sb);

Review Comment:
   This name conflicts semantically with the `Object.toString()`  semantically this is probably better named `addString()`  or `appendString()`



##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
+        int pk();
+        void check(HistoryValidator.Checker check);
+        void toString(StringBuilder sb);
+    }
+
+    private static class Read implements Operation
+    {
+        final int pk, id, count;
+        final int[] seq;
+
+        Read(int pk, int id, int count, int[] seq)
         {
-            final int pk, id, count;
-            final int[] seq;
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
+        }
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        @Override
+        public int pk()
+        {
+            return pk;
         }
-        class Write
+
+        @Override
+        public void check(HistoryValidator.Checker check)
         {
-            final int pk, id;
-            final boolean success;
+            check.read(pk, id, count, seq);
+        }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+        @Override
+        public void toString(StringBuilder sb)
+        {
+            sb.append(""read(pk="").append(pk).append("", id="").append(id).append("", count="").append(count).append("", seq="").append(Arrays.toString(seq)).append("")\n"");
         }
-        class Witness
+    }
+
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        @Override
+        public int pk()
+        {
+            return pk;
+        }
 
-            void read(int pk, int id, int count, int[] seq)
-            {
-                actions.add(new Read(pk, id, count, seq));
-            }
+        @Override
+        public void check(HistoryValidator.Checker check)
+        {
+            check.write(pk, id, success);
+        }
 
-            void write(int pk, int id, boolean success)
-            {
-                actions.add(new Write(pk, id, success));
-            }
+        @Override
+        public void toString(StringBuilder sb)
+        {
+            sb.append(""write(pk="").append(pk).append("", id="").append(id).append("", success="").append(success).append("")\n"");
+        }
+    }
+
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();

Review Comment:
   Is there any reason not to make the variables private?



##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation

Review Comment:
   If `Operation` was an abstract class rather than an interface you could implement pk() directly in the class and not repeat it in the subclasses.  I note that ID is also used in every instance of operation. 
   
   Do you expect other implementations of Operation that do not have the `pk` or `id` specified in the constructor?
   
   Is there any reason not to make the variable private?



##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
+        int pk();
+        void check(HistoryValidator.Checker check);
+        void toString(StringBuilder sb);
+    }
+
+    private static class Read implements Operation
+    {
+        final int pk, id, count;
+        final int[] seq;

Review Comment:
   Is there any reason not to make the variable private?



;05/Apr/23 07:11;githubbot;600","dcapwell commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1158852500


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
+        int pk();
+        void check(HistoryValidator.Checker check);
+        void toString(StringBuilder sb);
+    }
+
+    private static class Read implements Operation
+    {
+        final int pk, id, count;
+        final int[] seq;

Review Comment:
   more verbose and have no impact.  Since all access is in the same file java will allow all classes to reach in and touch...
   
   now, when it comes to our style, when its not directly needed we should remove; so in this case since `private` doesn't matter our style says it shouldn't be there.



;05/Apr/23 18:09;githubbot;600","dcapwell commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1158854823


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation

Review Comment:
   honestly I prefer interfaces over abstract class, and having an abstract class just too hold `pk` is not something I care too much for.
   
   so this points down to style, and I prefer this style =)
   
   > Is there any reason not to make the variable private?
   
   redundant so not required



;05/Apr/23 18:12;githubbot;600","dcapwell commented on code in PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#discussion_r1158855935


##########
test/simulator/test/org/apache/cassandra/simulator/paxos/HistoryValidatorTest.java:
##########
@@ -356,79 +383,146 @@ private static Event writeOnly(int pk)
         return new Event(EnumSet.of(Event.Type.WRITE), pk, null);
     }
 
-    private void fromLog(String log)
+    private interface Operation
     {
-        IntSet pks = new IntHashSet();
-        class Read
+        int pk();
+        void check(HistoryValidator.Checker check);
+        void toString(StringBuilder sb);
+    }
+
+    private static class Read implements Operation
+    {
+        final int pk, id, count;
+        final int[] seq;
+
+        Read(int pk, int id, int count, int[] seq)
         {
-            final int pk, id, count;
-            final int[] seq;
+            this.pk = pk;
+            this.id = id;
+            this.count = count;
+            this.seq = seq;
+        }
 
-            Read(int pk, int id, int count, int[] seq)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.count = count;
-                this.seq = seq;
-            }
+        @Override
+        public int pk()
+        {
+            return pk;
         }
-        class Write
+
+        @Override
+        public void check(HistoryValidator.Checker check)
         {
-            final int pk, id;
-            final boolean success;
+            check.read(pk, id, count, seq);
+        }
 
-            Write(int pk, int id, boolean success)
-            {
-                this.pk = pk;
-                this.id = id;
-                this.success = success;
-            }
+        @Override
+        public void toString(StringBuilder sb)
+        {
+            sb.append(""read(pk="").append(pk).append("", id="").append(id).append("", count="").append(count).append("", seq="").append(Arrays.toString(seq)).append("")\n"");
         }
-        class Witness
+    }
+
+    private static class Write implements Operation
+    {
+        final int pk, id;
+        final boolean success;
+
+        Write(int pk, int id, boolean success)
         {
-            final int start, end;
-            final List<Object> actions = new ArrayList<>();
+            this.pk = pk;
+            this.id = id;
+            this.success = success;
+        }
 
-            Witness(int start, int end)
-            {
-                this.start = start;
-                this.end = end;
-            }
+        @Override
+        public int pk()
+        {
+            return pk;
+        }
 
-            void read(int pk, int id, int count, int[] seq)
-            {
-                actions.add(new Read(pk, id, count, seq));
-            }
+        @Override
+        public void check(HistoryValidator.Checker check)
+        {
+            check.write(pk, id, success);
+        }
 
-            void write(int pk, int id, boolean success)
-            {
-                actions.add(new Write(pk, id, success));
-            }
+        @Override
+        public void toString(StringBuilder sb)
+        {
+            sb.append(""write(pk="").append(pk).append("", id="").append(id).append("", success="").append(success).append("")\n"");
+        }
+    }
+
+    private static class Witness
+    {
+        final int start, end;
+        final List<Operation> actions = new ArrayList<>();

Review Comment:
   the class is private, so its redundant...  if you add `private` you don't block access to anything that can see this class or related classes; so as it only adds verbosity our style says to drop



;05/Apr/23 18:13;githubbot;600","dcapwell commented on PR #2259:
URL: https://github.com/apache/cassandra/pull/2259#issuecomment-1497916054

   @Claudenw pushed feedback or commented addressing why I didn't make changes, let me know if this makes sense to you


;05/Apr/23 18:13;githubbot;600","dcapwell closed pull request #2259: CASSANDRA-18422: C* side
URL: https://github.com/apache/cassandra/pull/2259


;11/Apr/23 20:25;githubbot;600",,,,,,,,,,,,,,,,,0,5400,,,0,5400,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Workload Replay,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 07 22:32:27 UTC 2023,,,,,,,All,,,,"0|z1h2gg:",9223372036854775807,,,,aweisberg,,,Critical,,NA,,https://github.com/apache/cassandra/commit/10671745a254b0a7acf50310d7504896c9f2c584,,,,,,,,,added tests,,,,,"05/Apr/23 16:25;dcapwell;patch pulls some things from CASSANDRA-18364 to allow both to go in parallel.  I improved burn tests to hit the issue that this JIRA reports and that also finds bugs resolved by CASSANDRA-18364

It is possible that 18364 is solved by CASSANDRA-18377 due to the fact a new similar issues pops up in burn tests (they can't use AsyncOperation as that's in C*)

{code}
java.lang.IllegalStateException: Result has already been set on accord.impl.basic.TaskExecutorService$Task@709cd47b
	at accord.utils.async.AsyncResult$Settable.setFailure(AsyncResult.java:83)
	at accord.impl.basic.TaskExecutorService$Task.run(TaskExecutorService.java:53)
	at accord.impl.basic.Cluster.processNext(Cluster.java:176)
	at accord.impl.basic.Cluster.processPending(Cluster.java:124)
	at accord.impl.basic.Cluster.run(Cluster.java:242)
	at accord.burn.BurnTest.burn(BurnTest.java:278)
	at accord.burn.BurnTest.run(BurnTest.java:350)
	at accord.burn.BurnTest.testOne(BurnTest.java:338)
	Suppressed: java.lang.IllegalStateException: Txn [1,118,3,1]'s waiting on does not contain store 7; waitingOn={6}
		at accord.utils.Invariants.illegalState(Invariants.java:44)
		at accord.utils.Invariants.checkState(Invariants.java:139)
		at accord.messages.ReadData.readComplete(ReadData.java:265)
{code}

For that reason ill mark CASSANDRA-18377 as a dup of CASSANDRA-18364;;;","07/Apr/23 22:32;dcapwell;+1 from Ariel in PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-21 Always populate local gossip state at startup,CASSANDRA-18403,13531191,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,marcuse,samt,samt,03/Apr/23 08:31,04/Apr/23 07:59,13/Jul/23 08:41,04/Apr/23 07:59,NA,,,,,,Transactional Cluster Metadata,,,0,,,,,"Properly initialise the gossip state for the local node during startup
 ",,samt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,marcuse,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Normal,Adhoc Test,,false,CASSANDRA-18330,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Apr 04 07:59:03 UTC 2023,,,,,,,All,,,,"0|z1h1io:",9223372036854775807,,,,ifesdjeen,samt,,Normal,,NA,,https://github.com/apache/cassandra/tree/cep-21-tcm,,,,,,,,,cci,,,,,"03/Apr/23 09:03;samt;https://github.com/beobal/cassandra/commit/ade4d07e683beb64c0abc755b978224706edc592;;;","04/Apr/23 07:59;samt;Circle CI results are decent although we're only running a the core test jobs right now failures are trending the right way. 

|| || Total tests || Failures ||
|[Unit|https://app.circleci.com/pipelines/github/beobal/cassandra/411/workflows/526f32f9-1b26-4fff-abeb-e18224d709ec/jobs/4712]|147|10048|
|[In-JVM dtest|https://app.circleci.com/pipelines/github/beobal/cassandra/411/workflows/526f32f9-1b26-4fff-abeb-e18224d709ec/jobs/4711]|47|951|
|[Python dtest|https://app.circleci.com/pipelines/github/beobal/cassandra/411/workflows/526f32f9-1b26-4fff-abeb-e18224d709ec/jobs/4710]|238|1072|

Committed to feature branch. 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rename internal state() method in AbstractFuture to not conflict with Java 19 changes,CASSANDRA-18395,13530942,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,slachiewicz,slachiewicz,slachiewicz,31/Mar/23 09:27,10/Apr/23 18:04,13/Jul/23 08:41,10/Apr/23 18:03,5.0,,,,,,Build,,,0,,,,,"From Java 19 we have new method Future.state and it conflicts with our private method. Fix bellow. 

[https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/util/concurrent/Future.html#state()]

 
{code:java}
+++ b/src/java/org/apache/cassandra/utils/concurrent/AbstractFuture.java
@@ -494,11 +494,11 @@ public abstract class AbstractFuture<V> implements Future<V>
     public String toString()
     {
         String description = description();
-        String state = state();
+        String state = stateInfo();
         return description == null ? state : (state + ' ' + description);
     }
 
-    private String state()
+    private String stateInfo()
     {
         Object result = this.result;
         if (isSuccess(result)){code}",,e.dimitrova,slachiewicz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18440,,,,,0.0,slachiewicz,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 10 18:03:06 UTC 2023,,,,,,,All,,,,"0|z1gzzk:",9223372036854775807,,,,brandon.williams,e.dimitrova,,Low,,,,https://github.com/apache/cassandra/commit/ca6450bda4136f3c16992c807f510520580a60cb,,,,,,,,,"{code:java}
+++ b/src/java/org/apache/cassandra/utils/concurrent/AbstractFuture.java
@@ -494,11 +494,11 @@ public abstract class AbstractFuture<V> implements Future<V>
     public String toString()
     {
         String description = description();
-        String state = state();
+        String state = stateInfo();
         return description == null ? state : (state + ' ' + description);
     }
 
-    private String state()
+    private String stateInfo()
     {
         Object result = this.result;
         if (isSuccess(result))
{code}

CI run needed plus manual tested that trunk compiles with JDK19",,,,,"04/Apr/23 14:18;e.dimitrova;Hi [~slachiewicz], Thank you for testing, raising a ticket, and submitting a patch! Truly appreciate the effort!
Currently the plan for Cassandra 5.0 is to be shipped with JDK11 builds which can be run with 11 and 17 (experimental at first).
I believe this patch is not needed for supporting JDK17? 
With that said, I will remove it from the JDK17 epic. It is needed for efforts to bring Cassandra to future versions, It is not a blocker for JDK17.
Upgrading to newer JDK versions is/will be a continuous community effort. So I see this ticket as valuable and thank you once again for looking into it! Someone with cycles will take a look at it (CI run needed, etc) but it is not a blocker for JDK17 so it might not be immediate priority to commit it. ;;;","04/Apr/23 19:04;slachiewicz;hi Yes, this is not blocker for any Java version - it's just simple internal method so I dont think it;s worth to discuss or spent on this so much time.;;;","10/Apr/23 16:41;e.dimitrova;I can confirm that current trunk fails with JDK19 and when the patch is applied I can successfully run:
{code:java}
ant jar build-test{code}
I agree with the provided explanation. Patch posted here 

[https://github.com/ekaterinadimitrova2/cassandra/pull/new/CASSANDRA-18395]

CI pushed [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-18395]
I will check the CI results later;;;","10/Apr/23 17:39;e.dimitrova;*Tets failures:*
 * _testPagingWithClustering-.jdk11_ - known from CASSANDRA-18432
 * _testForcedNormalRepairWithOneNodeDown-.jdk1.8_ - Known issue from - [https://ci-cassandra.apache.org/job/Cassandra-trunk/1509/testReport/org.apache.cassandra.distributed.test/RepairTest/testForcedNormalRepairWithOneNodeDown__jdk1_8/]
I opened a ticket - CASSANDRA-18440; also linked in Butler

[~brandon.williams] do you mind to take a look, too?;;;","10/Apr/23 17:42;brandon.williams;LGTM, +1.;;;","10/Apr/23 18:03;e.dimitrova;Committed to [https://github.com/apache/cassandra]

   [99b618fec1..ca6450bda4  trunk -> trunk|https://github.com/apache/cassandra/commit/ca6450bda4136f3c16992c807f510520580a60cb]

 

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
consistent timeout: dtest-upgrade.upgrade_tests.cql_tests.cls.test_cql3_non_compound_range_tombstones on trunk,CASSANDRA-18391,13530860,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,jmckenzie,jmckenzie,30/Mar/23 19:50,18/Apr/23 14:51,13/Jul/23 08:41,31/Mar/23 15:44,3.0.29,3.11.15,4.0.9,5.0,,,Test/dtest/python,,,0,,,,,"Failed 30 times in the last 30 runs. Flakiness: 0%, Stability: 0%

link: https://ci-cassandra.apache.org/job/Cassandra-trunk/1511/testReport/dtest-upgrade.upgrade_tests.cql_tests/cls/test_cql3_non_compound_range_tombstones/
Error message: failed on setup with ""Failed: Timeout >900.0s""",,adelapena,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18396,,,,,0.0,brandon.williams,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 31 15:44:09 UTC 2023,,,,,,,All,,,,"0|z1gzhc:",9223372036854775807,,,,adelapena,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/c49bcf307686886fb34eea646eb3e7ff5855eb03,,,,,,,,,run CI,,,,,"30/Mar/23 21:54;brandon.williams;Near as I can tell, this shouldn't be running.  It's decorated max_version='3.99' [here|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/cql_tests.py#L1538], the doc says ""Checks that 3.0 serializes RangeTombstoneLists correctly when communicating with 2.2 nodes"", and is indeed skipped when I try to run it.

One thing I noticed that the class name is no longer 'TestCQL' and is instead 'cls', I think from the transition to python 3.8, perhaps due to this inheriting UpgradeTester which inherits from both Tester and the builtin abstract base class. ;;;","30/Mar/23 22:28;brandon.williams;This test is being skipped, but the 'since' fixture, when it detects an upgrade, checks if any of the involved versions are excluded and then skips them, but doing this does the ccm setup for the old version first.  If you don't already have this setup done, you can get a really long skip:

bq. 1 skipped in 241.68 seconds

We can skip out on these upgrades faster, like [this|https://github.com/driftx/cassandra-dtest/commit/4481f86e80f9625bcb1cfc36e1a97028d235b1d0].

[Upgrade tests on trunk|https://app.circleci.com/pipelines/github/driftx/cassandra/946/workflows/5afeccc6-753e-4a88-90eb-ecd0e56ac8cc].

[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2405/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2405/pipeline]
;;;","31/Mar/23 12:14;adelapena;Looks good to me. I have verified that the test is still run in [3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/2741/workflows/40dcb79f-5178-4736-ba16-bd62ac486870/jobs/32976/artifacts] and [3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2740/workflows/a7fa29c9-6b4f-4628-8e89-ebde92b930ac/jobs/32977/artifacts]. Hopefully skipping the ccm setup will help with other timeouts.

Probably we should add a similar skipping of the ccm setup on {{ported_to_in_jvm}}, a few lines below, [here|https://github.com/driftx/cassandra-dtest/blob/4481f86e80f9625bcb1cfc36e1a97028d235b1d0/conftest.py#L493].;;;","31/Mar/23 13:43;brandon.williams;Good call, updated [my branch|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-18391] and a [circle precommit|https://app.circleci.com/pipelines/github/driftx/cassandra/951/workflows/40fc731d-0d44-4dd9-838c-fe6d2919c72f].

[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2406/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2406/pipeline]
;;;","31/Mar/23 15:10;adelapena;Looks great. It seems the last CI run doesn't include upgrade dtests, but I guess we can do with the previous run, since {{ported_to_in_jvm}} isn't used on upgrade dtests.;;;","31/Mar/23 15:44;brandon.williams;bq. ported_to_in_jvm isn't used on upgrade dtests

Indeed that's why I didn't run them.  Thanks for the review, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jackson-core-2.13.2.jar vulnerability: CVE-2022-45688,CASSANDRA-18389,13530651,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,29/Mar/23 16:03,03/Apr/23 11:11,13/Jul/23 08:41,03/Apr/23 11:11,3.11.15,4.0.9,4.1.2,5.0,,,Dependencies,,,0,,,,,This is currently failing in the OWASP scan.,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 03 11:11:16 UTC 2023,,,,,,,All,,,,"0|z1gy7c:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/d41e69a6527fd42d0c17ac4f5a0ecb81d00837ca,,,,,,,,,run CI,,,,,"29/Mar/23 16:21;brandon.williams;https://nvd.nist.gov/vuln/detail/CVE-2022-45688

bq. A stack overflow in the XML.toJSONObject component of hutool-json v5.8.10 allows attackers to cause a Denial of Service (DoS) via crafted JSON or XML data.

We aren't calling any 'toJSONObject' things, we can suppress:

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18389-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/942/workflows/82eb5bdb-e8a7-47f2-9fbf-e6d6eee523b5]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18389-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/939/workflows/dfc592a1-22a7-4485-997e-09f85213a957], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/939/workflows/2c36af64-3f2e-4b76-bba6-9e486c6aa745]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18389-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/938/workflows/eddd2ec3-23ca-4b73-9e01-23c0179541ed], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/938/workflows/d91749d6-9b97-46a4-9934-532ac0c817f4]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18389-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/937/workflows/7b5ce52d-aa36-415c-97e8-edd1c743e39d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/937/workflows/3d9a11ff-bfb1-4a31-a29b-2f08a5f34e11]|
;;;","03/Apr/23 08:40;bereng;Failures look unrelated. +1.

I just noticed we add suppressions as we're not using some methods. But that doesn't prevent introduction and usage of that same method in the future. I wonder if we could think of some way to make a build fail when sbdy tried to use an offending method in the future... ;;;","03/Apr/23 10:36;brandon.williams;bq. I wonder if we could think of some way to make a build fail when sbdy tried to use an offending method in the future

That would be checkstyle I think, where we already ban incompatible methods.  Doing this to prevent future vulnerability exposure sounds pretty YAGNI to me though, if there is such a risk we should fix the root cause and upgrade the lib.

I think the vast majority won't be in that category though, here for instance we have to be converting xml to json, something we'd just (hopefully) never need to do.;;;","03/Apr/23 11:11;brandon.williams;Committed, thanks for the review!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-15 (Accord) accord.messages.Defer rejects Recurrent retry of Commit,CASSANDRA-18378,13530499,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,28/Mar/23 20:56,07/Apr/23 21:00,13/Jul/23 08:41,07/Apr/23 21:00,NA,,,,,,Accord,,,0,,,,,"{code}
java.lang.IllegalStateException: Recurrent retry of Commit{…}
	at accord.messages.Defer.add(Defer.java:63)
	at accord.messages.Commit.apply(Commit.java:167)
	at accord.messages.Commit.apply(Commit.java:42)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:321)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:308)
	at org.apache.cassandra.service.accord.async.AsyncOperation.runInternal(AsyncOperation.java:226)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:268)
{code}",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18196,,,,CASSANDRA-18364,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Apr 07 20:16:06 UTC 2023,,,,,,,All,,,,"0|z1gx9k:",9223372036854775807,,,,bdeggleston,,,Normal,,NA,,https://github.com/apache/cassandra-accord/commit/6e3b6cbef849cedbae2be30fe1822045c2271dc4,,,,,,,,,burn,,,,,"30/Mar/23 23:38;dcapwell;Hit this in BurnTest while debugging https://issues.apache.org/jira/browse/CASSANDRA-18364 and think its a rather simple fix, so will handle there

{code}
 $ git diff
diff --git a/accord-core/src/main/java/accord/messages/Commit.java b/accord-core/src/main/java/accord/messages/Commit.java
index ce010ae..fc756b3 100644
--- a/accord-core/src/main/java/accord/messages/Commit.java
+++ b/accord-core/src/main/java/accord/messages/Commit.java
@@ -162,7 +162,8 @@ public class Commit extends TxnRequest<ReadNack>
             case Insufficient:
                 SafeCommand safeCommand = safeStore.command(txnId);
                 Invariants.checkState(!safeCommand.current().known().isDefinitionKnown());
-                if (defer == null)
+                // When isDone this.process() is called and all CommandStores run apply again; so safe to create a new one
+                if (defer == null || defer.isDone)
                     defer = new Defer(DefinitionOnly, Committed.minKnown, Commit.this);
                 defer.add(safeStore, safeCommand, safeStore.commandStore());
                 return ReadNack.NotCommitted;
{code}

;;;","07/Apr/23 20:09;dcapwell;speaking with Blake the patch should be improved, so figure its best to do in this JIRA rather than 18364;;;","07/Apr/23 20:16;dcapwell;+1 from Blake in GH;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-15 (Accord) AsyncOperation can not fail as it has already reached FINISHED,CASSANDRA-18377,13530498,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,dcapwell,dcapwell,28/Mar/23 20:55,05/Apr/23 16:36,13/Jul/23 08:41,05/Apr/23 16:36,5.x,,,,,,Accord,,,0,,,,,"{code}
java.lang.IllegalArgumentException: Unexpected state FINISHED
	at accord.utils.Invariants.illegalArgument(Invariants.java:54)
	at accord.utils.Invariants.checkArgument(Invariants.java:202)
	at org.apache.cassandra.service.accord.async.AsyncOperation.fail(AsyncOperation.java:182)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:273)
{code}

And

{code}
java.lang.IllegalArgumentException: Unexpected state FINISHED
	at accord.utils.Invariants.illegalArgument(Invariants.java:54)
	at accord.utils.Invariants.checkArgument(Invariants.java:202)
	at org.apache.cassandra.service.accord.async.AsyncOperation.fail(AsyncOperation.java:182)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:273)
	at org.apache.cassandra.service.accord.async.AsyncOperation.callback(AsyncOperation.java:157)
	at accord.utils.async.AsyncCallbacks.lambda$null$0(AsyncCallbacks.java:31)
{code}",,dcapwell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18196,CASSANDRA-18364,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Normal,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Apr 05 16:36:08 UTC 2023,,,,,,,All,,,,"0|z1gx9c:",9223372036854775807,,,,,,,Normal,,,,,,,,,,,,,,,,,,"31/Mar/23 20:59;dcapwell;Caleb saw this in the simulator as well... running that in a loop while I get lunch;;;","03/Apr/23 20:08;dcapwell;looking at the code I think the following is happening...

operation is success, so notify the callback
Callback throws exception, this triggers the fail method to be seen

If this is true (not sure what else could cause this) then the root problem is the callback exception... I changed the logging to show the exception, but that's in CASSANDRA-18364 which isn't merged yet;;;","05/Apr/23 16:36;dcapwell;CASSANDRA-18422 improved burn test to better mimic C*'s implementation and in doing so found the same issue, just with a different task class (AsyncOperation is in C*, so burn test can't use; they are logically the same).  The error found in burn test is that ReadData is seeing duplicate calls to readComplete for the same store, which is fixed in CASSANDRA-18364.

Once CASSANDRA-18364 merges, if this issue comes back, we can reopen; for now it looks like CASSANDRA-18364 solves;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-15 (Accord) Expected reply message with verb ACCORD_INFORM_OF_TXNID_RSP but got ACCORD_SIMPLE_RSP,CASSANDRA-18375,13530496,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,28/Mar/23 20:51,11/Apr/23 20:26,13/Jul/23 08:41,31/Mar/23 22:06,5.0,,,,,,Accord,,,0,,,,,"{code}
java.lang.IllegalArgumentException: Expected reply message with verb ACCORD_INFORM_OF_TXNID_RSP but got ACCORD_SIMPLE_RSP
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:440)
	at org.apache.cassandra.service.accord.AccordMessageSink.reply(AccordMessageSink.java:125)
	at accord.local.Node.reply(Node.java:361)
	at accord.messages.AbstractEpochRequest.accept(AbstractEpochRequest.java:63)
	at accord.messages.InformOfTxnId.accept(InformOfTxnId.java:66)
	at accord.messages.InformOfTxnId.accept(InformOfTxnId.java:31)
	at org.apache.cassandra.service.accord.async.AsyncOperation.finish(AsyncOperation.java:165)
	at org.apache.cassandra.service.accord.async.AsyncOperation.finish(AsyncOperation.java:176)
	at org.apache.cassandra.service.accord.async.AsyncOperation.runInternal(AsyncOperation.java:247)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:268)
	at org.apache.cassandra.service.accord.async.AsyncOperation.callback(AsyncOperation.java:157)
	at accord.utils.async.AsyncCallbacks.lambda$null$0(AsyncCallbacks.java:31)
{code}",,dcapwell,,,,,,,,,"maedhroz commented on code in PR #2257:
URL: https://github.com/apache/cassandra/pull/2257#discussion_r1154934056


##########
src/java/org/apache/cassandra/service/accord/async/AsyncOperation.java:
##########
@@ -179,7 +179,8 @@ private void finish(R result)
     private void fail(Throwable throwable)
     {
         Invariants.nonNull(throwable);
-        Invariants.checkArgument(state != State.FINISHED && state != State.FAILED, ""Unexpected state %s"", state);
+        if (!(state != State.FINISHED && state != State.FAILED))

Review Comment:
   ```suggestion
           if (state == State.FINISHED || state == State.FAILED)
   ```



;31/Mar/23 21:52;githubbot;600","dcapwell commented on code in PR #2257:
URL: https://github.com/apache/cassandra/pull/2257#discussion_r1154937908


##########
src/java/org/apache/cassandra/service/accord/async/AsyncOperation.java:
##########
@@ -179,7 +179,8 @@ private void finish(R result)
     private void fail(Throwable throwable)
     {
         Invariants.nonNull(throwable);
-        Invariants.checkArgument(state != State.FINISHED && state != State.FAILED, ""Unexpected state %s"", state);
+        if (!(state != State.FINISHED && state != State.FAILED))

Review Comment:
   I pushed the knowledge of complete to the `State` via a `isComplete()` method, and switched to `if (state.isComplete())`



;31/Mar/23 21:54;githubbot;600","dcapwell closed pull request #2257: CASSANDRA-18375: Fix response verb for ACCORD_INFORM_OF_TXNID_REQ
URL: https://github.com/apache/cassandra/pull/2257


;11/Apr/23 20:26;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,0,1800,,,0,1800,,,,CASSANDRA-18196,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 31 22:05:56 UTC 2023,,,,,,,All,,,,"0|z1gx8w:",9223372036854775807,,,,maedhroz,,,Normal,,NA,,https://github.com/apache/cassandra/commit/9b90c90de30ad1317e59bc38ed9372cbdd9abfec,,,,,,,,,new tests,,,,,"31/Mar/23 22:05;dcapwell;+1 from Caleb in GH;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Snapshots with dots in their name are not returned in listsnapshots,CASSANDRA-18371,13530417,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,28/Mar/23 11:53,29/Mar/23 06:57,13/Jul/23 08:41,28/Mar/23 18:07,4.1.2,,,,,,Local/Snapshots,,,0,,,,,,,paulo,smiklosovic,,,,,,,,"smiklosovic opened a new pull request, #2248:
URL: https://github.com/apache/cassandra/pull/2248

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;28/Mar/23 11:57;githubbot;600","smiklosovic closed pull request #2248: CASSANDRA-18371 4.1 Dots in snapshots
URL: https://github.com/apache/cassandra/pull/2248


;29/Mar/23 06:57;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 28 14:32:22 UTC 2023,,,,,,,All,,,,"0|z1gwrc:",9223372036854775807,,,,paulo,,,Normal,,4.1.1,,https://github.com/apache/cassandra/commit/6f401a872584f7bceb12e3fcb1927287da687e7d,,,,,,,,,CI,,,,,"28/Mar/23 11:56;smiklosovic;This is happening on 4.1 only. 4.0 and trunk are OK.

I detected this bug when I upgraded a node from e.g. 3.11.x to 4.1.x. The upgrade process makes snapshots of all system tables. While they are still on disk as such, they are not visible in listsnaphots output.;;;","28/Mar/23 11:58;smiklosovic;4.1 branch https://github.com/apache/cassandra/pull/2248

j8 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2032/workflows/92016363-5509-43c5-944a-267182647456

j11 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2032/workflows/054c3765-de67-4e0b-9640-9dde7af88d91

trunk j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2033/workflows/198f17e7-6dbe-4410-8d9e-717c8c90baee

For trunk, all what is added is the change in the test which adds case for exotic snapshot names as well as 4.1 but there is nothing to change otherwise.

https://github.com/instaclustr/cassandra/commit/a16800e6f4947002b09b27c8213daeb8635cc7a0;;;","28/Mar/23 14:32;paulo;LGTM;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BulkLoader tool initializes schema unnecessarily via streaming - 4.0,CASSANDRA-18370,13530347,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,yijunm_ts,yijunm_ts,28/Mar/23 06:13,31/Mar/23 17:03,13/Jul/23 08:41,31/Mar/23 17:03,4.0.9,,,,,,Tool/bulk load,,,0,,,,,"Similar to CASSANDRA-17740, {{BulkLoader}} initializes the schema/system keyspace, which caused the issue in bulk loader tool. See more details in CASSANDRA-17740. Please help fix the issue in 4.0 branch as well. Thanks.",,jonmeredith,maedhroz,yijunm_ts,,,,,,,"maedhroz opened a new pull request, #2255:
URL: https://github.com/apache/cassandra/pull/2255

   patch by Caleb Rackliffe; reviewed by ? for CASSANDRA-18370
   
   Co-authored-by: Caleb Rackliffe <calebrackliffe@gmail.com>
   Co-authored-by: Jon Meredith <jonmeredith@apache.org>


;30/Mar/23 18:09;githubbot;600","maedhroz commented on PR #2255:
URL: https://github.com/apache/cassandra/pull/2255#issuecomment-1490719768

   https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-18370


;30/Mar/23 18:10;githubbot;600","maedhroz commented on code in PR #2255:
URL: https://github.com/apache/cassandra/pull/2255#discussion_r1153618643


##########
src/java/org/apache/cassandra/streaming/StreamConnectionFactory.java:
##########
@@ -26,4 +26,18 @@
 public interface StreamConnectionFactory
 {
     Channel createConnection(OutboundConnectionSettings template, int messagingVersion) throws IOException;
+
+    /** Provide way to disable getPreferredIP() for tools without access to the system keyspace
+     * <p> 
+     * CASSANDRA-17663 moves calls to SystemKeyspace.getPreferredIP() outside of any threads
+     * that are regularly interrupted.  However the streaming subsystem is also used
+     * by the bulk loader tool, which does not have direct access to the local tables
+     * and uses the client metadata/queries to retrieve it.
+     *
+     * @return true if SystemKeyspace.getPreferredIP() should be used when connecting
+     */
+    default boolean supportsPreferredIp()
+    {
+        return true;

Review Comment:
   Note: Setting this to false fails `RepairErrorsTest`, as it should.



;30/Mar/23 18:11;githubbot;600","maedhroz commented on code in PR #2255:
URL: https://github.com/apache/cassandra/pull/2255#discussion_r1153619029


##########
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:
##########
@@ -238,7 +238,7 @@ public void sendMessage(StreamMessage message)
                 logger.debug(""{} Sending {}"", createLogTag(session, null), message);
 
             // Supply a preferred IP up-front to avoid trying to get it in the executor thread, which can be interrupted.
-            OutboundConnectionSettings templateWithConnectTo = template.withConnectTo(template.connectTo());
+            OutboundConnectionSettings templateWithConnectTo = factory.supportsPreferredIp() ? template.withConnectTo(template.connectTo()) : template;

Review Comment:
   Path is tested in `SSTableLoaderEncryptionOptionsTest`



##########
src/java/org/apache/cassandra/streaming/async/NettyStreamingMessageSender.java:
##########
@@ -238,7 +238,7 @@ public void sendMessage(StreamMessage message)
                 logger.debug(""{} Sending {}"", createLogTag(session, null), message);
 
             // Supply a preferred IP up-front to avoid trying to get it in the executor thread, which can be interrupted.
-            OutboundConnectionSettings templateWithConnectTo = template.withConnectTo(template.connectTo());
+            OutboundConnectionSettings templateWithConnectTo = factory.supportsPreferredIp() ? template.withConnectTo(template.connectTo()) : template;

Review Comment:
   Note: This path is tested in `SSTableLoaderEncryptionOptionsTest`.



;30/Mar/23 18:11;githubbot;600","maedhroz commented on PR #2255:
URL: https://github.com/apache/cassandra/pull/2255#issuecomment-1492271771

   https://github.com/apache/cassandra/commit/853ae8c84049be875921a40c9d5924724cc72792


;31/Mar/23 17:02;githubbot;600","maedhroz closed pull request #2255: CASSANDRA-18370 Avoid loading the preferred IP for BulkLoader streaming
URL: https://github.com/apache/cassandra/pull/2255


;31/Mar/23 17:02;githubbot;600",,,,,,,,,,,,,,,,,,,,0,3600,,,0,3600,,,,,,,,,CASSANDRA-17663,CASSANDRA-17740,,,,,,,,,,0.0,maedhroz,,,,,,,,,,,,Availability -> Process Crash,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 31 17:03:45 UTC 2023,,,,,,,All,,,,"0|z1gwc0:",9223372036854775807,,,,jmeredithco,jonmeredith,,Normal,,4.0,,https://github.com/apache/cassandra/commit/853ae8c84049be875921a40c9d5924724cc72792,,,,,,,,,"Avoid regressions in {{RepairErrorsTest}}, {{BulkLoaderTest}}, and {{SSTableLoaderEncryptionOptionsTest}} (which tests {{BulkLoader}} streaming), and verify that not allowing early calls to {{getPreferredIP()}} in {{NettyStreamingMessageSender}} _does_ break {{RepairErrorsTest}}.",,,,,"29/Mar/23 21:18;maedhroz;I think I can fix this easily enough by having the {{StreamConnectionFactory}} expose whether or not it supports the preferred IP concept. {{NettyStreamingMessageSender#sendMessage()}} can look at this and determine whether or not to call {{connectTo()}} to supply it up-front to {{FileStreamTask}}. {{BulkLoadConnectionFactory}} will supply a {{connectTo}} and happily avoid hitting the system keyspace, etc.;;;","30/Mar/23 19:24;maedhroz;[4.0 patch|https://github.com/apache/cassandra/pull/2255]
[CircleCI|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-18370]

Tests look clean. The timeout in {{FailingRepairTest}} reproduces on {{cassandra-4.0}}, and I think may be a result of CASSANDRA-17116 not being on 4.0.;;;","30/Mar/23 21:44;jonmeredith;+1;;;","31/Mar/23 17:03;maedhroz;Committed to 4.0: https://github.com/apache/cassandra/commit/853ae8c84049be875921a40c9d5924724cc72792

(no-op merge to 4.1 and trunk);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redhat 40x repo signature is not valid,CASSANDRA-18368,13530240,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,27/Mar/23 12:14,27/Mar/23 15:05,13/Jul/23 08:41,27/Mar/23 15:05,,,,,,,,,,0,,,,,"Looks like part of the packaging upload troubles we had with the 4.0.8 release:

{noformat}
gpg --verify repomd.xml.asc repomd.xml
gpg: Signature made Wed 19 Oct 2022 20:19:43 AEDT
gpg:                using RSA key A4C465FEA0C552561A392A61E91335D77E3E87CB
gpg: BAD signature from ""Michael Semb Wever <mick@thelastpickle.com>"" [unknown]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 27 15:05:51 UTC 2023,,,,,,,All,,,,"0|z1gvo8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"27/Mar/23 15:05;brandon.williams;I manually reuploaded all the rpm packaging from r59958 and verified both regular and noboolean packages and repos with almalinux and centos7.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure: cqlsh_tests.test_cqlsh.TestCqlsh.test_list_queries,CASSANDRA-18363,13529991,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,brandon.williams,brandon.williams,24/Mar/23 15:14,24/Mar/23 15:24,13/Jul/23 08:41,24/Mar/23 15:24,5.x,,,,,,Test/dtest/python,,,0,,,,,Looks like this needs to be updated for DDM: https://app.circleci.com/pipelines/github/driftx/cassandra/930/workflows/0dc6fa5b-65eb-4ea8-9238-2d78b889d9bc/jobs/16238/tests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 24 15:24:07 UTC 2023,,,,,,,All,,,,"0|z1gu4w:",9223372036854775807,,,,,,,Normal,,,,,,,,,,,,,,,,,,"24/Mar/23 15:24;brandon.williams;This raced me for a rebase, it's done now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException on SnapshotLoader.loadSnapshots,CASSANDRA-18359,13529865,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,paulo,paulo,23/Mar/23 21:08,27/Mar/23 06:54,13/Jul/23 08:41,26/Mar/23 21:37,4.1.2,5.0,,,,,Local/Snapshots,,,0,,,,,"Node startup fail with on 4.1.1:

{noformat}
INFO [main] 2023-03-23 18:13:13,585 MigrationCoordinator.java:257 - Starting migration coordinator and scheduling pulling schema versions every PT1M
ERROR [main] 2023-03-23 18:13:13,592 CassandraDaemon.java:898 - Exception encountered during startup
java.lang.NullPointerException: null
	at org.apache.cassandra.service.snapshot.SnapshotLoader$Visitor.preVisitDirectory(SnapshotLoader.java:106)
	at org.apache.cassandra.service.snapshot.SnapshotLoader$Visitor.preVisitDirectory(SnapshotLoader.java:77)
	at java.base/java.nio.file.Files.walkFileTree(Files.java:2732)
	at org.apache.cassandra.service.snapshot.SnapshotLoader.loadSnapshots(SnapshotLoader.java:162)
	at org.apache.cassandra.service.snapshot.SnapshotManager.loadSnapshots(SnapshotManager.java:114)
	at org.apache.cassandra.service.snapshot.SnapshotManager.start(SnapshotManager.java:88)
	at org.apache.cassandra.service.StorageService.startSnapshotManager(StorageService.java:1050)
	at org.apache.cassandra.service.StorageService.prepareToJoin(StorageService.java:1043)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:842)
	at org.apache.cassandra.service.StorageService.initServer(StorageService.java:775)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:425)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:752)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:876)
{noformat}",,paulo,smiklosovic,,,,,,,,"smiklosovic opened a new pull request, #2242:
URL: https://github.com/apache/cassandra/pull/2242

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Mar/23 09:43;githubbot;600","smiklosovic closed pull request #2242: CASSANDRA-18359
URL: https://github.com/apache/cassandra/pull/2242


;24/Mar/23 09:44;githubbot;600","smiklosovic opened a new pull request, #2243:
URL: https://github.com/apache/cassandra/pull/2243

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;24/Mar/23 09:44;githubbot;600","smiklosovic closed pull request #2243: CASSANDRA-18359 4.1
URL: https://github.com/apache/cassandra/pull/2243


;27/Mar/23 06:54;githubbot;600",,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sun Mar 26 20:43:22 UTC 2023,,,,,,,All,,,,"0|z1gtcw:",9223372036854775807,,,,paulo,,,Normal,,4.1.1,,https://github.com/apache/cassandra/commit/4ac89e6451b2ab0e62c04e61c60ba760f6c10223,,,,,,,,,changes.txt,,,,,"23/Mar/23 21:53;paulo;Issue seems to be on [this check|https://github.com/apache/cassandra/blob/cassandra-4.1.1/src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java#L106] as pointed out by [~brandon.williams]

[~stefan.miklosovic] I suspect this would only happen when {{{}data_file_directories: /{}}}, which is an odd choice but still valid. We probably need to add a null check here.

I wonder if {{if (subdir.getParent().getFileName().toString().equals(SNAPSHOT_SUBDIR))}} could run into permissioning issues if the user does not have permissions to access the parent directory of {{{{{}data_file_directories{}}}{}}};;;","23/Mar/23 22:17;smiklosovic;I verified upgrade from 3.11.15 to 4.1.1 works. 

1. start 3.11.15-SNAPSHOT
2. create table and insert data
3. create snapshot
4. copy data dir to empty data dir of 4.1.1
5. start 4.1.1

it just starts fine (minus some configuration around num_tokens, irrelevant to this ticket).

Paulo is right that if subdir is ""/"", the getParent() returns null. 

We do not have any feedback from the user yet to confirm this theory but ""normal upgrade path with standard data directories"" seems to work just ok.;;;","24/Mar/23 09:47;smiklosovic;PR is here [https://github.com/apache/cassandra/pull/2243]

It also throws NPE if dir is e.g ""/data"" which makes this more serious. The workaround is to set data_file_directories like
{code:java}
data_file_directories:
    - /data/data
{code}
and move all tables data from /data to /data/data.

[~paulo] I think that we should make setting one of dirs to ""/"" illegal. It does not make sense. If we were to scan all dirs in / for snapshots, we would basically have to traverse whole filesystem. That is dangerous, time consuming, error prone on ownership etc etc.

Similar exception is thrown in case it is set to ""/"" already here (it has nothing to do with snapshots)

[https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/service/StartupChecks.java#L573]

 
{code:java}
spark_master_1  | Exception (java.lang.NullPointerException) encountered during startup: null
spark_master_1  | java.lang.NullPointerException
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12$1.preVisitDirectory(StartupChecks.java:573)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12$1.preVisitDirectory(StartupChecks.java:548)
spark_master_1  |     at java.base/java.nio.file.Files.walkFileTree(Files.java:2732)
spark_master_1  |     at java.base/java.nio.file.Files.walkFileTree(Files.java:2797)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12.execute(StartupChecks.java:586)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:174)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.runStartupChecks(CassandraDaemon.java:502)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:256)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:751)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:875)
spark_master_1  | ERROR [main] 2023-03-24 11:37:56,843 CassandraDaemon.java:897 - Exception encountered during startup
spark_master_1  | java.lang.NullPointerException: null
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12$1.preVisitDirectory(StartupChecks.java:573)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12$1.preVisitDirectory(StartupChecks.java:548)
spark_master_1  |     at java.base/java.nio.file.Files.walkFileTree(Files.java:2732)
spark_master_1  |     at java.base/java.nio.file.Files.walkFileTree(Files.java:2797)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks$12.execute(StartupChecks.java:586)
spark_master_1  |     at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:174)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.runStartupChecks(CassandraDaemon.java:502)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:256)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:751)
spark_master_1  |     at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:875)
 {code}

EDIT: based on slack conversation, we should allow to set other dirs to ""/"", but we still need to fix the exception above. Setting it to ""/"" as of now does not work either.;;;","24/Mar/23 16:09;paulo;bq.  PR is here [https://github.com/apache/cassandra/pull/2243]

+1

bq.  I think that we should make setting one of dirs to ""/"" illegal. It does not make sense. If we were to scan all dirs in / for snapshots, we would basically have to traverse whole filesystem. That is dangerous, time consuming, error prone on ownership etc etc.

I think settings data dirs to ""/"" is too esoteric to worry about.;;;","26/Mar/23 20:43;smiklosovic;4.1 j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2026/workflows/0b58a217-9fc9-4960-a63d-726a9a09c3f2
4.1 j11 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2026/workflows/3cca3b04-afae-4fd7-9157-6f2f774926c1
trunk j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2027/workflows/8089bcf9-7614-444b-b7ac-e890f179ffdd
trunk j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2027/workflows/9e27534f-8993-48ca-9e1c-a9e56ace39d9;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove obsolete 'six' package reintroduced by a merge,CASSANDRA-18354,13529517,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,bschoeni,bschoeni,21/Mar/23 23:15,22/Mar/23 15:24,13/Jul/23 08:41,22/Mar/23 15:24,4.1.2,5.0,,,,,CQL/Interpreter,,,1,,,,,"The 4.1.x and trunk commits for CASSANDRA-18088 inadvertently re-introduced 'six' and obsolete python 2.7 conditional checks and should be removed.

I.e., SaferScanner = Py36SaferScanner if six.PY3 else Py2SaferScanner – but there is no Py2SaferScanner anymore.",,bereng,bschoeni,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 22 15:24:00 UTC 2023,,,,,,,All,,,,"0|z1gr7k:",9223372036854775807,,,,smiklosovic,,,Low,,4.1.1,,https://github.com/apache/cassandra/commit/a6f8dd10cd8b283339c08b50ed6357b213b89dc4,,,,,,,,,run CI,,,,,"22/Mar/23 12:27;brandon.williams;||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18354-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/924/workflows/e4cb7ea6-a980-48cb-ade5-5dde0ff2bede], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/924/workflows/1e2f99c6-33e8-4726-8cb8-252403996461]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18354-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/923/workflows/343a9be0-7bf6-40d4-976f-2350e5e8c398], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/923/workflows/13609a24-18c7-49c6-8814-a1da775f2697]|
;;;","22/Mar/23 13:27;smiklosovic;+1;;;","22/Mar/23 15:24;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Cqlsh command ""COPY … TO STDOUT"" fails with ""… object is not callable""",CASSANDRA-18353,13529504,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,gustavb,gustavb,21/Mar/23 20:21,22/Mar/23 18:31,13/Jul/23 08:41,22/Mar/23 18:31,4.1.2,5.0,,,,,Tool/cqlsh,,,0,,,,,"Since 4.1.0, cqlsh fails on COPY commands with standard output as target. 

Steps to reproduce:
{noformat}
$> docker run -d --name cassandra --rm cassandra:4.1.1
$> docker exec cassandra cqlsh -e 'COPY system.local(cluster_name) TO STDOUT'
  <stdin>:1:'NoneType' object is not callable
{noformat}

Possibly a regression introduced by this commit [6341319|https://github.com/apache/cassandra/commit/634131961af9c1d88b34797c1c45000f71a76dae#diff-584645e6e932edd7a17f03c79ae87b1f1f8ed54919a31ce8785af156b89c0b76L260].

Also, it looks like it has happened before: CASSANDRA-12497",,adelapena,gustavb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17546,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Degradation -> Performance Bug/Regression,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 22 18:31:28 UTC 2023,,,,,,,All,,,,"0|z1gr4o:",9223372036854775807,,,,adelapena,,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/70b95d80985e9165528e0b22f32fec187098e0ff,,,,,,,,,run CI,,,,,"21/Mar/23 21:00;brandon.williams;bq. Also, it looks like it has happened before: CASSANDRA-12497

Indeed, and the workaround there of adding '--debug' works too.  We should take care to add a test this time around.;;;","21/Mar/23 23:08;brandon.williams;Smoke test added [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-18353].

||Branch||CI||
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18353-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/922/workflows/6cd2b3fe-9836-422d-b765-5d9498893455], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/922/workflows/6ed14810-4900-45d8-9f29-d3cf5dbc5956]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18353-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/921/workflows/dc725119-7752-420f-9538-2218391f318f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/921/workflows/ab212108-7924-40d9-bc73-8522a02a9df3]|;;;","22/Mar/23 16:30;adelapena;The changes look good to me.

It seems that some runners on some cqlsh_dtests jobs have failed, but none of the failed runners contains the tests for COPY. The tests for COPY seem to have succeeded when looking into the artifacts.;;;","22/Mar/23 18:31;brandon.williams;Thanks for the review!  Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error Unknown column during deserialization missing keyspace and table name,CASSANDRA-18346,13529291,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Low,Fixed,manish.c.ghildiyal@gmail.com,bschoeni,bschoeni,20/Mar/23 18:16,07/Jul/23 03:34,13/Jul/23 08:41,06/Jun/23 14:31,3.11.16,4.0.11,4.1.3,5.0,,,Observability/Logging,,,0,,,,,"The ERROR message generated in ColumnSubselection.java when a column name is not found only prints the column name, not the keyspace and table.  It can be difficult to track down the source when more than one table uses the same name.  E.g., 'id'.
{quote}{{if (column == null)}}
{
{{        column = metadata.getDroppedColumn(name);}}
{{        if (column == null)}}
{{                throw new UnknownColumnException(""Unknown column "" + UTF8Type.instance.getString(name) + "" during deserialization"");}}
{{}}}
{quote}
Example:

[ERROR] cluster_id=15 ip_address=192.168.65.10  java.lang.RuntimeException: Unknown column id during deserialization

Proposed:

[ERROR] cluster_id=15 ip_address=192.168.65.10  java.lang.RuntimeException: Unknown column id in table cycling.route during deserialization",,blerer,bschoeni,manish.c.ghildiyal@gmail.com,smiklosovic,,,,,,"mghildiy opened a new pull request, #2319:
URL: https://github.com/apache/cassandra/pull/2319

   
   Adding keyspace, table name to error message during column deserialization
   
   The [CASSANDRA-18346](https://issues.apache.org/jira/browse/CASSANDRA-18346)
   
   


;11/May/23 05:57;githubbot;600","bschoening commented on PR #2319:
URL: https://github.com/apache/cassandra/pull/2319#issuecomment-1544059900

   +1 LGTM


;11/May/23 14:12;githubbot;600","smiklosovic closed pull request #2319: CASSANDRA-18346: Adding keyspace, table name in column deserialization error message
URL: https://github.com/apache/cassandra/pull/2319


;06/Jun/23 14:33;githubbot;600","smiklosovic closed pull request #2350: CASSANDRA-18346: Add column info during deserialization error
URL: https://github.com/apache/cassandra/pull/2350


;06/Jun/23 14:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,0.0,manish.c.ghildiyal@gmail.com,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jul 07 03:34:28 UTC 2023,,,,,,,All,,,,"0|z1gptc:",9223372036854775807,,,,brandon.williams,smiklosovic,,Low,,3.11.0,,https://github.com/apache/cassandra/commit/03da864bab9740c067363a8dcce13db2bfd47ce2,,,,,,,,,NA,,,,,"21/Mar/23 12:42;brandon.williams;Brad,

You should click 'open issue' and fill out the requirements to get this ticket out of triage and moved forward.;;;","08/May/23 12:54;manish.c.ghildiyal@gmail.com;I can take it up.;;;","08/May/23 15:33;manish.c.ghildiyal@gmail.com;TableMetadata.keyspace
TableMetadata.name
These 2 fields are what is needed to be added to the error message.
 
Just posting here to confirm.;;;","08/May/23 15:42;bschoeni;[~manish.c.ghildiyal@gmail.com] yes, those are the two fields to add to the error messages;;;","09/May/23 04:14;manish.c.ghildiyal@gmail.com;I have made the required change, which turned out to be pretty simple as all that is needed is part of table metadata.

But I see its a bit difficult to add test in ColumnFilterTest, as configuring a missing column in table metadata seems to be not possible. But I may be wrong in my understanding. 

Any input on test may help here.;;;","09/May/23 08:42;blerer;The main reason for a Column to be missing is schema propagation. See CASSANDRA-17047 and CASSANDRA-15899. ;;;","11/May/23 05:59;manish.c.ghildiyal@gmail.com;Created a tentative PR:

[https://github.com/apache/cassandra/pull/2319]];;;","17/May/23 16:29;brandon.williams;This looks good to me, but we'll need PR for 3.11 (this patch will apply to 4.0 and 4.1 though);;;","18/May/23 04:49;manish.c.ghildiyal@gmail.com;[~brandon.williams] , do I need a new PR?;;;","18/May/23 10:47;brandon.williams;We need an additional PR for 3.11;;;","19/May/23 06:05;manish.c.ghildiyal@gmail.com;[PR|https://github.com/apache/cassandra/pull/2350] for 3.11.;;;","19/May/23 10:19;brandon.williams;||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18346-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1008/workflows/64d35576-e62d-45bd-a45b-45b83e58a89b]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18346-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1009/workflows/9fa9457a-d2e7-489d-a94f-40c211b1132c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1009/workflows/f008a65f-8332-4564-8327-9dd8855c4034]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18346-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1010/workflows/bb6b9eda-5c7f-4f5c-a058-5f04e48f3710], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1010/workflows/6a817c57-43b8-4d91-8e8e-e7ccb3b4a258]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18346-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1011/workflows/0e5b463d-d236-4006-9f58-d4a5ff477c6e], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1011/workflows/ad6aa5d7-dcd0-489a-9583-3095dbc60526]|
;;;","19/May/23 13:47;brandon.williams;LGTM, +1.;;;","06/Jun/23 14:31;smiklosovic;+1;;;","06/Jun/23 14:32;smiklosovic;[~manish.c.ghildiyal@gmail.com]  thank you for your contribution!;;;","07/Jul/23 03:34;bschoeni;[~manish.c.ghildiyal@gmail.com] thanks so much for your contribution!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK17 - fix nodetool_test.TestNodetool.test_sjk,CASSANDRA-18343,13529140,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,19/Mar/23 19:28,23/Mar/23 19:11,13/Jul/23 08:41,23/Mar/23 19:11,5.0,,,,,,CI,,,0,,,,," 
[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2321/workflows/de1f521d-c5cb-4ddd-bc45-9ec71b577bf3/jobs/19923/tests]
 
{code:java}
AssertionError: Expected 'SJK hh' output assert False == True self = <nodetool_test.TestNodetool object at 0x7f9ab6d95908> @since('4.0') def test_sjk(self): """""" Verify that SJK generally works. """""" cluster = self.cluster cluster.populate([1]).start() node = cluster.nodelist()[0] out, err, _ = node.nodetool('sjk --help') logger.debug(out) hasPattern = False for line in out.split(os.linesep): if "" ttop [Thread Top] Displays threads from JVM process"" == line: hasPattern = True assert hasPattern == True, ""Expected help about SJK ttop"" out, err, _ = node.nodetool('sjk') logger.debug(out) hasPattern = False for line in out.split(os.linesep): if "" ttop [Thread Top] Displays threads from JVM process"" == line: hasPattern = True assert hasPattern == True, ""Expected help about SJK ttop"" out, err, _ = node.nodetool('sjk hh -n 10 --live') logger.debug(out) hasPattern = False for line in out.split(os.linesep): if re.match('.*Instances.*Bytes.*Type.*', line): hasPattern = True > assert hasPattern == True, ""Expected 'SJK hh' output"" E AssertionError: Expected 'SJK hh' output E assert False == True nodetool_test.py:482: AssertionError{code}",,e.dimitrova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,e.dimitrova,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 23 19:11:06 UTC 2023,,,,,,,All,,,,"0|z1govs:",9223372036854775807,,,,brandon.williams,,,Low,,,,https://github.com/apache/cassandra/commit/de1ff6d4d149f4983238ae1d38fd9b9c657bb282,,,,,,,,,"[Patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:CASSANDRA-18343], [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2322/workflows/20db9d1b-90ee-44dc-9cd5-6360b5f9671d]
I ran only the JDK17 tests because the change affects only them. We add the export in the jvm17-clients.options",,,,,"19/Mar/23 19:29;e.dimitrova;I already have a fix in my branch for this one, I will take care of it probably tomorrow. It was some export as far as I recall;;;","21/Mar/23 20:45;e.dimitrova;The test fails because of this:

 
{code:java}
bin/nodetool sjk hh
java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.IllegalAccessError: class org.gridkit.lab.jvm.attach.AttachManager$AttachManagerInt$VMWarpper (in unnamed module @0x6c779568) cannot access class sun.tools.attach.HotSpotVirtualMachine (in module jdk.attach) because module jdk.attach does not export sun.tools.attach to unnamed module @0x6c779568
{code}
From what I tested it seems this is the only sjk command that hits the issue. jvm-attach-api is already on latest 1.5 version and it seems that one was not updated since 2019. 

Adding below export to jvm17-clients.options solves the problem, I will send mail to dev ML prior running CI:
{code:java}
--add-exports jdk.attach/sun.tools.attach=ALL-UNNAMED{code}
 ;;;","21/Mar/23 20:52;e.dimitrova;Mail [sent|https://lists.apache.org/thread/6whpt3ok4rjv034oosv17cmqrt2x0b3s]. I will wait until tomorrow before pushing CI run and posting patch for review here, in case someone on @dev has any concerns. ;;;","23/Mar/23 00:22;e.dimitrova;[Patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:CASSANDRA-18343], [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2322/workflows/20db9d1b-90ee-44dc-9cd5-6360b5f9671d]
I ran only the JDK17 tests because the change affects only them. We add the export in the jvm17-clients.options;;;","23/Mar/23 18:28;e.dimitrova;[~brandon.williams] do you mind to review, please, if you have a few minutes?  ;;;","23/Mar/23 18:35;brandon.williams;+1.  Woohoo, all the python dtests pass on j17 now.;;;","23/Mar/23 19:11;e.dimitrova;Committed, thanks!

Woohoo :D 

To https://github.com/apache/cassandra

   [b4d4cf716b..de1ff6d4d1|https://github.com/apache/cassandra/commit/de1ff6d4d149f4983238ae1d38fd9b9c657bb282]  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Operations.migrateReadRequiredOperations fails due to concurrent access when TransactionStatement is prepared,CASSANDRA-18337,13528706,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,16/Mar/23 01:08,11/Apr/23 20:27,13/Jul/23 08:41,17/Mar/23 19:04,5.0,,,,,,Accord,,,0,,,,,"{code}
java.util.NoSuchElementException
	at java.base/java.util.ArrayList$Itr.next(ArrayList.java:1000)
	at org.apache.cassandra.cql3.Operations.migrateReadRequiredOperations(Operations.java:71)
	at org.apache.cassandra.cql3.Operations.migrateReadRequiredOperations(Operations.java:63)
	at org.apache.cassandra.cql3.statements.ModificationStatement.getTxnWriteFragment(ModificationStatement.java:828)
	at org.apache.cassandra.cql3.statements.TransactionStatement.createWriteFragments(TransactionStatement.java:290)
	at org.apache.cassandra.cql3.statements.TransactionStatement.createUpdate(TransactionStatement.java:309)
	at org.apache.cassandra.cql3.statements.TransactionStatement.createTxn(TransactionStatement.java:334)
	at org.apache.cassandra.cql3.statements.TransactionStatement.execute(TransactionStatement.java:375)
{code}

this was caused by having shared mutable state!  when we start creating the txn objects we would also mutate the mutations that had operations that need to be run in the txn, this has an issue when the txn is run from prepared statements as the object is shared by multiple threads, causing the array to be mutated while iterating.",,dcapwell,maedhroz,,,,,,,,"dcapwell commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1139010319


##########
src/java/org/apache/cassandra/cql3/Operations.java:
##########
@@ -42,29 +44,46 @@ public final class Operations implements Iterable<Operation>
     /**
      * The operations on regular columns.
      */
-    private final List<Operation> regularOperations = new ArrayList<>();
+    private final List<Operation> regularOperations;
 
     /**
      * The operations on static columns.
      */
-    private final List<Operation> staticOperations = new ArrayList<>();
+    private final List<Operation> staticOperations;
 
-    private final List<ReferenceOperation> regularSubstitutions = new ArrayList<>();
-    private final List<ReferenceOperation> staticSubstitutions = new ArrayList<>();
+    private final List<ReferenceOperation> regularSubstitutions;
+    private final List<ReferenceOperation> staticSubstitutions;
 
     public Operations(StatementType type)
     {
         this.type = type;
+        regularOperations = new ArrayList<>();
+        staticOperations = new ArrayList<>();
+        regularSubstitutions = new ArrayList<>();
+        staticSubstitutions = new ArrayList<>();
+    }
+
+    private Operations(Operations other)
+    {
+        type = other.type;
+        regularOperations = new ArrayList<>(other.regularOperations);
+        staticOperations = new ArrayList<>(other.staticOperations);
+        regularSubstitutions = new ArrayList<>(other.regularSubstitutions);
+        staticSubstitutions = new ArrayList<>(other.staticSubstitutions);
     }
 
-    public void migrateReadRequiredOperations()
+    @Nullable
+    public Operations migrateReadRequiredOperations()
     {
-        migrateReadRequiredOperations(staticOperations, staticSubstitutions);
-        migrateReadRequiredOperations(regularOperations, regularSubstitutions);
+        Operations other = new Operations(this);

Review Comment:
   one way to lower memory in the case of no migration is to do 2 passes, first to find if any need to migrate, and the second to migrate them.  This would lower the memory costs in the cases where `requiresRead` isn't found and only adds extra cycles to the cases where it is found....  It was hard for me to say which way to go as I don't really know how common both sides are, so not sure which to bias towards...  so I went with the less-work route and did a tiny change to existing `migrateReadRequiredOperations` at the cost of extra memory.



;16/Mar/23 16:28;githubbot;600","maedhroz commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1139180984


##########
src/java/org/apache/cassandra/cql3/Operations.java:
##########
@@ -42,29 +44,46 @@ public final class Operations implements Iterable<Operation>
     /**
      * The operations on regular columns.
      */
-    private final List<Operation> regularOperations = new ArrayList<>();
+    private final List<Operation> regularOperations;
 
     /**
      * The operations on static columns.
      */
-    private final List<Operation> staticOperations = new ArrayList<>();
+    private final List<Operation> staticOperations;
 
-    private final List<ReferenceOperation> regularSubstitutions = new ArrayList<>();
-    private final List<ReferenceOperation> staticSubstitutions = new ArrayList<>();
+    private final List<ReferenceOperation> regularSubstitutions;
+    private final List<ReferenceOperation> staticSubstitutions;
 
     public Operations(StatementType type)
     {
         this.type = type;
+        regularOperations = new ArrayList<>();
+        staticOperations = new ArrayList<>();
+        regularSubstitutions = new ArrayList<>();
+        staticSubstitutions = new ArrayList<>();
+    }
+
+    private Operations(Operations other)
+    {
+        type = other.type;
+        regularOperations = new ArrayList<>(other.regularOperations);
+        staticOperations = new ArrayList<>(other.staticOperations);
+        regularSubstitutions = new ArrayList<>(other.regularSubstitutions);
+        staticSubstitutions = new ArrayList<>(other.staticSubstitutions);
     }
 
-    public void migrateReadRequiredOperations()
+    @Nullable
+    public Operations migrateReadRequiredOperations()
     {
-        migrateReadRequiredOperations(staticOperations, staticSubstitutions);
-        migrateReadRequiredOperations(regularOperations, regularSubstitutions);
+        Operations other = new Operations(this);

Review Comment:
   I guess you could do something like this...
   
   ```
   @Nullable
   public Operations migrateReadRequiredOperations()
   {
       Operations other = null;
   
       if (regularOperations.stream().anyMatch(Operation::requiresRead))
       {
           other = new Operations(this);
           migrateReadRequiredOperations(other.regularOperations, other.regularSubstitutions);
           migrateReadRequiredOperations(other.staticOperations, other.staticSubstitutions);
       }
       else if (staticOperations.stream().anyMatch(Operation::requiresRead))
       {
           other = new Operations(this);
           migrateReadRequiredOperations(other.staticOperations, other.staticSubstitutions);
       }
       
       return other;
   }
   ```
   This is cheaper in the case where we don't need any migrations, and operations on static columns are probably the exceptional case...just not sure what the probabilities are, as you say.



;16/Mar/23 18:11;githubbot;600","maedhroz commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1139218981


##########
src/java/org/apache/cassandra/cql3/Operations.java:
##########
@@ -42,29 +44,46 @@ public final class Operations implements Iterable<Operation>
     /**
      * The operations on regular columns.
      */
-    private final List<Operation> regularOperations = new ArrayList<>();
+    private final List<Operation> regularOperations;
 
     /**
      * The operations on static columns.
      */
-    private final List<Operation> staticOperations = new ArrayList<>();
+    private final List<Operation> staticOperations;
 
-    private final List<ReferenceOperation> regularSubstitutions = new ArrayList<>();
-    private final List<ReferenceOperation> staticSubstitutions = new ArrayList<>();
+    private final List<ReferenceOperation> regularSubstitutions;
+    private final List<ReferenceOperation> staticSubstitutions;
 
     public Operations(StatementType type)
     {
         this.type = type;
+        regularOperations = new ArrayList<>();
+        staticOperations = new ArrayList<>();
+        regularSubstitutions = new ArrayList<>();
+        staticSubstitutions = new ArrayList<>();
+    }
+
+    private Operations(Operations other)
+    {
+        type = other.type;
+        regularOperations = new ArrayList<>(other.regularOperations);
+        staticOperations = new ArrayList<>(other.staticOperations);
+        regularSubstitutions = new ArrayList<>(other.regularSubstitutions);
+        staticSubstitutions = new ArrayList<>(other.staticSubstitutions);
     }
 
-    public void migrateReadRequiredOperations()
+    @Nullable
+    public Operations migrateReadRequiredOperations()
     {
-        migrateReadRequiredOperations(staticOperations, staticSubstitutions);
-        migrateReadRequiredOperations(regularOperations, regularSubstitutions);
+        Operations other = new Operations(this);

Review Comment:
   One more idea...
   
   We create `Operations` and add items to it in the `ModificationStatement.Parsed#prepareInternal()` implementations. Can we just add the `Operation` instances requiring reads to the correct list there and avoid later migrations altogether?
   
   ex. In `ParsedUpdate#prepareInternal()`, we have `isForTxn` telling us whether or not we're processing a transaction. We could add operations that need a read via `Operations#add(ColumnMetadata, ReferenceOperation)` there.



;16/Mar/23 18:39;githubbot;600","dcapwell commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1139396338


##########
src/java/org/apache/cassandra/cql3/Operations.java:
##########
@@ -42,29 +44,46 @@ public final class Operations implements Iterable<Operation>
     /**
      * The operations on regular columns.
      */
-    private final List<Operation> regularOperations = new ArrayList<>();
+    private final List<Operation> regularOperations;
 
     /**
      * The operations on static columns.
      */
-    private final List<Operation> staticOperations = new ArrayList<>();
+    private final List<Operation> staticOperations;
 
-    private final List<ReferenceOperation> regularSubstitutions = new ArrayList<>();
-    private final List<ReferenceOperation> staticSubstitutions = new ArrayList<>();
+    private final List<ReferenceOperation> regularSubstitutions;
+    private final List<ReferenceOperation> staticSubstitutions;
 
     public Operations(StatementType type)
     {
         this.type = type;
+        regularOperations = new ArrayList<>();
+        staticOperations = new ArrayList<>();
+        regularSubstitutions = new ArrayList<>();
+        staticSubstitutions = new ArrayList<>();
+    }
+
+    private Operations(Operations other)
+    {
+        type = other.type;
+        regularOperations = new ArrayList<>(other.regularOperations);
+        staticOperations = new ArrayList<>(other.staticOperations);
+        regularSubstitutions = new ArrayList<>(other.regularSubstitutions);
+        staticSubstitutions = new ArrayList<>(other.staticSubstitutions);
     }
 
-    public void migrateReadRequiredOperations()
+    @Nullable
+    public Operations migrateReadRequiredOperations()
     {
-        migrateReadRequiredOperations(staticOperations, staticSubstitutions);
-        migrateReadRequiredOperations(regularOperations, regularSubstitutions);
+        Operations other = new Operations(this);

Review Comment:
   had so many back and forth on this due to CAS.... I simplified it all by having `Operations` take a `boolean isForTxn` and it properly places operations where they belong, and added new constructor that does the migration in a single path



;16/Mar/23 21:56;githubbot;600","aweisberg commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1140559617


##########
src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java:
##########
@@ -237,12 +246,14 @@ public static class ParsedInsertJson extends ModificationStatement.Parsed
     {
         private final Json.Raw jsonValue;
         private final boolean defaultUnset;
+        private final boolean isForTxn;
 
-        public ParsedInsertJson(QualifiedName name, Attributes.Raw attrs, Json.Raw jsonValue, boolean defaultUnset, boolean ifNotExists, StatementSource source)
+        public ParsedInsertJson(QualifiedName name, Attributes.Raw attrs, Json.Raw jsonValue, boolean defaultUnset, boolean ifNotExists, StatementSource source, boolean isForTxn)
         {
             super(name, StatementType.INSERT, attrs, null, ifNotExists, false, source);
             this.jsonValue = jsonValue;
             this.defaultUnset = defaultUnset;
+            this.isForTxn = isForTxn;

Review Comment:
   I think isForTxn is doesn't quite communicate that this is really for Accord so even CAS is included not just `TransactionStatement`. In some contexts we use lightweight transaction to describe CAS, but we don't always use this version for the modification statement for CAS just when it is on Accord.



;17/Mar/23 18:11;githubbot;600","dcapwell commented on code in PR #2220:
URL: https://github.com/apache/cassandra/pull/2220#discussion_r1140590270


##########
src/java/org/apache/cassandra/cql3/statements/UpdateStatement.java:
##########
@@ -237,12 +246,14 @@ public static class ParsedInsertJson extends ModificationStatement.Parsed
     {
         private final Json.Raw jsonValue;
         private final boolean defaultUnset;
+        private final boolean isForTxn;
 
-        public ParsedInsertJson(QualifiedName name, Attributes.Raw attrs, Json.Raw jsonValue, boolean defaultUnset, boolean ifNotExists, StatementSource source)
+        public ParsedInsertJson(QualifiedName name, Attributes.Raw attrs, Json.Raw jsonValue, boolean defaultUnset, boolean ifNotExists, StatementSource source, boolean isForTxn)
         {
             super(name, StatementType.INSERT, attrs, null, ifNotExists, false, source);
             this.jsonValue = jsonValue;
             this.defaultUnset = defaultUnset;
+            this.isForTxn = isForTxn;

Review Comment:
   > so even CAS is included
   CAS isn't included, it's `false` there.  When CAS uses accord we ""migrate"" and create a Accord transaction version of these statements



;17/Mar/23 18:42;githubbot;600","dcapwell closed pull request #2220: CASSANDRA-18337: Operations.migrateReadRequiredOperations fails due to concurrent access when TransactionStatement is prepared
URL: https://github.com/apache/cassandra/pull/2220


;11/Apr/23 20:27;githubbot;600",,,,,,,,,,,,,,,,,,,0,4200,,,0,4200,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Fuzz Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 17 19:02:49 UTC 2023,,,,,,,All,,,,"0|z1gm7k:",9223372036854775807,,,,aweisberg,maedhroz,,Critical,,NA,,http://github.com/apache/cassandra/commit/acb1912c335b4189914dacb7ef61fecb5a0af23b,,,,,,,,,cluster testing,,,,,"16/Mar/23 21:01;maedhroz;+1 (assuming an uneventful rebase and test run);;;","17/Mar/23 19:02;dcapwell;+1 from Ariel in GH;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not remove SSTables when cause of FSReadError is OutOfMemoryError while using best_effort disk failure policy,CASSANDRA-18336,13528705,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,naizhen,naizhen,16/Mar/23 01:02,27/Apr/23 09:32,13/Jul/23 08:41,27/Apr/23 09:31,3.0.29,3.11.15,4.0.10,4.1.2,5.0,,Local/Compaction,,,0,,,,,"1.When this exception occurs in the system
{code:java}
// 
ERROR [CompactionExecutor:351627] 2023-02-21 17:59:20,721 CassandraDaemon.java:581 - Exception in thread Thread[CompactionExecutor:351627,1,main]
org.apache.cassandra.io.FSReadError: java.io.IOException: Map failed
    at org.apache.cassandra.io.util.ChannelProxy.map(ChannelProxy.java:167)
    at org.apache.cassandra.io.util.MmappedRegions$State.add(MmappedRegions.java:310)
    at org.apache.cassandra.io.util.MmappedRegions$State.access$400(MmappedRegions.java:246)
    at org.apache.cassandra.io.util.MmappedRegions.updateState(MmappedRegions.java:170)
    at org.apache.cassandra.io.util.MmappedRegions.<init>(MmappedRegions.java:73)
    at org.apache.cassandra.io.util.MmappedRegions.<init>(MmappedRegions.java:61)
    at org.apache.cassandra.io.util.MmappedRegions.map(MmappedRegions.java:104)
    at org.apache.cassandra.io.util.FileHandle$Builder.complete(FileHandle.java:365)
    at org.apache.cassandra.io.sstable.format.big.BigTableWriter.openEarly(BigTableWriter.java:337)
    at org.apache.cassandra.io.sstable.SSTableRewriter.maybeReopenEarly(SSTableRewriter.java:172)
    at org.apache.cassandra.io.sstable.SSTableRewriter.append(SSTableRewriter.java:124)
    at org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.realAppend(DefaultCompactionWriter.java:64)
    at org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.append(CompactionAwareWriter.java:137)
    at org.apache.cassandra.db.compaction.CompactionTask.runMayThrow(CompactionTask.java:193)
    at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:28)
    at org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionTask.java:77)
    at org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(AbstractCompactionTask.java:100)
    at org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run(CompactionManager.java:298)
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
    at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: Map failed
    at java.base/sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:1016)
    at org.apache.cassandra.io.util.ChannelProxy.map(ChannelProxy.java:163)
    ... 23 common frames omitted
Caused by: java.lang.OutOfMemoryError: Map failed
    at java.base/sun.nio.ch.FileChannelImpl.map0(Native Method)
    at java.base/sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:1013)


{code}
2.Restart the node, Verifying logfile transaction ,All sstables are deleted
{code:java}
// code placeholder
INFO  [main] 2023-02-21 18:00:23,350 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8819408-big-Index.db 
INFO  [main] 2023-02-21 18:00:23,615 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8819408-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,504 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_c923b230-b077-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:46,510 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_461935b0-b1ce-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:46,517 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,517 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,518 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,520 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,520 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,520 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,521 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,521 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830658-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,521 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,526 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,526 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,537 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830657-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,537 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,537 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,539 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,539 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,540 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,541 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,541 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,541 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830660-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,541 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,541 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,543 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,545 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,545 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,545 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,545 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,546 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830659-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,549 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_461935b0-b1ce-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:46,550 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_69071e60-b18e-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:46,577 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,577 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,579 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,579 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828386-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,580 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,584 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,584 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,585 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,585 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,585 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,585 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828385-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,586 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,590 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,592 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,592 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,602 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,602 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,602 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,602 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828384-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,606 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_69071e60-b18e-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:46,610 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_8b8205e0-b18e-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:46,641 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,644 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,644 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,644 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,684 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,684 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,684 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,684 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828320-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,685 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,687 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,688 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,727 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,728 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,728 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,728 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,728 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828183-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,728 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,731 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Filter.db 
INFO  [main] 2023-02-21 18:00:46,732 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Summary.db 
INFO  [main] 2023-02-21 18:00:46,732 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Data.db 
INFO  [main] 2023-02-21 18:00:46,770 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:46,770 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:46,771 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:46,771 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828255-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:46,774 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_8b8205e0-b18e-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:46,775 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_008f3d00-b1ce-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:46,779 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830650-big-Index.db 
INFO  [main] 2023-02-21 18:00:46,787 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830650-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,020 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_008f3d00-b1ce-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:47,022 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_6f265950-b18e-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:47,050 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,055 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,055 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,072 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,072 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,072 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,072 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,074 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828337-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,074 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,077 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,078 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,092 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,093 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,093 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,093 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,093 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828375-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,093 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,097 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,098 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,113 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,113 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,113 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,113 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,113 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828354-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,117 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_6f265950-b18e-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:47,118 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_fb014430-b18e-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,133 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,134 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,134 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,246 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,246 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,246 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,247 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827806-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,247 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,255 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,255 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,255 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,368 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,369 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,369 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,369 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828112-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,369 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Index.db 
INFO  [main] 2023-02-21 18:00:47,374 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Filter.db 
INFO  [main] 2023-02-21 18:00:47,374 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Summary.db 
INFO  [main] 2023-02-21 18:00:47,374 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Data.db 
INFO  [main] 2023-02-21 18:00:47,484 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Digest.crc32 
INFO  [main] 2023-02-21 18:00:47,485 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:00:47,485 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-Statistics.db 
INFO  [main] 2023-02-21 18:00:47,485 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827506-big-TOC.txt 
INFO  [main] 2023-02-21 18:00:47,490 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_fb014430-b18e-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:00:47,492 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_unknowncompactiontype_695c4f33-b1ce-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:00:47,502 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Index.db 
INFO  [main] 2023-02-21 18:00:48,045 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Filter.db 
INFO  [main] 2023-02-21 18:00:48,053 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Summary.db 
INFO  [main] 2023-02-21 18:00:48,053 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Data.db 
INFO  [main] 2023-02-21 18:01:21,166 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Digest.crc32 
INFO  [main] 2023-02-21 18:01:21,202 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:01:21,272 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-Statistics.db 
INFO  [main] 2023-02-21 18:01:21,272 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7859661-big-TOC.txt 
INFO  [main] 2023-02-21 18:01:21,272 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Index.db 
INFO  [main] 2023-02-21 18:01:21,276 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Filter.db 
INFO  [main] 2023-02-21 18:01:21,276 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Data.db 
INFO  [main] 2023-02-21 18:01:21,500 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Summary.db 
INFO  [main] 2023-02-21 18:01:21,500 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Digest.crc32 
INFO  [main] 2023-02-21 18:01:21,500 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:01:21,501 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-Statistics.db 
INFO  [main] 2023-02-21 18:01:21,501 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830374-big-TOC.txt 
INFO  [main] 2023-02-21 18:01:21,501 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Index.db 
INFO  [main] 2023-02-21 18:01:21,841 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Filter.db 
INFO  [main] 2023-02-21 18:01:21,842 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Summary.db 
INFO  [main] 2023-02-21 18:01:21,842 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Data.db 
INFO  [main] 2023-02-21 18:01:22,779 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Digest.crc32 
INFO  [main] 2023-02-21 18:01:22,779 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:01:22,780 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-Statistics.db 
INFO  [main] 2023-02-21 18:01:22,780 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821887-big-TOC.txt 
INFO  [main] 2023-02-21 18:01:22,780 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Filter.db 
INFO  [main] 2023-02-21 18:01:22,825 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Index.db 
INFO  [main] 2023-02-21 18:01:24,891 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Summary.db 
INFO  [main] 2023-02-21 18:01:24,892 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Data.db 
INFO  [main] 2023-02-21 18:02:02,190 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Digest.crc32 
INFO  [main] 2023-02-21 18:02:02,352 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:02:02,461 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-Statistics.db 
INFO  [main] 2023-02-21 18:02:02,461 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5298119-big-TOC.txt 
INFO  [main] 2023-02-21 18:02:02,462 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Index.db 
INFO  [main] 2023-02-21 18:02:02,466 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Filter.db 
INFO  [main] 2023-02-21 18:02:02,467 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Data.db 
INFO  [main] 2023-02-21 18:02:02,763 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Summary.db 
INFO  [main] 2023-02-21 18:02:02,764 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Digest.crc32 
INFO  [main] 2023-02-21 18:02:02,764 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:02:02,764 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-Statistics.db 
INFO  [main] 2023-02-21 18:02:02,764 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8826214-big-TOC.txt 
INFO  [main] 2023-02-21 18:02:02,765 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Index.db 
INFO  [main] 2023-02-21 18:02:05,377 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Filter.db 
INFO  [main] 2023-02-21 18:02:05,388 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Summary.db 
INFO  [main] 2023-02-21 18:02:05,388 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Data.db 
INFO  [main] 2023-02-21 18:02:41,367 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Digest.crc32 
INFO  [main] 2023-02-21 18:02:41,368 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:02:41,397 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-Statistics.db 
INFO  [main] 2023-02-21 18:02:41,397 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7315697-big-TOC.txt 
INFO  [main] 2023-02-21 18:02:41,398 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Index.db 
INFO  [main] 2023-02-21 18:02:42,034 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Filter.db 
INFO  [main] 2023-02-21 18:02:42,049 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Data.db 
INFO  [main] 2023-02-21 18:04:02,731 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Summary.db 
INFO  [main] 2023-02-21 18:04:02,732 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Digest.crc32 
INFO  [main] 2023-02-21 18:04:02,732 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:04:02,770 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-Statistics.db 
INFO  [main] 2023-02-21 18:04:02,770 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6687036-big-TOC.txt 
INFO  [main] 2023-02-21 18:04:02,770 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Index.db 
INFO  [main] 2023-02-21 18:04:02,784 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Filter.db 
INFO  [main] 2023-02-21 18:04:02,785 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Data.db 
INFO  [main] 2023-02-21 18:04:02,889 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Summary.db 
INFO  [main] 2023-02-21 18:04:02,890 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Digest.crc32 
INFO  [main] 2023-02-21 18:04:02,890 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:04:02,890 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-Statistics.db 
INFO  [main] 2023-02-21 18:04:02,890 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829808-big-TOC.txt 
INFO  [main] 2023-02-21 18:04:02,890 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Index.db 
INFO  [main] 2023-02-21 18:04:03,384 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Filter.db 
INFO  [main] 2023-02-21 18:04:03,418 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Data.db 
INFO  [main] 2023-02-21 18:04:38,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Summary.db 
INFO  [main] 2023-02-21 18:04:38,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Digest.crc32 
INFO  [main] 2023-02-21 18:04:38,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:04:38,245 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-Statistics.db 
INFO  [main] 2023-02-21 18:04:38,245 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6839605-big-TOC.txt 
INFO  [main] 2023-02-21 18:04:38,246 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Filter.db 
INFO  [main] 2023-02-21 18:04:38,293 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Index.db 
INFO  [main] 2023-02-21 18:04:39,438 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Summary.db 
INFO  [main] 2023-02-21 18:04:39,438 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Data.db 
INFO  [main] 2023-02-21 18:05:28,014 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Digest.crc32 
INFO  [main] 2023-02-21 18:05:28,015 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:05:28,041 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-Statistics.db 
INFO  [main] 2023-02-21 18:05:28,041 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5373453-big-TOC.txt 
INFO  [main] 2023-02-21 18:05:28,041 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Filter.db 
INFO  [main] 2023-02-21 18:05:28,042 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Index.db 
INFO  [main] 2023-02-21 18:05:28,277 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Data.db 
INFO  [main] 2023-02-21 18:06:17,552 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Summary.db 
INFO  [main] 2023-02-21 18:06:17,553 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Digest.crc32 
INFO  [main] 2023-02-21 18:06:17,554 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:06:17,565 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-Statistics.db 
INFO  [main] 2023-02-21 18:06:17,565 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5607362-big-TOC.txt 
INFO  [main] 2023-02-21 18:06:17,566 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Index.db 
INFO  [main] 2023-02-21 18:06:17,567 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Filter.db 
INFO  [main] 2023-02-21 18:06:17,568 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Summary.db 
INFO  [main] 2023-02-21 18:06:17,568 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Data.db 
INFO  [main] 2023-02-21 18:06:24,899 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Digest.crc32 
INFO  [main] 2023-02-21 18:06:24,900 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:06:24,932 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-Statistics.db 
INFO  [main] 2023-02-21 18:06:24,933 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5301216-big-TOC.txt 
INFO  [main] 2023-02-21 18:06:24,933 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Filter.db 
INFO  [main] 2023-02-21 18:06:24,949 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Index.db 
INFO  [main] 2023-02-21 18:06:29,880 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Data.db 
INFO  [main] 2023-02-21 18:08:11,665 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Summary.db 
INFO  [main] 2023-02-21 18:08:11,666 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Digest.crc32 
INFO  [main] 2023-02-21 18:08:11,666 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:08:11,667 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-Statistics.db 
INFO  [main] 2023-02-21 18:08:11,667 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5450265-big-TOC.txt 
INFO  [main] 2023-02-21 18:08:11,667 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Index.db 
INFO  [main] 2023-02-21 18:08:11,717 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Filter.db 
INFO  [main] 2023-02-21 18:08:11,717 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Summary.db 
INFO  [main] 2023-02-21 18:08:11,718 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Data.db 
INFO  [main] 2023-02-21 18:08:22,177 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Digest.crc32 
INFO  [main] 2023-02-21 18:08:22,178 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:08:22,178 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-Statistics.db 
INFO  [main] 2023-02-21 18:08:22,178 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8741761-big-TOC.txt 
INFO  [main] 2023-02-21 18:08:22,178 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Filter.db 
INFO  [main] 2023-02-21 18:08:22,212 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Index.db 
INFO  [main] 2023-02-21 18:08:22,641 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Summary.db 
INFO  [main] 2023-02-21 18:08:22,642 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Data.db 
INFO  [main] 2023-02-21 18:09:16,035 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Digest.crc32 
INFO  [main] 2023-02-21 18:09:16,036 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:09:16,162 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-Statistics.db 
INFO  [main] 2023-02-21 18:09:16,162 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5496274-big-TOC.txt 
INFO  [main] 2023-02-21 18:09:16,163 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Index.db 
INFO  [main] 2023-02-21 18:09:16,302 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Filter.db 
INFO  [main] 2023-02-21 18:09:16,303 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Summary.db 
INFO  [main] 2023-02-21 18:09:16,303 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Data.db 
INFO  [main] 2023-02-21 18:09:30,352 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Digest.crc32 
INFO  [main] 2023-02-21 18:09:30,353 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:09:30,353 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-Statistics.db 
INFO  [main] 2023-02-21 18:09:30,354 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-6882038-big-TOC.txt 
INFO  [main] 2023-02-21 18:09:30,354 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Filter.db 
INFO  [main] 2023-02-21 18:09:30,377 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Index.db 
INFO  [main] 2023-02-21 18:09:32,789 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Summary.db 
INFO  [main] 2023-02-21 18:09:32,789 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Data.db 
INFO  [main] 2023-02-21 18:10:17,487 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Digest.crc32 
INFO  [main] 2023-02-21 18:10:17,692 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:10:17,741 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-Statistics.db 
INFO  [main] 2023-02-21 18:10:17,742 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5356040-big-TOC.txt 
INFO  [main] 2023-02-21 18:10:17,743 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Filter.db 
INFO  [main] 2023-02-21 18:10:17,743 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Index.db 
INFO  [main] 2023-02-21 18:10:17,758 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Summary.db 
INFO  [main] 2023-02-21 18:10:17,758 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Data.db 
INFO  [main] 2023-02-21 18:10:17,758 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Digest.crc32 
INFO  [main] 2023-02-21 18:10:17,758 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:10:17,759 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-Statistics.db 
INFO  [main] 2023-02-21 18:10:17,759 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821799-big-TOC.txt 
INFO  [main] 2023-02-21 18:10:17,760 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Index.db 
INFO  [main] 2023-02-21 18:10:18,081 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Filter.db 
INFO  [main] 2023-02-21 18:10:18,117 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Data.db 
INFO  [main] 2023-02-21 18:11:06,042 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Summary.db 
INFO  [main] 2023-02-21 18:11:06,043 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Digest.crc32 
INFO  [main] 2023-02-21 18:11:06,043 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:11:06,079 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-Statistics.db 
INFO  [main] 2023-02-21 18:11:06,079 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6087561-big-TOC.txt 
INFO  [main] 2023-02-21 18:11:06,080 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Index.db 
INFO  [main] 2023-02-21 18:11:06,159 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Filter.db 
INFO  [main] 2023-02-21 18:11:06,159 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Data.db 
INFO  [main] 2023-02-21 18:11:16,709 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Summary.db 
INFO  [main] 2023-02-21 18:11:16,711 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Digest.crc32 
INFO  [main] 2023-02-21 18:11:16,711 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:11:16,711 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-Statistics.db 
INFO  [main] 2023-02-21 18:11:16,902 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8790094-big-TOC.txt 
INFO  [main] 2023-02-21 18:11:16,903 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Index.db 
INFO  [main] 2023-02-21 18:11:17,170 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Filter.db 
INFO  [main] 2023-02-21 18:11:17,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Summary.db 
INFO  [main] 2023-02-21 18:11:17,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Data.db 
INFO  [main] 2023-02-21 18:11:59,054 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Digest.crc32 
INFO  [main] 2023-02-21 18:11:59,055 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:11:59,076 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-Statistics.db 
INFO  [main] 2023-02-21 18:11:59,076 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5504090-big-TOC.txt 
INFO  [main] 2023-02-21 18:11:59,076 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Index.db 
INFO  [main] 2023-02-21 18:11:59,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Filter.db 
INFO  [main] 2023-02-21 18:11:59,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Summary.db 
INFO  [main] 2023-02-21 18:11:59,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Data.db 
INFO  [main] 2023-02-21 18:12:28,397 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Digest.crc32 
INFO  [main] 2023-02-21 18:12:28,397 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:12:28,398 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-Statistics.db 
INFO  [main] 2023-02-21 18:12:28,398 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8132762-big-TOC.txt 
INFO  [main] 2023-02-21 18:12:28,398 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Index.db 
INFO  [main] 2023-02-21 18:12:28,400 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Filter.db 
INFO  [main] 2023-02-21 18:12:28,400 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Data.db 
INFO  [main] 2023-02-21 18:12:42,749 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Summary.db 
INFO  [main] 2023-02-21 18:12:42,750 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Digest.crc32 
INFO  [main] 2023-02-21 18:12:42,750 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:12:42,774 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-Statistics.db 
INFO  [main] 2023-02-21 18:12:42,774 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6383747-big-TOC.txt 
INFO  [main] 2023-02-21 18:12:42,775 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Filter.db 
INFO  [main] 2023-02-21 18:12:42,775 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Index.db 
INFO  [main] 2023-02-21 18:12:42,820 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Summary.db 
INFO  [main] 2023-02-21 18:12:42,821 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Data.db 
INFO  [main] 2023-02-21 18:12:55,614 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Digest.crc32 
INFO  [main] 2023-02-21 18:12:55,618 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:12:55,630 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-Statistics.db 
INFO  [main] 2023-02-21 18:12:55,630 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5649641-big-TOC.txt 
INFO  [main] 2023-02-21 18:12:55,630 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Filter.db 
INFO  [main] 2023-02-21 18:12:55,711 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Index.db 
INFO  [main] 2023-02-21 18:12:57,535 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Data.db 
INFO  [main] 2023-02-21 18:15:07,614 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Summary.db 
INFO  [main] 2023-02-21 18:15:07,615 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Digest.crc32 
INFO  [main] 2023-02-21 18:15:07,615 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:15:07,640 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-Statistics.db 
INFO  [main] 2023-02-21 18:15:07,640 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5530049-big-TOC.txt 
INFO  [main] 2023-02-21 18:15:07,641 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Index.db 
INFO  [main] 2023-02-21 18:15:07,909 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Filter.db 
INFO  [main] 2023-02-21 18:15:07,950 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Data.db 
INFO  [main] 2023-02-21 18:15:58,262 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Summary.db 
INFO  [main] 2023-02-21 18:15:58,263 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Digest.crc32 
INFO  [main] 2023-02-21 18:15:58,263 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:15:58,325 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-Statistics.db 
INFO  [main] 2023-02-21 18:15:58,325 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8694773-big-TOC.txt 
INFO  [main] 2023-02-21 18:15:58,326 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Index.db 
INFO  [main] 2023-02-21 18:15:58,326 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Filter.db 
INFO  [main] 2023-02-21 18:15:58,326 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Summary.db 
INFO  [main] 2023-02-21 18:15:58,327 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Data.db 
INFO  [main] 2023-02-21 18:15:58,535 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Digest.crc32 
INFO  [main] 2023-02-21 18:15:58,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:15:58,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-Statistics.db 
INFO  [main] 2023-02-21 18:15:58,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8828410-big-TOC.txt 
INFO  [main] 2023-02-21 18:15:58,536 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Index.db 
INFO  [main] 2023-02-21 18:15:58,550 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Filter.db 
INFO  [main] 2023-02-21 18:15:58,551 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Summary.db 
INFO  [main] 2023-02-21 18:15:58,551 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Data.db 
INFO  [main] 2023-02-21 18:15:58,856 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Digest.crc32 
INFO  [main] 2023-02-21 18:15:58,857 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:15:58,858 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-Statistics.db 
INFO  [main] 2023-02-21 18:15:58,858 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8827236-big-TOC.txt 
INFO  [main] 2023-02-21 18:15:58,858 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Index.db 
INFO  [main] 2023-02-21 18:15:58,860 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Filter.db 
INFO  [main] 2023-02-21 18:15:58,860 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Data.db 
INFO  [main] 2023-02-21 18:16:19,652 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Summary.db 
INFO  [main] 2023-02-21 18:16:19,653 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Digest.crc32 
INFO  [main] 2023-02-21 18:16:19,654 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:16:19,664 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-Statistics.db 
INFO  [main] 2023-02-21 18:16:19,664 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5499870-big-TOC.txt 
INFO  [main] 2023-02-21 18:16:19,665 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:16:19,772 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-Data.db 
INFO  [main] 2023-02-21 18:17:13,519 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-Filter.db 
INFO  [main] 2023-02-21 18:17:13,519 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-Index.db 
INFO  [main] 2023-02-21 18:17:13,537 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-Statistics.db 
INFO  [main] 2023-02-21 18:17:13,538 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5221771-big-Summary.db 
INFO  [main] 2023-02-21 18:17:13,538 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Index.db 
INFO  [main] 2023-02-21 18:17:13,549 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Filter.db 
INFO  [main] 2023-02-21 18:17:13,549 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Data.db 
INFO  [main] 2023-02-21 18:17:14,232 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Summary.db 
INFO  [main] 2023-02-21 18:17:14,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Digest.crc32 
INFO  [main] 2023-02-21 18:17:14,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:17:14,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-Statistics.db 
INFO  [main] 2023-02-21 18:17:14,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8807317-big-TOC.txt 
INFO  [main] 2023-02-21 18:17:14,233 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Index.db 
INFO  [main] 2023-02-21 18:17:14,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Filter.db 
INFO  [main] 2023-02-21 18:17:14,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Summary.db 
INFO  [main] 2023-02-21 18:17:14,236 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Data.db 
INFO  [main] 2023-02-21 18:17:14,339 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Digest.crc32 
INFO  [main] 2023-02-21 18:17:14,339 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:17:14,339 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-Statistics.db 
INFO  [main] 2023-02-21 18:17:14,340 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830077-big-TOC.txt 
INFO  [main] 2023-02-21 18:17:14,340 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Index.db 
INFO  [main] 2023-02-21 18:17:14,354 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Filter.db 
INFO  [main] 2023-02-21 18:17:14,354 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Data.db 
INFO  [main] 2023-02-21 18:17:17,432 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Summary.db 
INFO  [main] 2023-02-21 18:17:17,433 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Digest.crc32 
INFO  [main] 2023-02-21 18:17:17,433 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:17:17,449 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-Statistics.db 
INFO  [main] 2023-02-21 18:17:17,450 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8816850-big-TOC.txt 
INFO  [main] 2023-02-21 18:17:17,450 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Index.db 
INFO  [main] 2023-02-21 18:17:17,969 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Filter.db 
INFO  [main] 2023-02-21 18:17:17,970 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Summary.db 
INFO  [main] 2023-02-21 18:17:17,970 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Data.db 
INFO  [main] 2023-02-21 18:18:43,709 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Digest.crc32 
INFO  [main] 2023-02-21 18:18:43,710 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:18:43,710 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-Statistics.db 
INFO  [main] 2023-02-21 18:18:43,710 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5790369-big-TOC.txt 
INFO  [main] 2023-02-21 18:18:43,711 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Index.db 
INFO  [main] 2023-02-21 18:18:43,739 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Filter.db 
INFO  [main] 2023-02-21 18:18:43,739 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Summary.db 
INFO  [main] 2023-02-21 18:18:43,739 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Data.db 
INFO  [main] 2023-02-21 18:18:43,885 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Digest.crc32 
INFO  [main] 2023-02-21 18:18:43,885 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:18:43,885 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-Statistics.db 
INFO  [main] 2023-02-21 18:18:43,886 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8829549-big-TOC.txt 
INFO  [main] 2023-02-21 18:18:43,886 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Index.db 
INFO  [main] 2023-02-21 18:18:44,106 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Filter.db 
INFO  [main] 2023-02-21 18:18:44,106 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Data.db 
INFO  [main] 2023-02-21 18:18:47,122 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Summary.db 
INFO  [main] 2023-02-21 18:18:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Digest.crc32 
INFO  [main] 2023-02-21 18:18:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:18:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-Statistics.db 
INFO  [main] 2023-02-21 18:18:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821888-big-TOC.txt 
INFO  [main] 2023-02-21 18:18:47,123 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Index.db 
INFO  [main] 2023-02-21 18:18:47,199 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Filter.db 
INFO  [main] 2023-02-21 18:18:47,199 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Summary.db 
INFO  [main] 2023-02-21 18:18:47,199 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Data.db 
INFO  [main] 2023-02-21 18:18:49,411 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Digest.crc32 
INFO  [main] 2023-02-21 18:18:49,412 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:18:49,412 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-Statistics.db 
INFO  [main] 2023-02-21 18:18:49,412 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-6861414-big-TOC.txt 
INFO  [main] 2023-02-21 18:18:49,413 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Index.db 
INFO  [main] 2023-02-21 18:18:49,414 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Filter.db 
INFO  [main] 2023-02-21 18:18:49,414 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Data.db 
INFO  [main] 2023-02-21 18:18:49,634 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Summary.db 
INFO  [main] 2023-02-21 18:18:49,635 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Digest.crc32 
INFO  [main] 2023-02-21 18:18:49,635 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:18:49,635 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-Statistics.db 
INFO  [main] 2023-02-21 18:18:49,635 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8820208-big-TOC.txt 
INFO  [main] 2023-02-21 18:18:49,636 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Index.db 
INFO  [main] 2023-02-21 18:18:49,699 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Filter.db 
INFO  [main] 2023-02-21 18:18:49,699 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Summary.db 
INFO  [main] 2023-02-21 18:18:49,699 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Data.db 
INFO  [main] 2023-02-21 18:19:17,136 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Digest.crc32 
INFO  [main] 2023-02-21 18:19:17,137 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:19:17,253 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-Statistics.db 
INFO  [main] 2023-02-21 18:19:17,253 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8413340-big-TOC.txt 
INFO  [main] 2023-02-21 18:19:17,253 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Index.db 
INFO  [main] 2023-02-21 18:19:17,310 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Filter.db 
INFO  [main] 2023-02-21 18:19:17,310 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Data.db 
INFO  [main] 2023-02-21 18:19:36,881 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Summary.db 
INFO  [main] 2023-02-21 18:19:36,882 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Digest.crc32 
INFO  [main] 2023-02-21 18:19:36,882 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:19:36,883 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-Statistics.db 
INFO  [main] 2023-02-21 18:19:36,883 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7039803-big-TOC.txt 
INFO  [main] 2023-02-21 18:19:36,883 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Filter.db 
INFO  [main] 2023-02-21 18:19:36,884 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Index.db 
INFO  [main] 2023-02-21 18:19:36,917 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Summary.db 
INFO  [main] 2023-02-21 18:19:36,917 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Data.db 
INFO  [main] 2023-02-21 18:19:45,481 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Digest.crc32 
INFO  [main] 2023-02-21 18:19:45,482 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:19:45,483 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-Statistics.db 
INFO  [main] 2023-02-21 18:19:45,483 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5428383-big-TOC.txt 
INFO  [main] 2023-02-21 18:19:45,483 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Filter.db 
INFO  [main] 2023-02-21 18:19:45,570 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Index.db 
INFO  [main] 2023-02-21 18:19:45,639 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Summary.db 
INFO  [main] 2023-02-21 18:19:45,640 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Data.db 
INFO  [main] 2023-02-21 18:20:48,586 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Digest.crc32 
INFO  [main] 2023-02-21 18:20:48,587 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:20:48,618 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-Statistics.db 
INFO  [main] 2023-02-21 18:20:48,618 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5580716-big-TOC.txt 
INFO  [main] 2023-02-21 18:20:48,619 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Index.db 
INFO  [main] 2023-02-21 18:20:48,666 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Filter.db 
INFO  [main] 2023-02-21 18:20:48,666 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Summary.db 
INFO  [main] 2023-02-21 18:20:48,666 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Data.db 
INFO  [main] 2023-02-21 18:20:51,050 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Digest.crc32 
INFO  [main] 2023-02-21 18:20:51,051 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:20:51,051 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-Statistics.db 
INFO  [main] 2023-02-21 18:20:51,051 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8781750-big-TOC.txt 
INFO  [main] 2023-02-21 18:20:51,052 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Filter.db 
INFO  [main] 2023-02-21 18:20:51,061 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Index.db 
INFO  [main] 2023-02-21 18:20:51,121 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Summary.db 
INFO  [main] 2023-02-21 18:20:51,121 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Data.db 
INFO  [main] 2023-02-21 18:21:19,118 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Digest.crc32 
INFO  [main] 2023-02-21 18:21:19,118 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:21:19,140 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-Statistics.db 
INFO  [main] 2023-02-21 18:21:19,140 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5400271-big-TOC.txt 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Filter.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Index.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Summary.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Data.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Digest.crc32 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-Statistics.db 
INFO  [main] 2023-02-21 18:21:19,141 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821263-big-TOC.txt 
INFO  [main] 2023-02-21 18:21:19,142 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Index.db 
INFO  [main] 2023-02-21 18:21:19,160 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Filter.db 
INFO  [main] 2023-02-21 18:21:19,160 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Data.db 
INFO  [main] 2023-02-21 18:21:22,503 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Summary.db 
INFO  [main] 2023-02-21 18:21:22,504 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Digest.crc32 
INFO  [main] 2023-02-21 18:21:22,505 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:21:22,505 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-Statistics.db 
INFO  [main] 2023-02-21 18:21:22,505 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8744460-big-TOC.txt 
INFO  [main] 2023-02-21 18:21:22,505 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Filter.db 
INFO  [main] 2023-02-21 18:21:22,505 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Index.db 
INFO  [main] 2023-02-21 18:21:22,660 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Data.db 
INFO  [main] 2023-02-21 18:22:11,241 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Summary.db 
INFO  [main] 2023-02-21 18:22:11,242 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:11,242 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:11,244 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:11,244 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-5334445-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:11,244 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Index.db 
INFO  [main] 2023-02-21 18:22:11,328 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Filter.db 
INFO  [main] 2023-02-21 18:22:11,335 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Summary.db 
INFO  [main] 2023-02-21 18:22:11,335 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Data.db 
INFO  [main] 2023-02-21 18:22:42,109 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:42,109 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:42,109 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:42,110 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/mc-217343-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:42,110 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Index.db 
INFO  [main] 2023-02-21 18:22:42,481 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Filter.db 
INFO  [main] 2023-02-21 18:22:42,481 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Summary.db 
INFO  [main] 2023-02-21 18:22:42,481 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Data.db 
INFO  [main] 2023-02-21 18:22:50,519 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:50,520 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:50,539 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:50,539 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-7588148-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:50,540 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Index.db 
INFO  [main] 2023-02-21 18:22:50,570 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Filter.db 
INFO  [main] 2023-02-21 18:22:50,570 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Data.db 
INFO  [main] 2023-02-21 18:22:50,729 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Summary.db 
INFO  [main] 2023-02-21 18:22:50,729 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:50,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:50,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:50,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821882-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:50,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Index.db 
INFO  [main] 2023-02-21 18:22:50,736 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Filter.db 
INFO  [main] 2023-02-21 18:22:50,736 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Summary.db 
INFO  [main] 2023-02-21 18:22:50,736 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Data.db 
INFO  [main] 2023-02-21 18:22:51,729 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:51,729 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:51,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:51,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8821885-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:51,730 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Index.db 
INFO  [main] 2023-02-21 18:22:51,758 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Filter.db 
INFO  [main] 2023-02-21 18:22:51,759 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Summary.db 
INFO  [main] 2023-02-21 18:22:51,759 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Data.db 
INFO  [main] 2023-02-21 18:22:54,456 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Digest.crc32 
INFO  [main] 2023-02-21 18:22:54,457 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-CompressionInfo.db 
INFO  [main] 2023-02-21 18:22:54,457 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-Statistics.db 
INFO  [main] 2023-02-21 18:22:54,457 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8716073-big-TOC.txt 
INFO  [main] 2023-02-21 18:22:54,646 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_unknowncompactiontype_695c4f33-b1ce-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:22:54,648 LogTransaction.java:536 - Verifying logfile transaction [nb_txn_compaction_60e393e0-b1ce-11ed-a081-5d5a5c990823.log in /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b]
INFO  [main] 2023-02-21 18:22:54,650 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830665-big-Index.db 
INFO  [main] 2023-02-21 18:22:54,656 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830665-big-Data.db 
INFO  [main] 2023-02-21 18:22:54,673 LogTransaction.java:240 - Unfinished transaction log, deleting /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb_txn_compaction_60e393e0-b1ce-11ed-a081-5d5a5c990823.log 
INFO  [main] 2023-02-21 18:22:54,694 Keyspace.java:386 - Creating replication strategy kairosdb params KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=2}}
INFO  [main] 2023-02-21 18:22:54,715 ColumnFamilyStore.java:385 - Initializing kairosdb.data_points
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:54,720 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830647-big (179.084MiB)
INFO  [SSTableBatchOpen:5] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830662-big (4.039MiB)
INFO  [SSTableBatchOpen:7] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830663-big (3.589MiB)
INFO  [SSTableBatchOpen:6] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830661-big (39.789MiB)
INFO  [SSTableBatchOpen:8] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830664-big (6.007MiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:54,739 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830583-big (190.543MiB)
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:54,739 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830440-big (191.089MiB)
INFO  [SSTableBatchOpen:4] 2023-02-21 18:22:54,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830513-big (194.560MiB)
INFO  [main] 2023-02-21 18:22:54,947 ColumnFamilyStore.java:385 - Initializing kairosdb.row_key_index
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:54,977 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_key_index-8742543087ba11eba3799bdca9e7ad04/mc-1-big (7.580MiB)
INFO  [main] 2023-02-21 18:22:55,023 ColumnFamilyStore.java:385 - Initializing kairosdb.row_key_time_index
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:55,054 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_key_time_index-87a4234087ba11eba3799bdca9e7ad04/nb-26770-big (0.075KiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:55,070 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_key_time_index-87a4234087ba11eba3799bdca9e7ad04/nb-26769-big (0.052KiB)
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:55,077 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_key_time_index-87a4234087ba11eba3799bdca9e7ad04/nb-26768-big (2.671MiB)
INFO  [main] 2023-02-21 18:22:55,131 ColumnFamilyStore.java:385 - Initializing kairosdb.row_keys
INFO  [SSTableBatchOpen:5] 2023-02-21 18:22:55,135 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_keys-8793f6a087ba11eb8b50d3c6960df21b/nb-796510-big (7.682MiB)
INFO  [SSTableBatchOpen:4] 2023-02-21 18:22:55,190 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_keys-8793f6a087ba11eb8b50d3c6960df21b/nb-769597-big (50.002MiB)
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:55,203 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_keys-8793f6a087ba11eb8b50d3c6960df21b/mc-75-big (87.496MiB)
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:55,209 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_keys-8793f6a087ba11eb8b50d3c6960df21b/mc-256221-big (51.492MiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:55,211 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/row_keys-8793f6a087ba11eb8b50d3c6960df21b/nb-550752-big (50.323MiB)
INFO  [main] 2023-02-21 18:22:55,357 ColumnFamilyStore.java:385 - Initializing kairosdb.service_index
INFO  [main] 2023-02-21 18:22:55,381 ColumnFamilyStore.java:385 - Initializing kairosdb.spec
INFO  [main] 2023-02-21 18:22:55,393 ColumnFamilyStore.java:385 - Initializing kairosdb.string_index
INFO  [main] 2023-02-21 18:22:55,409 ColumnFamilyStore.java:385 - Initializing kairosdb.tag_indexed_row_keys
INFO  [main] 2023-02-21 18:22:55,419 Keyspace.java:386 - Creating replication strategy system_auth params KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=1}}
INFO  [main] 2023-02-21 18:22:55,425 ColumnFamilyStore.java:385 - Initializing system_auth.network_permissions
INFO  [main] 2023-02-21 18:22:55,440 ColumnFamilyStore.java:385 - Initializing system_auth.resource_role_permissons_index
INFO  [main] 2023-02-21 18:22:55,457 ColumnFamilyStore.java:385 - Initializing system_auth.role_members
INFO  [main] 2023-02-21 18:22:55,473 ColumnFamilyStore.java:385 - Initializing system_auth.role_permissions
INFO  [main] 2023-02-21 18:22:55,485 ColumnFamilyStore.java:385 - Initializing system_auth.roles
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:55,518 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_auth/roles-5bc52802de2535edaeab188eecebb090/mc-1-big (0.100KiB)
INFO  [main] 2023-02-21 18:22:55,543 Keyspace.java:386 - Creating replication strategy system_distributed params KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=3}}
INFO  [main] 2023-02-21 18:22:55,558 ColumnFamilyStore.java:385 - Initializing system_distributed.parent_repair_history
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:55,577 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-49-big (1.398KiB)
INFO  [SSTableBatchOpen:24] 2023-02-21 18:22:55,585 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-44-big (1.376KiB)
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:55,591 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-24-big (0.863KiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:55,593 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-5-big (0.644KiB)
INFO  [SSTableBatchOpen:8] 2023-02-21 18:22:55,594 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-12-big (1.130KiB)
INFO  [SSTableBatchOpen:9] 2023-02-21 18:22:55,595 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-16-big (0.990KiB)
INFO  [SSTableBatchOpen:18] 2023-02-21 18:22:55,598 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-39-big (1.646KiB)
INFO  [SSTableBatchOpen:14] 2023-02-21 18:22:55,598 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-57-big (2.019KiB)
INFO  [SSTableBatchOpen:4] 2023-02-21 18:22:55,605 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-68-big (0.920KiB)
INFO  [SSTableBatchOpen:16] 2023-02-21 18:22:55,606 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-107-big (0.728KiB)
INFO  [SSTableBatchOpen:23] 2023-02-21 18:22:55,607 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-43-big (0.592KiB)
INFO  [SSTableBatchOpen:15] 2023-02-21 18:22:55,608 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-31-big (1.451KiB)
INFO  [SSTableBatchOpen:11] 2023-02-21 18:22:55,611 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-80-big (0.944KiB)
INFO  [SSTableBatchOpen:20] 2023-02-21 18:22:55,611 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-106-big (0.589KiB)
INFO  [SSTableBatchOpen:5] 2023-02-21 18:22:55,622 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-88-big (0.935KiB)
INFO  [SSTableBatchOpen:6] 2023-02-21 18:22:55,623 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-20-big (1.151KiB)
INFO  [SSTableBatchOpen:10] 2023-02-21 18:22:55,623 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-76-big (1.481KiB)
INFO  [SSTableBatchOpen:12] 2023-02-21 18:22:55,624 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/mc-1-big (16.284KiB)
INFO  [SSTableBatchOpen:17] 2023-02-21 18:22:55,626 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-95-big (3.737KiB)
INFO  [SSTableBatchOpen:13] 2023-02-21 18:22:55,626 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-84-big (1.031KiB)
INFO  [SSTableBatchOpen:7] 2023-02-21 18:22:55,633 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-64-big (1.132KiB)
INFO  [SSTableBatchOpen:19] 2023-02-21 18:22:55,636 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-100-big (0.561KiB)
INFO  [SSTableBatchOpen:21] 2023-02-21 18:22:55,656 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-99-big (1.159KiB)
INFO  [SSTableBatchOpen:22] 2023-02-21 18:22:55,683 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/parent_repair_history-deabd734b99d3b9c92e5fd92eb5abf14/nb-104-big (0.720KiB)
INFO  [main] 2023-02-21 18:22:55,733 ColumnFamilyStore.java:385 - Initializing system_distributed.repair_history
INFO  [SSTableBatchOpen:14] 2023-02-21 18:22:55,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-45-big (2.741KiB)
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:55,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-25-big (1.789KiB)
INFO  [SSTableBatchOpen:7] 2023-02-21 18:22:55,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-89-big (1.814KiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:55,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-112-big (1.327KiB)
INFO  [SSTableBatchOpen:19] 2023-02-21 18:22:55,749 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-32-big (3.927KiB)
INFO  [SSTableBatchOpen:4] 2023-02-21 18:22:55,756 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-67-big (3.370KiB)
INFO  [SSTableBatchOpen:18] 2023-02-21 18:22:55,757 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-81-big (3.249KiB)
INFO  [SSTableBatchOpen:10] 2023-02-21 18:22:55,758 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-110-big (1.354KiB)
INFO  [SSTableBatchOpen:11] 2023-02-21 18:22:55,761 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-44-big (1.250KiB)
INFO  [SSTableBatchOpen:12] 2023-02-21 18:22:55,761 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-50-big (3.340KiB)
INFO  [SSTableBatchOpen:6] 2023-02-21 18:22:55,765 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-93-big (2.319KiB)
INFO  [SSTableBatchOpen:21] 2023-02-21 18:22:55,765 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-85-big (1.789KiB)
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:55,770 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-113-big (1.334KiB)
INFO  [SSTableBatchOpen:15] 2023-02-21 18:22:55,773 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-101-big (3.239KiB)
INFO  [SSTableBatchOpen:22] 2023-02-21 18:22:55,774 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-21-big (2.331KiB)
INFO  [SSTableBatchOpen:8] 2023-02-21 18:22:55,785 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-40-big (4.339KiB)
INFO  [SSTableBatchOpen:23] 2023-02-21 18:22:55,789 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-17-big (2.308KiB)
INFO  [SSTableBatchOpen:13] 2023-02-21 18:22:55,794 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-106-big (0.766KiB)
INFO  [SSTableBatchOpen:16] 2023-02-21 18:22:55,797 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-13-big (2.822KiB)
INFO  [SSTableBatchOpen:9] 2023-02-21 18:22:55,802 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-105-big (2.460KiB)
INFO  [SSTableBatchOpen:5] 2023-02-21 18:22:55,802 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-6-big (1.802KiB)
INFO  [SSTableBatchOpen:24] 2023-02-21 18:22:55,805 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-74-big (2.896KiB)
INFO  [SSTableBatchOpen:17] 2023-02-21 18:22:55,808 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/mc-1-big (0.812KiB)
INFO  [SSTableBatchOpen:20] 2023-02-21 18:22:55,811 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/system_distributed/repair_history-759fffad624b318180eefa9a52d1f627/nb-59-big (5.973KiB) {code}
3.Bugs can be reproduced.Just set  vm.max_ map_ count as a small value, and then trigger OOM, and restart the node.",,brandon.williams,maxwellguo,naizhen,smiklosovic,,,,,,"smiklosovic opened a new pull request, #2276:
URL: https://github.com/apache/cassandra/pull/2276

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;17/Apr/23 10:51;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1168530866


##########
test/unit/org/apache/cassandra/service/DiskFailurePolicyTest.java:
##########
@@ -124,12 +135,29 @@ public void teardown()
     public void testPolicies()
     {
         DatabaseDescriptor.setDiskFailurePolicy(testPolicy);
-        JVMStabilityInspector.inspectThrowable(t);
-        Assert.assertEquals(expectJVMKilled, killerForTests.wasKilled());
-        Assert.assertEquals(expectJVMKilledQuiet, killerForTests.wasKilledQuietly());
-        if (!expectJVMKilled) {
+        try
+        {
+            JVMStabilityInspector.inspectThrowable(t);
+        }
+        catch (OutOfMemoryError e)

Review Comment:
   this is eventually thrown by `JVMStabilityInspector.inspectThrowable(t);` if you follow it deeply. We just need to make the difference between oom thrown as part of the test and oom thrown _while running a test_.



;17/Apr/23 11:12;githubbot;600","Maxwell-Guo commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169415630


##########
test/unit/org/apache/cassandra/service/DiskFailurePolicyTest.java:
##########
@@ -79,22 +88,24 @@ public DiskFailurePolicyTest(DiskFailurePolicy testPolicy, boolean isStartUpInPr
     public static Collection<Object[]> generateData()
     {
         return Arrays.asList(new Object[][]{
-                             { Config.DiskFailurePolicy.die, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.ignore, true, new FSReadError(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.stop_paranoid, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { Config.DiskFailurePolicy.die, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.ignore, true, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.stop_paranoid, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { Config.DiskFailurePolicy.die, false, new FSReadError(new IOException(), ""blah""), false, true, false},
-                             { DiskFailurePolicy.ignore, false, new FSReadError(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, false, new FSReadError(new IOException(), ""blah""), false, false, false},
-                             { DiskFailurePolicy.stop_paranoid, false, new FSReadError(new IOException(), ""blah""), false, false, false},
-                             { Config.DiskFailurePolicy.die, false, new CorruptSSTableException(new IOException(), ""blah""), false, true, false},
-                             { DiskFailurePolicy.ignore, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop_paranoid, false, new CorruptSSTableException(new IOException(), ""blah""), false, false, false}
+                             { die, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { ignore, true, new FSReadError(new IOException(), ""blah""), true, false, false},
+                             { stop, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { stop_paranoid, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { die, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { ignore, true, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { stop_paranoid, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { die, false, new FSReadError(new IOException(), ""blah""), false, true, false},
+                             { ignore, false, new FSReadError(new IOException(), ""blah""), true, false, false},
+                             { stop, false, new FSReadError(new IOException(), ""blah""), false, false, false},
+                             { stop_paranoid, false, new FSReadError(new IOException(), ""blah""), false, false, false},
+                             { die, false, new CorruptSSTableException(new IOException(), ""blah""), false, true, false},
+                             { ignore, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop_paranoid, false, new CorruptSSTableException(new IOException(), ""blah""), false, false, false},
+                             { best_effort, false, new FSReadError(new IOException(new OutOfMemoryError(""Java heap space test"")), ""best_effort_oom""), true, false, false},

Review Comment:
   as ""Java heap space test"" removed in FORCE_HEAP_OOM_IGNORE_SET , so I think some other like ""Java heap space"" can be used here. I don't know if this is the right suggestion.



##########
src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java:
##########
@@ -96,6 +96,20 @@ public void handleFSError(FSError e)
         }
     }
 
+    private boolean isCausedByOutOfMemoryException(Throwable error)
+    {
+        for (Throwable t = error; t != null; t = t.getCause())
+        {
+            if (t instanceof OutOfMemoryError)
+                return true;
+            for (Throwable s : t.getSuppressed())
+                if (s instanceof OutOfMemoryError)
+                return true;

Review Comment:
   code format : the ""return true;"" should have a ""tab""  before ?
   `if (s instanceof OutOfMemoryError)
                   return true;`



##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   I think ""Java heap space test"" may be not needed here, as FORCE_HEAP_OOM_IGNORE_SET is not used in the ut.
   



##########
src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java:
##########
@@ -81,7 +81,7 @@ public void handleFSError(FSError e)
 
                 // for both read and write errors mark the path as unwritable.
                 DisallowedDirectories.maybeMarkUnwritable(new File(e.path));
-                if (e instanceof FSReadError)
+                if (e instanceof FSReadError && !isCausedByOutOfMemoryException(e))

Review Comment:
   what about change the function to ""isNotCausedByOutOfMemeoryException"", so no ""!"" is needed before the function ,also the function logic should be rewrite ~~~~



;18/Apr/23 02:06;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169635308


##########
src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java:
##########
@@ -96,6 +96,20 @@ public void handleFSError(FSError e)
         }
     }
 
+    private boolean isCausedByOutOfMemoryException(Throwable error)
+    {
+        for (Throwable t = error; t != null; t = t.getCause())
+        {
+            if (t instanceof OutOfMemoryError)
+                return true;
+            for (Throwable s : t.getSuppressed())
+                if (s instanceof OutOfMemoryError)
+                return true;

Review Comment:
   thanks



;18/Apr/23 07:51;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169636128


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   No, this has to be there in order to skip the logic in the method where it is referenced.



;18/Apr/23 07:51;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169636458


##########
test/unit/org/apache/cassandra/service/DiskFailurePolicyTest.java:
##########
@@ -79,22 +88,24 @@ public DiskFailurePolicyTest(DiskFailurePolicy testPolicy, boolean isStartUpInPr
     public static Collection<Object[]> generateData()
     {
         return Arrays.asList(new Object[][]{
-                             { Config.DiskFailurePolicy.die, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.ignore, true, new FSReadError(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.stop_paranoid, true, new FSReadError(new IOException(), ""blah""), false, true, true},
-                             { Config.DiskFailurePolicy.die, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.ignore, true, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { DiskFailurePolicy.stop_paranoid, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
-                             { Config.DiskFailurePolicy.die, false, new FSReadError(new IOException(), ""blah""), false, true, false},
-                             { DiskFailurePolicy.ignore, false, new FSReadError(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, false, new FSReadError(new IOException(), ""blah""), false, false, false},
-                             { DiskFailurePolicy.stop_paranoid, false, new FSReadError(new IOException(), ""blah""), false, false, false},
-                             { Config.DiskFailurePolicy.die, false, new CorruptSSTableException(new IOException(), ""blah""), false, true, false},
-                             { DiskFailurePolicy.ignore, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
-                             { DiskFailurePolicy.stop_paranoid, false, new CorruptSSTableException(new IOException(), ""blah""), false, false, false}
+                             { die, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { ignore, true, new FSReadError(new IOException(), ""blah""), true, false, false},
+                             { stop, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { stop_paranoid, true, new FSReadError(new IOException(), ""blah""), false, true, true},
+                             { die, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { ignore, true, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { stop_paranoid, true, new CorruptSSTableException(new IOException(), ""blah""), false, true, true},
+                             { die, false, new FSReadError(new IOException(), ""blah""), false, true, false},
+                             { ignore, false, new FSReadError(new IOException(), ""blah""), true, false, false},
+                             { stop, false, new FSReadError(new IOException(), ""blah""), false, false, false},
+                             { stop_paranoid, false, new FSReadError(new IOException(), ""blah""), false, false, false},
+                             { die, false, new CorruptSSTableException(new IOException(), ""blah""), false, true, false},
+                             { ignore, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop, false, new CorruptSSTableException(new IOException(), ""blah""), true, false, false},
+                             { stop_paranoid, false, new CorruptSSTableException(new IOException(), ""blah""), false, false, false},
+                             { best_effort, false, new FSReadError(new IOException(new OutOfMemoryError(""Java heap space test"")), ""best_effort_oom""), true, false, false},

Review Comment:
   see above



;18/Apr/23 07:52;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169637021


##########
src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java:
##########
@@ -81,7 +81,7 @@ public void handleFSError(FSError e)
 
                 // for both read and write errors mark the path as unwritable.
                 DisallowedDirectories.maybeMarkUnwritable(new File(e.path));
-                if (e instanceof FSReadError)
+                if (e instanceof FSReadError && !isCausedByOutOfMemoryException(e))

Review Comment:
   I rewrote the logic to be more generic.



;18/Apr/23 07:52;githubbot;600","Maxwell-Guo commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169764953


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
    what I mean is  such information(""Java heap space test"") will certainly not exist in the actual production environment, and the purpose of existence （""Java heap space test""） seems to be used only for ut testing. If it is purely used for testing, then why the information in ut does not directly use the existing exception message



;18/Apr/23 09:40;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169767774


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   What if _test itself_ throws OOM exception with a message ""Java heap space""? How would you make the difference between legit OOM thrown during tests and OOM thrown as part of the test itself?



##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   @Maxwell-Guo  What if _test itself_ throws OOM exception with a message ""Java heap space""? How would you make the difference between legit OOM thrown during tests and OOM thrown as part of the test itself?



;18/Apr/23 09:43;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169776176


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   @Maxwell-Guo If you have better solution, I am all ears.



;18/Apr/23 09:50;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169795982


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   @Maxwell-Guo  I rewrote it so it is not there anymore.



;18/Apr/23 10:06;githubbot;600","Maxwell-Guo commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169796487


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   what about using System.setProperty?
   at https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/JVMStabilityInspector.java#L182
   
   `        if (FORCE_HEAP_OOM_IGNORE_SET.contains(oom.getMessage()))
               return;
           if (System.getProperty(""oom.ut.test.message"") != null && System.getProperty(""oom.ut.test.message"").contains(oom.getMessage()))
               return;
           logger.error(""Force heap space OutOfMemoryError in the presence of"", oom);
           // Start to produce heap space OOM forcibly.
           List<long[]> ignored = new ArrayList<>();`
   
   and at https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/service/DiskFailurePolicyTest.java#L57
   
   we can setting 
   `  static
       {
           System.setProperty(""oom.ut.test.message"", ""Java heap space test"");
       }
   `
   others can be left as it is
   



;18/Apr/23 10:07;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169856409


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   I think the current solution I just pushed is good enough. You probably post the comment before checking it?



;18/Apr/23 10:54;githubbot;600","smiklosovic commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1169856409


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   I think the current solution I just pushed is good enough. You probably posted the comment before checking it?



;18/Apr/23 10:55;githubbot;600","Maxwell-Guo commented on code in PR #2276:
URL: https://github.com/apache/cassandra/pull/2276#discussion_r1170726031


##########
src/java/org/apache/cassandra/utils/JVMStabilityInspector.java:
##########
@@ -168,7 +168,7 @@ else if (t instanceof UnrecoverableIllegalStateException)
             inspectThrowable(t.getCause(), fn);
     }
 
-    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"");
+    private static final Set<String> FORCE_HEAP_OOM_IGNORE_SET = ImmutableSet.of(""Java heap space"", ""GC Overhead limit exceeded"", ""Java heap space test"");

Review Comment:
   sorry @smiklosovic , the version when I commented was not the latest, so I have such a question. 
   +1 on this, and thanks for this work.



;19/Apr/23 01:54;githubbot;600","smiklosovic closed pull request #2276: CASSANDRA-18336
URL: https://github.com/apache/cassandra/pull/2276


;27/Apr/23 09:32;githubbot;600",,,,,,,,,,0,9600,,,0,9600,,,,,,,,,,,,,,,,"27/Mar/23 08:30;naizhen;4031679897782_.pic.jpg;https://issues.apache.org/jira/secure/attachment/13056824/4031679897782_.pic.jpg","27/Mar/23 08:30;naizhen;4241679905694_.pic.jpg;https://issues.apache.org/jira/secure/attachment/13056822/4241679905694_.pic.jpg","16/Mar/23 01:00;naizhen;system.log.2023-02-21.0;https://issues.apache.org/jira/secure/attachment/13056381/system.log.2023-02-21.0",,3.0,smiklosovic,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Apr 26 21:11:15 UTC 2023,,,,,,,All,,,,"0|z1gm7c:",9223372036854775807,,,,brandon.williams,maxwellguo,,Normal,,3.0.0,,https://github.com/apache/cassandra/commit/db78e746d7e2fb9a2aa4c10e1322c6c5033f006b,,,,,,,,,CI,,,,,"16/Mar/23 15:30;brandon.williams;What version of C* is this against?  Was any actual data lost?  I tried this against 4.0 and the behavior matched but all the data was still there so nothing seems amiss.;;;","17/Mar/23 01:48;naizhen;The version is 4.0.3 . All the data (sstables )on the node were deleted!;;;","17/Mar/23 18:36;brandon.williams;It looks like there were still sstables opened after the deletion, like these:

{noformat}
INFO  [SSTableBatchOpen:2] 2023-02-21 18:22:54,720 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830647-big (179.084MiB)
INFO  [SSTableBatchOpen:5] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830662-big (4.039MiB)
INFO  [SSTableBatchOpen:7] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830663-big (3.589MiB)
INFO  [SSTableBatchOpen:6] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830661-big (39.789MiB)
INFO  [SSTableBatchOpen:8] 2023-02-21 18:22:54,721 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830664-big (6.007MiB)
INFO  [SSTableBatchOpen:3] 2023-02-21 18:22:54,739 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830583-big (190.543MiB)
INFO  [SSTableBatchOpen:1] 2023-02-21 18:22:54,739 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830440-big (191.089MiB)
INFO  [SSTableBatchOpen:4] 2023-02-21 18:22:54,747 SSTableReaderBuilder.java:351 - Opening /historyData/cassandra/data/kairosdb/data_points-870fab7087ba11eb8b50d3c6960df21b/nb-8830513-big (194.560MiB)
{noformat};;;","27/Mar/23 08:31;naizhen;!4031679897782_.pic.jpg!;;;","27/Mar/23 08:31;naizhen;when the DiskFailurePolicy is  best_effort. it will delete all sstables.;;;","27/Mar/23 08:36;naizhen;{code:java}

// for both read and write errors mark the path as unwritable.                DisallowedDirectories.maybeMarkUnwritable(new File(e.path));                if (e instanceof FSReadError)                {                    File directory = DisallowedDirectories.maybeMarkUnreadable(new File(e.path));                    if (directory != null)                        Keyspace.removeUnreadableSSTables(directory);                } {code};;;","27/Mar/23 10:09;maxwellguo;Let me check whether it is a bug or not ;;;","12/Apr/23 13:39;smiklosovic;Following the code, it will remove SStables in the directories which became ""unreadable"". You may have more than one data directory of Cassandra which might be on different disks so upon getting read errors from so and so disk or if data are somehow corrupted, it will remove them but other data in other directories might remain untouched. I do not know if we want to do something about it.

[~blerer] do you have any idea about the second part of this case? Can you shed more light on the logic here? Is this something expected?

https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/service/DefaultFSErrorHandler.java#L69-L90

All after your ""if"".;;;","12/Apr/23 14:13;maxwellguo;this is right and will mark the dir unread and unwriteable ，I am trying to find way to distingush betweent out of memory and real disk failure causes. In this case all seems to be io exception.
just exploring;;;","13/Apr/23 08:18;smiklosovic;I do not think we should remove any sstables when OutOfMemoryError is thrown.;;;","13/Apr/23 09:02;maxwellguo;of course~~~,and this behavior is also incorrect for databases. and I think this  [~yukim] may do some help too.;;;","13/Apr/23 10:37;yukim;The `best_effort` behavior has been the same since 1.2.1. (CASSANDRA-4847);;;","14/Apr/23 05:44;maxwellguo;It seems the dir data have been remove when using mmap and the memory is limited and oom occurs;;;","17/Apr/23 10:52;smiklosovic;what do you think about this? https://github.com/apache/cassandra/pull/2276

[~naizhen] [~maxwellguo] [~brandon.williams] [~yukim];;;","17/Apr/23 11:16;brandon.williams;Are we sure that a legit OOM will not raise FSReadError?;;;","17/Apr/23 11:36;smiklosovic;I think there are three scenarios:

1) thrown FSReadError with IOException (or any other exception except OutOfMemoryError)
2) thrown FSReadError with OutOfMemoryError as cause
3) thrown OutOfMemoryError 

When 1) happens, it will do the same thing as before - marking the dir unwritable and unreadable (and removes data, potentially)
When 2) happens, it will mark it unwritable only
When 3) happens, if OOM is thrown only, from what I see in JVMStabilityInspector.inspectThrowable, it will just log heap histogram, if configured, and it will re-throw it so the logic in DefaultFSErrorHandler.handleFSError will not be triggered at all.

_Are we sure that a legit OOM will not raise FSReadError?_

The example in this ticket spotted an issue when a read was executed but while doing so, OOM occured. If you are asking what consequences there are for reads / writes when some other subsystem throws OOM, I would expect that such reads / write will fail and when they do, their cause will be OOM again, so we hit case 2) from above. ;;;","17/Apr/23 11:43;brandon.williams;bq. If you are asking what consequences there are for reads / writes when some other subsystem throws OOM, I would expect that such reads / write will fail and when they do, their cause will be OOM again, so we hit case 2) from above. 

My concern was hitting the 2) path when 3) occurs... did you mean 3) here?;;;","17/Apr/23 11:48;smiklosovic;Yeah I understand. I think this is just fine, no? If OOM is re-thrown here (1) and handler is called here (2), when (1) is rethrown, it will never get to (2) so I can't see how such combination you mention might happen.

(1) https://github.com/instaclustr/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/JVMStabilityInspector.java#L129
(2) https://github.com/instaclustr/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/JVMStabilityInspector.java#L160

To elaborate on it more, you mean like:

There is some area of the code which raises OOM, then it gets to inspector which will look at that and it will rethrow it - what I see from the code is that it will not call the handler. 

Then, while reads are served, it might happen that it will not have enough memory to handle that read request either, so it will throw FSReadError which will have OOM as cause. 

;;;","17/Apr/23 14:05;brandon.williams;Yep, I think it's fine.;;;","18/Apr/23 02:07;maxwellguo;I think it's fine, too . and I left some comments on this pr.;;;","18/Apr/23 07:55;smiklosovic;Thanks, I rewrote the logic little bit to be more generic, we might include more exceptions which are not meant to trigger the data removal in the future so I prepared the code for it.

[~brandon.williams] do you want to take the last look before I start to build it? 

https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-3.0
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-3.11
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-4.0
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-4.1
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336;;;","18/Apr/23 11:16;brandon.williams;Looks ready to be built to me.;;;","19/Apr/23 01:56;maxwellguo;+1 on this, [~brandon.williams] What's your opinion?;;;","19/Apr/23 06:15;smiklosovic;Thanks guys, I am building it.;;;","19/Apr/23 12:31;smiklosovic;3.0 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2104/workflows/a5cbcea4-3a93-40f2-80cd-9b8058e3ed75
3.11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2103/workflows/3941b164-79d8-4a90-81d4-5d9b36db408c
4.0 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2429
4.1 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2430/

trunk
https://app.circleci.com/pipelines/github/instaclustr/cassandra/2102/workflows/fca7b713-707b-40c0-9003-81d877a62530
https://app.circleci.com/pipelines/github/instaclustr/cassandra/2102/workflows/28452fe4-2553-4539-b931-80e08609cc98

https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-3.0
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-3.11
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-4.0
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336-4.1
https://github.com/instaclustr/cassandra/tree/CASSANDRA-18336;;;","26/Apr/23 19:13;brandon.williams;Started circle for 4.0 and 4.1 so we can get the benefit of the multiplexer there as well:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18336-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/989/workflows/c079ef92-bb45-4d5a-8ba5-c1de64531b73], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/989/workflows/3120cd9a-07e8-4f84-9ebb-a5f2b23cc097]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18336-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/988/workflows/cb4b12e9-d1a0-434f-b2c4-6f3664f6703c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/988/workflows/a471bc92-fc31-4497-98df-3ca991a1df18]|
;;;","26/Apr/23 21:11;brandon.williams;I see only known failures, +1.;;;",,,,,,,,,,,,,,,,,,
Backport CASSANDRA-17205 to 4.0 branch (strong ref leak),CASSANDRA-18332,13528502,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,14/Mar/23 20:39,05/Apr/23 00:22,13/Jul/23 08:41,03/Apr/23 20:31,4.0.9,4.1.2,5.0,,,,Local/SSTable,,,0,,,,,"See description in CASSANDRA-17205; this should have been applied on 4.0 and merged up but was overlooked.

 

Also double-check that strong leaks are logged at ERROR instead of WARN on both 4.0, 4.1, and trunk (see [comment|https://issues.apache.org/jira/browse/CASSANDRA-18176?focusedCommentId=17687184&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17687184])",,jmckenzie,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18176,,,CASSANDRA-18256,,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,Degradation -> Resource Management,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 03 20:32:16 UTC 2023,,,,,,,All,,,,"0|z1gky8:",9223372036854775807,,,,jmckenzie,smiklosovic,,Low,,4.0,,"https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=f6fce7ab51e41dfd8d9584ce4c8dd35e0ed61598",,,,,,,,,No documentation changes needed.,,,,,"15/Mar/23 16:14;jmckenzie;||Item|Link|
|PR|[link|https://github.com/apache/cassandra/pull/2219]|
|JDK8 CI|[link|https://app.circleci.com/pipelines/github/jmckenzie-dev/cassandra/334/workflows/4aad53f0-a6e6-407b-ace3-668b5f0db512]|
|JDK11 CI|[link|https://app.circleci.com/pipelines/github/jmckenzie-dev/cassandra/334/workflows/dfc6f82d-18d0-45cb-8a98-a982a0259da0]|

[~benedict] - almost identical to the 4.1+ patch (CASSANDRA-17205) with the following 2 changes:
1) Ordering on constructor of checking for illegal state on {{parentRef}} to immediately after acquisition rather than after initializing the {{Counter}} potentially unnecessarily
2) Up log level from {{warn}} to {{error}} on {{StrongLeakDetector.run}}

Any chance you have a few minutes to glance over it on review? I'll pull it forward with just the logging changes on merge up; since it's a 1 token log level change I'm not too concerned about re-running CI for that if you're good with it.;;;","27/Mar/23 17:55;smiklosovic;It would be awesome if this ended up in 4.0.9. We should release it pretty soon.;;;","27/Mar/23 19:38;jmckenzie;You _are_ a committer you know, [~smiklosovic]. Just need that +1 from someone who knows what they're doing in this space and is a committer, and I think you fit the bill. :D;;;","27/Mar/23 20:00;smiklosovic;Ah this is literally the same thing as I looked closer :D

+1 but CI looks quite flaky / errorneous. Are we happy?;;;","28/Mar/23 19:04;jmckenzie;Oof; I should have double checked that instead of just assuming. Kicked off workflows again; I'll circle back once I get a cleaner more representative run. (edit: I'm assuming it's env flaking since there's lib finding errors, timeouts, etc - nothing I could attribute to any of the changes in this diff);;;","31/Mar/23 17:59;smiklosovic;If I understand it correctly, this has to go to 4.0 and then the changes in constructor on that parentRef order as well as logging from warn to error level should be applied to 4.1 and trunk, right?;;;","01/Apr/23 07:12;smiklosovic;4.0 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2044/workflows/80d2d0e8-6253-43af-b90f-d75c8cb05726
4.0 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2044/workflows/0b2d215a-8de2-4f69-8b67-314a0eb04bc4

4.1 j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2046/workflows/217c1c59-b4cf-4c49-bab6-3cbe0e889cb6
4.1 j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2046/workflows/29c65922-91fc-4a29-8e73-e60901cc4e94;;;","01/Apr/23 22:56;jmckenzie;bq. If I understand it correctly, this has to go to 4.0 and then the changes in constructor on that parentRef order as well as logging from warn to error level should be applied to 4.1 and trunk, right?
Correct. The logging level change is material and the other is more or less just trivial hygiene.

Edit: looks like just 1 flake on both [JDK8|https://app.circleci.com/pipelines/github/instaclustr/cassandra/2044/workflows/80d2d0e8-6253-43af-b90f-d75c8cb05726/jobs/18359/tests] and [JDK11|https://app.circleci.com/pipelines/github/instaclustr/cassandra/2044/workflows/0b2d215a-8de2-4f69-8b67-314a0eb04bc4/jobs/18335/tests], same test.

I'll circle back to that test on Monday and see how it holds up under clean multiplexing on 4.0 on circle; if it's got issues I'll go ahead and create a JIRA for it.

You good w/me going through merge up process Monday otherwise [~smiklosovic]?;;;","03/Apr/23 15:11;smiklosovic;[~jmckenzie] I have added build for 4.1 as well. I think these are all already-known flakes. 

https://issues.apache.org/jira/browse/CASSANDRA-18047
https://issues.apache.org/jira/browse/CASSANDRA-16677;;;","03/Apr/23 15:14;brandon.williams;bq. if it's got issues I'll go ahead and create a JIRA for it.

That's CASSANDRA-18366;;;","03/Apr/23 20:32;jmckenzie;Committed. Thanks for the review and assist on CI [~smiklosovic]

[cassandra-4.0 commit|https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=f6fce7ab51e41dfd8d9584ce4c8dd35e0ed61598]
[cassandra-4.1 merge|https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=085765a07c9eb87e05a700ba4395c9df672a60c1]
[trunk merge|https://gitbox.apache.org/repos/asf?p=cassandra.git;a=commit;h=e96c20e8150fd81716d203aa40301c09db0bc04a];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Debian package repository misconfiguration,CASSANDRA-18326,13528378,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,rtib,rtib,14/Mar/23 08:54,14/Mar/23 12:38,13/Jul/23 08:41,14/Mar/23 12:38,NA,,,,,,Packaging,,,0,,,,,"Debian apt is failing on current jfrog repository access for 40x releases with:

{code}
W: Conflicting distribution: https://debian.cassandra.apache.org 40x InRelease (expected 40x but got 40)

E: Repository 'https://debian.cassandra.apache.org 40x InRelease' changed its 'Codename' value from '40x' to '40'

N: This must be accepted explicitly before updates for this repository can be applied. See apt-secure(8) manpage for details.
{code}

This is caused by the typo in [dists/40x/Release|https://debian.cassandra.apache.org/dists/40x/Release] containing
{code}
Codename: 40
{code}
but it is expected to be
{code}
Codename: 40x
{code}
",,mck,rtib,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 14 12:38:30 UTC 2023,,,,,,,All,,,,"0|z1gk6o:",9223372036854775807,,,,,,,Normal,,,,,,,,,,,,,,,,,,"14/Mar/23 10:04;smiklosovic;[~brandon.williams] would you help us with this one, please?;;;","14/Mar/23 11:05;brandon.williams;Yep, this is my fault from my manually uploading the packages in CASSANDRA-18307.  I thought I had fixed everything from the '40' mistake, but it looks like I missed this.;;;","14/Mar/23 11:31;brandon.williams;I saw that indeed 'Release' was the old file and re-uploaded that which seems to have solved it; I'm going to go ahead and do the whole debian directory again since it is idempotent and I don't know if anything else didn't take.;;;","14/Mar/23 11:48;brandon.williams;bq. do the whole debian directory

This is done now, [~rtib] please confirm everything works for you.;;;","14/Mar/23 12:37;rtib;Hi [~brandon.williams] , it looks good to me. Apt update took it and recent version is available now.;;;","14/Mar/23 12:38;brandon.williams;Thanks for confirming!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incompatible file system thrown while running Simulator,CASSANDRA-18320,13528031,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,e.dimitrova,e.dimitrova,10/Mar/23 19:26,11/Apr/23 20:27,13/Jul/23 08:41,15/Mar/23 23:23,4.1.2,5.0,,,,,CI,,,0,,,,,"{code}
java.io.UncheckedIOException
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:831)
	at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:816)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:257)
	at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:381)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
	at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
	at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1047)
	at org.apache.cassandra.simulator.ClusterSimulation.close(ClusterSimulation.java:816)
	at org.apache.cassandra.simulator.SimulationRunner$Run.run(SimulationRunner.java:370)
	at org.apache.cassandra.simulator.SimulationRunner$BasicCommand.run(SimulationRunner.java:345)
	at org.apache.cassandra.simulator.paxos.PaxosSimulationRunner.main(PaxosSimulationRunner.java:148)
	at org.apache.cassandra.simulator.test.ShortPaxosSimulationTest.simulationTest(ShortPaxosSimulationTest.java:33)
Caused by: java.nio.file.DirectoryNotEmptyException: /cassandra/node1/commitlog
	at com.google.common.jimfs.FileSystemView.checkEmpty(FileSystemView.java:535)
	at com.google.common.jimfs.FileSystemView.checkDeletable(FileSystemView.java:517)
	at com.google.common.jimfs.FileSystemView.delete(FileSystemView.java:479)
	at com.google.common.jimfs.FileSystemView.deleteFile(FileSystemView.java:465)
	at com.google.common.jimfs.JimfsFileSystemProvider.delete(JimfsFileSystemProvider.java:261)
	at java.nio.file.Files.delete(Files.java:1126)
	at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:252)
{code}",,dcapwell,e.dimitrova,maedhroz,smiklosovic,,,,,,"dcapwell closed pull request #2213: CASSANDRA-18320
URL: https://github.com/apache/cassandra/pull/2213


;11/Apr/23 20:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,CASSANDRA-18196,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 15 23:14:22 UTC 2023,,,,,,,All,,,,"0|z1gi1k:",9223372036854775807,,,,brandon.williams,maedhroz,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/d5b1483703b53c02fb0e616e58107afb814f9f81,,,,,,,,,ran ci,,,,,"10/Mar/23 19:28;smiklosovic;It says that it can not recursively remove a directory because it was not empty. This is happening after Cluster (as in dtest jvm api) is being closed.

I wonder how that is related to what we did in CASSANDRA-18294. There are two ways of removing stuff, ""Java way"" (whatever that means) and calling ""rm"" command in *nix by means of CASSANDRA-17427 which adds this CassandraRelevantProperty:

{code}
    /** When enabled, recursive directory deletion will be executed using a unix command `rm -rf` instead of traversing
     * and removing individual files. This is now used only tests, but eventually we will make it true by default.*/
    USE_NIX_RECURSIVE_DELETE(""cassandra.use_nix_recursive_delete""),
{code}

When I set this to true before that cleanup logic in simulator kicks in, it will just remove it without any error.

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1980/workflows/9cbd06eb-4333-485c-ad38-5986cd4870c6
https://github.com/instaclustr/cassandra/commit/d7c44651d63a75ca017414b172538bd9246e4b98

This property is set only in IDEA test run config but you see that there is the intention to set it by default to true in tests without setting any flag.

https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/util/PathUtils.java#L391;;;","10/Mar/23 19:50;dcapwell;agree with [~smiklosovic] here, this isn't a simulator issue but a jvm-dtest Cluster.close issue

{code}
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1047)
	at org.apache.cassandra.simulator.ClusterSimulation.close(ClusterSimulation.java:816)
	at org.apache.cassandra.simulator.SimulationRunner$Run.run(SimulationRunner.java:370)
	at org.apache.cassandra.simulator.SimulationRunner$BasicCommand.run(SimulationRunner.java:345)
	at org.apache.cassandra.simulator.paxos.PaxosSimulationRunner.main(PaxosSimulationRunner.java:148)
{code}

Since we got a ""Caused by: java.nio.file.DirectoryNotEmptyException: /cassandra/node1/commitlog"" we then rethrow the error, but this looks like we have a close bug...

{code}
@Override
    public void close()
    {
        FBUtilities.waitOnFutures(instances.stream()
                                           .filter(i -> !i.isShutdown())
                                           .map(IInstance::shutdown)
                                           .collect(Collectors.toList()),
                                  1L, TimeUnit.MINUTES);

        instances.clear();
        instanceMap.clear();
        PathUtils.setDeletionListener(ignore -> {});
        // Make sure to only delete directory when threads are stopped
        if (Files.exists(root))
            PathUtils.deleteRecursive(root);
        Thread.setDefaultUncaughtExceptionHandler(previousHandler);
        previousHandler = null;
        checkAndResetUncaughtExceptions();
        //checkForThreadLeaks();
        //withThreadLeakCheck(futures);
    }
{code}

All our close futures were success, yet commit log touched a file while we were deleting... so we have a concurrency issue with PathUtils.deleteRecursive(root);

bq. This property is set only in IDEA test run config but you see that there is the intention to set it by default to true in tests without setting any flag.

Its hard for me to test this as the issue looks to be a concurrency issue, so if `rm -rd` fails when the dir adds a file AFTER the dentry was loaded by rm I can't say... but I don't think changing the implementation actually fixes this bug, it looks like commit log said it was fully closed when it wasn't, so we have concurrent file creation while we are deleting...
;;;","10/Mar/23 20:00;smiklosovic;Yes I agree, [~dcapwell], it seems like CommitLog ""leaks"". deleteRecursive should just delete that stuff and no new files should be created while it is doing its job. It seems like somebody wrote a file while it was about to remove the dir and it was expecting that to be empty.;;;","10/Mar/23 20:19;brandon.williams;Looping Stefan's patch, I received a slight different error:

{noformat}
[junit-timeout] Testcase: simulationTest(org.apache.cassandra.simulator.test.ShortPaxosSimulationTest)-.jdk1.8: Caused an ERROR
[junit-timeout] null
[junit-timeout] java.io.UncheckedIOException
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:831)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:816)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:257)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:381)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
[junit-timeout]         at java.util.ArrayList.forEach(ArrayList.java:1259)
[junit-timeout]         at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
[junit-timeout]         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
[junit-timeout]         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
[junit-timeout]         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
[junit-timeout]         at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
[junit-timeout]         at java.util.ArrayList.forEach(ArrayList.java:1259)
[junit-timeout]         at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
[junit-timeout]         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
[junit-timeout]         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
[junit-timeout]         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
[junit-timeout]         at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
[junit-timeout]         at java.util.ArrayList.forEach(ArrayList.java:1259)
[junit-timeout]         at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
[junit-timeout]         at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
[junit-timeout]         at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
[junit-timeout]         at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
[junit-timeout]         at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
[junit-timeout]         at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
[junit-timeout]         at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1049)
[junit-timeout]         at org.apache.cassandra.simulator.ClusterSimulation.close(ClusterSimulation.java:816)
[junit-timeout]         at org.apache.cassandra.simulator.SimulationRunner$Run.run(SimulationRunner.java:370)
[junit-timeout]         at org.apache.cassandra.simulator.SimulationRunner$BasicCommand.run(SimulationRunner.java:345)
[junit-timeout]         at org.apache.cassandra.simulator.paxos.PaxosSimulationRunner.main(PaxosSimulationRunner.java:148)
[junit-timeout]         at org.apache.cassandra.simulator.test.ShortPaxosSimulationTest.simulationTest(ShortPaxosSimulationTest.java:33)
[junit-timeout] Caused by: java.nio.file.NoSuchFileException: /cassandra/node1/commitlog/CommitLog-7-1577836800031.log
[junit-timeout]         at com.google.common.jimfs.DirectoryEntry.requireExists(DirectoryEntry.java:70)
[junit-timeout]         at com.google.common.jimfs.FileSystemView.deleteFile(FileSystemView.java:464)
[junit-timeout]         at com.google.common.jimfs.JimfsFileSystemProvider.delete(JimfsFileSystemProvider.java:261)
[junit-timeout]         at java.nio.file.Files.delete(Files.java:1126)
[junit-timeout]         at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:252)
[junit-timeout]
{noformat};;;","10/Mar/23 20:54;smiklosovic;This might happen when the underlying ""file lister"" lists the files to be deleted and as it goes one by one and deletes each, that file is not there anymore. In the context of CommitLog, maybe it removes the commit log file but the removal logic races again.
Any way I look at this it seems like we should be sure that we indeed closed / finished what CommitLog subsystem is doing and then we approach the removal of any files.;;;","13/Mar/23 17:33;dcapwell;[~maedhroz] is rebasing accord branch and has an interesting stack trace

https://app.circleci.com/pipelines/github/maedhroz/cassandra/696/workflows/180e9555-6796-4733-8214-ba94fb9484fd/jobs/6936/tests#failed-test-0

{code}
java.lang.IllegalArgumentException: Incompatible file system
	at org.apache.cassandra.io.util.File.<init>(File.java:135)
	at org.apache.cassandra.service.snapshot.SnapshotLoader.loadSnapshots(SnapshotLoader.java:173)
	at org.apache.cassandra.service.snapshot.SnapshotLoader.loadSnapshots(SnapshotLoader.java:189)
	at org.apache.cassandra.service.snapshot.SnapshotManager.loadSnapshots(SnapshotManager.java:119)
	at org.apache.cassandra.service.snapshot.SnapshotManager.start(SnapshotManager.java:88)
	at org.apache.cassandra.service.StorageService.startSnapshotManager(StorageService.java:1160)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:712)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:68)
	at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
	Suppressed: java.io.UncheckedIOException
		at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:831)
		at org.apache.cassandra.io.util.PathUtils.propagateUnchecked(PathUtils.java:816)
		at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:257)
		at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:381)
		at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
		at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
		at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
		at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
		at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
		at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
		at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
		at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
		at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
		at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
		at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
		at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
		at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
		at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
		at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
		at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
		at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
		at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
		at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
		at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
		at org.apache.cassandra.io.util.PathUtils.forEach(PathUtils.java:155)
		at org.apache.cassandra.io.util.PathUtils.deleteRecursive(PathUtils.java:378)
		at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1047)
		at org.apache.cassandra.simulator.ClusterSimulation.close(ClusterSimulation.java:819)
		at org.apache.cassandra.simulator.SimulationRunner$Run.run(SimulationRunner.java:370)
		at org.apache.cassandra.simulator.paxos.AccordSimulationRunner$Run.run(AccordSimulationRunner.java:39)
		at org.apache.cassandra.simulator.paxos.AccordSimulationRunner$Run.run(AccordSimulationRunner.java:30)
		at org.apache.cassandra.simulator.SimulationRunner$BasicCommand.run(SimulationRunner.java:355)
		at org.apache.cassandra.simulator.paxos.AccordSimulationRunner$Run.run(AccordSimulationRunner.java:30)
		at org.apache.cassandra.simulator.paxos.AccordSimulationRunner.main(AccordSimulationRunner.java:76)
		at org.apache.cassandra.simulator.test.ShortAccordSimulationTest.simulationTest(ShortAccordSimulationTest.java:32)
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
		at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	Caused by: java.nio.file.DirectoryNotEmptyException: /cassandra/node1/data0
		at com.google.common.jimfs.FileSystemView.checkEmpty(FileSystemView.java:535)
		at com.google.common.jimfs.FileSystemView.checkDeletable(FileSystemView.java:517)
		at com.google.common.jimfs.FileSystemView.delete(FileSystemView.java:479)
		at com.google.common.jimfs.FileSystemView.deleteFile(FileSystemView.java:465)
		at com.google.common.jimfs.JimfsFileSystemProvider.delete(JimfsFileSystemProvider.java:261)
		at java.base/java.nio.file.Files.delete(Files.java:1142)
		at org.apache.cassandra.io.util.PathUtils.delete(PathUtils.java:252)
{code}

We still see this on

{code}
		at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1047)
		at org.apache.cassandra.simulator.ClusterSimulation.close(ClusterSimulation.java:819)
{code}

but, the top-level exception is

{code}
java.lang.IllegalArgumentException: Incompatible file system
	at org.apache.cassandra.io.util.File.<init>(File.java:135)
	at org.apache.cassandra.service.snapshot.SnapshotLoader.loadSnapshots(SnapshotLoader.java:173)
	at org.apache.cassandra.service.snapshot.SnapshotLoader.loadSnapshots(SnapshotLoader.java:189)
	at org.apache.cassandra.service.snapshot.SnapshotManager.loadSnapshots(SnapshotManager.java:119)
	at org.apache.cassandra.service.snapshot.SnapshotManager.start(SnapshotManager.java:88)
	at org.apache.cassandra.service.StorageService.startSnapshotManager(StorageService.java:1160)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:712)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:68)
	at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
{code}

since close error is suppressed, looks like startup fails and close sees a write, so possible this stack trace may help show what is running while the future is complete?;;;","13/Mar/23 17:46;dcapwell;looking at the code I feel the following could be happening

{code}
synchronized public void shutdownBlocking() throws InterruptedException
    {
        if (!started)
            return;

        started = false;
        executor.shutdown();
        executor.awaitTermination();
        segmentManager.shutdown();
        segmentManager.awaitTermination(1L, TimeUnit.MINUTES);
    }
{code}

If we shutdown before close calls this, then the close future will be success right away as there isn't actually a blocking call... creating a shutdown future would help solve that

Sadly Simulator isn't showing you the seed in the exception, so hard to confirm such a patch actually solves the problem.;;;","13/Mar/23 18:07;dcapwell;going to see if I can reproduce, I want to make sure we don't loose the seed and if blocking on awaitTermination even if another thread did shutdown;;;","13/Mar/23 18:32;dcapwell;think I have a patch but to help verify I changed simulator to throw error with seed rather than log the seed

PR: https://github.com/apache/cassandra/pull/2213
CI: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=CASSANDRA-18320

once I can get a repo, I can see if the patch I have (which is reverted in this branch) fixes it.;;;","13/Mar/23 19:54;dcapwell;so far simulator looks stable with my patch, which is just

{code}
diff --git a/src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java b/src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java
index 532ea79f1b..37d286d721 100644
--- a/src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java
+++ b/src/java/org/apache/cassandra/service/snapshot/SnapshotLoader.java
@@ -23,7 +23,6 @@ import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Arrays;
@@ -66,7 +65,7 @@ public class SnapshotLoader

     public SnapshotLoader(String[] dataDirectories)
     {
-        this(Arrays.stream(dataDirectories).map(Paths::get).collect(Collectors.toList()));
+        this(Arrays.stream(dataDirectories).map(File::new).map(File::toPath).collect(Collectors.toList()));
     }

     public SnapshotLoader(Collection<Path> dataDirs)
{code}

This looks like Paths.get is unsafe as its defined as

{code}
public static Path get(String first, String... more) {
        return FileSystems.getDefault().getPath(first, more);
    }
{code}

Since we don't override the default file system (its app ClassLoader and final) all usage will produce a Path that has a different FileSystem than File does; this implies that mixing Path and File may not be safe in the context of Simulator...

Ill talk to [~benedict] about this when he gets back;;;","13/Mar/23 21:00;dcapwell;Turns out File has a TODO to remove Paths.get... so I added a check style to block it and migrated all usage away.

There was one issue with Checkstyle... Paths.get matches absolutePaths.get... so I block Paths class from being imported...;;;","13/Mar/23 22:01;dcapwell;patch is mostly stable (OOMs from time to time...; but jdk11 is stable https://app.circleci.com/pipelines/github/dcapwell/cassandra/1928/workflows/e38a054b-a97f-4a84-bf88-b4abceb5947f/jobs/18273)

;;;","13/Mar/23 22:06;maedhroz;+1;;;","13/Mar/23 22:28;dcapwell;won't commit today, want to give time to others to see if desired;;;","13/Mar/23 23:22;smiklosovic;I will wait until this is merged so we can release 4.1.1 with it.

I dont see any problem with the patch.;;;","14/Mar/23 08:41;smiklosovic;Actually, we do not need to wait for this to appear in 4.1.1 because this is just test-related.;;;","14/Mar/23 11:12;brandon.williams;This looks good to me and I can unsurprisingly no longer reproduce, +1.;;;","14/Mar/23 17:32;dcapwell;bq. Actually, we do not need to wait for this to appear in 4.1.1 because this is just test-related.

[~smiklosovic] this is only an issue in Simulator as it overrides the default FileSystem.  If you run embedded Cassandra and leverage this logic, then there are edge cases for you, else you would never see this.

bq.  I can unsurprisingly no longer reproduce

Yay!  I ran _repeat jobs around 5 times and only ever saw OOM (not the ""I can not make progress"" OOM, but a real one (likely direct memory given the stack trace)).  As far as I can tell, the loading logic fails due to this bug which causes weird cascading issues; those issues are what was reported.;;;","14/Mar/23 17:52;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18320-cassandra-4.1-FA990C99-FC38-4C68-91A6-96C4A8303CE3]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18320-cassandra-4.1-FA990C99-FC38-4C68-91A6-96C4A8303CE3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2350/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18320-trunk-FA990C99-FC38-4C68-91A6-96C4A8303CE3]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18320-trunk-FA990C99-FC38-4C68-91A6-96C4A8303CE3]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2351/]|
;;;","14/Mar/23 19:41;dcapwell;Circle CI is failing, so holding off until I can get a build working... Jenkins is chugging alone, so will see what happens;;;","15/Mar/23 18:32;dcapwell;CI was unstable yesterday so triggered new circle build to see if things are better now;;;","15/Mar/23 23:14;dcapwell;CI is clean, going to start merging;;;",,,,,,,,,,,,,,,,,,,,,,,
BufferPool incorrectly counts memoryInUse when putUnusedPortion is used,CASSANDRA-18311,13527797,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jtgrabowski,jtgrabowski,jtgrabowski,09/Mar/23 11:33,13/Mar/23 09:09,13/Jul/23 08:41,13/Mar/23 09:09,4.0.9,4.1.1,5.0,,,,Local/Caching,,,0,,,,,"The counter is incorrectly decremented by the size of the unused portion of the provided buffer.
It should be decremented by the number of bytes actually returned to the pool (that may be different than ""size""). The number should be calculated as a difference between original and resulting buffer capacity.",,jlewandowski,jtgrabowski,,,,,,,,"jtgrabowski opened a new pull request, #2206:
URL: https://github.com/apache/cassandra/pull/2206

   The counter was incorrectly decremented by the size of the unused portion of the provided buffer. It is now decremented by the number of bytes actually returned to the pool (that may be different than ""size""). The number is calculated as a difference between original and resulting buffer capacity.


;09/Mar/23 11:42;githubbot;600","jacek-lewandowski closed pull request #2206: CASSANDRA-18311 fix BufferPool.memoryInUse counter
URL: https://github.com/apache/cassandra/pull/2206


;13/Mar/23 09:09;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,0.0,jtgrabowski,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 10 08:15:40 UTC 2023,,,,,,,All,,,,"0|z1gglk:",9223372036854775807,,,,jlewandowski,,,Low,,4.0,,https://github.com/apache/cassandra/commit/3cfb2221223a7631f116108aec0a45646e775705,,,,,,,,,regression tests + new test,,,,,"09/Mar/23 11:43;jtgrabowski;[https://github.com/apache/cassandra/pull/2206] (trunk)

[https://github.com/jtgrabowski/cassandra/tree/CASSANDRA-18311-4.1] (4.1)

[https://github.com/jtgrabowski/cassandra/tree/CASSANDRA-18311-4.0] (4.0);;;","09/Mar/23 14:11;jlewandowski;+1, thanks for the patch;;;","10/Mar/23 08:15;jlewandowski;https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2339/ (4.0)
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2342/ (4.1)
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2343/ (trunk);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove git hook for pre-push as it is redundant and causes issues when merging to mainline,CASSANDRA-18309,13527717,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,09/Mar/23 00:00,11/Apr/23 20:27,13/Jul/23 08:41,09/Mar/23 23:21,5.0,,,,,,Accord,,,0,,,,,"{code}
[cep-15-accord][~/repos/apache-cassandra]$ git push origin cep-15-accord
Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.
Entering 'modules/accord'
Username for 'https://github.com':
{code}

This is caused by .build/git/git-hooks/pre-push/100-push-submodules.sh logic

{code}
  local -r cmd='
branch=""$(git rev-parse --abbrev-ref HEAD)""
[[ ""$branch"" == ""HEAD"" ]] && exit 0

default_remote=""$(git config --local --get branch.""${branch}"".remote || true)""
remote=""${default_remote:-origin}""

git push --atomic ""$remote"" ""$branch""
'
  git submodule foreach --recursive ""$cmd""
{code}

This logic was to make sure that the submodule is pushed before you push your changes, but this is slightly redundant as .build/git/git-hooks/pre-commit/100-verify-submodules-pushed.sh will not allow you to commit the submodule SHA until it can confirm its on GitHub.",,dcapwell,maedhroz,,,,,,,,"dcapwell closed pull request #2204: CASSANDRA-18309: Remove git hook for pre-push as it is redundant and causes issues when merging to mainline
URL: https://github.com/apache/cassandra/pull/2204


;11/Apr/23 20:27;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> API / Semantic Implementation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 09 06:14:31 UTC 2023,,,,,,,All,,,,"0|z1gg3s:",9223372036854775807,,,,maedhroz,,,Low,,5.0,,https://github.com/apache/cassandra/commit/51b0dca71df94631519fdf1639aeb5f9ba43c570,,,,,,,,,manual test to unblock Blake's merge,,,,,"09/Mar/23 06:14;maedhroz;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix broken sstableverify dtest,CASSANDRA-18308,13527640,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,08/Mar/23 13:19,08/Mar/23 16:37,13/Jul/23 08:41,08/Mar/23 16:37,4.1.x,5.x,,,,,Test/dtest/python,,,0,,,,,"I accidentally broken sstableverify dtest in CASSANDRA-17056 for versions <= 4.1
",,e.dimitrova,jlewandowski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 08 15:32:21 UTC 2023,,,,,,,All,,,,"0|z1gfmo:",9223372036854775807,,,,brandon.williams,,,Low,,NA,,https://github.com/apache/cassandra-dtest/commit/ddc7ca342f8a84565a01d769c4ec71502a2278d6,,,,,,,,,run sstableverify dtest,,,,,"08/Mar/23 13:27;jlewandowski;https://ci-cassandra.apache.org/job/Cassandra-4.1/281/testReport/dtest.offline_tools_test/TestOfflineTools/;;;","08/Mar/23 14:10;jlewandowski;https://github.com/apache/cassandra-dtest/pull/212;;;","08/Mar/23 14:35;jlewandowski;[4.1|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/602/workflows/be33bf6f-2158-491a-89cf-bb7906a4712f/jobs/3441] (/)
[trunk|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/603/workflows/36260c94-4c77-4a88-b254-12e388d529e8/jobs/3443] (/)
;;;","08/Mar/23 15:24;brandon.williams;+1;;;","08/Mar/23 15:32;e.dimitrova;+1, thank you for the fix 

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Release 4.0.8 not available on jfrog package repositories,CASSANDRA-18307,13527610,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,rtib,rtib,08/Mar/23 09:19,09/Mar/23 12:17,13/Jul/23 08:41,09/Mar/23 12:17,,,,,,,Packaging,,,0,,,,,Release 4.0.8 was published to dist/downloads.a.o only and seems not available at apache.jfrog.io neither for Debian nor RPM.,,mck,rtib,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 09 12:17:48 UTC 2023,,,,,,,All,,,,"0|z1gfg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"08/Mar/23 10:06;mck;Thanks for the report [~rtib].

[~brandon.williams], I think you ran finish_release.sh for this? something fail when you ran it? let me know if you need help re-running just the jfrog upload commands off the old (voted-on) sha of dist.a.o;;;","08/Mar/23 12:30;brandon.williams;I don't recall anything failing and the script would've died, right?  I definitely got to the end and passed the release email to Stefan.

bq.  let me know if you need help re-running just the jfrog upload commands off the old (voted-on) sha of dist.a.o

I'll get it done, but I think we should break the monolithic scripts into discrete steps that a wrapper invokes so this is much easier in the future.;;;","08/Mar/23 17:45;brandon.williams; I think this is resolved now, [~rtib] can you check please?;;;","09/Mar/23 06:14;rtib;Yes, 4.0.8 is now available in the repository. Thank you, [~brandon.williams].;;;","09/Mar/23 12:17;brandon.williams;Thank you for confirming.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hinted_handoff_enabled=false is not honored,CASSANDRA-18304,13527352,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,paulo,paulo,paulo,06/Mar/23 23:14,24/Mar/23 16:19,13/Jul/23 08:41,24/Mar/23 16:19,4.1.2,,,,,,Consistency/Hints,,,0,,,,,"I've had some dtests with disabled hints failing.

After investigation it seems that CASSANDRA-17164 moved hint submission on timeout from [RequestCallbacks.onExpired|https://github.com/apache/cassandra/commit/d2923275e360a1ee9db498e748c269f701bb3a8b#diff-b73c13ea8cae91a215495917fe5e90d55c9f4a283f9e053110992bc9a60004b8L176] to [AbstractWriteResponseHandler.onFailure|https://github.com/apache/cassandra/commit/d2923275e360a1ee9db498e748c269f701bb3a8b#diff-3b202de0d077638bede7bf4076a15eb4d483b717f955f11e743efb8d27c6eb1dR285], but it no longer checks if {{CallbackInfo.shouldHint}} which checks for {{StorageProxy.shouldHint}} which ultimately checks if {{{}hinted_handoff_enabled=true{}}}.

This could cause some tests which expect hints to be disabled to fail intermittently.",,aleksey,brandon.williams,paulo,smiklosovic,,,,,,"smiklosovic commented on code in PR #2197:
URL: https://github.com/apache/cassandra/pull/2197#discussion_r1129982611


##########
src/java/org/apache/cassandra/service/StorageProxy.java:
##########
@@ -2744,6 +2744,7 @@ public static Future<Void> submitHint(Mutation mutation,
                                           EndpointsForToken targets,
                                           AbstractWriteResponseHandler<IMutation> responseHandler)
     {
+        targets = targets.filter(StorageProxy::shouldHint);

Review Comment:
   if `targets` are ""empty"" (whatever that means), we might return just here so we would not `submitHit` at all 



;08/Mar/23 20:21;githubbot;600","smiklosovic commented on code in PR #2197:
URL: https://github.com/apache/cassandra/pull/2197#discussion_r1129983021


##########
test/distributed/org/apache/cassandra/distributed/test/HintsDisabledTest.java:
##########
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Test;
+
+import com.google.monitoring.runtime.instrumentation.common.util.concurrent.Uninterruptibles;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.api.IMessageFilters;
+
+import static org.apache.cassandra.distributed.api.Feature.GOSSIP;
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.apache.cassandra.net.Verb.MUTATION_REQ;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class HintsDisabledTest extends TestBaseImpl
+{
+    @Test
+    public void testHintedHandoffDisabled() throws IOException
+    {
+        try (Cluster cluster = init(Cluster.build(2)
+                                           .withDataDirCount(1)
+                                           .withConfig(config -> config.with(NETWORK, GOSSIP)
+                                                                       .set(""hinted_handoff_enabled"", false))
+                                           .start(), 2))
+        {
+            String createTableStatement = String.format(""CREATE TABLE %s.cf (k text PRIMARY KEY, c1 text) "" +
+                                                        ""WITH compaction = {'class': 'SizeTieredCompactionStrategy', 'enabled': 'false'} "", KEYSPACE);
+            cluster.schemaChange(createTableStatement);
+
+            // each row has 1KB payload
+            Random random = new Random(0);
+            StringBuilder random1kbString = new StringBuilder();
+            for (int i = 0; i < 1024; i++)
+                random1kbString.append((char)random.nextInt(127));
+
+            // Drop all messages from node1 to node2 so node2 will be empty
+            IMessageFilters.Filter drop1to2 = cluster.filters().verbs(MUTATION_REQ.id).from(1).to(2).drop();
+
+            final int totalRows = 10000; // total size: 10K x 1KB ~= 10MB
+            for (int i = 0; i < totalRows; ++i)
+            {
+                // write rows with timestamp 1 to have deterministic transfer size
+                cluster.coordinator(1).execute(withKeyspace(""INSERT INTO %s.cf (k, c1) VALUES (?, ?) USING TIMESTAMP 1;""),
+                                               ConsistencyLevel.ONE,
+                                               String.valueOf(i),
+                                               random1kbString.toString());

Review Comment:
   you might just `.toString()` once before `for` and reuse it here.



;08/Mar/23 20:22;githubbot;600","smiklosovic commented on code in PR #2197:
URL: https://github.com/apache/cassandra/pull/2197#discussion_r1129983674


##########
test/distributed/org/apache/cassandra/distributed/test/HintsDisabledTest.java:
##########
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.distributed.test;
+
+import java.io.IOException;
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Test;
+
+import com.google.monitoring.runtime.instrumentation.common.util.concurrent.Uninterruptibles;
+import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.distributed.Cluster;
+import org.apache.cassandra.distributed.api.ConsistencyLevel;
+import org.apache.cassandra.distributed.api.IMessageFilters;
+
+import static org.apache.cassandra.distributed.api.Feature.GOSSIP;
+import static org.apache.cassandra.distributed.api.Feature.NETWORK;
+import static org.apache.cassandra.net.Verb.MUTATION_REQ;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class HintsDisabledTest extends TestBaseImpl
+{
+    @Test
+    public void testHintedHandoffDisabled() throws IOException
+    {
+        try (Cluster cluster = init(Cluster.build(2)
+                                           .withDataDirCount(1)
+                                           .withConfig(config -> config.with(NETWORK, GOSSIP)
+                                                                       .set(""hinted_handoff_enabled"", false))
+                                           .start(), 2))
+        {
+            String createTableStatement = String.format(""CREATE TABLE %s.cf (k text PRIMARY KEY, c1 text) "" +
+                                                        ""WITH compaction = {'class': 'SizeTieredCompactionStrategy', 'enabled': 'false'} "", KEYSPACE);
+            cluster.schemaChange(createTableStatement);
+
+            // each row has 1KB payload
+            Random random = new Random(0);
+            StringBuilder random1kbString = new StringBuilder();
+            for (int i = 0; i < 1024; i++)
+                random1kbString.append((char)random.nextInt(127));
+
+            // Drop all messages from node1 to node2 so node2 will be empty
+            IMessageFilters.Filter drop1to2 = cluster.filters().verbs(MUTATION_REQ.id).from(1).to(2).drop();
+
+            final int totalRows = 10000; // total size: 10K x 1KB ~= 10MB
+            for (int i = 0; i < totalRows; ++i)
+            {
+                // write rows with timestamp 1 to have deterministic transfer size
+                cluster.coordinator(1).execute(withKeyspace(""INSERT INTO %s.cf (k, c1) VALUES (?, ?) USING TIMESTAMP 1;""),
+                                               ConsistencyLevel.ONE,
+                                               String.valueOf(i),
+                                               random1kbString.toString());
+            }
+
+            // Flush and compact all nodes to generate a single sstable
+            cluster.forEach(node -> {
+                node.flush(KEYSPACE);
+                node.forceCompact(KEYSPACE, ""cf"");
+            });
+
+            // wait 25s for hints to be dispatched

Review Comment:
   but you are not waiting 25s, you sleep uninterruptibly 30s.



;08/Mar/23 20:22;githubbot;600","smiklosovic commented on code in PR #2197:
URL: https://github.com/apache/cassandra/pull/2197#discussion_r1129982611


##########
src/java/org/apache/cassandra/service/StorageProxy.java:
##########
@@ -2744,6 +2744,7 @@ public static Future<Void> submitHint(Mutation mutation,
                                           EndpointsForToken targets,
                                           AbstractWriteResponseHandler<IMutation> responseHandler)
     {
+        targets = targets.filter(StorageProxy::shouldHint);

Review Comment:
   if `targets` are ""empty"" (whatever that means), we might return just here so we would not `submitHint` at all 



;08/Mar/23 20:23;githubbot;600","Claudenw commented on code in PR #2196:
URL: https://github.com/apache/cassandra/pull/2196#discussion_r1136843047


##########
src/java/org/apache/cassandra/service/StorageProxy.java:
##########
@@ -2641,6 +2641,7 @@ public static Future<Void> submitHint(Mutation mutation,
                                           EndpointsForToken targets,
                                           AbstractWriteResponseHandler<IMutation> responseHandler)
     {
+        targets = targets.filter(StorageProxy::shouldHint);

Review Comment:
   If `targets` is empty then perhaps an `ImmediateFuture` future should be returned rather than continuing with the construction of a regular future that does nothing.



;15/Mar/23 10:32;githubbot;600",,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,,,,,,,,,,,,0.0,paulo,,,,,,,,,,,,Correctness -> Consistency,,,,,,,,Normal,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 24 16:13:08 UTC 2023,,,,,,,All,,,,"0|z1gduo:",9223372036854775807,,,,aleksey,smiklosovic,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/7c2f97cd29486196b50c65a093e92b0fcd9789d9,,,,,,,,,changes,,,,,"06/Mar/23 23:29;paulo;Added dtest to reproduce issue.

Fix is to filter endpoints on with {{StorageProxy::shouldHint}} on {{{}StorageProxy.submitHint{}}}, not sure if this has any unintended consequences.

Can you take a look [~benedict] [~aleksey] ?
 * [4.1 PR|https://github.com/apache/cassandra/pull/2196]
 * [trunk PR|https://github.com/apache/cassandra/pull/2197]

 * 4.1 CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2327/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2327/pipeline]
 * trunk CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2333/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2333/pipeline];;;","07/Mar/23 15:40;aleksey;Sure, let me see.;;;","07/Mar/23 15:47;paulo;Thanks! 4.1 build seems to be fine, trunk skipped some tests.. rebased and resubmitted but still queued;;;","08/Mar/23 20:24;smiklosovic;I've added some nits to the PR. Thanks.;;;","09/Mar/23 13:27;aleksey;So, {{WriteCallbackInfo}} code is all dead weight and should be removed. Pushed a commit that does it here: https://github.com/iamaleksey/cassandra/commits/18304-dead-code-removal

{{allowHints}} argument to some of the upstream methods needs to make its way to {{AbstractWriteResponseHandler}}, or, alternatively, we need to make sure that mutation supplier is always null when when {{!allowHints}} and never null when {{allowHints}}.;;;","09/Mar/23 15:40;aleksey;As for the {{shouldHint()}} check, that could easily live in {{{}AbstractWriteResponseHandler#onFailure(){}}}, which would be a more direct translation of previous logic, without risk of unintended consequences of introducing filtering to the {{StorageProxy}} method.

 {code}
        if (hintOnFailure != null && StorageProxy.shouldHint(replicaPlan.lookup(from)))
        {
            StorageProxy.submitHint(hintOnFailure.get(), replicaPlan.lookup(from), null);
        }
{code};;;","19/Mar/23 17:02;paulo;Thanks for the review. Incorporated [~aleksey] {{WriteCallbackInfo}} cleanup and moved shouldHint check to AbstractWriteResponseHandler#onFailure().

Also improved dtest a bit by removing 25s sleep for hint to be dispatched, instead I check that {{StorageMetrics.totalHints.getCount()}} after write timeout (15ms) to ensure hints are not submitted.
 * [4.1 PR|https://github.com/apache/cassandra/pull/2196]
 * [trunk PR|https://github.com/apache/cassandra/pull/2197]

 * 4.1 CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2357/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2357/pipeline]
 * trunk CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2358/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2358/pipeline];;;","20/Mar/23 14:26;paulo;CI failed due to unused imports

Resubmitted after fixing
 * 4.1 CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2368/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2368/pipeline]
 * trunk CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2369/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2369/pipeline];;;","22/Mar/23 14:56;aleksey;+1. I can't say that the code around hint submission is currently correct, but the changes are strictly an improvement, and don't make anything worse.;;;","24/Mar/23 16:13;paulo;Thanks for the review. Finally got a 4.1 CI to not fail:

 * 4.1 CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2391/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2391/pipeline]
 * trunk CI: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2369/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2369/pipeline]

will commit shortly;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature documentation lost / moved out of focus,CASSANDRA-18303,13527287,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,rtib,rtib,rtib,06/Mar/23 14:08,15/Mar/23 10:43,13/Jul/23 08:41,09/Mar/23 20:02,4.1.1,5.0,,,,,Documentation/Website,,,0,,,,,"Documentation added with CASSANDRA-17344 wasn't moved with CASSANDRA-17976 and now the documentation on the website page ""Cassandra/Operating/Virtual tables"" shows an outdated version for [4.1|https://cassandra.apache.org/doc/4.1/cassandra/operating/virtualtables.html] and [latest|https://cassandra.apache.org/doc/latest/cassandra/operating/virtualtables.html].",,e.dimitrova,mck,rtib,,,,,,,"Claudenw commented on PR #2194:
URL: https://github.com/apache/cassandra/pull/2194#issuecomment-1469770067

   LGTM


;15/Mar/23 10:43;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,CASSANDRA-17976,,CASSANDRA-17344,,,,,,,,,0.0,rtib,,,,,,,,,,,,Documentation,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 10 13:20:08 UTC 2023,,,,,,,All,,,,"0|z1gdgg:",9223372036854775807,,,,e.dimitrova,mck,,Low,,4.1-rc1,,https://github.com/apache/cassandra/commit/af82b941a88f511605578d8eaa9b3d04634c34ac https://github.com/apache/cassandra/commit/414f4143e6128bcc129f731bbf98d84ac18da33d,,,,,,,,,[https://github.com/apache/cassandra/pull/2194],,,,,"06/Mar/23 14:21;rtib;Politely knocking at [~e.dimitrova];;;","06/Mar/23 15:36;e.dimitrova;Thank you [~rtib] , I noticed you attached a patch so I moved it to patch available.

I will try to take a look at it tonight.

CC [~mck] ;;;","06/Mar/23 20:28;rtib;It's the same patch as with CASSANDRA-17344, but applied to another file.;;;","09/Mar/23 15:39;mck;+1;;;","09/Mar/23 16:15;e.dimitrova;+1 from me too. I can commit it later today if [~mck] doesn't get to it before me;;;","09/Mar/23 19:53;mck;Committed as [414f4143e6128bcc129f731bbf98d84ac18da33d|https://github.com/apache/cassandra/commit/414f4143e6128bcc129f731bbf98d84ac18da33d]. But I've forgotten 4.1 :(;;;","09/Mar/23 20:02;mck;4.1 committed as [af82b941a88f511605578d8eaa9b3d04634c34ac|https://github.com/apache/cassandra/commit/af82b941a88f511605578d8eaa9b3d04634c34ac].;;;","09/Mar/23 20:05;mck;And apologies [~rtib] that your original patch got lost like this.;;;","10/Mar/23 06:21;rtib;No worries. Thank you!;;;","10/Mar/23 13:20;e.dimitrova;Thank you both and I also wanted to apologize I missed it before. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
die disk failure policy will not kill jvm as documented,CASSANDRA-18294,13526756,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,curlylrt,curlylrt,curlylrt,01/Mar/23 23:02,15/Mar/23 21:31,13/Jul/23 08:41,09/Mar/23 16:07,3.0.29,4.0.9,4.1.1,5.0,,,Local/Config,,,0,,,,,"After Cassandra has successfully starts up with disk_failure_policy die, when encounter a file system error, Cassandra server will only throw exception instead of shut down gossip and client transport and kill JVM. Document: [https://cassandra.apache.org/doc/latest/cassandra/configuration/cass_yaml_file.html#disk_failure_policy]

 

The reason for this is the default FS error handler is not handing policy die correctly. Instead of shutting down gossip and native transport, it throws an error.

 

The JVMStabilityInspectorTest is passing because the error handler is not set so no exception is thrown.",,brandon.williams,curlylrt,e.dimitrova,maxwellguo,smiklosovic,,,,,"smiklosovic commented on code in PR #2189:
URL: https://github.com/apache/cassandra/pull/2189#discussion_r1128051397


##########
test/unit/org/apache/cassandra/service/DefaultFSErrorHandlerTest.java:
##########
@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.cassandra.service;
+
+import java.io.IOException;
+
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import org.apache.cassandra.SchemaLoader;
+import org.apache.cassandra.config.Config;
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.exceptions.ConfigurationException;
+import org.apache.cassandra.gms.Gossiper;
+import org.apache.cassandra.io.FSErrorHandler;
+import org.apache.cassandra.io.FSReadError;
+import org.apache.cassandra.io.sstable.CorruptSSTableException;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+public class DefaultFSErrorHandlerTest

Review Comment:
   @Runtian what is hard about starting it? 
   
   You know what just leave it as it is ... this is enough.



;07/Mar/23 15:45;githubbot;600","smiklosovic closed pull request #2189: CASSANDRA-18294 3.0 Fix disk_failure_policy die to stop gossip, native transport and JVM
URL: https://github.com/apache/cassandra/pull/2189


;15/Mar/23 21:31;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,CASSANDRA-15191,,,,,,,,,,,0.0,curlylrt,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 10 19:30:13 UTC 2023,,,,,,,All,,,,"0|z1ga6o:",9223372036854775807,,,,brandon.williams,maxwellguo,smiklosovic,Low,,3.0.22,,https://github.com/apache/cassandra/commit/be574fc34ba9834929f1618ab63dd74446cd2683,,,,,,,,,run CI,,,,,"02/Mar/23 03:29;maxwellguo;can you show more details on the error ? like the stack message or some thing else.;;;","02/Mar/23 03:48;curlylrt;The error is
{code:java}
j.lang.IllegalStateException: null at o.a.c.s.DefaultFSErrorHandler.handleFSError(DefaultFSErrorHandler.java:88) at o.a.c.io.util.FileUtils.handleFSError(FileUtils.java:499) at o.a.c.u.JVMStabilityInspector.inspectDiskError(JVMStabilityInspector.java:73) at o.a.c.u.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:111) at o.a.c.u.JVMStabilityInspector.inspectThrowable(JVMStabilityInspector.java:60) at o.a.c.d.ColumnFamilyStore$Flush.run(ColumnFamilyStore.java:1104) at j.u.c.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at j.u.c.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at o.a.c.c.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83) at i.n.u.c.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748)  {code}
We are running Cassandra with policy die but the Cassandra java process is not shutting down after this error.;;;","02/Mar/23 03:50;maxwellguo;What is the version of your cassandra ?;;;","02/Mar/23 03:53;curlylrt;I think this is the commit which breaks it: [https://github.com/apache/cassandra/commit/db034609554a3185c0808cc67e9f0c148cc912c4]

Previously, there is no error handler call in JVMStabilityInspector::inspectThrowable.

The above commit introduces the error handler before shutting down JVM. With ""die"" disk failure policy, the error handler will throw exception so the jvm shutdown code won't be reached.;;;","02/Mar/23 03:56;curlylrt;Cassandra version is 3.0.27.;;;","02/Mar/23 04:01;curlylrt;Creating a pull request here: [https://github.com/apache/cassandra/pull/2189]

 

I think this is affecting all the fix versions listed here: https://issues.apache.org/jira/browse/CASSANDRA-15191;;;","02/Mar/23 05:18;maxwellguo;I just run your ut, and it seems the bug exist.
I think you should add some more jvm-dtest as CASSANDRA-15191 's JVMStabilityInspectorCorruptSSTableExceptionTest .
For your ut can just cover gossip is stopped, also I left some comments on this pr.
[~smiklosovic] [~brandon.williams] can you take a look at this ?
;;;","02/Mar/23 09:11;smiklosovic;Thanks [~curlylrt] for reporting this. I am trying to figure out why this has slipped. For example, we do not have ""die"" policy in handleCorruptSSTable method in DefaultFSErrorHandler either. If there is not some not-so-obvious reason behind that, I think we should add it as well. The documentation in cassandra.yaml says that jvm will be killed with ""die"" policy on ""single-sstable errors"" which seems to be the case when CorruptSSTableException is thrown.;;;","02/Mar/23 17:44;smiklosovic;[~curlylrt] could you please prepare patches for 3.11, 4.0, 4.1 and trunk as well?;;;","03/Mar/23 00:36;curlylrt;[~smiklosovic] sure, once people think the pull request looks good. I think I can prepare pull request for 3.11, 4.0, 4.1 and trunk. Thanks!;;;","06/Mar/23 15:30;brandon.williams;The PR looks fine to me, but

bq. I am trying to figure out why this has slipped.

Did you figure this out, [~smiklosovic]?;;;","07/Mar/23 15:37;smiklosovic;[~brandon.williams] as [~maxwellguo] mentioned here (1) it seems we are OK already?

added ""die"" is there so we would not throw IllegalStateException as it would reach ""default"" in these switches which this ticket solves.

(1) https://github.com/apache/cassandra/pull/2189/files#r1122779198;;;","07/Mar/23 15:42;brandon.williams;I see, and think it makes sense to be explicit with 'die' too.  I think we're ready for PRs for the other branches.;;;","07/Mar/23 19:33;curlylrt;3.0 PR: https://github.com/apache/cassandra/pull/2189

3.11 PR: [https://github.com/apache/cassandra/pull/2200]

4.0 PR: [https://github.com/apache/cassandra/pull/2201]

4.1 PR: https://github.com/apache/cassandra/pull/2202

trunk PR: https://github.com/apache/cassandra/pull/2203;;;","07/Mar/23 20:24;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18294-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/894/workflows/2afa7943-477d-426c-9f0f-48a861845e0d]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18294-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/896/workflows/51b2f936-6b00-4d89-a284-b21b250e2ef1]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18294-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/892/workflows/e8e34bbb-e2e0-4074-9eb4-6a24e7c43b79], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/892/workflows/73210bd7-1a92-43ca-bf83-548716ecc90a]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18294-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/895/workflows/89afae54-8308-41f0-b45f-5464d61486fe], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/895/workflows/801d5316-5b14-4522-8b91-b6189493827b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18294-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/893/workflows/f04714f6-746f-4065-a9e3-4804c1722f21], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/893/workflows/0d8342e2-390b-40d0-8274-2e04846659e7]|
;;;","08/Mar/23 01:44;maxwellguo;I am + 1 on this patch , but there are some very small problems about code format.
such as : some constructor should start a new line with '{', I have already pointed out , [~curlylrt]can you help to take a look at them ? thanks.;;;","08/Mar/23 02:07;curlylrt;Updated the format.;;;","08/Mar/23 02:11;maxwellguo;there is one left ;;;","08/Mar/23 02:47;curlylrt;which one?;;;","08/Mar/23 03:02;maxwellguo;""private FSError throwFSError(){ "" [~curlylrt];;;","08/Mar/23 03:22;curlylrt;updated;;;","08/Mar/23 03:23;maxwellguo;[~smiklosovic]can you help to take a look agagin ?;;;","08/Mar/23 06:41;smiklosovic;I believe that can be addressed upon merge.;;;","09/Mar/23 10:18;smiklosovic;builds in Circle looks fine, ""test_sstableverify"" which fails on 4.0 and 4.1 is fixed already ;;;","09/Mar/23 12:01;brandon.williams;I am +1, nits can be handled on commit.;;;","09/Mar/23 12:25;smiklosovic;+1 too, would you mind to merge, [~brandon.williams]? ;;;","09/Mar/23 12:29;brandon.williams;I can get to it a bit later.;;;","09/Mar/23 16:07;brandon.williams;Committed, thanks everyone!;;;","10/Mar/23 16:51;e.dimitrova;[~curlylrt],  [~brandon.williams] , [~smiklosovic] I think this patch broke one simulator test. I can see it also failing in the published CI run here. [https://app.circleci.com/pipelines/github/driftx/cassandra/893/workflows/f04714f6-746f-4065-a9e3-4804c1722f21/jobs/12882/tests]

The previous trunk commit does not have it broken in its final CI run and I do see the test failing consistently now in my CI runs. 

Please check.;;;","10/Mar/23 17:51;smiklosovic;Nothing we can not fix! I ll take a look next week. Thanks.;;;","10/Mar/23 19:06;brandon.williams;Worse news, it's just flaky now.;;;","10/Mar/23 19:11;e.dimitrova;Thank you guys, I will open a ticket;;;","10/Mar/23 19:15;smiklosovic;It says that it can not recursively remove a directory because it was not empty. This is happening after Cluster (as in dtest jvm api) is being closed.

I wonder how that is related to what we did here. There are two ways of removing stuff, ""Java way"" (whatever that means) and calling ""rm"" command in *nix by means of CASSANDRA-17427 which adds this CassandraRelevantProperty:

{code}
    /** When enabled, recursive directory deletion will be executed using a unix command `rm -rf` instead of traversing
     * and removing individual files. This is now used only tests, but eventually we will make it true by default.*/
    USE_NIX_RECURSIVE_DELETE(""cassandra.use_nix_recursive_delete""),
{code}

When I set this to true before that cleanup logic in simulator kicks in, it will just remove it without any error.

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1980/workflows/9cbd06eb-4333-485c-ad38-5986cd4870c6
https://github.com/instaclustr/cassandra/commit/d7c44651d63a75ca017414b172538bd9246e4b98

This property is set only in IDEA test run config but you see that there is the intention to set it by default to true in tests without setting any flag.

https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/util/PathUtils.java#L391;;;","10/Mar/23 19:27;e.dimitrova;{quote}I wonder how that is related to what we did here.
{quote}
I haven't checked in details your patch or the test failing, I just noticed it started failing in all runs I saw after this ticket. Maybe it just got more flaky from all latest changes? We can and I guess we should spin the multiplexer jobs for the win.

I opened a ticket CASSANDRA-18320 for this to be checked properly. Thank you and I hope you have a great weekend :) ;;;","10/Mar/23 19:30;e.dimitrova;[~smiklosovic] should we move your findings and runs to the other ticket?

[~brandon.williams] said it is flaky so I guess we need also to spin it in a loop

Also, thank you for taking the time to look into it!;;;",,,,,,,,,,
Gossip stateMapOrdering does not have correct ordering when both EndpointState are in the bootstrapping set,CASSANDRA-18292,13526578,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,28/Feb/23 21:03,02/Mar/23 17:47,13/Jul/23 08:41,01/Mar/23 21:42,5.0,,,,,,Cluster/Gossip,,,0,,,,,"There is a bug when stateMapOrdering sees two or more EndpointState that are both in the bootstrapping set, this may cause the ordering to change causing Collections.sort to fail
",,dcapwell,marcuse,,,,,,,,"smiklosovic closed pull request #2183: CASSANDRA-18292: Gossip stateMapOrdering does not have correct ordering when both EndpointState are in the bootstrapping set
URL: https://github.com/apache/cassandra/pull/2183


;02/Mar/23 17:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,CASSANDRA-18047,,,,,CASSANDRA-17908,CASSANDRA-17676,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Unrecoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Shadow Traffic,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 01 19:49:33 UTC 2023,,,,,,,All,,,,"0|z1g934:",9223372036854775807,,,,marcuse,,,Critical,,5.0,,https://github.com/apache/cassandra/commit/4e17922b61d6e90151c5e165ddbf0731232e566a,,,,,,,,,added new properties test,,,,,"28/Feb/23 21:06;dcapwell;made 4.x with critical as I think that means 4.2...;;;","28/Feb/23 22:46;dcapwell;[~marcuse] mind reviewing?;;;","01/Mar/23 07:33;marcuse;+1;;;","01/Mar/23 19:44;dcapwell;Was bitten by CASSANDRA-18047 and saw it was caused by us stopping instances without waiting for them to complete... I patched the test as it was a simple fix...;;;","01/Mar/23 19:49;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18292-trunk-CB500D5D-7102-4DEA-BD92-687E49EFE23E]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18292-trunk-CB500D5D-7102-4DEA-BD92-687E49EFE23E]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2308/]|
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Too early schema version change in system local table,CASSANDRA-18291,13526516,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,28/Feb/23 12:05,09/Mar/23 07:22,13/Jul/23 08:41,09/Mar/23 07:22,4.1.1,5.0,,,,,Legacy/Core,,,0,,,,,"Schema version in the system local table is updated after the schema changes is saved but before it is applied. 

Found by [~maxtomassi]
",,abonacin,edimitrova,jlewandowski,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,Correctness -> Transient Incorrect Response,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Mar 09 07:18:02 UTC 2023,,,,,,,All,,,,"0|z1g8pc:",9223372036854775807,,,,smiklosovic,,,Low,,4.1.0,,https://github.com/apache/cassandra/commit/5f7175d59da8b8d20e1081619eadad8b60867e86,,,,,,,,,regression tests,,,,,"06/Mar/23 12:12;jlewandowski;https://github.com/apache/cassandra/pull/2192;;;","08/Mar/23 11:44;smiklosovic;+1. Could you provide the build as well, please?;;;","08/Mar/23 13:12;jlewandowski;sure, thanks [~smiklosovic];;;","08/Mar/23 16:39;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/597/workflows/4b680424-39b6-4423-abc5-db0bb3f34b9b
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/597/workflows/6c19e1cf-f56c-4b9c-adfa-033b64251285
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/605/workflows/2745566c-9141-41a2-a49a-7a9558e4cb83;;;","09/Mar/23 07:16;smiklosovic;that sstableverify test seems to failing, is that related? do we have a ticket for it? ;;;","09/Mar/23 07:18;jlewandowski;[~smiklosovic] I've already fixed it in CASSANDRA-18308;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ssl-factory demo in examples is broken,CASSANDRA-18270,13525224,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maulin.vasavada,smiklosovic,smiklosovic,17/Feb/23 16:10,08/May/23 20:32,13/Jul/23 08:41,08/May/23 20:32,5.0,,,,,,Local/Other,,,0,,,,,"this fails, it is not happening in cassandra-4.1

{code}
cd examples/ssl-factory
ant build && ant test
{code}

My suspicion is that SSL factory related stuff was recently changed, in trunk, by (1) and this broke related ssl test.

[~maulin.vasavada] do you have some time to look into that as you are the author of the tests? I think I fixed the most of it here (2) but one test is still failing and I can not wrap my head around that one. It gives:

{code}
    [junit] Testcase: buildKeyManagerFactoryHappyPathForUnencryptedKey(org.apache.cassandra.security.KubernetesSecretsPEMSslContextFactoryTest):        Caused an ERROR
    [junit] Failed to build key manager store for secure connections
    [junit] javax.net.ssl.SSLException: Failed to build key manager store for secure connections
    [junit]     at org.apache.cassandra.security.PEMBasedSslContextFactory.buildKeyManagerFactory(PEMBasedSslContextFactory.java:267)
    [junit]     at org.apache.cassandra.security.PEMBasedSslContextFactory.buildKeyManagerFactory(PEMBasedSslContextFactory.java:229)
    [junit]     at org.apache.cassandra.security.KubernetesSecretsPEMSslContextFactory.buildKeyManagerFactory(KubernetesSecretsPEMSslContextFactory.java:169)
    [junit]     at org.apache.cassandra.security.KubernetesSecretsPEMSslContextFactoryTest.buildKeyManagerFactoryHappyPathForUnencryptedKey(KubernetesSecretsPEMSslContextFactoryTest.java:244)
    [junit] Caused by: java.io.IOException: overrun, bytes = 1195
    [junit]     at javax.crypto.EncryptedPrivateKeyInfo.<init>(EncryptedPrivateKeyInfo.java:95)
    [junit]     at org.apache.cassandra.security.PEMReader.extractPrivateKey(PEMReader.java:108)
    [junit]     at org.apache.cassandra.security.PEMBasedSslContextFactory.buildKeyStore(PEMBasedSslContextFactory.java:319)
    [junit]     at org.apache.cassandra.security.PEMBasedSslContextFactory.buildKeyManagerFactory(PEMBasedSslContextFactory.java:251)
{code}

(1) https://github.com/apache/cassandra/commit/ed3901823a5fe9f8838d8b592a1b7703b12e810b
(2) https://github.com/instaclustr/cassandra/tree/CASSANDRA-18264-trunk-followup

cc [~Jyothsnakonisa]",,maedhroz,maulin.vasavada,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18264,,,,,0.0,maulin.vasavada,,,,,,,,,,,,Code,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon May 08 20:32:29 UTC 2023,,,,,,,All,,,,"0|z1g0r4:",9223372036854775807,,,,,,,Low,,,,,,,,,,,,,,,,,,"17/Feb/23 18:34;maulin.vasavada;[~smiklosovic] Sure, I should be able to take a look at this in the next week. ;;;","23/Feb/23 21:20;maulin.vasavada;`Update` I built it locally but so far no luck in running `ant build` successfully for the examples/ssl-factory on the trunk :( The 4.1 branch works. Still looking into it.;;;","24/Feb/23 06:57;maulin.vasavada;On the trunk I see that the CASSANDRA-17513 changes modified the main source but doesn't seem to have updated the examples/ssl-factory so I can't compile the examples/ssl-factory at all. However, if someone can verify the same it would be great. cc: [~Jyothsnakonisa] [~djoshi] Do you have some bandwidth to take a look at it?

I finally recollected how to create module in the intelliJ and now can make the test work on the Cassandra-4.1 and can look into the trunk build failure for the examples/ssl-factory also if needed. Modules have always given me hard time in IntelliJ :( (may be because I don't use them much manually in other areas - maven/gradle modules setup things automatically). May be we can add generate-idea-files for the examples/ssl-factory module also and run it to make it easier for people.;;;","24/Feb/23 08:16;smiklosovic;I was just executing it via ant. I am aware of the fact that it is not runnable from idea directly out of the box.

The branch where I at least made it compilable is here (1), but that test still fails though.

 

(1) https://github.com/instaclustr/cassandra/tree/CASSANDRA-18264-trunk-followup;;;","24/Feb/23 18:31;maulin.vasavada;From the 'ant build' in the examples/ssl-factory also I get the same build errors.

 
{noformat}
cassandra/examples/ssl-factory/build.xml


init:
    [mkdir] Created dir: /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/build/test/classes


build:
    [javac] Compiling 2 source files to /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/build/classes
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:152: error: cannot find symbol
    [javac]         keystore = getString(EncryptionOptions.ConfigKey.KEYSTORE.toString(), KEYSTORE_PATH_VALUE);
    [javac]         ^
    [javac]   symbol:   variable keystore
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:153: error: cannot find symbol
    [javac]         keystore_password = getValueFromEnv(KEYSTORE_PASSWORD_ENV_VAR_NAME,
    [javac]         ^
    [javac]   symbol:   variable keystore_password
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:155: error: cannot find symbol
    [javac]         truststore = getString(EncryptionOptions.ConfigKey.TRUSTSTORE.toString(), TRUSTSTORE_PATH_VALUE);
    [javac]         ^
    [javac]   symbol:   variable truststore
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:156: error: cannot find symbol
    [javac]         truststore_password = getValueFromEnv(TRUSTSTORE_PASSWORD_ENV_VAR_NAME,
    [javac]         ^
    [javac]   symbol:   variable truststore_password
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:169: error: cannot find symbol
    [javac]         keystore = getString(EncryptionOptions.ConfigKey.KEYSTORE.toString(), KEYSTORE_PATH_VALUE);
    [javac]         ^
    [javac]   symbol:   variable keystore
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:170: error: cannot find symbol
    [javac]         keystore_password = getValueFromEnv(getString(ConfigKeys.KEYSTORE_PASSWORD_ENV_VAR,
    [javac]         ^
    [javac]   symbol:   variable keystore_password
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:172: error: cannot find symbol
    [javac]         truststore = getString(EncryptionOptions.ConfigKey.TRUSTSTORE.toString(), TRUSTSTORE_PATH_VALUE);
    [javac]         ^
    [javac]   symbol:   variable truststore
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsSslContextFactory.java:173: error: cannot find symbol
    [javac]         truststore_password = getValueFromEnv(getString(ConfigKeys.TRUSTSTORE_PASSWORD_ENV_VAR,
    [javac]         ^
    [javac]   symbol:   variable truststore_password
    [javac]   location: class KubernetesSecretsSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:168: error: cannot find symbol
    [javac]         checkedExpiry = pemBasedSslContextFactory.checkedExpiry;
    [javac]         ^
    [javac]   symbol:   variable checkedExpiry
    [javac]   location: class KubernetesSecretsPEMSslContextFactory
    [javac] /Users/mvasavada/gitrepobase/cassandra/examples/ssl-factory/src/org/apache/cassandra/security/KubernetesSecretsPEMSslContextFactory.java:168: error: cannot find symbol
    [javac]         checkedExpiry = pemBasedSslContextFactory.checkedExpiry;
    [javac]                                                  ^
    [javac]   symbol:   variable checkedExpiry
    [javac]   location: variable pemBasedSslContextFactory of type PEMBasedSslContextFactory
    [javac] 10 errors{noformat};;;","24/Feb/23 18:44;maulin.vasavada;let me try with your branch - [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18264-trunk-followup] ;;;","24/Feb/23 19:31;maulin.vasavada;Okay, I get to the error now after using your branch. Let me check.;;;","24/Feb/23 23:56;maulin.vasavada;Okay, I think I found the issue. In 4.1 we had [this|https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/security/PEMBasedSslContextFactory.java#L108-L111] code which used to default the keyPassword to keystore_password in case keyPassword was null/empty AND that helped make sure that in the test case, for the unencrypted PEM key the password is null. Hence it would go in the else part of [this if statement |https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/security/PEMReader.java#L103]and work correctly. Now in the latest code that equivalent logic is not present for defaulting keyPassword to keystore_password in case of empty as per [this|https://github.com/instaclustr/cassandra/blob/CASSANDRA-18264-trunk-followup/src/java/org/apache/cassandra/security/PEMBasedSslContextFactory.java#L108] code.

One solution would be to check for isEmpty() in the PEMReader instead of just non null and that should fix this.

In JKS based keystores the passwords could be empty strings vs null. However, In case of PEM files I feel it should be safe to consider empty string as null password. Does that make sense, then I can change the PEMReader accordingly.;;;","25/Feb/23 00:01;brandon.williams;CASSANDRA-18124 may be relevant here.;;;","25/Feb/23 01:17;maulin.vasavada;Based on my research so far the PEM key generation - it fails to output public key from the encrypted PEM if the password is less than 4 characters, hence I feel it should be safe to make the change to check for !isEmpty() instead of non null in the PEMReader to determine if the PEM is encrypted or not.

So what should be the next step, [~smiklosovic] ? I made the change locally and all the tests are passing now, do you want to just make it on your branch at [this line|https://github.com/instaclustr/cassandra/blob/CASSANDRA-18264-trunk-followup/src/java/org/apache/cassandra/security/PEMReader.java#L103] to check for the below condition OR do you want me to raise a PR?
{code:java}
if (!StringUtils.isEmpty(keyPassword)) {code}
 

And just for the reference, when I try to output public key from an encrypted PEM with password size of 2 characters I get the following error. It is interesting that it doesn't prevent me to generate the encrypted PEM with password of less than 4 characters but fails later.
{noformat}
command: openssl rsa -in encrypted-keypair2.pem -pubout -out public-key.pem

libressl/libressl-3.3/crypto/ui/ui_lib.c:782:You must type in 4 to 1023 characters{noformat};;;","25/Feb/23 18:53;smiklosovic;[~maulin.vasavada] I think we should create a new ticket. This one is just about fixing the demo. 

What about doing that check like ""if it is null or empty""? 

EDIT:

If you are using org.apache.commons.lang3.StringUtils where that method does this:
{code:java}
public static boolean isEmpty(final CharSequence cs) {
    return cs == null || cs.length() == 0;
} {code}
That should be fine.

We can do this under CASSANDRA-18124 I guess?;;;","27/Feb/23 23:20;maulin.vasavada;Sure [~smiklosovic] I think we can use the 18124 ticket. So my assumption is that once 18124 gets merged (with the suggested isEmpty check) to the trunk we can close this ticket as well, correct?;;;","28/Feb/23 06:04;smiklosovic;Yes, but we need to make it compilable and merge it as well. ;;;","08/May/23 20:32;smiklosovic;closing as this was done in 18124 IIRC;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keepbrief is not called,CASSANDRA-18267,13525003,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,mck,mck,16/Feb/23 10:24,13/Apr/23 14:37,13/Jul/23 08:41,13/Apr/23 14:37,4.1.2,5.0,,,,,Build,,,0,,,,,"Discovered in CASSANDRA-18179 

The keepbrief macro is never called in build.xml

And attempts to use it result in
{noformat}
Buildfile: /Users/mick/src/apache/cassandra/build.xml
    [javac] Compiling 5 source files to /Users/mick/src/apache/cassandra/build/test/classes
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:21: error: package org.apache.cassandra.io.util does not exist
    [javac] import org.apache.cassandra.io.util.File;
    [javac]                                    ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:23: error: package org.apache.commons.io does not exist
    [javac] import org.apache.commons.io.FilenameUtils;
    [javac]                             ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:26: error: package org.junit does not exist
    [javac] import org.junit.Test;
    [javac]                 ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:30: error: package org.reflections does not exist
    [javac] import org.reflections.Reflections;
    [javac]                       ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:31: error: package org.reflections.scanners does not exist
    [javac] import org.reflections.scanners.Scanners;
    [javac]                                ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:32: error: package org.reflections.util does not exist
    [javac] import org.reflections.util.ConfigurationBuilder;
    [javac]                            ^
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:38: error: cannot find symbol
    [javac]     private static final Reflections reflections = new Reflections(new ConfigurationBuilder()
    [javac]                          ^
    [javac]   symbol:   class Reflections
    [javac]   location: class TestNameCheckTask
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:38: error: cannot find symbol
    [javac]         echo.setFile(new File("".classpath"").toJavaIOFile());
    [javac]                          ^
    [javac]   symbol:   class File
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:52: error: cannot find symbol
    [javac]             String srcJar = FilenameUtils.getBaseName(jars[i]) + ""-sources.jar"";
    [javac]                             ^
    [javac]   symbol:   variable FilenameUtils
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:53: error: cannot find symbol
    [javac]             String srcDir = FilenameUtils.concat(project.getProperty(""build.test.dir""), ""sources"");
    [javac]                             ^
    [javac]   symbol:   variable FilenameUtils
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:54: error: cannot find symbol
    [javac]             File srcFile = new File(FilenameUtils.concat(srcDir, srcJar));
    [javac]             ^
    [javac]   symbol:   class File
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:54: error: cannot find symbol
    [javac]             File srcFile = new File(FilenameUtils.concat(srcDir, srcJar));
    [javac]                                ^
    [javac]   symbol:   class File
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/EchoEclipseProjectLibs.java:54: error: cannot find symbol
    [javac]             File srcFile = new File(FilenameUtils.concat(srcDir, srcJar));
    [javac]                                     ^
    [javac]   symbol:   variable FilenameUtils
    [javac]   location: class EchoEclipseProjectLibs
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:38: error: cannot find symbol
    [javac]     private static final Reflections reflections = new Reflections(new ConfigurationBuilder()
    [javac]                                                        ^
    [javac]   symbol:   class Reflections
    [javac]   location: class TestNameCheckTask
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:40: error: cannot find symbol
    [javac]                                                                    .setScanners(Scanners.MethodsAnnotated, Scanners.SubTypes)
    [javac]                                                                                 ^
    [javac]   symbol:   variable Scanners
    [javac]   location: class TestNameCheckTask
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:40: error: cannot find symbol
    [javac]                                                                    .setScanners(Scanners.MethodsAnnotated, Scanners.SubTypes)
    [javac]                                                                                                            ^
    [javac]   symbol:   variable Scanners
    [javac]   location: class TestNameCheckTask
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:38: error: cannot find symbol
    [javac]     private static final Reflections reflections = new Reflections(new ConfigurationBuilder()
    [javac]                                                                        ^
    [javac]   symbol:   class ConfigurationBuilder
    [javac]   location: class TestNameCheckTask
    [javac] /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java:51: error: cannot find symbol
    [javac]         Set<Method> methodsAnnotatedWith = reflections.getMethodsAnnotatedWith(Test.class);
    [javac]                                                                                ^
    [javac]   symbol:   class Test
    [javac]   location: class TestNameCheckTask
    [javac] Note: /Users/mick/src/apache/cassandra/test/anttasks/org/apache/cassandra/anttasks/TestNameCheckTask.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 18 errors

BUILD FAILED
{noformat}",,adelapena,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-17234,,,,,,CASSANDRA-18445,,,,,0.0,e.dimitrova,,,,,,,,,,,,Code,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Apr 13 14:35:50 UTC 2023,,,,,,,All,,,,"0|z1fze0:",9223372036854775807,,,,adelapena,mck,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/bb36090fa0858456fb1ba80adf71fb3dc24a1aac   https://github.com/apache/cassandra/commit/91f6a9aca8d3c22a03e68aa901a0b154d960ab07,,,,,,,,,"Tested locally in both branches:
||Ant command||No args||-Dcassandra.keepBriefBrief=true||-Dcassandra.keepBriefBrief=false||
|ant testclasslist|brief output|brief output|long output|
|ant testsome -Dtest.name=...|long output|brief output|long output|
|ant test|brief output|brief output|long output|

 
||Patch||CI||
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/83eec9cf272a9e77635bca01e84142e913de8df3]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2332/workflows/ee3072a7-6fe3-4f53-b13a-41945ab760ed]|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/39c27dd1282b7776cd95722b432b7a16ad628b2a]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2333/workflows/8dc524ff-5c0e-4f31-89de-dcc6624c903e]|",,,,,"12/Apr/23 01:46;e.dimitrova;test/anttasks are compiled with _build-test target.

keepBrief could be simplified not to use a java custom ant task at all. Fix [here|https://github.com/ekaterinadimitrova2/cassandra/commit/10fe617ed01ef4d3d2938571d5c696715ab2ed90]

This is trunk but 4.1 will have the same patch.

Tested locally: 

1) Created tiny testlist.txt (just a few tests) with the following content:

{code:java}
org/apache/cassandra/auth/CassandraAuthorizerTruncatingTest.java
org/apache/cassandra/concurrent/SEPExecutorTest.java
org/apache/cassandra/cql3/CQL3TypeLiteralTest.java
org/apache/cassandra/cql3/QueryEventsTest.java
{code}
 

2) ant testclasslist -Dno-checkstyle=true - prints brief console output 

3) ant testclasslist -Dno-checkstyle=true -Dcassandra.keepBriefBrief=true - prints brief console output

4) ant testclasslist -Dno-checkstyle=true -Dcassandra.keepBriefBrief=false - prints noisy console output


[~adelapena] do you mind to review, please? 

Once the patch is confirmed I will run it through CI with both 4.1 and trunk. 

 ;;;","12/Apr/23 13:46;adelapena;I have tested the following cases:
||Ant command||No args||-Dcassandra.keepBriefBrief=true||-Dcassandra.keepBriefBrief=false||
|ant testclasslist|brief output|brief output|long output|
|ant testsome -Dtest.name=...|long output|brief output|long output|
|ant test|brief output|brief output|long output|

I think that's the expected behaviour. 

It always works as expected if the {{cassandra.keepBriefBrief}} property is specified. However, if the property is not specified there can be slightly surprising cases:
 * A {{testlist.txt}} with a single class will produce a brief output, clashing a bit with the comment on {{{}build.xml{}}}.
 * A call to {{ant testsome -Dtest.name=""*est""}} will produce a long output, whereas {{ant testsome -Dtest.name=""*Test""}} will produce a brief output.

I think it would be ideal if the default behaviour depended on the number of tests, rather than on the use of the ""*Test"" expression. But that's an improvement that can be done on a separate ticket. IMO the current patch restores the pre-CASSANDRA-17234 behaviour, +1.
 ;;;","12/Apr/23 13:58;adelapena;By the way, I'm looking at [this branch|https://github.com/ekaterinadimitrova2/cassandra/tree/18267-trunk].;;;","12/Apr/23 15:12;e.dimitrova;Thanks [~adelapena] . I reran all cases from the table with 4.0 where we still have the old script and one more time confirmed they look the same with the current patch.

 
The test I used for testing with ant testsome is org.apache.cassandra.audit.AuditLoggerAuthTest (known to produce logs as

AuditLogFilterTest doesn't produce output, for example)
{quote} * A {{testlist.txt}} with a single class will produce a brief output, clashing a bit with the comment on {{{}build.xml{}}}.{quote}
Same on 4.0, I suspect testlist.txt was just not considered to be used with one class

 
{quote} * A call to {{ant testsome -Dtest.name=""*est""}} will produce a brief output, whereas {{ant testsome -Dtest.name=""*Test""}} will produce a long output.{quote}
Yes, same behavior in 4.0. 
{quote}I think it would be ideal if the default behaviour depended on the number of tests, rather than on the use of the ""*Test"" expression. But that's an improvement that can be done on a separate ticket.
{quote}
Agreed, I will be happy to open a follow up ticket. 
{quote} IMO the current patch restores the pre-CASSANDRA-17234 behaviour, +1.
{quote}
Thank you. [~mck], do you agree with the analysis and follow up actions agreed here? Anything else we might be missing? ;;;","12/Apr/23 16:38;mck;bq. do you agree with the analysis and follow up actions agreed here? Anything else we might be missing? 

yes. +1;;;","12/Apr/23 20:56;e.dimitrova; 
||Patch||CI||
|[4.1|https://github.com/ekaterinadimitrova2/cassandra/commit/83eec9cf272a9e77635bca01e84142e913de8df3]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2332/workflows/ee3072a7-6fe3-4f53-b13a-41945ab760ed]|
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/39c27dd1282b7776cd95722b432b7a16ad628b2a]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2333/workflows/8dc524ff-5c0e-4f31-89de-dcc6624c903e]|

Reran everything locally also with 4.1 to ensure I did not miss anything.

Pushed CI only JDK11 as it is for sanity check.

Tested also quickly the task works with Java 17 as expected.

CI shows only 1 failure and the console output for unit and in-jvm tests looks as expected.

I opened a ticket for the 4.1 flaky test, seen also in butler - 

CASSANDRA-18047 - Fix flaky paxosRepairHistoryIsntUpdatedInForcedRepair;;;","12/Apr/23 21:04;e.dimitrova;Also I opened CASSANDRA-18446 - Improve default output behavior when tests are run with ant;;;","12/Apr/23 21:10;e.dimitrova;I can commit it tomorrow morning if no one has anything else to add;;;","13/Apr/23 09:46;adelapena;I have also manually tested the patch for 4.1. Nothing else to add, +1;;;","13/Apr/23 14:35;e.dimitrova;{quote}I have also manually tested the patch for 4.1
{quote}
Thank you so much!

Committed to https://github.com/apache/cassandra

   [5ec792a184..bb36090fa0|https://github.com/apache/cassandra/commit/bb36090fa0858456fb1ba80adf71fb3dc24a1aac]  cassandra-4.1 -> cassandra-4.1

   [0ac60af949..91f6a9aca8|https://github.com/apache/cassandra/commit/91f6a9aca8d3c22a03e68aa901a0b154d960ab07]  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CustomClassLoader does not load jars rendering triggers from JARs broken,CASSANDRA-18264,13524915,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,15/Feb/23 21:22,17/Feb/23 16:14,13/Jul/23 08:41,17/Feb/23 15:55,4.1.1,5.0,,,,,Legacy/Core,,,0,,,,,"A user had to downgrade to 4.0.7 from 4.1.0 because they hit a problem with CustomClassLoader for triggers. 

User says that in Apache Cassandra 4.1.0 the trigger mechanism does not work, not their trigger, but the possibility of loading any trigger in Cassandra.

In the Cassandra 4.1.0 version of CustomClassLoader (https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/triggers/CustomClassLoader.java) the code is changed in such a way that when copying the JAR Cassandra uses java.nio.file.Files, while earlier versions (cassandra 4.0.X or 3.X) used Guava com.google.common.io.Files to copy the JAR file.

The difference between one and the other is that Guava by default overwrites the file if it already exists and user has permissions to do so, and in Java by default it does not overwrite.

Copying is done here (1) from inputJar to out. However, the problem is that we are getting temporary file from here (2) and the implementation loops unless it succeeds to create an empty file. (3) - But that fails to copy the file to out because copying does not work when the target file already exists.

(1) https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/triggers/CustomClassLoader.java#L86

(2) https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/triggers/CustomClassLoader.java#L81

(3) https://github.com/apache/cassandra/blob/cassandra-4.1/src/java/org/apache/cassandra/io/util/FileUtils.java#L152",,smiklosovic,,,,,,,,,"smiklosovic opened a new pull request, #2159:
URL: https://github.com/apache/cassandra/pull/2159

   patch by Stefan Miklosovic; reviewed by TBD for CASSANDRA-18264
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;15/Feb/23 21:35;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108298486


##########
src/java/org/apache/cassandra/triggers/CustomClassLoader.java:
##########
@@ -39,15 +38,15 @@
 
 /**
  * Custom class loader will load the classes from the class path, CCL will load
- * the classes from the the URL first, if it cannot find the required class it
- * will let the parent class loader do the its job.
+ * the classes from the URL first, if it cannot find the required class it
+ * will let the parent class loader do its job.
  *
  * Note: If the CCL is GC'ed then the associated classes will be unloaded.
  */
 public class CustomClassLoader extends URLClassLoader
 {
     private static final Logger logger = LoggerFactory.getLogger(CustomClassLoader.class);
-    private final Map<String, Class<?>> cache = new ConcurrentHashMap<String, Class<?>>();

Review Comment:
   this is not necessary from compiler



;16/Feb/23 10:38;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108299693


##########
src/java/org/apache/cassandra/triggers/CustomClassLoader.java:
##########
@@ -83,7 +82,7 @@ public void addClassPath(File dir)
             logger.info(""Loading new jar {}"", inputJar.absolutePath());
             try
             {
-                copy(inputJar.toPath(), out.toPath());
+                copy(inputJar.toPath(), out.toPath(), StandardCopyOption.REPLACE_EXISTING);

Review Comment:
   because `FileUtils.createTempFile(""cassandra-"", "".jar"", lib);` creates an empty file, copying here will fail because it will not copy it when the destination exists. We need to replace it.



;16/Feb/23 10:39;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108300701


##########
ide/idea/workspace.xml:
##########
@@ -227,6 +227,7 @@
                                           -Dcassandra.logdir=$PROJECT_DIR$/data/logs
                                           -Dcassandra.reads.thresholds.coordinator.defensive_checks_enabled=true
                                           -Dcassandra.storagedir=$PROJECT_DIR$/data
+                                          -Dcassandra.triggers_dir=$PROJECT_DIR$/conf/triggers

Review Comment:
   This needs to be here otherwise running Cassandra from IDEA will not load that trigger which was installed there by `ant install` from `examples/triggers`.



;16/Feb/23 10:40;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108301503


##########
examples/triggers/src/org/apache/cassandra/triggers/AuditTrigger.java:
##########
@@ -29,19 +29,27 @@
 import org.apache.cassandra.db.partitions.PartitionUpdate;
 import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.utils.UUIDGen;
+import org.apache.cassandra.utils.TimeUUID;
 
 public class AuditTrigger implements ITrigger

Review Comment:
   I tidied up this class a little bit and fixed it so it compiles again.



;16/Feb/23 10:41;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108302249


##########
examples/triggers/build.xml:
##########
@@ -57,7 +57,12 @@
 		</jar>
 	</target>
 
+	<target name=""install"" depends=""jar"">

Review Comment:
   Instructions in readme were telling to copy this jar manually to `conf/triggers`. There is no reason a user has to do that step manually if we can automate it.



;16/Feb/23 10:42;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108302695


##########
examples/triggers/README.adoc:
##########
@@ -0,0 +1,63 @@
+Cassandra Trigger Example

Review Comment:
   I reworked the readme to asciidoc as that is the documentation format we use.



;16/Feb/23 10:42;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1108303126


##########
.gitignore:
##########
@@ -84,3 +84,5 @@ venv/
 # build-scripts will put cassandra-builds into the directory
 cassandra-builds/
 cassandra-dtest/
+
+conf/triggers/trigger-example.jar

Review Comment:
   If somebody forgets to do `ant clean` on triggers example and commits.



;16/Feb/23 10:43;githubbot;600","smiklosovic commented on code in PR #2159:
URL: https://github.com/apache/cassandra/pull/2159#discussion_r1109068503


##########
examples/ssl-factory/test/unit/org/apache/cassandra/security/KubernetesSecretsSslContextFactoryTest.java:
##########
@@ -64,7 +64,7 @@ public static void prepare()
     private static void deleteFileIfExists(String file)
     {
         Path filePath = Paths.get(file);
-        boolean deleted = PathUtils.tryDelete(filePath);
+        boolean deleted = new File(filePath).toJavaIOFile().delete();

Review Comment:
   This is fine from checkstyle point of view. We are still using `File` wrapper for Cassandra.



;16/Feb/23 22:05;githubbot;600","smiklosovic closed pull request #2159: CASSANDRA-18264 4.1 Fix copying of JAR of a trigger to temporary file
URL: https://github.com/apache/cassandra/pull/2159


;17/Feb/23 15:57;githubbot;600","smiklosovic closed pull request #2165: CASSANDRA-18264 trunk Fix copying of JAR of a trigger to temporary file
URL: https://github.com/apache/cassandra/pull/2165


;17/Feb/23 15:57;githubbot;600",,,,,,,,,,,,,,,0,6600,,,0,6600,,,,,,,,,,,,,,CASSANDRA-18270,,,,,,0.0,smiklosovic,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 17 11:35:18 UTC 2023,,,,,,,All,,,,"0|z1fyug:",9223372036854775807,,,,brandon.williams,,,Normal,,4.1-alpha1,,https://github.com/apache/cassandra/commit/9860c1e9d9fb45342fa674782ecd135cf6875943,,,,,,,,,CI,,,,,"15/Feb/23 21:38;smiklosovic;https://github.com/apache/cassandra/pull/2159/files

I will provide builds soon.

The reason this slipped through is we do not have any tests for custom loading, only for triggers created via CQL.

Honestly I do not feel like spending time on testing this by loading a JAR. We would need to build it, then put it to repository, then probably tweak jvm dtests api to load it? I am not sure how this works ... ;;;","15/Feb/23 22:08;smiklosovic;We do have triggers example, in ""examples"" directory. That example was not compiling so I fixed it and I manually verified that it is loading it correctly.

I think we should add this to build process but that is discussion for a separate ticket .... ;;;","15/Feb/23 23:06;smiklosovic;[~brandon.williams] I see you are among watchers.

There is this (1) dir where triggers are loaded from by default. However,  there is this as well (2) which says that it is by default ""conf/triggers"" and that is not true. If -Dcassandra.triggers_dir is not set, it will default to ""triggers"". So people reading the documentation will place it to ""conf/triggers"" and it will not work.

We have two options, we either change the documentation or we change the default in FBUtilities to ""conf/triggers"". I am on the edge what we should choose.

The example puts the jar to ""conf/triggers"" and in order to try it from IDEA, I had to add -Dcassandra.triggers_dir to run configuration (and tweak idea files) to point it to conf/triggers.

Documentation here (3) says it may be put to `lib/triggers`. In that case, `triggers` in FBUtilities probably makes sense but `conf/triggers` in jvm-server.options still does not.

(1) https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java#L112
(2) https://github.com/apache/cassandra/blob/trunk/conf/jvm-server.options#L65
(3) https://cassandra.apache.org/doc/latest/cassandra/cql/triggers.html;;;","16/Feb/23 10:26;smiklosovic;[~brandon.williams] Disregard my previous comment please. The readme file in triggers' example is a little bit misleading. 

For reference, whole example works like this:

When ant jar is invoked, it will build the jar with AuditTrigger class and it will include AuditTrigger.properties from conf directory into that JAR so triggers JAR contains that conf file in it.

When I build Cassandra with ""ant artifacts"", when this trigger jar is put into ""conf/triggers"" and instructions in readme are followed, _this works_. Placing that jar anywhere else (like lib/triggers or ""triggers"" in CASSANDRA_HOME) will not work. It truly expects it to be in conf/triggers as mentioned in ""jvm-server.options"". So this is good.

However, when same is done by trying to load this from IDEA simply by starting Cassandra from there, this will not work unless I specify ""-Dcassandra.triggers_dir=/path/to/project/conf/triggers"".

I fixed readme for the example as well, rewrote it to asciidoc and fixed what should not be there. I also added ""install"" target which will copy that jar to ""conf/triggers"" and it will be removed from there on ""ant clean"".

On startup, triggers jar is copied to /tmp/lib/cassandra-""number"".jar (number being simply ""0"") and trigger is loaded by CustomClassLoader from there. The example expects to read ""AuditTrigger.properties"" and it reads it from that jar. Having properties anywhere but that jar is not helpful.

I would like to ship all these changes at once, when it comes to example, with the fix of jar loading itself.

I think that we should treat these examples as subprojects and we should include them into the build. The fact that the example was not compiling because the code was not updated is supporting this idea. But that might be done separately.;;;","16/Feb/23 16:06;brandon.williams;This all looks like much needed love for the triggers example, we just need CI.

bq. I think that we should treat these examples as subprojects and we should include them into the build. The fact that the example was not compiling because the code was not updated is supporting this idea.

I don't think we want to build examples every time, if that's what you mean.  Adding a CI job to make sure they compile is fine, though, and let's make another ticket for that.
;;;","16/Feb/23 19:30;smiklosovic;4.1 https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2282/

trunk is basically copy of that. Nothing changed in trunk in that regard.

btw, unfortunately, the second example for k8s does not compile either so I fixed it here. (1) The problem is that when using our custom file / paths util, it somehow need to have Cassandra / Descriptor initialised otherwise Config has null variables and it throws NPE ... The easiest solution is to just use Java stuff and thats it. 

[~brandon.williams] What do you think?

(1) https://github.com/apache/cassandra/pull/2159/commits/d659522c7816fb35acdfe9ce6914b2b4abc35fc6;;;","16/Feb/23 19:44;brandon.williams;bq. trunk is basically copy of that. Nothing changed in trunk in that regard.

We still need to run CI for all branches this touches.

bq. The easiest solution is to just use Java stuff and thats it. 

The use of java.io.File will pass after CASSANDRA-17055 only because checkstyle isn't checking examples, but I don't think we should use forbidden classes in examples either.;;;","16/Feb/23 22:07;smiklosovic;trunk build is being run here https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2284/
4.1 is being build here https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2285

4.1 patch https://github.com/apache/cassandra/pull/2159
trunk patch https://github.com/apache/cassandra/pull/2165

I managed to fix 4.1 k8s test by deleting the file by different way. This version of method call is not forbidden in checkstyle.

For k8s and trunk, that test is broken in a different way. There were some changes in trunk in SSL factory area recently and the refactored stuff there left the test broken and un-compilable. I tried my best to fix it all but one test I am not able to fix. I will ask other developers to fix that.

So, we are fully covered for 4.1 (triggers and k8s) and for trunk there is only triggers demo fixed. As the next release in trunk is happening in couple months, I rely on developers responsible for the latest changes in SSL factory area to take a look into that. I will dedicate a separate ticket for that.;;;","17/Feb/23 11:35;brandon.williams;Everything looks good here, I am +1.

bq. latest changes in SSL factory area to take a look into that. I will dedicate a separate ticket for that.

That works for me, just don't forget to make the ticket.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport CASSANDRA-17205 (remove strong self-ref in tidier) to all supported lines,CASSANDRA-18256,13524256,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jmckenzie,jmckenzie,jmckenzie,10/Feb/23 16:35,05/Apr/23 00:22,13/Jul/23 08:41,05/Apr/23 00:22,,,,,,,Local/SSTable,,,0,,,,,CASSANDRA-17205 should probably have been backported to all supported branches. It's potentially masking some issues seen w/refs in other locations so we should pull it back to all supported lines.,,brandon.williams,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18176,,,,CASSANDRA-18332,,,,,,,,,,,,0.0,jmckenzie,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,2023-02-10 16:35:05.0,,,,,,,All,,,,"0|z1fus8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid result when a non existent row is assigned to a variable,CASSANDRA-18241,13523523,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,07/Feb/23 14:50,20/Mar/23 22:25,13/Jul/23 08:41,16/Feb/23 18:38,NA,,,,,,Accord,,,0,,,,,"{noformat}
cqlsh:ks> CREATE TABLE tbl3 (k INT, c INT, v INT, PRIMARY KEY (k, c));
cqlsh:ks> 
BEGIN TRANSACTION 
  LET row = (SELECT * FROM tbl3 WHERE k=1 LIMIT 1); 
  SELECT row.k, row.c, row.v; 
  IF row.c > 10 THEN 
    INSERT INTO ks.tbl3 (k, c, v) VALUES (1, 10, 110); 
  END IF
COMMIT TRANSACTION;

 row.k | row.c | row.v
-------+-------+-------
     1 |  null |  null

cqlsh:ks> SELECT * FROM tbl3;

 k | c | v
---+---+---

(0 rows)
{noformat}

as discussed on Slack, the transaction should return:
{noformat}
 row.k | row.c | row.v
-------+-------+-------
  null |  null |  null
{noformat}
",,aweisberg,e.dimitrova,jlewandowski,maedhroz,mfleming,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,CASSANDRA-17092,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 20 22:25:22 UTC 2023,,,,,,,All,,,,"0|z1fq9k:",9223372036854775807,,,,maedhroz,,,Low,,NA,,https://github.com/apache/cassandra/commit/1e04ea44186b9bd22290db767a6c6ac7e8b05106,,,,,,,,,regression tests,,,,,"07/Feb/23 21:12;maedhroz;Best place to start might be adding a failing test in {{AccordCQLTest}}...;;;","10/Feb/23 14:30;jlewandowski;[https://github.com/apache/cassandra/pull/2150]

 ;;;","10/Feb/23 19:48;maedhroz;Aside from [one remaining simplification|https://github.com/apache/cassandra/pull/2150#discussion_r1103167986], LGTM

+1;;;","20/Mar/23 22:25;aweisberg;Just a heads up this breaks CAS failure to apply for EXISTS. It shows up in unit tests that I haven't landed yet. The code that processes a CAS result and turns it into a result set interprets an empty result as success and all non-empty results as failure. It's very finicky and I think the right solution is probably to have the necessary result added in TxnQuery.CONDITION specifically for this failure case where there is also no result row.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using SELECT COUNT(*) FROM... LIMIT 1 in the returning section results in ClassCastException,CASSANDRA-18240,13523522,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jlewandowski,jlewandowski,jlewandowski,07/Feb/23 14:45,27/Feb/23 11:58,13/Jul/23 08:41,27/Feb/23 11:58,NA,,,,,,Accord,,,0,,,,,"{noformat}
cqlsh> 
BEGIN TRANSACTION 
  LET row1 = (SELECT * FROM ks.tbl1 WHERE k = 5); 
  SELECT COUNT(*) FROM ks.tbl1 LIMIT 1; 
  IF row1 IS NULL THEN 
    INSERT INTO ks.tbl1 (k, v) VALUES (5, 10);
  END IF
COMMIT TRANSACTION;

NoHostAvailable: ('Unable to complete the operation against any hosts', {<Host: 127.0.0.1:9042 datacenter1>: <Error from server: code=0000 [Server error] message=""java.lang.ClassCastException: org.apache.cassandra.db.PartitionRangeReadCommand cannot be cast to org.apache.cassandra.db.SinglePartitionReadQuery$Group"">})
{noformat}",,bereng,cscotta,e.dimitrova,jlewandowski,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jlewandowski,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,CASSANDRA-17092,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Feb 21 07:11:08 UTC 2023,,,,,,,All,,,,"0|z1fq9c:",9223372036854775807,,,,maedhroz,,,Low,,NA,,https://github.com/apache/cassandra/commit/6989e93074cd2cde6d51822ec6577e8c7d3c6f71,,,,,,,,,regression,,,,,"07/Feb/23 14:57;cscotta;cc: [~maedhroz] ;;;","16/Feb/23 19:48;jlewandowski;https://github.com/apache/cassandra/pull/2164;;;","16/Feb/23 23:46;maedhroz;Made a first pass, and dropped a few minor comments. Let me know what you think...;;;","17/Feb/23 20:20;maedhroz;+1;;;","20/Feb/23 20:49;maedhroz;[~jlewandowski] btw, CASSANDRA-18223 just merged, which should clean up the Python dtest failures you might have seen in CI runs;;;","21/Feb/23 07:11;jlewandowski;thanks [~maedhroz], I'll rebase and test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CEP-15: (C*) Accord adds a accord.messages.Defer which isn't supported for persisting, causing the operation to fail",CASSANDRA-18225,13522836,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,dcapwell,dcapwell,02/Feb/23 22:13,10/Mar/23 21:51,13/Jul/23 08:41,10/Mar/23 21:51,NA,,,,,,Accord,,,0,,,,,"See https://app.circleci.com/pipelines/github/maedhroz/cassandra/688/workflows/84cb0f28-d010-43c6-97cb-55af4a31a3ce/jobs/6554/tests#failed-test-0

{code}
ERROR [CommandStore[25]:1] node1 CS:[25] OP:0xf01a5a4b 2023-02-02 19:46:44,701 Operation AsyncOperation{RUNNING}-0xf01a5a4b failed
java.lang.RuntimeException: Unhandled non-transient listener: accord.messages.Defer@3d36718e
	at org.apache.cassandra.service.accord.AccordCommand.maybeWrapListener(AccordCommand.java:711)
	at org.apache.cassandra.service.accord.AccordCommand.addListener(AccordCommand.java:717)
	at accord.messages.Defer.add(Defer.java:67)
	at accord.messages.Commit.apply$unsync(Commit.java:163)
	at accord.messages.Commit.apply(Commit.java)
	at accord.messages.Commit.apply(Commit.java:40)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:239)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:226)
	at org.apache.cassandra.service.accord.async.AsyncOperation.runInternal(AsyncOperation.java:154)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:194)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:68)
	at org.apache.cassandra.simulator.systems.InterceptingExecutor$AbstractSingleThreadedExecutorPlus.lambda$new$0(InterceptingExecutor.java:584)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
{code}",,dcapwell,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18196,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 10 21:51:21 UTC 2023,,,,,,,All,,,,"0|z1fm14:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"10/Mar/23 17:02;maedhroz;[~bdeggleston] Any chance CASSANDRA-18192 happened to fix this?;;;","10/Mar/23 21:51;maedhroz;This has been addressed in CASSANDRA-18192.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CEP-15 (C*) No commandsForKey in context for key PartitionKey,CASSANDRA-18224,13522835,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,dcapwell,dcapwell,02/Feb/23 22:12,10/Mar/23 21:51,13/Jul/23 08:41,10/Mar/23 21:51,NA,,,,,,Accord,,,0,,,,,"See https://app.circleci.com/pipelines/github/maedhroz/cassandra/688/workflows/84cb0f28-d010-43c6-97cb-55af4a31a3ce/jobs/6554/tests#failed-test-0

{code}
ERROR [CommandStore[25]:1] node1 CS:[25] OP:0xe17e624f 2023-02-02 19:46:44,764 Operation AsyncOperation{RUNNING}-0xe17e624f failed
java.lang.IllegalArgumentException: No commandsForKey in context for key PartitionKey{tableId=dbb35709-2b11-38b3-9fcb-9a197512080e, key=DecoratedKey(5414964737888519087, 242cad05)}
	at org.apache.cassandra.service.accord.AccordCommandStore.getCommandsForKeyInternal(AccordCommandStore.java:442)
	at org.apache.cassandra.service.accord.AccordCommandStore$SafeAccordCommandStore.commandsForKey(AccordCommandStore.java:204)
	at org.apache.cassandra.service.accord.AccordCommandStore$SafeAccordCommandStore.lambda$register$1(AccordCommandStore.java:190)
	at accord.primitives.Routables$Helper.foldl(Routables.java:282)
	at accord.primitives.Routables.foldl(Routables.java:134)
	at org.apache.cassandra.service.accord.AccordCommandStore$SafeAccordCommandStore.register(AccordCommandStore.java:190)
	at accord.local.Command.set(Command.java:1015)
	at accord.local.Command.commit(Command.java:377)
	at accord.messages.Commit.apply$unsync(Commit.java:152)
	at accord.messages.Commit.apply(Commit.java)
	at accord.messages.Commit.apply(Commit.java:40)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:239)
	at org.apache.cassandra.service.accord.async.AsyncOperation$ForFunction.apply(AsyncOperation.java:226)
	at org.apache.cassandra.service.accord.async.AsyncOperation.runInternal(AsyncOperation.java:154)
	at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:194)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:68)
	at org.apache.cassandra.simulator.systems.InterceptingExecutor$AbstractSingleThreadedExecutorPlus.lambda$new$0(InterceptingExecutor.java:584)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
{code}",,dcapwell,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18196,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Mar 10 21:51:07 UTC 2023,,,,,,,All,,,,"0|z1fm0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"10/Mar/23 17:02;maedhroz;[~bdeggleston] Any chance CASSANDRA-18192 happened to fix this?;;;","10/Mar/23 21:51;maedhroz;This has been addressed in CASSANDRA-18192. Thanks [~bdeggleston]!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Byteman rule in stop_data_reads.btm cannot compile against accord.messages.ReplyContext,CASSANDRA-18223,13522817,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,shiraishi,maedhroz,maedhroz,02/Feb/23 16:50,20/Feb/23 20:47,13/Jul/23 08:41,20/Feb/23 20:47,NA,,,,,,Accord,,,0,byteman,dtest,python,,"The Python {{read_repair_test}} relies on a Byteman rule on the {{doVerb()}} method in {{ReadCommandVerbHandler}}, but {{accord.messages.ReplyContext}} isn’t on the classpath. This is probably because we don't include it in the list of jars created in {{byteman_validate}}.

{noformat}
AssertionError: byteman script didn't compile
  Checking rule disable data reads against class org.apache.cassandra.db.ReadCommandVerbHandler
  Parsed rule ""disable data reads"" for class org.apache.cassandra.db.ReadCommandVerbHandler
  ERROR : Failed to check rule ""disable data reads"" loaded from /home/cassandra/cassandra-dtest/byteman/read_repair/stop_data_reads.btm line 8 against method doVerb(org.apache.cassandra.net.Message) void
  java.lang.NoClassDefFoundError: accord/messages/ReplyContext
{noformat}

ex. https://app.circleci.com/pipelines/github/maedhroz/cassandra/686/workflows/ffd1e528-b8ec-4534-a333-ab450e110e89/jobs/6481/tests#failed-test-0

It might make sense to fix this after CASSANDRA-18204 wraps up, so we know exactly how the Accord library is pulled into C*. Then, once we do fix it, we should fix in a way that still works w/ 4.0 and 4.1, etc. (i.e. Don't assume the Accord library must be present.)",,maedhroz,shiraishi,,,,,,,,"stonewhitener opened a new pull request, #210:
URL: https://github.com/apache/cassandra-dtest/pull/210

   As Caleb Rackliffe pointed out, the byteman script could not compile because `accord.messages.ReplyContext` was not found on the classpath. Therefore, I added the Accord library to the classpath and confirmed that it was fixed.


;19/Feb/23 09:43;githubbot;600","maedhroz commented on PR #210:
URL: https://github.com/apache/cassandra-dtest/pull/210#issuecomment-1437309866

   nit: Typically, we'll give the branch a name that corresponds to the Jira (ex. `CASSANDRA-18223` in this case), but no biggie for now.


;20/Feb/23 16:53;githubbot;600","maedhroz commented on PR #210:
URL: https://github.com/apache/cassandra-dtest/pull/210#issuecomment-1437325624

   CircleCI run in progress here: https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-18223


;20/Feb/23 17:06;githubbot;600","maedhroz commented on PR #210:
URL: https://github.com/apache/cassandra-dtest/pull/210#issuecomment-1437527625

   Pushed as https://github.com/apache/cassandra-dtest/commit/33ff84a396c9d5b9a9be574be50dbb2ea9c9ded0


;20/Feb/23 20:46;githubbot;600","maedhroz closed pull request #210: CASSANDRA-18223
URL: https://github.com/apache/cassandra-dtest/pull/210


;20/Feb/23 20:46;githubbot;600",,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,CASSANDRA-18204,CASSANDRA-18196,,,,,,,,,,,,,,,,0.0,shiraishi,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,CASSANDRA-17092,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 20 19:03:41 UTC 2023,,,,,,,All,,,,"0|z1flww:",9223372036854775807,,,,maedhroz,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/33ff84a396c9d5b9a9be574be50dbb2ea9c9ded0,,,,,,,,,n/a (test fix),,,,,"06/Feb/23 17:29;maedhroz;Once the sub-module is in place, I think the easiest way to fix this is going to be adding the following to {{byteman_validate}}:

{noformat}
if os.path.exists(os.path.join(cdir, 'modules', 'accord')):
        jars.append(glob.glob(os.path.join(cdir, 'modules', 'accord', 'accord-core', 'build', 'libs', 'accord-core-[0-9].[0-9]-SNAPSHOT.jar'))[0])
{noformat}

CC [~dcapwell];;;","17/Feb/23 01:24;maedhroz;Hey [~shiraishi]!

If you want to get started on this...

1.) Check out https://github.com/apache/cassandra/tree/cep-15-accord and build ({{git clean -fxd && ant realclean && ant jar && ant generate-idea-files}})

2.) Check out https://github.com/apache/cassandra-dtest and see if you can get the basic repro/test failure (after setup, run {{pytest --cassandra-dir=<your C* dir> read_repair_test.py::TestSpeculativeReadRepair::test_normal_read_repair}})

Once you're there, all we should need to wait for is CASSANDRA-18204, and then you can open a PR to fix this against https://github.com/apache/cassandra-dtest;;;","20/Feb/23 17:11;maedhroz;dtest patch: https://github.com/apache/cassandra-dtest/pull/210

[~shiraishi] I've started a CircleCI run that points to your dtest branch [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-18223]. If that's clean, we should be able to merge.;;;","20/Feb/23 19:03;maedhroz;Nice. Python dtests are looking clean. I'll commit this soon.

Thanks for the patch!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OOM while running ShortAccordSimulationTest,CASSANDRA-18218,13522592,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,maedhroz,maedhroz,maedhroz,01/Feb/23 20:43,02/Feb/23 21:18,13/Jul/23 08:41,02/Feb/23 21:18,NA,,,,,,Accord,Test/burn,,0,simulator,,,,"{{ShortAccordSimulationTest}} seems to consistently run out of heap when run locally. This is true even when we scale the number of threads and duration down...

{noformat}
AccordSimulationRunner.main(new String[] { ""run"", ""-n"", ""3"", ""-t"", ""10"", ""--cluster-action-limit"", ""-1"", ""-c"", ""2"", ""-s"", ""10""});
{noformat}

{noformat}
ERROR [CommandStore[0]:1] node1 CS:[0] OP:0x8fb4f8f1 2023-01-31 17:16:27,143 Operation AsyncOperation{RUNNING}-0x8fb4f8f1 failed
java.lang.OutOfMemoryError: Java heap space
   at java.util.Arrays.copyOf(Arrays.java:3181)
   at accord.local.Command$NotifyWaitingOn.push(Command.java:794)
   at accord.local.Command$NotifyWaitingOn.accept(Command.java:757)
   at accord.local.Command.maybeExecute(Command.java:600)
   at accord.local.Command.onChange(Command.java:546)
   at org.apache.cassandra.service.accord.ListenerProxy$CommandListenerProxy.lambda$onChange$0(ListenerProxy.java:148)
   at org.apache.cassandra.service.accord.ListenerProxy$CommandListenerProxy$$Lambda$4606/1457728285.accept(Unknown Source)
   at org.apache.cassandra.service.accord.async.AsyncOperation$ForConsumer.apply(AsyncOperation.java:261)
   at org.apache.cassandra.service.accord.async.AsyncOperation$ForConsumer.apply(AsyncOperation.java:248)
   at org.apache.cassandra.service.accord.async.AsyncOperation.runInternal(AsyncOperation.java:154)
   at org.apache.cassandra.service.accord.async.AsyncOperation.run(AsyncOperation.java:194)
   at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
   at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:68)
   at org.apache.cassandra.simulator.systems.InterceptingExecutor$AbstractSingleThreadedExecutorPlus.lambda$new$0(InterceptingExecutor.java:584)
   at org.apache.cassandra.simulator.systems.InterceptingExecutor$AbstractSingleThreadedExecutorPlus$$Lambda$768/827906088.run(Unknown Source)
   at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
   at java.lang.Thread.run(Thread.java:748)
{noformat}

JVM args make it seem like we’re passing both a 1 GiB and 8 GiB heap size, although that doesn’t seem to have any bearing on the result. Setting only 8 GiB just takes longer to hit the same problem.

{noformat}
INFO  [isolatedExecutor:2] node1 2023-01-31 17:15:56,940 JVM Arguments: [-Dstorage-config=/Users/maedhroz/Forks/cassandra/test/conf, -Djava.awt.headless=true, -javaagent:/Users/maedhroz/Forks/cassandra/lib/jamm-0.3.2.jar, -ea, -Djava.io.tmpdir=/var/folders/4d/zfjs7m7s6x5_l93k33r5k6680000gn/T/, -Dcassandra.debugrefcount=true, -Xss384k, -XX:SoftRefLRUPolicyMSPerMB=0, -XX:HeapDumpPath=build/test, -Dcassandra.test.driver.connection_timeout_ms=10000, -Dcassandra.test.driver.read_timeout_ms=24000, -Dcassandra.memtable_row_overhead_computation_step=100, -Dcassandra.test.use_prepared=true, -Dcassandra.test.sstableformatdevelopment=true, -Djava.security.egd=file:/dev/urandom, -Dcassandra.testtag=, -Dcassandra.keepBriefBrief=${cassandra.keepBriefBrief}, -Dcassandra.strict.runtime.checks=true, -Dcassandra.reads.thresholds.coordinator.defensive_checks_enabled=true, -DQT_SHRINKS=0, -Dlogback.configurationFile=test/conf/logback-simulator.xml, -Dcassandra.ring_delay_ms=10000, -Dcassandra.tolerate_sstable_size=true, -Dcassandra.skip_sync=true, -Dcassandra.debugrefcount=false, -Dcassandra.test.simulator.determinismcheck=strict, -Dcassandra.test.simulator.print_asm=none, -javaagent:/Users/maedhroz/Forks/cassandra/build/test/lib/jars/simulator-asm.jar, -Xbootclasspath/a:/Users/maedhroz/Forks/cassandra/build/test/lib/jars/simulator-bootstrap.jar, -XX:ActiveProcessorCount=4, -XX:-TieredCompilation, -XX:-BackgroundCompilation, -XX:CICompilerCount=1, -XX:Tier4CompileThreshold=1000, -XX:ReservedCodeCacheSize=256M, -Xmx8G, -Xmx1024m]
{noformat}",,dcapwell,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18196,,,,,,,,,,,,"01/Feb/23 20:45;maedhroz;java_pid73497.hprof.zip;https://issues.apache.org/jira/secure/attachment/13055019/java_pid73497.hprof.zip","01/Feb/23 20:45;maedhroz;java_pid75762.hprof.zip;https://issues.apache.org/jira/secure/attachment/13055020/java_pid75762.hprof.zip",,,2.0,benedict,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Fuzz Test,,false,CASSANDRA-17092,,,,,,,,,,,,,,,,9223372036854775807,,None,,Thu Feb 02 21:18:24 UTC 2023,,,,,,,All,,,,"0|z1fkjk:",9223372036854775807,,,,dcapwell,,,Normal,,NA,,https://github.com/apache/cassandra-accord/commit/0cc9e273b2eaa37d82a1ae1ac2681aec65aa0f6d,,,,,,,,,n/a (test fix),,,,,"01/Feb/23 20:48;maedhroz;I've attached a couple heap dumps at the point of failure. Essentially all retained heap sits under the structure of \{{InterceptibleThread}} -> \{{Command.NotifyWaitingOn}} -> \{{TxnId}} and \{{Status.Known}}.;;;","02/Feb/23 18:02;maedhroz;accord: [https://github.com/apache/cassandra-accord/pull/32]

C*: [https://github.com/apache/cassandra/pull/2132]

CircleCI: [https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-18218];;;","02/Feb/23 18:24;dcapwell;patch LGTM, can we attempt to run the simulator in a repeat job so we see if this doesn't come back?;;;","02/Feb/23 20:58;maedhroz;The good news is that the repeat job doesn't surface this OOM now. The bad news is that it surfaces other problems we knew about before CASSANDRA-18174. In any case, time to commit.;;;","02/Feb/23 21:18;maedhroz;Committed to Accord [here|https://github.com/apache/cassandra-accord/commit/0cc9e273b2eaa37d82a1ae1ac2681aec65aa0f6d] and C* [here|https://github.com/apache/cassandra/commit/7a85178a3d081d36c4c3de55d4a49ec368cc8c20].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the output of FQL dump tool to properly separate entries,CASSANDRA-18215,13522530,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,n.v.harikrishna,smiklosovic,smiklosovic,01/Feb/23 15:01,07/Feb/23 13:51,13/Jul/23 08:41,07/Feb/23 13:51,4.0.8,4.1.1,5.0,,,,Tool/fql,,,0,,,,,"This was reported in (1)

(1) https://github.com/apache/cassandra/pull/2050

If I create a table something like this:

{code}
CREATE TABLE t1 ( id int PRIMARY KEY , v1 int, v2 int, v3 int) ;
{code}

and inserted a row using:

{code}
try (CqlSession cqlSession = CqlSession.builder().build()) {
    PreparedStatement preparedStatement = cqlSession.prepare(""INSERT INTO ks1.t1 (id, v1, v2, v3) VALUES (?, ?, ?, ?)"");
    cqlSession.execute(preparedStatement.bind(1, 1, 1, 1));
}
{code}

The output of fqltool looks something like this:

{code}
Type: single-query
Query start time: 1673373829119
Protocol version: 5
Generated timestamp:-9223372036854775808
Generated nowInSeconds:1673373829
Query: INSERT INTO ks1.t1 (id, v1, v2, v3) VALUES (?, ?, ?, ?)
Values: 
00000000 00 00 00 01                                      ····             
00000000 00 00 00 01                                      ····             
-----
00000000 00 00 00 01                                      ····             
-----
00000000 00 00 00 01                                      ····             
-----
{code}


----- is not printed between the first and second value

{code}
Values: 
00000000 00 00 00 01                                      ····             
00000000 00 00 00 01                                      ····   
{code}

We are normally very cautious about changing the output of the tooling but in this case I think this is a legit bug which should be fixed.",,bereng,n.v.harikrishna,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,n.v.harikrishna,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Feb 07 13:51:05 UTC 2023,,,,,,,All,,,,"0|z1fk5s:",9223372036854775807,,,,brandon.williams,smiklosovic,,Low,,4.0,,https://github.com/apache/cassandra/commit/b74c86404a0d131677286206562bb4bfa3e8e1a9,,,,,,,,,Manually verified the output. Mentioned output before and after this change in the pull request.,,,,,"01/Feb/23 15:02;smiklosovic;[~n.v.harikrishna] I would gladly review this fix if you happen to implement that.;;;","03/Feb/23 04:35;n.v.harikrishna;Thanks! I will update the patch details soon.;;;","03/Feb/23 18:41;n.v.harikrishna;Raised PR with the changes. https://github.com/apache/cassandra/pull/2135;;;","03/Feb/23 18:44;n.v.harikrishna;PR: https://github.com/apache/cassandra/pull/2135;;;","04/Feb/23 07:00;smiklosovic;[~n.v.harikrishna] would you mind to add a test for it? 1 line, 2 lines, n lines ... ;;;","06/Feb/23 09:50;n.v.harikrishna;[~smiklosovic] Thanks for taking a look. Added test case and pushed the changes to PR.;;;","07/Feb/23 09:18;smiklosovic;[~brandon.williams] this is the continuation of CASSANDRA-18113 where we spotted this issue.

PR: https://github.com/apache/cassandra/pull/2135
CI for trunk branch: [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2260/]

The patch cherry-picks cleanly on 4.0 and 4.1. I do not think that running the build for the remaining branches brings any value.

500x run on added test is here: https://app.circleci.com/pipelines/github/instaclustr/cassandra/1853/workflows/93ccd0a3-ee23-482f-8a0b-00b5eb66d737

I am +1;;;","07/Feb/23 12:17;brandon.williams;+1 from me.;;;","07/Feb/23 13:51;smiklosovic;Thank you, [~n.v.harikrishna], for the patch! If you find any other issues in FQL please let us know.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 NoSuchFileException when removing a snapshot,CASSANDRA-18211,13522297,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,jlewandowski,jlewandowski,31/Jan/23 20:24,17/Feb/23 16:34,13/Jul/23 08:41,17/Feb/23 14:58,4.1.1,5.0,,,,,Local/Snapshots,,,0,,,,,"Automatic deletion of expired snapshots maintained by {{SnapshotManager}} can race with manual snapshot removal in a way an exception like {{NoSuchFileException}} is thrown. 

It is because the snapshot directory existence is checked and deleted if it exists as a non-atomic operation. Since we can potentially have two threads attempting to do that at the same time (automatic and manual snapshot removal) it may lead to a race in rare situations.
",,jlewandowski,smiklosovic,yongjiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18271,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Feb 17 10:24:02 UTC 2023,,,,,,,All,,,,"0|z1fir4:",9223372036854775807,,,,jlewandowski,,,Low,,4.1.0,,https://github.com/apache/cassandra/commit/cfe9641fbec0dc62c9a0f4f156c702e2cfa6ad4e,,,,,,,,,added unit test,,,,,"31/Jan/23 20:30;smiklosovic;Thank you [~jlewandowski] for reporting this. I was involved recently in snapshots subsystem with [~paulo], we can check what is going on. I think the easy solution would be to queue all snapshot removals so only one snapshot at any time could be cleared.;;;","31/Jan/23 21:49;jlewandowski;... which is probably equivalent to making the delete method synchronized;;;","31/Jan/23 23:16;smiklosovic;You are reading my mind. I was looking into it briefly already. Yes, making it just synchronized. I think writing a nice test for this would be the thing we spend the most time on :);;;","01/Feb/23 10:40;smiklosovic;4.1 [https://github.com/apache/cassandra/pull/2126]
trunk [https://github.com/apache/cassandra/pull/2127]

There is no SnapshotManager in 4.0 and bellow.

Builds will be added after review.;;;","01/Feb/23 10:42;smiklosovic;[~jlewandowski] would you mind to review please? The test is rather ""artificial"" but anyway ... I ll provide builds when reviewed to not build it unnecessarily. ;;;","01/Feb/23 10:47;smiklosovic;I see [~jlewandowski] is working on a draft here (1) https://github.com/apache/cassandra/pull/2124

His patch seems to be more complex.;;;","01/Feb/23 11:00;jlewandowski;[~smiklosovic] I've also created a small PR with my findings - https://github.com/apache/cassandra/pull/2124/files

It also makes SnapshostsTest much faster, 3x times on my local machine. There are two main changes which affects performance of the test:
- it uses gossip, which I think is completely unrelated to what that test aims to verify
- the method which verifies snapshot existence does it every 1 second, and what is more important, start verifying after 1 second, so it lasts at least 1 second. In after test hook we remove all the snapshots one by one and we verify that using that method - since we have 12 snapshots to verify, it adds at least 12 seconds to each test case
;;;","01/Feb/23 15:44;smiklosovic;We agreed with [~jlewandowski] that we need to dig a little bit deeper here and synchronize how snapshots are loaded too. It may theoretically race when snapshots are being loaded by nodetool listsnapshots and we remove some snapshot in the meanwhile as well.;;;","10/Feb/23 11:40;smiklosovic;https://github.com/apache/cassandra/pull/2149;;;","14/Feb/23 17:37;smiklosovic;trunk build https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2273/
trunk circle j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1888/workflows/44ba4736-a631-4ee9-ae6c-a0f3f43ed648

j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1888/workflows/a25aedca-e244-43e8-8b58-e8752c219e94

4.1 build https://app.circleci.com/pipelines/github/instaclustr/cassandra/1885/workflows/3e203d5b-293e-478a-bffb-904e296eee58

multiplexer was run intensively on 4.1, I think like 2000x.

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1884/workflows/d81401aa-441a-4d00-af09-0ec1e7a2110e
https://app.circleci.com/pipelines/github/instaclustr/cassandra/1884/workflows/79935cb7-c8a5-48bb-b244-f7ae4e09d032
https://app.circleci.com/pipelines/github/instaclustr/cassandra/1884/workflows/341a6db9-918f-4725-af96-23bd53d7fd4a

PR 4.1 https://github.com/apache/cassandra/pull/2149
PR trunk https://github.com/apache/cassandra/pull/2157

;;;","16/Feb/23 13:25;smiklosovic;running new build here

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1906/workflows/c63007df-4edd-4636-a68c-adf570eb0db2;;;","16/Feb/23 13:26;jlewandowski;+1
We will need a follow-up ticket to cleanup comprehensively the snapshot management mess. This ticket fixes an error which results from lack of synchronization of tasks which should be synchronized.
;;;","16/Feb/23 13:48;smiklosovic;Thanks Jacek, I fully agree. We should centralize all snapshot logic under SnapshotManager so logic related to snapshots is done only through that globally. Fixing all sychronization issues without this centralization just begs for more problems in the future.;;;","17/Feb/23 10:24;smiklosovic;for completeness as there were minor review comments of Jacek

j8 4.1 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1907/workflows/db3f0a18-7ca6-4959-b2fa-e8cd65bc9be8
j11 4.1 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1907/workflows/5335b5d6-ac92-4662-962f-d67aac1df69e
j8 trunk https://app.circleci.com/pipelines/github/instaclustr/cassandra/1914/workflows/092628b4-f591-4f3c-ac66-6f63169dba3b
j11 trunk https://app.circleci.com/pipelines/github/instaclustr/cassandra/1914/workflows/36a33544-2e2e-46a3-acf0-748c504e5df4

4.1 branch https://github.com/apache/cassandra/pull/2149
trunk branch https://github.com/apache/cassandra/pull/2157;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cassandra.yaml links don't work,CASSANDRA-18210,13522294,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,danyoung,danyoung,31/Jan/23 19:47,31/Jan/23 20:39,13/Jul/23 08:41,31/Jan/23 20:39,,,,,,,Documentation/Website,,,0,,,,,"On [https://cassandra.apache.org/doc/4.0/] the cassandra.yaml links in Configuring Cassandra don't work.
 # Go to [https://cassandra.apache.org/doc/4.0/cassandra/configuration/index.html]
 # Click [cassandra.yaml|https://cassandra.apache.org/doc/4.0/cassandra/configuration/index.html#configuration/cass_yaml_file.adoc]
 # You remain on the Configuring Cassandra page

The same appears to be true for trunk, 4.1, and 3.11 also.",,danyoung,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 31 20:39:56 UTC 2023,,,,,,,All,,,,"0|z1fiqg:",9223372036854775807,,,,,,,Normal,,,,,,,,,,,,,,,,,,"31/Jan/23 19:56;brandon.williams;I _think_ this probably has the same cause as CASSANDRA-18207 since converting the yaml is part of the same Makefile, and the site hasn't been regenerated since that ticket.  [~smiklosovic] does that sound right to you?;;;","31/Jan/23 20:03;smiklosovic;It does. I expect the website to be re-built first.;;;","31/Jan/23 20:39;brandon.williams;I forced the rebuild and everything looks good now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nodetool documentation not working,CASSANDRA-18207,13521952,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,slater_ben,slater_ben,29/Jan/23 23:39,30/Jan/23 21:51,13/Jul/23 08:41,30/Jan/23 21:51,3.11.15,4.0.8,4.1.1,5.0,,,Documentation,,,0,,,,,"Clicking on the nodetool in the Tool branch of the doco tree doesn't do anything.

Also, links found in Google search (eg [https://cassandra.apache.org/doc/latest/cassandra/tools/nodetool/tablehistograms.html)] result in ""Not Found"" error.",,e.dimitrova,mck,slater_ben,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 30 21:51:07 UTC 2023,,,,,,,All,,,,"0|z1fgn4:",9223372036854775807,,,,smiklosovic,,,Normal,,NA,,https://github.com/apache/cassandra/commit/74b0b2086f3a7e838acde21c8020f10f0a47955a,,,,,,,,,revert,,,,,"29/Jan/23 23:53;e.dimitrova;Thanks for reporting the problem. Indeed the website doesn't load anything with any of the versions 3.11+ when I go to Tools -> nodetool

CC Josh [~stefan.miklosovic] , [~erickramirezau] and [~polandll] 

 ;;;","30/Jan/23 07:37;smiklosovic;I am not sure why this is happening, yet.

in index.adoc there is

{code}
* xref:tools/cqlsh.adoc[CQL shell]
* xref:tools/nodetool/nodetool.adoc[nodetool]
* xref:tools/sstable/index.adoc[SSTable tools] 
* xref:tools/cassandra_stress.adoc[cassandra-stress tool]
* xref:tools/hash_password.adoc[hash password tool]
{code}

which seems to be just right.

However, the link ""nodetool"" points to ""https://cassandra.apache.org/doc/latest/cassandra/tools/index.html#tools/nodetool/nodetool.adoc"" which does not do anything.

EDIT:

also, there does not seem to be page about hash password tool added.

{code}
* xref:tools/hash_password.adoc[hash password tool]
{code}

EDIT:

the nodetool generation is broken by CASSANDRA-18197

I have checked out just commit before that was merged and it rendered it properly.

cc [~brandon.williams];;;","30/Jan/23 13:02;brandon.williams;I'm not sure how that broke it and it seems to work on my machine, but let's just revert: [3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18207-3.11].  I don't think we need CI for this but I can run the matrix if someone would like.;;;","30/Jan/23 13:06;smiklosovic;have you tried to generate website before and after CASSANDRA-18197? It did not work after the latter for me.;;;","30/Jan/23 13:16;brandon.williams;I ran it before, copied the entire doc dir and made it a git repo, ran it after and copied that dir over it, then inspected the output of 'git diff', which was only my patch.;;;","30/Jan/23 13:35;smiklosovic;./run.sh website build -g -u cassandra:/home/smiklosovic/dev/cassandra/cassandra-instaclustr/cassandra -b cassandra:generation

""generation"" branch is commit 93cc75ccdfd6747aa2e5b2344496a99c62e39d8a

This is what I see in the output:

{code}
gen-asciidoc:
     [exec] python3 ./scripts/gen-nodetool-docs.py
     [exec] Makefile:23: recipe for target 'gen-asciidoc' failed
     [exec]   File ""./scripts/gen-nodetool-docs.py"", line 50
     [exec]     while (batch := tuple(islice(it, n))):
     [exec]                  ^
     [exec] SyntaxError: invalid syntax
     [exec] make: *** [gen-asciidoc] Error 1
     [exec] Result: 2
{code}

I removed apache/cassandra-website:latest image to be sure that the website-building script will download all again.;;;","30/Jan/23 13:38;brandon.williams;You need python 3.8 for the walrus operator.  It is simple to fix that if we need support for lesser versions, though that's a concern in itself.;;;","30/Jan/23 13:46;smiklosovic;Doesnt website image have Python 3.6 bundled? I see the exact same behavior when building it locally. 
So we need to either downgrade the patch or upgrade the version of Python in the image, right? I would prefer the latter.;;;","30/Jan/23 13:48;brandon.williams;Here's a patch that removes the operator: https://github.com/driftx/cassandra/commit/d7512785ee35366a4d13337efa6a4322204163f1 and should work with python 3.6. 

bq. upgrade the version of Python in the image, right? I would prefer the latter.

It would be good to upgrade, certainly, though that is perhaps out of scope here.;;;","30/Jan/23 14:03;smiklosovic;Yes, this works! It renders it fine now.;;;","30/Jan/23 15:28;brandon.williams;||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18207-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/837/workflows/cbabafca-96ed-4c78-b4fc-f63f75bacfae]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18207-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/838/workflows/b3be286d-f4ae-41f9-bfe1-9ac5dfc02f75], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/838/workflows/c2c07c88-d168-4fc4-88fe-f25e0de24a7c]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18207-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/836/workflows/605b6299-d10e-4487-8eb4-614fadd484fb], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/836/workflows/fc3573c7-74a7-4ed2-bd02-2c243b160507]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18207-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/839/workflows/b2975508-398e-48e1-a5d1-112142438352], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/839/workflows/95d198a2-854a-47c4-aaea-f6d5697b72d0]|
;;;","30/Jan/23 21:46;smiklosovic;+1 thanks for the fast reaction!;;;","30/Jan/23 21:51;brandon.williams;Thanks for the review, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cassandra messaging to self changed behavior,CASSANDRA-18200,13521587,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,masokol,masokol,masokol,26/Jan/23 06:59,30/Jan/23 13:08,13/Jul/23 08:41,30/Jan/23 13:08,4.0.8,4.1.1,5.0,,,,Messaging/Internode,,,0,,,,,"During testing of Cassandra on AWS, we noticed some behavior changes between Cassandra 3.11 and Cassandra 4.0 when it comes to messaging.
When performing a range query with consistency local_quorum, Cassandra sents a request to itself and some peers.
In case of Cassandra 4.0, it's trying to connect to itself using the broadcast_address while in Cassandra 3.11 it's connecting using the local address (see [https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java#L152].

This translation seems to be missing in Cassandra 4.X. I think the best place to fix it would be here (see attached file): [https://github.com/apache/cassandra/blob/cassandra-4.0/src/java/org/apache/cassandra/net/OutboundConnectionSettings.java#L451]",,brandon.williams,masokol,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jan/23 07:13;masokol;patch.txt;https://issues.apache.org/jira/secure/attachment/13054815/patch.txt",,,,1.0,masokol,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 30 13:08:16 UTC 2023,,,,,,,All,,,,"0|z1fef4:",9223372036854775807,,,,brandon.williams,smiklosovic,,Normal,,4.0-alpha1,,https://github.com/apache/cassandra/commit/0b7e3a8ee7f9359eaf63208e12f32b19e6874e74,,,,,,,,,run CI,,,,,"26/Jan/23 12:49;brandon.williams;I think this may actually be a bug in 3.11, since it is not checking the preferred IP, which is what is stored when the snitch is configured with prefer_local set to true.  I need to think about this a bit more, but I am interested in the context of CASSANDRA-16718.;;;","26/Jan/23 13:14;masokol;[~brandon.williams] From my understanding, prefer_local is only used for the peers, in this case the node is trying to message itself.;;;","26/Jan/23 13:24;brandon.williams;Yes but these methods in OTC and OCS are used by everything.;;;","27/Jan/23 07:09;masokol;If I understand you correctly, you want prefer_local to affect the local node as well and not always use local IP?

I have also tried to use prefer_local, it only affects the peers not the messaging to node itself.

I've tested Cassandra 4 with my patch and now it works correctly, previously ranged queries and other communication within node through messaging did not work (because the pod behind LB cannot connect to itself through LB).;;;","27/Jan/23 14:01;brandon.williams;bq. If I understand you correctly, you want prefer_local to affect the local node as well and not always use local IP?

Not necessarily, I need to think about how listen_on_broadcast_address factors into this too.

bq. I have also tried to use prefer_local, it only affects the peers not the messaging to node itself.

All hosts uses these methods though, there is no distinction between self and peers when this is called.  We can see that getPreferredIP is being consulted already, and that returns the IP it was passed if no preferred IP was stored which is probably why it was a no-op for you.

That said, it does seem to me like the correct behavior to always route our own broadcast address back to the listen address, but then listen_on_broadcast_address would have no purpose, or at least I'm not sure how it would factor into this.;;;","27/Jan/23 16:08;brandon.williams;I think for this ticket, making 4.0's behavior compatible with what 3.11 does, makes sense.

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18200-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/826/workflows/efad0d63-ae57-4d4a-be69-657ca60ee8ca], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/826/workflows/cfaf30be-c9fe-41fc-8643-17553fe76708]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18200-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/824/workflows/43e1fa3a-0173-4a11-9a16-4aeff9b544b4], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/824/workflows/91a408fe-dbf1-43c3-bfc7-89465c2cf8ea]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18200-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/825/workflows/cf9b1159-6a57-4793-97b8-879fc3693a99], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/825/workflows/7c0967c4-7428-483f-9a23-d926659d95a0]|;;;","27/Jan/23 17:23;brandon.williams;Everything looks good, one env dtest problem and schemaReset which is CASSANDRA-18151. +1 from me.;;;","29/Jan/23 23:20;smiklosovic;+1. Thank you. [~brandon.williams] would you mind to merge it, please?;;;","30/Jan/23 13:08;brandon.williams;Sure.  Committed, thanks for the review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""AttributeError: module 'py' has no attribute 'io'"" reported in multiple tests",CASSANDRA-18198,13521528,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,claude,claude,25/Jan/23 15:52,20/Feb/23 02:09,13/Jul/23 08:41,14/Feb/23 21:35,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Test/dtest/python,,,0,,,,,"{{title = 'Timeout'}}
{{stream = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>}}
{{{}sep = '+'{}}}{{{}def write_title(title, stream=None, sep=""~""):{}}}
{{{}""""""Write a section title.{}}}{{{}If *stream* is None sys.stderr will be used, *sep* is used to{}}}
{{draw the line.}}
{{""""""}}
{{if stream is None:}}
{{stream = sys.stderr}}
{{> width = py.io.get_terminal_width()}}
{{E AttributeError: module 'py' has no attribute 'io}}

 

is reported in multiple tests as noted below.

possibly a class loader issue associated with CASSANDRA-18150

4.1
[https://ci-cassandra.apache.org/job/Cassandra-4.1/256/testReport/dtest-offheap.repair_tests.incremental_repair_test/TestIncRepair/test_multiple_full_repairs_lcs]

3.11
[https://ci-cassandra.apache.org/job/Cassandra-3.11/424/testReport/dtest.bootstrap_test/TestBootstrap/test_simultaneous_bootstrap/]

3.0
[https://ci-cassandra.apache.org/job/Cassandra-3.0/328/testReport/dtest-upgrade.upgrade_tests.upgrade_supercolumns_test/TestSCUpgrade/test_upgrade_super_columns_through_all_versions/]",,bereng,claude,maxwellguo,mck,xgerman42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Feb 20 02:09:29 UTC 2023,,,,,,,All,,,,"0|z1fe28:",9223372036854775807,,,,mck,,,Low,,NA,,https://github.com/apache/cassandra-dtest/commit/049703f5a66c55e77e7e392ff89c57ff06024e76,,,,,,,,,fix CI,,,,,"25/Jan/23 19:55;brandon.williams;I thought this was a problem with python 3.11 in CASSANDRA-18188, but I believe the actual cause is that the 'py' dependency isn't being found by the pytest-timeout package.  Which means these are just tests that timed out through pytest.mark.timeout, which then triggered the error produced.

This is strange, though.  If I run the docker image and go into the venv, the 'py' package is already there:

{noformat}
$ docker run -it apache/cassandra-testing-ubuntu2004-java11 /bin/bash
cassandra@c2ce4e76c5ee:~$ . ./env3.8/bin/activate
(env3.8) cassandra@c2ce4e76c5ee:~$ pip install py
Requirement already satisfied: py in ./env3.8/lib/python3.8/site-packages (1.11.0)
WARNING: You are using pip version 22.0.4; however, version 22.3.1 is available.
You should consider upgrading via the '/home/cassandra/env3.8/bin/python -m pip install --upgrade pip' command.
(env3.8) cassandra@c2ce4e76c5ee:~$
{noformat}

We can still add defense in depth however by declaring it explicitly, which I've done [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-18198].  I've started a Jenkins run, but the chances of hitting a timeout in one of the affected tests aren't great: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2226/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2226/pipeline]
 
;;;","25/Jan/23 20:07;brandon.williams;I thought perhaps the image had some version of 'py' that indeed lacked the 'io' submodule, but it's not only there, py.io.get_terminal_width() can be called and returns the correct width.;;;","26/Jan/23 18:55;brandon.williams;What I was missing here is that the virtualenvs in the /env3.x locations are for cqlsh, and dtest creates its own venv from inside the docker image.  If I follow what that does, I end up in a venv like this:

{noformat}
(venv) cassandra@0b4fc44433d6:~$ python -c 'import py; print(py.io.get_terminal_width());'
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
AttributeError: module 'py' has no attribute 'io'
(venv) cassandra@0b4fc44433d6:~$ pip install py
Collecting py
  Using cached py-1.11.0-py2.py3-none-any.whl (98 kB)
Installing collected packages: py
Successfully installed py-1.11.0
WARNING: You are using pip version 22.0.4; however, version 22.3.1 is available.
You should consider upgrading via the '/home/cassandra/venv/bin/python -m pip install --upgrade pip' command.
(venv) cassandra@0b4fc44433d6:~$ 
{noformat}

this is because the virtualenv is created with the system python3.8 from /usr/bin/python3.8, which is missing the py module:

{noformat}
cassandra@9186bcbeb831:~$ /usr/bin/python3.8
Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
[GCC 9.4.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import py
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ModuleNotFoundError: No module named 'py'
>>> 
{noformat}

The simplest solution is probably to declare it as a dependency in the dtests, as I did above [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-18198].;;;","27/Jan/23 13:54;mck;It won't get baked into the test images until they are built and deployed next time. But this will fix it each test runtime.
+1;;;","27/Jan/23 14:05;brandon.williams;bq. It won't get baked into the test images until they are built and deployed

That is indeed why I suggested we go this route.  Thanks for the review, committed!;;;","06/Feb/23 19:02;xgerman42;Butler: https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-4.0/failure/bootstrap_test/TestBootstrap/test_simultaneous_bootstrap;;;","06/Feb/23 19:19;brandon.williams;Can you point me to the error that is in the title?;;;","08/Feb/23 18:12;brandon.williams;I don't see anything related to this ticket, please open a new one.;;;","09/Feb/23 17:10;xgerman42;h1. Regression

dtest-offheap.bootstrap_test.TestBootstrap.test_simultaneous_bootstrap (from Cassandra dtests)
Failing for the past 1 build (Since [#1451|https://ci-cassandra.apache.org/job/Cassandra-trunk/1451/] )
[Took 5 min 9 sec.|https://ci-cassandra.apache.org/job/Cassandra-trunk/1451/testReport/dtest-offheap.bootstrap_test/TestBootstrap/test_simultaneous_bootstrap/history]
 
!https://ci-cassandra.apache.org/static/f3f9be2d/images/32x32/health-80plus.png! Failed 3 times in the last 30 runs. Flakiness: 17%, Stability: 90%
h3. Error Message

cassandra.OperationTimedOut: errors=\{'127.0.0.2:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.2:9042
h3. Stacktrace

self = <bootstrap_test.TestBootstrap object at 0x7f42b8ff1340> @since('2.1.1') def test_simultaneous_bootstrap(self): """""" Attempt to bootstrap two nodes at once, to assert the second bootstrapped node fails, and does not interfere. Start a one node cluster and run a stress write workload. Start up a second node, and wait for the first node to detect it has joined the cluster. While the second node is bootstrapping, start a third node. This should fail. @jira_ticket CASSANDRA-7069 @jira_ticket CASSANDRA-9484 """""" bootstrap_error = ""Other bootstrapping/leaving/moving nodes detected,"" \ "" cannot bootstrap while cassandra.consistent.rangemovement is true"" cluster = self.cluster cluster.set_environment_variable('CASSANDRA_TOKEN_PREGENERATION_DISABLED', 'True') cluster.populate(1) cluster.start() node1, = cluster.nodelist() node1.stress(['write', 'n=500K', 'no-warmup', '-schema', 'replication(factor=1)', '-rate', 'threads=10']) node2 = new_node(cluster) node2.start() for _ in range(30): # wait until node2 shows up ntout = node1.nodetool('status').stdout if re.search(r'UJ\s+' + node2.ip_addr, ntout): break time.sleep(0.1) node3 = new_node(cluster, remote_debug_port='2003') try: node3.start(wait_other_notice=False, verbose=False) except NodeError: pass # node doesn't start as expected time.sleep(.5) node2.watch_log_for(""Starting listening for CQL clients"") node3.watch_log_for(bootstrap_error) session = self.patient_exclusive_cql_connection(node2) # Repeat the select count(*) query, to help catch # bugs like 9484, where count(*) fails at higher # data loads. for _ in range(5): > assert_one(session, ""SELECT count(*) from keyspace1.standard1"", [500000], cl=ConsistencyLevel.ONE) bootstrap_test.py:885: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ tools/assertions.py:130: in assert_one res = session.execute(simple_query) ../venv/src/cassandra-driver/cassandra/cluster.py:2618: in execute return self.execute_async(query, parameters, trace, custom_payload, timeout, execution_profile, paging_state, host, execute_as).result() _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ self = <ResponseFuture: query='<SimpleStatement query=""SELECT count(*) from keyspace1.standard1"", consistency=ONE>' request_i...9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.2:9042 coordinator_host=None> def result(self): """""" Return the final result or raise an Exception if errors were encountered. If the final result or error has not been set yet, this method will block until it is set, or the timeout set for the request expires. Timeout is specified in the Session request execution functions. If the timeout is exceeded, an :exc:`cassandra.OperationTimedOut` will be raised. This is a client-side timeout. For more information about server-side coordinator timeouts, see :class:`.policies.RetryPolicy`. Example usage:: >>> future = session.execute_async(""SELECT * FROM mycf"") >>> # do other stuff... >>> try: ... rows = future.result() ... for row in rows: ... ... # process results ... except Exception: ... log.exception(""Operation failed:"") """""" self._event.wait() if self._final_result is not _NOT_SET: return ResultSet(self, self._final_result) else: > raise self._final_exception E cassandra.OperationTimedOut: errors=\{'127.0.0.2:9042': 'Client request timeout. See Session.execute[_async](timeout)'}, last_host=127.0.0.2:9042 ../venv/src/cassandra-driver/cassandra/cluster.py:4894: OperationTimedOut;;;","14/Feb/23 21:35;brandon.williams;That is a garden variety timeout, not related to the python error.;;;","20/Feb/23 02:09;maxwellguo;Hi [~brandon.williams] [~mck] 
I have also met some timeout exceptions last week, such as 
https://ci-cassandra.apache.org/job/Cassandra-4.0/545/testReport/dtest-novnode.repair_tests.incremental_repair_test/TestIncRepair/test_multiple_full_repairs_lcs/ , same dtest case but different c* version.
and some timeout exceptions have repeated more than once. So should I open new ticket for this? ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Builds being often aborted because of python3 ./scripts/gen-nodetool-docs.py being slow,CASSANDRA-18197,13521503,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,e.dimitrova,e.dimitrova,25/Jan/23 15:04,26/Jan/23 02:05,13/Jul/23 08:41,25/Jan/23 21:19,3.11.15,4.0.8,4.1.1,5.0,,,Build,,,0,,,,,"As discussed on CASSANDRA-18181, recently we see builds aborted as python3 ./scripts/gen-nodetool-docs.py is too slow. 

According to [~brandon.williams] most of the time in the script is spent in create_adoc, which is serially forking nodetool help for every command to gather it.

CC [~Anthony Grasso]",,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18181,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jan 25 21:19:55 UTC 2023,,,,,,,All,,,,"0|z1fdwo:",9223372036854775807,,,,mck,,,Low,,3.11.12,,https://github.com/apache/cassandra/commit/03c86cfcb0dd31a9c904e2561e3f8a1f26357a44,,,,,,,,,run CI,,,,,"25/Jan/23 15:09;brandon.williams;Patch adds concurrency to the adoc generation, working in batches of 3 (more doesn't really help at least on my macine) and this cuts the run time to around 30s.

||Branch||CI||
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18197-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/821/workflows/2b13ee0b-a523-4d9f-bc58-1bb6a98894be]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18197-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/820/workflows/ab7f2d3b-f47d-4c60-80e0-99afd5961c8c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/820/workflows/b707fbe5-d245-4bef-af49-191a4a54b201]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18197-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/822/workflows/7a76a7eb-0697-4ca8-a4a2-9c3985838c1f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/822/workflows/cab41040-0506-460a-8022-ec944e879814]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18197-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/823/workflows/3ce42dbc-7b9e-4c85-8211-9c449d0870df], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/823/workflows/992604c1-3a14-4e64-8ede-10721fc15fbb]|

Jenkins for a smoke test: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2228/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2228/pipeline]
;;;","25/Jan/23 20:57;mck;+1 on the code changes.;;;","25/Jan/23 21:19;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PaxosPrepare may add instances to the Electorate that are not in gossip,CASSANDRA-18194,13521166,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,dcapwell,dcapwell,dcapwell,24/Jan/23 20:20,08/Feb/23 11:52,13/Jul/23 08:41,27/Jan/23 20:39,4.1.1,5.0,,,,,Feature/Lightweight Transactions,,,0,,,,,"org.apache.cassandra.service.paxos.PaxosPrepare.RequestHandler#execute is given a list of electorate from the peer and attempts to compute its own, then replies back with this set.

On the peer side, we then have the set we sent and the set from the other instance... we then fetch the EndpointState from Gossiper and store into a Map, a map we later attempt to inject into Gossip.

It is possible that Gossiper does not know about the instance yet, so returns a null; causing a NullPointerException in downstream code.",,bdeggleston,dcapwell,,,,,,,,"smiklosovic closed pull request #2111: CASSANDRA-18194: PaxosPrepare may add instances to the Electorate that are not in gossip
URL: https://github.com/apache/cassandra/pull/2111


;08/Feb/23 11:52;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,0.0,dcapwell,,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Low Hanging Fruit,Code Inspection,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jan 27 17:10:58 UTC 2023,,,,,,,All,,,,"0|z1fbts:",9223372036854775807,,,,bdeggleston,,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/1c71e57f46f704228d41fb367e31cd11f0602134,,,,,,,,,existing tests,,,,,"25/Jan/23 23:28;bdeggleston;+1 thanks;;;","26/Jan/23 17:56;dcapwell;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18194-cassandra-4.1-31AC38AE-80A0-44DA-963B-C5F3A8EC2011]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18194-cassandra-4.1-31AC38AE-80A0-44DA-963B-C5F3A8EC2011]|[build|unknown]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18194-trunk-31AC38AE-80A0-44DA-963B-C5F3A8EC2011]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18194-trunk-31AC38AE-80A0-44DA-963B-C5F3A8EC2011]|[build|unknown]|
;;;","27/Jan/23 17:10;dcapwell;CI was mostly clean but looks like some builds failed in circle ci and not caused by the tests... trunk has new changes so rebased and rerunning CI;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Native Transport SSL tests failing,CASSANDRA-18191,13521100,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,claude,claude,24/Jan/23 10:19,24/Jan/23 20:53,13/Jul/23 08:41,24/Jan/23 20:53,,,,,,,,,,0,,,,," 
Cassandra 3.0
 

TestNativeTransportSSL.test_connect_to_ssl and TestNativeTransportSSL.test_connect_to_ssl (novnode)

[https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-3.0/failure/native_transport_ssl_test/TestNativeTransportSSL/test_connect_to_ssl]

As well as 
TestNativeTransportSSL.test_connect_to_ssl_optional and TestNativeTransportSSL.test_connect_to_ssl_optional (nvnode)

[https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-3.0/failure/native_transport_ssl_test/TestNativeTransportSSL/test_use_custom_ssl_port]


are failing after 2 merges that don't seem like they would impact SSL or server availaibility.

Most recent error message is:

cassandra.cluster.NoHostAvailable: ('Unable to connect to any servers',

{'127.0.0.1:9042': PermissionError(1, ""Tried connecting to [('127.0.0.1', 9042)]. Last error: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:992)"")}

)

 

Most recent changes made by 
[@smiklosovic|https://github.com/apache/cassandra/commits?author=smiklosovic] and [@driftx|https://github.com/apache/cassandra/commits?author=driftx] .",,claude,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18188,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 24 20:53:14 UTC 2023,,,,,,,All,,,,"0|z1fbfc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,"24/Jan/23 11:17;smiklosovic;Thanks for reporting this, [~claude]. I think that our changes are not relevant here. I tried to execute the test locally and it is failing as well, regardless how ""far"" I checkout 3.0 branch, way more beyond our recent commits. I see that when I was testing CASSANDRA-12525 (1) it was not failing yet but it strangely started to fail afterwards.

Is not this related to our recent support of Python 3.11?

I also see this in the log locally:
{code:java}
native_transport_ssl_test.py::TestNativeTransportSSL::test_connect_to_ssl
  /home/fermat/dev/cassandra/cassandra-dtest/lib/python3.10/site-packages/ccmlib/common.py:481: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    version = LooseVersion(str(version))

native_transport_ssl_test.py: 239 warnings
  /home/fermat/dev/cassandra/cassandra-dtest/dtest.py:284: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion('4.0') <= cassandra_version:

native_transport_ssl_test.py: 239 warnings
  /home/fermat/dev/cassandra/cassandra-dtest/dtest.py:286: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    elif LooseVersion('3.0') <= cassandra_version:

native_transport_ssl_test.py: 119 warnings
  /home/fermat/dev/cassandra/cassandra-dtest/dtest_setup.py:248: DeprecationWarning: Using ssl_options without ssl_context is deprecated and will result in an error in the next major release. Please use ssl_context to prepare for that release.
    cluster = PyCluster([node_ip],

native_transport_ssl_test.py: 119 warnings
  /home/fermat/dev/cassandra/cassandra-dtest/src/cassandra-driver/cassandra/io/libevreactor.py:267: DeprecationWarning: ssl.wrap_socket() is deprecated, use SSLContext.wrap_socket()
    self._connect_socket()

native_transport_ssl_test.py: 119 warnings
  /usr/lib/python3.10/ssl.py:1434: DeprecationWarning: ssl.PROTOCOL_TLS is deprecated
    context = SSLContext(ssl_version)
{code}
note: I have Python 3.10.6 locally.

(1) [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2185/]

 

CASSANDRA-12525 was comitted on 18th January 2023. We have merged Python 3.11 support to dtest repo on 20th January. That supports my hypothesis that upgrade to Python 3.11 broke this.;;;","24/Jan/23 12:02;brandon.williams;bq. Is not this related to our recent support of Python 3.11?

That is undone in CASSANDRA-18188, so we probably just need to try again.

https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-3.0/detail/Cassandra-3.0/326/
;;;","24/Jan/23 20:53;brandon.williams;This test is now passing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in upgrade_tests.cql_tests.cls.test_limit_ranges,CASSANDRA-18188,13521037,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,maedhroz,maedhroz,23/Jan/23 21:37,24/Jan/23 20:53,13/Jul/23 08:41,24/Jan/23 04:25,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Test/dtest/python,,,0,dtest,python,test,upgrade-dtest,"https://ci-cassandra.apache.org/job/Cassandra-trunk/1434/testReport/dtest-upgrade.upgrade_tests.cql_tests/cls/test_limit_ranges/

{noformat}
self = <abc.TestCQLNodes2RF1_Upgrade_indev_4_1_x_To_indev_trunk object at 0x7f27f9268e10>

    def test_limit_ranges(self):
        """""" Validate LIMIT option for 'range queries' in SELECT statements """"""
        cursor = self.prepare(ordered=True)
    
        cursor.execute(""""""
            CREATE TABLE clicks (
                userid int,
                url text,
                time bigint,
                PRIMARY KEY (userid, url)
            ) WITH COMPACT STORAGE;
        """""")
    
>       for is_upgraded, cursor in self.do_upgrade(cursor):

upgrade_tests/cql_tests.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
upgrade_tests/upgrade_base.py:197: in do_upgrade
    node1.start(wait_for_binary_proto=True)
../venv/lib/python3.11/site-packages/ccmlib/node.py:896: in start
    node.watch_log_for_alive(self, from_mark=mark)
../venv/lib/python3.11/site-packages/ccmlib/node.py:665: in watch_log_for_alive
    self.watch_log_for(tofind, from_mark=from_mark, timeout=timeout, filename=filename)
../venv/lib/python3.11/site-packages/ccmlib/node.py:584: in watch_log_for
    time.sleep(1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

title = 'Timeout'
stream = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>
sep = '+'

    def write_title(title, stream=None, sep=""~""):
        """"""Write a section title.
    
        If *stream* is None sys.stderr will be used, *sep* is used to
        draw the line.
        """"""
        if stream is None:
            stream = sys.stderr
>       width = py.io.get_terminal_width()
E       AttributeError: module 'py' has no attribute 'io'

../venv/lib/python3.11/site-packages/pytest_timeout.py:444: AttributeError
{noformat}",,e.dimitrova,maedhroz,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18191,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,DTest,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 24 04:25:14 UTC 2023,,,,,,,All,,,,"0|z1fb1s:",9223372036854775807,,,,mck,,,Normal,,NA,,https://github.com/apache/cassandra-builds/commit/36924a2c2193fe0e27000ada9308ebf79a0aee98,,,,,,,,,fix ci,,,,,"23/Jan/23 21:40;brandon.williams;This looks like fallout from CASSANDRA-18088, I'll look into it.  I am a bit surprised that jenkins decided to run all the tests under 3.11, though.;;;","23/Jan/23 22:10;brandon.williams;This is actually a problem w/3.11 and ccm, so the best solution is going back to running everything on 3.8 like before.  I have a patch for that [here|https://github.com/driftx/cassandra-builds/commit/291154198efbc8e95129a9a520b70e56379394e3].;;;","23/Jan/23 22:13;mck;+1;;;","23/Jan/23 22:18;e.dimitrova;-Shall we open a ticket to look into CCM too?-
Ignore me, I misread the problem;;;","23/Jan/23 22:24;brandon.williams;Testing [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-upgrade-driftx/1/].;;;","24/Jan/23 04:25;brandon.williams;Everything passed there, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
'Maximum memory usage reached' chunk cache log message doesn't specify which cache is exhausted,CASSANDRA-18184,13520855,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,yongjiang,bschoeni,bschoeni,20/Jan/23 19:28,07/Jul/23 03:36,13/Jul/23 08:41,02/Feb/23 17:49,4.0.8,4.1.1,5.0,,,,Observability/Logging,,,0,,,,,"With Cassandra 4.0.x, we are seeing this cassandra.log message very frequently on the majority of our Cassandra 4.0 clusters:

    _[INFO ] [epollEventLoopGroup-5-3] cluster_id=99 ip_address=127.0.0.50  NoSpamLogger.java:92 - Maximum memory usage reached (128.000MiB), cannot allocate chunk of 8.000MiB_

It took me several weeks to track down what it means, until I saw this start-up message

    _BufferPools.java:49 - Global buffer pool limit is 2.000GiB for chunk-cache and 128.000MiB for networking_

This maximum memory usage warning would benefit from clarifying that its the {*}network cache{*}, not the *off-heap chunk* *cache* which is exhausted.  With 'chunk cache' in both warning messages, they're too easily confused.

 ",,bschoeni,maxwellguo,smiklosovic,yongjiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Feb/23 09:22;yongjiang;18184-trunk.txt;https://issues.apache.org/jira/secure/attachment/13054974/18184-trunk.txt",,,,1.0,yongjiang,,,,,,,,,,,,Code,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,,Fri Jul 07 03:36:43 UTC 2023,,,,,,,All,,,,"0|z1f9xs:",9223372036854775807,,,,brandon.williams,smiklosovic,,Normal,,4.0-alpha4,,https://github.com/apache/cassandra/commit/0c58fbb8dd25beab4b4a81650be1ed0ec888ff66,,,,,,,,,"Submitted CI tasks.

Link to the patch: [^18184-trunk.txt]

 ",,,,,"28/Jan/23 05:25;yongjiang;Hi, [~bschoeni] , It should be straightforward to implement. We can actually include the name of bufferpool instance in noSpamLogger.info output. The name will tell if it is off-heap chunk cache or network cache. Can I take this project? I am new to Cassandra project and would like to try this task. Meanwhile, are you aware of an easy way to recreate the issue so that I can test my patch? Thank you!;;;","28/Jan/23 11:10;brandon.williams;Hi [~yongjiang], you should be able to reproduce by setting networking_cache_size_in_mb artificially low and generating some network traffic.;;;","28/Jan/23 11:26;yongjiang;Hi, [~brandon.williams], that's a good idea, I can easily reproduce it by setting the networking_cache_size to 1MiB. I will work on the patch. Thank you!;;;","28/Jan/23 18:40;bschoeni;Hi [~yongjiang] thanks for picking up this issue!  ;;;","01/Feb/23 09:37;maxwellguo;[~yongjiang]I think , it is better to create a pr from github.

1. fork a github repository of cassandra  for youerself;
2.create a branch of this issue
3.fix the problem on the newly created branch
4.run ci for your newly created branch with your fixed patch.
5.create a pr upstream to apache casssandra trunk ;;;","01/Feb/23 09:38;yongjiang;Created pull request and attached the patch file. I also started the CI tasks. Here are the links:
 *  [Pull request|https://github.com/apache/cassandra/pull/2123]
 * CI tasks: [java8|https://app.circleci.com/pipelines/gh/yongj/cassandra/12/workflows/b84087b6-27b5-4f3e-8b6e-5e4e95a9e6d3], [java11|https://app.circleci.com/pipelines/gh/yongj/cassandra/12/workflows/12268e6a-1844-466f-a0d0-44f096027f20]

The patch is based on trunk. I am not sure if we also need to create more patches for 4.0 and 4.1 branches?

I have tested the change on one GCP server and the new INFO warning message looks like below which includes the name of created buffer pool instance:
{code:java}
INFO  [Messaging-EventLoop-3-1] 2023-02-01 09:00:47,673 NoSpamLogger.java:105 - Maximum memory usage reached (1.000MiB) for networking, cannot allocate chunk of 8.000MiB {code}
Regarding the tests, I am not sure if the CI tasks are good enough. I am actually trying to run JUnit test on one GCP server. Will update result when it is available. 

[~brandon.williams], please help review and advise any changes are needed. Thank you!;;;","01/Feb/23 09:45;yongjiang;Hi, [~maxwellguo], thanks for the instruction. That's very helpful for noobs like me. I have just updated this Jira task one minute after your comment. :) I feel what I did is the same as the steps you listed. One thing I am not sure is the status of CI tasks. It seems some CI tasks will fail but I am not sure if it matters or not. Please advise, thank you!;;;","01/Feb/23 09:47;maxwellguo;may be the resource is limited, so some failed with timeout exception?

besides, add one comment for your code. ;;;","01/Feb/23 11:55;brandon.williams;I think we should fix this in 4.0, 4.1, and trunk.  Your patch looks good to me, I will handle CI if you create the branches.;;;","02/Feb/23 03:41;yongjiang;Hi, [~brandon.williams], I have created the branches and the pull requests. Please refer to below table. I also ran CI tasks for my own education and practice. Please take care of the CI if needed. Thank you!
||Branches||PR||Circle CI||
|trunk|[PR# 2123|https://github.com/apache/cassandra/pull/2123]|[java 8|https://app.circleci.com/pipelines/gh/yongj/cassandra/13/workflows/2d2a6343-9862-485a-81ec-82bfb19ee824], [java 11|https://app.circleci.com/pipelines/gh/yongj/cassandra/13/workflows/fe53bcf3-60ab-438e-add4-b7fc7b54946b]|
|cassandra-4.0|[PR# 2130|https://github.com/apache/cassandra/pull/2130]|[java 8|https://app.circleci.com/pipelines/gh/yongj/cassandra/14/workflows/1db0c352-a26f-4546-9a6e-0d23daf926ed], [java 11|https://app.circleci.com/pipelines/gh/yongj/cassandra/14/workflows/243a1f0b-7fb9-4ba7-90a2-44a1f20de440]|
|cassandra-4.1|[PR# 2129|https://github.com/apache/cassandra/pull/2129]|[java 8|https://app.circleci.com/pipelines/gh/yongj/cassandra/15/workflows/da2e2f46-2864-4e54-8e96-4384c6885d49], [java 11|https://app.circleci.com/pipelines/gh/yongj/cassandra/15/workflows/6a75b746-e9ec-4370-8a0e-147f8b2ad4a9]|

 ;;;","02/Feb/23 15:20;brandon.williams;bq.  I also ran CI tasks for my own education and practice.

You did a nice job!  Unfortunately though we need to use higher (paid) resources to cover the dtests that otherwise timeout.  I've started that here:

||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18184-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/850/workflows/3a3799b4-0028-4841-9498-87f528df081a], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/850/workflows/0a6e87c6-a038-406a-add3-ddf817f39e0f]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18184-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/852/workflows/bc232718-f790-4b1d-b153-580b7da134f9], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/852/workflows/d9595c72-0649-4d43-b8ee-f456e28d0caa]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18184-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/851/workflows/ca6e2994-9ebe-40ca-b9f7-7d58da71c9cb], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/851/workflows/7a912e3f-e175-4fb4-98bb-d821b19b3efa]|
 
and will check back when that has completed.
;;;","02/Feb/23 17:30;brandon.williams;Everything looks good to me, +1.;;;","02/Feb/23 17:41;smiklosovic;Straightforward patch! +1. Thanks everybody.;;;","02/Feb/23 17:49;brandon.williams;Committed, thanks.;;;","03/Feb/23 02:19;yongjiang;Great! Thank you everyone for the help! [~brandon.williams] , [~maxwellguo] , [~smiklosovic] !;;;","07/Jul/23 03:36;bschoeni;[~yongjiang] thanks so much for your work on this!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rat targets do not adhere to build.dir property,CASSANDRA-18183,13520578,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,20/Jan/23 12:12,30/Jan/23 10:38,13/Jul/23 08:41,23/Jan/23 14:35,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Build,,,0,,,,,"I detected this when I was trying to put my build dir to ramdisk. I have plenty of RAM available on my workstation (64GB) and I was thinking about moving ""build"" dir to ramdisk so I could make it faster a little bit and also spare some write cycles to ssd. It can look like irrelevant improvement but I think that if devs are building the project repeatedly times and times again, this can easily add up.
{code:java}
mkdir /tmp/cassandra
# in /etc/fstab
tmpfs /tmp/cassandra tmpfs defaults,noatime,size=2048M,x-gvfs-show,mode=1777 0 0
# then sudo mount -a
# I have worktree setup so the build for each branch will end up in different dir:
# mkdir -p /tmp/cassandra/{trunk,cassandra-4.1,cassandra-4.0,cassandra-3.11,cassandra-3.0}
{code}
Then in build.properties for each respective branch:
{code:java}
ant.gen-doc.skip: true
build.dir: /tmp/cassandra/trunk/build
build.dir.lib: /tmp/cassandra/trunk/build/lib
{code}
The problem with this is that it fails on rat, because there is not ""build.dir"" property used, it is hardcoded to ""build"" but there is not anything to rat on so it will hang.

To have the very same experience, I am also creating a symlink 
 
{code}
ln -s /tmp/cassandra/trunk/build build
{code}

so ""cd build / ls build"" in the root of the repository will take me to ramdisk. The problem with this is that there is ""build/"" in .gitignore but not ""build"" (as file) so the repository is in dirty state. I suggest to add ""build"" to .gitignore as part of this PR as that is just an opportunistic fix really.",,smiklosovic,,,,,,,,,"smiklosovic opened a new pull request, #2106:
URL: https://github.com/apache/cassandra/pull/2106

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;20/Jan/23 12:26;githubbot;600","smiklosovic closed pull request #2106: CASSANDRA-18183
URL: https://github.com/apache/cassandra/pull/2106


;30/Jan/23 10:38;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jan 20 15:28:20 UTC 2023,,,,,,,All,,,,"0|z1f888:",9223372036854775807,,,,brandon.williams,,,Low,,3.0.25,,https://github.com/apache/cassandra/commit/357c0d5a896ca79065b0b3e18b4e6f33a87bd021,,,,,,,,,"successful CI, ant artifacts on different build propreties will not fail the build",,,,,"20/Jan/23 12:27;smiklosovic;3.0 [https://github.com/apache/cassandra/pull/2106]
3.0 CI [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2208/]

3.11 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18183-3.11]
4.0 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18183-4.0]
4.1 [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18183-4.1]
trunk [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18183-trunk]

;;;","20/Jan/23 13:06;smiklosovic;[~mck] [~brandon.williams] would you take a look? I am running 3.0 build, do you indeed want me to run all 5 branches for this? PRs for other branches are exactly same.;;;","20/Jan/23 15:11;brandon.williams;bq. do you indeed want me to run all 5 branches for this?

That's overkill for a simple build change like this. I am mostly +1, but why the .gitignore modification?;;;","20/Jan/23 15:22;smiklosovic;I mentioned that at the bottom in the description:

To have the very same experience, I am also creating a symlink

ln -s /tmp/cassandra/trunk/build build

so ""cd build / ls build"" in the root of the repository will take me to ramdisk. The problem with this is that there is ""build/"" in .gitignore but not ""build"" (as file) so the repository is in dirty state. I suggest to add ""build"" to .gitignore as part of this PR as that is just an opportunistic fix really.;;;","20/Jan/23 15:28;brandon.williams;Ah, I see, that makes sense, thanks. +1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix tests post JDK-8210522 (rewrite reflection of ""modifiers"" field)",CASSANDRA-18181,13520255,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,e.dimitrova,e.dimitrova,e.dimitrova,19/Jan/23 23:58,30/Jan/23 22:25,13/Jul/23 08:41,30/Jan/23 22:25,5.0,,,,,,CI,,,0,,,,," 

From JDK-8210522:
{code:java}
Core reflection has a filtering mechanism to hide security and integrity sensitive fields and methods from Class getXXXField(s) and getXXXMethod(s). The filtering mechanism has been used for several releases to hide security sensitive fields such as System.security and Class.classLoader.
This CSR proposes to extend the filters to hide fields from a number of highly security sensitive classes in java.lang.reflect and java.lang.invoke.
{code}
We are using at a few places in our tests 
{code:java}
Field.class.getDeclaredField(""modifiers"");{code}
This breaks as expected when tests are run with JDK17, example:
 
{code:java}
java.lang.RuntimeException: java.lang.NoSuchFieldException: modifiers
 at org.apache.cassandra.transport.MessagePayloadTest.makeCqlQueryHandlerAccessible(MessagePayloadTest.java:79)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:568)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
 at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
 at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
 at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)
 at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54) 
Caused by: java.lang.NoSuchFieldException: modifiers at java.base/java.lang.Class.getDeclaredField(Class.java:2610) 
at org.apache.cassandra.transport.MessagePayloadTest.makeCqlQueryHandlerAccessible(MessagePayloadTest.java:70) 
... 15 more{code}
 ",,e.dimitrova,mck,smiklosovic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18197,,,,,0.0,e.dimitrova,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,CASSANDRA-16895,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 30 22:25:26 UTC 2023,,,,,,,All,,,,"0|z1f68g:",9223372036854775807,,,,mck,,,Normal,,,,https://github.com/apache/cassandra/commit/6c90950489a42a38a6ddfa45f79c84a110dffbe7,,,,,,,,,"The build finished successfully.
Submitting the patch for review:
||Patch||CircleCI||Jenkins||CircleCI||
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/a06dbb6b8f90d5b92dfa6ebffd276a218fae57fe]|[simulator tests, still not running in Jenkns|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2185/workflows/5370326f-a9b9-472a-a226-675b24201f3c]|[first try; |https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2220/]
[the aborted built successfully rerun|https://ci-cassandra.apache.org/job/Cassandra-devbranch-artifacts/]|in-jvm and unit tests(J17 test workflow, non-related failures expected) - [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/9ca49487-937a-4c72-bc78-4fbefe23db76], [J17|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/e3dc630b-b7a4-4f5b-8f29-489bf43ad90f]|

 ",,,,,"20/Jan/23 16:44;e.dimitrova;h5. This affects Java distributed tests, [Instance.startup|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/impl/Instance.java#L653] and some other tests:
 * ConnectionTest
 * ProxyHandlerConnectionsTest
 * ConnectionBurnTestTest
 * FramingTest
 * MessageSerializationPropertyTest
 * MessageTest
 * OutboundConnectionsTest
 * ProxyHandlerConnectionsTest
 * DriverBurnTests
 * SimpleClientBurnTest
 * MessagePayloadTest

The patch is posted [here|https://github.com/ekaterinadimitrova2/cassandra/commit/a06dbb6b8f90d5b92dfa6ebffd276a218fae57fe]

The solution used is similar to what other projects did, for example HBase.

It was already discussed in CASSANDRA-17178

Pushed Jenkins CI run (to cover J8+J11), the job is in the queue as there are already 2 jobs running in Jenkins dev. 

I will check back and post a link later today to the trunk J8+J11 Jenkins CI run but I am fairly confident the run will be fine as I ran some of the tests locally and I was running this patch also with JDK17 for some time, too. Here is the run with J17 branch [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/9ca49487-937a-4c72-bc78-4fbefe23db76] and [J17|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/e3dc630b-b7a4-4f5b-8f29-489bf43ad90f] there are certain failures but those are not related to what we address here. 

While this patch is not needed for J8+J11 It is a preparation for when we switch to J11+J17. Trying to push in everything we can until CASSANDRA-17281 and a few other things are disentangled

 ;;;","20/Jan/23 22:35;e.dimitrova;As part of another ticket there were new images pushed and CI was in a broken state for a bit until the second image was also pushed. This broke the Jenkins CI build I had.

I just restarted the build [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2212/];;;","21/Jan/23 21:24;e.dimitrova;Wall of failures in DTests, probably it didn't download the updated DTest trunk branch

Just pushed it again [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2214/];;;","21/Jan/23 22:57;e.dimitrova;I just started the simulator tests in CircleCI as they are not added yet to Jenkins (CASSANDRA-18003) - they finished successfully [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2185/workflows/5370326f-a9b9-472a-a226-675b24201f3c];;;","22/Jan/23 21:32;e.dimitrova;Interesting, I still see issues related to the Python support tickets in Jenkins, but if I run DTests in CircleCI with the same branches as Jenkins - they finished [fine|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2187/workflows/0b2d1d8b-c2c2-48da-9345-d25c01f39e5a]

I will investigate further tomorrow.;;;","24/Jan/23 19:11;e.dimitrova;New Jenkins run [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2220/]
It seems that CI was not in a good shape the other day so better to rebase and run it again. On successful completion I will ping people for review;;;","25/Jan/23 03:55;e.dimitrova;Weird, one of the builds now got aborted with:

{code:java}
15:09:48 gen-asciidoc:
15:09:48      [exec] python3 ./scripts/gen-nodetool-docs.py
15:14:48 Build timed out (after 5 minutes). Marking the build as aborted.
15:14:48      [exec] Terminated
15:14:48      [exec] Makefile:23: recipe for target 'gen-asciidoc' failed
15:14:48      [exec] make: *** [gen-asciidoc] Terminated
15:14:48      [exec] Result: 2
15:14:48 
15:14:48 gen-doc:
15:14:48 
15:14:48 sources-jar:
15:14:48 Build was aborted
15:14:48 SSH: Current build result is [ABORTED], not going to run.
15:14:48 [PostBuildScript] - [INFO] Executing post build scripts.
15:14:48 [cassandra] $ /bin/sh -xe /home/jenkins/tmp/jenkins16069333297066315187.sh
{code}
This has nothing to do with this patch...
;;;","25/Jan/23 13:09;mck;This happens a lot, the {{python3 ./scripts/gen-nodetool-docs.py}} is sloooow.
[~anthonygrasso]?;;;","25/Jan/23 13:14;smiklosovic;Btw while I was wokring on CASSANDRA-18183 I noticed that this script does not work either if build.dir and build.dir.lib are set to something else but default. Probably not worth to fix it here, just saying. ;;;","25/Jan/23 13:34;brandon.williams;Most of the time in the script is spent in create_adoc, which is serially forking nodetool help for every command to gather it.;;;","25/Jan/23 14:50;e.dimitrova;Thanks, I will open a ticket and ping Anthony there. Does anyone know how can I rerun only the aborted build in favor of saving time and resources?;;;","25/Jan/23 15:45;mck;bq. Does anyone know how can I rerun only the aborted build in favor of saving time and resources?

""Matrix Reloaded"" on https://ci-cassandra.apache.org/job/Cassandra-devbranch-artifacts/2157/
(it won't change the result of the parent pipeline job though);;;","25/Jan/23 21:04;e.dimitrova;Thanks, [~mck] 
{quote}[https://ci-cassandra.apache.org/job/Cassandra-devbranch-artifacts/2157/]
{quote}
Is that the right link? I can see the yesterday aborted build, but I am not sure where is the newly submitted one?;;;","25/Jan/23 21:13;mck;I did not initiate the matrix reloaded rerun. Just explaining how it's done.;;;","25/Jan/23 21:19;e.dimitrova;Oops, I totally misread.

I just reloaded it [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch-artifacts/], thanks!;;;","26/Jan/23 01:49;e.dimitrova;The build finished successfully.
Submitting the patch for review:
||Patch||CircleCI||Jenkins||CircleCI||
|[trunk|https://github.com/ekaterinadimitrova2/cassandra/commit/a06dbb6b8f90d5b92dfa6ebffd276a218fae57fe]|[simulator tests, still not running n Jenkns|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2185/workflows/5370326f-a9b9-472a-a226-675b24201f3c]|[first try|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2220/], [the aborted built successfully rerun|https://ci-cassandra.apache.org/job/Cassandra-devbranch-artifacts/]|in-jvm and unit tests(J17 test workflow, non-related failures expected) - [J11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/9ca49487-937a-4c72-bc78-4fbefe23db76], [J17|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2182/workflows/e3dc630b-b7a4-4f5b-8f29-489bf43ad90f]|

[~dcapwell], [~benedict] anyone of you up for review, we've already discussed this briefly in CASSANDRA-17178?

 ;;;","27/Jan/23 13:43;mck;+1;;;","27/Jan/23 15:19;e.dimitrova;Thank you for the review!

Last rebase and CircleCI sanity check J11 run [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2199/workflows/87115397-1e81-4eaa-9277-500bcb0a1032] (to save resources only unit tests, in-jvm and simulator as they are to be affected by this change)
On successful run and if you do not want more tests run I will commit. 

(the new patches in trunk were doc oriented from what I saw so it is really sanity check run for me)
;;;","27/Jan/23 20:53;e.dimitrova;And while discussing some CircleCI problem I realized it is good to run also the [in-jvm upgade tests|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2199/workflows/70f4a964-3427-4110-9403-43aedbf16566];;;","30/Jan/23 21:33;e.dimitrova;Well, at the end a bunch of commits landed on Friday while I was doing ""final"" testing

Rebase and last pre-commit run only with J8 for sanity check:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2201/workflows/12e1be71-d6d1-49be-8c3e-7e471bfac92a]

 ;;;","30/Jan/23 22:25;e.dimitrova;The only failure is reported in CASSANDRA-18144

Committed to trunk, thanks

To https://github.com/apache/cassandra.git

   [9ec90d0e69..6c90950489|https://github.com/apache/cassandra/commit/6c90950489a42a38a6ddfa45f79c84a110dffbe7]  trunk -> trunk;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Test Failure: CASTest Message serializedSize(12) does not match what was written with serialize(out, 12) for verb PAXOS2_COMMIT_AND_PREPARE_RSP",CASSANDRA-18164,13519659,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,benedict,mck,mck,15/Jan/23 11:55,20/Jan/23 10:36,13/Jul/23 08:41,20/Jan/23 10:36,4.1.1,5.0,,,,,Test/dtest/java,,,0,,,,,"Flaky. Teardown doesn't look to be clean.

{noformat}
org.apache.cassandra.distributed.shared.ShutdownException: Uncaught exceptions were thrown during test
	at org.apache.cassandra.distributed.impl.AbstractCluster.checkAndResetUncaughtExceptions(AbstractCluster.java:1057)
	at org.apache.cassandra.distributed.impl.AbstractCluster.close(AbstractCluster.java:1043)
	at org.apache.cassandra.distributed.test.CASTest.afterClass(CASTest.java:97)
	Suppressed: java.lang.RuntimeException: java.lang.AssertionError: Message serializedSize(12) does not match what was written with serialize(out, 12) for verb PAXOS2_COMMIT_AND_PREPARE_RSP and serializer class org.apache.cassandra.net.Message$Serializer; expected 1077, actual 1079
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:108)
		at org.apache.cassandra.distributed.impl.Instance.lambda$null$6(Instance.java:512)
		at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133)
		at org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:142)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.lang.Thread.run(Thread.java:750)
	Caused by: java.lang.AssertionError: Message serializedSize(12) does not match what was written with serialize(out, 12) for verb PAXOS2_COMMIT_AND_PREPARE_RSP and serializer class org.apache.cassandra.net.Message$Serializer; expected 1077, actual 1079
		at org.apache.cassandra.distributed.impl.Instance.serializeMessage(Instance.java:422)
		at org.apache.cassandra.distributed.impl.Instance.lambda$registerOutboundFilter$5(Instance.java:362)
		at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:54)
		at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
		at org.apache.cassandra.net.MessagingService.send(MessagingService.java:425)
		at org.apache.cassandra.net.MessagingService.send(MessagingService.java:395)
		at org.apache.cassandra.net.MessagingService.respond(MessagingService.java:407)
		at org.apache.cassandra.service.paxos.PaxosCommitAndPrepare$RequestHandler.doVerb(PaxosCommitAndPrepare.java:128)
		at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
		at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:64)
		at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:50)
		at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
{noformat}",,benedict,e.dimitrova,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,benedict,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Fri Jan 20 10:36:16 UTC 2023,,,,,,,All,,,,"0|z1f2lk:",9223372036854775807,,,,mck,,,Low,,4.1.0,,https://github.com/apache/cassandra/commit/bb2c16c677b0f5ace6f6721069e8c21a584e33f9,,,,,,,,,CI,,,,,"15/Jan/23 11:57;mck;[~benedict] …?;;;","15/Jan/23 12:11;benedict;Hmm. Surprised by this, and that it didn't show up before...? Checking.;;;","15/Jan/23 12:17;benedict;Oh, wow. {{EndpointState}} is mutable, and we aren't copying it. Easy fix, anyway.;;;","16/Jan/23 09:16;benedict;[trunk|https://github.com/belliottsmith/cassandra/tree/18164-trunk];;;","18/Jan/23 16:04;mck;CI (with repeated runs)
 - trunk
 -- [https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/67/workflows/11ec5c24-145b-4de5-b88d-303ef30babbe]
 -- [https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/67/workflows/1915f239-d352-4ca8-96f9-0a263852ec83/jobs/3283] 
 - 4.1
 -- [https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/68/workflows/cc99703b-6237-4d73-97db-03da5858fdc9]
 -- [https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/68/workflows/84862d56-aee3-4503-82a5-0972b12e3ebb] 

On these four runs I had consistent failures with dtests {{test_network_topology_strategy}} and {{{}test_network_topology_strategy_each_quorum{}}}. But re-running those tests with xlarge containers fixed it: [https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/69/workflows/470a98f3-c1e4-4a5a-b7e9-cf3dcc807ca5/jobs/3285] 

([~edimitrova], i thought we fixed this with CASSANDRA-18127 ?)

EDIT: nm, i see CASSANDRA-18051 now.;;;","18/Jan/23 16:04;mck;+1 on review;;;","18/Jan/23 16:10;e.dimitrova;{code:java}
(Ekaterina Dimitrova, i thought we fixed this with CASSANDRA-18127 ?){code}
Right on spot, I am just looking into this today, the ticket is CASSANDRA-18051. I was just discussing it with [~brandon.williams] in a chat. Those are large tests, and CASSANDRA-18127 was about upgrade tests;;;","20/Jan/23 10:36;mck;Committed as [bb2c16c677b0f5ace6f6721069e8c21a584e33f9|https://github.com/apache/cassandra/commit/bb2c16c677b0f5ace6f6721069e8c21a584e33f9].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test Failure: repair_tests.deprecated_repair_test.TestDeprecatedRepairNotifications.test_deprecated_repair_error_notification,CASSANDRA-18156,13519645,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,mck,mck,15/Jan/23 09:05,22/Mar/23 10:51,13/Jul/23 08:41,22/Mar/23 10:51,3.0.29,3.11.15,,,,,Test/dtest/python,,,0,,,,,"Failing since https://ci-cassandra.apache.org/job/Cassandra-3.0/313/testReport/dtest.repair_tests.deprecated_repair_test/TestDeprecatedRepairNotifications which is https://github.com/apache/cassandra/commit/13d495aa7d5b7a7c121fcc9e105f79107c5c2a1c from CASSANDRA-17254 

but can be reproduced earlier in circleci, e.g. https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/64/workflows/f99abc05-aa9b-42de-a424-44ab7c247e76/jobs/3175 

Only two commits are in this time-range (10th to 30th November) in cassandra-dtest
 - https://github.com/apache/cassandra-dtest/commit/7f2b8eda5c52fb6f637aa7166e2d48cd34a64eec (CASSANDRA-17679)
 - https://github.com/apache/cassandra-dtest/commit/e0d3cc90558a17b63634d15ee6df339ceb87b225 (CASSANDRA-15402)",,bereng,maxwellguo,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Mar 22 10:51:59 UTC 2023,,,,,,,All,,,,"0|z1f2ig:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra-dtest/commit/5f725067532589161ae8c5ca60c05782480a452c,,,,,,,,,run CI,,,,,"15/Jan/23 09:10;mck;[~jmckenzie], [~stefan.miklosovic], [~maxwellguo] ?;;;","15/Jan/23 11:22;maxwellguo;OK,Thanks，I will take a look into this.;;;","21/Mar/23 15:19;brandon.williams;I looked into this a bit and we can see that none of the mentioned commits broke this if we reorder the asserts to check the nodetool output first:

{noformat}
test_deprecated_repair_error_notification failed and was not selected for rerun.
        <class 'AssertionError'>
        Legacy nodetool didn't print an error message for the failed repair
assert -1 > -1
 +  where -1 = <built-in method find of str object at 0x7f375d70fe70>('error')
 +    where <built-in method find of str object at 0x7f375d70fe70> = ""nodetool: Failed to connect to 'localhost:7100' - URISyntaxException: 'Malformed IPv6 address at index 7: rmi://[localhost]:7100'.\n"".find
        [<TracebackEntry /home/drift/cassandra-dtest/repair_tests/deprecated_repair_test.py:270>]
{noformat}

I did this and added legacy parsing to the 2.1 side [here|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-18156].

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18156-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/913/workflows/9f61a183-9cad-4145-9859-8031592d1fd3]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18156-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/914/workflows/19c0deff-a592-4906-8439-d1427123bd31]|

;;;","22/Mar/23 09:14;bereng;LGMT and failures are aligned to current CI status;;;","22/Mar/23 10:51;brandon.williams;Thanks for the quick review!  Committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Memtable being flushed without hostId in version ""me"" and newer during CommitLogReplay",CASSANDRA-18153,13517919,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,abonacin,abonacin,abonacin,12/Jan/23 19:43,12/Apr/23 16:10,13/Jul/23 08:41,31/Mar/23 15:44,3.0.29,3.11.15,4.0.9,4.1.2,5.0,,Local/SSTable,,,0,,,,,"On ticket CASSANDRA-16619 some files were changed to allow Cassandra to store HostID in the new ""me"" SSTable version.

But SSTables flushed during CommitLogReplay miss this HostID info.

 

In the next Cassandra startup, if these SSTables were still present, system.log will show:


{{WARN Origin of 3 sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored}}

{{WARN }}{{{}Origin of 3 sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored{}}}{{{}{}}}{{ }}

 

And debug.log will show a list of SSTables, witch can include ""md"" and ""me"" version (before upgradesstables):

 

{{Ignored commitLogIntervals from the following sstables: [/var/lib/cassandra/data/system/compaction_history-b4dbb7b4dc493fb5b3bfce6e434832ca/me-3-big-Data.db, /var/lib/cassandra/data/system/compaction_history-b4dbb7b4dc493fb5b3bfce6e434832ca/md-1-big-Data.db, /var/lib/cassandra/data/system/compaction_history-b4dbb7b4dc493fb5b3bfce6e434832ca/md-2-big-Data.db]}}

 

https://issues.apache.org/jira/browse/CASSANDRA-16619",,abonacin,Aburadeh,e.dimitrova,jlewandowski,maedhroz,mck,samt,smiklosovic,tsteinmaurer,"abonacin opened a new pull request, #2096:
URL: https://github.com/apache/cassandra/pull/2096

   … and newer during CommitLogReplay
   
   This issue cause some WARN during startup - WARN Origin of N sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored RootCause: Storage service is not yet available during commitlog replay phase. Solution: We can get host uuid from systemkeyspace.
   
   by ABonacin
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 18:06;githubbot;600","abonacin opened a new pull request, #2097:
URL: https://github.com/apache/cassandra/pull/2097

   … and newer during CommitLogReplay
   
   This issue cause some WARN during startup - WARN Origin of N sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored RootCause: Storage service is not yet available during commitlog replay phase. Solution: We can get host uuid from systemkeyspace.
   
   by ABonacin
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 18:19;githubbot;600","abonacin opened a new pull request, #2098:
URL: https://github.com/apache/cassandra/pull/2098

   … and newer during CommitLogReplay
   
   This issue cause some WARN during startup - WARN Origin of N sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored RootCause: Storage service is not yet available during commitlog replay phase. Solution: We can get host uuid from systemkeyspace.
   
   by ABonacin
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 18:28;githubbot;600","abonacin opened a new pull request, #2099:
URL: https://github.com/apache/cassandra/pull/2099

   … and newer during CommitLogReplay
   
   This issue cause some WARN during startup - WARN Origin of N sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored RootCause: Storage service is not yet available during commitlog replay phase. Solution: We can get host uuid from systemkeyspace.
   
   by ABonacin
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 19:46;githubbot;600","abonacin opened a new pull request, #2100:
URL: https://github.com/apache/cassandra/pull/2100

   … and newer during CommitLogReplay
   
   This issue cause some WARN during startup - WARN Origin of N sstables is unknown or doesn't match the local node; commitLogIntervals for them were ignored RootCause: Storage service is not yet available during commitlog replay phase. Solution: We can get host uuid from systemkeyspace.
   
   by ABonacin
   
   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 19:50;githubbot;600","smiklosovic commented on code in PR #2215:
URL: https://github.com/apache/cassandra/pull/2215#discussion_r1138347936


##########
src/java/org/apache/cassandra/db/SystemKeyspace.java:
##########
@@ -1150,6 +1150,7 @@ public static synchronized UUID setLocalHostId(UUID hostId)
     {
         String req = ""INSERT INTO system.%s (key, host_id) VALUES ('%s', ?)"";
         executeInternal(String.format(req, LOCAL, LOCAL), hostId);
+        forceBlockingFlush(LOCAL);

Review Comment:
   this is quite a good catch, actually.



;16/Mar/23 09:19;githubbot;600","smiklosovic commented on code in PR #2215:
URL: https://github.com/apache/cassandra/pull/2215#discussion_r1138350890


##########
src/java/org/apache/cassandra/db/commitlog/CommitLog.java:
##########
@@ -112,6 +114,11 @@ CommitLog start()
         return this;
     }
 
+    public boolean hasFilesToReplay()
+    {
+        return new File(segmentManager.storageDirectory).listFiles(unmanagedFilesFilter).length > 0;

Review Comment:
   IDEA complains that this:
   
   new File(segmentManager.storageDirectory).listFiles(unmanagedFilesFilter)
   
   can produce NPE.
   
   You should rewrite this to use Cassandra's ""File"", not Java's one. 
   
   I know this is branch 3.11 where that stuff is not in yet but IDE complaining about NPE should be fixed anyway somehow I guess.



;16/Mar/23 09:22;githubbot;600","smiklosovic commented on code in PR #2215:
URL: https://github.com/apache/cassandra/pull/2215#discussion_r1138354892


##########
src/java/org/apache/cassandra/db/commitlog/CommitLog.java:
##########
@@ -177,7 +182,7 @@ public void recoverPath(String path) throws IOException
 
     private static UUID getLocalHostId()
     {
-        return Optional.ofNullable(StorageService.instance.getLocalHostUUID()).orElseGet(SystemKeyspace::getLocalHostId);
+        return StorageService.instance.getLocalHostUUID();

Review Comment:
   if I understand that correctly, this will never be null anymore because we are doing that initialization in `CassandraDaemon.`



##########
src/java/org/apache/cassandra/service/CassandraDaemon.java:
##########
@@ -236,6 +236,13 @@ protected void setup()
         // This should be the first write to SystemKeyspace (CASSANDRA-11742)
         SystemKeyspace.persistLocalMetadata();
 
+        // We should store host ID as soon as possible in the system.local table and flush that table to disk so that
+        // we can be sure that those changes are stored in sstable and not in the commit log (see CASSANDRA-18153).

Review Comment:
   sstable -> SSTable



;16/Mar/23 09:25;githubbot;600","smiklosovic commented on code in PR #2215:
URL: https://github.com/apache/cassandra/pull/2215#discussion_r1138357000


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -1980,12 +1980,14 @@ public Map<String, String> getTokenToEndpointMap()
 
     public String getLocalHostId()
     {
-        return getTokenMetadata().getHostId(FBUtilities.getBroadcastAddress()).toString();
+        UUID id = getLocalHostUUID();
+        return id != null ? id.toString() : null;
     }
 
     public UUID getLocalHostUUID()
     {
-        return getTokenMetadata().getHostId(FBUtilities.getBroadcastAddress());
+        UUID id = getTokenMetadata().getHostId(FBUtilities.getBroadcastAddress());

Review Comment:
   what is the probability that id returned by TokenMetadata and id returned by looking at disk would be different?



;16/Mar/23 09:26;githubbot;600","smiklosovic commented on code in PR #2233:
URL: https://github.com/apache/cassandra/pull/2233#discussion_r1148943464


##########
src/java/org/apache/cassandra/db/compaction/CompactionManager.java:
##########
@@ -269,6 +269,27 @@ public boolean isCompacting(Iterable<ColumnFamilyStore> cfses, Predicate<SSTable
         return false;
     }
 
+    @VisibleForTesting
+    public boolean hasOngoingOrPendingTasks()
+    {
+        if (!active.getCompactions().isEmpty() || !compactingCF.isEmpty())
+            return true;
+
+        int pendingTasks = executor.getPendingTaskCount() +
+                           validationExecutor.getPendingTaskCount() +
+                           viewBuildExecutor.getPendingTaskCount() +
+                           cacheCleanupExecutor.getPendingTaskCount() +
+                           secondaryIndexExecutor.getPendingTaskCount();
+
+        int activeTasks = executor.getActiveTaskCount() +
+                          validationExecutor.getActiveTaskCount() +
+                          viewBuildExecutor.getActiveTaskCount() +
+                          cacheCleanupExecutor.getActiveTaskCount() +
+                          secondaryIndexExecutor.getActiveTaskCount();
+
+        return pendingTasks > 0 || activeTasks > 0;

Review Comment:
   if `pendingTasks > 0`, we do not need to compute `activeTasks`, no? We can `return` after computing `pendingTasks` already.
   
           int pendingTasks = executor.getPendingTaskCount() +
                              validationExecutor.getPendingTaskCount() +
                              viewBuildExecutor.getPendingTaskCount() +
                              cacheCleanupExecutor.getPendingTaskCount() +
                              secondaryIndexExecutor.getPendingTaskCount();
   
           if (pendingTasks > 0)
               return true;
   
           int activeTasks = executor.getActiveTaskCount() +
                             validationExecutor.getActiveTaskCount() +
                             viewBuildExecutor.getActiveTaskCount() +
                             cacheCleanupExecutor.getActiveTaskCount() +
                             secondaryIndexExecutor.getActiveTaskCount();
   
           return activeTasks > 0;
   



;27/Mar/23 08:12;githubbot;600","smiklosovic commented on code in PR #2233:
URL: https://github.com/apache/cassandra/pull/2233#discussion_r1148949334


##########
test/unit/org/apache/cassandra/io/sstable/keycache/KeyCacheTest.java:
##########
@@ -396,7 +395,6 @@ public void testKeyCacheLoadTwoTablesTime() throws Exception
         // be zero after load.
         assertKeyCacheSize(numberOfRows, KEYSPACE1, columnFamily1);
         assertKeyCacheSize(numberOfRows, KEYSPACE2, columnFamily2);
-        assertEquals(sstableImplCachesKeys ? numberOfRows * tables.size() : 0, CacheService.instance.keyCache.size());

Review Comment:
   why is this removed (above as well)? is that redundant? What is the relationship of this change to this ticket?



;27/Mar/23 08:17;githubbot;600","jacek-lewandowski commented on code in PR #2233:
URL: https://github.com/apache/cassandra/pull/2233#discussion_r1148953867


##########
test/unit/org/apache/cassandra/io/sstable/keycache/KeyCacheTest.java:
##########
@@ -396,7 +395,6 @@ public void testKeyCacheLoadTwoTablesTime() throws Exception
         // be zero after load.
         assertKeyCacheSize(numberOfRows, KEYSPACE1, columnFamily1);
         assertKeyCacheSize(numberOfRows, KEYSPACE2, columnFamily2);
-        assertEquals(sstableImplCachesKeys ? numberOfRows * tables.size() : 0, CacheService.instance.keyCache.size());

Review Comment:
   Because it asserts the global cache size which is out of control of this test. The test only controls the cache for the `KEYSPACE1` and `KEYSPACE2`, and when something gets written to the cache because of say system keyspace read/update, the test will fail.



;27/Mar/23 08:21;githubbot;600","smiklosovic closed pull request #2231: [CASSANDRA-18153-4.0] Save host id to system.local and flush immediately after startup
URL: https://github.com/apache/cassandra/pull/2231


;04/Apr/23 11:11;githubbot;600","smiklosovic closed pull request #2232: [CASSANDRA-18153-4.1] Save host id to system.local and flush immediately after startup
URL: https://github.com/apache/cassandra/pull/2232


;04/Apr/23 11:11;githubbot;600","smiklosovic closed pull request #2233: [CASSANDRA-18153-5.0] Save host id to system.local and flush immediately after startup
URL: https://github.com/apache/cassandra/pull/2233


;04/Apr/23 11:11;githubbot;600","smiklosovic closed pull request #2234: [CASSANDRA-18153-3.0] Save host id to system.local and flush immediately after startup
URL: https://github.com/apache/cassandra/pull/2234


;04/Apr/23 11:11;githubbot;600","smiklosovic closed pull request #2215: [CASSANDRA-18153-3.11] Save host id to system.local and flush immediately after startup 
URL: https://github.com/apache/cassandra/pull/2215


;04/Apr/23 11:13;githubbot;600",,,,,,,,,0,10200,,,0,10200,,CASSANDRA-17525,,,,,,CASSANDRA-18169,,,,,,,,,,,,0.0,abonacin,jlewandowski,,,,,,,,,,,Correctness -> Recoverable Corruption / Loss,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Sun Apr 02 08:30:42 UTC 2023,,,,,,,All,,,,"0|z1ervc:",9223372036854775807,,,,samt,smiklosovic,,Normal,,3.0.25,,https://github.com/apache/cassandra/commit/f96659c5306e62666e21c371c2ded646dd51672b,,,,,,,,,unit / ci,,,,,"12/Jan/23 19:45;e.dimitrova;CC [~jlewandowski] ;;;","12/Jan/23 19:59;abonacin;Storage service is not yet initiated during CommitLogReplay and MetadataCollection calls StorageService.instance.getLocalHostUUID.

[https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/io/sstable/metadata/MetadataCollector.java#L127]

{{public MetadataCollector(ClusteringComparator comparator)}}
{{    {}}
{{        this(comparator, StorageService.instance.getLocalHostUUID());}}
{{    }}}

 

StorageService.instance.getLocalHostUUID() will return null and all Memtables will be flushed without this information.

Next time cassandra starts and these SStables are present, this test will fail because originatingHostId is null:

[https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java#L337]

{{            UUID originatingHostId = reader.getSSTableMetadata().originatingHostId;}}
{{            if (originatingHostId != null && originatingHostId.equals(localhostId))}}
{{                builder.addAll(reader.getSSTableMetadata().commitLogIntervals);}}
{{            else}}
{{                skippedSSTables.add(reader.getFilename());}}

 

I thought of implementing it using same strategy as CommitLog.java

[https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java#L211]

{{        Optional.ofNullable(StorageService.instance.getLocalHostUUID()).orElseGet(SystemKeyspace::getLocalHostId);}};;;","16/Jan/23 13:49;abonacin;In fact there are some SYSTEM.LOCAL's memtables flushed before Storage service got initialized. 

These SSTables also have missing Host UUID information.;;;","23/Jan/23 16:52;smiklosovic;https://github.com/apache/cassandra/pull/2096/files;;;","23/Jan/23 16:54;smiklosovic;Hi [~abonacin], to comment on your last comment: _In fact there are some SYSTEM.LOCAL's memtables flushed before Storage service got initialized.  These SSTables also have missing Host UUID information._

Do you think this is something which could be included in this patch? Or does your patch solves this already?;;;","23/Jan/23 17:03;abonacin;Hi. It's just another scenario where we have this issue but this patch will address both.

 

Always we have a memtable being flushed before StorageService initialization, SSTable are created without HostUUID.

SSTables are flushed during CommigLogReplay (Keyspaces with mutations on CommitLog). But specifically for system.local, we also have flushes before  StorageService initialization.

This Patch will correct HostUUID returned by MetadataCollector before StorageService initialization.

 ;;;","24/Jan/23 19:23;jlewandowski;Hi [~abonacin], thank you for working on this bug.

I'm wondering if is there any case where just calling {{SystemKeyspace.getLocalHostId}} would be incorrect? All in all, could you add an assertion on that the ultimately obtained host id is not null?

Another thing is that complaining about missing host id for local strategy sstables is somehow dumb :/
;;;","24/Jan/23 20:29;smiklosovic;[~abonacin] I have added a reproducer here.

When I run the test, it will print this:

{code}
/tmp/dtests4687378434417513292/node1/data0/system/local-7ad54392bcdd35a684174e047860b377/nb-2-big -> 00000000-0000-4000-8000-000000000001
/tmp/dtests4687378434417513292/node1/data0/system/local-7ad54392bcdd35a684174e047860b377/nb-1-big -> null
local host id -> 00000000-0000-4000-8000-000000000001
{code}

So you see that for the first SSTable of system.local, it will still print null, only the second table is correctly set on originating id so your fix is actually not fixing it?

If we do this:

{code}
    public MetadataCollector(ClusteringComparator comparator)
    {
        this(comparator, Optional.ofNullable(StorageService.instance.getLocalHostUUID()).orElseGet(SystemKeyspace::getLocalHostId));
    }
{code}

if StorageService.instance.getLocalHostUUID() is null, it will call SystemKeyspace::getLocalHostId, but the problem is that the implementation of that method reads data on disk:

{code}
    /**
     * Read the host ID from the system keyspace.
     */
    public static UUID getLocalHostId()
    {
        String req = ""SELECT host_id FROM system.%s WHERE key='%s'"";
        UntypedResultSet result = executeInternal(format(req, LOCAL, LOCAL));

        // Look up the Host UUID (return it if found)
        if (result != null && !result.isEmpty() && result.one().has(""host_id""))
            return result.one().getUUID(""host_id"");

        return null;
    }
{code}

But here it returns null and the reason for that is that when the very first SSTable for system.local is going to be written, there is no SSTable in system.local yet, so it has nowhere to read that id from.

The solution to this would be to cache host id so if ""getLocalHostId"" returns null, we would set it via ""setLocalHostId"" or similar (I am just shooting the ideas here ... might be done differently).

I was trying to use ""SystemKeyspace.getOrInitializeLocalHostId"" but the test was stuck as I think it was in the loop because it was reading non-existing / empty table yet and then it tried to persist generated uuid ....

(1) https://github.com/instaclustr/cassandra/commit/1b17b5191e303b76d9d2888c08934e2520c46291;;;","25/Jan/23 10:04;smiklosovic;Hi [~abonacin] 

I think I fixed what I wrote yesterday here:

[https://github.com/apache/cassandra/pull/2113/files]

Now test always returns this:
{code:java}
/tmp/dtests8231883753452384466/node1/data0/system/local-7ad54392bcdd35a684174e047860b377/nb-2-big -> 00000000-0000-4000-8000-000000000001
/tmp/dtests8231883753452384466/node1/data0/system/local-7ad54392bcdd35a684174e047860b377/nb-1-big -> 00000000-0000-4000-8000-000000000001
local host id -> 00000000-0000-4000-8000-000000000001
{code}

What do you think?

[~jlewandowski] I think that there is slight advantage of using it like [~abonacin] suggested because if we did SystemKeyspace.getLocalHostId only, we would need to go to disk / execute query every single time instead of just reading it from memory, basically.;;;","29/Jan/23 23:22;smiklosovic;[~brandon.williams] what do you think about my patch which builds on what [~abonacin] did? [~jlewandowski] I would appreciate your second look too.

edit: this ticket is about table format ""me"". I read this in BigFormat class:

{code}
// me (3.0.25, 3.11.11): added hostId of the node from which the sstable originated
{code}

So this should be probably done in 3.0.x included up?;;;","30/Jan/23 20:45;abonacin;Hi [~smiklosovic],

Sorry for delayed reply.

 

I got your point. It's true, since we don't have defined HostUUID we will produce first SSTable without this info.

I just found this issue, tested a very limited scope and I'm trying to help with a quick fix.

Thanks for your detailed explanation. ;;;","30/Jan/23 20:53;brandon.williams;bq. So this should be probably done in 3.0.x included up?

Yes, since CASSANDRA-16619 affects them.;;;","31/Jan/23 07:15;jlewandowski;[~smiklosovic] I'm worried that in the newest patch there is a chance we will end up with different host ids in sstables and system keyspace. Maybe there is a way to enforce certain order of operations?;;;","31/Jan/23 13:06;smiklosovic;[~jlewandowski] thanks for the feedback. I modified the PR to reflect your worries. I am not saying it is bulletproof but the main idea behind the latest changes is that I tried to do it in such a way that if somebody reads these values they can not be written and vice versa - achieved by ReentrantReadWriteLock (there will be probably still some bugs in there we can work out but as POC to review it is good enough, probably).;;;","31/Jan/23 19:37;smiklosovic;It is failing a lot of tests in Circle. No reason to review it until I fix that.;;;","10/Feb/23 20:31;abonacin;Hi [~smiklosovic],

Is it failing because of your new changes?

If yes, can you consider proceed just with my update since it's a just a single line change which can benefit some live cluster?

Can you share how to check Circle, please? I want to help but I'm new in this world.

Thank you,;;;","14/Mar/23 13:01;jlewandowski;[~abonacin] can you provide a full reproduce example?;;;","14/Mar/23 14:52;jlewandowski;I don't know exactly how to reproduce this, but assuming this is a possible scenario, I want to propose a mix of something brought by all of us. In particular:
- in all the places where we try to get host id, we try first from token metadata and then from system.local
- if we start a fresh instance (that is, there is no commit log files to replay), we conditionally create a host id in the system.local table and flush that table; we do that along with storing other local node metadata, before touching schema or the commit log

With that, we are guaranteed that host id is stored in sstable and not as a mutation in the commit log before we actually start to replay anything.

https://github.com/apache/cassandra/pull/2215 (3.11);;;","14/Mar/23 21:47;abonacin;[~jlewandowski] 
 
I have two nodes:
{{[root@ip-20-0-1-182 ~]# nodetool status}}
{{Datacenter: datacenter1}}
{{=======================}}
{{Status=Up/Down}}
{{|/ State=Normal/Leaving/Joining/Moving}}
{{--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack}}
{{UN  20.0.1.182  66.2 KiB   2            100.0%            1b0c03de-e885-4028-99c9-24122146f07d  rack1}}
{{UN  20.0.1.239  66.2 KiB   2            100.0%            c54cf0ab-cf6e-46ce-9ebe-86b254fe5606  rack1}}
 
 
Creating a keyspace + table and writing something (wait to commitlog be flushed to disk if commitlog_sync is periodic):
 
{{[root@ip-20-0-1-182 ~]# cqlsh $HOSTNAME}}
{{Connected to AnsibleLab at ip-20-0-1-182.ec2.internal:9042.}}
{{[cqlsh 5.0.1 | Cassandra 3.11.13 | CQL spec 3.4.4 | Native protocol v4]}}
{{Use HELP for help.}}
{{cqlsh> CREATE KEYSPACE abonacin WITH replication = \{'class': 'NetworkTopologyStrategy', 'datacenter1': 2};}}
{{cqlsh> CREATE TABLE abonacin.emp (}}
{{... emp_id int PRIMARY KEY,}}
{{... emp_city text,}}
{{... emp_name text,}}
{{... emp_phone varint,}}
{{... emp_sal varint,}}
{{... emp_hiredate date}}
{{... );}}


{{cqlsh> insert into abonacin.emp (emp_id, emp_city, emp_name, emp_phone, emp_sal, emp_hiredate) values (1584, 'KVXKAAOHYH', 'KLEMTXEDBDIF', 60457532, 1000, '2022-08-25');}}
{{cqlsh> select * from abonacin.emp;}}

{{ emp_id | emp_city   | emp_hiredate | emp_name     | emp_phone | emp_sal}}
{{--------+------------+--------------+--------------+-----------+---------}}
{{   1584 | KVXKAAOHYH |   2022-08-25 | KLEMTXEDBDIF |  60457532 |    1000}}

 

 

Now I'll kill -9 java process on the other node and restart cassandra service:

{{[root@ip-20-0-1-239 ~]# tail -f /var/log/cassandra/debug.log | grep ""Ignored commitLogIntervals from the following sstables"" | grep abonacin &}}
{{[root@ip-20-0-1-239 ~]# ps -ef | grep -v grep | grep java | awk '\{print $2}' | xargs kill -9}}{{[root@ip-20-0-1-239 ~]# systemctl restart cassandra}}


 
 
And I see this:
{{[root@ip-20-0-1-239 ~]# DEBUG [main] 2023-03-14 21:25:46,486 CommitLogReplayer.java:254 - Ignored commitLogIntervals from the following sstables: [/var/lib/cassandra/data/abonacin/emp-ee4bec70c2ac11ed85b715ea429a0971/me-1-big-Data.db]}}
 
 
What I found is that Storage Service is not yet available during CommigLogReplay (not sure if it is always starts after commitlog replay or it's just a coincidence). The following +StorageService.instance.getLocalHostUUID()+ returns {_}null{_}.
 
{{private static UUID getLocalHostId()}}
{{    {}}
{{        return StorageService.instance.getLocalHostUUID();}}
{{    }}}
 
I also find that{{ +Optional.ofNullable(StorageService.instance.getLocalHostUUID()).orElseGet(SystemKeyspace::getLocalHostId)+}} returns the correct host uuid. This why I chose this approach instead of yours.
 
It's also worth to mention that it's the first time I tried to suggest a PR and I don't have enough familiarity with all the context involved. :);;;","14/Mar/23 22:30;jlewandowski;Thanks [~abonacin] for the explanation. The PR mentioned about includes your fix, I've just pushed that down to {{StorageService}}. 
Another thing is to ensure that {{SystemKeyspace.getLocalHostId}} will never return null - that's the other part of the PR.;;;","15/Mar/23 14:30;jlewandowski;I think it can be reviewed at this point.
;;;","15/Mar/23 15:35;samt;I wanted to mention that in CEP-21 we're proposing to move the responsibility for assigning host identifiers from the local node itself to a cluster wide service. For compatibility, we have been representing these as UUIDs so that they can be used everywhere a host id is currently but this was intended as a temporary measure to make development more straightforward. Actually, these node ids are simple ints based on a global counter and one part of the remaining work on CEP-21 is to migrate to these fully.

Of course, for upgrades we will need to retain a mapping between old and new ids to process hints and this is also marked as a todo.

Nothing in the {{cep-21-tcm}} branch solves the problem described in this ticket, but something along the lines of what Jacek suggested sounds reasonable and feasible. I just wanted to mention this here in case you had chance to factor it the thinking about this ticket.

Here's where we set the host id (including the updating from the old to new id in an upgrade, currently unfriendly to hints): [https://github.com/apache/cassandra/blob/cep-21-tcm/src/java/org/apache/cassandra/tcm/transformations/Register.java#L123];;;","15/Mar/23 15:56;smiklosovic;Thanks for the explanation, Sam. I think it will be better if we wait for this work in trunk so we do not need to fix that after it. (or you when integrating cep 21).

But we still need to fix it for older branches, don't we? So what about fixing this in everything but trunk and we do it in trunk ""the proper way""? 

Reading it more closely: ""Nothing in the {{cep-21-tcm}} branch solves the problem described in this ticket"" ... yeah well ... what do you think, [~jlewandowski] ? Still good for trunk, after all?;;;","15/Mar/23 16:35;samt;In {{cep-21-tcm}} we will 100% have a similar problem and what Jacek proposed sounds sensible, so I'm not suggesting to _not_ fix this in trunk. In the CEP branch, we will just have to look in slightly different places for pre-existing ids (TokenMetadata is completely gone, for instance). For brand new instances, how we deal with ""conditionally create a host id...before touching schema or the commit log"" is more of a question and something we need to consider.   
;;;","15/Mar/23 18:17;jlewandowski;[~samt] can I consider it as your review +1 on that?
[~smiklosovic] - are you ok with the fix?;;;","15/Mar/23 18:28;samt;[~jlewandowski] , I'm afraid I haven't looked at the actual PR yet, I was going only from your comments here. I'll do my best to check it out tomorrow, but don't block on that.;;;","15/Mar/23 20:34;jlewandowski;thanks [~samt], frankly the PR has only few locs :);;;","16/Mar/23 11:00;samt;I think it would be generally useful to add a dtest that verifies the sstable metadata once the node is fully started in the 2 cases:  
* a new node joins
* an existing node restarts & replays log segments?
This would also help a lot when we come to address this in the CEP-21 branch, so we can check whatever we do there is equivalent.

Also, it's an issue from CASSANDRA-16619 really, but I was surprised that the originating host id isn't shown in {{sstablemetadata}} output, so the only way to check this is by using the debugger (or by triggering the bug). We should add it there, if not for older branches then at least in trunk as the output is already changed by CASSANDRA-18134.  ;;;","17/Mar/23 07:42;jlewandowski;Thank you for feedback. I'll try to add a dtest and address the missing host id in metadata output.;;;","17/Mar/23 09:32;jlewandowski;Unfortunately it will have to be a Python DTest, JVM dtests have its startup code very different to what is really used when you start Cassandra.
;;;","17/Mar/23 09:50;samt;Yeah, that's true although we have made some progress toward bringing the JVM dtest startup in line with the real code in the {{cep-21-tcm}} branch. A python test would work well in the first instance though and we can look to port it later. Thanks! ;;;","17/Mar/23 13:09;jlewandowski;Please have a look at these tests: https://github.com/apache/cassandra-dtest/pull/216
;;;","17/Mar/23 14:00;smiklosovic;dtest looks good to me.;;;","17/Mar/23 14:19;samt;lgtm too;;;","17/Mar/23 20:20;jlewandowski;Tests show something interesting - {{CQLSSTableWriter}} - it is a client application so it should not try to read data from sstables, in particular, from {{system.local}}. It stored {{null}} as a host ID and I will leave it as it is - that is, in order to fix the test, {{getLocalHostId}} will not go to {{system.local}} if the system is running in client mode.

;;;","17/Mar/23 20:48;jlewandowski;https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/628/workflows/93a1362e-f205-4d60-a46f-64fb375b695e (3.0);;;","20/Mar/23 06:51;jlewandowski;3.0 - [PR|https://github.com/apache/cassandra/pull/2234], 
[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2363/] (/)

3.11 - [PR|https://github.com/apache/cassandra/pull/2215], 
[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2364/] (/)

4.0 - [PR|https://github.com/apache/cassandra/pull/2231], 
[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2373/] (!), 
fixed just two unit tests, so rerunning the unit tests only: 
[regular|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test/1775/] (/),
[cdc|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test-cdc/1755/] (!), 
[compression|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-test-compression/1761/] (/)
since some other unrelated unit test failed for CDC, I did repeatable runs in [CircleCI|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/644/workflows/42afa702-4500-46f3-96d6-b2e14f5e1b75](/)

4.1 - [PR|https://github.com/apache/cassandra/pull/2232],
[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2378/] (!)
there are failures in one jvm-dtest, the test was fixed and rerun in CircleCI, [1|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/648/workflows/0ff558cc-e975-4646-90ee-762d3799994c/jobs/6437](/), [2|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/648/workflows/0ff558cc-e975-4646-90ee-762d3799994c/jobs/6438] (/), [3|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/648/workflows/1aa7cde3-7845-4672-9a46-f177797e9f59/jobs/6441], [4|https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/648/workflows/1aa7cde3-7845-4672-9a46-f177797e9f59/jobs/6440]

5.0 - [PR|https://github.com/apache/cassandra/pull/2233],
[CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2384/] (?)


dtest - [PR|https://github.com/apache/cassandra-dtest/pull/216]
;;;","23/Mar/23 09:11;samt;Just FYI but it seems to me that {{SSTableIdGenerationTest}} depends in some degree on this broken behaviour. It seems to rely on the local host id being unavailable when the node restarts (at least in that test), which causes the mutations in the commitlog that have already been flushed to be replayed as the null local host id doesn't match the actual one in
the sstable metadata.;;;","23/Mar/23 09:26;jlewandowski;thanks [~samt] - the test takes that into account rather than rely on that. I was initially confused that I needed to expect one more sstable that I thought. Now the number of expected sstables match the number of flushes which is good I think.
;;;","23/Mar/23 11:10;samt;Yep, it had me scratching my head a bit when working on the TCM branch because there the host ID is available when the replay happens, so the test stared failing.;;;","27/Mar/23 09:56;smiklosovic;+1;;;","27/Mar/23 15:32;jlewandowski;the latest rerun of jvm dtests:

https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/663/workflows/1c1c11a0-e202-4824-8a1b-995bb0d32a6a
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/664/workflows/0aced992-fb32-468c-85fb-183a8f5e240e
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/660/workflows/5daa9ea1-5c62-40bf-a3e9-80d8420c6f4c
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/660/workflows/56cf5ddc-5bfe-4c4d-809c-0eed7b88a13b
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/659/workflows/6f4cb147-11b1-40b7-a5b2-4f4ef3666ce3
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/659/workflows/aeb7abc6-b97d-4faf-9c43-d80419d23c08
https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/661/workflows/8dce1230-b9ab-4b10-a87e-dec6548c1ce7

the only failing tests are those recognized as flakies;;;","27/Mar/23 15:51;jlewandowski;[~samt] I'm basically ready to merge it, if you have any objections please let me know. I know it is going to be largely overwritten by TCM, but we have to have something for now. 
;;;","28/Mar/23 10:14;samt;Nope, no objections from me (y);;;","02/Apr/23 08:30;mck;[~jlewandowski], the commit in trunk to CHANGES.txt is incorrect.

In trunk there are no ""Merge from…"" sections. The change should go under the 4.1.2 section (and nothing under 5.0). When the first 5.0 release happens it is presumed (and understood) that all 4.1.x changes found in that same CHANGES.txt file are included.

ref: https://github.com/apache/cassandra/commit/e07b8dfe8dc142356223e71e438c77ffe97140c1#diff-59130575b4fb2932c957db2922977d7d89afb0b2085357db1a14615a2fcad776R127-R131 

There was a recent discussion in slack to clarify this common misunderstanding (and tribal knowledge).
ref: https://the-asf.slack.com/archives/CK23JSY2K/p1679496071133719

ninja fix has been committed: https://github.com/apache/cassandra/commit/4effa4efbe456d2f5335ef4b6db39804eab21042

Also, why are there two ""Merge branch 'cassandra-4.0' into cassandra-4.1"" commits (14936d0bd3716ed251e799a264f5ab16d51b893b[|https://github.com/apache/cassandra/commit/14936d0bd3716ed251e799a264f5ab16d51b893b] and [f8dd1931eeacb290af9e246376468f3704891cc4|https://github.com/apache/cassandra/commit/f8dd1931eeacb290af9e246376468f3704891cc4])?;;;"
mockito-inline causes tests to fail beacause o.a.c.distributed.mock.nodetool.InternalNodeProbe spies on StorageServiceMBean,CASSANDRA-18152,13517860,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,smiklosovic,smiklosovic,smiklosovic,12/Jan/23 13:54,17/Jan/23 09:56,13/Jul/23 08:41,17/Jan/23 08:31,5.0,,,,,,Test/dtest/java,,,0,,,,,"While working on CASSANDRA-14361, when we included mockito-inline into the build to test the new functionality, unrelated tests in CI started to fail. (1)

This is happening because mockito, together with stuff which enables static mocking, just does not play together with our way of doing things in dtest framework.

The workaround is consisting of removing Mockito from InternalNodeProbe, it tries to spy on StorageService to not send any notifications back. This might be workarounded so we do not need Mockito hence tests are fixed and mocking of static methods is possible without any other tests failing.

(1) https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2168/#showFailuresLink

see also: [https://github.com/mockito/mockito/issues/2203]",,adelapena,e.dimitrova,smiklosovic,,,,,,,"smiklosovic opened a new pull request, #2095:
URL: https://github.com/apache/cassandra/pull/2095

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;13/Jan/23 11:00;githubbot;600","adelapena commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1069993322


##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -331,8 +331,13 @@
      *
      * If only keyspaces are specified, mutations for all tables in such keyspace will be replayed
      * */
-    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null)
+    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null),
 
+    /**
+     * When true, removeNotificationListener and addNotificationListener methods on StorageService will be NO-OP.
+     * Defaults to false.
+     */
+    STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS(""cassandra.storage.skip.notification.listeners"", ""false"");

Review Comment:
   Nit: extra semicolon at the end of the line



##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -331,8 +331,13 @@
      *
      * If only keyspaces are specified, mutations for all tables in such keyspace will be replayed
      * */
-    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null)
+    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null),
 
+    /**
+     * When true, removeNotificationListener and addNotificationListener methods on StorageService will be NO-OP.

Review Comment:
   Maybe we could extend the comment to mention that this is used by dtests. Actually, I don't know if there is a use case for setting this as a JVM property. If not, would it make sense to make this just a mutable property in `StorageService`?



##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   This assumes that `STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS` was false before the call to `connect`. Maybe we can save the original value of that property on the call to `connect`, and restore it here.



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -7134,4 +7136,26 @@ public boolean getSkipStreamDiskSpaceCheck()
     {
         return DatabaseDescriptor.getSkipStreamDiskSpaceCheck();
     }
+
+    @Override
+    public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException
+    {
+        if (!skipNotificationListeners)
+            super.removeNotificationListener(listener);
+    }
+
+    @Override
+    public void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback) throws ListenerNotFoundException
+    {
+        if (!skipNotificationListeners)
+            super.removeNotificationListener(listener, filter, handback);
+    }
+
+    @Override
+    public void addNotificationListener(NotificationListener listener,
+                                        NotificationFilter filter,
+                                        Object handback) throws java.lang.IllegalArgumentException {

Review Comment:
   Nit: misplaced bracket at the end of the line.



##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   `InternalNodeProbe` dynamically changes the value of `STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS`. However, I understand that the `final` value of `skipNotificationListeners` wouldn't see those changes, just the initial value.



;13/Jan/23 22:02;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070139850


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   I understand, but whatever it was set to, it not it always safe to set it to false anyway? We are in the closing method. That is probably the last method which will be used in this class.



;13/Jan/23 22:44;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070139850


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   @adelapena I understand, but whatever it was set to, it not it always safe to set it to false anyway? We are in the closing method. That is probably the last method which will be used in this class.



;13/Jan/23 22:44;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070139850


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   @adelapena I understand, but whatever it was set to, is not it always safe to set it to false anyway? We are in the closing method. That is probably the last method which will be used in this class.



;13/Jan/23 22:45;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070139850


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   @adelapena I understand, but whatever it was set to, is not it always safe to set it to false anyway? We are in the closing method. That is probably the last method which will be used in this class after which it is not safe to use it anymore.



;13/Jan/23 22:45;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070143458


##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -331,8 +331,13 @@
      *
      * If only keyspaces are specified, mutations for all tables in such keyspace will be replayed
      * */
-    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null)
+    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null),
 
+    /**
+     * When true, removeNotificationListener and addNotificationListener methods on StorageService will be NO-OP.

Review Comment:
   Interesting idea. I have to sleep on it but I dont object it in general. 



;13/Jan/23 22:47;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable.



;13/Jan/23 22:50;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for tests) during whole lifetime of that object.



;13/Jan/23 22:53;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for tests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.



;13/Jan/23 22:58;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for some dtests tests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.



;13/Jan/23 23:02;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for some dtests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.



;13/Jan/23 23:02;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for some dtests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.
   
   Maybe not so obvious fact is that the way I see it is that StorageService is instantiated _every time_ for each dtest.



;13/Jan/23 23:04;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070143458


##########
src/java/org/apache/cassandra/config/CassandraRelevantProperties.java:
##########
@@ -331,8 +331,13 @@
      *
      * If only keyspaces are specified, mutations for all tables in such keyspace will be replayed
      * */
-    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null)
+    COMMIT_LOG_REPLAY_LIST(""cassandra.replayList"", null),
 
+    /**
+     * When true, removeNotificationListener and addNotificationListener methods on StorageService will be NO-OP.

Review Comment:
   answered below



;13/Jan/23 23:15;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for some dtests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.
   
   Also, the way it is currently done, like `public static StorageService instance = new StorageService()`, I do not see how we could pass it into the constructor without changing every place where / when StorageService is instantiated.
   
   Maybe not so obvious fact is that the way I see it is that StorageService is instantiated _every time_ for each dtest.



;13/Jan/23 23:24;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena the logic is that I set that property _before_ StorageService is instantiated. So this will be just mere reader of that value. It is not meant to be mutable. And I do not want that to be mutable. Why should it be mutable? What value it has, in runtime, to be able to disable or enable it once StorageService object (effectively singleton) is instantiated? You either want it to be turned on (in production) or off (for some dtests) during whole lifetime of that object.
   
   We can abandon system property approach if the same is effectively achieved by some property on StorageService but I do not want that to be mutable and it seems to me that having a system property is the most straighforward way how to ""communicate"" this fact of enabling / disabling.
   
   If I am about to set it _after_ StorageService object is created, that field has to be mutable (not final) or pass it there via constructor. As I explained, I do not see any value nor reason in mutability.
   
   Also, the way it is currently done, like `public static StorageService instance = new StorageService()`, I do not see how we could pass it into the constructor without changing every place where / when StorageService is instantiated / accessed for the first time.
   
   Maybe not so obvious fact is that the way I see it is that StorageService is instantiated _every time_ for each dtest.



;13/Jan/23 23:25;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070139850


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -105,7 +88,8 @@ protected void connect()
     @Override
     public void close()
     {
-        // nothing to close. no-op
+        if (!withNotifications)
+            CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.setBoolean(false);

Review Comment:
   @adelapena answered below



;13/Jan/23 23:29;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070145635


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    private final boolean skipNotificationListeners = CassandraRelevantProperties.STORAGE_SERVICE_SKIP_NOTIFICATION_LISTENERS.getBoolean();

Review Comment:
   @adelapena I had quite long answer prepared but I need to rethink the whole thing. Thanks for the feedback.



;13/Jan/23 23:35;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070184285


##########
test/distributed/org/apache/cassandra/distributed/mock/nodetool/InternalNodeProbe.java:
##########
@@ -66,26 +63,9 @@ protected void connect()
         mbeanServerConn = null;
         jmxc = null;
 
-        if (withNotifications)
-        {
-            ssProxy = StorageService.instance;
-        }
-        else
-        {
-            // replace the notification apis with a no-op method
-            StorageServiceMBean mock = Mockito.spy(StorageService.instance);
-            Mockito.doNothing().when(mock).addNotificationListener(Mockito.any(), Mockito.any(), Mockito.any());
-            try
-            {
-                Mockito.doNothing().when(mock).removeNotificationListener(Mockito.any(), Mockito.any(), Mockito.any());
-                Mockito.doNothing().when(mock).removeNotificationListener(Mockito.any());
-            }
-            catch (ListenerNotFoundException e)
-            {
-                throw new AssertionError(e);
-            }
-            ssProxy = mock;
-        }
+        StorageService.instance.skipNotificationListeners = !withNotifications;

Review Comment:
   pretty simple, right? then we change it back to default (false) in close method.



;14/Jan/23 01:03;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070184325


##########
test/distributed/org/apache/cassandra/distributed/impl/Instance.java:
##########
@@ -1072,6 +1075,12 @@ protected void err(Throwable e)
             super.err(e);
             latestError = e;
         }
+
+        @Override
+        public void close()
+        {
+            internalNodeProbe.close();

Review Comment:
   here we set it to false



;14/Jan/23 01:03;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070184460


##########
test/distributed/org/apache/cassandra/distributed/impl/Instance.java:
##########
@@ -1018,15 +1018,18 @@ public void close()
         }
     }
 
-    public static class DTestNodeTool extends NodeTool {
+    public static class DTestNodeTool extends NodeTool implements AutoCloseable

Review Comment:
   this implements AutoCloseable so we can use it in try-with-resources in Instance above



;14/Jan/23 01:04;githubbot;600","smiklosovic commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1070184622


##########
test/distributed/org/apache/cassandra/distributed/impl/Instance.java:
##########
@@ -1018,15 +1018,18 @@ public void close()
         }
     }
 
-    public static class DTestNodeTool extends NodeTool {
+    public static class DTestNodeTool extends NodeTool implements AutoCloseable
+    {
         private final StorageServiceMBean storageProxy;
         private final CollectingNotificationListener notifications = new CollectingNotificationListener();
-
+        private final InternalNodeProbe internalNodeProbe;
         private Throwable latestError;
 
-        public DTestNodeTool(boolean withNotifications, Output output) {
+        public DTestNodeTool(boolean withNotifications, Output output)
+        {
             super(new InternalNodeProbeFactory(withNotifications), output);
-            storageProxy = new InternalNodeProbe(withNotifications).getStorageService();
+            internalNodeProbe = new InternalNodeProbe(withNotifications);

Review Comment:
   we cache the property so we can call close on that which sets it back to false



;14/Jan/23 01:04;githubbot;600","adelapena commented on code in PR #2095:
URL: https://github.com/apache/cassandra/pull/2095#discussion_r1071144189


##########
src/java/org/apache/cassandra/service/StorageService.java:
##########
@@ -231,6 +231,8 @@ private static int getSchemaDelay()
 
     private final SamplingManager samplingManager = new SamplingManager();
 
+    public volatile boolean skipNotificationListeners = false;

Review Comment:
   I'd add a brief comment saying that this is used only by dtests, and maybe reference the ticket. Maybe we should mark it as `@VisibleForTesting`?



;16/Jan/23 11:41;githubbot;600","smiklosovic closed pull request #2095: CASSANDRA-18152
URL: https://github.com/apache/cassandra/pull/2095


;17/Jan/23 09:56;githubbot;600",,0,14400,,,0,14400,,,,CASSANDRA-14361,,,,,,,,,,,,,,,,0.0,smiklosovic,,,,,,,,,,,,Code,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 16 19:23:07 UTC 2023,,,,,,,All,,,,"0|z1eri8:",9223372036854775807,,,,adelapena,smiklosovic,,Low,,4.0-alpha4,,https://github.com/apache/cassandra/commit/36a99bcdcc65eb2b3bb708f67e1bd75d35359f7f,,,,,,,,,CI passes,,,,,"13/Jan/23 11:02;smiklosovic;I was asked on the mailing list here (0) if this will work with Java 17. 

I have verified that it is possible to mock static methods with mockito 4.7.0 and mockito-inline 4.7.0 in Java 17 in this branch (1). This branch is using the work from CASSANDRA-16895 where I took this branch (2) where upgrade to Java 17 is done and I rebased it on top of the current trunk. Then, I cherry-picked the work in (3) on top of this rebased branch with Java 17 support. The cherry-picked commit from CASSANDRA-14361 contains the test which is using static methods. I was running the test case SimpleSeedProviderTest which is using mocking of static methods and the test passed.

The branch where the solution to remove the dependency on Mockito in InternalNodeProbe is here (4) and its build is here (5).
For completeness, without (4) merged, once we use mockito-inline to mock static methods, these tests fail (6)

Java I was on: 
{code:java}
$ java -version
openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)
{code}

Letting [~edimitrova] know I did this as well as [~adelapena] that this is available for review so we are unblocked on CASSANDRA-14361 and I am letting know [~jlewandowski] that this test was conducted.

(0) https://lists.apache.org/thread/t35wmq90zcfoorjz5dtz6dxt99d5sp6o
(1) [https://github.com/instaclustr/cassandra/tree/CASSANDRA-16895-stefan]
(2) [https://github.com/ekaterinadimitrova2/cassandra/tree/16895-trunk-sept]
(3) [https://issues.apache.org/jira/browse/CASSANDRA-14361]
(4) [https://github.com/apache/cassandra/pull/2095]
(5) [https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18152]
(6) https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=14361-trunk-review;;;","13/Jan/23 11:04;smiklosovic;PR: https://github.com/apache/cassandra/pull/2095
builld: https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18152;;;","13/Jan/23 18:36;e.dimitrova;Thank you for the ping and the testing, appreciate it! The branch you took is already a bit old and WIP but I think it should serve your needs. I can confirm that I updated some time ago mockito-core to latest version in trunk and that version officially supports Java 17.

I haven't used mockito-inline and when I write in Google mockito-inline Java 17 support, it took me to this [page |https://github.com/mockito/mockito/issues/2436]  that discusses an issue people reported in 2021 and the maintainers confirming they are testing in CI mockito-inline so _my guess_ is that it should be fine, but I didn't spend too much time in researching. It is important not just to test but also to verify that the maintainers of our dependencies are supporting or planning soon to support newer JDK versions. Hope that helps.;;;","14/Jan/23 01:01;smiklosovic;[~adelapena] thanks for the review, I have reworked it so we do not need to have system property.;;;","15/Jan/23 14:51;smiklosovic;j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1719/workflows/3dd90858-b3bf-49fe-a854-6ed6db11e391
j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1719/workflows/46b93541-8515-4e24-ade9-f820f09a6f23

https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2198/#showFailuresLink;;;","16/Jan/23 12:43;smiklosovic;Thanks [~adelapena] for another review

I will commit it _without_ mockito-inline as it is not necessary in this ticket, it will be added in CASSANDRA-14361

this is the branch fully prepared to be merged: https://github.com/apache/cassandra/pull/2095/files

;;;","16/Jan/23 12:44;adelapena;Changes look good to me, +1;;;","16/Jan/23 19:23;smiklosovic;j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1723/workflows/3c868969-abc9-4767-be20-e53bd71aa501
j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/1723/workflows/8523d330-ee03-41f2-ade4-a4b970c8e8dc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"snakeyaml vulnerabilities: CVE-2021-4235, CVE-2022-1471, CVE-2022-3064",CASSANDRA-18149,13517685,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,11/Jan/23 21:29,24/Jan/23 18:30,13/Jul/23 08:41,24/Jan/23 18:30,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Dependencies,,,0,,,,,"The OWASP scan is reporting these for both snakeyaml-1.11 and snakeyaml-1.26.

These are similar to CASSANDRA-17907 in that they require access to the yaml to have any effect.",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CASSANDRA-18150,,CASSANDRA-18150,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 24 18:30:45 UTC 2023,,,,,,,All,,,,"0|z1eqgg:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/9a64be32340829038e4895a667eda025d5219f1b,,,,,,,,,run CI,,,,,"11/Jan/23 21:46;brandon.williams;CVE-2021-4235: https://nvd.nist.gov/vuln/detail/CVE-2021-4235  Denial of service vector, which isn't a concern.

CVE-2022-1471: https://nvd.nist.gov/vuln/detail/CVE-2022-1471 RCE through the Constructor() class.  It is recommended to use the SafeConstructor() class instead.  I've created CASSANDRA-18150 to handle that.

CVE-2022-3064: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3064 parsing malicious yaml can cause a DoS, again not a concern.
;;;","12/Jan/23 16:32;brandon.williams;Patches to suppress these.  We'll need to suppress 1471 even after CASSANDRA-18150 is committed.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18149-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/757/workflows/1cb40cef-9b42-4e52-a0e5-738fc28e2fba]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18149-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/756/workflows/437ba05b-82a6-48d8-975e-d3a22fe8b2fe]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18149-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/754/workflows/fc941ea8-46a7-436f-8ea1-77c16466bf80], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/754/workflows/2911192c-a53f-431d-971a-88ecdfe82837]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18149-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/758/workflows/9b75ac22-7f2b-486f-b922-90425da1f7d7], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/758/workflows/e3091d43-b6a1-482c-99c4-2be1085ced05]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18149-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/755/workflows/4644601b-1723-4178-9d18-dc64e6ef720c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/755/workflows/ba37ace8-807f-40b2-bd45-50efd1837a61]|
;;;","17/Jan/23 07:35;bereng;+1 I don't think any of the errors are related to the patch;;;","17/Jan/23 16:33;brandon.williams;I'm going to block this on CASSANDRA-18150 so we don't have a chance to end up in a situation where this is suppressed and not patched.;;;","18/Jan/23 06:19;bereng;Yeah makes total sense.;;;","24/Jan/23 18:30;brandon.williams;Committed now that CASSANDRA-18150 is in.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty-all vulnerability: CVE-2022-41881,CASSANDRA-18148,13517684,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,11/Jan/23 21:02,23/Jan/23 12:59,13/Jul/23 08:41,23/Jan/23 12:59,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Dependencies,,,0,,,,,This is showing in the OWASP scan.,,bereng,norman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 23 12:59:27 UTC 2023,,,,,,,All,,,,"0|z1eqg8:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/fe71dfd7a15ded62b70eee4a2981d54baf35be8d,,,,,,,,,run CI,,,,,"11/Jan/23 21:04;brandon.williams;https://github.com/netty/netty/security/advisories/GHSA-fx2c-96vj-985v

This doesn't appear to affect us, but I am not a netty expert.;;;","12/Jan/23 16:41;brandon.williams;[~norman] I don't suppose you can advise?;;;","13/Jan/23 07:57;norman;Your assumption is correct... Cassandra is not affected as it not use the decoder in question ;;;","17/Jan/23 16:41;brandon.williams;Thank you for confirming!;;;","20/Jan/23 16:57;brandon.williams;Patches to suppress:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18148-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/795/workflows/e3fcd4c8-501a-4baf-84ea-bd01f5ee344a]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18148-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/793/workflows/b360fdf0-837e-440e-b22a-2891c74a6545]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18148-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/797/workflows/1a5ba6cb-be5e-4291-a55c-8fa86950b95d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/797/workflows/3993a7a6-65be-4ca8-8a5e-7d3d29c147e8]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18148-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/796/workflows/a96803ec-1378-4969-af4f-fdcc1906ae93], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/796/workflows/dddd598c-3449-418e-b276-115eea564165]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18148-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/794/workflows/f5fe2081-70b4-4674-b39e-11fcf5aced13], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/794/workflows/e590663b-bf82-4704-8d5a-45ccbe3ee45c]|

The cqlshlib failures are fallout from CASSANDRA-18088 in the process of being committed.;;;","23/Jan/23 08:34;bereng;+1, carefull on trunk where the merge commit mentions a SHA rather than a branch.;;;","23/Jan/23 12:59;brandon.williams;bq. where the merge commit mentions a SHA rather than a branch

That's because I'd already committed the circle config to the branch, so I only merged it up to the correct commit.  I probably should've edited the message.

Thanks for the review, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty-all vulnerability: CVE-2022-41915,CASSANDRA-18147,13517683,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,11/Jan/23 20:55,30/Jan/23 13:32,13/Jul/23 08:41,30/Jan/23 13:32,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Dependencies,,,0,,,,,This is being reported by the OWASP scan.,,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 30 13:32:27 UTC 2023,,,,,,,All,,,,"0|z1eqg0:",9223372036854775807,,,,bereng,,,Normal,,NA,,https://github.com/apache/cassandra/commit/fa18ea185233d97b9f2771b1a3a88f46dc1610d4,,,,,,,,,run CI,,,,,"11/Jan/23 21:00;brandon.williams;This is yet another netty HTTP issue that does not affect us as we do not use HTTP and can be suppressed.;;;","23/Jan/23 13:23;brandon.williams;||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18147-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/799/workflows/734de3b1-5fdf-490d-b51d-a3b4bab64009]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18147-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/803/workflows/707a5854-a47c-475a-8937-4e73795736c1]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18147-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/801/workflows/a7ebe3b8-b5a5-4588-9576-4cb9246b7e76], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/801/workflows/4a7756c0-423e-4a47-996b-f98b1858a189]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18147-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/802/workflows/1e73f853-4847-45bc-80b1-e63872a394b2], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/802/workflows/559dc2ce-2390-46e1-b996-fcd01c384639]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18147-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/800/workflows/ddb74791-0c9e-4af7-ba96-1142be3e1884], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/800/workflows/262639ac-caf3-4ade-8925-c0d4d1b8c5db]|;;;","30/Jan/23 06:29;bereng;+1;;;","30/Jan/23 13:32;brandon.williams;Thanks, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
commons-cli vulnerability: CVE-2021-37533,CASSANDRA-18146,13517682,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,brandon.williams,brandon.williams,brandon.williams,11/Jan/23 20:47,17/Jan/23 16:02,13/Jul/23 08:41,17/Jan/23 16:02,3.0.29,3.11.15,4.0.8,4.1.1,5.0,,Dependencies,,,0,,,,,"This CVE is being reported by the OWASP scan for:

commons-cli-1.1.jar: CVE-2021-37533
commons-codec-1.9.jar: CVE-2021-37533
commons-math3-3.2.jar: CVE-2021-37533

additionally commons-lang3-3.1.jar is also reported on 3.x.",,bereng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,brandon.williams,,,,,,,,,,,,Security,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 17 16:02:37 UTC 2023,,,,,,,All,,,,"0|z1eqfs:",9223372036854775807,,,,bereng,,,Normal,,3.0.28,,https://github.com/apache/cassandra/commit/e0e63f44155a00a540407b402a6cae8480aa2c32,,,,,,,,,run CI,,,,,"11/Jan/23 20:49;brandon.williams;""Prior to Apache Commons Net 3.9.0, Net's FTP client trusts the host from PASV response by default.""

We don't use this and can suppress.;;;","12/Jan/23 22:48;brandon.williams;
||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18146-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/766/workflows/67258c54-3a86-45d8-bbed-c2e6804bb299]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18146-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/764/workflows/afe9a03c-b1d2-49ec-92ff-298fd080be12]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18146-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/767/workflows/27d9948e-efe3-4534-94c7-f14b3e2c95cd], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/767/workflows/478662cf-6f37-4a9d-b72d-8480ed69d696]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18146-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/768/workflows/896e3f91-9872-4064-b0ff-c7fe0b072deb], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/767/workflows/478662cf-6f37-4a9d-b72d-8480ed69d696]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18146-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/765/workflows/48bb0afd-f8ae-4f09-ad09-d96a2cb93561], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/765/workflows/5baddcd1-fa80-4d87-aa7c-07cfe82627e9]|
;;;","12/Jan/23 22:52;brandon.williams;[This|https://app.circleci.com/pipelines/github/driftx/cassandra/768/workflows/d411c6a2-0536-42f8-bd28-751d2fe70181] is the correct 4.1 j11 link.;;;","17/Jan/23 07:25;bereng;+1 but careful on the forward merges chain which seems broken;;;","17/Jan/23 16:02;brandon.williams;Thanks for the review, committed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest.testReload fails when running with TrieMemtables,CASSANDRA-18144,13517670,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,kamalesh0420,dcapwell,dcapwell,11/Jan/23 19:13,06/Mar/23 21:04,13/Jul/23 08:41,06/Mar/23 21:04,4.1.x,,,,,,CI,,,0,,,,,"https://app.circleci.com/pipelines/github/dcapwell/cassandra/1771/workflows/1bd920c8-8568-44b3-9e8b-b152a73cf4fc/jobs/15393

{code}
java.lang.RuntimeException: Error setting schema for test (query was: alter table cql_test_keyspace.table_01 with compaction = {'class': 'SizeTieredCompactionStrategy', 'enabled': false})
	at org.apache.cassandra.cql3.CQLTester.schemaChange(CQLTester.java:1222)
	at org.apache.cassandra.cql3.CQLTester.alterTable(CQLTester.java:1009)
	at org.apache.cassandra.db.compaction.CompactionStrategyManagerBoundaryReloadTest.testReload(CompactionStrategyManagerBoundaryReloadTest.java:82)
Caused by: java.lang.ClassCastException: org.apache.cassandra.dht.ByteOrderedPartitioner$BytesToken cannot be cast to org.apache.cassandra.dht.Murmur3Partitioner$LongToken
	at org.apache.cassandra.dht.Murmur3Partitioner$1.valueForToken(Murmur3Partitioner.java:68)
	at org.apache.cassandra.dht.Splitter$WeightedRange.totalTokens(Splitter.java:278)
	at org.apache.cassandra.dht.Splitter.splitOwnedRanges(Splitter.java:129)
	at org.apache.cassandra.db.ColumnFamilyStore.localRangeSplits(ColumnFamilyStore.java:1504)
	at org.apache.cassandra.db.memtable.AbstractShardedMemtable.<init>(AbstractShardedMemtable.java:65)
	at org.apache.cassandra.db.memtable.TrieMemtable.<init>(TrieMemtable.java:142)
	at org.apache.cassandra.db.memtable.TrieMemtable$Factory.create(TrieMemtable.java:688)
	at org.apache.cassandra.db.ColumnFamilyStore.createMemtable(ColumnFamilyStore.java:1375)
	at org.apache.cassandra.db.ColumnFamilyStore$Flush.<init>(ColumnFamilyStore.java:1173)
	at org.apache.cassandra.db.ColumnFamilyStore$Flush.<init>(ColumnFamilyStore.java:1137)
	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtable(ColumnFamilyStore.java:1000)
	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtableIfCurrent(ColumnFamilyStore.java:981)
	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtableOrNotify(ColumnFamilyStore.java:966)
	at org.apache.cassandra.db.ColumnFamilyStore.reload(ColumnFamilyStore.java:393)
{code}

First reported to slack: https://the-asf.slack.com/archives/CK23JSY2K/p1673382016638189",,dcapwell,dchenbecker,e.dimitrova,jonmeredith,kamalesh0420,mck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,kamalesh0420,,,,,,,,,,,,Correctness -> Test Failure,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Mar 06 21:04:02 UTC 2023,,,,,,,All,,,,"0|z1eqd4:",9223372036854775807,,,,dcapwell,jmeredithco,,Normal,,4.1.0,,https://github.com/apache/cassandra/commit/0a0e06847bf10aa88a3a30c239c507a64f949d74,,,,,,,,,[https://github.com/apache/cassandra/pull/2107],,,,,"22/Jan/23 02:21;kamalesh0420;Submitted PR to fix this issue: https://github.com/apache/cassandra/pull/2107;;;","23/Jan/23 22:14;e.dimitrova;Thank you for the patch, I just tried to push the patch to CI but I cannot access Jenkins in the moment. I will post CI run later

Also, normally whoever submits a patch moves the ticket to patch available to signal that it's ready for review. I almost missed your message in Slack.;;;","23/Jan/23 23:39;kamalesh0420;Oh okay thanks for letting me know :) . ;;;","24/Jan/23 00:46;e.dimitrova;-CI is running [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2218/]-

New link - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2189/workflows/49ac872c-a5bd-4547-be04-ea991e11afad]

NOTE: I pushed the tests in a loop with the free tier as it is a unit test fix and those can be run by anyone with free CircleCI access. Higher resources not needed;;;","25/Jan/23 03:56;kamalesh0420;[~e.dimitrova] is the circleCI run completed? I have been checking it since yesterday, and it shows `On Hold` for the overall status. ;;;","25/Jan/23 03:59;e.dimitrova;It shows on hold because I didn't start all jobs, but those I started are all green so at least CI does not have any complaints :-) ;;;","26/Jan/23 18:15;dcapwell;Tested locally and see it passes with SkipList.  I found out that the reason why SkipList is passing is that AbstractShardedMemtable isn't used by SkipList and the issue is with AbstractShardedMemtable; the test is using tokens that don't match the partitioner, so the test was at fault to begin with

+1;;;","02/Mar/23 14:51;jonmeredith;Hit this again today on https://app.circleci.com/pipelines/github/jonmeredith/cassandra/746/workflows/5e928d77-0717-4ae0-ad1d-7883871c7f8e/jobs/5113 - do you have time for second commuter review [~e.dimitrova] or would you like me to pick it up?;;;","02/Mar/23 15:11;e.dimitrova;Hey [~jonmeredith] , I helped to quickly push it to CI but I haven't looked into the code/problem. If you have cycles to help with the second review, I think it will be great! Thanks in advance!;;;","03/Mar/23 22:33;jonmeredith;+1 from me too. I'll commit.;;;","03/Mar/23 22:51;jonmeredith;Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/jonmeredith/cassandra/tree/commit_remote_branch/CASSANDRA-18144-trunk-368ED32C-C5A2-4993-90D6-F6F6C1E40CB2]|[build|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=commit_remote_branch%2FCASSANDRA-18144-trunk-368ED32C-C5A2-4993-90D6-F6F6C1E40CB2]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2323/]|;;;","06/Mar/23 16:44;dchenbecker;This appears to have broken one of the dtests:

https://ci-cassandra.apache.org/job/Cassandra-trunk/1473/testReport/dtest.replace_address_test/TestReplaceAddress/;;;","06/Mar/23 17:01;e.dimitrova;Hey [~dchenbecker] , I believe we can close this one as it fixed a unit test and it cannot affect a Python DTest. I think the python DTest is probably a flaky one. I can see it actually failed twice in the past 30 runs.  ;;;","06/Mar/23 20:43;mck;The failure is found [here|https://ci-cassandra.apache.org/job/Cassandra-trunk/1473/testReport/dtest.replace_address_test/TestReplaceAddress/test_fail_without_replace/].

It is a `{{TimeoutError}}` which we don't (re-)open tickets for, as described [here|https://cwiki.apache.org/confluence/display/CASSANDRA/Build+Lead]
{quote}
For failures with ""Timeout …"", we can ignore them , as it's considered test-infrastructure failures. …
{quote}

Open to suggestions on how to improve this, especially for new Build Leads figuring this out…;;;","06/Mar/23 20:53;jonmeredith;I just double-checked the commit [https://github.com/apache/cassandra/commit/0a0e06847bf10aa88a3a30c239c507a64f949d74] and it only modifies the java test, so don't see how it could affect the Python dtest.;;;","06/Mar/23 21:04;dchenbecker;Spurious dtest failure misled to this ticket;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
upgradesstables does not always upgrade tables in proper order.,CASSANDRA-18143,13517582,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,claude,claude,claude,11/Jan/23 09:54,14/Mar/23 14:33,13/Jul/23 08:41,14/Mar/23 14:33,3.0.29,3.11.15,4.0.9,4.1.1,5.0,,Tool/sstable,,,0,,,,,"The SSTableUpgrader accepts tools in the hash order provided by Directories.SSTableLister rather than ordering them to ensure that they are upgraded in the proper order.

They should be ordered by their id. The comparator for SSTableId is available in SSTableIdFactory.COMPARATOR. 
 
Dev discussion thread: https://lists.apache.org/thread/w6pm5hbdxt295mtvlckv0joyk8x4o8nf",,claude,jlewandowski,mmuzaf,smiklosovic,,,,,,"jacek-lewandowski closed pull request #2214: CASSANDRA-18143-3.0 Fix ordering of sstables when upgrading
URL: https://github.com/apache/cassandra/pull/2214


;14/Mar/23 14:33;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,0.0,claude,,,,,,,,,,,,Correctness,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Mar 14 14:33:25 UTC 2023,,,,,,,All,,,,"0|z1eptk:",9223372036854775807,,,,jlewandowski,smiklosovic,,Low,,3.0.0,,https://github.com/apache/cassandra/commit/8df69c8016fb84e59e558e74508a0767ad3a7cc0,,,,,,,,,ci,,,,,"12/Jan/23 13:18;jlewandowski;[~claude] please attach a link to the pull request you've created;;;","12/Jan/23 16:48;claude;Pull request is at https://github.com/apache/cassandra/pull/2081;;;","02/Feb/23 14:00;smiklosovic;Great patch. [~jlewandowski] are you on top of this? Would be a bummer to let this one slip through.;;;","27/Feb/23 13:12;jlewandowski;Let's conclude this ticket;;;","14/Mar/23 09:27;jlewandowski;3.0  https://github.com/jacek-lewandowski/cassandra/tree/CASSANDRA-18143-3.0 https://github.com/apache/cassandra/pull/2214
3.11 https://github.com/jacek-lewandowski/cassandra/tree/CASSANDRA-18143-3.11
4.0  https://github.com/jacek-lewandowski/cassandra/tree/CASSANDRA-18143-4.0
4.1  https://github.com/jacek-lewandowski/cassandra/tree/CASSANDRA-18143-4.1
5.0  https://github.com/jacek-lewandowski/cassandra/tree/CASSANDRA-18143

Tests:
3.0  https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/617/workflows/c4a9facb-4918-4b78-9019-cb98e55a983a
3.11 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/613/workflows/ca64b8de-6d25-474f-a8be-e1644ffacedb
4.0 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/614/workflows/8df14d46-21dd-4ff5-b40d-bb9e71af6a5a, https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/614/workflows/5ed83a49-a560-46ae-a8db-708a55082a66
4.1 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/615/workflows/9872e6b8-8432-4126-bfa7-0767faa95391
5.0 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/616/workflows/d584f8c4-0481-490e-aeb5-b58b3e57b0d6
;;;","14/Mar/23 13:26;smiklosovic;All good. 4.0 should be restarted though. On successful build there I am +1 and we can commit. Thanks.;;;","14/Mar/23 13:36;jlewandowski;4.0 unit tests retried and passed. All looking good, merging, thanks for the review;;;","14/Mar/23 14:33;jlewandowski;Committed, thanks [~claude] and [~smiklosovic];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cqlsh incorrectly formats duration,CASSANDRA-18141,13517448,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,masokol,masokol,masokol,10/Jan/23 12:34,30/Jan/23 12:47,13/Jul/23 08:41,17/Jan/23 20:35,4.0.8,4.1.1,5.0,,,,Tool/cqlsh,,,0,,,,,"It looks like something broke between C* 3.11 and C* 4.X when it comes to duration types.

Example:

CREATE KEYSPACE users WITH replication = \{'class': 'NetworkTopologyStrategy', 'datacenter1': '1'} AND durable_writes = true;
CREATE TABLE users.user_credentials_by_email (email text,la_duration duration,PRIMARY KEY(email));
INSERT INTO users.user_credentials_by_email (email, la_duration ) VALUES ( 'test0@test.com', 12h);
INSERT INTO users.user_credentials_by_email (email, la_duration ) VALUES ( 'test1@test.com', 12h30m);
INSERT INTO users.user_credentials_by_email (email, la_duration ) VALUES ( 'test2@test.com', 12h30m30s);
INSERT INTO users.user_credentials_by_email (email, la_duration ) VALUES ( 'test3@test.com', 12h30m30s250ms);
INSERT INTO users.user_credentials_by_email (email, la_duration ) VALUES ( 'test4@test.com', PT12H30M);

3.11:

cassandra@cqlsh> SHOW VERSION ;
[cqlsh 5.0.1 | Cassandra 3.11.15-SNAPSHOT | CQL spec 3.4.4 | Native protocol v4]
cassandra@cqlsh> SELECT * FROM users.user_credentials_by_email ;

 email          | la_duration
----------------+----------------
 test0@test.com |            12h
 test3@test.com | 12h30m30s250ms
 test4@test.com |         12h30m
 test1@test.com |         12h30m
 test2@test.com |      12h30m30s

(5 rows)

4.X:

cassandra@cqlsh> SHOW VERSION ;
[cqlsh 6.0.0 | Cassandra 4.0.8-SNAPSHOT | CQL spec 3.4.5 | Native protocol v5]
cassandra@cqlsh> SELECT * FROM users.user_credentials_by_email ;

 email          | la_duration
----------------+-----------------------------------------------------
 test0@test.com |                                               12.0h
 test3@test.com | 12.508402777777778h30.504166666666666m30.25s250.0ms
 test4@test.com |                                          12.5h30.0m
 test1@test.com |                                          12.5h30.0m
 test2@test.com |                       12.508333333333333h30.5m30.0s

(5 rows)",,e.dimitrova,masokol,,,,,,,,"masokol opened a new pull request, #2080:
URL: https://github.com/apache/cassandra/pull/2080

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;11/Jan/23 09:44;githubbot;600","masokol closed pull request #2080: CASSANDRA-18141
URL: https://github.com/apache/cassandra/pull/2080


;30/Jan/23 12:47;githubbot;600",,,,,,,,,,,,,,,,,,,,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,0.0,masokol,,,,,,,,,,,,Correctness,,,,,,,,Normal,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Tue Jan 17 20:35:32 UTC 2023,,,,,,,All,,,,"0|z1ep00:",9223372036854775807,,,,brandon.williams,e.dimitrova,,Normal,,4.0-alpha4,,https://github.com/apache/cassandra/commit/175272fff46f8441890e481c031ad521df9c9983,,,,,,,,,Added python tests,,,,,"10/Jan/23 17:33;brandon.williams;A bisect here points to either CASSANDRA-15696 or CASSANDRA-15573, and the formatting is correct before then.;;;","11/Jan/23 06:51;masokol;I think this is related to python version, i.e python2 vs python3.

It seems that division in python3 was changed, see [pep-238|https://peps.python.org/pep-0238/].

python test:

a = 55

b = 10

print(str(a/b))

 

Running the above example with python 2.7.18:

*5*

Running the above example with python 3.6.9:

*5.5*

The division is used by cqlsh to convert duration to string,

here: [https://github.com/apache/cassandra/blob/trunk/pylib/cqlshlib/formatting.py#L409]

and here: [https://github.com/apache/cassandra/blob/trunk/pylib/cqlshlib/formatting.py#L429];;;","11/Jan/23 09:45;masokol;Python tests and fix in [PR|https://github.com/apache/cassandra/pull/2080].

Tested the changes locally with python 2.7 and 3.6.;;;","11/Jan/23 11:35;brandon.williams;Thanks for the patch, this looks spot on!


||Branch||CI||
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18141-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/747/workflows/cb20ea90-139c-4eb9-a7ad-e8a85067fbc5], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/747/workflows/6b8d4517-554a-4a1f-9ab8-56b9764ddeab]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18141-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/745/workflows/436b5f32-3f3a-442f-898f-456edf552111], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/745/workflows/4a7b4a27-ebda-46d6-826a-50f538769460]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18141-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/746/workflows/882794b7-dfcb-4bfd-abdc-d423b2e6e0ce], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/746/workflows/21305969-dd10-4edb-8d4f-086367a05001]|

;;;","11/Jan/23 12:36;brandon.williams;CI looks good with one unrelated env failure in 4.0.  +1 from me.;;;","11/Jan/23 19:47;e.dimitrova;Can we re-run {{j11_cqlsh_dtests_py38_vnode for 4.0, please? It seems there was some environmental issue. The other SchemaTest failure doesn't seem related and it was also just reported in CASSANDRA-17819.}}

{{I can review the code changes later today or tomorrow. }};;;","11/Jan/23 19:57;brandon.williams;[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/747/workflows/4bfc6ac9-b698-4b5b-b3dd-5a7d4a8e6c96/jobs/9177] you go.;;;","13/Jan/23 22:19;e.dimitrova;Thanks [~brandon.williams] 

Question: We test this with Python 3 as far as I can see but isn't Python 2 only deprecated in 4.0, so is this going to break there?;;;","13/Jan/23 22:23;e.dimitrova;Actually looking here, I think I am wrong and it could be ok:

[https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html#python-2-1]

Please check the recommendations. Actually this is not from the official docs, probably good to double check there. Also, I am wondering whether we want some Python 2 test. This goes to patch release so I want to be extra careful;;;","13/Jan/23 22:34;brandon.williams;We aren't changing python2, only python3's display.;;;","17/Jan/23 18:11;e.dimitrova;+1, thanks;;;","17/Jan/23 20:35;brandon.williams;Committed, thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getsstables --show-levels JMX serialization error,CASSANDRA-18140,13517286,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,jwest,jwest,jwest,09/Jan/23 19:38,11/Jan/23 23:44,13/Jul/23 08:41,11/Jan/23 23:44,NA,,,,,,Tool/nodetool,,,1,,,,,While the interface is compliant and tested by JMXStandardsTest the implementation is not actually serializable: {{java.io.NotSerializableException: com.google.common.collect.AbstractMapBasedMultimap$AsMap}},,jwest,superwangcheng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,jwest,,,,,,,,,,,,Code -> Bug - Unclear Impact,,,,,,,,Normal,Adhoc Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Wed Jan 11 23:44:42 UTC 2023,,,,,,,All,,,,"0|z1eo28:",9223372036854775807,,,,brandon.williams,superwangcheng,,Normal,,5.0,,https://github.com/apache/cassandra/commit/e936b2cc1ba7f525c636de5f9fb1780ca70f1762,,,,,,,,,manual verification,,,,,"09/Jan/23 20:51;jwest;[https://github.com/jrwest/cassandra/tree/jwest/18140]

 
Tests: [j11|https://app.circleci.com/pipelines/github/jrwest/cassandra/136/workflows/43420c29-1030-4629-adca-784492e481b1] [j8|https://app.circleci.com/pipelines/github/jrwest/cassandra/136/workflows/3e7bc7a1-8761-4cea-a5ea-c4afa372872c];;;","10/Jan/23 18:56;brandon.williams;+1.  I guess we never checked this originally.;;;","10/Jan/23 20:16;jwest;Thanks for the quick review. I could have sworn I did but it mustve been on an older copy of the code on accident :/. ;;;","10/Jan/23 23:18;superwangcheng;+1. ;;;","11/Jan/23 23:44;jwest;Commited as https://github.com/apache/cassandra/commit/e936b2cc1ba7f525c636de5f9fb1780ca70f1762;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade maven-shade-plugin to fix shaded dtest JAR build,CASSANDRA-18136,13516715,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,,aratnofsky,aratnofsky,05/Jan/23 19:29,14/Mar/23 21:00,13/Jul/23 08:41,14/Mar/23 21:00,5.0,,,,,,Build,Packaging,,0,,,,,"Could not build shaded dtest JAR with ./build-shaded-dtest-jar.sh due to:
{code:java}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:3.2.1:shade (default) on project cassandra-dtest-shaded: Error creating shaded jar: Problem shading JAR ~/Repos/apache/cassandra/target/cassandra-dtest-shaded-4.0.1-SNAPSHOT.jar entry net/openhft/chronicle/wire/YamlWire$TextValueIn.class: org.apache.maven.plugin.MojoExecutionException: Error in ASM processing class net/openhft/chronicle/wire/YamlWire$TextValueIn.class: 65536 -> [Help 1] {code}
 

Tried on both Java 8 and Java 11, included ant clean / realclean / unlinking the entire ~/.m2/repository.

 

Fixed by upgrading maven-shade-plugin in relocate-dependencies.pom:
{code:java}
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
-                <version>3.2.1</version>
+                <version>3.4.1</version>{code}",,aratnofsky,maedhroz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,aratnofsky,,,,,,,,,,,,Packaging,,,,,,,,Low Hanging Fruit,User Report,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Jan 09 17:42:45 UTC 2023,,,,,,,All,,,,"0|z1ekjs:",9223372036854775807,,,,maedhroz,,,Normal,,5.0,,https://github.com/apache/cassandra/commit/fb95112427a8c64344563b6e499a6fb7bbf538d1,,,,,,,,,This passes test if shaded dtest JARs build successfully and can be used by dependencies such as Harry.,,,,,"09/Jan/23 17:42;maedhroz;+1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LongBTreeTest times out after btree improvements from CASSANDRA-15510,CASSANDRA-18131,13516372,Bug,Resolved,CASSANDRA,Cassandra,software,mck,"<p>The Cassandra Project is a distributed storage system for managing structured/unstructured data while providing reliability at a massive scale.</p>
<br/>
<p>Please request the <b>creation of a jira account</b> on either the <a href=""https://cassandra.apache.org/_/community.html#discussions"">dev@cassandra.apache.org</a> mailing list or the ASF slack channel <a href=""https://cassandra.apache.org/_/community.html#discussions"">#cassandra-dev</a></p>",http://cassandra.apache.org/,Normal,Fixed,mmuzaf,mck,mck,03/Jan/23 19:45,03/Apr/23 13:35,13/Jul/23 08:41,03/Apr/23 13:22,4.0.9,4.1.2,5.0,,,,Local/Memtable,Test/burn,,0,,,,,"Happening in both ci-cassandra.a.o and circleci.

LongBTreeTest is timing out on 4.0, 4.1, trunk branches.

Started back in mid April (https://github.com/apache/cassandra/commit/018c8e0d5e and https://github.com/apache/cassandra/commit/596daeb7f08). 

Nightlies shows when the failures started, evident by the 'jdk=jdk_1.8_latest,label=cassandra,split=7/' subfolder missing in the following… 
- https://nightlies.apache.org/cassandra/trunk/Cassandra-trunk-test-burn/1254/Cassandra-trunk-test-burn/
- https://nightlies.apache.org/cassandra/cassandra-4.0/Cassandra-4.0-test-burn/343/",,mck,mmuzaf,,,,,,,,"Mmuzaf opened a new pull request, #2178:
URL: https://github.com/apache/cassandra/pull/2178

   Thanks for sending a pull request! Here are some tips if you're new here:
    
    * Ensure you have added or run the [appropriate tests](https://cassandra.apache.org/_/development/testing.html) for your PR.
    * Be sure to keep the PR description updated to reflect all changes.
    * Write your PR title to summarize what this PR proposes.
    * If possible, provide a concise example to reproduce the issue for a faster review.
    * Read our [contributor guidelines](https://cassandra.apache.org/_/development/index.html)
    * If you're making a documentation change, see our [guide to documentation contribution](https://cassandra.apache.org/_/development/documentation.html)
    
   Commit messages should follow the following format:
   
   ```
   <One sentence description, usually Jira title or CHANGES.txt summary>
   
   <Optional lengthier description (context on patch)>
   
   patch by <Authors>; reviewed by <Reviewers> for CASSANDRA-#####
   
   Co-authored-by: Name1 <email1>
   Co-authored-by: Name2 <email2>
   
   ```
   
   The [Cassandra Jira](https://issues.apache.org/jira/projects/CASSANDRA/issues/)
   
   


;27/Feb/23 16:41;githubbot;600","michaelsembwever commented on code in PR #2178:
URL: https://github.com/apache/cassandra/pull/2178#discussion_r1155339422


##########
test/burn/org/apache/cassandra/utils/LongBTreeTest.java:
##########
@@ -785,7 +784,7 @@ public void testBatchesSmallOverlappingRange() throws ExecutionException, Interr
     @Test
     public void testIndividualInsertsMediumSparseRange() throws ExecutionException, InterruptedException
     {
-        testInsertions(randomSeed(), perThreadTrees / 10, 500, 10, 1, true);
+        testInsertions(randomSeed(), 500, 10, 1, true);

Review Comment:
   the default value of this `tests` parameter is `perThreadTrees * threads`, so we could be replacing values of `1000` with `25600` (where there are 32 availableProcessors). Note in ant we limit this to `2 processors` [here|https://github.com/apache/cassandra/blob/trunk/build.xml#L127] so a value of `1600` (which is still an increase).
   
   is this what you intended @Mmuzaf ?



;02/Apr/23 16:21;githubbot;600","michaelsembwever commented on code in PR #2178:
URL: https://github.com/apache/cassandra/pull/2178#discussion_r1155339422


##########
test/burn/org/apache/cassandra/utils/LongBTreeTest.java:
##########
@@ -785,7 +784,7 @@ public void testBatchesSmallOverlappingRange() throws ExecutionException, Interr
     @Test
     public void testIndividualInsertsMediumSparseRange() throws ExecutionException, InterruptedException
     {
-        testInsertions(randomSeed(), perThreadTrees / 10, 500, 10, 1, true);
+        testInsertions(randomSeed(), 500, 10, 1, true);

Review Comment:
   the default value of this `tests` parameter is `perThreadTrees * threads`, so we could be replacing values of `1000` with `25600` (where there are 32 availableProcessors). Note in ant we limit this to `2 processors` [here](https://github.com/apache/cassandra/blob/trunk/build.xml#L127) so a value of `1600` (which is still an increase).
   
   is this what you intended @Mmuzaf ?



;02/Apr/23 16:21;githubbot;600","Mmuzaf commented on code in PR #2178:
URL: https://github.com/apache/cassandra/pull/2178#discussion_r1155357680


##########
test/burn/org/apache/cassandra/utils/LongBTreeTest.java:
##########
@@ -785,7 +784,7 @@ public void testBatchesSmallOverlappingRange() throws ExecutionException, Interr
     @Test
     public void testIndividualInsertsMediumSparseRange() throws ExecutionException, InterruptedException
     {
-        testInsertions(randomSeed(), perThreadTrees / 10, 500, 10, 1, true);
+        testInsertions(randomSeed(), 500, 10, 1, true);

Review Comment:
   Correct, I think we can safely increase the number of local runs for `testLargeBatchesLargeRange`, and `testIndividualInsertsMediumSparseRange` while still maintaining a reasonable execution time for the LongBTreeTest as a whole. 
   
   For the tests that fire `testInsertions` with parameters the main concern we have is - we perform different numbers of test attempts to check tree insertions for variations of ranges and batches, but the same equal number of `tests` should be used for all of them. I think `perThreadTrees * threads` is the better choice for us since increasing the `perThreadTrees` (for `testInsertions` it's not exactly trees per thread as it says, it's just a multiplier) will give us the ability to find patterns e.g. for a heap consumption during a particular run.
   
   



;02/Apr/23 18:44;githubbot;600","Mmuzaf commented on code in PR #2178:
URL: https://github.com/apache/cassandra/pull/2178#discussion_r1155358445


##########
test/burn/org/apache/cassandra/utils/LongBTreeTest.java:
##########
@@ -785,7 +784,7 @@ public void testBatchesSmallOverlappingRange() throws ExecutionException, Interr
     @Test
     public void testIndividualInsertsMediumSparseRange() throws ExecutionException, InterruptedException
     {
-        testInsertions(randomSeed(), perThreadTrees / 10, 500, 10, 1, true);
+        testInsertions(randomSeed(), 500, 10, 1, true);

Review Comment:
   It is also possible to just set the `perThreadTrees` for 10000 back to 100 as an _easy fix_, I guess. I just wanted to fix the problem wider and maybe I overdid it :-)



;02/Apr/23 18:50;githubbot;600",,,,,,,,,,,,,,,,,,,,,0,3000,,,0,3000,,,,,,,,,CASSANDRA-15510,,,,,,,,,,,0.0,mmuzaf,,,,,,,,,,,,Availability -> Unavailable,,,,,,,,Normal,Unit Test,,false,,,,,,,,,,,,,,,,,9223372036854775807,,None,,Mon Apr 03 13:35:26 UTC 2023,,,,,,,All,,,,"0|z1eifk:",9223372036854775807,,,,mck,,,Normal,,4.0.5,,https://github.com/apache/cassandra/commit/b3256f5bf22c99a8f5410634dd41ca1643a34c1c,,,,,,,,,"Run LongBTreeTest locally, documentation is not required.",,,,,"03/Jan/23 19:47;mck;[~benedict], [~blambov], [~blerer];;;","24/Feb/23 12:22;mmuzaf;Hello everyone, I'll try to take a look at the cause.
Please let me know if your vision has changed or if the issue is no longer relevant.;;;","28/Feb/23 23:49;mmuzaf;[~mck], [~benedict],

The reason the test suite hangs is that the number of running tests configured by the {{perThreadTrees}} configuration parameter is too large to complete within a reasonable time (the test suite timeout is 90 minutes). There is no such problem for the {{cassandra-3.11}} branch, as {{perThreadTrees}} is set to 100, so the test completes within 15 minutes. See [LongBTreeTest.java#L61|https://github.com/apache/cassandra/blob/cassandra-3.11/test/burn/org/apache/cassandra/utils/LongBTreeTest.java#L61].

The total number of ""runs"" has been changed several times to fit the timeout, so the issues seem to be common:
||JIRA||Change||
|CASSANDRA-15487|iterations from 100000000 to 10000|
|CASSANDRA-9989|perThreadTrees from 10000 to 100|
|CASSANDRA-9932|from 100000000 to perThreadTrees / 10 (in total 1000)|

It seems to me that the perThreadTrees was unintentionally changed in CASSANDRA-15510, so we should revert to the old value. I've also fixed a few places where the perThreadTrees is not used for the right purpose (like for iterations in the testRandomRangeAndBatches), so the whole {{LongBTreeTest}} was scaled incorrectly.

Please, take a look.

I have got successful results here, but still waiting for the final run:
[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2301/flowGraphTable/];;;","01/Mar/23 11:56;mmuzaf;The build results here (~ 45 min for the {{{}perThreadTrees = 500{}}}):
[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2306/flowGraphTable/];;;","09/Mar/23 19:47;brandon.williams;/cc [~blerer];;;","02/Apr/23 15:14;mmuzaf;[~benedict], [~blambov], [~blerer]

Hello everyone, just a friendly reminder, can you take a look at the patch? Hope you can find some time.

The fix is simple, the whole suite #7 still hangs:
https://ci-cassandra.apache.org/view/Cassandra%205.0/job/Cassandra-trunk-test-burn/1586/
;;;","02/Apr/23 20:51;mck;+1;;;","02/Apr/23 21:04;mck;[~mmuzaf], before I commit, i'm thinking about this…

bq. ~ 45 min for the perThreadTrees = 500

The longest split we have currently in Cassandra-trunk-test-burn is ~30 minutes.

The burn tests are intended here only to be tested that they run, not to actually perform the burn (there's no point on non-dedicated servers and homogeneous agents), so short runs are fine (so long as it's easy and obvious that developers need parameterise it properly).

Can you reduce it sensibly to ~5 minutes? (when running on the ci-cassandra.a.o agents);;;","02/Apr/23 23:02;mmuzaf;[~mck]

I have reused the value from the [{{cassandra-3.11}}|https://github.com/apache/cassandra/blob/cassandra-3.11/test/burn/org/apache/cassandra/utils/LongBTreeTest.java#L61] branch, where the test completed successfully in ~20-40 min, depending on the CI agent used.
Here is an example of the lastest run for 3.11:
https://ci-cassandra.apache.org/view/Cassandra%203.11/job/Cassandra-3.11-test-burn/496/

I tested the patch with perThreadTrees = 100 (the same as for 3.11) and it finished within 38 min which looks pretty much the same.
https://ci-cassandra.apache.org/job/Cassandra-devbranch-test-burn/1810/

I think we can reduce the value to perThreadTrees = 10, my local runs show exactly 5 min execution time.;;;","03/Apr/23 08:03;mck;bq. I think we can reduce the value to perThreadTrees = 10, my local runs show exactly 5 min execution time.

I'll do that on commit. Thanks.;;;","03/Apr/23 13:22;mck;Committed as [b3256f5bf22c99a8f5410634dd41ca1643a34c1c|https://github.com/apache/cassandra/commit/b3256f5bf22c99a8f5410634dd41ca1643a34c1c];;;","03/Apr/23 13:35;mmuzaf;[~mck] Thank you for your review and time!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
