Summary,Issue key,Issue id,Parent id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Cloners),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Incorporates),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Inward issue link (Regression),Outward issue link (Regression),Outward issue link (Regression),Inward issue link (Required),Outward issue link (Required),Inward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
camel-jms - JmsPollingConsumer use the constant fields from JmsTemplate for receiveNoWait etc,CAMEL-5917,12625479,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Dec/12 10:44,29/Dec/12 11:56,14/Jul/23 05:45,29/Dec/12 11:53,2.10.0,2.9.0,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/JmsPollingConsumer-and-method-receiveNoWait-has-incorrect-timeout-value-tp5722817.html",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,302021,,,Sat Dec 29 11:56:47 UTC 2012,,,,,,,,,,,"0|i16y33:",248656,,,,,,,,,,,,,,,,,,,,"29/Dec/12 11:56;muellerc;I was too slow... ;-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Websocket consumer cannot be started, because of NPE",CAMEL-5908,12625137,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,azarny,azarny,23/Dec/12 08:53,29/Dec/12 10:31,14/Jul/23 05:45,25/Dec/12 06:48,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,,,camel-websocket,,,,0,,,,,,,,,"Websocket consumer cannot be started for simple route 
        <camel:route>
            <camel:from uri=""websocket://localhost:9998/cnt""/>
            <camel:to uri=""stream:out""/>
        </camel:route>

Root cause:

Websoket component has not serlvet object. 

WebsoketComponent#line:170
// Don't provide a Servlet object as Producer/Consumer will create them later on
connectorRef = new ConnectorRef(server, connector, null);


WebsoketComponent#line:190
if (prodcon instanceof WebsocketConsumer) {
      // connect websocket consumer, to servlet
      connectorRef.servlet.connect((WebsocketConsumer) prodcon);
}


Stack trace is:
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.websocket.WebsocketComponent.connect(WebsocketComponent.java:192)
        at org.apache.camel.component.websocket.WebsocketEndpoint.connect(WebsocketEndpoint.java:90)
        at org.apache.camel.component.websocket.WebsocketConsumer.start(WebsocketConsumer.java:36)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2059)
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1995)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1923)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1702)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1583)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
        at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)",,azarny,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,301673,,,Tue Dec 25 06:48:09 UTC 2012,,,,,,,,,,,"0|i16vfr:",248225,,,,,,,,,,,,,,,,,,,,"25/Dec/12 06:48;njiang;Applied the patch into trunk and 2.10.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel leaks memory on undeploy / redeploy in app server when JMX enabled and createConnector = true,CAMEL-5907,12625093,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sdanig,sdanig,22/Dec/12 02:55,02/Jan/13 07:11,14/Jul/23 05:45,02/Jan/13 07:11,2.10.0,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jmx,,,,0,,,,,,,,,"We have embedded Camel in an EAR that we deploy to Weblogic. The Camel context is configured via Spring:

{code}    <camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
        <contextScan />
        <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
    </camelContext>{code}

You can see that we create a JMX connector to allow for remote management.

However, we have run into PermGen space issues, because our application is leaking class loaders when the application is undeployed or redeployed.

After digging around (and addressing some Jasper Reports ThreadLocal sloppiness), it appears that the only issue left is that the sun.rmi.transport.ObjectTable class maintains a static reference to all available RMI targets. Unfortunately, one of these targets is the JMX connector created by Camel, which was obviously loaded via our application's classloader.

Thus, ObjectTable has a static reference to the Camel JMX RMI target, which has a reference to the app's class loader, which in turn has references to all classes loaded (and generated) for that single deployment of the application -- and none of these classes can be GC'ed.

After digging through the code for Camel's DefaultManagementAgent, I'm inclined to believe that the fix is fairly simple:

# Update {{createJmxConnector(String)}} to cache the reference to the created {{Registry}} in an instance variable.

# Update {{doStop()}} to check if we have a cached {{Registry}} instance, and if we do, call {{UnicastRemoteObject.unexportObject(registry, true);}}

Some app servers have workarounds for this sort of leak (see ""RMI targets"" in Table 1 at [1]), but Weblogic doesn't seem to.

I'll also attach a screenshot of the memory analysis (more info at [2]).



[1] http://pic.dhe.ibm.com/infocenter/wasinfo/v8r5/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Fae%2Fctrb_memleakdetection.html

[2] http://www.yourkit.com/docs/kb/class_loaders.jsp",,davsclaus,sdanig,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Dec/12 04:42;sdanig;camel-5907.patch;https://issues.apache.org/jira/secure/attachment/12562307/camel-5907.patch","22/Dec/12 02:58;sdanig;leak.png;https://issues.apache.org/jira/secure/attachment/12562206/leak.png",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,301629,,,Wed Jan 02 07:11:40 UTC 2013,,,,,,,,,,,"0|i16v3z:",248172,,,,,,,,,,,,,,,,,,,,"22/Dec/12 11:33;davsclaus;Thanks for reporting.

Would you be able to work on a patch with your suggested fix?

There is a bit information about how to create and contribute patches at:
http://camel.apache.org/contributing.html;;;","24/Dec/12 04:41;sdanig;Yep, no problem. I've contributed a couple of patches before :-)

I'm including a unit test that verifies that the registry is cleaned up when the Camel context is stopped. The class that I added the test to doesn't really run the tests if you're on Windows, so watch out for that!;;;","02/Jan/13 07:11;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Negative in-flight counter,CAMEL-5905,12624981,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Dec/12 11:52,21/Jan/13 12:17,14/Jul/23 05:45,21/Jan/13 12:17,2.10.0,,,,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,0,,,,,,,,,"I noticed a situation with a negative in-flight counter.

Seems related to situations with handling an exception. Will have to dig deeper. Just wanted to log a JIRA.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Dec/12 11:53;davsclaus;negative-in-flight.png;https://issues.apache.org/jira/secure/attachment/12562070/negative-in-flight.png",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,301506,,,Mon Jan 21 12:17:58 UTC 2013,,,,,,,,,,,"0|i16u67:",248020,,,,,,,,,,,,,,,,,,,,"21/Jan/13 12:17;davsclaus;Fixed some issues recently. Lets see if this resurfaces.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - Producer should avoid blocking while waiting for connection,CAMEL-5899,12624667,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/12 16:38,20/Dec/12 10:04,14/Jul/23 05:45,20/Dec/12 10:04,2.10.0,,,,,,,,,,,,2.10.4,2.11.0,,,camel-netty,,,,0,,,,,,,,,We should at most wait for the connection timeout to trigger.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,300492,,,2012-12-19 16:38:03.0,,,,,,,,,,,"0|i168n3:",244532,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nullcheck missing in CxfPayloadConverter,CAMEL-5897,12624503,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,18/Dec/12 17:58,18/Dec/12 21:20,14/Jul/23 05:45,18/Dec/12 21:20,2.10.3,,,,,,,,,,,,2.10.4,2.9.6,,,camel-cxf,,,,0,,,,,,,,,"There's a null-check missing in CxfPayloadConverter which triggers a NPE if the payload is the result from a SOAP Fault, in which case the CxfPayload object contains no body sources at all.

Stack trace, in this case what triggers type converters is Stream Caching, but it could happen in other cases where the FallbackConverter is utilized.

{code}
Exception in thread ""default-workqueue-3"" org.apache.camel.TypeConversionException: Error during type conversion from type: org.apache.camel.component.cxf.CxfPayload to the required type: org.apache.camel.StreamCache with value org.apache.camel.component.cxf.CxfPayload headers: []body: null due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)
	at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:102)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:46)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
[...]
        at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:82)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1540)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:50)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)
	... 56 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.converter.CxfPayloadConverter.convertTo(CxfPayloadConverter.java:150)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)
	... 59 more
{code}",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,300324,,,Tue Dec 18 18:06:30 UTC 2012,,,,,,,,,,,"0|i1677z:",244302,,,,,,,,,,,,,,,,,,,,"18/Dec/12 18:06;raulvk;The bug was not introduced in r1376523 as suggested initially, it was there before.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when jaxb fallback converter is used with RequestEntityConverter,CAMEL-5890,12624405,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Dec/12 03:59,18/Jan/13 01:54,14/Jul/23 05:45,18/Jan/13 01:54,2.10.2,2.10.3,2.9.4,2.9.5,,,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,0,,,,,,,,,"As the RequestEntityConverter.toRequestEntity(String str, Exchange exchange) doesn't has check if the exchange is null, it caused the NPE as the user complain in camel user mailing list[1]

[1]http://camel.465427.n5.nabble.com/Content-Enrich-Error-when-upgrading-Apache-Camel-from-2-9-2-to-any-higher-version-td5724244.html

Here is the stack trace.
{code}
CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value ... 
The complete Stack Trace : 
Exchange[ExchangePattern:InOnly, BodyType:String, Body:, CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException, StackTrace:org.apache.camel.TypeConversionException: Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:98)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:148)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:57)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)	at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	... 44 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	... 1 moreCaused by: java.lang.NullPointerException	at org.apache.camel.component.http.RequestEntityConverter.toRequestEntity(RequestEntityConverter.java:51)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	at java.lang.reflect.Method.invoke(Method.java:597)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)	... 50 more]
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,299244,,,Fri Jan 18 01:54:22 UTC 2013,,,,,,,,,,,"0|i160hr:",243212,,,,,,,,,,,,,,,,,,,,"18/Jan/13 01:54;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When call removeRouteDefinition the route doesn't removed from collection of route Definitions.,CAMEL-5888,12624342,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gennady@buhsl.com,gennady@buhsl.com,17/Dec/12 20:10,21/Dec/12 13:51,14/Jul/23 05:45,21/Dec/12 13:51,2.10.2,,,,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,0,,,,,,,,,"When I call removeRouteDefinition for DefaultCamelContext, the route doesn't removed from collection of routes.
   public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {
        String id = routeDefinition.idOrCreate(nodeIdFactory);
        stopRoute(id);
        removeRoute(id);
    }
it is just remove it from running route service if context is running.
When we do restart context this route started again. 
Workaround for this issue is call  removeRouteDefinitions and wrap single route into collection.

But when I call removeRouteDefinitions - it is process correctly: remove from collections of definitions and after removed from running route services.
    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {
        this.routeDefinitions.removeAll(routeDefinitions);
        for (RouteDefinition routeDefinition : routeDefinitions) {
            removeRouteDefinition(routeDefinition);
        }
    }

 
",,davsclaus,gennady@buhsl.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,299181,,,Fri Dec 21 13:20:39 UTC 2012,,,,,,,,,,,"0|i1603j:",243148,,,,,,,,,,,,,,,,,,,,"21/Dec/12 13:20;davsclaus;Is your route properly stopped? It looks like if its not in stopped state the route is not removed.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected behavior when combining onException and multiple adviceWith in camel-core,CAMEL-5887,12624297,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lleclerc,lleclerc,17/Dec/12 15:13,22/Dec/12 15:34,14/Jul/23 05:45,22/Dec/12 15:34,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,0,,,,,,,,,"Here is the unit test with 3 tests (expected results and the strange behavior) : http://pastebin.com/JUnLFy70

A second adviceWith() on a second route will change the behavior from the first route during an Exception.

adviceWith is only used once per route, as suggested in the recommendation : http://camel.apache.org/advicewith.html
""It is recommended to only advice a given route once (you can of course advice multiple routes). If you do it multiple times, then it may not work as expected, especially when any kind of error handling is involved. The Camel team plan for Camel 3.0 to support this as internal refactorings in the routing engine is needed to support this properly.""",,davsclaus,lleclerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,299070,,,Sat Dec 22 15:34:45 UTC 2012,,,,,,,,,,,"0|i15ydr:",242870,,,,,,,,,,,,,,,,,,,,"22/Dec/12 15:34;davsclaus;Thanks for reporting, and providing a test case.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - When using done file name then delete the file when batch is complete,CAMEL-5883,12624242,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,17/Dec/12 08:51,27/Apr/15 14:53,14/Jul/23 05:45,17/Jul/13 08:47,2.10.0,2.9.0,,,,,,,,,,,2.10.7,2.11.2,2.12.0,2.9.7,camel-core,,,,0,,,,,,,,,"When using doneFileName then the file is deleted on each completion of files in the batch. And you get WARN logs about the done file cannot be deleted, because the 1st already deleted the file.

We should defer and only delete the done file on the last in the batch.",,davsclaus,dornseif,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,299006,,,Mon Apr 27 14:53:36 UTC 2015,,,,,,,,,,,"0|i15xx3:",242795,,,,,,,,,,,,,,,,,,,,"11/Jul/13 02:08;njiang;The patch doesn't take the dynamic done file into consideration. 
Here is a [discussion|http://camel.465427.n5.nabble.com/Done-file-not-deleted-tp5735497.html] about it.
;;;","27/Apr/15 14:53;dornseif;There is a real issue with multiple done files that needs addressed.  Only removing the last done file is not an acceptable solution in every case.  This discussion http://camel.465427.n5.nabble.com/Done-file-not-deleted-td5735497.html#a5766387 indicated this jira would be re-opened.  Could you please review and maybe as part of the fix add a boolean to allow deleting multiple done files?  I think the concept of multiple done files is a real world case.

Tom
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quickfix: QuickfixjEndpoint should adhere the InOut exchange pattern if you would ask for this MEP,CAMEL-5880,12624185,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,16/Dec/12 12:20,01/May/13 07:04,14/Jul/23 05:45,30/Apr/13 22:32,2.10.3,,,,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-quickfix,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-td5723769.html,,bvahdat,stevebate,,,,,,,,,,,,,,,,,,,,,CAMEL-5861,CAMEL-4038,,,,,,,,,"27/Feb/13 11:36;stevebate;requestreply-2.patch;https://issues.apache.org/jira/secure/attachment/12571180/requestreply-2.patch","27/Feb/13 02:16;stevebate;requestreply.patch;https://issues.apache.org/jira/secure/attachment/12571117/requestreply.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,298914,,,Wed May 01 07:04:50 UTC 2013,,,,,,,,,,,"0|i15wmn:",242586,,,,,,,,,,,,,,,,,,,,"16/Dec/12 12:29;bvahdat;As the evidence consider running [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] and look at the log entry of the second route:

{code}
2012-12-16 13:23:04,198 [ssage Processor] INFO  OrderStatusRequestLog          - Exchange[
, Id:ID-Babaks-iMac-local-50218-1355660581337-0-24
, ExchangePattern:InOnly
, Properties:{CamelToEndpoint=log://OrderStatusRequestLog?multiline=true&showAll=true&showOut=true, CamelCreatedTimestamp=Sun Dec 16 13:23:04 CET 2012, CamelFilterMatched=true}
, Headers:{EventCategory=AppMessageReceived, breadcrumbId=ID-Babaks-iMac-local-50218-1355660581337-0-23, MessageType=H, SessionID=FIX.4.2:MARKET->TRADER}
, BodyType:quickfix.fix42.OrderStatusRequest
, Body:8=FIX.4.29=8235=H34=249=TRADER52=20121216-12:23:04.19456=MARKET11=XYZ37=abc54=155=GOOG10=145
, Out: null
]
{code};;;","16/Dec/12 13:41;bvahdat;Correspondingly what [the documentation|http://camel.apache.org/quickfix.html#Quickfix-Example] claims to be the case for [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] is wrong.
;;;","27/Feb/13 02:16;stevebate;Patch to fix the RequestReplyExample.;;;","27/Feb/13 08:12;bvahdat;Applying the provided patch on trunk causes regression by {{QuickfixjConsumerTest}} and {{QuickfixjProducerTest}}:

{code}
~/dev/workspace/camel/components/camel-quickfix>svn st
M       src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java
M       src/main/java/org/apache/camel/component/quickfixj/MessagePredicate.java
M       src/main/java/org/apache/camel/component/quickfixj/converter/QuickfixjConverters.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjConsumer.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/classes/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:21, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(121165166))
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to logon request)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.555 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.176 sec <<< FAILURE!
processInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.171 sec  <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)

setExceptionOnInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.mockito.exceptions.verification.junit.ArgumentsAreDifferent: 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)

Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.628 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1183562193))
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Responding to logon request)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.074 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.048 sec <<< FAILURE!
processInOutExchangeSuccess(org.apache.camel.component.quickfixj.QuickfixjProducerTest)  Time elapsed: 5.036 sec  <<< FAILURE!
org.mockito.exceptions.verification.WantedButNotInvoked: 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.

	at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)

Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Session FIX.4.2:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.2:INITIATOR->ACCEPTOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.727 sec

Results :

Failed tests: 
  QuickfixjConsumerTest.processInOutExchange:134 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

  QuickfixjConsumerTest.setExceptionOnInOutExchange:114 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

  QuickfixjProducerTest.processInOutExchangeSuccess:155 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.


Tests run: 42, Failures: 3, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.834s
[INFO] Finished at: Wed Feb 27 08:36:30 CET 2013
[INFO] Final Memory: 13M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.13:test (default-test) on project camel-quickfix: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
{code};;;","27/Feb/13 11:36;stevebate;This is an updated patch with modifications for the unit tests. However, I'd wait to apply the patches until we've discussed the issue with the InOut MEP and the overwriting of the inbound message (which requires the new Exchange copy behavior in the patch).;;;","29/Apr/13 10:01;stevebate;Any more updates on this issue?;;;","29/Apr/13 11:19;bvahdat;Please give me time to find some free cycle, then will dig into this and try to understand what exactly is going on.;;;","30/Apr/13 10:43;bvahdat;Steve,

In the meanwhile the changes of CAMEL-5979 has been applied which is the following commit:

http://svn.apache.org/viewvc?view=revision&revision=r1455750

So apparently the way we retrieve the {{messageSessionID}} has been changed on the consumer side through that ticket. Now with your patch in place I end up with OOM while doing {{mvn clean install}} on this module, but this was not the case before CAMEL-5979! Have you got any idea what the conflict is.

Also your included patch contains the change by {{MessagePredicate}} where reversing the SessionID has been removed but the comment {{Reverse session ID for reply}} is still there. So which one should be correct, the code or the comment?

Fell free to comment on CAMEL-5979 as well if you as *QuickFIX/J Guru* think the changes of CAMEL-5979 were not appropriate or if there would be a better way to do that.
;;;","30/Apr/13 15:28;bvahdat;This is what I get if I apply your patch. Actually all tests pass well, but then at the end get {{java.lang.OutOfMemoryError: PermGen space}}. On the other hand if {{@Ignore}} the Spring test {{org.apache.camel.component.quickfixj.QuickfixjSpringTest}} then the OOM disappears.

{code}
~/dev/workspace/camel/components/camel-quickfix>echo $MAVEN_OPTS
-Xms1024m -Xmx1024m -XX:MaxPermSize=1024m
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.12-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/generated/camel/components/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.14.1:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:57, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(84419191))
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to Logon request)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.455 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 sec
Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.627 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1620729172))
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Responding to Logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 sec
Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.529 sec
java.lang.OutOfMemoryError: PermGen space

Results :

Tests run: 42, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.485s
[INFO] Finished at: Tue Apr 30 17:21:06 CEST 2013
[INFO] Final Memory: 14M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test (default-test) on project camel-quickfix: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test failed: The forked VM terminated without saying properly goodbye. VM crash or System.exit called ?
[ERROR] Command was/bin/sh -c cd /Users/bvahdat/dev/workspace/camel/components/camel-quickfix && /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home/bin/java -jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefirebooter5621841200692637059.jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire8781436168046582511tmp /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire_08815624006783717081tmp
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException
{code};;;","30/Apr/13 20:04;bvahdat;O.K. found a solution for now to make {{maven clean install}} work properly:

{code}
<build>
  <plugins>
    <plugin>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
        <!--
          TODO: should fork per test as otherwise the build would cause 'java.lang.OutOfMemoryError: PermGen space'.
          interestingly found a quick & dirty solution for this which would be to remove the <filter> tag inside the
          test resource QuickfixjSpringTest-context.xml then the build would run perfectly without a need to fork always!
        -->
        <forkMode>always</forkMode>
      </configuration>
    </plugin>
  </plugins>
</build>
{code};;;","30/Apr/13 22:32;bvahdat;Thanks for providing the patch which is backported to the 2.11.x as well as 2.10.x branches. Fixed CS and modified POM as well to avoid OOM for now while running the tests *all together* ({{mvn test}}).;;;","01/May/13 07:04;bvahdat;See also [my answer|http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-tp5723769p5731828.html] to your question @ user forum.;;;",,,,,,,,,,,,,,,,,,
Sporadic Source Conversion issues with CxfPayload,CAMEL-5877,12623943,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,ay,ay,14/Dec/12 12:01,19/Dec/12 19:52,14/Jul/23 05:45,18/Dec/12 21:15,2.10.3,,,,,,,,,,,,2.10.4,,,,camel-cxf,,,,0,,,,,,,,,"There is one concrete issue to report and there is an additional point that I would like to bring up.

First, the concrete issue is that CxfEndpoints' findName does not currently handle SAXSource. Consequently, the it fails to find the element name when the payload source is of SAXSource.

This issue can be observed sporadically, as there is a chance the Source could be SAXSource. Because of the nature of this problem explained below, this issue may be observed non-deterministically and consequently it is not often observed.

What is happening is that, when a conversion to CxfPayload is triggered, CxfPayloadConverter's convertTo method arbitrarily picks a converter that can convert the input to Source. The code goes into BaseTypeConverterRegistry and searches for a matching converter in its type mappings' entry set. As this set has no deterministic ordering and there are several matching converters, an arbitrary converter is picked up. THe chance of getting the SAXSource converter is small but not zero. Therefore, when this happens, CxfEndpoint's findName is not finding the element name as there is no handling for SAXSource. Interestingly, the DOMSource converter is the most frequently picked converter, followed by the StaxSource converter.

So, SAXSource handling needs to be added in CXFEndpoint's findName method.

The second point is about the preferred Source held in CxfPayload. I think for jdk 1.6 or above, StAXSource could be the preferred source. In that case, we can use the StAXSource converter instead of arbitrarily picking one of the Source converters. We can adjust CxfPayloadConverter's convertTo method to look up for the StAXSource converter first.

I am attaching a proposed patch (the correction for the first issue and the suggestion regarding the second point, assuming StAXSource is preferred.). Could you review it and comment on it?

Thanks.

Regards, aki


",,ay,dkulp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Dec/12 12:02;ay;camel-cxf-payload-source-20121214.patch;https://issues.apache.org/jira/secure/attachment/12560958/camel-cxf-payload-source-20121214.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297842,,,Wed Dec 19 19:52:46 UTC 2012,,,,,,,Patch Available,,,,"0|i14vkf:",236579,,,,,,,,,,,,,,,,,,,,"14/Dec/12 12:02;ay;from trunk;;;","18/Dec/12 21:15;dkulp;
I've done some heavy modifications to the patch and committed a fix.  For the most part, if the incoming object/message is in a form that we can directly create a Source for it, I did that to avoid any of the ""magic"".   For some things (like xalan or Saxon) that may prefer a StreamSource, the may allow it to remain as a StreamSource.  If it's already a DOM, it can use a DOMSource as well.  Can you give that a look and see if that works better for your use case?;;;","19/Dec/12 19:52;ay;Hi Dan,
it looks very good.
thanks.
regards, aki
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith not working with weaveFirst/weaveLast because of delayed camelContext start due to using isUseAdviceWith.,CAMEL-5875,12623830,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,lleclerc,lleclerc,13/Dec/12 21:13,17/Dec/12 14:49,14/Jul/23 05:45,14/Dec/12 10:04,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,,,,"It is the second bug I found related to AdviceWith, we might want to copy/paste all the test, to make sure AdviceWith can be used before the CamelContext is started with all it's functionality.

http://camel.465427.n5.nabble.com/Bug-AdviceWith-not-working-with-weaveAddFirst-weaveAddLast-td5724054.html",,lleclerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297550,,,Mon Dec 17 14:49:10 UTC 2012,,,,,,,,,,,"0|i14rbz:",235893,,,,,,,,,,,,,,,,,,,,"14/Dec/12 10:04;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","17/Dec/12 14:49;lleclerc;I confirm that it works in 2.10.4-SNAPSHOT.
Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to parse CSV if a field has a ' (single quote) at it's begining ,CAMEL-5871,12623687,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nexus6b,nexus6b,13/Dec/12 08:46,22/Dec/12 15:47,14/Jul/23 05:45,22/Dec/12 15:47,2.10.0,2.11.0,2.8.0,2.9.0,,,,,,,,,2.11.0,,,,camel-bindy,,,,0,,,,,,,,,"Bindy is unable to parse correctly a CSV file if a field begin with a ' (single quote).

This case is valid for foreign names/words or french apostrophe:

{code:title=order.csv}
10,A9,Patric,'T jo,ISIN,XD12345678,BUY,Share,2500.45,USD,08-01-2009
{code}",,davsclaus,nexus6b,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Dec/12 08:54;nexus6b;camel-bindy-single-quote-start-word-csv-fix.patch;https://issues.apache.org/jira/secure/attachment/12560736/camel-bindy-single-quote-start-word-csv-fix.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297416,,,Sat Dec 22 15:47:02 UTC 2012,,,,,,,Patch Available,,,,"0|i14oi7:",235435,,,,,,,,,,,,,,,,,,,,"13/Dec/12 08:54;nexus6b;Patch against the latest trunk.

The bug is due to the quoting characters being hard coded into the unmarshaller and doesn't take the quote char provided via the annotations.

To solve that, we set a default quoting character ('""' double quote) and make it accessible to the unmarshaller. We add a flag for the marshaler to produce or note a quoted csv file with the provided quoted character.;;;","13/Dec/12 12:00;njiang;Hi Antonie,
Thanks for the patch, I just noticed that you ignore the test of BindyUnmarshalCommaIssueTest.testBindyUnmarshalSingleQuoteCommaIssueTwo.  
As this feature break the old behavior, We can just only apply the patch into the trunk.;;;","22/Dec/12 15:47;davsclaus;Cannot backport as it breaks old behavior.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Always creates a default http client even if not needed,CAMEL-5867,12623551,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/12 13:58,15/Dec/12 13:37,14/Jul/23 05:45,15/Dec/12 13:37,2.10.0,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jetty,,,,0,,,,,,,,,"The jetty component creates a default jetty http client, even if its not needed.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297261,,,2012-12-12 13:58:09.0,,,,,,,,,,,"0|i14nfz:",235263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pass Exchange param to TypeConverter.convertTo calls where possible,CAMEL-5866,12623521,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Dec/12 10:44,18/Dec/12 00:15,14/Jul/23 05:45,18/Dec/12 00:14,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,,,,"Where the Exchange object is available, pass it to TypeConverter.convertTo.

Currently, when Camel happens to pick a Type Converter requiring the Exchange, conversion may fail (as there's no check for this situation).

See CAMEL-5864 as an example.",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5860,CAMEL-5864,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297230,,,2012-12-12 10:44:54.0,,,,,,,,,,,"0|i14n8f:",235229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms: concurrent consumers on Temp Reply Queue requires more work,CAMEL-5865,12623429,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,11/Dec/12 18:38,02/May/13 02:30,14/Jul/23 05:45,09/Jan/13 23:53,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,,,camel-jms,,,,0,,,,,,,,,"This feature requires a bit more work to get right. Currently it's a bit buggy. Here are the reasons:

- every time the DLMC initialises a new consumer task (AsyncMessageListenerInvoker), it invokes the Destination Resolver. The current code ends up creating a new temp queue and overwriting the reply queue in the Reply Manager every time.
- temp queues can only be consumed from by the same JMS connection that created the queue. If you use a connection pool and maxConsumers > 1, there's no way to guarantee that the same JMS connection is used to create the subsequent consumers, as concurrency expands. We should explicitly set cacheLevel=CACHE_CONSUMER which activates sharing the connection in the DLMC across consumers.
",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,CAMEL-6229,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297128,,,Wed Jan 16 00:05:11 UTC 2013,,,,,,,,,,,"0|i14ljz:",234956,,,,,,,,,,,,,,,,,,,,"09/Jan/13 23:53;raulvk;Fixed in r1431152 on trunk and r1431155 on camel-2.10.x branch.;;;","09/Jan/13 23:54;raulvk;Also added logic to refresh the ReplyTo destination if the underlying connection fails.;;;","10/Jan/13 07:45;davsclaus;Nice to see the refresh of the reply to destination if connection fails. Do you mind added a note about this to the 2.11 release notes?;;;","16/Jan/13 00:05;raulvk;Claus - done. And now we also honour replyToCacheLevelName if set.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Pre-XSLT and Validator Type Conversions from byte[] may easily fail,CAMEL-5864,12623403,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,raulvk,raulvk,11/Dec/12 16:08,18/Dec/12 00:15,14/Jul/23 05:45,12/Dec/12 06:19,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,camel-xslt,,,0,,,,,,,,,"XsltBuilder.getSource(Exchange e, Object o) tries to convert the payload to a Source. 

If you have a byte[] payload, then the following type converter will likely be picked:

{code}
InstanceMethodTypeConverter: public javax.xml.transform.sax.SAXSource 
org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(byte[],org.apache.camel.Exchange) 
throws java.io.IOException,org.xml.sax.SAXException,javax.xml.transform.TransformerException
{code}

This type converter requires the Exchange (InstanceMethodTypeConverter.useExchange == true), but line 461 of XsltBuilder doesn't pass it on.

Therefore, a NullPointerException happens because the conversion method tries to access the Exchange.",,njiang,raulvk,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5866,,CAMEL-5860,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,297100,,,Wed Dec 12 06:19:15 UTC 2012,,,,,,,,,,,"0|i14ldj:",234927,Regression,,,,,,,,,,,,,,,,,,,"12/Dec/12 06:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression in validator component in 2.10.3,CAMEL-5860,12623149,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davidkarlsen@gmail.com,davidkarlsen@gmail.com,10/Dec/12 14:23,26/Apr/13 09:29,14/Jul/23 05:45,07/Mar/13 19:15,2.10.3,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-validator,,,,0,,,,,,,,,"I get:

{code}
CaughtExceptionType:java.lang.NullPointerException, CaughtExceptionMessage:null, StackTrace:java.lang.NullPointerException  at 
org.apache.camel.converter.jaxp.XmlConverter.toStreamSource(XmlConverter.java:516)   at 
org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(XmlConverter.java:399)      at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)        at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at 
java.lang.reflect.Method.invoke(Method.java:601)     at 
org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)       at 
org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:66)   
at org.apache.camel.support.TypeConverterSupport.convertTo(TypeConverterSupport.java:34)        at 
org.apache.camel.processor.validation.ValidatingProcessor.getSource(ValidatingProcessor.java:343)    at 
org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:100)      at 
org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101)       at 
org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71) at 
org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)   at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)     at 
org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at 
org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)        at 
org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)     at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)     at 
org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)        

\
{code}

when I upgrade camel to 2.10.3 and use the validator component:

{noformat}
<camel:to uri=""validator:META-INF/xsd/transactiongatetransfertransaction.xsd"" />

{noformat}

this did not happen in 2.10.2 or versions before that.",schema on classpath in src/main/resources,davidkarlsen@gmail.com,davsclaus,njiang,raulvk,,,,,,,,,,,,,,,,,,,,,CAMEL-5864,CAMEL-5866,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,296748,,,Wed Apr 24 19:40:32 UTC 2013,,,,,,,,,,,"0|i14h1z:",234226,Regression,,,,,,,,,,,,,,,,,,,"11/Dec/12 08:07;njiang;Can you submit a small test case for us the reproduce the error?
It could be more easy for us to trace the issue.;;;","11/Dec/12 15:53;raulvk;This also happens with the XSLT component. I think it's a severe bug. I'll open another ticket and describe what's going on.;;;","12/Dec/12 03:14;njiang;Hi Raul,

Yes, XSLT and Validate are failed at the same place that the exchange is passed into the converter. I will fix it and adding some unit test to avoid the regression failure.;;;","12/Dec/12 03:22;njiang;This issue can be workaround by change the message body into InputStream or other class type than Byte[].;;;","14/Dec/12 10:09;njiang;Applied the patch into trunk, camel-2.10.x, camel-2.9.x branches.;;;","27/Feb/13 08:59;davidkarlsen@gmail.com;It now (in 2.10.4) fails on IBM java 1.6 JDK with:

{noformat}
Caused by: javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource
	at com.sun.org.apache.xerces.internal.jaxp.validation.StAXValidatorHelper.validate(StAXValidatorHelper.java:107)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:154)
	at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:127)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)
	... 169 more

{noformat}

Failing on JDK:

/opt/ibm/ibm-java-x86_64-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxa6460sr12-20121025_01(SR12))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr12-20121024_126067 (JIT enabled, AOT enabled)
J9VM - 20121024_126067
JIT  - r9_20120914_26057
GC   - 20120928_AA)
JCL  - 20121014_01


Suceeding on JDKs:
 /opt/ibm/ibm-java-x86_64-70/bin/java -version
java version ""1.7.0""
Java(TM) SE Runtime Environment (build pxa6470sr3-20121025_01(SR3))
IBM J9 VM (build 2.6, JRE 1.7.0 Linux amd64-64 20121024_126071 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR3_20121024_1635_B126071
JIT  - r11.b02_20120924_26343a
GC   - R26_Java726_SR3_20121024_1635_B126071
J9CL - 20121024_126071)
JCL - 20121019_01 based on Oracle 7u6-b17


java -version
java version ""1.7.0_15""
Java(TM) SE Runtime Environment (build 1.7.0_15-b03)
Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)

/opt/jdk1.6.0_39-x64/bin/java -version
java version ""1.6.0_39""
Java(TM) SE Runtime Environment (build 1.6.0_39-b04)
Java HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)
;;;","07/Mar/13 19:15;davsclaus;Its a problem in the IBM JDK which you would need to update.;;;","24/Apr/13 19:40;davidkarlsen@gmail.com;Are you sure about that? Since it worked just fine on IBM JDK prior to the camel upgrade?
And it does raise a specific exception due to a specific check inside the jdk class (which is xerces internalized):
Caused by: javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource
	at com.sun.org.apache.xerces.internal.jaxp.validation.StAXValidatorHelper.validate(StAXValidatorHelper.java:107)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:154);;;",,,,,,,,,,,,,,,,,,,,,,
adviceWith() just needs to start the route when the camel context is started,CAMEL-5854,12622875,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Dec/12 08:01,13/Dec/12 15:04,14/Jul/23 05:45,13/Dec/12 15:04,2.10.3,2.9.5,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,,,,"An user complains the adviceWith doesn't work well with the camel-http4 component[1].
After digging the code a while, I found the NPE is thrown because the camel-http4 endpoint is created before camel-http4 component is started. It is caused by the adviceWith() try to start the route after it finished the work. 

We need to make sure the adviceWith doesn't start the route when the camel context is not started yet to avoid the NPE.

[1]http://camel.465427.n5.nabble.com/Test-Intercept-with-adviceWith-and-http-td5723473.html",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,296449,,,Thu Dec 13 15:04:56 UTC 2012,,,,,,,,,,,"0|i149gv:",232997,,,,,,,,,,,,,,,,,,,,"07/Dec/12 08:06;davsclaus;See the green box at
http://camel.apache.org/advicewith.html

This is the practice ppl should follow.;;;","13/Dec/12 15:04;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - When using doneFileName then avoid picking up files in middle of group if done file is written during scanning,CAMEL-5848,12618839,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/12 07:58,17/Dec/12 08:39,14/Jul/23 05:45,17/Dec/12 08:39,2.10.0,2.9.0,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Files-not-Picked-up-with-doneFile-tp5723623.html

We need to use an internal cache we store whether a done file exists or not, when scanning a directory. Then we won't ""see"" a new done file being written during scanning a group of files. The cache is only needed per directory as doneFileName mandates the file to be in same dir.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,296098,,,2012-12-05 07:58:59.0,,,,,,,,,,,"0|i1460n:",232438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - Honor precision when formatting a decimal number,CAMEL-5846,12618733,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lb,lb,04/Dec/12 13:48,17/Dec/12 10:25,14/Jul/23 05:45,17/Dec/12 10:25,,,,,,,,,,,,,2.11.0,,,,camel-bindy,,,,0,,,,,,,,,"Let's take the class org.apache.camel.dataformat.bindy.model.complex.generateheader.Order in which the field amount is defined as follow:

@DataField(pos = 9, precision = 2)
private BigDecimal amount;

This will properly un-marshall 10.00 and 10 but if I format it back I can only have 10 regardless of the precison. 

Patch available as part of the fix for CAMEL-5827",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,295971,,,2012-12-04 13:48:18.0,,,,,,,,,,,"0|i144cn:",232168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Tracer not showing some EIP names,CAMEL-5844,12618554,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,reckless82,reckless82,03/Dec/12 11:31,14/Dec/12 21:43,14/Jul/23 05:45,14/Dec/12 17:52,2.10.1,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,,,,,,,,,"In order to debug Camel routes, I have enabled the Tracer as follows:         getContext().setTracing(true);

However, I have observed that some EIP names and routes are not being printed on console, making it a bit confusing to follow. As far as I know, this happens with:
* process(): the processor is not printed in the tracer; it's just empty (see below)
* marshall(): the marshaller name is not printed in the tracer; it's just empty (see below)
* setBody(): this step is also printed empty
* from(""activiti:...""): this route step is not printed altogether

For simplicity, I only provide the examples for process() and marshall(), bit I can provide more information if needed.

{panel:title=Route2 Config}
from(""vm:processIncomingOrders"")
  .process(new IncomingOrdersProcessor())
  .split(body())	// iterate list of Orders
  .to(""log:incomingOrder1?showExchangeId=true"")
  .process(new ActivitiStarterProcessor())
  .to(""log:incomingOrder2?showExchangeId=true"")			
  .to(""activiti:activiti-camel-example"");
{panel}

{panel:title=Route2 Tracer}
INFO  03-12 12:09:31,899 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-3 >>> (route2) from(vm://processIncomingOrders) -->  <<< Pattern:InOnly, [...]
INFO  03-12 12:09:34,899 (IncomingOrdersProcessor.java:process:39)  -Processing incoming orders (from Web Services)
[ORDER id:120 partName: wheel amount: 2 customerName: Honda Mechanics]
[ORDER id:121 partName: engine amount: 4 customerName: Volvo]
[ORDER id:122 partName: steering wheel amount: 3 customerName: Renault]
INFO  03-12 12:09:34,900 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-3 >>> (route2)  --> split[body] <<< Pattern:InOnly, [...]
{panel}



{panel:title=Route6 config}
from(""direct:ordercsv"")
  .marshal().bindy(BindyType.Csv, ""net.atos.camel.entities"")
  .to(""file:d://cameldata/orders?fileName=orders-$\{date:now:yyyyMMdd-hhmmss}.csv"");
{panel}

{panel:title=Route6 Tracer}
INFO  03-12 12:09:37,313 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-8 >>> (route6) direct://ordercsv -->  <<< Pattern:InOnly, [...]
INFO  03-12 12:09:37,320 (MarkerIgnoringBase.java:info:96)  -ID-ES-CNU2113RXH-51211-1354532898719-0-8 >>> (route6)  --> file://d://cameldata/orders?fileName=orders-%24%7Bdate%3Anow%3AyyyyMMdd-hhmmss%7D.csv <<< Pattern:InOnly,  [...]
{panel}

",,bvahdat,muellerc,njiang,reckless82,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Dec/12 17:39;reckless82;tracer-empty-error.jpg;https://issues.apache.org/jira/secure/attachment/12560412/tracer-empty-error.jpg",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,293387,,,Fri Dec 14 21:43:06 UTC 2012,,,,,,,,,,,"0|i0szfb:",167216,,,,,,,,,,,,,,,,,,,,"05/Dec/12 18:35;muellerc;You are sure you are using Camel 2.10.1?

Given the route:
{code}
from(""vm:start"")
  .process(new Processor() {
    public void process(Exchange exchange) throws Exception {
      }
    })
  .setBody(constant(""Camel""))
  .to(""mock:result"");
{code}

I got the following log output:

{noformat}
2012-12-05 19:29:37,235 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10.1 (CamelContext: camel-1) started in 0.296 seconds
2012-12-05 19:29:37,250 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
2012-12-05 19:29:38,235 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) from(vm://start) --> org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:test
2012-12-05 19:29:38,237 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 --> setBody[{Camel}] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:test
2012-12-05 19:29:38,237 [#0 - vm://start] INFO  Tracer                         - ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-3 >>> (route1) setBody[{Camel}] --> mock://result <<< Pattern:InOnly, Headers:{breadcrumbId=ID-Christian-Muellers-MacBook-Pro-local-52032-1354732176683-0-1}, BodyType:String, Body:Camel
{noformat}

org.apache.cmueller.camel.test.DefaultTracerTest$1$1@3ff2cea2 is the class name of my processor. The name looks ugly because I use an anonymous inner class.
The setBody() call is also logged nicely.
I didn't test the unmarshal call, but from the code I can see it will also be logged.

Please check you project set up.;;;","10/Dec/12 12:26;reckless82;Yes, I am using Camel 2.10.1. I have just tried a unit test with your route and the trace works perfectly.
So I guess there must be some error/conflict in my environment setup.

I am trying to integrate Activiti and Camel together, as explained (and recommended) in the book ""Activiti in Action"" (Manning). Both engines are running in the Jetty servlet container. The source code is public and shared via GitHub: https://github.com/aritzbastida/activiti-camel-webapp

I am quite newbie in integration topics, so probably there is some conflict with the Tracer component that I am not aware of... :/;;;","11/Dec/12 17:52;reckless82;Debugging for a little while, I could delimit the source code snippet that is causing the Tracer not showing processor names (in my environment). Please find attached the related screenshot.

{code:title=InstrumentationProcessor class}
    @Override
    public String getTraceLabel() {
        if (processor instanceof Traceable) {
            return ((Traceable)processor).getTraceLabel();
        } else {
            return """";
        }   
    }
{code}

Note that the {{processor}} variable, in my environment, is an instance of {{WrapProcessor}}, which does not implement the {{Traceable}} interface, so an empty string is returned (instead of the processor name).

I don't know whether this behaviour is correct or not, as I don't have insight on the WrapProcessor and InstrumentationProcessor classes.

Thank you in advance.

;;;","11/Dec/12 22:15;muellerc;Hi Aritz!

Thanks for digging into it. I updated the WrapProcessor to also implement org.apache.camel.Traceable. It should now work. Feel free to test the SNAPSHOT version to verify the fix.

Best,
Christian;;;","12/Dec/12 11:20;reckless82;Sorry for the inconvenience. I reopen the issue, because I am afraid that the current solution only solves this issue partially. After digging into it a bit more, I think that the root cause of the problem is related to the {{InstrumentationProcessor}} class (which is used when the *JMX agent* is enabled).

Given the following example route:

{code:title=Example Route}
  from(""vm:start"")
    .process(new Processor() {
       @Override
       public void process(Exchange exchange) throws Exception {
          System.out.println(exchange.getIn().getBody());
       }
    })
    .setBody(constant(""Camel""))
    .to(""mock:result"");	
{code}

With JMX disabled:
* the .process() step is handled by {{WrapProcessor}} class.
* the .setBody() step is handled by {{AsyncProcessorConverterHelper.ProcessorToAsyncProcessorBridge}} class.

None of these classes is Traceable in camel-core 2.10.3. As a result, in the *DefaultRouteNode.getLabel()* method, the following statement is executed:

{{return processorDefinition.getLabel()}}

...and we get the same output as in your original unit test:

{noformat}
26:51,150 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) from(vm://start) --> net.atos.camel.routes.BusinessRoutes$1@14c9066 <<< Pattern:InOnly
26:51,152 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) net.atos.camel.routes.BusinessRoutes$1@14c9066 --> setBody[{Camel}] <<< Pattern:InOnly
26:51,152 [Camel (camelProcess) thread #0] INFO  (org.apache.camel.processor.interceptor.Tracer:96) - ID-ES-CNU2113RXH-58064-1355308005213-0-3 >>> (route2) setBody[{Camel}] --> mock://result <<< Pattern:InOnly
{noformat}

However, if we enable JMX, the processors mentioned above (and probably others I am not aware of) are wrapped up by {{InstrumentationProcessor}} class, which is Traceable. So, in the DefaultRouteNode.getLabel() method, the following statement is executed:

{{return trace.getTraceLabel();}}

...even if the enclosed processors are _not_ themselves Traceable (which results in printing an empty string).

Note that, in camel-core 2.10.4-SNAPSHOT, with JMX enabled, the processor is now printed (with an additional ""wrap[]"" prefix), but setBody() still is not.

{noformat}
49:55,689 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2) from(vm://start) --> wrap[net.atos.camel.routes.BusinessRoutes$1@67ba82] <<< Pattern:InOnly
49:56,420 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2) wrap[net.atos.camel.routes.BusinessRoutes$1@67ba82] -->  <<< Pattern:InOnly
49:57,121 [Camel (camelProcess) thread #1] INFO - ID-ES-CNU2113RXH-57168-1355305756898-0-3 >>> (route2)  --> mock://result <<< Pattern:InOnly
{noformat}

----
PROPOSAL:

For consistency, I think that the Tracer component should print the same log whether the JMX agent is enabled or not. In order to achieve this, I guess that some rework in DefaultRouteNode.getLabel() is necessary. 

Currently, the ""traceable"" check in DefaultRouteNode.getLabel() is made on the InstrumentationProcessor class, but the trace message is based on the enclosed class (e.g. WrapProcessor). So, maybe, we could just make {{InstrumentationProcessor}} not Traceable, or make the ""traceable"" check on the enclosed class...

;;;","12/Dec/12 14:04;njiang;+1 to make the InstrumentationProcessor not traceable.
;;;","12/Dec/12 22:20;muellerc;I reverted my first commit and now made the InstrumentationProcessor not traceable (only for Camel 2.11 until now).;;;","14/Dec/12 17:52;muellerc;Back ported into the Camel 2.10.x and 2.9.x maintenance branches.;;;","14/Dec/12 19:39;bvahdat;I think you back-ported the wrong commit.;;;","14/Dec/12 21:43;muellerc;Thanks Babak, I messed up my git repo...
Will fix it in a few seconds...;;;",,,,,,,,,,,,,,,,,,,,
Problem with nested schema imports when upgrading from 2.8.6 to 2.10.2,CAMEL-5837,12618308,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hutchkintoot,hutchkintoot,30/Nov/12 11:58,21/Mar/13 10:46,14/Jul/23 05:45,21/Mar/13 10:46,2.10.2,,,,,,,,,,,,2.10.5,2.11.0,,,camel-core,,,,1,,,,,,,,,"Hello

I'm experiencing trouble with the validiator component when upgrading from 2.8.6 to 2.10.2. 

The problem seems to be related to imported schemas that does additional imports (all using relative paths). XSD A importing XSD B works fine. But if B in turn imports XSD C. That import seems to be resolved with the base path of A. 

All works fine in 2.8.6 but breaks when upgrading to 2.10.2.

I will attach an example project where you can just switch version to verify the scenario.  ","MacOS X, java 7",hutchkintoot,muellerc,njiang,tranchida,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Nov/12 12:00;hutchkintoot;xsd-import_example 2.zip;https://issues.apache.org/jira/secure/attachment/12555499/xsd-import_example+2.zip","15/Mar/13 09:23;hutchkintoot;xsd-import_example-reopen.zip;https://issues.apache.org/jira/secure/attachment/12573852/xsd-import_example-reopen.zip","15/Mar/13 09:27;hutchkintoot;xsd_import_problem.png;https://issues.apache.org/jira/secure/attachment/12573853/xsd_import_problem.png",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,292939,,,Wed Mar 20 12:26:40 UTC 2013,,,,,,,,,,,"0|i0sgj3:",164155,,,,,,,,,,,,,,,,,,,,"30/Nov/12 12:00;hutchkintoot;run this project altering the version from 2.8.6 to 2.10.2 to verify the issue. ;;;","03/Dec/12 06:44;njiang;Camel doesn't use spring to load the schema since 2.9.x, now it only support to resolve the schema from the class path.
You test can be worked around by adding the relative path health into the health.xsd.
{code}
<xs:import schemaLocation=""health/common/common.xsd"" namespace=""org.health.check.common""/>
{code};;;","03/Dec/12 07:10;hutchkintoot;Hi, yes that works but it would make the health.xsd file invalid when working with it stand-alone in an ide like Oxygen or Intellij. Our components have been reading nested schemas from the class-path (we package it in a war-file) before. But perhaps spring did some magic and read it from the filesystem?

Is there anyway to get the old behavior back and still upgrade to 2.10.2?

regards,
Johan;;;","03/Dec/12 07:13;hutchkintoot;Another interesting note is that nested xslt-imports/includes works without problems in 2.10.2. Is the URIResolver logic different between the validation- and xslt-component?;;;","03/Dec/12 07:52;njiang;Xslt component doesn't use the DefaultLSResourceResolver as the resource resolver.
I just checked the code of Spring ResourceLocator, it will use the URLResolver directly if the import resource is not start with classpath. But I doesn't find a good way to find the resource from file by using the baseURI or SystemId.;;;","03/Dec/12 14:15;hutchkintoot;From Camels point of view, is this new behavior (since 2.9.x), considered to be a bug or an accepted limitation of the new implementation? We are using xml-schema imports extensively and this causes a lot of trouble for us. I can imagine ways we could get around these problems but not without extensive refactoring of our current projects. 

regards,
Johan;;;","03/Jan/13 20:54;tranchida;Hi, 

Same problem for me. For my point of view, this a bug or a regression.

Any workaround with a custom LSResourceResolver ?

Regards
Giampaolo
;;;","11/Jan/13 07:27;njiang;Hi Giampaolo,

This issue should be resolved from the new released Camel 2.11.0.
I already committed the patch into camel trunk.

Willem;;;","12/Jan/13 18:36;muellerc;I think we can close this issue. We have two unit test classes and multiple tests which make sure this works now.;;;","12/Jan/13 19:13;hutchkintoot;Great news! Thank you. Looking forward to the next release. ;;;","01/Feb/13 15:15;njiang;CAMEL-6013 has a better solution to fix this kind of issue.;;;","15/Mar/13 09:22;hutchkintoot;Hello

I tried to upgrade to 2.10.4 but it still have problems resolving my imports. 

I can confirm that the first test-case works. But when i try it with a more complex import structure it fails.

I have compiled a new example project that i will attach to the issue that shows when the error occurs. I will also attach a picture showing the folder and import structure.;;;","15/Mar/13 09:27;hutchkintoot;This picture shows the imports and the order they occur in. relatedURI property extracted from debugger.

!xsd_import_problem.png!;;;","17/Mar/13 08:59;njiang;
I just did a quick fix for this issue and committed the patch into trunk, please verify it with latest camel 2.11-SNAPSHOT.;;;","18/Mar/13 08:32;hutchkintoot;Thanks Willem, i just tried it with 2.11-SNAPSHOT but the import still fails on 4.xsd.;;;","18/Mar/13 08:37;hutchkintoot;Checked my local maven repo and the pom for camel-core is dated the 16th of march. So i guess your fix is not pushed to the snapshot repo yet. 

camel-core-2.11-20130316.163847-415.pom

/j;;;","19/Mar/13 13:45;hutchkintoot;Managed to build from 2.11-SNAPSHOT from source and managed to start the route successfully. When trying against my live-code however the fault persisted. I then discovered that the schema import structure in the example wasn't quite right. In my live-code and in the attached image both 1.xsd and 2.xsd imports 4.xsd. When i corrected 2.xsd to reflect this in the example code it refused to run.

To fix 2.xsd please replace it's content with the following code:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xs:schema 
    xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
    elementFormDefault=""qualified""
    targetNamespace=""example.2"">
    
    <xs:import schemaLocation=""../../common/3.xsd"" namespace=""example.3""/>
    <xs:import schemaLocation=""../common/4.xsd"" namespace=""example.4""/>
    
</xs:schema>

{code}


When debugging this i found that the baseURI, used as key in the relatedURIMap, is not correct (the start and end of the path is correct but it is lacking path elements in the middle). I'm not sure if this is the cause of the problem.  

  ;;;","20/Mar/13 03:42;njiang;Hi Johan,

I just did a quick fix for the issue that you found yesterday. 
Please feel free to check it out for verification.

Willem;;;","20/Mar/13 12:26;hutchkintoot;Hi Willem,

That fix resolved my problems in the original project. Thank you for all your help!

Regards,
Johan;;;",,,,,,,,,,,
"XPathBuilder is documented as being thread-safe, but it has thread-safety bugs.",CAMEL-5835,12618233,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,petesramka,petesramka,29/Nov/12 21:25,07/Jan/13 12:21,14/Jul/23 05:45,07/Jan/13 12:21,,,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,0,thread-safety,,,,,,,,"The javadoc for org.apache.camel.builder.xml.XPathBuilder states that it is thread-safe, but an inspection of the source code in the trunk reveals that there are thread-safety bugs.",This bug is not environment specific.,alanfoster,davsclaus,petesramka,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Nov/12 22:32;petesramka;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12555422/screenshot-1.jpg",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,292862,,,Fri Nov 30 17:31:43 UTC 2012,,,,,,,,,,,"0|i0sg13:",164074,,,,,,,,,,,,,,,,,,,,"29/Nov/12 22:21;petesramka;h4.Background
Java concurrency is a deep and subtle topic. I have found that knowledge of this topic is often lacking, even with very intelligent and experienced Java programmers. Consequently, there is much Java code in existence with concurrency bugs.

Concurrency in Java is intimately inter-twined with the Java Memory Model. The Java Memory Model was updated via _JSR 133: Java Memory Model and Thread Specification Revision_. Starting with Java 2 SE 5.0, all Java Virtual Machines are required to use this updated Java Memory Model. The results of _JSR 133_ are included in the Java Platform Standard Edition Documentation. This _JSR 133 (Java Memory Model) FAQ_ is a brief, but very well-written, synopsis of _JSR 133_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html

A basic discussion of Java concurrency is contained in the _Essential Classes Trail_ within the _Trails Covering the Basics_ of _The Java Tutorials_: http://docs.oracle.com/javase/tutorial/essential/concurrency/index.html

This page from the _Essential Classes Trail_ briefly describes _Memory Consistency Errors_: http://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html

For a more detailed discussion of Java concurrency, I highly recommend the book _Java Concurrency in Practice_, which was written by the primary members of the _JSR 166_ Expert Group (_Concurrency Utilities_): http://jcip.net/

Please be advised that there are many sources of so-called ""expert"" information about Java concurrency, including published books and lectures of prestigious university professors, that are filled with fundamental technical errors. Consequently, there are many smart Java programmers who believe certain things about Java concurrency that are just plain wrong. As an example, _The ""Double-Checked Locking is Broken"" Declaration_ exposes one widely-used, but flawed, technique: http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
----
h4.Thread-Safe Classes
There are many techniques for writing thread-safe code, but one of the simplest and most effective is to write thread-safe classes. Here are a couple of excellent quotes from page 18 of _Java Concurrency in Practice_ (http://jcip.net/):

""A class is _thread-safe_ if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.""

""Thread-safe classes encapsulate any needed synchronization so that clients need not provide their own.""

A class is ""accessed from multiple threads"" when:
* Any instance of that class is ""accessed from multiple threads""
or
* The class object itself -- the collection of all static fields and methods of the class -- is ""accessed from multiple threads"".

Note that the statements above do not include the phrase ""accessed from multiple threads _simultaneously_"". It is a widely-held, but incorrect belief, that if a class is never accessed by more than one thread at a time, then all thread-safety considerations may be safely ignored for that class. If a class is accessed from multiple threads, but not simultaneously, mutual exclusion is not a concern, but memory visibility is. For more information about memory visibility and the related topic of memory consistency errors, please refer to the previous section.

To determine if a particular class is thread-safe, all of the following must be analyzed:
* The source code of the class in question
* The source code of all classes that the class in question extends either directly or indirectly
* The source code of all interfaces that the class in question implements either directly or indirectly;;;","29/Nov/12 22:37;petesramka;For example, shown here are all uses of the instance variable bodyFunction. Access to this variable is ""incorrectly synchronized,"" as defined by this _JSR 133 (Java Memory Model) FAQ_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html
!screenshot-1.jpg!;;;","30/Nov/12 09:57;davsclaus;There is no problem with the default functions as they dont share any state or whatsoever. They are just anonym inlined functions as shown in the code above.;;;","30/Nov/12 10:00;davsclaus;The functions are now being forced created when starting the builder. So they will never be null anymore.;;;","30/Nov/12 14:59;petesramka;The changes made to the code did not make the class thread-safe. Perhaps it would help to:
1) Study the documentation that I presented in the comments section.
and/or
2) Get a Java thread-safety guru involved.;;;","30/Nov/12 15:15;davsclaus;Peter

Maybe you provide a patch for the Camel team to review.;;;","30/Nov/12 17:31;petesramka;I can create the patch fairly quickly. However, I have to get legal clearance from my employer before I can make a submission to Camel. It make take awhile. I apologize for the delay...;;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in DefaultCamelContext::stopRouteService,CAMEL-5830,12617943,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kramer,kramer,28/Nov/12 08:17,28/Nov/12 17:17,14/Jul/23 05:45,28/Nov/12 17:17,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"When an exception occures during the startup of a route Route::getConsumer() might return null.
During the shutdown of this route the logging in DefaultCamelContext::stopRouteService yields to a NullPointerException:

log.info(""Route: "" + route.getId() + "" stopped, was consuming from: "" + route.getConsumer().getEndpoint())","Debian Squeeze, Java 1.6.0_26, Apache Camel 2.10.2",kramer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,292526,,,2012-11-28 08:17:44.0,,,,,,,,,,,"0|i0s3fz:",162034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache Camel 2.9 Splitter with tokenize dont work with namespaces,CAMEL-5826,12617792,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rnewcomb,shrishs,shrishs,27/Nov/12 14:05,29/Nov/12 11:06,14/Jul/23 05:45,29/Nov/12 11:06,2.9.0,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"when trying to tokenize a stream having namespaces, no tokens are produced with inheritNamespaceTagName property.

-------------------------------------------------------------------

<route id=""hrp.connectorsCtxt.sddRcvFile2"">
<from
                           uri=""file:C:\Temp\esb\sdd\in?recursive=true&amp;preMove=.processing&amp;move=../.processed"" />
                    <camel:split streaming=""true"">
                           <tokenize token=""suiviDemande"" inheritNamespaceTagName=""suivisDemandes"" xml=""true""/>
                           <log message=""${header.CamelSplitIndex} : ${in.body}"" />
                    </camel:split>
             </route>

-------------------------------------------------------------------
",Windows,davsclaus,rnewcomb,shrishs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Nov/12 10:18;rnewcomb;CAMEL-5826.patch;https://issues.apache.org/jira/secure/attachment/12555146/CAMEL-5826.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,292355,,,Thu Nov 29 11:06:17 UTC 2012,,,,,,,Patch Available,,,,"0|i0rxen:",161056,,,,,,,,,,,,,,,,,,,,"28/Nov/12 09:12;shrishs;Can you please delete the xml file specified in this ticket from history as customer does not want to share it.Or you can make it as private jira ticket so that it is not viewable.

;;;jira-users","28/Nov/12 10:18;rnewcomb;The attached patch provides a solution for the issue that was reported on this ticket.  The XML Tokenizer was not parsing nodes that have namespace prefixes.  This was true for the ""inherit namespaces"" node as well as all explicitly-prefixed nodes that would otherwise match a non-prefixed token tag.  The issue occurs primarily when non-prefixed node names are configured on a tokenizer that is used to parse XML documents containing fully-qualified nodes.

The patch addresses this issue by matching node names for the configured token and the namespace provider without respect to the prefix value.  This loose-matching behavior occurs unless an explicit prefix value is specified.  The explicit namespace value will still be used for matching if it is provided.

It should be noted that this treatment of XML namespaces is a little loose.  Issues can occur if two different elements (in different namespaces) share a non-qualified name that matches the token tag.  Also, the use of explicit namespace prefixes (e.g. ns1,  ns2, etc.) is only beneficial if all documents that will be parsed by the tokenizer use the exact same namespace prefix values. 

It may be possible to expand the tokenizer to include more robust namespace matching.  For example, explicit namespace values could be specified as part of the tokenizer configuration, and logic could be written to match parsed nodes against those values.   I will be happy to investigate that route if there is interest.

I will update documentation, etc as appropriate once this patch is committed.;;;","28/Nov/12 17:23;davsclaus;Yes Rich is right. The streaming based tokenizer is not a full solution for all namespace combos that you can throw at it. There is some other solution that supports that, such as camel-stax, camel-vtdxml, or god forbid the xpath from the JDK (though it loads it all in memory).

Anyway thanks to Rich we have a patch that should fix your use-case as well.

Rich fell free to work on the docs.;;;","29/Nov/12 11:06;davsclaus;Marking this as fixed so Hadrian wont stop cutting a release because its listed as unresolved. The doc update is most likely only to add something to release notes etc.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CxfConsumer should not populate the cxf response with the original input message if the cxfExchange is oneway,CAMEL-5823,12617599,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,26/Nov/12 12:34,29/Nov/12 11:07,14/Jul/23 05:45,29/Nov/12 11:07,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-cxf,,,,0,,,,,,,,,"When you have a camel route from a CXF oneway endpoint to some endpoint, cxfConsumer currently uses the input message to fill the cxf's response message at the cxf endpoint. This can lead to a problem in CXF as there can be an exception raised during this step.

To avoid this issue, I think we should not fill the cxf response if the cxf's exchange is set to oneway.

I have attached a test case and a possible fix for this issue.

There is also one question regarding this part of the processing in CxfConsumer. I noticed that there are no exception handling in that part in camel and therefore the exception is not visible in camel. I was not sure if this was intentional or if we should be setting the exception to camel's exchange in that case so that this exception is also picked up by camel.

",,ay,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Nov/12 12:51;ay;camel-cxf-oneway-route-20121126.patch;https://issues.apache.org/jira/secure/attachment/12554844/camel-cxf-oneway-route-20121126.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,292102,,,Tue Nov 27 12:46:22 UTC 2012,,,,,,,Patch Available,,,,"0|i0rrsv:",160148,,,,,,,,,,,,,,,,,,,,"26/Nov/12 12:51;ay;from trunk;;;","27/Nov/12 08:42;njiang;This issue is introduced by the fix of CAMEL-5810. Thanks for the Aki quick patch.

For the exception handling on the CxfConsumer side, we don't intend to let CxfConsumer to do further work.
As the exception is came from camel processor chain which should be handled by the camel error handler.
In this Cxf Consumer just need to marshal the exception to the client side.;;;","27/Nov/12 10:16;ay;Hi Willem,
Thanks for the quick update.

I thought the issue was indirectly related to CAMEL-4030, which earlier caused another issue CAMEL-4452.

But regarding these two old issues, I am fine with the current model of the inonly processing to stick to the in-message, which, I originally thought at the time of CAMEL-4452, could lead to confusion at the cxf consumer and therefore should provide an option to override this behavior.

regards, aki;;;","27/Nov/12 12:46;njiang;After revisit the issues I think you new patch makes things clear.
BTW, I just commit the patch into trunk and merged them back to camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Jetty chunked parameter appears broken,CAMEL-5821,12617505,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cott@internetstaff.com,cott@internetstaff.com,24/Nov/12 22:57,12/Nov/15 03:50,14/Jul/23 05:45,25/Jan/13 15:08,2.10.0,2.10.1,2.10.2,2.9.3,2.9.4,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jetty,,,,0,,,,,,,,,"I have several Jetty endpoints that use ?chunked=false

They all stopped working in 2.9.3. The parameter is ignored and chunked encoding is used.

I'm suspicious of CAMEL-5367 and CAMEL-5274 due to the timing, but nothing else.
",,cott@internetstaff.com,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,CAMEL-9299,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,291990,,,Fri Jan 25 15:08:03 UTC 2013,,,,,,,,,,,"0|i0rivr:",158703,,,,,,,,,,,,,,,,,,,,"25/Nov/12 09:22;davsclaus;What versions of Camel have you tested with? Have you tried the latest releases?
;;;","25/Nov/12 16:52;cott@internetstaff.com;2.9.3, 2.9.4, 2.10.0, 2.10.1, and 2.10.2 :)
;;;","26/Nov/12 04:49;njiang;Can I have a look at your route ?
If you don't set the length of message, Jetty will use the chunked encoding by default.
;;;","07/Dec/12 15:03;cott@internetstaff.com;Willem, I'm not entirely sure what you're asking to see?

I'm not relying on a default, I'm setting chunked=false. This works up through 2.9.2.

;;;","07/Dec/12 15:20;njiang;Hi Cott,

I want to see how do you use the camel-jetty component.
Maybe a simple test case can help me dig the issue.

;;;","25/Jan/13 15:08;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Splitter does not allow errorhandler to handle exception in the splitter-expression,CAMEL-5818,12617435,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris889,chris889,23/Nov/12 13:56,25/Nov/12 10:58,14/Jul/23 05:45,25/Nov/12 10:58,2.10.0,2.10.1,2.10.2,2.9.4,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"This might relate to CAMEL-5024


The following route works ok in camel 2.9.3 
{code}

from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();
{code}

-> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.",,chris889,davsclaus,,,,,,,,,,,,,,,,,,,,,CAMEL-5024,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,291876,,,Sun Nov 25 10:58:27 UTC 2012,,,,,,,,,,,"0|i0rh93:",158438,,,,,,,,,,,,,,,,,,,,"24/Nov/12 18:28;davsclaus;I think I have fixed the side effects from CAMEL-5024, can you try with SNAPSHOT code?;;;","25/Nov/12 10:58;davsclaus;This works now again.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE is generated when using camel karaf command when JMX is disabled,CAMEL-5816,12617410,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,cmoulliard,cmoulliard,23/Nov/12 11:25,11/Dec/12 11:49,14/Jul/23 05:45,23/Nov/12 15:07,,,,,,,,,,,,,2.10.4,2.11.0,,,karaf,,,,0,,,,,,,,,NPE is generated when using camel karaf command and JMX is disabled,,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,291850,,,2012-11-23 11:25:17.0,,,,,,,,,,,"0|i0rh3b:",158412,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF + Code first + No recipient list + doCatch = route returns null,CAMEL-5810,12616943,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,maxence.dewil,maxence.dewil,20/Nov/12 14:28,22/Nov/12 09:53,14/Jul/23 05:45,22/Nov/12 05:55,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,,,,,0,,,,,,,,,"See this topic for the description: 
http://camel.465427.n5.nabble.com/doCatch-returns-null-td5722851.html",,maxence.dewil,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Nov/12 14:35;maxence.dewil;codefirst-webservice-try-catch.zip;https://issues.apache.org/jira/secure/attachment/12554347/codefirst-webservice-try-catch.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,258833,,,Thu Nov 22 09:53:19 UTC 2012,,,,,,,,,,,"0|i0l4of:",121408,,,,,,,,,,,,,,,,,,,,"20/Nov/12 14:35;maxence.dewil;The problem is reproduced in the attached Maven project.

How to reproduce:
1. Do a mvn package to generate the war.
2. Deploy the war on a servlet container (ex: Tomcat on port 8083)
3. Open src\test\soapUI\MyWebService-soapui-project.xml in soapUI;;;","20/Nov/12 14:41;maxence.dewil;Workarounds:

1. Use the 'recipientList' idiom as describred in the doc : http://camel.apache.org/cxf-tomcat-example.html .
2. Move the logic outside of the doTry/doCatch statements.;;;","22/Nov/12 05:55;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","22/Nov/12 09:53;maxence.dewil;That was quick! Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
The combination of the transacted DSL together with the <setHeader> or <setBody> prohibits to resolve the properties properly.,CAMEL-5796,12616415,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,16/Nov/12 14:52,18/Nov/12 19:11,14/Jul/23 05:45,18/Nov/12 19:11,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"Given the property {{myKey}} defined as:
{code}
myKey=myValue
{code}

Then consider the following trivial route:
{code:xml}
<route>
  <from uri=""activemq:queue:okay"" />
    <transacted />
    <setHeader headerName=""myHeader"">
      <constant>{{myKey}}</constant>
    </setHeader>
  <to uri=""mock:test"" />
</route>
{code}

Because of the usage of the {{transacted}} DSL the property placeholder {{{{myKey}}}} will not be resolved to {{myValue}} properly. This behaviour would disappear if you would remove the {{transacted}} DSL. And I'm observing the same behaviour using the {{setBody}} DSL as well.
",,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Nov/12 12:42;davsclaus;CAMEL-5796-fix.patch;https://issues.apache.org/jira/secure/attachment/12554063/CAMEL-5796-fix.patch","18/Nov/12 12:00;bvahdat;CAMEL-5796.patch;https://issues.apache.org/jira/secure/attachment/12554061/CAMEL-5796.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,258196,,,Sun Nov 18 19:11:20 UTC 2012,,,,,,,,,,,"0|i0knp3:",118656,,,,,,,,,,,,,,,,,,,,"16/Nov/12 18:08;bvahdat;Tried this through all the 2.10.x as well as the 2.9.x releases and it doesn't work. So concluding no regression being broken.;;;","18/Nov/12 12:00;bvahdat;Attaching a potential patch which would resolve this (including unit-test).

Would appreciate any feedback the experienced riders would give about this.

Right now with this patch in place on my workspace I'm running a full build to verify no potential side-effect.;;;","18/Nov/12 12:42;davsclaus;The patch is a good attempt in the correct file to fix this issue. Though as you have noticed it worked fine without the transacted policy.

The issue is that when you use transacted/policy, it wraps the outputs, and then its a bit different logic that creates the child processors, than if the transacted was not there. And that part of the code was missing logic that pre-prepares the definitions before the processors is created.

I am attaching a better patch with this fix.

Also we can have unit test in camel-core, as you can use policy instead of transacted. They are the same.;;;","18/Nov/12 15:19;davsclaus;Babak, I suggest you mix our patches. So its the fix from my patch in the core, and then add your additional unit tests as well. Then we have the optional fix for this.;;;","18/Nov/12 15:19;davsclaus;The workaround is to use <simple>${properties:myKey}</simple> instead.;;;","18/Nov/12 16:06;bvahdat;O.K. thanks for your support. :-)

Just give me please a bit time then I'll commit the fix and close this ticket (hopefully tomorrow).
;;;","18/Nov/12 19:11;bvahdat;Still added another test using the bridgePropertyPlaceholder Camel Bean to make sure this variant would work as well, but only applied on the trunk & the 2.10.x branch (available since 2.10.0). Thanks to Claus for providing a better patch.  ;;;",,,,,,,,,,,,,,,,,,,,,,,
xmljson dataformat should be added into marshall and unmarshal definition module,CAMEL-5794,12616363,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,16/Nov/12 08:02,18/Nov/12 16:25,14/Jul/23 05:45,18/Nov/12 16:25,2.10.0,2.10.1,2.10.2,,,,,,,,,,2.10.3,2.11.0,,,,,,,0,,,,,,,,,,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,258141,,,2012-11-16 08:02:51.0,,,,,,,,,,,"0|i0kn9b:",118585,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"regression : invalid SetQueueAttributesRequest created, works on 2.10.1",CAMEL-5782,12615484,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,jgraglia,jgraglia,09/Nov/12 14:02,12/Nov/12 07:31,14/Jul/23 05:45,10/Nov/12 11:09,2.10.2,2.9.4,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-aws,,,,0,,,,,,,,,"In org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes,
if I don't have any configuration, the created SetQueueAttributesRequest contains a null atttribute collection and AWS emit an error.

In 2.10.1, no problem.

Workaround in 2.10.2 : force the create SetQueueAttributesRequest to contain a valid attribute collection by defining a configuration in camel. 

For exemple: 
from(""aws-sqs://""+queue+""?amazonSQSClient=#amazonSQSClient&delay=""+pollCycle.getMillis()+""&maxMessagesPerPoll=10&deleteAfterRead=false"")   

   -> works on 2.10.1, fail on 2.10.2

if I add an argument to my URI""&defaultVisibilityTimeout=30"" 
    -> works on 2.10.1, works on 2.10.2


Exception : 

{{
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route SQS-to-MongoDB-EVENTS: Route[[From[aws-sqs://EVENTS?amazonSQSClient=#amazonSQSClien... because of Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&delay=60000&deleteAfterRead=false&maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name.
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~[camel-core-2.10.2.jar:2.10.2]
        at com.netceler.iv5measure.contract.impl.sqs.CamelRoutesLauncher.start(CamelRoutesLauncher.java:55) ~[webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT]
        at com.netceler.iv5measure.contract.impl.config.ConfiguredStreamInitializer.startStreams(ConfiguredStreamInitializer.java:39) ~[webapp-0.1.2-SNAPSHOT.jar:0.1.2-SNAPSHOT]
        ... 58 common frames omitted
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: aws-sqs://EVENTS?amazonSQSClient=%23amazonSQSClient&delay=60000&deleteAfterRead=false&maxMessagesPerPoll=10 due to: The request must contain the parameter Attribute.Name.
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:479) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171) ~[camel-core-2.10.2.jar:2.10.2]
        ... 66 common frames omitted
Caused by: com.amazonaws.AmazonServiceException: The request must contain the parameter Attribute.Name.
        at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:614) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:312) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:165) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.services.sqs.AmazonSQSClient.invoke(AmazonSQSClient.java:812) ~[aws-java-sdk-1.3.23.jar:na]
        at com.amazonaws.services.sqs.AmazonSQSClient.setQueueAttributes(AmazonSQSClient.java:246) ~[aws-java-sdk-1.3.23.jar:na]
        at com.netceler.infra.aws.sqs.JMXSQS.setQueueAttributes(JMXSQS.java:108) ~[infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT]
        at com.netceler.infra.aws.sqs.AmazonSQSClientProxy.setQueueAttributes(AmazonSQSClientProxy.java:63) ~[infra-sqs-0.0.3-SNAPSHOT.jar:0.0.3-SNAPSHOT]
        at org.apache.camel.component.aws.sqs.SqsEndpoint.updateQueueAttributes(SqsEndpoint.java:139) ~[camel-aws-2.10.2.jar:2.10.2]
        at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:93) ~[camel-aws-2.10.2.jar:2.10.2]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:931) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:892) ~[camel-core-2.10.2.jar:2.10.2]
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:475) ~[camel-core-2.10.2.jar:2.10.2]
        ... 74 common frames omitted
}}","$ uname -a
Linux pc-nc277 3.2.0-3-amd64 #1 SMP Mon Jul 23 02:45:17 UTC 2012 x86_64 GNU/Linux

$ java -version
java version ""1.7.0_07""
Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)

$ mvn -version
Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: /home/jgr/downloads/apache-maven-3.0.4
Java version: 1.7.0_07, vendor: Oracle Corporation
Java home: /home/jgr/downloads/jdk1.7.0_07/jre
Default locale: fr_FR, platform encoding: UTF-8
OS name: ""linux"", version: ""3.2.0-3-amd64"", arch: ""amd64"", family: ""unix""
",jgraglia,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,256771,,,Mon Nov 12 07:31:53 UTC 2012,,,,,,,,,,,"0|i0iqzb:",107465,,,,,,,,,,,,,,,,,,,,"10/Nov/12 11:09;muellerc;Hello Julien!
Thanks for reporting and my apologize for the inconvenience. It's now fixed for Camel 2.10.3 and 2.11.0. Feel free to test the SNAPSHOT versions.;;;","12/Nov/12 07:31;jgraglia;Great! Thx!
I confirm that you have resolved my problem with 2.10.3 and 2.11.0 SNAPSHOT versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
.camelLock is deleted by another camel instance,CAMEL-5776,12615168,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dave.larsson,dave.larsson,07/Nov/12 15:25,16/Nov/12 15:19,14/Jul/23 05:45,16/Nov/12 15:19,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"When camel file component tries to aquire a readLock, e.g. readLock=changed, and a camelLock already exists (aquired by another camel instance), the method MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock fails (correct).

Then in GenericFileConsumer.processExchange, row 291 processStrategy.abort is called. That will delete the camelLock which another camel instance owns.

I don't know if abort should call exclusiveReadLockStrategy.releaseExclusiveReadLock() or if we have to remember if we own the lock or not.

",,dave.larsson,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,255764,,,Fri Nov 16 15:19:42 UTC 2012,,,,,,,,,,,"0|i0fup3:",90571,,,,,,,,,,,,,,,,,,,,"08/Nov/12 06:15;njiang;Hi David
It should be easy for the MarkerFileExclusiveReadLockStrategy to remember it has the lock or not by adding header to tell if it has to lock or not.
Now my question is how did you hit this kind of issue, it could be helpful for me to wrote a test for it.

Willem;;;","08/Nov/12 13:16;dave.larsson;I noticed this when I created the lock file manually and had trace logging on. I saw that camel deleted the lock file and then consumed the file in the next polling...

I think the test could be built like this:

1) Create a lock file (/files/test.camelLock)
2) Create a file (/files/test)
3) Start camel file consumer
4) Check that camel doesn't delete lock file when polling files directory (this fails for camel 2.10.2 but works for camel 2.8.3)
5) Remove lock file
6) Make sure file is consumed on next polling

Regards David;;;","16/Nov/12 15:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ target endpoint with transferExchange=true does not work together with source File endpoint with preMove option set,CAMEL-5774,12614928,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vvnick,vvnick,06/Nov/12 10:04,03/Feb/13 08:55,14/Jul/23 05:45,03/Feb/13 08:55,2.10.2,,,,,,,,,,,,2.10.4,2.11.0,,,camel-activemq,camel-core,camel-jms,,0,,,,,,,,,"Got failure on a simple route reading from file and sending to ActiveMQ queue.
On source File endpoint set preMove option to some folder, and on target activemq endpoint set transferExchange=true.
It fails with FileNotFound exception, trying to read file from original location, not from temporary preMoved one.
Without preMove all works perfect.

Simplified Spring application context with Camel routes looks like this:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <bean id=""brokerService"" class=""org.apache.activemq.broker.BrokerService"" init-method=""start"" destroy-method=""stop"">
        <property name=""brokerName"" value=""localhost"" />
        <property name=""useJmx"" value=""false"" />
        <property name=""transportConnectorURIs"">
            <list>
                <value>vm://localhost</value>
            </list>
        </property>
    </bean>
    
    <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"" depends-on=""brokerService"">
        <property name=""brokerURL"" value=""vm://localhost""/>
        <property name=""redeliveryPolicy"" ref=""redeliveryPolicyConfigActiveMQ""/>
    </bean>
    
    <bean id=""pooledConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" init-method=""start"" destroy-method=""stop"">
        <property name=""maxConnections"" value=""8"" />
        <property name=""maximumActive"" value=""500"" />
        <property name=""connectionFactory"" ref=""jmsConnectionFactory"" />
    </bean>
    
     <bean id=""redeliveryPolicyConfigActiveMQ"" class=""org.apache.activemq.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""1""/>
        <property name=""redeliveryDelay"" value=""5000""/>
    </bean>
    
			
    <camelContext id=""testCustomer"" xmlns=""http://camel.apache.org/schema/spring"">
        
		<endpoint id=""sourceEndpoint"" uri=""file:e:/work/ids/testCustomer/input/?preMove=.tmp&amp;delay=1000&amp;readLock=rename&amp;copyAndDeleteOnRenameFail=false&amp;move=.archive&amp;moveFailed=.failed"" />
		<endpoint id=""destJms"" uri=""activemq:queue:source?transferExchange=true&amp;connectionFactory=#pooledConnectionFactory"" />

        <route id=""testRoute"">
            <from ref=""sourceEndpoint"" />
            <to ref=""destJms"" />
        </route>
    </camelContext>
</beans>


Exception trace:
org.apache.camel.TypeConversionException: Error during type conversion from type: java.io.File to the required type: byte[] with value e:\work\ids\testCustomer\input\payment.xml due java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at com.it.ids.exceptions.HandleException.process(HandleException.java:20)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.FatalFallbackErrorHandler.processNext(FatalFallbackErrorHandler.java:42)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:766)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1270)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:926)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:155)
	at org.apache.camel.component.file.FileBinding.loadContent(FileBinding.java:57)
	at org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(GenericFileConverter.java:123)
	at org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(GenericFileConverter.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)
	at org.apache.camel.impl.DefaultExchangeHolder.checkMapSerializableObjects(DefaultExchangeHolder.java:209)
	at org.apache.camel.impl.DefaultExchangeHolder.safeSetProperties(DefaultExchangeHolder.java:177)
	at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:93)
	at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:71)
	at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:439)
	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:287)
	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:266)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:215)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:158)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$3.doInJms(JmsConfiguration.java:192)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:189)
	at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:398)
	at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:352)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:132)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	... 28 more
Caused by: java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:73)
	at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:243)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922)
	... 71 more
",,davsclaus,tvautrin,vvnick,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,255441,,,Sun Feb 03 08:55:59 UTC 2013,,,,,,,,,,,"0|i0eryv:",84295,,,,,,,,,,,,,,,,,,,,"07/Nov/12 06:43;davsclaus;Post your Camel routes as well, this makes it much easier to look into with more details.;;;","07/Nov/12 11:29;vvnick;Added routes in issue description.;;;","01/Feb/13 08:46;tvautrin;Hi,

You can fix this problem with following change in org.apache.camel.component.file.FileBinding (camel-core)

Replace line 57 :
     content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file.getFile());
with :
     content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file);

it works for us;;;","02/Feb/13 18:59;davsclaus;You shouldn't really use transferExchange to transfer a java.io.File over JMS.
Camel will by default detect its a java.io.File and load the file content into memory and send the data over JMS as a bytes message, when you dont have transferExchange=true.



;;;","03/Feb/13 08:55;davsclaus;Viktor, thanks for reporting.
And Thomas for the hint for the solution.

But there was other problems on the receiver side when using transferExchange=true and with files. So this is not supported any longer.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-twitter streaming consumer broken,CAMEL-5773,12614905,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,3riverdev,3riverdev,06/Nov/12 06:19,06/Nov/12 08:00,14/Jul/23 05:45,06/Nov/12 08:00,2.10.1,,,,,,,,,,,,2.10.3,2.11.0,,,camel-twitter,,,,0,,,,,,,,,CAMEL-5529 was an incomplete fix and broke the streaming consumer.  Patch attached.,,3riverdev,davsclaus,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5529,,,,,,,,"06/Nov/12 06:20;3riverdev;CAMEL-5773.patch;https://issues.apache.org/jira/secure/attachment/12552217/CAMEL-5773.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,255417,,,Tue Nov 06 08:00:51 UTC 2012,,,,,,,Patch Available,,,,"0|i0ert3:",84267,,,,,,,,,,,,,,,,,,,,"06/Nov/12 08:00;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel JMS producer can block a thread under specific circumstances,CAMEL-5769,12614644,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,03/Nov/12 12:57,04/Nov/12 23:34,14/Jul/23 05:45,04/Nov/12 23:32,2.10.2,2.8.6,2.9.4,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jms,,,,0,,,,,,,,,"This is an edge case, but when the following circumstances concur, the asynchronous routing engine in Camel become blocked:

- Sending an InOut exchange over JMS (request/reply), where:
- Persistent messages are enabled (deliveryPersistent=true)
- useMessageIDasCorrelationID is enabled
- replyToType is Temporary queues (default) (using TemporaryQueueReplyManager)
- a timeout is set

You have to be really unlucky, but if the following condition is satisfied, a thread will become blocked:

{{time the broker takes to ACK the produced message > message timeout}}

Hence, if we have a timeout of 3000ms, and the broker takes 4000ms to ACK the message (e.g. slow Disk I/O while the journal is rotating - it happened to us), at some point we'll see this.

{code}
2012-10-30 10:46:57,680 | WARN  | CorrelationMap | 89 - org.apache.camel.camel-core - 2.8.0.fuse-06-11 | Exception occurred during purge task. This exception will be ignored.
java.lang.NullPointerException
{code}

The CorrelationMap is rendered useless, so if subsequent exchanges time out, the ReplyHandler may never get an onTimeout callback, thus leading to the waiting thread getting blocked forever if the async routing engine was in place.",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,255062,,,Sun Nov 04 23:34:38 UTC 2012,,,,,,,,,,,"0|i0eotb:",83782,,,,,,,,,,,,,,,,,,,,"04/Nov/12 23:32;raulvk;Fixed in trunk, 2.10.x and 2.9.x. Added a test case to reproduce the buggy situation: JmsBlockedAsyncRoutingEngineTest.;;;","04/Nov/12 23:34;raulvk;I noticed that the issue doesn't necessarily happen with persistent messages only. It happens under any situation where the broker takes longer than the value set for the request timeout to ACK the message to the producer (and thus send back the final Message ID). In other words, this situation is reproduceable also when ActiveMQ Producer Flow Control has kicked in.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Configuring jetty component with a different name dont work with jetty consumer,CAMEL-5766,12614499,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Nov/12 11:40,02/Nov/12 12:10,14/Jul/23 05:45,02/Nov/12 12:10,2.10.0,2.9.0,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jetty,,,,0,,,,,,,,,"For example if you do
{code}
		<route>
			<from uri=""jetty2:http://localhost:9090/myapp""/>
			<transform>
				<simple>Hello ${body}</simple>
			</transform>
		</route>
{code}

Then it fails with
{code}
java.net.SocketException: Unresolved address
	at sun.nio.ch.Net.translateToSocketException(Net.java:58)
	at sun.nio.ch.Net.translateException(Net.java:84)
	at sun.nio.ch.Net.translateException(Net.java:90)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:61)
	at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187)
	at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316)
	at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.Server.doStart(Server.java:286)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:315)
	at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:149)
	at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
...
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,253974,,,Fri Nov 02 11:56:14 UTC 2012,,,,,,,,,,,"0|i0edrz:",81994,,,,,,,,,,,,,,,,,,,,"02/Nov/12 11:56;davsclaus;Caused by CAMEL-4425;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update SqsConsumer to extend Visibility Timeout correctly,CAMEL-5761,12614061,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,carlosroman,carlosroman,30/Oct/12 18:09,09/Jan/13 00:44,14/Jul/23 05:45,02/Nov/12 07:08,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,,,camel-aws,,,,0,aws,patch,sqs,,,,,,"Currently SqsConsumer will scheduled a future to happen start occruing 1/2 the visibility timeout, and reoccur again at the visibility timeout period. Because of the way SQS works, when you request a ChangeMessageVisibility timeout it does not add that to the time remaining on the message visibility. Instead it will set the message visibility to the time out given. This means that what actually happens in the camel code is that:
* we request the ChangeMessageVisibility timeout to be set to X seconds from now after X/2 seconds
* then every X seconds after that we we request the ChangeMessageVisibility timeout to be set to X from now

This means that our message will become visible every now and again as the ChangeMessageVisibility timeout is not updated in time as period between successive executions is the same as the timeout period we request.

I've attached two patches which would fix this issue.

* ""aws_sqs_visibility_timeout_simple.patch"" - This patch changes the way we set up the future. The delay and period are now the same so that we call ChangeMessageVisibility every X/2 after the message has been pulled. 

* ""aws_sqs_visibility_timeout_phased_timeout.patch"" - This one keeps the delay to 1/2 the period and requests ChangeMessageVisibility every period. This time though it requests the visibility to be 1.5 * the period. This means that it behaves as originally planned, as if it was adding duration to the visibility duration left. This means we call Amazon less times and still keep the message hidden as expected.



This was looked at with Alex Hutter (both working on same project).",,carlosroman,njiang,,,,,,,,,,,,,,,,,,,CAMEL-5944,,CAMEL-5306,,,,,,,,,,"30/Oct/12 18:10;carlosroman;aws_sqs_visibility_timeout_phased_timeout.patch;https://issues.apache.org/jira/secure/attachment/12551394/aws_sqs_visibility_timeout_phased_timeout.patch","30/Oct/12 18:10;carlosroman;aws_sqs_visibility_timeout_simple.patch;https://issues.apache.org/jira/secure/attachment/12551395/aws_sqs_visibility_timeout_simple.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,253186,,,Fri Nov 02 07:08:51 UTC 2012,,,,,,,Patch Available,,,,"0|i0dcav:",75922,,,,,,,,,,,,,,,,,,,,"30/Oct/12 18:10;carlosroman;Two possible patches to solve the problem.;;;","02/Nov/12 07:08;njiang;Applied the patch of aws_sqs_visibility_timeout_phased_timeout.patch into trunk and camel-2.10.x with thanks to Carlos.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP 1.1 Host header not set correctly with camel-http4,CAMEL-5757,12613916,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,trembmax,trembmax,29/Oct/12 16:13,30/Dec/15 15:35,14/Jul/23 05:45,02/Nov/12 07:44,2.10.1,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-http,,,,0,,,,,,,,,"The HTTP 1.1 Host header is not set correctly when using the camel-http4 component as a proxy with bridgeEnpoint=true.

The original request Host header is set in the proxied request instead of the host of the service requested by the proxy (ref: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html section 14.23).

This simple route shows the problem:

 <route autoStartup=""true"" id=""TestHost"" xmlns:ns2=""http://camel.apache.org/schema/web"" xmlns=""http://camel.apache.org/schema/spring"">
        <from uri=""jetty:http://0.0.0.0:8090/TestHost""/>
        <to uri=""https4://www.google.com?bridgeEndpoint=true&amp;throwExceptionOnFailure=false""/>
 </route> 

This is what I get in the log:

INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] DefaultClientConnection        DEBUG Sending request: GET / HTTP/1.1
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""GET / HTTP/1.1[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""breadcrumbId: ID-localhost-1329-1351277552803-0-2[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept-Encoding: gzip, deflate[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Host: localhost:8090[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept-Language: en-us,en;q=0.5[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Connection: Keep-Alive[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""[\r][\n]""
",,hu2008yinxiang,njiang,trembmax,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,252806,,,Wed Dec 30 15:35:46 UTC 2015,,,,,,,,,,,"0|i0d8cn:",75129,,,,,,,,,,,,,,,,,,,,"30/Oct/12 08:49;njiang;Hi,

You can remove the header ""host"" from the message to avoid the bridgeEndpoint resend the message for you.
I think we could help people to filter these header if the bridgeEndpoint option is set to be true.

Willem
;;;","02/Nov/12 07:44;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","30/Dec/15 15:35;hu2008yinxiang;Hi, [~njiang], I have met the problem [https://issues.apache.org/jira/browse/CAMEL-9462], would you mind help me and have a look, please.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"OSGi resolvers for component, dataformat and language should check if service object is assignable before casting",CAMEL-5756,12613878,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,29/Oct/12 12:13,29/Oct/12 18:51,14/Jul/23 05:45,29/Oct/12 18:51,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,osgi,,,,0,,,,,,,,,"Currently, the OSGi resolvers, get all services for the target component, dataformat and language and then cast the first service object to the type of choice.

This can be problematic if for any reason multiple version of a component is installed inside the container.",,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,252756,,,Mon Oct 29 18:51:16 UTC 2012,,,,,,,,,,,"0|i0d7fb:",74979,,,,,,,,,,,,,,,,,,,,"29/Oct/12 18:51;iocanel;committed to trunk and merged to 2.10 and 2.9 branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader mixup in Direct VM component,CAMEL-5748,12613768,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,27/Oct/12 18:03,21/Jan/13 12:44,14/Jul/23 05:45,21/Jan/13 12:44,2.10.2,,,,,,,,,,,,2.10.4,2.11.0,,,camel-core,osgi,,,0,,,,,,,,,"The Direct VM component allows routes in different Camel Contexts to communicate with each other with all the benefits of the Direct endpoint (namely thread-sharing, thus enabling transaction to propagate across Camel Contexts).

However, the TCCL of the consumer route still remains the TCCL of the producer route. See CAMEL-5722 for a similar case.

I suggest fixing this by introducing a proxy processor at the consumer that sets the appropriate classloader, and sets it back when done. Note: remember to take into account exception scenarios, i.e. we should catch exceptions from the forward call to .process(), reset the classloader and rethrow the exception.
",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,CAMEL-5722,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,252523,,,Mon Jan 21 12:44:48 UTC 2013,,,,,,,,,,,"0|i0ctkn:",72735,,,,,,,,,,,,,,,,,,,,"29/Oct/12 10:01;davsclaus;I wonder if there is anywhere in OSGi spec that says that the TCCL must be the classloader from the current bundle? 

When you use OSGi service registry and invoke services across bundles, what is the TCCL then?;;;","29/Oct/12 10:13;davsclaus;I assume camel-quartz may have this issue as well as the quartz scheduler is shared in osgi land.;;;","29/Oct/12 11:27;raulvk;That's a good point. Just searching on Google for ""thread context classloader osgi"" shows that Camel is not the only project in pain due to possible under-specification from OSGi... http://apache-felix.18485.n6.nabble.com/Can-the-thread-context-classloader-issue-be-solved-at-all-td4835872.html#a30704352;;;","21/Jan/13 12:21;davsclaus;I think this makes sense to implement in direct-vm as its intended for cross application in same JVM. So the direct VM consumer code should have logic to set/revert the TCCL.
;;;","21/Jan/13 12:44;davsclaus;I implemented the suggestion from Raul.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cold restart doesn't clear properties component cache,CAMEL-5747,12613734,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sdanig,sdanig,26/Oct/12 23:28,30/Oct/12 14:59,14/Jul/23 05:45,30/Oct/12 14:59,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,,,camel-core,,,,0,,,,,,,,,"The properties component optionally (and by default) caches the property values that it resolves. However, the component does not clear the cache on stop, so the properties values are never refreshed after a cold restart of Camel (stop() + start()).",,sdanig,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Oct/12 23:30;sdanig;properties-clear.patch;https://issues.apache.org/jira/secure/attachment/12551040/properties-clear.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,252482,,,2012-10-26 23:28:13.0,,,,,,,Patch Available,,,,"0|i0ct9z:",72687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WireTap will always copy the origin Message,CAMEL-5746,12613625,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,gangliu,gangliu,26/Oct/12 09:14,26/Oct/12 14:01,14/Jul/23 05:45,26/Oct/12 14:01,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"I found the wiretap will always copy the original exchange message after deprecated those methods like -wireTap(String uri, boolean copy, Expression body)- and -wireTap(String uri, boolean copy, Processor processor)- .

Checked the source code of *org.apache.camel.model.WireTapDefinition<Type>*, the *isCopy()* and *copy()* method are:
{code}
    public WireTapDefinition<Type> copy() {
        setCopy(true);
        return this;
    }

    public boolean isCopy() {
        // should default to true if not configured
        return copy != null ? copy : true;
    }
{code}
So, no matter, we use '.wireTap(""XX"")' or '.wireTap(""XX"").copy()' , it will always copy the original exchange message.
",Camel 2.10.2,gangliu,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,251217,,,Fri Oct 26 14:01:02 UTC 2012,,,,,,,,,,,"0|i0b60n:",63087,,,,,,,,,,,,,,,,,,,,"26/Oct/12 12:40;njiang;We could add a fluent to set if camel copy the origin Message.;;;","26/Oct/12 14:01;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cdi - Adding duplicate route builder beans to internal list,CAMEL-5741,12613280,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Oct/12 13:32,30/Oct/12 14:55,14/Jul/23 05:45,30/Oct/12 14:55,2.11.0,,,,,,,,,,,,2.11.0,,,,camel-cdi,,,,0,,,,,,,,,"The camel-itest-cdi fails. So I took a look, and notice that duplicate beans is added to CamelContextConfig from camel-cdi.

So I made a patch to fix that, and the test got a bit further.

I am attaching the patch here then the ppl working on the new camel-cdi module can take a look.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/12 13:33;davsclaus;CAMEL-5741.patch;https://issues.apache.org/jira/secure/attachment/12550627/CAMEL-5741.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250765,,,Tue Oct 30 14:55:26 UTC 2012,,,,,,,,,,,"0|i0b19r:",62318,,,,,,,,,,,,,,,,,,,,"30/Oct/12 14:55;davsclaus;Applied the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpConnectionManager configuration is not injected correctly when using blueprint ,CAMEL-5738,12613129,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nikosd23,nikosd23,23/Oct/12 12:53,24/Oct/12 08:10,14/Jul/23 05:45,24/Oct/12 08:10,2.10.1,,,,,,,,,,,,2.10.3,2.11.0,,,camel-http,,,,0,,,,,,,,,"The creation of HttpEndpoint is done with the default HttpConnectionManager. As a consequence, the http configuration concerning max connections, soTimeouts, etc is overridden by the default params. Attached you can find a unit test using camel-test-blueprint that identifies the issue. The problem is not replicated using spring-dm. ",,nikosd23,njiang,,,,,,,,,,,,,,,,,,,CAMEL-5712,,,,,,,,,,,,"23/Oct/12 12:54;nikosd23;blueprint-conf-http-endpoint-unit-test.txt;https://issues.apache.org/jira/secure/attachment/12550449/blueprint-conf-http-endpoint-unit-test.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250557,,,Wed Oct 24 08:08:40 UTC 2012,,,,,,,,,,,"0|i0az9r:",61992,,,,,,,,,,,,,,,,,,,,"23/Oct/12 12:54;nikosd23;Added a unit test that identifies the issue reported.;;;","24/Oct/12 06:19;njiang;@Nickolaos
I just run the test in the camel-2.10.x and trunk, I cannot reproduce the error.
Not sure if it is fixed in camel-2.10.2, can you double check it?
;;;","24/Oct/12 07:37;nikosd23;Hi Willem,
Just run the test using 2.10.2 tag. Same behavior, unit test fails.
Nevertheless, using trunk 2.11.SNAPSHOT the problem is not reproduced.;;;","24/Oct/12 08:08;njiang;Hi Nikolaos,

I checked the change log and verified Calus already fix this issue in CAMEL-5712.
I will closed this as the test is already fixed.

Willem;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - LocalWorkDir option did not work as expected,CAMEL-5737,12613124,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/12 11:38,23/Oct/12 12:24,14/Jul/23 05:45,23/Oct/12 12:24,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-ftp,,,,0,,,,,,,,,"There is a flaw when using from ftp -> to file. And using the localWorkDirectory option. 

See nabble
http://camel.465427.n5.nabble.com/camel-ftp-option-localWorkDirectory-doesn-t-work-properly-on-windows-tp5721438.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250533,,,2012-10-23 11:38:59.0,,,,,,,,,,,"0|i0az5j:",61968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SnsConfiguration's toString() uses amazonSQSClient as key string rather than amazonSNSClient,CAMEL-5735,12613053,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,rhowlett,rhowlett,22/Oct/12 21:46,23/Oct/12 07:45,14/Jul/23 05:45,23/Oct/12 07:40,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-aws,,,,0,patch,,,,,,,,"The toString() method in SnsConfiguration uses the incorrect string ""amazonSQSClient"" as the key for the AmazonSNSClient reference in the registry.",,njiang,rhowlett,,,,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,"22/Oct/12 21:47;rhowlett;SnsConfiguration.patch;https://issues.apache.org/jira/secure/attachment/12550357/SnsConfiguration.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,250450,,,Tue Oct 23 07:40:21 UTC 2012,,,,,,,Patch Available,,,,"0|i0aylj:",61878,,,,,,,,,,,,,,,,,,,,"22/Oct/12 21:47;rhowlett;Fixes the SnsConfiguration toString() method to use ""amazonSNSClient"" rather than ""amazonSQSClient"".;;;","23/Oct/12 07:40;njiang;Committed the patch into trunk, 2.10.x and 2.9.x with thanks to Robin.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException with SpringBatchProducer and null header value,CAMEL-5733,12613000,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vanackej,vanackej,22/Oct/12 17:15,23/Oct/12 07:42,14/Jul/23 05:45,23/Oct/12 07:42,2.10.2,,,,,,,,,,,,2.10.3,2.11.0,,,camel-spring-batch,,,,0,,,,,,,,,"A NullPointerException occurs in SpringBatchProducer line 60 when a header with a null value exists.

Null headers should just be ignored or perhaps be added in jobParameters with a null value. I don't known what is the best strategy.",,njiang,vanackej,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250373,,,Tue Oct 23 07:42:14 UTC 2012,,,,,,,,,,,"0|i0axyn:",61775,,,,,,,,,,,,,,,,,,,,"22/Oct/12 17:18;vanackej;By the way : camel-spring-batch component does not exists in JIRA, you should add it.;;;","23/Oct/12 07:42;njiang;Applied patch with an unit test into trunk and 2.10.x branches with thanks to Johann.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Data coding of 0x02 not considered 8-bit,CAMEL-5732,12612977,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,frankzinger,frankzinger,22/Oct/12 14:22,23/Oct/12 21:01,14/Jul/23 05:45,23/Oct/12 21:01,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,,,,"SmppUtils.parseAlphabetFromDataCoding()) doesn't identify an input of 0x02 as 8-bit, but the SMPP spec (3.4 and 5.0) clearly states that 0x02 is octet-unspecified (8-bit).

The bug is actually in jsmpp, but the attached patch contains a workaround.

This seems like a pretty blatant mistake to make, so perhaps there is good explanation that I am not aware of?",,frankzinger,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/12 14:24;frankzinger;dcs_of_2_is_8bit.diff;https://issues.apache.org/jira/secure/attachment/12550290/dcs_of_2_is_8bit.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250328,,,Tue Oct 23 21:01:36 UTC 2012,,,,,,,Patch Available,,,,"0|i0ax5b:",61643,,,,,,,,,,,,,,,,,,,,"23/Oct/12 20:43;muellerc;See chapter 5.2.19 data_coding in http://docs.nimta.com/SMPP_v3_4_Issue1_2.pdf;;;","23/Oct/12 20:52;muellerc;fixed some checkstyle issues which are raised by running
{code}
mvn clean install -Psourcecheck
{code}

This is documented here: http://camel.apache.org/building.html.;;;","23/Oct/12 21:01;muellerc;Thank you Francois for the patch! Feel free to test the SNAPSHOT versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting alphabet header to 8-bit doesn't update data coding,CAMEL-5731,12612971,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,frankzinger,frankzinger,22/Oct/12 14:02,03/Nov/12 15:37,14/Jul/23 05:45,03/Nov/12 15:37,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,,,,"For derivatives of SmppSmCommand, setting the SmppConstants.ALPHABET header to e.g. Alphabet.ALPHA_8_BIT doesn't change the data coding of the resulting command.

I am not 100% clear on how the alphabet header is meant to interact with the data coding, but this seems like a bug to me.

Patch with demo unit test to follow.",,frankzinger,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/12 14:05;frankzinger;alpha_not_updating_dcs_demo_unit_test.diff;https://issues.apache.org/jira/secure/attachment/12550279/alpha_not_updating_dcs_demo_unit_test.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250322,,,Sat Nov 03 15:36:59 UTC 2012,,,,,,,,,,,"0|i0ax3r:",61636,,,,,,,,,,,,,,,,,,,,"22/Oct/12 14:05;frankzinger;In this test, the alphabet header is set to 8-bit, but the data coding passed to SmppSession.submitShortMessage() is 0, which is the default and does not indicate an 8-bit data coding.;;;","03/Nov/12 15:33;muellerc;A workaround is to use the header SmppConstants.DATA_CODING. This will be taken into account.;;;","03/Nov/12 15:36;muellerc;Thanks for the test case Francois. I fixed this issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SqsConsumer receive thread is tightly coupled to extendMessageVisiblity's scheduled task,CAMEL-5730,12612962,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexhutter,alexhutter,22/Oct/12 13:13,22/Oct/12 13:37,14/Jul/23 05:45,22/Oct/12 13:37,2.10.0,,,,,,,,,,,,2.10.3,2.11.0,,,camel-aws,,,,0,,,,,,,,,"When I made the patch file for CAMEL-5306 I made a mistake and coupled the cancelling of the visibility extending scheduled task with the thread that receives the message inside SqsConsumer.  This causes issues when try to write Processors that delegate the completion of an exchange to another thread.

Actually the cancelling of the scheduled task should have been handled via exchange.addOnCompletion(), the same way the the overall SQS transaction is completed.

The attached patch fixes this issue.",,alexhutter,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/12 13:15;alexhutter;fix-SQS-timeout-extender.patch;https://issues.apache.org/jira/secure/attachment/12550269/fix-SQS-timeout-extender.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,250313,,,Mon Oct 22 13:37:21 UTC 2012,,,,,,,Patch Available,,,,"0|i0ax1r:",61627,,,,,,,,,,,,,,,,,,,,"22/Oct/12 13:15;alexhutter;I give permission for Apache to own the copyright on the attach file: fix-SQS-timeout-extender.patch;;;","22/Oct/12 13:37;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-crypto - Signer producer should close input stream after usage,CAMEL-5729,12612935,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Oct/12 10:18,22/Oct/12 10:28,14/Jul/23 05:45,22/Oct/12 10:28,2.10.1,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,, camel-crypto,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/The-file-is-not-deleted-if-it-is-submitted-to-digital-signature-end-point-crypto-sign-td5721377.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250282,,,Mon Oct 22 10:19:47 UTC 2012,,,,,,,,,,,"0|i0awsn:",61586,,,,,,,,,,,,,,,,,,,,"22/Oct/12 10:19;davsclaus;A workaround is to convert the message prior to the crypto, for example to byte arrays
<convertBodyTo type=""byte[]""/>
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader mixup when consumers across bundles share the same camel-jetty port,CAMEL-5722,12612837,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,20/Oct/12 16:02,27/Oct/12 18:33,14/Jul/23 05:45,27/Oct/12 18:33,2.8.0,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jetty,,,,0,,,,,,,,,"Happens in an OSGi environment; but it is also applicable in modular servers that build dynamic classloaders (e.g. JBoss AS) per deployed artifacts (WAR, module, EAR, etc.).

If bundles A and B are both creating camel-jetty consumers on the same TCP port, the consumers will share the underlying Jetty connector. Moreover, the Jetty connector is indeed created by the first consumer that initialises on that TCP port.

Since the Camel route executes on the Jetty Connector thread, all class resolutions will happen against the classloader of the bundle that initialises first.

This makes class resolution absolutely undeterministic and erratic. Quite a nasty bug IMHO.

Perhaps this can be fixed by adding a call to {{Thread.setContextClassLoader()}} passing the classloader of the JettyHttpEndpoint, as soon as a request comes in?","OSGi environment, Karaf 2.2.2.",davsclaus,njiang,raulvk,,,,,,,,,,,,,,,,,,CAMEL-5748,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250109,,,Sat Oct 27 18:07:02 UTC 2012,,,,,,,,,,,"0|i0apcn:",60380,,,,,,,,,,,,,,,,,,,,"20/Oct/12 16:03;raulvk;Have only been able to test in Camel 2.8.0. Will test on a later release and provide feedback.;;;","21/Oct/12 10:02;njiang;We have faced the same issue in camel-jaxb, to resolve it we put the bundle class loader as application class laoder into the bus and it can be get by the CXF run time, so the TCCL can be set with the application class loader whenever the camel need. 
@Raul, to resolve the issue that you faced, you can use the CamelContext.getApplicationContxt() to set the TCCL on the CamelContinuationServlet.;;;","21/Oct/12 10:14;raulvk;Thanks a lot for the indications. I have confirmed that setting the TCCL to the classloader from CamelContext.getApplicationContextClassLoader() does the trick.

Since the Jetty consumer is async, I just wondered if we also have to do something special on the AsyncCallbacks?;;;","21/Oct/12 16:39;raulvk;Working on a fix. So far I have an itest-osgi that reproduces the issue.;;;","25/Oct/12 12:15;davsclaus;Any update on this issue?;;;","25/Oct/12 12:17;davsclaus;I guess a generic solution is to let the UnitOfWorkProcessor that is 1st on the route processors, set the TCCL and restore it on done. Then it may be a generic fix for all use-cases;;;","27/Oct/12 16:50;raulvk;Yep, I committed fixes on r1400729 and r1400734 on 21/10. There was also some discussion on the mailing list regarding other cases to consider.

Claus, that's another solution, but most consumers allow for some custom logic to execute before the route kicks in, e.g. HttpBinding and the like. The UoW processor wouldn't account for those scenarios, or would it?
;;;","27/Oct/12 17:05;raulvk;I think this can also be a problem in the Direct VM component, if a new Exchange is not created at the consumer side... I'll check.;;;","27/Oct/12 18:07;raulvk;Yep, filed CAMEL-5748.;;;",,,,,,,,,,,,,,,,,,,,,
Aggregate EIP - Dynamic completion size should override fixed values if in exchange,CAMEL-5720,12612826,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Oct/12 10:01,20/Oct/12 10:12,14/Jul/23 05:45,20/Oct/12 10:12,2.10.0,2.9.0,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,eip,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-tp5721307.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,250094,,,2012-10-20 10:01:33.0,,,,,,,,,,,"0|i0aomf:",60262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bodies of SMs with 8-bit data_coding are mangled,CAMEL-5718,12612703,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,frankzinger,frankzinger,19/Oct/12 15:27,15/Nov/12 21:15,14/Jul/23 05:45,13/Nov/12 21:26,,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-smpp,,,,0,,,,,,,,,"Bytes in the body of 8-bit SUBMIT_SMs which do not fall within the chosen charset's range are set to '?', which is obviously wrong because 8-bit/binary data should not be modified in any way.

EDIT: Turns out the RX SMs (DELIVER_SM, etc.) were also affected.",,bvahdat,davsclaus,frankzinger,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Nov/12 07:48;frankzinger;8bit_deliver_sm_bodies_mangled.diff;https://issues.apache.org/jira/secure/attachment/12551683/8bit_deliver_sm_bodies_mangled.diff","22/Oct/12 13:37;frankzinger;camel_smpp_8bit_messages.diff;https://issues.apache.org/jira/secure/attachment/12550270/camel_smpp_8bit_messages.diff","13/Nov/12 12:55;frankzinger;ci_failures_fixed_and_tested.diff;https://issues.apache.org/jira/secure/attachment/12553311/ci_failures_fixed_and_tested.diff","13/Nov/12 12:55;frankzinger;ci_failures_reproduced.diff;https://issues.apache.org/jira/secure/attachment/12553310/ci_failures_reproduced.diff",,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,249954,,,Thu Nov 15 21:15:19 UTC 2012,,,,,,,Patch Available,,,,"0|i0ane7:",60063,Regression,,,,,,,,,,,,,,,,,,,"19/Oct/12 15:31;frankzinger;I've also noticed that SUBMIT_SMs with SmppConstants.ALPHABET set to Alphabet.ALPHA_8_BIT have their bodies mangled in the same way.;;;","19/Oct/12 16:40;frankzinger;I guess all the other message types need to be checked too. I will do so on Monday and provide another patch if necessary. I know DELIVER_SM works fine though.;;;","20/Oct/12 14:59;davsclaus;Looking forward for the remainder patches.;;;","20/Oct/12 20:27;muellerc;Looking forward for the patch - and the unit test ;-);;;","22/Oct/12 13:37;frankzinger;This patch supercedes the previous one. It fixes the mangling of 8-bit bodies in all the message types I could identify (basically all subclasses of SmppSmCommand: SmppSubmitSmCommand, SmppSubmitMultiCommand, SmppReplaceSmCommand).

I.e.:

- Setting data coding or alphabet to one of the 8-bit values prevents body from getting narrowed to charset;

- Data coding takes precedence over alphabet. I.e. if both headers are set, only the value of the data coding is taken into account and the alphabet is ignored.;;;","23/Oct/12 09:08;frankzinger;As mentioned before, DELIVER_SM bodies are not mangled, but here is a patch (test_deliver_sm_bodies_not_mangled.diff) containing tests that confirm the fact in case you think it would be useful.;;;","31/Oct/12 22:15;muellerc;After applying your patches, 4 test on my machine failed:

{noformat}
Results :

Failed tests: 
  createSmppMessageFromDefaultDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFromLatin1DataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFrom8bitDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createBodyShouldNotMangle8bitDataCodingShortMessage(org.apache.camel.component.smpp.SmppMessageTest): arrays first differed at element [0]; expected:<-1> but was:<-40>

Tests run: 125, Failures: 4, Errors: 0, Skipped: 4
{noformat}

Could you please have a look at it? What's your OS and default charset?;;;","01/Nov/12 07:47;frankzinger;I am on Linux and my default charset is Latin1.

But anyway, I have improved the tests (they now fail on my system as well because they try every supported character encoding) and have provided the code fixes in the patch called '8bit_deliver_sm_bodies_mangled.diff', which I will attach soon.;;;","01/Nov/12 07:51;frankzinger;The tests in the other patch should probably also be updated to try every supported charset.;;;","03/Nov/12 15:05;muellerc;I'm a bit confused. Do you work on an additional patch? Are both attached patches needed or only ""8bit_deliver_sm_bodies_mangled.diff""?;;;","03/Nov/12 15:52;frankzinger;I added '8bit_deliver_sm_bodies_mangled.diff' and removed the previous patch which contained all the failing tests you pointed out. That one was called 'test_deliver_sm_bodies_not_mangled.diff'. Both of the currently-attached patches need to be committed.;;;","05/Nov/12 12:59;muellerc;Francois, thanks for the patch. I applied both. Could you please have a look at it, because I had to resolve merge conflicts in both. And a had to do a lot other formatting changes to make Checkstyle happy. You can read more about how you can test it too before you create the patch at [1].

So, thanks again!

[1] http://camel.apache.org/building.html;;;","06/Nov/12 07:46;frankzinger;Sorry for the conflicts. I checked both of the affected files (SmppMessageTest.java and SmppSubmitSmCommandTest.java; does that look right?) and it all looks OK to me. I have also been made aware of Checkstyle, and actually used it for the second patch, so it shouldn't be a problem again. Thanks!;;;","11/Nov/12 10:32;davsclaus;This patch causes 2 failures on our CI servers. Is anybody looking into this?

If not I will revert the commit as it prevent the CI servers from continue testing other parts of Camel.;;;","11/Nov/12 10:34;davsclaus;https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-smpp/1090/testReport/;;;","11/Nov/12 12:13;muellerc;I will fix it later today.;;;","12/Nov/12 08:32;bvahdat;They are still failing even after the latest fix:

https://builds.apache.org/job/Camel.trunk.fulltest/1092/org.apache.camel$camel-smpp/#showFailuresLink

Not sure if this sounds reasonable to you but I think the problem in both cases is the following line:

{code}
smppMessage.getBody(String.class).getBytes()
{code}

Which makes use of the platform's default charset for the byte array being returned. However the other body is a UTF-8 encoded byte array! So I think the usage of

{code}
IOConverter.toString(byte[] data, Exchange exchange)
{code}

could resolve the problem. To reproduce the problem on your local box you could set the following system property while running the tests:

{code}
-Dfile.encoding=UTF-16
{code}
;;;","12/Nov/12 08:37;bvahdat;That is the usage of the following header while converting:

{code}
Exchange.CHARSET_NAME
{code};;;","12/Nov/12 09:03;frankzinger;Not so sure. SmppMessage.getBody() doesn't appear to do any conversion because the body is set to a String at SmppBinding.createSmppMessage (line 109) and also at SmppMessage.createBody (line 94). All SmppMessage.getBody() does is call MessageSupport.getBody(Class<T> type, Object body), which simply casts 'body' to 'type' if the body is already an instance of the type, which is the case here.

I think the problem is where the body is being set using String(byte[]) (at the above-mentioned locations). This String constructor decodes the byte array using the system's default charset. I initially was setting the body to a byte[] and I think that would prevent conversion and just seems generally safer and more sensible. I changed it to a String at the last minute for the sake of consistency because the body is a String when it's not 8-bit and the tests were passing under my default charset of Latin1.;;;","12/Nov/12 09:07;frankzinger;Sorry, I guess you were talking about String.getBytes() doing conversion.

Anyway, I still think the best option would be to set and leave 8-bit bodies as byte[] unless you guys think the difference in types would be a problem? The body really should be left untouched in the case of 8-bit DCS. Otherwise there is just too much scope for things to go wrong.;;;","12/Nov/12 21:20;muellerc;I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.;;;","12/Nov/12 22:51;muellerc;I can reproduce this issue on my new Ubuntu instance. Looking for the issue...;;;","13/Nov/12 05:06;frankzinger;I could also have a look, so please let me know if it's necessary.;;;","13/Nov/12 07:24;muellerc;It would be great if you could have a look at it. I did a small update two days ago but it didn't fixed the issue on Ubuntu. :-(;;;","13/Nov/12 08:10;bvahdat;{quote}
I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.
{quote}

You can also reproduce the two failing tests even on MacOS:

{code}
mvn test -Dfile.encoding=UTF-16
{code}

That's you change the default platform encoding from {{MacRoman}} to {{UTF-16}}. Unfortunatley I've got no knowledge of the SMPP protocol or jsmpp library but looking at the changes being made by this ticket I see the configured encoding (that's {{SmppConfiguration.getEncoding()}}) [is not taken into the account *anymore*|http://svn.apache.org/viewvc/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?r1=1395645&r2=1405775] to build Strings out of the given byte arrays:

{code}
smppMessage.setBody(new String(deliverSm.getShortMessage()));
{code}

which explains why the test results are platform depended!
;;;","13/Nov/12 08:18;frankzinger;OK thanks for the help so far guys, I will take a look today still and report back.;;;","13/Nov/12 12:54;frankzinger;I have had a look and I am of the opinion that leaving 8-bit bodies as byte[] is the only solution.

It is not possible to store a byte[] inside a String (using e.g. String.String(byte[])) and read those bytes out again later (using e.g. String.getBytes()) without involving the system's default charset. And as patch [1] shows, this fails (EDIT: fails as in the 8-bit data is modified) on at least one of my system's supported charsets (Big5, in this case). In a nutshell, storing 8-bit data inside a String is just plain wrong.

I don't think consistency (String vs. byte[] bodies) is an issue after all because users will still be able to get a String version of the body by calling SmppMessage.getBody(String.class) (although this will cause conversion on some systems). I think it's actually quite intuitive to retrieve 8-bit data using getBody(byte[].class) or (byte[])getBody().

I have attached two patches. *Note that these patches are not compatible*: patch [1] exists solely to show how I reproduced the CI failures on my machine. The real fix and its unit tests are in patch [2].

[1] _ci_failures_reproduced.diff_: For informational purposes only; modifies the tests that were causing the CI machine to fail so that they fail on my machine. (They should now fail on any machine which supports a reasonable set of character encodings.)

[2] _ci_failures_fixed_and_tested.diff_: The real fix and its unit tests.
;;;","13/Nov/12 21:26;muellerc;Thanks again Francois for the patch. It works on my Ubuntu VM too.;;;","15/Nov/12 13:02;frankzinger;Cool, thanks to you guys too. Let's hope it survives the CI this time.;;;","15/Nov/12 21:15;muellerc;It survived! ;-)
The last camel-smpp tests runs successfully...;;;"
BlueprintCamelContext should not get started in the init() method but later when the blueprint container is fully initialized,CAMEL-5712,12612418,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,18/Oct/12 12:41,24/Oct/12 08:09,14/Jul/23 05:45,18/Oct/12 19:43,2.10.0,2.9.0,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-blueprint,,,,0,,,,,,,,,"The init() method in BlueprintCamelContext should not call maybeStart(). but instead should be started when the blueprint container is done doing all its dance and initialization.

For example Spring sends on ContextRefreshedEvent when its done.

We need something similar for blueprint to tell us when its done doing its initialization et all.

The problem is that the CamelContext should not be started until all that other stuff is initialized as well.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,CAMEL-5738,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,249548,,,Thu Oct 18 12:42:20 UTC 2012,,,,,,,,,,,"0|i0affz:",58775,,,,,,,,,,,,,,,,,,,,"18/Oct/12 12:42;davsclaus;Now the trick is to figure out how to get the BlueprintContainer to tell me when its done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest route returns response with http Status code 500 Internal Server Error when response has Last-Modified or Header-expires in header as string. ,CAMEL-5710,12612349,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,amit1000,amit1000,18/Oct/12 01:02,18/Oct/12 16:39,14/Jul/23 05:45,18/Oct/12 05:36,2.10.1,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-restlet,,,,0,,,,,,,,,"Rest route returns Response with http Status code 500 Internal Server Error and expected response headers/body when response has Last-Modified or Header-expires in header as string. 

I found the issue in below code it try to convert string Wed, 31 Dec 1969 18:00:00 CS to Date and it fails. Is it posible to convert String Date without knowing Date format?


DefaultRestletBinding
=======================



 if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) {
                if (value instanceof Calendar) {
                    message.getEntity().setModificationDate(((Calendar) value).getTime());
                } else if (value instanceof Date) {
                    message.getEntity().setModificationDate((Date) value);
                } else {
                    Date date = exchange.getContext().getTypeConverter().mandatoryConvertTo(Date.class, value); //  Here it try to convert String to Date it throws No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CS
                    message.getEntity().setModificationDate(date);
                }
            }

Stack trace
===========

7 Oct 2012 08:28:06,010 WARN org.restlet.Component.StatusFilter - Exception or error caught in status service
org.apache.camel.RuntimeCamelException: Cannot process request
        at org.apache.camel.component.restlet.RestletConsumer$1.handle(RestletConsumer.java:62)
        at org.apache.camel.component.restlet.MethodBasedRouter.handle(MethodBasedRouter.java:54)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.engine.application.StatusFilter.doHandle(StatusFilter.java:154)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.engine.ChainHelper.handle(ChainHelper.java:114)
        at org.restlet.Component.handle(Component.java:391)
        at org.restlet.Server.handle(Server.java:491)
        at org.restlet.engine.ServerHelper.handle(ServerHelper.java:75)
        at org.restlet.engine.http.HttpServerHelper.handle(HttpServerHelper.java:153)
        at org.restlet.ext.servlet.ServerServlet.service(ServerServlet.java:1031)
        at org.apache.shiro.grails.SavedRequestFilter.doFilter(SavedRequestFilter.java:56)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:360)
        at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:276)
        at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
        at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
        at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:344)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:272)
        at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)
        at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CST
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:169)
",,amit1000,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,249454,,,Thu Oct 18 16:39:38 UTC 2012,,,,,,,,,,,"0|i0ael3:",58636,,,,,,,,,,,,,,,,,,,,"18/Oct/12 05:12;davsclaus;Yes that date should be parsed in RFC 2822 format accordingly to:
http://en.wikipedia.org/wiki/List_of_HTTP_header_fields;;;","18/Oct/12 05:36;davsclaus;Thanks for reporting.;;;","18/Oct/12 16:39;amit1000;When are you planning to release 2.11.0?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBuilder should be thread safe,CAMEL-5707,12612032,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Oct/12 13:42,16/Oct/12 13:47,14/Jul/23 05:45,16/Oct/12 13:47,2.10.0,2.9.0,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,In high concurrent tests the NotifyBuilder may miss a counter.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,248984,,,2012-10-16 13:42:11.0,,,,,,,,,,,"0|i0a3af:",56806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Split inside Split - Parallel processing issue - Thread is getting wrong Exchange when leaving inner split ,CAMEL-5704,12611766,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gill3s,gill3s,14/Oct/12 19:09,23/Sep/13 20:14,14/Jul/23 05:45,17/Oct/12 13:12,2.9.3,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"A small JUnit recreation case is attached.
When using embedded split inside a split with parallel processing, threads are getting a wrong exchange (or wrong exchange copy) just after leaving the inner split and returning to the parent split.

In the test case, we split a file by comma in a parent split (Block split), then by line separator in inner split (Line Split). 
We expect 2 files in output, each of them containing the respective Blocks.

However, once inner split is complete, each thread is supposed to add a 11th line in the result(i).txt file saying split(i) is complete.  
Bug is that one of the thread ends up with parent split Exchange (copy?) from the other thread, and appends wrong information into the wrong file.

Expected:
---------
(result0.txt)
Block1 Line 1:Status=OK
Block1 Line 2:Status=OK
Block1 Line 0:Status=OK
Block1 Line 4:Status=OK
Block1 Line 3:Status=OK
Block1 Line 8:Status=OK
Block1 Line 5:Status=OK
Block1 Line 6:Status=OK
Block1 Line 7:Status=OK
Block1 Line 9:Status=OK
0 complete

(result1.txt)
Block2 Line 0:Status=OK
Block2 Line 3:Status=OK
Block2 Line 1:Status=OK
Block2 Line 2:Status=OK
Block2 Line 6:Status=OK
Block2 Line 4:Status=OK
Block2 Line 7:Status=OK
Block2 Line 9:Status=OK
Block2 Line 5:Status=OK
Block2 Line 8:Status=OK
1 complete

Actual:
-------
(result0.txt)
Block1 Line 1:Status=OK
Block1 Line 2:Status=OK
Block1 Line 0:Status=OK
Block1 Line 4:Status=OK
Block1 Line 3:Status=OK
Block1 Line 8:Status=OK
Block1 Line 5:Status=OK
Block1 Line 6:Status=OK
Block1 Line 7:Status=OK
Block1 Line 9:Status=OK
0 complete0 complete

(result1.txt)
Block2 Line 0:Status=OK
Block2 Line 3:Status=OK
Block2 Line 1:Status=OK
Block2 Line 2:Status=OK
Block2 Line 6:Status=OK
Block2 Line 4:Status=OK
Block2 Line 7:Status=OK
Block2 Line 9:Status=OK
Block2 Line 5:Status=OK
Block2 Line 8:Status=OK


This issue exist in 2.8.x, and probably in 2.10.x as well.
This is a Splitter/MulticastProcessor or Pipeline issue but not quite familiar with the code, I am having hard time tracking it. ","java version ""1.6.0_35""
Java(TM) SE Runtime Environment (build 1.6.0_35-b10-428-11M3811)
Java HotSpot(TM) 64-Bit Server VM (build 20.10-b01-428, mixed mode)

MacOsX 10.7.5

URL: https://svn.apache.org/repos/asf/camel/branches/camel-2.9.x
Repository Root: https://svn.apache.org/repos/asf
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 1396229
Node Kind: directory
Schedule: normal
Last Changed Author: dkulp
Last Changed Rev: 1396218
Last Changed Date: 2012-10-09 21:36:47 +0200 (Tue, 09 Oct 2012)
",gill3s,njiang,,,,,,,,,,,,,,,,,,CAMEL-6771,,,,,,,,,,,,,"14/Oct/12 19:11;gill3s;FileSplitInSplitTest.java;https://issues.apache.org/jira/secure/attachment/12549083/FileSplitInSplitTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,248578,,,Tue Oct 16 14:06:57 UTC 2012,,,,,,,,,,,"0|i09w5z:",55652,,,,,,,,,,,,,,,,,,,,"16/Oct/12 14:06;njiang;The issue is caused by when exchange copy, it doesn't do the deep copy on the map property, and it will cause some side effect on the MulticastProcessor's setAggregationStrategyOnExchange. 
It can be resolve by creating a new map when calling the setAggregationStrategyOnExchange.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFormatter throws a NPE when all elements are disabled,CAMEL-5699,12611207,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,raulvk,raulvk,10/Oct/12 17:21,29/Nov/12 11:33,14/Jul/23 05:45,29/Nov/12 11:33,2.10.1,2.9.3,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"There are perfectly valid cases where you may want to output a log message with no elements displayed, i.e. with showExchangeId=false, showBody=false, etc.

For example, when you want to print a ""signal"" log line for a particular transaction and you're already using MDC logging with breadcrumbs enabled. You may already have all the info you need: logging category, severity, breadcrumbId. You are not interested in anything else.

Currently, disabling all elements leads to a NPE.",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,247022,,,Thu Nov 29 11:33:10 UTC 2012,,,,,,,,,,,"0|i07xzz:",44275,,,,,,,,,,,,,,,,,,,,"22/Nov/12 11:29;davsclaus;Raul are you working on fixing this?

We want to cut new releases in near term, so either we need to fix or defer tickets,;;;","29/Nov/12 11:33;davsclaus;Fixing known bugs before we cut releases soon.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Should also allow multiple consumers from multiple routes from the same queue,CAMEL-5694,12610940,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/12 07:18,09/Oct/12 07:41,14/Jul/23 05:45,09/Oct/12 07:41,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,0,,,,,,,,,"If having 2+ routes that consumes from the same queue, then that should be allowed.

Its a bit unusual though for queues in Camel as you most likely want to use the same route for the same queue. But there is nothing in the JMS spec that forbids this.

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,245924,,,2012-10-09 07:18:27.0,,,,,,,,,,,"0|i07e5r:",41060,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp - Consumer error handling is not correct,CAMEL-5693,12610838,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Oct/12 16:04,08/Oct/12 16:56,14/Jul/23 05:45,08/Oct/12 16:56,,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-smpp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-SMPP-Consumer-error-handling-tp5720516.html

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,245579,,,Mon Oct 08 16:56:20 UTC 2012,,,,,,,,,,,"0|i06btj:",34848,,,,,,,,,,,,,,,,,,,,"08/Oct/12 16:56;davsclaus;Now unhandled exceptions gets propagated back to the smpp library for it to deal with.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"While stopping, the QuickfixjEngine should unregister the MBean being registered for the Initiator at startup.",CAMEL-5686,12610553,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,05/Oct/12 12:21,05/Oct/12 12:36,14/Jul/23 05:45,05/Oct/12 12:36,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-quickfix,,,,0,,,,,,,,,,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,243014,,,2012-10-05 12:21:02.0,,,,,,,,,,,"0|i035pb:",16357,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS connection leak with request/reply producer on temporary queues,CAMEL-5683,12610112,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mpilone,mpilone,03/Oct/12 17:37,02/May/13 02:29,14/Jul/23 05:45,07/Oct/12 06:39,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,0,,,,,,,,,"Over time I see the number of temporary queues in ActiveMQ slowly climb. Using JMX information and memory dumps in MAT, I believe the cause is a connection leak in Apache Camel.

My environment contains 2 ActiveMQ brokers in a network of brokers configuration. There are about 15 separate applications which use Apache Camel to connect to the broker using the ActiveMQ/JMS component. The various applications have different load profiles and route configurations.

In the more active client applications, I found that ActiveMQ was listing 300+ consumers when, based on my configuration, I would expect no more than 75. The vast majority of the consumers are sitting on a temporary queue. Over time, the 300 number increments by one or two over about a 4 hour period.

I did a memory dump on one of the more active client applications and found about 275 DefaultMessageListenerContainers. Using MAT, I can see that some of the containers are referenced by JmsProducers in the ProducerCache; however I can also see a large number of listener containers that are no longer being referenced at all. I was also able to match up a soft-references producer/listener endpoint with an unreferenced listener which means a second producer was created at some point.

Looking through the ProducerCache code, it looks like the LRU cache uses soft-references to producers, in my case a JmsProducer. This seems problematic for two reasons:
- If memory gets constrained and the GC cleans up a producer, it is never properly stopped.
- If the cache gets full and the map removes the LRU producer, it is never properly stopped.

What I believe is happening, is that my application is sending a few request/reply messages to a JmsProducer. The producer creates a TemporaryReplyManager which creates a DefaultMessageListenerContainer. At some point, the JmsProducer is claimed by the GC (either via the soft-reference or because the cache is full) and the reply manager is never stopped. This causes the listener container to continue to listen on the temporary queue, consuming local resources and more importantly, consuming resources on the JMS broker.

I haven't had a chance to write an application to reproduce this behavior, but I will attach one of my route configurations and a screenshot of the MAT analysis looking at DefaultMessageListenerContainers. If needed, I could provide the entire memory dump for analysis (although I rather not post it publicly). The leak depends on memory usage or producer count in the client application because the ProducerCache must have some churn. Like I said, in our production system we see about 12 temporary queues abandoned per client per day.

Unless I'm missing something, it looks like the producer cache would need to be much smarter to support stopping a producer when the soft-reference is reclaimed or a member of the cache is ejected from the LRU list.

","Apache Camel 2.10.0
ActiveMQ 5.6.0
Spring 3.2.1.RELEASE
Java 1.6.0_27
SunOS HOST 5.10 Generic_144488-09 sun4v sparc SUNW,SPARC-Enterprise-T5220",davsclaus,mpilone,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5688,"05/Oct/12 14:00;mpilone;CamelConnectionLeak-ProducerTemplate.zip;https://issues.apache.org/jira/secure/attachment/12547978/CamelConnectionLeak-ProducerTemplate.zip","04/Oct/12 16:45;mpilone;CamelConnectionLeak.zip;https://issues.apache.org/jira/secure/attachment/12547781/CamelConnectionLeak.zip","03/Oct/12 17:45;mpilone;Consumer List.txt;https://issues.apache.org/jira/secure/attachment/12547567/Consumer+List.txt","03/Oct/12 17:40;mpilone;MAT Snapshot.png;https://issues.apache.org/jira/secure/attachment/12547565/MAT+Snapshot.png","03/Oct/12 17:45;mpilone;Route Configuration.txt;https://issues.apache.org/jira/secure/attachment/12547566/Route+Configuration.txt",,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,240495,,,Tue Oct 09 12:40:36 UTC 2012,,,,,,,,,,,"0|i0120v:",4094,,,,,,,,,,,,,,,,,,,,"03/Oct/12 17:40;mpilone;Attached screenshot from MAT analysis.;;;","03/Oct/12 17:45;mpilone;Attached the route configuration for the JMS client application being analyzed.

Attached the list of consumers as ActiveMQ sees it for the client application being analyzed.;;;","04/Oct/12 16:45;mpilone;I attached a test case which reproduces the problem. The test case has 3 JMS request/reply routes. It runs in a loop, sending a message, consuming a bunch of memory, then sending another message. As the GC starts to run, the producer on route 2 is reclaimed and a consumer is leaked. Instructions for running it are in the LeakMain class.;;;","04/Oct/12 16:46;mpilone;It would be great to get a work-around for this. As of now, we have to restart our services every couple of days to keep them from exhausting ActiveMQ resources with hundreds of temporary queues.;;;","04/Oct/12 20:53;raulvk;Michael,

Many thanks for such a detailed description, test case and bug report!

Have you tried setting the size of the ProducerCache to zero? Check [1] for instructions on how to do this. Beware I haven't tested it, it's just a suggestion for a workaround. If you have static endpoint URIs, then I don't think you should experience any churn or performance hit by having a non-existent ProducerCache. 

Regards,
Raúl.

[1] http://camel.apache.org/how-do-i-configure-the-default-maximum-cache-size-for-producercache-or-producertemplate.html;;;","05/Oct/12 01:36;mpilone;Raul, thanks for the suggestion. I gave it a try but it didn't work. I set a few breakpoints and found that the configuration of my test case creates the ProducerCache in SendProcessor.java line 152. The cache is hard coded to a size of 1.

If you then set a breakpoint in ProducerCache.java line 385 where the producer is created using the endpoint, you can see that the producer is occasionally no longer in the cache and must be recreated which means it must have been reclaimed via a GC soft-reference.;;;","05/Oct/12 07:33;davsclaus;Yeah it does not make so much sense to use a producer cache in the send processor as its a single producer based. So if we just store the Producer as a strong reference then there is no issue like this.;;;","05/Oct/12 08:56;davsclaus;I have committed a fix on trunk, and backporting to 2.10 and 2.9 branches.
You are welcome to give those a try.;;;","05/Oct/12 13:18;mpilone;Claus, thanks for the quick fix. I'll try building the source and verifying the fix. Your change in the SendProcessor looks like it will solve my problem but doesn't the problem still exist if I was using the DefaultProducerTemplate? I could probably hack my test case to use the template rather than a gateway proxy and route configuration and I think Camel would continue to leak listeners.

For example, the sample documentation for ProducerTemplate shows:
{quote}
ProducerTemplate template;
// send to default endpoint
template.sendBody(""<hello>world!</hello>"");
// send to a specific queue
template.sendBody(""activemq:MyQueue"", ""<hello>world!</hello>"");
{quote}

The second send to ActiveMQ, if it was request/reply, would put a JmsProducer in the ProducerCache with a listener/consumer which could/would later leak.
;;;","05/Oct/12 13:23;raulvk;Maybe we need to override the {{finalize()}} method of the JmsProducer (and review all other producers), but take a look at this post which suggests another approach: http://stackoverflow.com/questions/1638859/gracefully-finalizing-the-softreference-referent.;;;","05/Oct/12 13:59;mpilone;I compiled the code from the 2.10.x branch and confirmed that your change does appear to fix the issue when using the SendProducer. However I also confirmed my previous comment that the problem still exists when using the DefaultProducerTemplate (or any other code that uses the ProducerCache with the LRU map implementation). I'll attach an update test case which uses the ProducerTemplate to reproduce the problem. The current cache implementation is going to be a problem with any producer that requires a stop call to properly cleanup.

You might want to look at modifying the ProducerCache to support a ReferenceQueue with the SoftReferences. Then the ProducerCache could drain the queue and stop all the reclaimed producers before creating a new producer.

Even with that fix, it might be a good idea to have an easy way (e.g. via a context property) to disable the soft-references in the cache and rely only on max cache size. If I know I'm only going to have 3 or 4 producers but a lot of memory churn, it would be nice to know that my producers would stay in the cache until I completely fill it. This could be really valuable if producer construction/teardown were expensive.;;;","05/Oct/12 14:00;mpilone;Reopening because the problem still exists when using the ProducerTemplate (or anything else using the ProducerCache).;;;","05/Oct/12 14:00;mpilone;Attached an updated test case that shows the same problem when using the ProducerTemplate.;;;","05/Oct/12 14:11;mpilone;Raul, I agree. I need to refresh my page before commenting :)

The more I think about it the trickier the problem gets. Using the ReferenceQueue on the SoftReferences would help cleanup producers in the GC case, but you would need to make sure the cache also handles the case where the LRU item is evicted when the capacity is reached. In the eviction case, there is no ReferenceQueue to hold the item for later cleanup.

It might make sense to remove the SoftReference support and just keep the LRU/capacity behavior. Then add a listener interface or ""evicted queue"" to the LRU hashmap to collect items (i.e. producers) that have been evicted and are pending cleanup. It seems like the use of SoftReferences undermines the LRU concept because the GC is deciding when to collect it rather than letting the map track the last used time. In theory the GC is supposed to be bias against SoftRef collection but it seems pretty aggressive from my simple tests. 

Something like java.util.LinkedHashMap gives you a removeEldestEntry method which would be a nice place to hook in producer shutdown code and avoids these problems.;;;","05/Oct/12 15:15;raulvk;Beware that the LRU and the cleanup of the SoftReferences kick in at different times. They cater for different situations:

- LRU logic is valuable when your recipientList can generate many, many different producers. In a hypothetical case, if there are 2000 users and each user has a dedicated JMS topic where you want to publish messages to from your Camel route, you may end up with 2000 items in the ProducerCache, even if 1000 users are no longer active. The LRU allows Camel to vacuum potentially irrelevant producers. There is a max. producer cache size you can set to control the threshold.

- SoftReferences are valuable in near-OOM situations. It allows the JVM to 'intelligently' dispose of objects that can be recreated later, once the memory exhaustion subsides. 

Both functionalities are thus valuable. We just need to address the memory leak in SoftReferences perhaps by using finalize().;;;","05/Oct/12 16:04;mpilone;I can understand the need for the two different mechanisms, but I'd suggest that you find an approach where both the ReferenceQueue from collected SoftRef and the LRU evictions end up in the same place to support producer shutdown. Maybe the LRU evictions could be put on the same reference queue.

Using finalizers means that each stateful producer needs to properly implement a finalizer and ensure that it is safe to call it even if the producer was properly stopped previously. This seems like you're asking for trouble given the number of disparate producer implementations. Because you already have an API/mechanism for stopping producers, you just want to make sure the cache uses that mechanism in all automatic cache removal cases. Just my opinion though. ;;;","06/Oct/12 07:07;davsclaus;The DefaultProducerTemplate constructor allows you to pass in your own map cache, so you can just pass in the LRUCache (not the soft) or use a unlimited cache etc.;;;","06/Oct/12 14:03;davsclaus;The LRUCache now stops the service when evicting the entry.;;;","06/Oct/12 14:08;davsclaus;1)
I think it may make sense to let the DefaultProducerTemplate / DefaultConsumerTemplate uses a non soft cache (eg just LRUCache) as they are created by end users, and thus they would be able to control this. For example they can lower the cache size to reduce memory occupation if using a lot of different producers. And now the elements that gets evicted will be stopped as well.

2)
Then there is some internal caches in Camel such as some based on Class/Method introspections which can safely be soft/weak based, as there is no ""stop"" logic needed.

3)
Whether some of the EIPs which uses a ProducerCache should be non-soft based; we can take a look. It may make sense. 
;;;","07/Oct/12 06:38;davsclaus;I have committed a fix for 1+2+3, so we use a non-soft cache for the producer/consumer caches in Camel. And they are stopped on eviction as well.

Michael, fell free to give it a test run.;;;","09/Oct/12 12:40;mpilone;I ran 2.10.2-SNAPSHOT through my test cases and everything looks good. Thanks for your attention to the matter and a good, complete solution. Now I just need to decide if I want to run with a SNAPSHOT in production or wait for 2.10.2 final!;;;",,,,,,,,,
"possible NullPointerException in org.apache.camel.util.ObjectHelper.getCamelPropertiesWithPrefix(prefix, camelContext)",CAMEL-5682,12610096,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ski309,ski309,03/Oct/12 16:30,05/Oct/12 12:41,14/Jul/23 05:45,05/Oct/12 07:19,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"If the camel context's properties contain an entry set with a null key, and ObjectHelper.getCamelPropertiesWithPrefix(prefix, camelContext) is called, a NullPointerException will be thrown at line 659.","Linux, Spring 3.1.1, Karaf 2.2.4",davsclaus,ski309,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241551,,,Fri Oct 05 12:41:33 UTC 2012,,,,,,,,,,,"0|i028kn:",10990,,,,,,,,,,,,,,,,,,,,"05/Oct/12 07:19;davsclaus;Thanks for reporting.

Unlikely to happen as an end user would not store a property with a null key. That does not make sense.

But added a null check in the source code.;;;","05/Oct/12 12:41;ski309;Definitely unlikely to happen.  I only found the error because I messed up a property in my context's xml-based setup that led to the code adding a property with a null key.  It might be a good idea to prohibit properties with null keys from being added to the context.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using recipient list in a doTry ... doCatch situation dont work properly,CAMEL-5681,12610094,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Oct/12 16:21,06/Oct/12 06:19,14/Jul/23 05:45,06/Oct/12 06:19,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-with-doTry-doCatch-not-routing-correctly-tp5720325.html

The end user would expect that doTry .. doCatch will overrule. However it gets a bit further more complicated if the try block routes to other routes and using EIPs such as recipient list.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5024,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,240686,,,Wed Oct 03 16:31:30 UTC 2012,,,,,,,,,,,"0|i014nz:",4525,,,,,,,,,,,,,,,,,,,,"03/Oct/12 16:31;davsclaus;CAMEL-5024 changed behavior. The fix is IMHO wrong.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stopping and starting a seda consumer leaks a thread each time,CAMEL-5677,12609974,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,02/Oct/12 20:15,03/Oct/12 11:26,14/Jul/23 05:45,03/Oct/12 11:25,,,,,,,,,,,,,2.10.2,2.11.0,2.8.7,2.9.4,,,,,0,,,,,,,,,"Just did something like this:

        for (int i = 0; i < 1000; i++) {
            context.stopRoute(""sedaToMock"");
            context.startRoute(""sedaToMock"");	        
        }      

and yeah, I had over 1000 threads in my JVM... not good :)",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,240207,,,Tue Oct 02 20:16:47 UTC 2012,,,,,,,,,,,"0|i00ygv:",3516,,,,,,,,,,,,,,,,,,,,"02/Oct/12 20:16;janstey;Running tests on this solution now:

{code}
[janstey@duffman camel-core (trunk)]$ git diff
diff --git a/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java b/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
index a21ab36..cbe23ac 100644
--- a/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
@@ -300,6 +300,13 @@ public class SedaConsumer extends ServiceSupport implements Consumer, Runnable,
 
     protected void doStop() throws Exception {
         endpoint.onStopped(this);
+        
+        // need to shutdown executor here as well or each time this endpoint is 
+        // started a new thread will be created
+        if (executor != null) {
+            endpoint.getCamelContext().getExecutorServiceManager().shutdownNow(executor);
+            executor = null;
+        }
     }
 
     @Override
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mqtt - Nullpointer Exception when disconnected from broker,CAMEL-5670,12609726,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,stefan.hudelmaier,stefan.hudelmaier,01/Oct/12 08:44,06/Oct/12 15:12,14/Jul/23 05:45,06/Oct/12 15:12,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,,,camel-mqtt,,,,0,,,,,,,,,"Hi, 

from time to time, we get the following exception when producing messages via camel-mqtt:

bq.
{code}
Caused by: java.lang.NullPointerException
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:551)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:545)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:166)
	at org.apache.camel.component.mqtt.MQTTProducer.doProcess(MQTTProducer.java:66)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:38)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
[...]
{code}

From looking at the source of both camel-mqtt and the fusesource mqtt client, it looks like that this is caused by the mqtt-client being disconnected and trying to invoke the onFailure method on the callback:

{code:title=CallbackConnection.java}
public void publish(UTF8Buffer topic, Buffer payload, QoS qos, boolean retain, Callback<Void> cb) {
        queue.assertExecuting();
        if( disconnected ) {
            cb.onFailure(createDisconnectedError());
            return;
        }
        PUBLISH command = new PUBLISH().qos(qos).retain(retain);
        command.topicName(topic).payload(payload);
        send(command, cb);
    }
{code}

camel-mqtt passes in null for the callback though. Wouldn't it be better if a more fitting exception were thrown, or if camel passed in a Callback in order to receive the onFailure event when disconnected from the broker?
",,davsclaus,stefan.hudelmaier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241541,,,Sat Oct 06 15:12:11 UTC 2012,,,,,,,,,,,"0|i028if:",10980,,,,,,,,,,,,,,,,,,,,"06/Oct/12 15:12;davsclaus;Thanks for reporting. A callback is now provided. I also polished the code and added a bit bitter logging etc.

And also made the mqtt producer leverage the async routing engine.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - A soap fault should trigger http response code 500,CAMEL-5668,12609676,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,30/Sep/12 09:55,08/Oct/12 02:00,14/Jul/23 05:45,08/Oct/12 02:00,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jetty,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Help-with-nmr-cxf-endpoints-and-fault-handling-tp5719720.html

If a response is fault=true, then we should force the http response code to be 500. Which is what the SOAP 1.1 spec mandates.

See section 6.2 at: http://www.w3.org/TR/soap11/#_Ref477795996",,davsclaus,jwcarman,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Oct/12 02:12;jwcarman;CAMEL-5668.patch;https://issues.apache.org/jira/secure/attachment/12547191/CAMEL-5668.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241539,,,Mon Oct 08 02:00:53 UTC 2012,,,,,,,,,,,"0|i028hz:",10978,,,,,,,,,,,,,,,,,,,,"01/Oct/12 01:39;jwcarman;I believe this is reported against the wrong component.  The issue actually lies within the HTTP component in the DefaultHttpBinding class.;;;","01/Oct/12 01:55;jwcarman;Here's a patch that implements what I think you're looking for.  I should probably add a test in the http component also, since that's where the actual code change takes place.;;;","01/Oct/12 02:12;jwcarman;Here's another patch that patches both the http and http4 components.;;;","01/Oct/12 02:14;jwcarman;We should really think about consolidating this code.  There are some value-adds in the http component that aren't in the http4 component.  They're virtually the same exact code.  There has to be a way to extract a superclass from this and create some abstract supermodule that they can both reference.;;;","01/Oct/12 02:41;njiang;@James,
Yes, we need to share these code in a common http module to avoid updating the code in camel-http and camel-http4 modules.;;;","01/Oct/12 03:33;njiang;Applied the patch with thanks to James, I also fix the test errors of camel-jetty caused by this change.;;;","01/Oct/12 18:06;jwcarman;Sorry about introducing the test failure.  I saw that late last night and didn't have time to fix it.  ;;;","08/Oct/12 02:00;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Should add check for bean scope in bean injector,CAMEL-5663,12609517,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/12 09:49,28/Sep/12 09:54,14/Jul/23 05:45,28/Sep/12 09:54,,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-blueprint,,,,0,,,,,,,,,"This check is missing.

Which mean that prototype scoped bean would have been regarded as singleton by Camel.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241535,,,2012-09-28 09:49:52.0,,,,,,,,,,,"0|i028h3:",10974,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient list EIP - Should shutdown thread pool if parallel mode enabled,CAMEL-5657,12609395,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Sep/12 14:15,27/Sep/12 14:20,14/Jul/23 05:45,27/Sep/12 14:20,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,eip,,,0,,,,,,,,,"We should shutdown the thread pool for recipient list if a pool was in use, and it can be shutdown.

The logic in doShutdown is missing that.

Camel would though have a fail-safe when it shutdown itself to shutdown that pool otherwise. But we should shutdown when the EIP is shutdown itself.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241529,,,2012-09-27 14:15:09.0,,,,,,,,,,,"0|i028fr:",10968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Endpoint ignores camelContextId property in Spring configuration,CAMEL-5655,12609372,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,27/Sep/12 10:02,27/Sep/12 11:40,14/Jul/23 05:45,27/Sep/12 11:40,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-blueprint,camel-spring,,,0,camelContextId,endpoint,spring,,,,,,"Camel Endpoint, if configured outside camelContext element in Spring configuration, ignores camelContextId property. 

Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two  endpoints outside camelContext, but with camelContextId specified. Both endpoints will be created pointing to the same (first) camel context, despite being configured to different contexts. Attempting to use them by reference results in failure, as endpoint camelContext doesn't match the expected one.",,davsclaus,koscejev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Sep/12 11:11;koscejev;CAMEL-5655.zip;https://issues.apache.org/jira/secure/attachment/12546846/CAMEL-5655.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241527,,,Thu Sep 27 11:40:16 UTC 2012,,,,,,,,,,,"0|i028fb:",10966,,,,,,,,,,,,,,,,,,,,"27/Sep/12 10:52;davsclaus;Can you post a sample.;;;","27/Sep/12 11:10;davsclaus;Thanks I have the issue reproduced;;;","27/Sep/12 11:11;koscejev;Attached a test suite. It fails to create ApplicationContext (not on assert). Proxy requests an endpoint by reference, which is found in Spring ApplicationContext, but with a different CamelContext specified.;;;","27/Sep/12 11:40;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hbase producer should be able to perform get with just the id as a header,CAMEL-5653,12609327,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,27/Sep/12 00:36,27/Sep/12 18:43,14/Jul/23 05:45,27/Sep/12 18:43,2.10.0,2.10.1,,,,,,,,,,,2.10.2,2.11.0,,,camel-hbase,,,,0,,,,,,,,,"In many cases the user would specify the families/columns of interest as part of the uri and then just specify the row id as part of the headers.

The way it currently works, it requires at least one family/column along with the row id as part of the headers.",,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241525,,,Thu Sep 27 18:43:34 UTC 2012,,,,,,,,,,,"0|i028ev:",10964,,,,,,,,,,,,,,,,,,,,"27/Sep/12 18:43;iocanel;Committed to trunk and 2.10.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EIPs using custom aggregation strategy should fail if not possible to find in registry,CAMEL-5647,12608979,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/12 07:37,25/Sep/12 11:36,14/Jul/23 05:45,25/Sep/12 11:36,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,eip,,,0,,,,,,,,,"Some EIPs support using a custom aggregations strategy. And if you use XML DSL to refer to a custom strategy, then you may have typo, or the strategy do not implement the interface.

What we should do is to ensure to fail if the custom strategy could not be looked up. 

Some EIPs such as the content enricher will fallback and use a default strategy. This is wrong.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241519,,,2012-09-25 07:37:16.0,,,,,,,,,,,"0|i028dj:",10958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean component - Should use try conversion when choosing method based on parameter type matching,CAMEL-5644,12608835,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/12 08:41,24/Sep/12 09:05,14/Jul/23 05:45,24/Sep/12 09:05,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"When the bean component has to pick among overloaded methods, then it does best matching on parameter types etc.

We should relax the type conversion to try attempt.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241516,,,Mon Sep 24 08:43:03 UTC 2012,,,,,,,,,,,"0|i028cv:",10955,,,,,,,,,,,,,,,,,,,,"24/Sep/12 08:43;davsclaus;For example the replace overloaded method on java.lang.String, has changed order between java6 and 7.
Which causes Camel to try the char based types on java7 first, where as on java6 it was the string based parameters.

Running the SimpleTest demonstrates this on Java7
{code}
testBodyOgnlReplace(org.apache.camel.language.simple.SimpleTest): Failed to invoke method: .replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: char with value Kamel is a cool Kamel due java.lang.IllegalArgumentException: String must have exactly a length of 1: Kamel is a cool Kamel
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsBinding Does Not Handle BigInteger and BigDecimal Properly,CAMEL-5641,12608743,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,jwcarman,jwcarman,22/Sep/12 11:41,22/Sep/12 18:05,14/Jul/23 05:45,22/Sep/12 17:18,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,0,patch,,,,,,,,"According to the documentation:

""The values must be primitives or their counter objects (such as
Integer, Long, Character). The types, String, CharSequence, Date,
BigDecimal and BigInteger are all converted to their toString()
representation. All other types are dropped.""

So, it would seem that BigInteger should be toString()ed.  However, in
the JmsBinding class, we see the following code:

{code}
protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {
        if (headerValue instanceof String) {
            return headerValue;
        } else if (headerValue instanceof Number) {
            return headerValue;
        } else if (headerValue instanceof Character) {
            return headerValue;
        } else if (headerValue instanceof CharSequence) {
            return headerValue.toString();
        } else if (headerValue instanceof Boolean) {
            return headerValue;
        } else if (headerValue instanceof Date) {
            return headerValue.toString();
        }
        return null;
    }
{code}

Since BigInteger extends Number, it will merely return the instance
itself.","java version ""1.6.0_35""
Java(TM) SE Runtime Environment (build 1.6.0_35-b10-428-11M3811)
Java HotSpot(TM) 64-Bit Server VM (build 20.10-b01-428, mixed mode)",jwcarman,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Sep/12 11:48;jwcarman;CAMEL-5641.patch;https://issues.apache.org/jira/secure/attachment/12546160/CAMEL-5641.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241513,,,Sat Sep 22 18:05:43 UTC 2012,,,,,,,Patch Available,,,,"0|i028c7:",10952,,,,,,,,,,,,,,,,,,,,"22/Sep/12 11:48;jwcarman;Fix with test case.;;;","22/Sep/12 17:18;muellerc;Thanks for reporting and providing the patch James. I only did two small modifications to pass our Checkstyle checks. You can read more about it here [1].
It's now fixed. Do you consider to test the SNAPSHOT's whether your fix works for you? ;-)

[1] http://camel.apache.org/building.html;;;","22/Sep/12 18:05;jwcarman;I'm going to run the build in my local Jenkins server.  I'll grab the snapshot once it's done.  Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Enricher with async routing not handling exceptions thrown from AggregationStrategy,CAMEL-5636,12608688,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,21/Sep/12 20:07,20/Oct/12 16:47,14/Jul/23 05:45,25/Sep/12 21:44,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"The Enricher does not handle exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. It leads to the following thread dump, callback thread remains blocked forever.

{code}
""Camel (context) thread #10 - JmsConsumer[queue]"" daemon prio=5 tid=103666000 nid=0x113c25000 waiting on condition [113c24000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <7fd4a8de0> (a java.util.concurrent.CountDownLatch$Sync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:120)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:680)
{code}

",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241508,,,Sat Oct 20 16:47:18 UTC 2012,,,,,,,,,,,"0|i028b3:",10947,,,,,,,,,,,,,,,,,,,,"22/Sep/12 08:26;davsclaus;Its not the jms consumer that is the problem. Its the async routing engine that waits for a reply that is not coming back. Are you using any custom components. 

And as always upgrade your Camel version to see if its fixed, eg Camel 2.8.0 is an old release.;;;","25/Sep/12 21:23;raulvk;I didn't have time to investigate as soon as I found this issue, so I just shoved it in JIRA to keep track of it. As you suggested, it has nothing to do with the JMS consumer, but rather with the Enricher processor not treating unhandled exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. On the other hand, synchronous routing is handled properly.

Changing the summary and description of the ticket to match the real situation.;;;","25/Sep/12 21:45;raulvk;Fixed in trunk, camel-2.10.x and camel-2.9.x.;;;","26/Sep/12 06:07;davsclaus;Raul, do you mind double checking the other EIPs that use an AggregationStrategy, which may thrown an exception as well? For example there is also a PollEnricher, WireTap etc. We may have a flaw in one of them as well.;;;","20/Oct/12 16:47;raulvk;Hey Claus,

Checked the following EIPs which reference {{AggregationStrategy}}:
* Splitter
* Recipient list
* Poll Enrich
* Multicast
* Aggregate

All clear.

Regards,
Raúl.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"ObjectHelper.resolveUriPath is broken, can not handle:  '../../' correctly",CAMEL-5632,12608620,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,poker_jocke,poker_jocke,21/Sep/12 13:00,22/Sep/12 09:44,14/Jul/23 05:45,22/Sep/12 09:44,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"In my xsl-files I have imports and includes that resides in folders a few levels up.

Ex:  

<xsl:include href=""../../common/myfunctions.xsl""/>

When camel starts up and tries to resolve the paths it crashes because of the current implementation in ObjectHelper.resolveUriPath(..)


Made a simple testcase that demonstrates my problem.




{code}
public void testResolveUriPath() throws Exception {
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../""));         //  OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../two/../""));  // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/""));                // OK
        assertEquals("""", ObjectHelper.resolveUriPath(""./""));                        // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../../""));  // Fails, gives 'xslt/one/.'
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../.././""));// Fails, gives 'xslt/one/.'
    }
{code}","Mac os x 10.8.1
Java 1.7.0_07",davsclaus,poker_jocke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241505,,,Sat Sep 22 09:44:51 UTC 2012,,,,,,,,,,,"0|i028af:",10944,,,,,,,,,,,,,,,,,,,,"22/Sep/12 08:33;davsclaus;This is a regression introduce by CAMEL-5321;;;","22/Sep/12 09:44;davsclaus;Also fixed an issue with using multiple back paths, eg ""../../../foo"";;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
EventHelper.notifyRouteStarted skips all remaining notifiers if one if the notifiers ignores route events,CAMEL-5631,12608431,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,frank.schoenheit,frank.schoenheit,20/Sep/12 11:18,21/Oct/12 18:16,14/Jul/23 05:45,22/Sep/12 16:55,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"Having two or more notifiers registered at the management strategy of a camel context, where one of the notifiers (not the last one) is set up to ignore route events, results in all remaining notifiers to be skipped when notifying a RouteStartedEvent.

Look at http://svn.apache.org/viewvc/camel/branches/camel-2.10.x/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?revision=1340446&view=markup, line 237: There's a ""return"" which actually should be a ""continue"".

Note: CamelContextStoppingEvents are also affected.",,frank.schoenheit,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Sep/12 11:19;frank.schoenheit;EventHelperTest.java;https://issues.apache.org/jira/secure/attachment/12545885/EventHelperTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241504,,,Sun Oct 21 18:16:57 UTC 2012,,,,,,,,,,,"0|i028a7:",10943,,,,,,,,,,,,,,,,,,,,"20/Sep/12 11:19;frank.schoenheit;EventHelperTest.java contains a unit test exposing the problem.;;;","22/Sep/12 16:55;muellerc;Thanks for reporting Frank.
It's now fixed. Do you consider to test the current SNAPSHOT's to see whether it works for you?;;;","25/Sep/12 08:02;frank.schoenheit;Will do, probably today. Thanks for fixing.;;;","19/Oct/12 19:48;frank.schoenheit;Uhm, this ... ??slightly?? slipped for a number of reasons. Well, finally: It's fixed in 2.10.3-SNAPSHOT. Thank you.;;;","20/Oct/12 09:40;muellerc;It's fixed in 2.10.2 which is already released.;;;","21/Oct/12 18:16;frank.schoenheit;ops :);;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-zookeeper endpoints should not share the configuration ,CAMEL-5627,12608190,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Sep/12 03:40,19/Sep/12 13:50,14/Jul/23 05:45,19/Sep/12 13:50,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-zookeeper,,,,0,,,,,,,,,"User complains that  ""The URI parameters on my consumer endpoint seem to be affecting the behaviour of my producer endpoint."" If he has two zookeeper endpoint with different uri configuration in the different routes. 
You can find more information in this thread[1]
[1]http://camel.465427.n5.nabble.com/URI-parameters-for-one-Zookeeper-endpoint-are-contaminating-another-endpoint-td5719559.html",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241500,,,Wed Sep 19 13:50:46 UTC 2012,,,,,,,,,,,"0|i0289b:",10939,,,,,,,,,,,,,,,,,,,,"19/Sep/12 06:23;davsclaus;In some of the other Camel components that have a Configuration class (assuming its the same case here), we do a copy of it beforehand (using clone) in the createEndpoint method. I think we should do the same. See for example the MailComponent.;;;","19/Sep/12 13:50;njiang;Apply the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsToJmsTransactedSecurityTest in camel-jms fails every now and then,CAMEL-5626,12608169,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,raulvk,raulvk,19/Sep/12 00:12,19/Sep/12 23:09,14/Jul/23 05:45,19/Sep/12 23:09,2.11.0,,,,,,,,,,,,2.11.0,,,,camel-jms,,,,0,,,,,,,,,"Test {{JmsToJmsTransactedSecurityTest}} fails every now and then because of JMS message redelivery. When the entire test class is executed, it sometimes happens that the message that failed at {{testJmsSecurityFailure}} test method pops up in the assertions of {{testJmsSecurityOK}}. ",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241499,,,Wed Sep 19 23:09:27 UTC 2012,,,,,,,,,,,"0|i02893:",10938,,,,,,,,,,,,,,,,,,,,"19/Sep/12 23:09;raulvk;Resolved in r1387809. Test now consumes from the queue to remove the redelivered message before the method returns.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JettyHttpProducer should close the input stream when the exception is throw,CAMEL-5621,12607886,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/12 10:24,27/Sep/12 11:18,14/Jul/23 05:45,27/Sep/12 11:18,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jetty,,,,0,,,,,,,,,"User complains about there are lots of file is open when sending the input stream and getting the exception.
Here is the mail thread[1] is talking about it.
[1]http://camel.465427.n5.nabble.com/To-many-opened-files-td5719451.html ",,ay,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241494,,,2012-09-17 10:24:50.0,,,,,,,,,,,"0|i0287z:",10933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JUnit ConverterTest testFileToString() fails,CAMEL-5620,12607831,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,alanfoster,alanfoster,16/Sep/12 20:11,24/Sep/12 10:53,14/Jul/23 05:45,24/Sep/12 10:53,,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,tests,,,,0,,,,,,,,,The test fails on windows when there is a space in the folder structure,,alanfoster,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Sep/12 20:12;alanfoster;CAMEL-5620.patch;https://issues.apache.org/jira/secure/attachment/12545338/CAMEL-5620.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241493,,,Mon Sep 24 10:53:28 UTC 2012,,,,,,,Patch Available,,,,"0|i0287r:",10932,,,,,,,,,,,,,,,,,,,,"16/Sep/12 20:12;alanfoster;Patch supplied;;;","24/Sep/12 10:53;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Share properties configuration between CDI and CamelContext,CAMEL-5616,12607664,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,ldywicki,ldywicki,14/Sep/12 15:39,21/Sep/12 07:05,14/Jul/23 05:45,20/Sep/12 00:30,,,,,,,,,,,,,2.11.0,,,,camel-cdi,,,,0,,,,,,,,,"Apache DeltaSpike provides convenient way to inject configuration using @ConfigProperty value.
In ideal world @ConfigProperty injected by deltaspike should be same as configuration property visible from Camel Context.",,davsclaus,hadrian,ldywicki,,,,,,,,,,,,,,,,,,CAMEL-5422,,,,,,,,,DELTASPIKE-273,,,"19/Sep/12 15:07;ldywicki;CAMEL-5616-component.patch;https://issues.apache.org/jira/secure/attachment/12545741/CAMEL-5616-component.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241489,,,Fri Sep 21 07:05:15 UTC 2012,,,,,,,,,,,"0|i0286v:",10928,,,,,,,,,,,,,,,,,,,,"14/Sep/12 15:47;ldywicki;Proposed solution.;;;","18/Sep/12 21:37;ldywicki;New version of patch with null check.;;;","19/Sep/12 01:22;hadrian;Thanks Lukasz for patch;;;","19/Sep/12 06:14;davsclaus;Lukasz, does DeltaSpike supports resolving multiple properties in the same text?

The API on CamelContext supports resolving placeholders intermixed withe regular text (eg hence the name ending with ...s, and as stated in its javadoc, which maybe could be emphasized a bit on that part). An example would be a camel endpoint uri, eg
{code}
""ftp:{{myServer}}:{{port}}/foo/bar""
{code}
Then it resolves the 2 placeholders, myServer and port, returning lets say
{code}
""ftp:someserver.com:21/foo/bar""
{code}

If DeltaSpike cannot do that, then the patch is wrong; which I suspect is the case. 

You should integrate this on the component level instead. There is a PropertiesComponent that supports pluggable property resolver, that lookup a single property at a time. This is how we eg do it with blueprint. Take a look in camel-blueprint. 
;;;","19/Sep/12 08:31;ldywicki;Claus,
Way how the properties component is glued with context is one huge hack. PropertiesResolver API does not match CDI cases, it's influenced by spring property placeholder stuff (it was replacement for it so I'm not surprised it looks like original). In CDI you don't care about config location, whatever it is because config sources are automatically registered by cdi extension. You ask just about property to resolve (no access from API to grab all properties with names). Thus even if you will pass location of properties you would like to load nobody knows what to with it.;;;","19/Sep/12 08:40;davsclaus;Yeah that may be the case, but the patch is IMHO wrong if CDI does not support the mixed resolution which is that the API on CamelContext is *all* about. That API is not for a single property lookup by its key. 

To lookup by key, then use the properties component, not the CamelContext API.

If config location doesn't matter in CDI, then its simple to configure as you would set the location to ""cdi"", eg as we have for ""blueprint"" etc.

What you need to hook is the PropertiesParser so you can do your CDI lookup there. The java.util.Properties parameter will just be null in this case. Just as its not used in the camel-blueprint implementation.;;;","19/Sep/12 09:10;ldywicki;After extending deltaspike API we'll be able to implement custom properties resolver.;;;","19/Sep/12 15:07;ldywicki;Solution with custom properties component overriding PropertiesParser.;;;","20/Sep/12 00:30;hadrian;Patch using custom PropertiesParser applied. Thanks Lukasz, keep them coming.;;;","21/Sep/12 07:05;davsclaus;Lukasz

Yeah the current API is based on the needs back them for people to use placeholders with Spring and Camel. Later spring-dm and blueprint as well. 
It may be that in Camel 3.0 the property placeholder API could warrant an API in the spi package instead of being based on a Camel component.

Though a Camel component comes very natural to Camel, after all there is 100+ in the box. And for example the bean component could maybe have been implemented as a EIP instead as a service activator etc.

Lukasz, do you mind helping with documentation as well? I guess a few spots to add some details about this could be at:
- http://camel.apache.org/cdi
- http://camel.apache.org/properties
- http://camel.apache.org/using-propertyplaceholder.html;;;",,,,,,,,,,,,,,,,,,,,
camel-soap - Generates empty tag name if marshalling JAXB generated sources with no name in @XmlType,CAMEL-5615,12607660,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/12 15:18,14/Sep/12 15:27,14/Jul/23 05:45,14/Sep/12 15:27,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-soap,,,,0,,,,,,,,,"This can cause camel soap to marshal to XML which contains an empty tag name, causing the XML to be invalid.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241488,,,2012-09-14 15:18:06.0,,,,,,,,,,,"0|i0286n:",10927,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hl7 bundle should specify the mina version ,CAMEL-5610,12607546,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Sep/12 23:57,14/Sep/12 08:50,14/Jul/23 05:45,14/Sep/12 08:50,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,0,,,,,,,,,"As there could be different version of mina or mina2 exist in the OSGi platform, we need to specify the right version rang on camel-hl7 which has the dependency on the mina.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241483,,,Fri Sep 14 08:50:04 UTC 2012,,,,,,,,,,,"0|i0285j:",10922,,,,,,,,,,,,,,,,,,,,"14/Sep/12 08:50;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Validator component - Lock file on windows if input is file based and an validation failed occurred,CAMEL-5608,12607457,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/12 13:23,17/Oct/12 17:14,14/Jul/23 05:45,17/Oct/12 17:14,2.10.0,2.9.0,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Validator-component-onException-tp5717756.html

We should ensure the input stream gets closed in all accounts with the validator component.",,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241481,,,Wed Oct 17 15:39:06 UTC 2012,,,,,,,,,,,"0|i02853:",10920,,,,,,,,,,,,,,,,,,,,"26/Sep/12 10:49;bvahdat;Using WIN-XP I could not reproduce the problem and [asked the user|http://camel.465427.n5.nabble.com/Validator-component-onException-tp5717756p5719718.html] to provide more details however got no response til now.

Also given the route the user has provided @ the forum I don't think file renaming will be invoked at all, because he makes use of {{DirectConsumer}} and not {{FileConsumer}} so there's no reason why {{FileUtil.renameFile}} should kick-in!;;;","17/Oct/12 15:39;davsclaus;There may be another route that is picking up files.

I am adding some of the logic we have from xslt/xpath builders that also work with the various XML types / sources et all. And they have logic to ensure any input stream gets closed etc.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
sftp component: Cannot acquire read lock for files in sub directories if property recursive=true and readLock=changed,CAMEL-5605,12607450,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,basssjm,basssjm,13/Sep/12 12:54,18/Sep/12 10:43,14/Jul/23 05:45,17/Sep/12 15:58,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,,,camel-ftp,,,,0,,,,,,,,,"I use endpoint to consummer files from sftp:
<endpoint id=""sftp_server"" uri=""sftp://${server_path}?privateKeyFile=${sftp_key_path}&amp;localWorkDirectory=${tmp}&amp;idempotent=true&amp;idempotentRepository=#fileStore&amp;readLock=changed&amp;recursive=true&amp;filter=#myAntFilter&amp;fastExistsCheck=true"" />

And if file exist in the sub directory of ${server_path}, I get warning:
16:31:16,288 WARN  [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Cannot acquire read lock within 20000 millis. Will skip the file: GenericFile[qwe/rty/test.csv]


16:31:01,081 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Using fast exists to update file information for GenericFile[qwe/rty/test.csv]
16:31:01,082 TRACE [org.apache.camel.component.file.remote.SftpOperations] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) listFiles(inbox2/qwe/rty/test.csv)
16:31:01,148 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) List files inbox2/qwe/rty/test.csv found 1 files
16:31:01,149 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous last modified: 0, new last modified: 0
16:31:01,150 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous length: 0, new length: 0
16:31:01,151 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Exclusive read lock not granted. Sleeping for 5000 millis.


16:30:56,005 TRACE [org.apache.camel.component.file.remote.SftpConsumer] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Processing file: GenericFile[qwe/rty/test.csv]
16:30:56,007 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Waiting for exclusive read lock to file: GenericFile[qwe/rty/test.csv]
16:30:56,008 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Using fast exists to update file information for GenericFile[qwe/rty/test.csv]
16:30:56,010 TRACE [org.apache.camel.component.file.remote.SftpOperations] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) listFiles(inbox2/qwe/rty/test.csv)
16:30:56,078 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) List files inbox2/qwe/rty/test.csv found 1 files
16:30:56,079 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous last modified: -9223372036854775808, new last modified: 0
16:30:56,079 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Previous length: -9223372036854775808, new length: 0
16:30:56,080 TRACE [org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy] (Camel (camel-1) thread #0 - sftp://test@testserver/inbox2) Exclusive read lock not granted. Sleeping for 5000 millis.",,basssjm,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Sep/12 15:20;basssjm;SftpChangedExclusiveReadLockStrategy.patch;https://issues.apache.org/jira/secure/attachment/12545428/SftpChangedExclusiveReadLockStrategy.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241478,,,Mon Sep 17 15:58:30 UTC 2012,,,,,,,Patch Available,,,,"0|i0284f:",10917,,,,,,,,,,,,,,,,,,,,"17/Sep/12 15:58;davsclaus;Thanks for the patch. I did the same for the regular ftp as the name returned is the local name.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
http4 component should not assume the scheme by looking up the request address,CAMEL-5595,12607180,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Sep/12 06:05,17/Sep/12 07:03,14/Jul/23 05:45,17/Sep/12 07:03,2.9.3,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,0,,,,,,,,,,"There is an user complains the camel-http4 component doesn't work rightly behind a proxy when endpoint address is start with http4s[1].

 I just checked the code of camel-http4, it will try to setup the proxy schema to be https4 when the real address is start from https. That is not right. User should be able to define the scheme for the proxy himself.

[1]http://camel.465427.n5.nabble.com/Using-the-HTTP4-component-to-make-a-HTTPS-call-behinf-proxy-sever-tp5719105.html",njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241468,,,Mon Sep 17 07:03:59 UTC 2012,,,,,,,,,,,"0|i02827:",10907,,,,,,,,,,,,,,,,,,,,"17/Sep/12 07:03;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Logger Level is always at default level(""ERROR"") when error handler is LoggingErrorHandler",CAMEL-5592,12607166,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mfshen,mfshen,12/Sep/12 03:22,28/Sep/12 13:05,14/Jul/23 05:45,28/Sep/12 13:05,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"when logger level is set to other level (WARN, DEBUG or INFO) except for ERROR, but actually the log is always at ERROR level (it's the default level).",,davsclaus,mfshen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241465,,,Fri Sep 28 13:05:49 UTC 2012,,,,,,,,,,,"0|i0281j:",10904,,,,,,,,,,,,,,,,,,,,"12/Sep/12 05:43;davsclaus;Can you post your configuration of the logger error handler. And an example of what is being logged.;;;","12/Sep/12 08:41;mfshen;Please see the configuration of the logger error handler:
{noformat} 
routeBuilder = new org.apache.camel.builder.RouteBuilder() {
	public void configure() throws Exception {
		errorHandler(loggingErrorHandler().logName(
				""TestLoggingErrorHandler"").level(
				org.apache.camel.LoggingLevel.ERROR));
		from(uriMap.get(""Sender_cMessagingEndpoint_1""))
				.routeId(""Sender_cMessagingEndpoint_1"")
				.process(new org.apache.camel.Processor() {
					public void process(org.apache.camel.Exchange exchange) throws Exception {
						throw new java.lang.Exception(""This is specially generated java.lang.Exception exception"");
					}

				}).id(""cProcessor_1"");
	}
};
getCamelContexts().get(0).addRoutes(routeBuilder);
{noformat} 

BTW, about the urimap, please see below code.

protected void initUriMap() {
	uriMap = new java.util.HashMap<String, String>();
	uriMap.put(""Sender_cMessagingEndpoint_1"", ""timer:myTimer?repeatCount=1"");
}
;;;","28/Sep/12 13:05;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP data format doesn't close file input streams,CAMEL-5582,12606682,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sdanig,sdanig,07/Sep/12 21:16,11/Sep/12 06:51,14/Jul/23 05:45,09/Sep/12 08:24,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,, camel-crypto,,,,0,,,,,,,,,"The following route doesn't work on Windows:

{code}from(""file:foo"").marshal().pgp(...).to(""ftp:blah""){code}

The reason is that PGPDataFormat.marshal() and PGPDataFormat.unmarshal() both use IOUtils.toByteArray() to read the incoming stream into a byte array, but neither of these two methods closes the streams after they have been read from. My understanding is that not closing these streams prevents Camel from subsequently renaming the file once the route has completed. I've attached a sample stack trace at the bottom.

The following seems to fix the issue for me:

Replacing the following code in {{org.apache.camel.converter.crypto.PGPDataFormat.marshal(...)}}:

{code}InputStream plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);

byte[] compressedData = PGPDataFormatUtil.compress(IOUtils.toByteArray(plaintextStream),
        PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);{code}

With this code:

{code}byte[] plaintextData;
InputStream plaintextStream = null;
try {
    plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);
    plaintextData = IOUtils.toByteArray(plaintextStream);
} finally {
    IOUtils.closeQuietly(plaintextStream);
}

byte[] compressedData = PGPDataFormatUtil.compress(plaintextData, PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);{code}

And replacing the following code in {{org.apache.camel.converter.crypto.PGPDataFormat.unmarshal(...)}}:

{code}InputStream in = new ByteArrayInputStream(IOUtils.toByteArray(encryptedStream));
in = PGPUtil.getDecoderStream(in);{code}

With this code:

{code}InputStream in;
try {
    byte[] encryptedData = IOUtils.toByteArray(encryptedStream);
    InputStream byteStream = new ByteArrayInputStream(encryptedData);
    in = PGPUtil.getDecoderStream(byteStream);
} finally {
    IOUtils.closeQuietly(encryptedStream);
}{code}

And here's the stack trace mentioned above:

{code}org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\opt\connect\just\a\test\lax\blah.txt to C:\opt\connect\just\a\test\lax\.sent\blah.txt
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:72)
    at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:107)
    at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86)
    at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:132)
    at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82)
    at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53)
    at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55)
    at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226)
    at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199)
    at org.apache.camel.processor.UnitOfWorkProcessor.access$000(UnitOfWorkProcessor.java:37)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:157)
    at org.apache.camel.processor.RouteContextProcessor$1.done(RouteContextProcessor.java:56)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)
    at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
    at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
    at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
    at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
    at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336)
    at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189)
    at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155)
    at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:139)
    at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:91)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
    at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.IOException: Renaming file from: C:\opt\connect\just\a\test\lax\blah.txt to: C:\opt\connect\just\a\test\lax\.sent\blah.txt failed due cannot delete from file: C:\opt\connect\just\a\test\lax\blah.txt after copy succeeded
    at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:362)
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:70)
    ... 36 more{code}",Windows XP,davsclaus,sdanig,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,241455,,,Tue Sep 11 06:51:38 UTC 2012,,,,,,,,,,,"0|i027zb:",10894,,,,,,,,,,,,,,,,,,,,"09/Sep/12 08:24;davsclaus;Thanks for reporting.

The workaround is to convert the payload to a String before the marshal

from -> convertTo(String) -> marshal;;;","10/Sep/12 18:53;sdanig;Thanks for the hint! For binary files, would it be OK to convert to a byte[] instead?;;;","11/Sep/12 06:51;davsclaus;Yeah byte[] is good as well, eg .convertBodyTo(byte[].class);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
The RowModel Data does not include the correct cell value type and some minor changes.,CAMEL-5580,12606673,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ccorsi,ccorsi,07/Sep/12 20:54,09/Sep/12 08:42,14/Jul/23 05:45,09/Sep/12 08:42,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,,,camel-hbase,,,,0,camel-hbase,,,,,,,,"The hbase component create a row model from the passed endpoint configuration using the family/qualifier/etc information from the uri.  

This process currently does not extra the value type for value type n greater than 1.  It currently uses the value type from the one defined for value 1.  This is currently not a problem since this information is not being used within the hbase component but if we intend to use it the future this fix insures that it will extract the correct information for the row model.

The extracted CellMappingStrategy within the HBaseConsumer is always going to return the same instance throughout the for loop.  This has been moved outside of the for loop so that it is extract only once instead of multiple times.

Added a check to the setValueType method of the HBaseCell class to sure that the passed value is non-null else raise an exception.
",,ccorsi,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Sep/12 20:55;ccorsi;hbase-patch-2.diffs;https://issues.apache.org/jira/secure/attachment/12544288/hbase-patch-2.diffs",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241453,,,Sun Sep 09 08:42:09 UTC 2012,,,,,,,Patch Available,,,,"0|i027yv:",10892,,,,,,,,,,,,,,,,,,,,"07/Sep/12 20:55;ccorsi;Here is the patch that implements those aforementioned changes.;;;","09/Sep/12 08:28;davsclaus;Thanks for the patch. Mind that there was some checkstyle issues

You can check that with
{code}
mvn compile -Psourcecheck
{code};;;","09/Sep/12 08:42;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sftp's stepwise behavior to walk up and down relatively to avoid potential traversal issues,CAMEL-5574,12606484,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,06/Sep/12 20:57,24/Jan/13 16:54,14/Jul/23 05:45,24/Jan/13 16:54,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-ftp,,,,0,,,,,,,,,"I am having a directory traversal problem using the stepwise mode of camel-sftp at the producer side. Basically, it can walk down the path from the starting directory to the walking directory, but it cannot go back correctly to the original starting directly. The server is SSH-2.0-Cleo VLProxy/3.0.1 SSH FTP server.
I saw a related JIRA issue CAMEL-3309 that describes some issues in the stepwise traversal and some background to this related problem.

My question is on the part that changes the working directory back to the original starting folder. I am wondering why we are using stepwise traversal from the ancestor directory towards the starting child directory, instead of moving upwards relatively from the working directory back to the starting directory. This reverse traversal does not require accessing the ancestry path above the staring directory (hence, not affected by the accessing problem). And in fact, I think this reverse stepwise traversal seems more natural order than doing stepwise traversal each time from top down. How do you think?

I have made a change that implements this reverse stepwise traversal in SftpOperations and also made a few minor improvement changes.
This changed version passes all the existing tests and works also against the above server.

I am attaching a patch file for this change. I would appreciate if you can comment on it.

Thanks.
regards, aki
",,ay,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,CAMEL-3309,,,,,,,,,,"06/Sep/12 20:58;ay;trunk-camel-ftp.diff;https://issues.apache.org/jira/secure/attachment/12544109/trunk-camel-ftp.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241447,,,Thu Jan 24 16:54:48 UTC 2013,,,,,,,Patch Available,,,,"0|i027xj:",10886,,,,,,,,,,,,,,,,,,,,"17/Sep/12 07:09;njiang;Applied patch into with thanks to Aki into trunk, camel-2.10.x and camel-2.9.x branches.;;;","22/Jan/13 12:42;davsclaus;-1 to this patch.

The code in ftp/sftp/ftps should be similar as we keep the code in sync between the various FTP protocols. This code is only done at sftp and not the others.

And it causes a regression bug logged as CAMEL-5989

About the logic for stepwise. It is as it was designed, and its better to be consistent across the FTP protocols, and hence why the code is identical in the xxxOperations source code.

If there is a better algorithm for stepwise then it has to be done across all FTP protocols and be consistent.;;;","22/Jan/13 13:29;ay;Hi Claus,
I can work on the modified patch along your suggestion.

Regarding CAMEL-5989, I am not sure why it is causing an windows related issue, as I was also using windows and thought the directory path was normalized at that place. (by the way, you linked the wrong ticket from CAMEL-5989 in your comment there, 5564 instead of 5574). 

regards, aki
;;;","22/Jan/13 14:03;davsclaus;Aki,

Yeah its important that the code is similar between ftp and s-ftp. eg the code in FtpOperations and SftpOperations is the same, except for when they use the native ftp client. This ensures that functionality works the same. As well when we change/add new options etc then its easier to implement in both as its the same. Also the regular ftp tests will sort-of test sftp as well, as the code is following the same pattern.

In the early days we did not have a Java SFTP library to test against, so we did not have any SFTP tests. But recently we have a SFTP library now (though not sure if it works as well as a real SFTP server). And therefore we got a bit of sftp tests also.

Also in the earlier days the SFTP tests caused the CI servers to hang. But just recently we enabled the tests again. And it seems the SFTP library is more stable and allow CI servers to not hang anymore.

;;;","22/Jan/13 14:06;davsclaus;Also the ftp component is a bit complicated as people use different OS'es and different FTP servers. And depending on if they are client or server etc. connecting to another OS etc. It gets a bit complicated with the / or \ handling of path separators. As well how the FTP server accepts traversing file paths. Some servers require you to CD into a dir, before you can GET or PUT. Where as others do not so you can GET foo/bar/myfile.dat etc.

The world would have been easier if the windows guys just had used the same path separator as the rest of the world. :(;;;","22/Jan/13 15:39;davsclaus;I agree the stepwise and directory traversal could be better.
Though its problematic when people use absolute or relative starting directories as well.

Also the logic for changing to parent directory could possible in sftp operations be using "".."" which we would assume should be supported by the ftp client as a valid input to change dir command.;;;","24/Jan/13 12:58;ay;Hi Claus,
As I commented in CAMEL-5989, it looks like the original patch made in 2.10.2 worked for unix and windows as jsch consistently used the absolute path with ""/"" as delimiter and FileUtils.compactPath was not converting this path into the windows syntax on windows.

FileUtils.compachPath in 2.10.3 converted this path into the windows syntax on windows. And rev 1424437 changed SFTPOperations to call FileUtils.compactPath with the explicit delimiter.

To unify the processing in ftp and sftp, which have different behaviors, we need to make some of these underlining assumption detectable or if not, additionally configurable. Do you think it makes sense to use this ticket to do this refactoring or create a new one and refer to this ticket? 

How do you think?

Thanks.
regards, aki

;;;","24/Jan/13 16:54;davsclaus;Aki, yeah you found the solution.

That said, I still think the stepwise code can be improved and how sftp changes to parent directory etc.
I will open a new ticket, and then we can consider improving this in a future release or even 2.11 if we got the time.
;;;",,,,,,,,,,,,,,,,,,,,,,
Camel proxies should not forward hashCode() method invocations,CAMEL-5571,12606232,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hwellmann,hwellmann,05/Sep/12 12:28,28/Sep/12 14:02,14/Jul/23 05:45,28/Sep/12 14:02,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"Given a Camel proxy for an @InOnly service interface, and a route from the proxy to a JMS endpoint, calling hashCode() on the proxy throws an exception, either immediately or after a number of retries, depending on the route configuration.

See the attached test case for different scenarios.

The reason is that hashCode() is forwarded by the CamelInvocationHandler to the remote endpoint, which does not make sense in this case.
",,davsclaus,hwellmann,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Sep/12 12:28;hwellmann;camel-proxy-bug.zip;https://issues.apache.org/jira/secure/attachment/12543842/camel-proxy-bug.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241444,,,Fri Sep 28 14:02:17 UTC 2012,,,,,,,,,,,"0|i027wv:",10883,,,,,,,,,,,,,,,,,,,,"28/Sep/12 14:02;davsclaus;Thanks for reporting. Your test cases now passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maximumRedeliveries is inherited for other exceptions thrown while redelivering with maximumRedeliveries(-1),CAMEL-5570,12606219,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,oyvindio,oyvindio,05/Sep/12 09:06,05/Sep/12 13:52,14/Jul/23 05:45,05/Sep/12 13:52,2.10.0,2.9.0,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"Given a route:

{code}
from(""direct:source"")
   .onException(FirstException.class)
         .handled(true)
         .maximumRedeliveries(-1)
    .end()
    .onException(SecondException.class)
        .handled(true)
        .to(""direct:error"")
    .end()
    .to(""direct:destination"");
{code}

If the consumer of direct:destination throws a FirstException, the message will be redelivered. Now if a SecondException is thrown while redelivering the message to direct:destination, it does NOT go to direct:error, as you would expect, but is redelivered again; using the same RedeliveryPolicy as for FirstException.

I have attached a test that illustrates this.

In OnExceptionDefinition.createRedeliveryPolicy, maximumRedeliveries is set to 0 if the OnExceptionDefinition has outputs and the parent RedeliveryPolicy has explicitly set maximumRedeliveries > 0. The latter check fails when maximumRedeliveries is -1 (infinite retries), and the parent RedeliveryPolicy is returned.

I have attached a patch that ensures that we don't inherit the parent maximumRedeliveries even if it is set to -1.",,andreaja,davsclaus,oyvindio,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Sep/12 09:08;oyvindio;redeliverypolicy-on-exception-while-redelivering-fix.patch;https://issues.apache.org/jira/secure/attachment/12543833/redeliverypolicy-on-exception-while-redelivering-fix.patch","05/Sep/12 09:08;oyvindio;redeliverypolicy-on-exception-while-redelivering-test.patch;https://issues.apache.org/jira/secure/attachment/12543832/redeliverypolicy-on-exception-while-redelivering-test.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241443,,,Wed Sep 05 13:34:20 UTC 2012,,,,,,,Patch Available,,,,"0|i027wn:",10882,,,,,,,,,,,,,,,,,,,,"05/Sep/12 13:34;davsclaus;Thanks for the patch. Will get it backported as well.

This only affect when using -1, you can use a very high number as a workaround instead of -1. Lowering to minor priority.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Should shutdown management load task thread pool explicit,CAMEL-5564,12606086,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Sep/12 14:07,05/Sep/12 12:16,14/Jul/23 05:45,05/Sep/12 12:16,2.10.1,2.9.3,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"If using JMX with Camel there is a background thread, that gathers load stat periodically. We should shutdown this task/thread pool explicit.

This ensures cleaner shutdown.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241436,,,Wed Sep 05 09:17:50 UTC 2012,,,,,,,,,,,"0|i027v3:",10875,,,,,,,,,,,,,,,,,,,,"05/Sep/12 09:17;davsclaus;The default error handler thread pool should also be shutdown as well. Then we have a clean shutdown of all the pools when Camel is shutting down itself.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-beanio using beanio 2.0 should be using the 2012/03 beanio namespace,CAMEL-5562,12606061,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ay,ay,04/Sep/12 11:46,07/Sep/12 06:17,14/Jul/23 05:45,07/Sep/12 06:17,2.10.1,,,,,,,,,,,,2.10.2,2.11.0,,,camel-beanio,,,,0,,,,,,,,,"camel-beanio which uses beanio-2.0.x library should use the beanio 2.0's namepsace (http://www.beanio.org/2012/03) and not the 1.2 namespace ( http://www.beanio.org/2011/01) in its test cases.

The background to this is described in this mail thread.
http://camel.465427.n5.nabble.com/issue-with-camel-beanio-s-version-used-in-trunk-td5718596.html
",,ay,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Sep/12 11:48;ay;trunk-camel-beanio.diff;https://issues.apache.org/jira/secure/attachment/12543658/trunk-camel-beanio.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241434,,,Fri Sep 07 06:17:32 UTC 2012,,,,,,,Patch Available,,,,"0|i027un:",10873,,,,,,,,,,,,,,,,,,,,"07/Sep/12 06:17;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HazelcastIdempotentRepository is not thread safe,CAMEL-5556,12605869,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,krishy,krishy,01/Sep/12 23:14,10/Sep/12 14:27,14/Jul/23 05:45,10/Sep/12 14:27,2.8.6,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-hazelcast,,,,0,,,,,,,,,"The Hazelcast idempotent repository does not add and confirm messages in a thread safe manner.

Patch attached to handle that.",,krishy,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Sep/12 23:15;krishy;Ensure_thread-safe_access.patch;https://issues.apache.org/jira/secure/attachment/12543451/Ensure_thread-safe_access.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241428,,,Mon Sep 10 14:27:31 UTC 2012,,,,,,,Patch Available,,,,"0|i027tb:",10867,,,,,,,,,,,,,,,,,,,,"01/Sep/12 23:15;krishy;Use putifAbsent for add and slightly safe semantics for confirm.;;;","10/Sep/12 14:27;njiang;Applied patch into trunk and camel-2.9.x and camel-2.10.x branches with thanks to Krishna.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
In ScheduledRoutePolicy a suspended route cannot be started,CAMEL-5555,12605770,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,apejavar,apejavar,31/Aug/12 18:47,10/Sep/12 14:57,14/Jul/23 05:45,10/Sep/12 14:57,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-quartz,,,,0,,,,,,,,,"If a route is suspended using the ScheduledRoutePolicy and its subclasses (CronScheduledRoutePolicy), it cannot be resumed or started.

Looking at the code in ScheduledRoutePolicy.onJobExecute(), on start/resume actions, the route status is first checked and must be stopped or suspended before any actions is taken.

Suspension of a route, only suspends the consumer and not the route, and hence the start/resume after a suspend does nothing.

One solution could be to also check the status of the consumer on start/resume. This would require adding a isSuspended() to serviceHelper and should be relatively straightforward.",,apejavar,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241427,,,Mon Sep 10 14:57:12 UTC 2012,,,,,,,,,,,"0|i027t3:",10866,,,,,,,,,,,,,,,,,,,,"10/Sep/12 14:57;njiang;Applied the patch into trunk, camel-2.9.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Karaf Command 'camel:route-list' throws NullpointerException,CAMEL-5543,12605201,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,laeubi,laeubi,28/Aug/12 11:14,19/Nov/13 13:10,14/Jul/23 05:45,01/Sep/12 07:36,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,karaf,,,,0,,,,,,,,,"Sometimes I get an NPE when listing routes in Karaf:
2012-08-28 12:20:01,734 | INFO  | l Console Thread | Console                          | 36 - org.apache.karaf.shell.console - 2.2.8 | Exception caught while executing command
java.lang.NullPointerException
        at org.apache.camel.karaf.commands.RouteList.doExecute(RouteList.java:65)[129:org.apache.camel.karaf.camel-karaf-commands:2.10.0]
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.karaf.shell.console.jline.Console.run(Console.java:166)[36:org.apache.karaf.shell.console:2.2.8]
        at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]
",,davsclaus,laeubi,metatech,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241415,,,Tue Nov 19 13:10:19 UTC 2013,,,,,,,,,,,"0|i027qf:",10854,,,,,,,,,,,,,,,,,,,,"01/Sep/12 07:36;davsclaus;Thanks for reporting.;;;","19/Nov/13 13:10;metatech;This exception can happen when multiple CamelContext have the same ID. The CamelController class makes the assumption that CamelContext IDs are unique keys.  This is not true in an OSGi container, where several CamelContexts can be deployed in distinct bundles, which do not know each other.    
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer component - Should defer scheduling tasks during startup of CamelContext,CAMEL-5542,12605050,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/12 08:51,18/Mar/14 11:46,14/Jul/23 05:45,27/Aug/12 09:15,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,We should defer scheduling timer tasks during startup of CamelContext. As they may fire very fast. We should defer this using a StartupListener just as we do with quartz component etc.,,davsclaus,metatech,,,,,,,,,,,,,,,,,,,,,CAMEL-7308,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241414,,,Mon Mar 17 16:17:30 UTC 2014,,,,,,,,,,,"0|i027q7:",10853,,,,,,,,,,,,,,,,,,,,"27/Aug/12 09:05;davsclaus;It was easier to check in the consumer if camel context status is started, to allow running.

I have also change the delay default from 0 to 1000, to wait 1 sec before firing as well. Just in case to not fire out of the box too fast.;;;","27/Aug/12 09:15;davsclaus;Fixed the timer firing during startup of Camel.

The default value of {{delay}} has only been changed in Camel 2.11.;;;","17/Mar/14 16:17;metatech;For the record, this changes creates a regression for our routes when migrating from ServiceMix 4.4 to ServiceMix 4.5.
The secondary route in which we use this timer populates a cache, which must be initialized before other primary routes in the bundle can use it, otherwise requests sent to these other routes will generate errors.
In our ServiceMix installation with all the other bundles, the bundle with the timer can take from 1 second to 30 seconds to start-up, depending on the machine speed and the number of other bundles which are installed/started at the same time.  
It is therefore very difficult to estimate the time to define for the ""delay"" variable.  If set too low, the first fire will be ignored and the other primary routes will generate errors until the timer second fire. If set too high, the other primary routes will generate errors until the timer first fire.  
Normally the timer period is set to refresh the cache every several minutes, which leaves a large window where requests end with an error in case the cache failed to initialize.
A solution with a StartupListener would effectively reduce the window of errors to a fraction of a second.
Also, it would help to debug these kind of problems if a ""warn"" log is added when the first timer fire is ignored.
Can you suggest any ""wise"" way to solve this problem ?
Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - NPE if configured to consume from root directory,CAMEL-5540,12604965,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Aug/12 09:08,25/Aug/12 10:19,14/Jul/23 05:45,25/Aug/12 10:19,2.10.0,2.9.2,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-root-folder-as-endpoint-Could-not-poll-endpoint-NPE-tp5717845.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241412,,,2012-08-25 09:08:48.0,,,,,,,,,,,"0|i027pr:",10851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mina2 Consumer doesn't reliably work with SSL,CAMEL-5537,12604581,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andrewlawrenson,andrewlawrenson,23/Aug/12 09:28,26/Aug/12 09:29,14/Jul/23 05:45,26/Aug/12 09:29,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,,,camel-mina2,,,,0,,,,,,,,,"I've been trying to write a service using Camel 2.10.0 which uses the mina2 component to expose a service, and which uses SSL, using an endpoint of:

mina2:tcp://localhost:6500?sync=true&filters=#hl7SslFilterFactory,#hl7CodecFilter&allowDefaultCodec=false

however, what I found was that the SSL handshake was failing quite often for no apparent reason.  Investigating further, it appeared that messages sent during the handshake were being processed out of order - specifically, when the client (which uses a standard java SSLSocket) sent a ""TLSv1 Change Cipher Spec"" followed by a ""TLSv1 Handshake"", the ""TLSv1 Handshake"" was being processed before the ""TLSv1 Change Cipher Spec"", breaking the process.

This appears to have been caused because when the the Mina2Consumer configures MINA for tcp (in Mina2Consumer.setupSocketProtocol), it is using a UnorderedThreadPoolExecutor - which allows messages to be processed in any order.  Switching this to use a OrderedThreadPoolExecutor instead has fixed the issue.

May I request that the use of UnorderedThreadPoolExecutor vs OrderedThreadPoolExecutor be configurable via endpoint parameters? (or OrderedThreadPoolExecutor is used when SSL if configured).  I'm assuming the reason for the use of UnorderedThreadPoolExecutor is simply for performance. ",,andrewlawrenson,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241409,,,Sun Aug 26 09:29:19 UTC 2012,,,,,,,,,,,"0|i027p3:",10848,,,,,,,,,,,,,,,,,,,,"26/Aug/12 09:29;davsclaus;There is a new orderedThreadPoolExecutor option you can use to choose. By default is now ordered to ensure works reliable out of the box.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible issue in camel-apns - Reported on user forum,CAMEL-5536,12604478,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/12 19:46,27/Sep/12 10:49,14/Jul/23 05:45,27/Sep/12 10:49,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-with-ApnsServiceFactory-tp5717573.html",,davsclaus,solimo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Sep/12 21:07;solimo;patch.txt;https://issues.apache.org/jira/secure/attachment/12544529/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241408,,,Mon Sep 10 21:07:44 UTC 2012,,,,,,,,,,,"0|i027ov:",10847,,,,,,,,,,,,,,,,,,,,"10/Sep/12 21:07;solimo;Simple fix with default values and no destination override by setting certificates. 

What concern me are tests coverage, failures and assertions. As a result there can be more code that is not tested.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0 , both routes work in Apache Camel 2.9.1.  ",CAMEL-5535,12604449,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amit1000,amit1000,22/Aug/12 15:35,10/Sep/12 14:18,14/Jul/23 05:45,10/Sep/12 14:18,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-restlet,,,,0,,,,,,,,,"Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0 , both routes work in Apache Camel 2.9.1.  

Reproduce Steps:
-----------------
1) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=get

<route xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" >
      <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=get""/>
    <transform>
      <simple>Hello Restlet Method: ${header.CamelHttpMethod}  ID:${header.id}</simple>
    </transform>

  </route>


2) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=post

   <route xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" >
      <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=post""/>
    <transform>
      <simple>Hello Restlet Method: ${header.CamelHttpMethod}  ID:${header.id}</simple>
    </transform>

  </route>

3)  route 1work fine, but #2 results in the following exception. both route work fine in Camel 2.9.1.

Exception:

012-07-27 10:29:20,646-0400 ERROR grails.app.service.nimbus.ComputeService localhost addRoute for hello.restletpost failed - Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint[/nimbus/hello.restlet/1.0]
 Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint[/nimbus/hello.restlet/1.0]
 at org.apache.camel.impl.DefaultCamelContext(doStartOrResumeRouteConsumers:1993) 


I've already posted on 
http://camel.465427.n5.nabble.com/Apache-Camel-2-10-0-multiple-restlet-routes-of-the-same-restlet-URI-but-different-VERBs-does-not-work-td5716556.html
 
",,amit1000,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241407,,,Mon Sep 10 14:18:06 UTC 2012,,,,,,,,,,,"0|i027on:",10846,,,,,,,,,,,,,,,,,,,,"23/Aug/12 02:25;njiang;I just tried you test case with Camel 2.10.0 and Camel 2.9.1, I got the same exception of ""Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed."" And I checked the camel-restlet code it doesn't support to create multi endpoints as you just showed. ;;;","23/Aug/12 19:24;amit1000;I did the unit test with Camel 2.10.0 and Camel 2.9.1 and i got same exception, but when I deploy same routes in spring XML DSL format into out application. It works fine with Camel 2.9.1. Both routes started successfully. I went to jconsole and collected dumpRouteAsXml. Below are the dumpRouteAsXml. Both routes has different route id but same URL. This feature is very critical to Restlet routes, so we can have different routes base on the restletMethods. Is anyway could you support this feature in next release?

  
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route trace=""true"" id=""nimbus.hello.restlet.1.0"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=post""/>
    <transform id=""transform10"">
        <simple>Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}</simple>
    </transform>
</route>



<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route trace=""true"" id=""nimbus.hello.restletGet.1.0"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=get""/>
    <transform id=""transform9"">
        <simple>Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}</simple>
    </transform>
</route>

Thanks,
 ;;;","24/Aug/12 12:31;njiang;Hi Amti,

It looks like there is no multi from endpont check when you use Sprint DSL to set up restlet route in Camel 2.9.1.

I found a way to fix it by setting up the endpoint uri with the restletMethods option and will commit the patch shortly.

Willem
;;;","10/Sep/12 14:12;amit1000;I've tested with CAMEL-2.10.1 release and it works great. Please change the issue status to Resolved and update the release note. Thanks for you help!!!;;;","10/Sep/12 14:18;njiang;Applied the patch into trunk, camel-2.9.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Maven archetype - Generates wrong plugin for surefire plugin,CAMEL-5527,12604198,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Aug/12 10:13,21/Aug/12 10:34,14/Jul/23 05:45,21/Aug/12 10:34,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,tooling,,,,0,,,,,,,,,The blueprint archetype creates wrong pom.xml. The groupId for the surefire plugin is wrong.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241399,,,Tue Aug 21 10:34:23 UTC 2012,,,,,,,,,,,"0|i027mv:",10838,,,,,,,,,,,,,,,,,,,,"21/Aug/12 10:34;davsclaus;This does not affect Camel 2.9.;;;","21/Aug/12 10:34;davsclaus;I removed the surefire plugin as its no longer needed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""ThreadID is already used"" exception under heavy load",CAMEL-5526,12604190,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,asbestos,asbestos,21/Aug/12 08:58,26/Aug/12 09:47,14/Jul/23 05:45,26/Aug/12 09:47,2.10.0,2.11.0,2.8.6,2.9.2,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-xmpp,,,,0,,,,,,,,,"In situations with heavy load or under load tests we rarely got exception:
{noformat} 
2012-08-21 12:28:02,620 [ool-26-thread-7] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143205 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143206). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already used
java.lang.IllegalArgumentException: ThreadID is already used
	at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
	at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
2012-08-21 12:28:02,621 [ool-26-thread-5] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143207 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143208). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already used
java.lang.IllegalArgumentException: ThreadID is already used
	at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
	at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

{noformat} 

After debugging and looking at source code we figured out, that smack use some sort of map with week references for chat cache. When memory is low java GC discards chat instances, but in Process() method they instantiated over and over again without synchronization:
{code:title=XmppPrivateChatProducer.java|borderStyle=solid}
 public void process(Exchange exchange) {
 .........................
	Chat chat = chatManager.getThreadChat(endpoint.getChatId());
	if (chat == null) {
		LOG.trace(""Creating new chat instance with thread ID {}"", endpoint.getChatId());
		chat = chatManager.createChat(getParticipant(), endpoint.getChatId(), new MessageListener() {
			public void processMessage(Chat chat, Message message) {
				// not here to do conversation
				if (LOG.isDebugEnabled()) {
					LOG.debug(""Received and discarding message from {} : {}"", getParticipant(), message.getBody());
				}
			}
		});
	}
 .........................
}
{code} 
But smack implementation prohibits chat instances with same chatId.",,asbestos,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Aug/12 08:59;asbestos;XmppPrivateChatProducer.patch;https://issues.apache.org/jira/secure/attachment/12541732/XmppPrivateChatProducer.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241398,,,Sun Aug 26 09:47:23 UTC 2012,,,,,,,Patch Available,,,,"0|i027mn:",10837,,,,,,,,,,,,,,,,,,,,"21/Aug/12 08:59;asbestos;I added simple patch. ;;;","26/Aug/12 09:47;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Load balancing with “Random” policy is not halfway evenly distributed to endPoint with vast exchange ,CAMEL-5525,12604189,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xlding,xlding,21/Aug/12 08:34,26/Aug/12 10:15,14/Jul/23 05:45,26/Aug/12 10:15,,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"Look the code about choosing processor in camel: http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/loadbalancer/RandomLoadBalancer.html
{noformat} 
 protected synchronized Processor chooseProcessor(List<Processor> processors, Exchange exchange) {
        int size = processors.size();
        while (true) {
            int index = (int) Math.round(Math.random() * size);
            if (index < size) {
                return processors.get(index);
            }
        }
}
{noformat} 
For example, processors.size() = 3,
so, Math.random() * size = 0.0 .. 3.0,
So, index is either 0, or 1, or 2, or 3,
so there is four variants, while we are looking for three variants.
and, variant ""3"" is then thrown away in ""if"" comparison and re-selected.that is a source of uneveningness.when there are vast message exchange, the load radio for three endpoints are approach to 20%,40%,40%. it is unreasonable radio,should approach 33% allowing the amount of difference for each endpoint(smaller than 10%). 

For the above code, can replace ""int index = (int) Math.round(Math.random() * size)"" with ""int index = (int)Math.ceil(Math.random() * 3 - 1)""
",,davsclaus,xlding,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241397,,,Sun Aug 26 10:15:12 UTC 2012,,,,,,,,,,,"0|i027mf:",10836,,,,,,,,,,,,,,,,,,,,"26/Aug/12 10:01;davsclaus;Thanks for reporting. I did a test run with a simpler new logic vs the old logic, by running 100000 in a foor loop with a size of 3.


New code
33255
33315
33430

Old code
19976
39819
40205


As you can see there is a flaw in the old code, pickup the last element more often.;;;","26/Aug/12 10:15;davsclaus;Thanks for reporting.

I did a simpler fix by using Random that is easer to understand.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContextId should be effected when there are more than two camel context in the spring configuration file ,CAMEL-5519,12603950,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Aug/12 09:52,20/Aug/12 02:32,14/Jul/23 05:45,20/Aug/12 02:32,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-spring,,,,0,,,,,,,,,,DefaultCamelBeanPostProcessor will try to set the CamelContext property when the bean is instance of CamelContextAware. It will mass up the CamelContext setting when the bean has the property of CamelContextId and there are more than one CamelContext in the Application Context. So We just need to make sure the CamelContextId take effect even the CamelContext is already set to the bean to fix this kind of issue.,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241391,,,Mon Aug 20 02:32:38 UTC 2012,,,,,,,,,,,"0|i027l3:",10830,,,,,,,,,,,,,,,,,,,,"20/Aug/12 02:32;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Proxy ignores camelContextId property in Spring configuration,CAMEL-5518,12603885,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,koscejev,koscejev,17/Aug/12 16:37,20/Aug/12 02:35,14/Jul/23 05:45,20/Aug/12 02:35,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,context,proxy,spring,,,,,,"Camel Proxy, if configured outside camelContext element in Spring configuration, ignores camelContextId property. (Actual code only cares about this property, if camelContext isn't set - which it always is by then.)

Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two proxies, each pointing to the same URI, but with different camelContextId specified. Both proxies will be created pointing to the same (first) camel context, despite being configured to different contexts.",,bvahdat,koscejev,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Aug/12 16:48;koscejev;Test.zip;https://issues.apache.org/jira/secure/attachment/12541385/Test.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241390,,,Mon Aug 20 02:35:12 UTC 2012,,,,,,,,,,,"0|i027kv:",10829,,,,,,,,,,,,,,,,,,,,"17/Aug/12 16:48;koscejev;Test suite to reproduce the bug;;;","18/Aug/12 19:55;bvahdat;We've got 2 regression failures through the fix of this ticket:
https://builds.apache.org/job/Camel.trunk.fulltest.java7/224/;;;","20/Aug/12 02:34;njiang;@Babak, thanks for the reminding, I committed a fix for it.;;;","20/Aug/12 02:35;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple calls to CXF factory beans.getFeatures causing multiple logging features to be added,CAMEL-5517,12603859,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,17/Aug/12 13:54,17/Aug/12 14:11,14/Jul/23 05:45,17/Aug/12 14:11,,,,,,,,,,,,,2.10.1,2.9.3,,,,,,,0,,,,,,,,,"
Each call to getFeatures() is adding another LoggingFeature into the array.  Would be better to add/remove the feature when it's configured.",,dkulp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241389,,,2012-08-17 13:54:44.0,,,,,,,,,,,"0|i027kn:",10828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Competing Consumers fails for jms queue using AdviceWith,CAMEL-5510,12603638,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wjmcdonald,wjmcdonald,15/Aug/12 20:36,19/Sep/13 05:44,14/Jul/23 05:45,19/Sep/13 05:44,2.9.2,,,,,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-test,,,,0,,,,,,,,,"I was trying to test two routes that start from the same endpoint.  The endpoint is a jms queue, so it should be able to have multiple consumers attach to it.  When I use the standard CamelTestSupport methodology and let it create and start my context, mock my out points, etc. everything passes (see CompetingConsumersWorks.java).  However when I try and use the strategy of not letting the junit support create everything, ie. 
        public boolean isUseRouteBuilder() { return false; } 
        public boolean isUseAdviceWith() { return true; } 
and try and use AdviceWithRouteBuilder to mock out routes the test doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get it to work, but only if I start the context before adding the second set of routes to the context (see comments in code).   ",Windows7 x64 Juno Eclipse,ceposta,wjmcdonald,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Aug/12 20:36;wjmcdonald;CompetingConsumersBase.java;https://issues.apache.org/jira/secure/attachment/12541123/CompetingConsumersBase.java","15/Aug/12 20:36;wjmcdonald;CompetingConsumersDoesNotWork.java;https://issues.apache.org/jira/secure/attachment/12541124/CompetingConsumersDoesNotWork.java","15/Aug/12 20:36;wjmcdonald;CompetingConsumersWorks.java;https://issues.apache.org/jira/secure/attachment/12541125/CompetingConsumersWorks.java",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241382,,,Wed Sep 18 21:49:52 UTC 2013,,,,,,,,,,,"0|i027j3:",10821,,,,,,,,,,,,,,,,,,,,"29/Jul/13 18:45;ceposta;Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and both tests (...Works.java and ...DoesNotWork.java) seem to work just fine and pass the unit test.

Can you give it a try on your end with the latest release?;;;","29/Jul/13 20:01;wjmcdonald;Not sure - I've been off on other things.  I don't know if I'll get back 
to it any time soon, but if I do, I'll let you know.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   07/29/2013 11:44 AM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13722817#comment-13722817 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and 
both tests (...Works.java and ...DoesNotWork.java) seem to work just fine 
and pass the unit test.

Can you give it a try on your end with the latest release?
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira

;;;","18/Sep/13 21:21;ceposta;I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on latest snapshots.;;;","18/Sep/13 21:49;wjmcdonald;I can't get to it now, so if you think you can close it that's fine.  If 
it comes up again, we can always readdress it then.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   09/18/2013 02:19 PM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13771252#comment-13771252 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on 
latest snapshots.
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Jetty http consumer doesn't suppor the uri ""jetty:http://localhost:9000""",CAMEL-5509,12603591,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,15/Aug/12 14:39,20/Aug/12 02:30,14/Jul/23 05:45,20/Aug/12 02:30,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-jetty,,,,0,,,,,,,,,"When you using ""jetty:http://localhost:9000"" as the jetty http consumer uri, you will get a complain of 404 when you using ""http://localhost:9000"" to access the service.
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241381,,,Mon Aug 20 02:30:49 UTC 2012,,,,,,,,,,,"0|i027iv:",10820,,,,,,,,,,,,,,,,,,,,"20/Aug/12 02:30;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprintTestSupport Cannot correctly delete target\bundles\routetest.jar,CAMEL-5507,12603496,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alanfoster,alanfoster,14/Aug/12 19:37,20/Aug/12 14:03,14/Jul/23 05:45,20/Aug/12 14:03,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,camel-test,osgi,,,0,,,,,,,,,"When creating a new fuse project using the camel-blueprint archetype and  having multiple test methods it has problems deleting 'target\bundles\routetest.jar' in the setUp method of CamelBlueprintTestSupport

Reproduction steps:
- Create new fuse project from camel-blueprint archetype
- Open the RouteTest.java in (src/test/java/com/mycompany/camel/blueprint/RouteTest.java)
- Copy the 'testRoute()' method a couple of times and give it a different method name to best see this problem.
- Run the maven tests

The console will say this after the first test runs:
{code}
                    Thread-7] BlueprintCamelContext          INFO  Apache Camel 2.9.0.fuse-7-061 (CamelContext: blueprintContext) is shutdown in 0.005 seconds. Uptime 0.085 seconds.
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/FuseIDEEnterprise-2.1.462/workspace/camel-blueprint/target/classes/OSGI-INF/blueprint/blueprint.xml
{code}

You can also also get PojoSR class loader issues when running the exact same project as JUnit tests, rather than maven tests. But these errors may be related so I won't raise a ticket for that.

I will however give the stack trace for this, in case it _isn't_ related
{code}
org.osgi.framework.BundleException: Unable to start bundle
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:144)
	at de.kalpatec.pojosr.framework.PojoSR.startBundles(PojoSR.java:405)
	at de.kalpatec.pojosr.framework.PojoSR.<init>(PojoSR.java:322)
	at de.kalpatec.pojosr.framework.PojoServiceRegistryFactoryImpl.newPojoServiceRegistry(PojoServiceRegistryFactoryImpl.java:51)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.createBundleContext(CamelBlueprintHelper.java:111)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:130)
	... 30 more
Caused by: java.lang.ClassNotFoundException: org.eclipse.core.runtime.Plugin
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	... 43 more
{code}","Windows 7, Fuse IDE",alanfoster,davsclaus,karlpauls,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241379,,,Mon Aug 20 14:03:35 UTC 2012,,,,,,,,,,,"0|i027if:",10818,,,,,,,,,,,,,,,,,,,,"16/Aug/12 12:22;davsclaus;Alan, Fuse issues should essentially be reported to FuseSource and not Apache.

I will try with the ASF Camel releases and see if I can reproduce the issue though, as the camel-test-blueprint is also part of ASF and it may have an issue on Windows. ;;;","16/Aug/12 15:51;davsclaus;I have reproduced the WARN of deleting the file on my XP box, of the ASF trunk version of Camel. It could either be in the camel-test-blueprint, or in pojosr that has a open file handle to the file in question, which then cannot be deleted on windows.;;;","17/Aug/12 18:21;alanfoster;Thanks for looking to this Claus

Would you happen to know of any quickfix for this? Or anything I could try to look into to find out the exact cause of the problem?;;;","20/Aug/12 08:22;davsclaus;There is no easy quickfix. 

The issue is that something in pojosr/blueprint/etc. is keeping a file lock on that given JAR, which Windows then refuses to delete. Other OS such as linux/mac etc dont have this issue. And thus its only happens on windows.;;;","20/Aug/12 14:03;davsclaus;The bundle JAR is now written in a separate directory, so we can cleanup the Karaf bundles.

On shutting down the tests there is no longer a 5 sec (+ WARN) on windows.

This is the best we can do so far.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HBase component does not extract that table name in all cases and HBase runtime version issues.,CAMEL-5506,12603493,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ccorsi,ccorsi,14/Aug/12 19:06,15/Aug/12 15:20,14/Jul/23 05:45,15/Aug/12 15:20,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,,,,,0,camel-hbase,,,,,,,,"The current hbase component uses the URI getHost method to retrieve the table name but this method returns null if the host name does not conform to the requirements of this method.  For instance, it should include a '.' in the name, or is a ipv4 or ipv6 valid address string.  If the table name is a simple name then the getHost method will return null instead of the name of the table.  This will in turn cause a NPE exception.

The other issue is that if you are using 0.92.x or greater with the current implementation of the camel-hbase component.  An IllegalArgumentException is generated because of an incompatible host:port pair.  This is caused by the fact that the current hbase integration uses 0.90.5 and this will conflict with those versions.

I have a patch that solves both issues but in the second case.  It will require that the user define the specific hbase client version that they need to use.

btw, the camel-hbase component is not available as an option for the Component/s drop down list.
",Any,ccorsi,davsclaus,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Aug/12 19:07;ccorsi;hbase.diffs;https://issues.apache.org/jira/secure/attachment/12540924/hbase.diffs",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241378,,,Wed Aug 15 15:20:27 UTC 2012,,,,,,,Patch Available,,,,"0|i027i7:",10817,,,,,,,,,,,,,,,,,,,,"14/Aug/12 19:07;ccorsi;This is the patch that contains the fixes required for this issue.
;;;","14/Aug/12 19:23;ccorsi;BTW:  This issue has the following workaround.

The table name should include at the very least a '.' in the name.

If using hbase 0.92.x or greater than they need to add the following to their pom file.

{noformat}
	<dependency>
	    <groupId>org.apache.camel</groupId>
	    <artifactId>camel-hbase</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.apache.hbase</groupId>
                <artifactId>hbase</artifactId>
              </exclusion>
            </exclusions>
	</dependency>

        <dependency>
          <groupId>org.apache.hbase</groupId>
          <artifactId>hbase</artifactId>
          <version>${hbase-version}</version>
        </dependency>
{noformat}

Where base.version is defined.

Note that the patch that I have attached forces the users to define the required hbase client version. 
This might not be necessary in this case since the package will not include the hbase client and the users will need to include the runtime.  Come to think about it, you can just ignore that part of the patch and apply the rest.  Instead, state on the web site that trying to use the default hbase client with 0.92.x or greater will cause an exception.
;;;","15/Aug/12 13:57;davsclaus;Claudio, thanks for the patch.

The pom.xml code above, is that an information if people would upgrade to a newer hbase version that shipped with Camel?
I assume you patch can be applied to the ASF Camel trunk code.

We may be able to upgrade hbase version but i wonder if there was some osgi issues with newer release?;;;","15/Aug/12 14:08;ccorsi;The pom.xml update is only required for users that have a maven project and want to test using camel:run against an already running hbase system.  If the service is using 0.92.x or greater, then the camel:run will produce the illegal argument exception with the not a host:port pair.  Adding the above update to their maven project pom file will resolve that issue.

The original patch that includes changing the hbase to provided is not required in general since the api using the 0.90.5 hbase is the same as the latest version of hbase.

;;;","15/Aug/12 14:33;iocanel;Regarding the provided scope I agree, as it seems that unless there is an exact version match between the client and the server, then there will be problems.

Regarding the getHost() thing, I am not sure I understand what exactly is the problem. AFAIK it doesn't have issues working with simple names too. In fact in the unit tests simple names have been used and they do work fine. Maybe I misunderstood the problem?;;;","15/Aug/12 14:54;davsclaus;Oh we should remember to upon up the osgi feature so it uses a range of [0.9,1);;;","15/Aug/12 15:20;davsclaus;osgi range widen as well;;;",,,,,,,,,,,,,,,,,,,,,,,
Unable to customize URIResolver in xslt component,CAMEL-5505,12603450,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,asbestos,asbestos,14/Aug/12 13:33,22/Aug/12 16:03,14/Jul/23 05:45,22/Aug/12 16:03,2.10.0,2.11.0,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,"camel-core,",test,xslt,,,,,,"In xslt component we can't customize uriResolver For instance in route with uri ""xslt:org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolver=#customURIResolver"" camel still uses default XsltUriResolver.",,alanfoster,asbestos,bvahdat,davsclaus,hadrian,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Aug/12 11:25;asbestos;camel-core-xslt-CustomURIResolver-checkstyle.patch;https://issues.apache.org/jira/secure/attachment/12541036/camel-core-xslt-CustomURIResolver-checkstyle.patch","14/Aug/12 13:35;asbestos;camel-core-xslt-CustomURIResolver.patch;https://issues.apache.org/jira/secure/attachment/12540879/camel-core-xslt-CustomURIResolver.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241377,,,Wed Aug 15 14:03:54 UTC 2012,,,,,,,Patch Available,,,,"0|i027hz:",10816,,,,,,,,,,,,,,,,,,,,"14/Aug/12 13:35;asbestos;Test case with fix.;;;","14/Aug/12 14:33;hadrian;I am looking at your patch. A quick comment, the '#' should not be there. While it's used in some context to mean a reference, in a [URI|http://www.ietf.org/rfc/rfc2396.txt] that would indicate a fragment, so I would take it out.;;;","14/Aug/12 14:37;davsclaus;The # is to denote a reference lookup in Camel, and is supported by any options in the URI. So Alexander is correct in his patch.

For example with the file component to use a custom filter, example on web page at
http://camel.apache.org/file2

;;;","14/Aug/12 14:46;hadrian;@claus, two wrongs don't make a right! I strongly encourage you to try understanding the spec. In this particular case we have an opportunity to fix things as the [xslt component|http://camel.apache.org/xslt.html] doesn't document a requirement to use the '#'.;;;","14/Aug/12 14:55;davsclaus;All the components support the # reference lookup. Its to make it easy to configure endpoints! It has been link this 4+ years. Any option can use that, even types that are String etc.

The # dont need to be documented in all options, as its a general idiom in Camel. There is logic in camel-core that handles this!

;;;","14/Aug/12 17:22;asbestos;Hadrian, thanks for advice. Can you share some documentation or other reference about that?
I agree, that there is no documentation about '#' in xslt component. I studied souce code of camel-core, particularly EndpointHelper.resolveReferenceParameter and i see that in this version of camel all # signs replased with empty string. In samples from Camel in action book beans with # called reference beans. Maybe this book is old, or this information is outdated, or somthing like that. 

Despite this, proplem is in createEndpoint implementation of xslt component. Currently, after parameter is set in configureXslt, it is removed from parameters Map. URIResolver resolver = resolveAndRemoveReferenceParameter(parameters, ""uriResolver"", URIResolver.class) will allways return null, after configureXslt is called, and resolver will be always initialized to new XsltUriResolver.  ;;;","14/Aug/12 20:56;hadrian;Alexander, I understand what you wanted to do and why. From one point of view Claus is somewhat right in his statement that you are ""correct in this patch"" in the sense that you followed the same pattern in use in Camel today. My statement was that the logic in camel-core is flawed and not using '#' means one less place to clean up in the future. As you point out, the 'logic' in camel-core is kinda random, replacing chars with other chars, thus creating undocumented and even unknown to us edge cases that pop up a lot lately. There are other flaws, like adding the extra '//' thus not allowing for urns at all, and others. The fact that it stayed like this for 4+ years is imho not an assurance that it's correct.
;;;","15/Aug/12 02:10;hadrian;Patch applied. Will see tomorrow if I can improve the '#' usage.;;;","15/Aug/12 05:12;asbestos;Ahh, i got it. 
But how can we today set reference property (lookup in registry) in URI?
Without # i got exception:
org.apache.camel.FailedToCreateRouteException
..............
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: uriResolver as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: javax.xml.transform.URIResolver with value uriResolver
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:347)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:367)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:297)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
	at org.apache.camel.component.xslt.XsltComponent.configureXslt(XsltComponent.java:145)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:124)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:450)
	... 33 more


I will look in other components to see, how i can lookup beans in registry. 

Thanks for help.
;;;","15/Aug/12 06:26;davsclaus;The # is documented here
http://camel.apache.org/configuring-camel.html

And its a general idiom to refer to beans, such as Alex mention above. How can you configure a non trivial option? You cannot say for example:
{code}
?uriResolver=new MyCustomUriResolver()&bla=123
{code}

The # is similar to the ""ref"" attribute in Spring Bean style configuration
{code:xml}
<bean id=""myXsltEndpoint"" class=""..."">
  <property name=""uriResolver"" ref=""myCustomUriResolver""/>
  ...
{code};;;","15/Aug/12 06:27;davsclaus;Does this issue also apply to the 2.9 branch? ;;;","15/Aug/12 07:00;asbestos;Claus, as i can see from source code, no, it does not.
And thanks for link!
;;;","15/Aug/12 09:56;bvahdat;@Alexander beforehand many thanks for your contribution.

The unit-test you've provided by your patch has got *34* checkstyle errors. Would it be possible for you to fix them and attach a patch for it:

{code}
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38:1: File contains tab characters (this is the first instance).
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41:30: 'EXPECTED_XML_CONSTANT' entspricht nicht dem Muster '^[a-z][a-zA-Z0-9]*$'.
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:43: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:44: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:45: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:47: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:49: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:50: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:52: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:53: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:54: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:55: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:56: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:57: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:60: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:62: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:64: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:65: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:67: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:68: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:69: method def throws bei Einr?cktiefe 40 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:70: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:73: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:74: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:76: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:78: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:79: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:80: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:81: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:82: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:83: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:84: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
{code}

You could run:

{code}
mvn -Psourcecheck,fastinstall clean install
{code}

to fix them. See also http://camel.apache.org/building.html if you need more details. Thanks!
;;;","15/Aug/12 11:25;asbestos;Sorry for invalid code style. Fixed and patch included. ;;;","15/Aug/12 13:37;hadrian;@Claus,

This is a discussion we'll have (again) on dev@. But to give you a couple of short answers now:
1. There was absolutely no attention given to non-trivial configuration options 4+ years ago. That slowly slipped into the current situation. No one to blame but ourselves.
2. You yourself give an example in which a '#' is not present (ref=""myCustomUriResolver"")
3. When using the XML dsl, no one would argue about the need to encode to make the xml valid, yet in the URI case some seem to argue that there can be a gray area.
4. The Camel in Action book states that ""In Camel, you configure endpoints using URIs"", which as we now know, is not quite correct. The Camel api uses the term URI all over the place (getEndpointUri()), but that's not a (String representation of a) URI.
5. You seem to imply that the only alternative is to put Java code in the URI, bulking up that ridiculous notion with the fact that the Camel URIs are badly designed, probably in an attempt to dismiss both. 

If you were fair, you would have said that you can do either of:
?uriResolver=org.example.camel.MyCustomUriResolver&bla=123
?uriResolverRef=myCustomUriResolver&bla=123

But as I said, I am waiting for the days when we'll be able to have a decent discussion and solution to fix this mess on dev@. I am patient. That's the last thing I'll say on the topic in this jira.;;;","15/Aug/12 13:54;davsclaus;Ad 5)
This is not possible. There is no xxxRef option.

For example adjusting the unit test from this ticket
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt://org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolverRef=customURIResolver due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{uriResolverRef=customURIResolver}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:148)
{code};;;","15/Aug/12 14:03;hadrian;Am I aware that there is no xxxRef option? Yes.
Do I know that if you configure an option that doesn't exist endpoint creation fails? Yes.
Why isn't a xxxRef option there? Because we didn't put it.
Who stops us from putting it there? Nothing.
Would I put it there now? No. Not until we had a real discussion on dev@ and came up with a solution for all Endpoint.

Does it matter how an option is called? Not really. It's just to be descriptive to the user.
Would xxxRef options be a solution? Probably.
Would it be the only solution? No.
Could we use the xxx options without a '#' in the value (and no internal hacks)? Absolutely.

Claus, please stop wasting my time. ;;;",,,,,,,,,,,,,
Bridging http endpoints with spaces in content path causes problem when forwarding request,CAMEL-5504,12603429,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Aug/12 10:20,14/Aug/12 10:46,14/Jul/23 05:45,14/Aug/12 10:46,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-ahc,camel-http,camel-jetty,,0,,,,,,,,,"Having spaces in the content path in the <from> jetty endpoint that is being bridged causes problem when request is forwarded.

{code}
Caused by: org.apache.camel.RuntimeExchangeException: Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI on the exchange: Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
	at org.apache.camel.component.http.helper.HttpHelper.createURL(HttpHelper.java:195)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241376,,,2012-08-14 10:20:02.0,,,,,,,,,,,"0|i027hr:",10815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@XPath annotation should ensure cleanup after evaluation,CAMEL-5501,12603221,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Aug/12 11:07,13/Aug/12 16:15,14/Jul/23 05:45,13/Aug/12 16:11,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"See CAMEL-3813

Look into the @XPath bean parameter binding and ensure its resources is cleaned up after usage.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241373,,,Mon Aug 13 16:15:09 UTC 2012,,,,,,,,,,,"0|i027h3:",10812,,,,,,,,,,,,,,,,,,,,"13/Aug/12 13:27;davsclaus;Okay i have reproduce an issue when using ognl expressions on beans that use @XPath annoations;;;","13/Aug/12 14:13;davsclaus;Its CAMEL-1930 that introduced improved concurrency in xpath builder. I think we can improved that a bit to only use a thread local for the exchange. The variable resolver do not really need to be thread local as well. But just refer to the exchange as it does today. And then we can remove the thread local on each evaluation, instead of keeping it set on the thread.

This should more nicely cleanup the resources in all situations also when using @XPath annotations in ognl method calls and whatnot.;;;","13/Aug/12 16:11;davsclaus;This also optimized xpath builder under load as there is less thread locals, and no on completion etc. And makes it for better GC as no thread locals is kept for a longer time.;;;","13/Aug/12 16:15;davsclaus;On a very crude test on my laptop by sending 33333 messages in org.apache.camel.language.XPathRouteConcurrentBigTest, i get the test to go from 90 sec to 60 sec on my laptop. Notice this is a crude test by running it locally 5 times in a row, and taking the avg. time.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-testng - The spring base test class should use @AfterMethod on teardown as its parent does,CAMEL-5500,12603205,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Aug/12 09:03,13/Aug/12 09:06,14/Jul/23 05:45,13/Aug/12 09:06,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-test,,,,0,,,,,,,,,"See nabble

http://camel.465427.n5.nabble.com/Problem-with-testng-CamelSpringTestSupport-several-contexts-runs-simultaneously-tp5716447.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241372,,,2012-08-13 09:03:08.0,,,,,,,,,,,"0|i027gv:",10811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cxf fallback convert should return the Void.value instead of null,CAMEL-5499,12603162,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Aug/12 02:08,13/Aug/12 03:47,14/Jul/23 05:45,13/Aug/12 03:47,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-cxf,,,,0,,,,,,,,,"As Camel will unregister the fallback converter if it convert the value to be null, we should avoid unregistering the fallback converter by returning the Void.value.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241371,,,Mon Aug 13 03:47:27 UTC 2012,,,,,,,,,,,"0|i027gn:",10810,,,,,,,,,,,,,,,,,,,,"13/Aug/12 03:47;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file endpoints on windows without volume name in the path url not working in some cases,CAMEL-5495,12602556,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,ay,ay,09/Aug/12 16:48,13/Aug/12 09:31,14/Jul/23 05:45,13/Aug/12 09:31,2.9.2,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"I am using file endpoints on Windows without the volume name just like the normal unix based paths look.
That means, I have something like  file:///tmp/file-in and file:///tmp/file-out

The funny thing that I noticed is that each endpoint itself works fine, but when a route is set up from one to the other, it fails because there seems to be an inconsistency in the way the windows path is handled in the camel-core's file component.

As mentioned, each file endpoint itself is working fine. For example, the consumer file endpoint configured in a route
from(""file:///tmp/file-in"").to(""mock:test"")
works fine.

Similarly, the produce file endpoint configured in a route
from(""direct:test"").to(""file:///tmp/file-out"")
works fine.

But when a route is setup to connect these two file endpoints, the producer endpoint fails to create the output file.
Concretely, there is the following code in GenericFileEndpoint.configureMessage that determines the file name.

             String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath();

            // skip leading endpoint configured directory
            String endpointPath = getConfiguration().getDirectory() + getFileSeparator();

In this particular case, the name variable is set to ""C:\tmp\file-in\sample.xml"" while the endpointPath variable is set to ""\tmp\file-in"".
So, the subsequent code to extract the file name part, shown below, fails to match the path.

            if (ObjectHelper.isNotEmpty(endpointPath) && name.startsWith(endpointPath)) {
                name = ObjectHelper.after(name, endpointPath);
            }

As a result, the file name is not extracted as ""sample.xml"" but remain unchanged as ""C:\tmp\file-in\sample.xml"".
Consequently, when the file producer endpoint tries to write this file in the file system, it tries to write a file as ""/tmp/file-out/C:\tmp\file-in\sample.xml"", resulting in an error.

I modified FileComponent and FileEndpoint so that the endpoint path is stored correctly in this case to make the above extraction code find the file name part correctly.

Attached is this proposed patch and a test case which runs on windows and on non-windows but this issue can only be demonstrated under windows.

testRouteToFileOnly and testRouteFromFileOnly work without this patch while testRouteFileToFile fails without this patch on windows.

Thanks for looking into this issue.

Regards, Aki


",windows,ay,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Aug/12 16:51;ay;trunk-camel-5495.diff;https://issues.apache.org/jira/secure/attachment/12540069/trunk-camel-5495.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241367,,,Mon Aug 13 09:31:30 UTC 2012,,,,,,,Patch Available,,,,"0|i027fr:",10806,,,,,,,,,,,,,,,,,,,,"09/Aug/12 16:51;ay;patch for trunk
;;;","13/Aug/12 09:31;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches with thanks to Aki.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Queue is Full in DefaultServicePool,CAMEL-5490,12602129,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,philippe.suray,philippe.suray,08/Aug/12 07:14,24/Oct/12 15:40,14/Jul/23 05:45,24/Oct/12 15:40,2.10.0,,,,,,,,,,,,2.10.3,2.11.0,,,camel-netty,,,,0,,,,,,,,,"I use a Netty endPoint to forward messages to a client. These messages come from an another Netty endPoint.

After several forwarded messages, an error occurs on every forwarded message:
DEBUG 2012-08-06 15:30:06,482 [New I/O  worker #27] org.apache.camel.component.netty.handlers.ClientChannelHandler - Closing channel as an exception was thrown from Netty
java.lang.IllegalStateException: Queue full
        at java.util.AbstractQueue.add(AbstractQueue.java:71)
        at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:209)
        at org.apache.camel.impl.DefaultServicePool.release(DefaultServicePool.java:96)
        at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:304)
        at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:125)
        at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:162)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
        at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:423)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:538)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:437)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
        at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:91)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:373)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:247)
        at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
",,davsclaus,njiang,philippe.suray,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Aug/12 07:16;philippe.suray;NettyTest.java;https://issues.apache.org/jira/secure/attachment/12539786/NettyTest.java","09/Aug/12 06:47;njiang;NettyTest.java.new;https://issues.apache.org/jira/secure/attachment/12539974/NettyTest.java.new",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241362,,,Wed Oct 24 15:40:50 UTC 2012,,,,,,,,,,,"0|i027en:",10801,,,,,,,,,,,,,,,,,,,,"08/Aug/12 07:16;philippe.suray;Here is a small test case.;;;","08/Aug/12 07:16;philippe.suray;See also http://camel.465427.n5.nabble.com/Error-in-DefaultServicePool-on-Netty-Producer-Queue-is-full-td5716882.html;;;","09/Aug/12 06:47;njiang;I just played with the test case and found the Exception can be fixed by using the Processor directly instead of create AsyncProcessor.
Please check out the patched NettyTest.java.new;;;","09/Aug/12 08:43;philippe.suray;Thank you for your response.
In fact in the test case, the second tcp endpoint simulate the tcp listener of one of our client who receive the forwarding messages.
Unfortunately, I have no possible action on this application.
What can I do?
;;;","09/Aug/12 11:56;njiang;Did you run the test directly with the tcp listener of your client?

I think you can add some flue control[1] on your route to work around this kind of issue, if there are so many messages to forward. 

[1]http://camel.apache.org/throttler.html
;;;","09/Aug/12 12:08;philippe.suray;Unfortunately, I cannot run the test against the server of the client.
I will try to add the throttler in the route, I'll keep you informed.
Thank you for your help.;;;","24/Oct/12 15:40;davsclaus;This has been fixed in camel-netty. We are now using commons-pool to poll Netty Channel's. This is more efficient and dont have any upper limitations.;;;",,,,,,,,,,,,,,,,,,,,,,,
HttpProducer should close temporary file in CachedOutputStream when the IOException is thrown,CAMEL-5487,12601642,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Aug/12 00:20,08/Aug/12 06:30,14/Jul/23 05:45,08/Aug/12 06:30,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-http,,,,0,,,,,,,,,"Here is the mail thread about it.
 http://camel.465427.n5.nabble.com/HTTP4-HttpProducer-close-temporary-file-in-CachedOutputStream-tp5716885.html",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241359,,,Wed Aug 08 06:30:34 UTC 2012,,,,,,,,,,,"0|i027dz:",10798,,,,,,,,,,,,,,,,,,,,"08/Aug/12 06:30;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mybatis should do a proper transaction demarcation while reading/writing from/to database.,CAMEL-5485,12601467,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,04/Aug/12 21:12,04/Aug/12 21:57,14/Jul/23 05:45,04/Aug/12 21:57,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-mybatis,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/MyBatis-Component-Bug-consumer-onConsume-hits-error-transactions-are-committed-instead-of-rollback-td5716774.html

Other than DefaultMyBatisProcessingStrategy the same issue exists by MyBatisProducer as well.

Another thing which is currently missing completley is that there's no transaction demarcation by the Producer at all while *reading* from the database, e.g. by SelectOne or SelectList statement types.",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241357,,,2012-08-04 21:12:13.0,,,,,,,,,,,"0|i027dj:",10796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't unmarshal pgp messages encrypted with ElGamal.,CAMEL-5475,12600548,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrybz,scrybz,28/Jul/12 03:52,13/Aug/12 12:26,14/Jul/23 05:45,13/Aug/12 12:26,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,, camel-crypto,,,,0,,,,,,,,,"Current strategy for finding the private key is to iterate the secret keychain and matching on the configured email address.  This is incorrect; the secret key chain should be searched by the key id found in the public key encrypted message. What happens now is the DSA signing key is matched instead of the ElGamal decryption key, and this throws java.security.InvalidKeyException.",All environments,njiang,scrybz,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,CAMEL-4549,,,,,,,,,,"29/Jul/12 01:34;scrybz;patch.txt;https://issues.apache.org/jira/secure/attachment/12538262/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,241347,,,Wed Aug 01 04:58:11 UTC 2012,,,,,,,Patch Available,,,,"0|i027bb:",10786,,,,,,,,,,,,,,,,,,,,"29/Jul/12 00:40;scrybz;The attached patch fixes the problem.  It passes all existing tests, and also includes tests I've added for ElGamal keys.;;;","29/Jul/12 01:03;scrybz;This patch is cleaner.;;;","29/Jul/12 01:34;scrybz;My clean-ups on the previously uploaded patch introduced a possible bug where the encrypted stream wouldn't be rewound after finding the private key, but before the decryption.

This is my final answer. This is diffed against the 2.10.0 version, but these files don't seem to be updated in versions later than 2.10.0. ;;;","31/Jul/12 08:37;njiang;@Bryan, 
Can you provide a test patch which shows the issue of looking up the ElGamal keys?
;;;","01/Aug/12 04:58;scrybz;@Willem
The RSA keys used for the existing tests just need to be swapped out for ElGamal keys.

delete pubring.gpg and secring.gpg from  components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/

Then with gnupg, regenerate the rings as ElGamal:
gpg --homedir components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/ --gen-key

it will ask questions as gpg is an interactive program:
For type of key
Pick DSA/ElGamal
For bit length, 1024 is fine
Pick 0 to make the key never expire
confirm yes if asked
For Real Name, use ""Super""
For email, use ""sdude@nowhere.net""
For passphrase, use ""sdude""
Confirm with O for Okay

run the unit test and watch for some failures.
apply the patches I submitted to PGPDataFormat and PGPDataFormatUtil and watch all tests pass.

svn revert the keys, and watch it pass again with the old keys.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
missing dependency to spring-web in camel-example-cxf-tomcat ,CAMEL-5472,12600365,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,26/Jul/12 19:16,26/Jul/12 19:35,14/Jul/23 05:45,26/Jul/12 19:28,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,examples,,,,0,,,,,,,,,,,muellerc,,,,,,,,,,,,,,,,,CAMEL-5473,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241344,,,2012-07-26 19:16:55.0,,,,,,,,,,,"0|i027an:",10783,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-gae gtask doesn't work,CAMEL-5470,12600285,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Jul/12 09:19,02/Aug/12 08:15,14/Jul/23 05:45,02/Aug/12 08:15,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-gae,,,,0,,,,,,,,,"I just checked the log and found the gtask doesn't work due to 
{code}
Caused by: java.lang.ClassNotFoundException: javax.xml.transform.stax.StAXSource
	at com.google.apphosting.runtime.security.UserClassLoader.loadClass(UserClassLoader.java:451)
{code}
",,bvahdat,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241342,,,Fri Jul 27 04:14:00 UTC 2012,,,,,,,,,,,"0|i027a7:",10781,,,,,,,,,,,,,,,,,,,,"26/Jul/12 10:37;njiang;Just work around this issue by doing the input stream to document transformation without using XmlConvertor.;;;","26/Jul/12 16:57;bvahdat;Not sure if the removal of the security-constraint inside web.xml was really intentional:

http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-gae/src/main/webapp/WEB-INF/web.xml?r1=1365917&r2=1365916&pathrev=1365917;;;","27/Jul/12 04:14;njiang;Sorry, it should be committed and I was change the web.xml only for test.
I will commit a quick fix for it shortly.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
RegistryBean.getBean()  is not thread safe,CAMEL-5468,12600165,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Jul/12 13:57,10/Sep/13 11:59,14/Jul/23 05:45,26/Jul/12 06:56,2.10.0,2.7.5,2.8.6,2.9.2,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"Here is the mail thread[1] of it.

[1]http://camel.465427.n5.nabble.com/ClassCastException-using-cxf-bean-td5599810.html#a5716454",,njiang,,,,,,,,,,,,,,,,,,,,CAMEL-6724,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241340,,,Thu Jul 26 06:56:37 UTC 2012,,,,,,,,,,,"0|i0279r:",10779,,,,,,,,,,,,,,,,,,,,"26/Jul/12 06:56;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms consumer doesn't send back a reply in all cases,CAMEL-5464,12599998,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,raulvk,raulvk,24/Jul/12 13:01,07/Nov/12 10:30,14/Jul/23 05:45,07/Nov/12 10:30,2.10.0,2.8.6,2.9.2,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-activemq,camel-jms,,,0,,,,,,,,,"In a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present), the endpoint will not send back replies.

This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer => processor, and Camel doesn't find the need to ""weave in"" an implicit Pipeline processor, no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn't expect them too).

As a result, these routes DON'T WORK...

{code}
<route>
   <from uri=""timer:foo?fixedRate=true&amp;period=10000"" />
   <setBody><constant>Hello Raul</constant></setBody>
   <to uri=""log:SendingRequest?showAll=true"" />
   <inOut uri=""activemq:queue:test1?requestTimeout=1000"" />
   <to uri=""log:ReceivedReply?showAll=true"" />
</route>
        
<route>
   <from uri=""activemq:queue:test1"" />
   <to uri=""log:ReceivedRequest?showAll=true"" />
</route>
{code}

... but just by adding an additional log endpoint to the second route (or any other thing, for that matter), it starts to work because Camel weaves in the Pipeline processor.

Other workarounds that work:
* -explicitly wrapping the log endpoint in a <pipeline> DSL-
* <setBody><simple>${in.body}</simple></setBody>

Or simply introducing anything that will force Camel to insert a Pipeline processor.

IMHO, there are two solutions to avoid this issue:
# Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions)
# Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply exists

I'm happy to work on a patch for Camel 2.10.1.

*EDIT:* Just wrapping the single endpoint in <pipeline /> doesn't function as a workaround.",,davsclaus,jwcarman,njiang,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Aug/12 02:21;jwcarman;CAMEL-5464.patch;https://issues.apache.org/jira/secure/attachment/12542712/CAMEL-5464.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241336,,,Wed Nov 07 10:30:32 UTC 2012,,,,,,,,,,,"0|i0278v:",10775,,,,,,,,,,,,,,,,,,,,"13/Aug/12 11:31;davsclaus;Yes #2 should be the case, as that is how the other components would have to do, eg cxf consumer etc.

;;;","28/Aug/12 02:21;jwcarman;Here's a patch that implements option #2.  Let me know if you see any regressions.  I can't get the full Maven build working on my computer right now.;;;","31/Aug/12 07:56;njiang;The patch broke some tests of the camel-jms. After digging the tests, I found the tests keep the out message null to no send the response back. It can be fixed easily by changing the MEP to InOnly.
As this feature break the backward compatibility, I don't plan to merge the patch back to other branch. ;;;","31/Aug/12 08:27;njiang;Applied patch with thanks to James.;;;","31/Aug/12 13:40;jwcarman;Okay, cool!  Sorry about the regression.  I was (and still am) having a terrible time getting the build to run locally on my machine.  I'll keep tinkering.  This is my first Mac laptop, so getting used to Java development on here is somewhat of a chore.  Perhaps I'll just switch to a VM or something

Are we going to update the fix versions/status?;;;","10/Sep/12 14:20;njiang;Applied the patch into trunk, as it breaks the behavior of old Camel version, I don't want to port it back to other branches.;;;","07/Nov/12 09:40;davsclaus;I think this fix is more important, than those odd unit-tests that was needed to change.

If you do request/reply over JMS, then you would expect Camel to send back the reply always - also if the route, only do a single step like
from JMS
  to bean

So I am working on backporting this to older branches.;;;","07/Nov/12 10:30;davsclaus;Backported to 2.10 and 2.9 branches.;;;",,,,,,,,,,,,,,,,,,,,,,
IOConverter.toInputStream opens a BufferReader which will never be closed,CAMEL-5461,12599983,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,funkmutterdekka,funkmutterdekka,24/Jul/12 12:16,26/Jul/12 07:18,14/Jul/23 05:45,26/Jul/12 07:18,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,If called with a non-null charset IOConvert.toInputStream returns a InputStream which will never close the opened BufferedReader.,,funkmutterdekka,njiang,pglebow,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Jul/12 12:20;funkmutterdekka;camel-5461.patch;https://issues.apache.org/jira/secure/attachment/12537681/camel-5461.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241334,,,Thu Jul 26 07:18:18 UTC 2012,,,,,,,Patch Available,,,,"0|i0278f:",10773,,,,,,,,,,,,,,,,,,,,"24/Jul/12 12:20;funkmutterdekka;Patch to solve the issue.;;;","26/Jul/12 07:18;njiang;Applied the patch into trunk, camel-2.10.x branch and camel-2.9.x branch with thanks to Patrick. I also added the implementation of reset method.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Folder closed too early when working asynchronously,CAMEL-5459,12599844,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jamesclonk,jamesclonk,23/Jul/12 12:57,03/Feb/13 09:56,14/Jul/23 05:45,03/Feb/13 09:56,2.10.0,,,,,,,,,,,,2.10.4,2.11.0,,,camel-mail,,,,0,patch,,,,,,,,"When using a MailConsumer connected with IMAP to a mailserver and routing the messages to SEDA or any other asynchronous endpoint, 
it can cause a com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException to happen if you are trying to process the mails/messages attachments.

This is because the IMAP folder gets closed at the end of each MailConsumer.poll()
I propose to add a new MailConfiguration option ""closeFolder"", which can override this behaviour.


Here's an example on how to reproduce the problem. (Scala code, sorry! But it should be self-explanatory)
You need a couple of mails with attachments in your mailbox to test this. 
~10 mails should be enough to cause the exceptions.



import javax.mail.internet.MimeMultipart
import org.apache.camel.impl.DefaultCamelContext
import org.apache.camel.scala.dsl.builder.RouteBuilder
import scala.io.Source

object Main { 
  def main(args: Array[String]): Unit = {
    val camelContext = new DefaultCamelContext
  
    val host = ""imap.gmail.com""
    val username = ""*****@gmail.com""
    val password = ""*****""
    
    // this will cause com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException
    val endpoint = ""imaps://""+host+""?password=""+password+""&username=""+username+""&folderName=INBOX&unseen=false&disconnect=false&mapMailMessage=true&connectionTimeout=60000""
    
    // with fix / new feature 'closeFolder' set to false
    //val endpoint = ""imaps://""+host+""?password=""+password+""&username=""+username+""&folderName=INBOX&unseen=false&disconnect=false&mapMailMessage=true&connectionTimeout=60000&closeFolder=false""
    
    camelContext.addRoutes(
      new RouteBuilder {
        endpoint
        .to(""seda:process"")
         
        from(""seda:process?concurrentConsumers=5"") ==> {
          process { ex => 
            val att = ex.getIn.getBody.asInstanceOf[MimeMultipart].getBodyPart(1)
            println(""Attachment Name:"" + att.getFileName)
            println(""Attachment Content:"" + att.getDataHandler.getContent)
            println(""Attachment Content:"" + Source.fromInputStream(att.getDataHandler.getInputStream).mkString)
            Thread.sleep(2500) // simulate some work being done here with the attachment, takes time..
          }
        }
      }
    )

    camelContext.start()
    Thread.sleep(45 * 1000)
    camelContext.stop()
  }
}
",IMAP connection to mailserver,davsclaus,jamesclonk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jul/12 12:58;jamesclonk;camel-mail-closeFolder.patch;https://issues.apache.org/jira/secure/attachment/12537562/camel-mail-closeFolder.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241332,,,Sun Feb 03 09:56:13 UTC 2013,,,,,,,Patch Available,,,,"0|i0277z:",10771,,,,,,,,,,,,,,,,,,,,"23/Jul/12 12:58;jamesclonk;Patch for MailConsumer.java and MailConfiguration.java;;;","03/Feb/13 09:56;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Context scoped exception clauses incorrectly applying across RouteBuilders,CAMEL-5456,12599590,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andreaja,andreaja,20/Jul/12 07:42,30/Sep/12 12:12,14/Jul/23 05:45,30/Sep/12 12:12,2.10.0,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,0,,,,,,,,,"The attached patch shows a bug in the DefaultExceptionPolicyStrategy or the way ExceptionPolicys are added to a RouteBuilder's errorhandler.

In ContextScopedOnExceptionMultipleRouteBuildersReverseTest, the ordering of the routes causes the onException(IllegalArgumentException.class) to added to the ExceptionProcessors for the direct:foo-RouteBuilder. When the route is run, the OnExceptionDefinition matches exactly on the exception-type, despite this OnExceptionDefiniton being registered on a different RouteBuilder. As far as we can tell, the processor is later ignored because it's identified as being from a different route-context.

We have attached corresponding tests for camel-spring that show that the issue is tied to alphabetical ordering of RouteBuilders when using contextscan.
",,andreaja,davsclaus,kaaveland,njiang,oyvindio,robinsk,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Jul/12 07:42;andreaja;camel-core-context-scope-bug.patch;https://issues.apache.org/jira/secure/attachment/12537315/camel-core-context-scope-bug.patch","20/Jul/12 07:42;andreaja;camel-spring-context-scope-bug.patch;https://issues.apache.org/jira/secure/attachment/12537316/camel-spring-context-scope-bug.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241329,,,Sat Sep 29 13:05:47 UTC 2012,,,,,,,,,,,"0|i0277b:",10768,,,,,,,,,,,,,,,,,,,,"22/Aug/12 04:59;njiang;Hi Andreas,

If you are using Context scoped exception clause，the error handler will be affect across the CamelContext, as the JAVA DSL onException() is called one by one in the two different route builder, the route will be effected different if the onException is called in different sequences. I don't think there is way to fix it in JAVA DSL, unless we setup the context scoped exception in one RouteBuilders or using the route scoped exception clauses.

The error the test can be fixed by setting the onException to be route scoped like the one I just committed a fixed test[1] into the trunk.

[1] http://svn.apache.org/viewvc?rev=1375896&view=rev
;;;","22/Aug/12 06:01;andreaja;It can't possibly be correct that route-context-scoped exception clauses are dependent on the order of the routes they are tied to. That's insane. ;;;","22/Aug/12 09:53;njiang;That is caused by the onException() are called in different sequence in RouteBuilder.configure method.
If you are using the spring DSL, you will never have this kind of issue.
{code}
   <camel>
      <onException>...</onException>
      <onException>...</onException>
      <route> ... </route>
      <route> ... </route>
   </camel>
{code} ;;;","22/Aug/12 10:05;andreaja;So we've correctly identified a bug in the Java DSL then?;;;","29/Sep/12 13:05;davsclaus;Yes this issue is related to Java DSL. It has a slightly different initialization logic than XML DSL etc.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Allow configuring dataCoding independend of alphabet,CAMEL-5455,12599351,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,18/Jul/12 21:41,07/Nov/14 10:54,14/Jul/23 05:45,19/Jul/12 21:18,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-smpp,,,,0,,,,,,,,,"See
- http://camel.465427.n5.nabble.com/Datacoding-issue-td5715971.html
- http://camel.465427.n5.nabble.com/Datacoding-Alphabet-issue-in-SMPP-td5280997.html",,daniel.pocock,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241328,,,Fri Nov 07 10:54:43 UTC 2014,,,,,,,,,,,"0|i02773:",10767,,,,,,,,,,,,,,,,,,,,"18/Jul/12 21:50;muellerc;Now it's possible to configure the dataCoding independent from the alphabet.
I would like to back port this change also to the 2.9.x and 2.10.x branch because I considered the old behavior as bug. Because the dataCoding is now a separate option (with a default value) and not derived from the provided alphabet, this COULD break existing user code. Is this fine for you, if we add this (as potential breaking stuff) to the release notes and do the back port?;;;","07/Nov/14 10:54;daniel.pocock;Just some observations about dataCoding and alphabet:

- alphabet (either the header or config value) is still being used exclusively when deciding which charset to use for converting the message body (possibly a String) to a byte array for the wire

- if both CamelSmppDataCoding and CamelSmppAlphabet headers are present, CamelSmppDataCoding is used in the SMPP message

- if neither header is present on the exchange, then the alphabet config value is ignored, the dataCoding config value (default 0) is chosen.

- data coding does not just contain alphabet details, it also contains data about message class.  If message class is specified, it clobbers the lower two bits of the alphabet.  This is a limitation of the protocol, not Camel.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-gae silently fails (needs updates to use latest CamelHttpTransportServlet),CAMEL-5454,12599325,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jaysonraymond,jaysonraymond,18/Jul/12 19:17,02/Aug/12 08:16,14/Jul/23 05:45,02/Aug/12 08:16,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,examples,,,,0,,,,,,,,,"Example silently fails.
It depends on CamelHttpTransportServlet which appears to have changed at 2.7 -  Spring context initializing RouteBuilder is never read.
Following steps were taken in 2.10 to get example to function again:

1) web.xml: needs CamelHttpTransportServlet configuration as it is on http://camel.apache.org/servlet-tomcat-example.html including adding Spring ContextLoaderListener.

2) pom.xml: Needs the following dependency added to access Spring ContextLoaderListener:

        <!-- we need spring web to read context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>3.0.7.RELEASE</version>
        </dependency>

",All,jaysonraymond,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241327,,,Thu Jul 26 09:17:29 UTC 2012,,,,,,,,,,,"0|i0276v:",10766,Regression,,,,,,,,,,,,,,,,,,,"26/Jul/12 09:17;njiang;I just committed a fix camel context loading issue of camel-example-gae. It also fix a log issue of camel-exmple-gae.
When I tested the example on the GAE, I found there is another issue CAMEL-5470 of GAE task. I will try to fix it shortly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"An AWS key with ""+"" gets stripped out by DefaultCamelContext.normalizeEndointUri  and URISupport.parseQuery for at least the SQS Component",CAMEL-5453,12599134,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,whaley,whaley,17/Jul/12 16:38,25/Mar/13 16:20,14/Jul/23 05:45,25/Mar/13 16:20,2.10.0,,,,,,,,,,,,2.11.0,,,,camel-aws,camel-core,,,0,,,,,,,,,"When defining a camel route that includes an endpoint for the SQS component that includes the accessKey and secretKey as parameters, such as the following:

{code}
aws-sqs://queue-name?accessKey=ABCDEFGHIJKLMNOP&secretKey=ABCDEFGHI+JK
{code}

if the secretKey contains a + then that + is stripped out in URISupport.parseQuery and the parameters received by SqsComponent.createEndpoint has a space where the + used to be in the secretKey, thus making calls to SQS by the SqsComponent fail.  

Even if the endpoint URI string is URL encoded such that secretKey=ABCDEFGHI%2BJK, then DefaultCamelContext.normalizeEndointUri will decode the %2B to a ""+"" earlier in the call stack before URISupport.parseQuery is called (which then removes it).

A ""+"" is a valid and common character in generated AWS secret keys and thus needs to be left alone when it is placed in the parameter Map<String,Object> received in SqsComponent.createEndpoint, or replaced with custom parsing in SqsComponent.createEndpoint.",,davsclaus,muellerc,whaley,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241326,,,Mon Mar 25 16:20:03 UTC 2013,,,,,,,,,,,"0|i0276n:",10765,,,,,,,,,,,,,,,,,,,,"17/Jul/12 17:22;whaley;This can be worked around by adding an AmazonSQSClient to the registry with the following (which is hinted at in the documentation for other edge cases, but not this one):
{code}
            
AmazonSQSClient sqsClient = new AmazonSQSClient(new BasicAWSCredentials(accessKeyId,secretKey));
JndiContext jndiContext = new JndiContext();
jndiContext.bind(""amazonSQSClient"", sqsClient;

CamelContext camelContext = new DefaultCamelContext(jndiContext);
camelContext.addRoutes(new RouteBuilder() {
    @Override
    public void configure() throws Exception {
        from(""direct:whatever"").to(""aws-sqs://queue-name?amazonSQSClient=#amazonSQSClient"");
        //... other routes here
    }
});            
camelContext.start();   
{code};;;","17/Jul/12 20:15;muellerc;Yes, it's a bug. It worked for me in the past. Now, I get an exception that the signature does not match.
Another workaround is to generate a new key at: https://portal.aws.amazon.com/gp/aws/securityCredentials
;;;","17/Jul/12 21:14;muellerc;This is a bit tricky here. To send a '\+' sign to AWS, we have to encode it to '%2B', because otherwise the '\+' sign is interpreted as ' ' sign.
But because Camel use (quasi / so called) URI's, we have to encode it twice. This means we have to encode the '+' sign to '%252B'.
Camel should decode it to '%2B' which should be send to AWS.

Line 109 of [URISupport.java|https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/URISupport.java] prevents this.

running
{code}
git blame camel-core/src/main/java/org/apache/camel/util/URISupport.java
{code}

show that this change was done by Hadrian at 3rd of February:
{code}
04066a8e (Hadrian Zbarcea   2012-02-03 07:14:21 +0000 109)                         String value = URLDecoder.decode(parameter.substring(p + 1).replaceAll(""%"", ""%25""), CHARSET);
{code}

This change belongs to [CAMEL-4954|https://issues.apache.org/jira/browse/CAMEL-4954];;;","17/Jul/12 21:17;muellerc;Hadrian, could you please have a look at it? I know you like the URI encoding/decoding stuff... ;-);;;","25/Mar/13 16:20;davsclaus;Fixed by CAMEL-6176;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Blueprint should wait for camel-core to be started since there is a strong dependency,CAMEL-5451,12598996,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,16/Jul/12 16:58,16/Jul/12 17:19,14/Jul/23 05:45,16/Jul/12 17:19,,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,,,,,0,,,,,,,,,"When a camel/blueprint bundle is started without camel-core being started previously, there is a problem where the camel context factory bean tries to access the {{properties}} component, which is only available when {{camel-core}} is started.

We need to ensure that the blueprint definitions created by the namespace handler also contains the needed reference to the {{properties}} component in order to make sure that blueprint will always wait for {{camel-core}} to be started (and the properties component actually available) before initializing the camel context.
",,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241324,,,2012-07-16 16:58:46.0,,,,,,,,,,,"0|i02767:",10763,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CxfPayloadConverter converts to NodeList by default, affecting performance",CAMEL-5449,12598987,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,16/Jul/12 15:54,16/Jul/12 17:40,14/Jul/23 05:45,16/Jul/12 17:40,2.9.2,,,,,,,,,,,,2.10.1,2.9.3,,,camel-cxf,,,,0,,,,,,,,,"
The first thing CxfPayloadConverter tries to do is convert the payload to a NodeList.  When used in combination of something like XSLT which would produce a ""String"", this results in a full DOM being created for the String.   With the streaming support in the CXF component, it should FIRST attempt to convert to ""Source"" and use that.   This can then be a StreamSource or similar that can be streamed directly.

",,dkulp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241322,,,2012-07-16 15:54:26.0,,,,,,,,,,,"0|i0275r:",10761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mock endpoint should not add the expect header check task every time we call the expectedHeaderReceived(),CAMEL-5440,12598509,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Jul/12 08:06,24/Jul/12 01:14,14/Jul/23 05:45,24/Jul/12 01:14,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"If the message header value can just be consumed once, the mockEndpoint will complain the header value is null in second check, even the header value is checked rightly once.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241313,,,Tue Jul 24 01:14:56 UTC 2012,,,,,,,,,,,"0|i0273r:",10752,,,,,,,,,,,,,,,,,,,,"24/Jul/12 01:14;njiang;Applied patch into trunk, camel 2.10.x and camel 2.9.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for batch consumer's empty messages to aggregator,CAMEL-5437,12598323,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fuzebest,fuzebest,11/Jul/12 07:01,12/Jul/12 06:59,14/Jul/23 05:45,12/Jul/12 06:59,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"Aggregator supports completion based on the batch consumer data (option completionFromBatchConsumer)

Some batch consumers (eg. File) can send an empty message if there is no input (option sendEmptyMessageWhenIdle for File consumer).

Aggregator is unable to handle such messages properly - the messages are aggregated, but Aggregator never completes.


Here is the relevant fragment from AggregateProcessor.isCompleted(String,
Exchange)

int size = exchange.getProperty(Exchange.BATCH_SIZE, 0, Integer.class);
if (size > 0 && batchConsumerCounter.intValue() >= size) {
    ....
}


Please add support for this combination of options.",,davsclaus,fuzebest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241310,,,Wed Jul 11 17:29:33 UTC 2012,,,,,,,,,,,"0|i02733:",10749,,,,,,,,,,,,,,,,,,,,"11/Jul/12 17:29;davsclaus;The empty message should have batch details so the EIPs can work with the message.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamically added SEDA-route is not working,CAMEL-5432,12597991,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,hlang,hlang,09/Jul/12 08:05,09/Jul/12 16:12,14/Jul/23 05:45,09/Jul/12 16:12,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,0,,,,,,,,,"Dynamically removing and adding a SEDA-route creates a not working route in Camel 2.10.0.
It is working in 2.9.2.

Test-Code:
{code}
public class DynamicRouteTest extends CamelTestSupport {

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""seda:in"").id(""sedaToMock"").to(""mock:out"");
            }
        };
    }
    
    @Test
    public void testDynamicRoute() throws Exception {
        MockEndpoint out = getMockEndpoint(""mock:out"");
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
        CamelContext camelContext = out.getCamelContext();
        camelContext.stopRoute(""sedaToMock"");
        camelContext.removeRoute(""sedaToMock"");
        
        camelContext.addRoutes(createRouteBuilder());
        out.reset();
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
    }
} 

{code}",,bvahdat,hlang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241305,,,Mon Jul 09 16:12:27 UTC 2012,,,,,,,,,,,"0|i0271z:",10744,,,,,,,,,,,,,,,,,,,,"09/Jul/12 13:16;bvahdat;CAMEL-5261 has broken the regression.;;;","09/Jul/12 16:12;bvahdat;Thanks for reporting and providing the unit-test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sending null in body when forcing JMS message type to Object throws an Exception,CAMEL-5429,12597867,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bjpeter,bjpeter,07/Jul/12 00:36,08/Jul/12 08:49,14/Jul/23 05:45,08/Jul/12 08:49,2.9.0,,,,,,,,,,,,2.10.1,2.9.3,,,camel-jms,,,,0,,,,,,,,,"I set ""jmsMessageType=Object"", and when I try to send a null in the body, I get an exception. See program and log.",,bjpeter,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Jul/12 00:49;bjpeter;Exception.txt;https://issues.apache.org/jira/secure/attachment/12535486/Exception.txt","07/Jul/12 00:48;bjpeter;TestCamelJmsWithNull.java;https://issues.apache.org/jira/secure/attachment/12535485/TestCamelJmsWithNull.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241302,,,Sun Jul 08 07:42:03 UTC 2012,,,,,,,,,,,"0|i0271b:",10741,,,,,,,,,,,,,,,,,,,,"07/Jul/12 00:37;bjpeter;Test program.;;;","07/Jul/12 08:49;davsclaus;Whats your use-case for sending JMS messages without any body?;;;","07/Jul/12 09:50;bjpeter;Before I used ""jmsMessageType=Object"", the application was sending null in a message, and it worked. However, I ran into a problem when I was trying to send a map of non-primitive, serialized objects. (See CAMEL-5293.) Using ""jmsMessageType=Object"" solved CAMEL-5293, but now I can no longer send null in a message as an exception will be thrown.;;;","08/Jul/12 07:33;davsclaus;This is by design. 

We will add a new option {{allowNullBody}} you can configure to true, as in your use-case to allow sending messages with no message body.;;;","08/Jul/12 07:42;davsclaus;And yes as we by default allow null bodies in the other message types, we should do that as well for Object message types. So I will fix that as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel stream makes Karaf console hang,CAMEL-5426,12597762,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,cschneider,cschneider,06/Jul/12 12:36,23/Nov/12 08:49,14/Jul/23 05:45,23/Nov/12 08:49,2.10.0,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-stream,,,,0,,,,,,,,,"features:chooseurl camel 2.10.0
features:install camel-blueprint camel-stream

Deploy the following file into the deploy folder
https://github.com/cschneider/Karaf-Tutorial/blob/master/camel/simple-blueprint/simple-camel-blueprint.xml
Undeploy the file again

Now the karaf shell hangs

@Hadrian
I think this may be caused by as the issue does not happen with camel 2.9.1
https://fisheye6.atlassian.com/changelog/camel?cs=1339933

Could you take a look at it?
",,cschneider,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241299,,,Fri Nov 23 08:49:10 UTC 2012,,,,,,,,,,,"0|i0270n:",10738,,,,,,,,,,,,,,,,,,,,"23/Nov/12 08:49;davsclaus;Fixing this as I am looking at the unresolved bugs, and this was fairly easy to fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@MockEndpointsAndSkip does not work,CAMEL-5424,12597663,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,msvab,msvab,05/Jul/12 22:25,06/Jul/12 12:47,14/Jul/23 05:45,06/Jul/12 12:47,2.10.0,,,,,,,,,,,,2.10.1,,,,camel-test,,,,0,,,,,,,,,"Due to copy & paste error in CamelSpringTestContextLoader.handleMockEndpointsAndSkip @MockEndpointsAndSkip annotation is ignored and it looks for @MockEndpoints annotation. Test for this annotation is wrong as well, as it tries to mock {{mock:*}} endpoint that cannot be mocked again.

I've attached a patch that fixes both CamelSpringTestContextLoader and the test. In case I missed anything, I'm happy to improve the patch.",,davsclaus,msvab,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Jul/12 08:23;msvab;MockEndpointsAndSkip-did-not-work.patch;https://issues.apache.org/jira/secure/attachment/12535326/MockEndpointsAndSkip-did-not-work.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241297,,,Fri Jul 06 12:47:46 UTC 2012,,,,,,,,,,,"0|i02707:",10736,,,,,,,,,,,,,,,,,,,,"06/Jul/12 07:50;davsclaus;Michal, can you re-attach your patch and mark [x] in grant license to Apache. Otherwise we cannot accept your patch.;;;","06/Jul/12 08:23;msvab;Doh, missed that one.;;;","06/Jul/12 12:47;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel transforms relative uri in a bad way,CAMEL-5420,12597473,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnodet,gnodet,04/Jul/12 15:23,02/May/13 02:29,14/Jul/23 05:45,25/Sep/12 06:51,2.10.0,,,,,,,,,,,,2.11.0,,,,,,,,0,,,,,,,,,"When defining an endpoint with a relative uri such as 
{code}
   protocol:mypath1/mypath2
{code}
camel transforms the given uri into the following:
{code}
   protocol://mypath1/mypath2
{code}

Note that this transformation is performed before the component is given the uri as it is done in DefaultCamelContext#getEndpoint() in the call to normalizeEnpointUri().

This has the big problem that mypath1 is not considered the path anymore, but rather the authority (host:port).

So if a component wants to support both relative and absolute uris, it has no real way to know if the original uri contained an authority or not.
It is possible to support absolute uris with no authority though, as
{code}
   protocol:/mypath1/mypath2
{code}
is converted to
{code}
   protocol:///mypath1/mypath2
{code}

I'm not sure why relative uris are transformed into absolute uris, which does not really seem like a good idea to me.
",,davsclaus,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4857,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241293,,,Tue Sep 25 06:51:40 UTC 2012,,,,,,,,,,,"0|i026zb:",10732,,,,,,,,,,,,,,,,,,,,"25/Sep/12 06:51;davsclaus;Components now support using raw uris.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-soap - Sets wrong namespace for faults,CAMEL-5419,12597445,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Jul/12 12:03,04/Jul/12 13:36,14/Jul/23 05:45,04/Jul/12 13:36,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.9.3,,,camel-soap,,,,0,,,,,,,,,"If there is an exception on the Exchange which gets marshalled then the namespace of the fault is not the same namespace as the envelope.

The namespace on soap 1.1 is: ""http://schemas.xmlsoap.org/soap/envelope/""
But the fault is using soap 1.2: ""http://www.w3.org/2003/05/soap-envelope""

We should use the same namespace so its consistent.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241292,,,2012-07-04 12:03:24.0,,,,,,,,,,,"0|i026z3:",10731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scala Archetype with incorrect Maven Eclipse configuration,CAMEL-5417,12597356,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bruno.borges,bruno.borges,03/Jul/12 22:17,04/Jul/12 01:52,14/Jul/23 05:45,04/Jul/12 01:52,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,camel-scala,,,,0,,,,,,,,,"The Scala archetype (camel-archetype-scala) has incorrect configuration for the Maven Eclipse Plugin to generate Eclipse files integrated with the Scala IDE.

classpath, nature and build commands 

Source: http://www.assembla.com/wiki/show/scala-ide/With_Maven_CLI",,bruno.borges,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Jul/12 22:17;bruno.borges;patch.diff;https://issues.apache.org/jira/secure/attachment/12534994/patch.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241290,,,Wed Jul 04 01:52:08 UTC 2012,,,,,,,Patch Available,,,,"0|i026yn:",10729,,,,,,,,,,,,,,,,,,,,"04/Jul/12 01:52;njiang;Applied patch with thanks to Bruno.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple does not handle empty values in predicates properly,CAMEL-5415,12597332,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,m0zgster,m0zgster,03/Jul/12 19:56,04/Jul/12 07:24,14/Jul/23 05:45,04/Jul/12 07:24,2.10.0,2.9.0,2.9.1,2.9.2,,,,,,,,,2.10.1,2.9.3,,,camel-core,,,,0,,,,,,,,,"Example code:
{code:xml}
...
<choice>
    <when>
        <simple>${property.someProperty} == ''</simple>
        ...
    </when>
...
{code}

Error message: right must be specified",,ciand7,davsclaus,m0zgster,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241288,,,Wed Jul 04 07:24:19 UTC 2012,,,,,,,,,,,"0|i026y7:",10727,,,,,,,,,,,,,,,,,,,,"04/Jul/12 07:24;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SqsEndpoint can't retrieve existing queue url with visibility timeout different than default,CAMEL-5414,12596544,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,lpezet,lpezet,01/Jul/12 20:12,19/Sep/12 20:23,14/Jul/23 05:45,19/Sep/12 20:23,2.9.2,,,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-aws,,,,0,,,,,,,,,"This would happen in 2 scenarios:
1. Queue already exists with vsibility timeout different than 30 seconds (say use AWS Console to create a queue and set a different visibility timeout). Using this queue as an endpoint and problem will occur
2. Queue DOES NOT already exist and is created by SqsEndpoint (createQueue). If ""defaultVisibilityTimeout"" configured, it will still work...the first time. But restarting the endpoint (or the whole camel app) and the problem will occur.",,lpezet,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/12 20:15;lpezet;SqsEndpointTest.java;https://issues.apache.org/jira/secure/attachment/12534172/SqsEndpointTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241287,,,Wed Sep 19 20:23:05 UTC 2012,,,,,,,,,,,"0|i026xz:",10726,,,,,,,,,,,,,,,,,,,,"01/Jul/12 20:15;lpezet;This is the test which I think follows Amazon behavior and shows that getting the queue url with the current SqsEndpoint implementation is broken.
I'd be more than happy to provide the patch if someone could just check the test and give me the go :)
Maybe I missed something and it's not broken...;;;","28/Aug/12 22:00;muellerc;I can confirm, this is an issue. Thanks for reporting!
Would you like to work on a patch? I think I could provide a fix by tomorrow...;;;","05/Sep/12 19:55;muellerc;I committed a patch which fixed this behavior. The SQS endpoint will now list the existing queues and use the url of the existing queue *AND ITS ATTRIBUTES!* If the queues doesn't exist, we will create a new one with the provided attributes.
Is this also your expected behavior? Or should we also call 'setQueueAttributes' and update all of them if the queue already exists?;;;","06/Sep/12 05:18;lpezet;Thanks a lot Christian. 
I would expect the endpoint to be setup as specified in the URI options, so I'd vote for setting the queue attributes when the queue already exists. 
What do you think?;;;","06/Sep/12 21:52;muellerc;Yes, makes sense for me too. I will work on it in the next days.;;;","19/Sep/12 20:23;muellerc;I updated the behavior as discussed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"ObjectAlreadyExistsException when ""redeploying"" routes that uses CronScheduledRoutePolicy",CAMEL-5412,12596403,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pontus.ullgren,pontus.ullgren,29/Jun/12 13:44,29/Jun/12 15:01,14/Jul/23 05:45,29/Jun/12 15:01,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.9.3,,,camel-quartz,,,,0,,,,,,,,,"When a route that has a CronScheduledRoutePolicy is removed it does not properly clean up the quartz jobs. 

The result (apart from possible memory leak) is that if the route is removed from the context and then readded with the same route id a ObjectAlreadyExistsException.


This is done using the following steps.
1. Stop the route
2. Remove the route (and it's endpoints) from the context.
3. (Re)add the route to the context using the same name.

Attached is a testcase that shows the problem.


I've solved this by adding my own implementation of onRemove (that calls doStop()) to CronScheduledRoutePolicy.
",,davsclaus,pontus.ullgren,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jun/12 13:45;pontus.ullgren;CAMEL-5412.zip;https://issues.apache.org/jira/secure/attachment/12533982/CAMEL-5412.zip","29/Jun/12 13:50;pontus.ullgren;CronScheduledRoutePolicy.patch;https://issues.apache.org/jira/secure/attachment/12533984/CronScheduledRoutePolicy.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241285,,,Fri Jun 29 15:01:21 UTC 2012,,,,,,,Patch Available,,,,"0|i026xj:",10724,,,,,,,,,,,,,,,,,,,,"29/Jun/12 13:45;pontus.ullgren;Unit testcase;;;","29/Jun/12 13:50;pontus.ullgren;Simple patch that ""works for me""(tm);;;","29/Jun/12 15:01;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT Endpoint does not correctly return the MQTT-Payload,CAMEL-5411,12596395,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rajdavies,ralfkornberger,ralfkornberger,29/Jun/12 13:02,15/Aug/12 17:27,14/Jul/23 05:45,15/Aug/12 17:27,2.10.0,,,,,,,,,,,,2.10.1,2.11.0,,,camel-mqtt,,,,0,,,,,,,,,"MQTT Endpoint does not correctly return the MQTT-Payload. It returns the whole MQTT Message (header + payload).

The bug is in line 89 of MQTTEndpoint.java (version 2.11, but also in 2.10)

 exchange.getIn().setBody(body.getData());

must become

 exchange.getIn().setBody(body.toByteArray()); 

because getData() ignores the offset (to skip the MQTT header) set in the body byte array.
","Linux 64bit, JDK 1.6, Mosquitto MQTT Broker",davsclaus,rajdavies,ralfkornberger,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jun/12 13:05;ralfkornberger;MQTTEndpoint.java.patch;https://issues.apache.org/jira/secure/attachment/12533977/MQTTEndpoint.java.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,241284,,,Wed Aug 15 17:27:54 UTC 2012,,,,,,,,,,,"0|i026xb:",10723,,,,,,,,,,,,,,,,,,,,"29/Jun/12 13:05;ralfkornberger;Patch with bug fixed :-);;;","29/Jun/12 13:13;davsclaus;Isn't there some headers from MQTT, you would need to map into Camel Message Headers as well?;;;","29/Jun/12 13:31;ralfkornberger;I use Camel to fetch a Message (XML, Protobuf, ...) from the Broker. Using Camel-MQTT, as it is, the message is fetched, but the body still includes the MQTT header (topic and binary stuff before) which I don't want. I only want the payload (=my xml or protobuf stuff). 
Here is an example:

I sent the String 'Test123' via MQTT to Camel. Using the example code from your website 


 from(""mqtt:bar?subscribeTopicName=test.mqtt.topic"").transform(body().convertToString()).bean (myProcessingBean);

I expect body to be 'Test123'. But instead body is something like '0�^C^@^Ktest.mqtt.topicTest123' (the stuff before test.mqtt.topic are nonprintable chars).
So the body is the whole MQTT message instead of just the payload. I makes no sense to have the full MQTT message as body here because you can't really decode/spilt it well
without going deeply into the MQTT implemenation of the the MQTT Client (from org.fusesource.mqtt-client in my case). 
But when you apply the patch, it (in my opinion) sets body corretly to 'Test123'.






;;;","29/Jun/12 14:43;davsclaus;Ralf, yeah your patch makes sense. But then we may also want to map headers from MQTT to Camel Message Headers. So you get both body + headers from MQTT mapped to the Camel Message.

;;;","29/Jun/12 14:43;davsclaus;Rob, can you take a look;;;","13/Jul/12 09:42;rajdavies;Added fix in Subversion: Committed revision 1361126. There's still some weirdness (timing issue) with publishing, which should be addressed in next release of ActiveMQ;;;","15/Aug/12 17:27;davsclaus;Merged to 2.10 branch as well.;;;",,,,,,,,,,,,,,,,,,,,,,,
Threads EIP hangs Junit4 tests using adviceWith,CAMEL-5406,12596144,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,egherardini,egherardini,27/Jun/12 19:12,30/Jun/12 17:31,14/Jul/23 05:45,30/Jun/12 17:31,2.10.0,2.9.1,,,,,,,,,,,2.10.1,2.8.6,2.9.3,,camel-core,tests,,,0,,,,,,,,,"If the {code} threds() {code} DSL keyword is used in a route and a Junit4 test is performed, the test hangs indefenitely.

The issue is descibed here:

http://camel.465427.n5.nabble.com/Threads-EIP-hangs-Unit-Tests-JUnit4-td5715031.html

please find attached a self-consistent sample project to reproduce it.",,davsclaus,egherardini,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jun/12 19:14;egherardini;threads-eip-bug-advicewith.rar;https://issues.apache.org/jira/secure/attachment/12533693/threads-eip-bug-advicewith.rar",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241279,,,Sat Jun 30 10:13:50 UTC 2012,,,,,,,,,,,"0|i026w7:",10718,,,,,,,,,,,,,,,,,,,,"27/Jun/12 19:14;egherardini;A sample project reproducing the issue. I apologize for the bad variable names but I had to heavely refactor code prior to publishing it.;;;","27/Jun/12 19:26;egherardini;This reproduces also on 2.10-SNAPSHOT;;;","30/Jun/12 10:13;davsclaus;Its the intercept mock to endpoints that didnt support the async routing engine properly. So this issue is only when unit testing and using that feature.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Transport loses HTTP Matrix parameters,CAMEL-5405,12596121,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,27/Jun/12 17:24,27/Sep/12 12:17,14/Jul/23 05:45,27/Sep/12 12:17,2.9.2,,,,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-cxf,,,,0,,,,,,,,,"DefaultCxfMesssageMapper (note the typo - to be fixed in a follow-up JIRA) wrongly initializes CXF Message Message.REQUEST_URI property with the value of Camel Exchange.HTTP_PATH, even though Camel Exchange.HTTP_URI is available.

The net effect is that the HTTP matrix parameters if any attached to the last HTTP path segment are lost. Another side-effect is that Exchange.HTTP_PATH will contain the decoded value (done at HTTPServletRequest level) which can lead to the matching issues at the JAX-RS level.

A simple patch is attached",,davsclaus,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jun/12 17:26;sergey_beryozkin;camel5405.diff;https://issues.apache.org/jira/secure/attachment/12533678/camel5405.diff","08/Aug/12 10:14;sergey_beryozkin;camel5405_2.diff;https://issues.apache.org/jira/secure/attachment/12539802/camel5405_2.diff",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241278,,,Thu Sep 27 11:40:04 UTC 2012,,,,,,,Patch Available,,,,"0|i026vz:",10717,,,,,,,,,,,,,,,,,,,,"29/Jun/12 06:05;njiang;Applied patch into trunk, 2.9.x and 2.8.x branch with thanks to Sergey.
I also added ASL header for the test file.;;;","08/Aug/12 10:12;sergey_beryozkin;Propagating the actual Request URI causes the mis-match at the CXF level when Camel Servlet is also used. For example, Camel Servlet will set Request URI as ""/webapp/HelloWorld"", but also set the base URI as ""servlet:///HelloWorld"". 
To calculate the base address, CXF needs HttpServletRequest propagated too;;;","08/Aug/12 10:14;sergey_beryozkin;HttpServletRequest and HttpServletResponse are also propagated, without introducing CXF HTTP Transport or Servlet API dependencies ;;;","08/Aug/12 14:25;njiang;@Sergey,

I just applied the patch into the trunk, it could be great if you can provide an integration test to show the whole story :).;;;","09/Aug/12 07:53;sergey_beryozkin;Hi Willem - thanks for applying it. This will fix one of our failing demos. 
I can promise here I'll take an action and work on creating an integration test. It may take a bit of time - I'm mostly offline till the end of next week, but I'll get it done.
Cheers;;;","09/Aug/12 07:58;sergey_beryozkin;Btw, propagating servlet request/response will also make sure that they can be injected as JAX-RS Context objects or accessed as JAX-WS properties, so the fix is good :-);;;","09/Aug/12 08:08;njiang;Hi Sergey,

I will keep this issue open until we get the integration test committed :).;;;","27/Sep/12 11:19;davsclaus;Any update on this. If a new test is needed then create a new ticket as we need this ticket to be in the changelog for upcoming releases.;;;","27/Sep/12 11:40;sergey_beryozkin;I'll get the test done asap, still committed to it; I'm not sure it is needed though for this issue, propagating HTTP Servlet references is needed for some of our demos to work but it is useful irrespectively of that; please feel free to close this issue.;;;",,,,,,,,,,,,,,,,,,,,,
MinaProducer does not disconnect on response timeouts,CAMEL-5404,12596086,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thxmasj,thxmasj,27/Jun/12 13:33,29/Jun/12 08:29,14/Jul/23 05:45,29/Jun/12 08:28,2.9.2,,,,,,,,,,,,2.10.1,2.8.6,2.9.3,,camel-mina,,,,0,,,,,,,,,"When MinaProducer is configured with {noformat}sync=true&disconnect=true&disconnectOnNoReply=true&timeout=X{noformat} and a timeout occurs, the connection is not disconnected.

First of all disconnectOnNoReply only applies to consumers, which can be (and was) very confusing. Allthough this is according to documentation.

Secondly this might (and did!) lead to wrong response messages set on an Exchange. The following scenario:
1. Client sends a request and waits for a response (InOut) on exchange A.
2. Client times out waiting for a response after X milliseconds.
3. Client sends another request on exchange B.
4. Server sends the response for exchange A.
5. Client gets response for exchange A on exchange B (disaster!).

This happens because the producer reuses exchange A's connection for exchange B, because it was not disconnected when exchange A timed out.",,davsclaus,thxmasj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241277,,,Fri Jun 29 08:29:09 UTC 2012,,,,,,,,,,,"0|i026vr:",10716,,,,,,,,,,,,,,,,,,,,"29/Jun/12 08:28;davsclaus;Thanks for reporting.

Fell free to give the 2.9 branch a test spin on your system.;;;","29/Jun/12 08:29;davsclaus;Applied fix to camel-mina2 on 2.10 branch as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Not all RoutePolicy callback methods are invoked,CAMEL-5401,12596063,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,arubtsov,arubtsov,27/Jun/12 09:48,29/Jun/12 11:46,14/Jul/23 05:45,29/Jun/12 11:46,2.10.0,2.9.2,,,,,,,,,,,2.10.1,2.9.3,,,camel-core,camel-spring,,,0,,,,,,,,,"I am looking for a way to get notified when route is being stopped/started (resumed/suspended). I have implemented trivial logging _RoutePolicy_ (extending from _RoutePolicySupport_). However, during my tests I found that only _onInit_, _onExchangeBegin_ and _onExchangeDone_ methods are invoked. I tried both approaches - stopping/starting and suspending/resuming, but neither one worked.

Route state is being handled from another thread using ""CamelContext.*Route"" methods group. 

I am using SpringCamelApplicationContext. Route is configured using: _routePolicyRef_ attribute of _route_ tag.

I am fairly new to Camel. Let me know if I am missing something. Thanks.","Win 7 x64, jdk 7u4",arubtsov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241274,,,Fri Jun 29 08:51:36 UTC 2012,,,,,,,,,,,"0|i026v3:",10713,,,,,,,,,,,,,,,,,,,,"29/Jun/12 08:51;davsclaus;Thanks for reporting.

Yeah I just spotted a bug with the routePolicyRef not invoking certain callbacks.
It works in Java DSL though, so its an issue when using the routePolicyRef as you would do in Spring XML.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
specify Export-Package version for wrap:mvn:org.fusesource.leveldbjni,CAMEL-5391,12595734,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,25/Jun/12 01:03,25/Jun/12 01:07,14/Jul/23 05:45,25/Jun/12 01:07,,,,,,,,,,,,,2.10.0,,,,,,,,0,,,,,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241264,,,Mon Jun 25 01:07:52 UTC 2012,,,,,,,,,,,"0|i026sv:",10703,,,,,,,,,,,,,,,,,,,,"25/Jun/12 01:07;ffang;commit fix
http://svn.apache.org/viewvc?rev=1353371&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange's headers lost after pass through dynamicRouter if the consume from activemq,CAMEL-5381,12595207,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,somchaij,somchaij,20/Jun/12 05:05,25/Jun/12 10:16,14/Jul/23 05:45,20/Jun/12 07:57,2.10.0,2.8.5,2.9.2,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-activemq,,,,0,,,,,,,,,"Please see the unit test below, if consume from other endpoint such as direct, things work properly but does not when consume from activemq",,davsclaus,somchaij,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Jun/12 05:05;somchaij;DynamicRoutersWithJMSMessageLostHeadersIssueTest.java;https://issues.apache.org/jira/secure/attachment/12532646/DynamicRoutersWithJMSMessageLostHeadersIssueTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241254,,,Mon Jun 25 10:16:57 UTC 2012,,,,,,,,,,,"0|i026qn:",10693,,,,,,,,,,,,,,,,,,,,"20/Jun/12 06:45;davsclaus;Try with 2.9.3 or 2.10 as it should be fixed.;;;","20/Jun/12 07:02;somchaij;I try this unit test over the trunk (2.10-SNAPSHOT) and it's failed;;;","20/Jun/12 07:57;davsclaus;Fixed now;;;","20/Jun/12 07:58;davsclaus;A workaround is to convert the message to a String prior to setting the header, eg

.convertBodyTo(String.class);;;","20/Jun/12 08:37;somchaij;Can you also, give me the example on how this workaround being used ?;;;","20/Jun/12 09:14;davsclaus;Yes just add the piece of code from above, before you do the .setHeader;;;","20/Jun/12 09:31;somchaij;I try with version 2.9.2, does not seem to be the workaround., can you show me more of the example ? or explanation why convert the body to String class can help on this. :);;;","20/Jun/12 13:47;davsclaus;The convert will transform the message from JmsMessage to DefaultMessage. And the bug was in JmsMessage with the header lost, when using the dynamic eip pattern (also the routing slip eip as well).;;;","20/Jun/12 14:01;davsclaus;Fixed this in jcr and spring-integration components as well.;;;","21/Jun/12 07:53;somchaij;Seem like ConvertBodyProcessor does not changes the Message type (from JMSMessage to DefaultMessage), then I found this workaround instead (used of class SetBodyProcessor)

.setBody(body(String.class))

Any mistakes please do correct me.;;;","21/Jun/12 07:55;davsclaus;Convert body has been fixed to act like setBody in a later release;;;","25/Jun/12 10:12;somchaij;Just curios, will this actually be fixed in 2.10.0 (from your update of the ""Fix Version/s"" field) ? (did not see the source code from tag 2.10) (OR you will then update the tag of 2.10 to newer revision ?);;;","25/Jun/12 10:16;davsclaus;2.10 has not been released. There was a RC but its been cancelled, and a new RC is being cut later today/tomorrow. So yes this fix will be in the 2.10 release when its GA.;;;",,,,,,,,,,,,,,,,,
Mail component does not work as expected (Email Deletion is partially broken et Disconnect does not work well),CAMEL-5376,12594930,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alexiskinsella,alexiskinsella,18/Jun/12 12:38,04/Sep/13 09:05,14/Jul/23 05:45,26/Aug/13 18:02,2.10.3,2.9.5,,,,,,,,,,,2.11.2,2.12.0,,,camel-mail,,,,0,,,,,,,,,"The way disconnect is implemented causes issues with some other options of the consumer. For instance ""disconnect"" option is not compatible with ""delete"" option.

The delete action is done in completion action (processCommit: line 185). On line 305, processCommit method checks if folder is open, but ""disconnect"" option force folder at null value at the end of poll method (Line 149).

I guess disconnect method should be called on completion after any other completion actions occured: It is not possible to make completion actions if connection to mail server is closed.

The result of the usage of disconnect option and delete option is a NullPointerException on test: ""if (!folder.isOpen())"" statement on line 308.

Issue should be always reproductible.

I let you fix the priority of the issue, but it is an annoying issue even if there is a workaround by disabling disconnect option ..."," - Exchange, but should happen with any mail server, since it is not directly related to (See above)
 - Apache James Server 3.X",alexiskinsella,davsclaus,muellerc,,,,,,,,,,,,,,,CAMEL-6703,,,,,,,,,,,,,,,"18/Apr/13 09:33;alexiskinsella;MailConsumer.diff;https://issues.apache.org/jira/secure/attachment/12579297/MailConsumer.diff","17/Dec/12 14:33;alexiskinsella;MailConsumer.java;https://issues.apache.org/jira/secure/attachment/12561291/MailConsumer.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,241249,,,Mon Aug 26 18:02:36 UTC 2013,,,,,,,,,,,"0|i026pj:",10688,,,,,,,,,,,,,,,,,,,,"19/Jun/12 05:15;davsclaus;Can you post more details, such as the route you use? And the stacktrace as well.;;;","24/Jun/12 10:06;davsclaus;Alexis, any update on this, so we can help you?;;;","24/Jun/12 11:01;alexiskinsella;Hello, I will have some time this week to provide some basic example for this issue. In the meantime, I found some workaround by avoiding disconnection from mail server.;;;","14/Dec/12 14:59;alexiskinsella;Hi, here are some news about this issue.

Let me restart some explanations about some issues on mail consumer.

First problem:

 * When you consume mails with delete option enabled, mails consumed will be marked with DELETED flag on completion callback. Not sure, but I guess completion is async since it happens at the end of exchange processing. Anyway, mail deletion is effective on folder close. 

Folder close action is triggered in method _poll_, just after _processBatch_ method call which is in charge of processing mails. Therefore message completion, which mark messages as deleted, may happen after folder close which is in charge of sending deleted information back to the mail server.

As a consequence some messages may remain deleted in inflight messages, but instruction is never sent back to mail server. 

Folder close (and deletion of messages) should happen after completion of last message. If you try to stop a route with inflight messages, you get a gracefull shutdown with 300 seconds to wait.

Do you think process of mail deletion can be improved ? -> Is it possible to safely close folder after completion of messages ?

Or can you let open folder as long as connection is open or something like that ?

In case you want to ease your tests, I developped some tooling to bootstrap an in memory pop3 server based on Apache James Server. You can easily check behaviors of each sides. Source code is here: https://github.com/akinsella/mock-servers (pop3 and imap4 mock servers are stable, others are experimental)

My testing protocol is the following : 
 - Start pop3 mock server with 100 mails injected in mail box: 
 - Start a Camel context that consume 5 mails at a time, mail is sent on some simple route forwarding message to some ActiveMQ JMS queue.
 from(""pop3://jode@localhost:9110?debugMode=true&fetchSize=5&delete=true&consumer.delay=1000&connectionTimeout=20000&mapMailMessage=false"")
   .to(""activemq:queue:someQueue"");
 - On first poll, you can check with debug of MailConsumer that usualy at least one message is not deleted on server (Server receives 4 delete commands instead of 5 expected), and therefore one message stay inflight

disconnect=true option is also broken due to the sync close of folder and connection  and async process of message deletion.

You can mail me if you have any question.

Best regards,

Alexis
;;;","17/Dec/12 14:33;alexiskinsella;Hi, I tried to find some nice workaround, but it is a little bit tricky due to the way pop3 messages are deleted through close of the folder.

I ended by fixing the issue with a CountDownLatch on the number of exchanges to process before closing resources. CountDownLatch is decremented on completion of exchange
At the end of poll the countdownlatch timeouts if await time is not over, and therefore never locks the consumer. 
I added a timeout having for duration the delay of the timer, maybe there should be a new configuration property dedicated to this new value.

By the way, all messages are correctly deleted on each poll, and the fix rely mainly on the fact that release of resources is done after completion of the process of last message.

I added some guarding on countdownlatch to avoid poll if countdownlatch is not null, it should not happen since countdownlatch is nulled on finally clause.

I hope it will help to improve mail components. 

Best regards,

Aleixs;;;","22/Jan/13 13:21;davsclaus;Please do *not* change priority level. ;;;","22/Jan/13 13:52;alexiskinsella;Ok, my mistake.;;;","22/Jan/13 13:54;alexiskinsella;By the way, is there a change to fix this issue in 2.9.X or 2.10.X versions ?;;;","22/Jan/13 19:03;muellerc;Yes, both branches are still supported. It depends when we fix this issue.;;;","27/Mar/13 10:43;muellerc;Alexis, can you attach a patch instead of the new implementation. This makes it much more easier for us to review what you changed (http://camel.apache.org/contributing.html).
And we also have to have a unit test which show the issue which is resolved after applying the patch. Do you also consider to provide an unit test?
This all will speed up applying your proposed change...;;;","18/Apr/13 09:35;alexiskinsella;Hi,

I provided the change as a patch based on git diff command between the patched source code and original 2.9.4 version.

Sorry, there is no test to validate the change.;;;","26/Aug/13 18:02;davsclaus;mail consumer commit/rollback logc do not allow handover to ensure running on same thread as polling to use the same mail session.;;;",,,,,,,,,,,,,,,,,,
Shutting down one of the contexts breaks async redeliveries in others: RedeliveryErrorHandler has static reference to a thread pool,CAMEL-5372,12560843,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,soboleiv,soboleiv,15/Jun/12 22:47,16/Jun/12 14:00,14/Jul/23 05:45,16/Jun/12 11:54,2.9.2,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,0,,,,,,,,,"ErrorRedeliveryHandler has static reference to a thread pool used for scheduling retries, thus when it's stopped it stops a pool used by other handler instances(e.g. from other contexts), thus they now can't redeliver.",,davsclaus,soboleiv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jun/12 22:47;soboleiv;patch_redeliveries_threading_cleanup.txt;https://issues.apache.org/jira/secure/attachment/12532255/patch_redeliveries_threading_cleanup.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241245,,,Sat Jun 16 14:00:27 UTC 2012,,,,,,,Patch Available,,,,"0|i026on:",10684,,,,,,,,,,,,,,,,,,,,"16/Jun/12 11:54;davsclaus;Thanks for reporting and providing unit test.
I used the test and fixed the thread pool to be per camel context ;;;","16/Jun/12 14:00;soboleiv;Thank you very much for the quick turnaround:) Looking forward to getting this released:);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultJettyHttpBinding should not convert binary HTTP body,CAMEL-5367,12560613,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,metatech,metatech,14/Jun/12 09:22,18/Jun/12 13:55,14/Jul/23 05:45,18/Jun/12 13:55,2.6.0,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jetty,,,,0,,,,,,,,,"In class DefaultJettyHttpBinding, method ""extractResponseBody"", any non-Java HTTP body is considered as string.
This corrupts binary files such as images when camel-jetty is used as a proxy http://camel.apache.org/how-to-use-camel-as-a-http-proxy-between-a-client-and-server.html
Only bodies with MIME types of non-binary data should be converted to strings.
Method ""doWriteDirectResponse"" of class ""DefaultHttpBinding"" (in camel-http) converts it again, which corrupts it even more.
",,davsclaus,metatech,,,,,,,,,,,,,,,,,CAMEL-5274,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,241240,,,Mon Jun 18 13:55:54 UTC 2012,,,,,,,,,,,"0|i026nj:",10679,,,,,,,,,,,,,,,,,,,,"15/Jun/12 07:16;davsclaus;Can you try with latest Camel releases as we say on the support page
http://camel.apache.org/support

Also what are the exact HTTP header / body you send to the Camel jetty endpoint? The HTTP headers need to indiciate its binary data.;;;","15/Jun/12 09:53;metatech;Claus,

I created the following route :
        <route id=""proxy-console"">
            <from uri=""jetty:http://0.0.0.0:9007/console/system/console?matchOnUriPrefix=true&amp;chunked=true""/>
            <to uri=""jetty:http://localhost:8181/system/console?bridgeEndpoint=true&amp;throwExceptionOnFailure=false""/>
        </route>

And I call the following URL :
http://localhost:9007/console/system/console/res/flags/en.gif
which is corrupted.

The content-type is ""image/gif"".

CAMEL-5274 is probably the same problem.
;;;","15/Jun/12 10:31;davsclaus;Can you try with chunked=false;;;","15/Jun/12 11:21;metatech;The original file (via direct URL) is 367 bytes.
With a camel-jetty proxy :
- chunked=false -> 358 bytes (1 character set conversion only)
- chunked=true -> 658 bytes (2 character set conversions)
;;;","18/Jun/12 13:55;davsclaus;Now fixed when chunked=false as well.
This together with CAMEL-5274 fixes this all together.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Exception thrown from destination resolver should trigger Camel exception handling,CAMEL-5363,12560343,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Jun/12 13:09,12/Jun/12 13:35,14/Jul/23 05:45,12/Jun/12 13:35,2.9.2,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-Error-handling-throwing-exception-not-moving-to-error-queue-tp5714076.html

The jms producer should catch unhandled exceptions from the Spring JMS, such as its destination resolver. And ensure the callback is invoked, to let Camel error handler be triggered.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241236,,,2012-06-12 13:09:16.0,,,,,,,,,,,"0|i026mn:",10675,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel features file doesn't validate,CAMEL-5360,12560250,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,muellerc,muellerc,11/Jun/12 21:55,20/Jun/12 20:01,14/Jul/23 05:45,20/Jun/12 03:36,2.9.2,,,,,,,,,,,,2.10.0,,,,karaf,,,,0,,,,,,,,,"If you execute
$camel/platforms/karaf>mvn clean install -Pvalidate

it fails in the feature definition validation for the following components:
camel-quickfix
camel-cxf
camel-cdi
",,davsclaus,hadrian,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,KARAF-1564,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241233,,,Wed Jun 20 08:12:51 UTC 2012,,,,,,,,,,,"0|i026lz:",10672,,,,,,,,,,,,,,,,,,,,"12/Jun/12 02:47;njiang;camel-quickfix
quickfix 1.5.2_1 bundle is on the way, we could wait for it a while.

camel-cxf
Karaf features validate plugin cannot load the full features which was included. As the camel-itest-osgi can vaild the CXF related feature works, we can revisit it after fixing the issue of validate plugin.

camel-cdi
For the camel-cdi, current we don't have the cdi container works in OSGi,
I also checked the code of camel-cdi, it is related on Apache detaspike, we may need some time to get it work with other cdi container. ;;;","12/Jun/12 11:15;davsclaus;Okay the validation now only fails on camel-cxf.
I guess the problem lies in Apache CXF itself, as we use the cxf and cxf-spec features.;;;","17/Jun/12 07:02;njiang;I think we can resolve this issue as camel-cxf feature validation is do by camel-itest-osgi.;;;","17/Jun/12 10:27;muellerc;I sent a mail to dev@ and asked JB and Dan to have a look into the CXF feature file and/or the maven-feature-plugin. The real issue should be solved (also if it's not a Camel issue) because we using it and it doesn't work anymore for us for the camel-cxf feature.;;;","20/Jun/12 02:10;hadrian;The camel-cxf feature validation still fails and caused the release builds to fail. Looking into it.;;;","20/Jun/12 03:36;hadrian;Not sure why this issue was marked as fixed. Adding explicit dependencies to the relevant cxf features fixes the validation problem, although it shouldn't have been necessary. There may be an issue with transitive feature dependencies.;;;","20/Jun/12 08:12;njiang;The validation issue is caused by the validate plugin, even you are using the latest patch karaf feature plugin. The CXF 2.6.1 feature work out of box.
I already fix the cxf feature validation issue in 2.6.2-SNAPSHOT this week against the patched karaf feature plugin.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-castor does not work in apache service mix modules,CAMEL-5358,12560223,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jtv,jtv,11/Jun/12 18:44,21/Jan/13 16:10,14/Jul/23 05:45,21/Jan/13 16:10,2.8.5,2.9.2,,,,,,,,,,,2.10.4,2.11.0,2.9.6,,osgi,,,,0,,,,,,,,,"Sorry for putting this in the wrong component but I did not see a camel-castor component.

By default, the castor org.exolab.castor.mapping.Mapping will use the class's class loader to resolve java classes declared in the castor mapping XML file.  However when the CastorDataFormat is used an a service mix OSGi module, the class loader the contains the Java classes is not the same as the class loader that loads the Mapping object.  Therefore it cannot load the mapping file because the Java classes cannot be resolved.  Instead the constructor that takes Classloader as an argument should be called when initializing the mapping object.  The classloader it should use is the same classloader used to resolve the castor mapping XML file.

The following change in AbstractCastorDataFormat seemed to resolve the problem.

public XMLContext getXmlContext(ClassResolver resolver) throws Exception {
        if (xmlContext == null) {
            xmlContext = new XMLContext();

            if (ObjectHelper.isNotEmpty(getMappingFile())) {
                Mapping xmlMap = new Mapping(
                		Thread.currentThread().getContextClassLoader());
                xmlMap.loadMapping(resolver.loadResourceAsURL(getMappingFile()));
                xmlContext.addMapping(xmlMap);
            }




","Apache Service Mix: MacOS, Linux, Windows",davsclaus,jtv,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241231,,,Mon Jan 21 15:56:03 UTC 2013,,,,,,,,,,,"0|i026lj:",10670,,,,,,,,,,,,,,,,,,,,"12/Jun/12 13:02;jtv;The code I have included isn't quite right.  Using the Thread.currentThread().getContextClassLoader() may not work if the java objects are defined in a different OSGi bundle then where the data format is declared.;;;","12/Jun/12 15:23;njiang;It is a common practice to use the TCCL to handle the issue that you faced, but when you need to load the classes from other bundle, you need to update your application bundle which holds the camel context to import the package which has the class from other bundle.;;;","21/Jan/13 15:56;davsclaus;It should use the getContextClassLoader API from CamelContext, which in OSGi will be the classloader from the application bundle.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
URI normalization - Should detect already percent encoded values,CAMEL-5357,12560154,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/12 11:39,02/May/13 02:29,14/Jul/23 05:45,12/Jun/12 09:27,,,,,,,,,,,,,2.10.0,,,,camel-core,,,,0,,,,,,,,,"If an uri has a percent encoded value, eg using %20, %25 etc, then the normalization logic in Camel should detect this and keep the value as is.

Currently it would end up double encoding %25, that becomes %2525, and so forth.

Its the code in UnsafeUriCharactersEncoder that has the bug",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5355,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241230,,,Tue Jun 12 08:32:13 UTC 2012,,,,,,,,,,,"0|i026lb:",10669,,,,,,,,,,,,,,,,,,,,"12/Jun/12 08:09;davsclaus;Now we detect the % sign and only encodes if it needs to be, eg not already encoded, eg if you have %20, %25 etc. Then thats already encoded.

There is some good details about url encode from wikipedia
http://en.wikipedia.org/wiki/Url_encode;;;","12/Jun/12 08:32;davsclaus;This bug has been partly fixed by CAMEL-4425, but failed to encode % itself to %25.
Albeit using the % sign is seldom used. However can be used by the SQL component.

So the fix is to detect the % sign and check if its already decimal encoded or not.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF endpoint doesn't play nice with doTry/doCatch,CAMEL-5356,12560153,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,jensgr,jensgr,11/Jun/12 11:37,21/Dec/17 17:41,14/Jul/23 05:45,26/Jul/17 18:57,2.8.3,,,,,,,,,,,,2.20.0,,,,camel-cxf,,,,2,,,,,,,,,"When using a CXF client endpoint to call a web service via SOAP/HTTP there are two possible error scenarios:

1) The call fails immediately with an exception (e.g. because the service is down/the address is wrong)
2) The call ""succeeds"" but returns a SOAP fault. This could also signal an error condition to the application.

Currently, using doTry/doCatch doesn't work properly in either scenario because, apprently, the CXF endpoint nulls the message when receiving an exception or fault.",,davidkarlsen@gmail.com,davsclaus,eximius,githubbot,jensgr,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Jun/12 11:39;jensgr;camelTryCatch.zip;https://issues.apache.org/jira/secure/attachment/12531665/camelTryCatch.zip","25/Jul/17 13:37;onders;camelTryCatch_now.zip;https://issues.apache.org/jira/secure/attachment/12878798/camelTryCatch_now.zip",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241229,,,Thu Dec 21 17:41:02 UTC 2017,,,,,,,,,,,"0|i026l3:",10668,,,,,,,,,,,,,,,,,,,,"11/Jun/12 11:39;jensgr;Here is a test case with both scenarios. Note that the test also shows another (related?) issue: For the first test to succeed the convertBodyTo is required (despite stream caching being turned on). For the last test case, the convertBodyTo must not be present, however.;;;","12/Jun/12 14:15;davsclaus;There is a handleFault you can enable to turn SOAP faults into exceptions, which Camels error handler can react upon.
;;;","12/Jun/12 14:58;jensgr;At least in POJO mode it seems like a SOAP fault is handled like an exception anyway. Either way, using handleFault=true doesn't change the outcome of the test cases.;;;","21/Jun/12 13:31;davsclaus;Thanks for the tests cases. The #1 situation should of course be propagated back to the caller, if sending failed due some exception.
;;;","21/Jun/12 13:33;davsclaus;Lets see if we can get this fixed in a future patch releases of the Camel branches. 

In terms of #2 then the idea would be that when you use handleFault=true then Camel turns SOAP Faults into exceptions, which try .. catch ought to react upon.;;;","21/Jul/17 07:56;onders;I tried to run the test with latest versions

as pom below 

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">

  <modelVersion>4.0.0</modelVersion>
  <packaging>jar</packaging>

  <groupId>de.dz.camel</groupId>
  <artifactId>trycatch-test</artifactId>
  <version>1.0</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.source.version>1.8</java.source.version>
    <java.target.version>1.8</java.target.version>
    <camel.version>2.18.4</camel.version>
    <cxf.version>3.1.12</cxf.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.8.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-cxf</artifactId>
        <version>${camel.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-spring</artifactId>
        <version>${camel.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-bundle</artifactId>
        <version>${cxf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.6.1</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.6.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cxf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.6.1</version>
          <configuration>
            <source>${java.source.version}</source>
            <target>${java.target.version}</target>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
{code}

Have not debugged deeply? Anyone has an initial idea by the first look?



org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route tryCatchRoute: Route(tryCatchRoute)[[From[cxf:bean:routerEP]] -> [ConvertBo... because of ServiceConstructionException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1779)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:138)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:353)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at de.dz.camel.test.TryCatchTest.setup(TryCatchTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route tryCatchRoute: Route(tryCatchRoute)[[From[cxf:bean:routerEP]] -> [ConvertBo... because of ServiceConstructionException
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:143)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3666)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3573)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3359)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3213)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:184)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3008)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3004)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3027)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3004)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2970)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:275)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:136)
	... 36 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:197)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211)
	at org.apache.camel.component.cxf.CxfConsumer.createServer(CxfConsumer.java:72)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:66)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:252)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:103)
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:167)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141)
	... 49 more
Caused by: java.io.IOException: Cannot find any registered HttpDestinationFactory from the Bus.
	at org.apache.cxf.transport.http.HTTPTransportFactory.getDestination(HTTPTransportFactory.java:269)
	at org.apache.cxf.binding.soap.SoapTransportFactory.getDestination(SoapTransportFactory.java:135)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:84)
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:63)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:182)
	... 57 more

;;;","21/Jul/17 08:26;jensgr@gmx.net;cxf-bundle no longer exists with CXF 3.x. You probably need

{code}
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-transports-http-jetty</artifactId>
        <version>${cxf.version}</version>
      </dependency> 
{code};;;","25/Jul/17 13:38;onders;pom is updated with latest released dependencies;;;","25/Jul/17 13:52;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1847

    CAMEL-5356 - handle if the value is an empty collection

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-5356

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1847.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1847
    
----
commit 2c654d97c7f4332ce1aa07b694be4bd12fd545f4
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-25T13:51:26Z

    CAMEL-5356 - handle if the value is an empty collection

----
;;;","25/Jul/17 21:52;onders;{{<convertBodyTo type=""java.lang.String""/> }} in spring.xml file requires custom converter development. (once convertBodyTo is removed, all tests pass in camelTryAndCatch_now example. the issue is not related to try catch by the looks of it. it is complete conversion issue.)
because cxf returns {{org.apache.cxf.message.MessageContentsList}} as an empty list.

it is either required to write customer converter or accepting empty list collection as non-convertable object.
as [~davsclaus] mentioned in github comment like _an empty collection should still be convertable_, it is nice to have custom converter. the issue seems to be invalidated. I propose closing it by marking 'not a problem';;;","26/Jul/17 18:59;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1847
;;;","21/Dec/17 17:41;eximius;Unfortunately, the this bug is still valid in some cases: https://issues.apache.org/jira/browse/CAMEL-12101;;;",,,,,,,,,,,,,,,,,,
camel-sql - Should support % sign in query,CAMEL-5355,12560150,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/12 10:58,02/May/13 02:29,14/Jul/23 05:45,12/Jun/12 09:29,2.8.5,2.9.2,,,,,,,,,,,2.10.0,,,,camel-sql,,,,0,,,,,,,,,"See nabble


We should look into supporting the % sign in the sql component.
It should possible be less strict in uri validation as people can enter SQL queries. And to make it easy, they should just be able to dump in the SQL as is.

We should also consider adding an option to refer to a SQL that is enlisted in the registry.

Also people should be able to externalize their SQL in a .properties file and have Camel lookup that using the {{ }} notation",,davsclaus,hadrian,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5357,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241228,,,Wed Jun 13 14:15:16 UTC 2012,,,,,,,,,,,"0|i026kv:",10667,,,,,,,,,,,,,,,,,,,,"11/Jun/12 11:22;davsclaus;CAMEL-4425 broke this, as it changed UnsafeUriCharactersEncoder to exclude the % sign. 

The % sign should be percent encoded, if you want to use it as is, eg % should be %25 to indicate the % sign itself.
http://en.wikipedia.org/wiki/Url_encode

The % sign is otherwise used to escape values, such as space, becomes %20.;;;","11/Jun/12 13:43;hadrian;URIs that configure endpoints should be valid URIs as defined by [RFC-2396|http://www.ietf.org/rfc/rfc2396.txt] or stop claiming that Camel uses URIs. Tools expect that and many components are unusable for that matter. Maybe we should have a serious discussion on dev@ about that because this issues comes back over and over again.;;;","12/Jun/12 09:29;davsclaus;The % sign is now supported if specified as %25 which is according to URI encoding rules.

Discussion opened on @dev;;;","13/Jun/12 14:02;hadrian;I am not sure if this issue should be marked as fixed only in 2.10. As only tests were added, I'd say that camel works as designed in the already released 2.9.2 and 2.8.5, right?;;;","13/Jun/12 14:13;davsclaus;CAMEL-5357 fixes this issue, by supporting using decimal encoding in uri.
;;;","13/Jun/12 14:15;davsclaus;I added a link to CAMEL-5357 as that fixes this issue, by allowing end users to use the decimal encoded value of %25 to indicate the % sign, accordingly to the uri encoding rules.

At first I did not want to backport this to the previous branches (eg 2.9 and 2.8), without discussing on @dev.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Uptime reported by Camel can be incorrect for values > 1 day.,CAMEL-5348,12559852,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,markwaller,markwaller,08/Jun/12 14:56,11/Jun/12 07:08,14/Jul/23 05:45,11/Jun/12 07:08,2.9.2,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,0,,,,,,,,,Similar to issue KARAF-760 the context.getUptime() reports invalid durations - such as '19 days 54 hours'. Problem is in org/apache/camel/util/TimeUtils.java,,markwaller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241221,,,2012-06-08 14:56:49.0,,,,,,,,,,,"0|i026jb:",10660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-solr feature missing the bundle for http4 client,CAMEL-5346,12559797,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jun/12 06:34,09/Jun/12 13:18,14/Jul/23 05:45,09/Jun/12 13:18,,,,,,,,,,,,,2.10.0,,,,karaf,,,,0,,,,,,,,,Just found the solr bundle is the dependencies of http4 client by running the validation on the apache-camel feature.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241219,,,Fri Jun 08 06:38:06 UTC 2012,,,,,,,,,,,"0|i026iv:",10658,,,,,,,,,,,,,,,,,,,,"08/Jun/12 06:38;njiang;I just checked camel-2.9.x feature, as we are using the solr 3.5.x, it doesn't has the dependency of http4 client. We don't need to port this patch to camel 2.9.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shaded concurrentlinkedhashmap-lru conflicts with existing jar,CAMEL-5342,12559629,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,belamiru,belamiru,07/Jun/12 01:33,14/Jun/12 13:25,14/Jul/23 05:45,14/Jun/12 13:25,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"Package com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru is included/shaded inside the camel-core jar.

It is not very nice if concurrentlinkedhashmap-lru.jar is already on the path. It is a deal breaker, if their versions are different. For example cassandra-1.1.1 requires ConcurrentLinkedHashMap$Builder.maximumWeightedCapacity(), which is missing from the version included in camel.

It would be nice if concurrentlinkedhashmap-lru was included as a normal dependency. Comment in the pom.xml says ""Shade the googlecode stuff for OSGi"". Well, if that is strictly required, maybe it could be better included in camel-core-osgi package.

In any case, if it must be shaded at all, it would be safer to use relocation property of the maven-shade-plugin. In this case, camel could stay with the version it wants, without conflicting with explicit dependencies.",,belamiru,ben.manes,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241215,,,Thu Jun 14 13:25:01 UTC 2012,,,,,,,,,,,"0|i026hz:",10654,,,,,,,,,,,,,,,,,,,,"08/Jun/12 04:57;ben.manes;CLHM v1.3 includes an OSGi manifest, if that helps.;;;","14/Jun/12 13:25;njiang;Updated the shade plugin configure for it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel aggregation example generates an error whenever the completion predicate is entered.,CAMEL-5333,12559335,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Jun/12 07:59,05/Jun/12 08:02,14/Jul/23 05:45,05/Jun/12 08:02,2.8.5,2.9.3,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,examples,,,,0,,,,,,,,,"The camel aggregate example will generate an error every time that someone uses the completion predicate 'STOP'.

The issue is the type converter dont swallow conversion errors anymore.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241206,,,2012-06-05 07:59:27.0,,,,,,,,,,,"0|i026fz:",10645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when using bare SOAP parameter binding with payload mode,CAMEL-5331,12559267,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gertvanthienen,gertvanthienen,04/Jun/12 20:35,15/Jun/12 21:47,14/Jul/23 05:45,15/Jun/12 21:47,2.10.0,2.8.5,2.9.2,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-cxf,,,,0,,,,,,,,,"When combining a webservice that uses bare SOAP parameter binding with payload mode in camel-cxf, you get this NullPointerException:

{noformat}
java.lang.NullPointerException
        at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:877)
        at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:512)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:457)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
...
{noformat}",,davsclaus,flume,hadrian,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jun/12 20:38;gertvanthienen;0001-Fix-for-bare-SOAP-binding-camel-cxf-payload-mode-NPE.patch;https://issues.apache.org/jira/secure/attachment/12530855/0001-Fix-for-bare-SOAP-binding-camel-cxf-payload-mode-NPE.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241204,,,Fri Jun 15 21:47:26 UTC 2012,,,,,,,Patch Available,,,,"0|i026fj:",10643,,,,,,,,,,,,,,,,,,,,"04/Jun/12 20:38;gertvanthienen;I have added a unit test and a (very simplistic) fix for this problem ready in a local git branch, but because I'm not that familiar with the CXF and camel-cxf codebase, I'm attaching it to this issue first before committing it so other people can take a look or perhaps suggest a better solution.;;;","15/Jun/12 14:14;njiang;@Gert,
The patch looks good, please go ahead to apply it into the trunk.;;;","15/Jun/12 15:47;davsclaus;Willem, gert is on vacation. Can you commit this, so we get it in the 2.10 release that Hadrian is cutting early next week.;;;","15/Jun/12 21:47;hadrian;Thanks Gert for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Validator Component Fails on XSD with Classpath Relative Imports,CAMEL-5321,12558702,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sully6768,sully6768,30/May/12 23:55,01/Jun/13 19:18,14/Jul/23 05:45,31/May/12 03:15,2.10.0,,,,,,,,,,,,2.10.0,2.9.3,,,,,,,0,,,,,,,,,"When using the Validator Component with an XSD file from a Jar that contains a relative import, the component will throw a FileNotFoundException.

This is due to the ObjectHelper.loadResourceAsStream(String) operation attempting to load the classpath resource using file path semantics that will not resolve canonically.

Test case and patch to follow.

[Thread Reference|http://camel.465427.n5.nabble.com/org-apache-camel-RuntimeCamelException-java-io-FileNotFoundException-Cannot-find-resource-in-classpaI-td5713557.html]

Best Regards,
Scott England-Sullivan
http://fusesource.com",,bvahdat,njiang,petercgrant,sully6768,,,,,,,,,,,,,,,,,,,CAMEL-6412,,,,,,,,,,"31/May/12 00:08;sully6768;CAMEL-5321.patch;https://issues.apache.org/jira/secure/attachment/12530304/CAMEL-5321.patch","31/May/12 00:02;sully6768;camel-validator-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12530303/camel-validator-test.tar.gz",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241194,,,Thu May 31 09:57:53 UTC 2012,,,,,,,,,,,"0|i026db:",10633,,,,,,,,,,,,,,,,,,,,"31/May/12 00:02;sully6768;Test Case Project;;;","31/May/12 00:08;sully6768;ObjectHelper and unit test patch;;;","31/May/12 03:15;njiang;Applied patch into trunk and 2.9.x branch with thanks to Scott.
BTW, I took the test resources which are not included in the patch from the test resource jars.
 ;;;","31/May/12 03:41;sully6768;Willem,

For the test to be accurate you have to leave the resources in the jar file.  When the files are in the source path they are resolved as a file and as such will pass regardless.  It is only when the files are resolved with a ""jar"" protocol that the error can occur.  I wasn't sure how that should be applied in the patch which is why I left it out pending a discussion.

Let me know if you have any further questions.

Scott ES
http://fusesource.com;;;","31/May/12 06:25;njiang;After went through the thread reference and debugging the code, I found we still need to let validator to load the resource from jar file. I will commit a quick fix for that shortly.;;;","31/May/12 06:28;njiang;We need to find a way to do the test without introduce the system scope dependency to the camel-core. Maybe I should move the test to the integration testsuit. ;;;","31/May/12 09:48;bvahdat;The removal of the XSD files through:

http://svn.apache.org/viewvc?view=revision&revision=1344597

Now causes the following test:

{code}
mvn test -Dtest=ValidatorSchemaImportTest
{code}

to fail with:

{code}
...
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/relativeparent/child/child.xsd
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsInputStream(ResourceHelper.java:92)
	at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:44)
...
{code}
;;;","31/May/12 09:57;njiang;@Babak,
Sorry I forgot to remove the ValidatorSchemaImportTest, I will commit a patch shortly.;;;",,,,,,,,,,,,,,,,,,,,,,
NettyConverter throws NullPointerException when Exchange is not set,CAMEL-5317,12558432,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldywicki,ldywicki,ldywicki,29/May/12 14:08,29/May/12 14:50,14/Jul/23 05:45,29/May/12 14:50,,,,,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,0,netty,,,,,,,,In Camel TypeConverter API we have two ways to convert payload - with exchange or without. NettyConverter doesn't support ChannelBuffer -> toString conversion without exchange instance and throws NullPointerException.,,davsclaus,ldywicki,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/May/12 14:14;ldywicki;CAMEL-5317.patch;https://issues.apache.org/jira/secure/attachment/12530043/CAMEL-5317.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241190,,,Tue May 29 14:50:22 UTC 2012,,,,,,,,,,,"0|i026cf:",10629,,,,,,,,,,,,,,,,,,,,"29/May/12 14:14;ldywicki;Proposed patch contains fix with fallback to default String constructor if no exchange is set.;;;","29/May/12 14:50;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-blueprint fails to install on Karaf 3 as it does not accept the version 1.0.0,CAMEL-5315,12558404,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,29/May/12 09:51,29/May/12 10:02,14/Jul/23 05:45,29/May/12 10:02,2.9.2,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,3.0.0,,,,,0,,,,,,,,,"karaf@root()> feature:install camel-blueprint
Error executing command: Could not start bundle mvn:org.apache.camel/camel-blueprint/2.10-SNAPSHOT in feature(s) camel-blueprint-2.10-SNAPSHOT: Unresolved constraint in bundle org.apache.camel.camel-blueprint [171]: Unab
le to resolve 171.0: missing requirement [171.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.aries.blueprint)(version>=0.3.0)(!(version>=1.0.0)))

",,cschneider,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241188,,,Tue May 29 10:02:37 UTC 2012,,,,,,,,,,,"0|i026bz:",10627,,,,,,,,,,,,,,,,,,,,"29/May/12 10:02;cschneider;Fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replies with Incorrect CorrelationIDs Received After Reinstantiating a Route with ActiveMQ Endpoint and Exclusive Reply Queue,CAMEL-5309,12558157,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,npacemo,npacemo,25/May/12 18:29,09/Aug/12 15:59,14/Jul/23 05:45,04/Jun/12 08:20,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-activemq,camel-jms,,,0,,,,,,,,,"When I first instantiate the following route, it works as expected. The Replies that come have the right correlation ids, just as Camel has assigned them.

{code}
from(""direct:fetchStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + FETCH_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-001"");
{code}

When this route completes, it is stopped and removed from the camel context. 

When a similar route is instantiated:

{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");
{code}

Half of the replies come as expected, while the other half results in the following warning: *Reply received for unknown correlationID*.

A workaround for this issues is to use a different *ReplyTo*-queue for each new instantiation of a similar route.

E.g. for the second route, it'll work if:
{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");
{code}","Java 1.6, ActiveMQ 5.6-SNAPSHOT (used in-memory within a Spring application)",davsclaus,npacemo,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5465,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241182,,,Sat Jun 09 10:43:52 UTC 2012,,,,,,,,,,,"0|i026an:",10621,,,,,,,,,,,,,,,,,,,,"03/Jun/12 15:06;davsclaus;Why are you doing .threads(10) that dont makes sense, if you dont do any further routing.

Also when you report an issue, then please include more details, and full stacktraces etc.
The Camel team have to spend a lot of time to track down and reproduce peoples issues. So do as much upfront work for us.
For example to create a sample unit test that demonstrates the issue.

;;;","03/Jun/12 15:26;davsclaus;Okay I managed to track down an issue that the reply manager should be disposed when the route is stopped, so a new is re-created when you add the 2nd route using the same reply to queue.
;;;","03/Jun/12 19:25;npacemo;Is .threads(10) makes more sense if the route is:

{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.to(""log:REPLY?level=DEBUG"")
.routeId(""route-002"")
{code}

As to how I reported the issue, I've tried to provide the minimum information that can describe the issue, and I was waiting to add more (e.g. a unit test) upon request. If you say you need it, I'm willing to invest the time to provide you what you need to ease the troubleshooting.;;;","04/Jun/12 08:19;davsclaus;I have committed a fix and backported to 2.9 branch.

If you could give the 2.9 SNAPSHOT branch a test that would be great.;;;","09/Jun/12 10:31;npacemo;I'm still reproducing the issue with 2.9-SNAPSHOT.

I expect 5 replies, but instead I receive 2 and 3 are with incorrect correlation IDs:
{code}
2012-06-09 12:51:56,231 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339235516008, arrival = 0, brokerInTime = 1339235516008, brokerOutTime = 1339235516011, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@300eff0c, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":3}}
2012-06-09 13:06:29,605 [Camel (camel-1) thread #33 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2011,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":4}]
2012-06-09 13:16:48,811 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237008806, arrival = 0, brokerInTime = 1339237008806, brokerOutTime = 1339237008809, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@482163cd, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":2}}
2012-06-09 13:27:39,280 [Camel (camel-1) thread #34 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2012,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":1}]
2012-06-09 13:28:15,364 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237695326, arrival = 0, brokerInTime = 1339237695327, brokerOutTime = 1339237695328, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@bd53277, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":1}}
{code}
;;;","09/Jun/12 10:43;davsclaus;Whats your timeout setting? 

And do you do anything to cancel the requests on the other party? If they send back old replies, then Camel logs that as WARN.;;;",,,,,,,,,,,,,,,,,,,,,,,,
InOut over seda/vm with multiple consumers can cause a timeout exception,CAMEL-5303,12557048,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/May/12 18:46,23/May/12 19:07,14/Jul/23 05:45,23/May/12 19:07,2.8.4,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ExchangeTimedOutException-when-using-vm-seda-with-multipleConsumers-true-td5710951.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241176,,,2012-05-23 18:46:24.0,,,,,,,,,,,"0|i0269b:",10615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The flatpack component is swallowing it's parsing errors,CAMEL-5300,12556930,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,geerzo,geerzo,22/May/12 21:59,23/May/12 14:46,14/Jul/23 05:45,23/May/12 09:59,2.9.2,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-flatpack,,,,0,,,,,,,,,"When flatpack parses the exchange any errors that are generated are stored in an error list in the parser. Currently, this list isn't being checked so the exchange is moving on even when there are errors generated.",,davsclaus,geerzo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/May/12 22:44;geerzo;CAMEL-5300.patch;https://issues.apache.org/jira/secure/attachment/12528665/CAMEL-5300.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241173,,,Wed May 23 14:46:38 UTC 2012,,,,,,,Patch Available,,,,"0|i0268n:",10612,,,,,,,,,,,,,,,,,,,,"22/May/12 22:44;geerzo;Patch against the 2.9.x branch;;;","23/May/12 09:59;davsclaus;Thanks for the patch. I polished it a bit.;;;","23/May/12 14:46;geerzo;Claus,

Thanks for cleaning it up a bit. I did have a question regarding the change to the exception.

I had it that way originally but changed it because I didn't want to have to generate the message string every time getMessage() was called since that takes CPU cycles (especially if it's a large file with hundreds of errors), granted it's not a lot, and it is during exception processing. Would it be expected that getMessage() would only be called once during normal error processing so it doesn't' really matter?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
EventNotifiers don't work under Blueprint,CAMEL-5299,12556894,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,22/May/12 18:11,23/Nov/12 21:22,14/Jul/23 05:45,23/May/12 15:56,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,camel-core,,,0,blueprint,events,,,,,,,"EventNotifiers don't work with Blueprint Camel Contexts. Testing on latest 2.10-SNAPSHOT, updated on 22 May 16:45 GMT.

After some debugging, it looks like the bean lookup performed on line 202 of {{AbstractCamelContextFactoryBean.afterPropertiesSet()}} triggers the initialization of the CamelContext as part of the lookup. 

As part of the init, all services are started, including the ManagementContext and its EventNotifiers (which we were just looking up).

EventNotifiers are then added but never started because they came in late.",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,SMX4-1281,,,SMX4-1281,,,,,,,,,,"22/May/12 18:13;raulvk;blueprint-eventnotifier-bug.xml;https://issues.apache.org/jira/secure/attachment/12528628/blueprint-eventnotifier-bug.xml",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241172,,,Wed May 23 11:26:39 UTC 2012,,,,,,,,,,,"0|i0268f:",10611,,,,,,,,,,,,,,,,,,,,"22/May/12 18:13;raulvk;Attaching a test Blueprint file.;;;","23/May/12 10:17;davsclaus;Its the PublishEventNotifier that seems to cause this catch-22 issue.

If you use LoggingEventNotifier instead then it works fine.;;;","23/May/12 10:45;davsclaus;The issue is if the bean implements CamelContextAware, when then triggers a catch-22 situation.;;;","23/May/12 11:26;raulvk;It only happens with Blueprint DSL though; I was unable to reproduce in Spring DSL.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
trim() in SimpleLanguage.createExpression strips new-lines from expression,CAMEL-5285,12556464,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,apejavar,apejavar,18/May/12 21:47,27/May/12 12:23,14/Jul/23 05:45,27/May/12 12:23,2.9.2,,,,,,,,,,,,2.10.0,,,,camel-core,,,,0,,,,,,,,,"A newly added (since 2.8.3) expression.trim() in SimpleLanguage.createExpression(String expression) strips new-lines from the expression before evaluation.

I was using this feature to log exceptions to a status file in my camel route. I built the status message using a simple expression and terminated with &#10; in the spring-dsl route. With 2.9.2, the individual messages are no longer delimited by new-line because of the added expression.trim().",Spring DSL,apejavar,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241158,,,Sun May 27 12:23:05 UTC 2012,,,,,,,,,,,"0|i0265b:",10597,,,,,,,,,,,,,,,,,,,,"20/May/12 08:14;davsclaus;Yeah I guess we got a situation here, whether its a good idea to trim or not.;;;","20/May/12 08:15;davsclaus;CAMEL-4990 is the one that changed this behavior.;;;","27/May/12 12:23;davsclaus;Fixed by CAMEL-5294;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream should not close stream after each write,CAMEL-5284,12556328,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,18/May/12 00:18,02/Jun/12 12:49,14/Jul/23 05:45,02/Jun/12 12:49,2.8.4,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-stream,,,,0,,,,,,,,,"The StreamProducer in camel-stream closes the stream after every write, which significantly affects performance.",,hadrian,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,241157,,,Fri May 18 00:27:19 UTC 2012,,,,,,,,,,,"0|i02653:",10596,,,,,,,,,,,,,,,,,,,,"18/May/12 00:27;hadrian;We need to give users some control over when the stream would be closed. I will introduce a new option 'autoCloseCount' to specify the number of messages to process before closing the stream.

A value of 'autoCloseCount=0' means that the stream is never closed (well, it will be when the StreamProducer is stopped). A value of 'autoCloseCount=1' means close after every message, which is the current behavior. I am tempted to use '0' as the default value. A value of '1', although consistent with the current behavior is not what a user would expect. Another higher value just seems kinda random.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream overwrites files instead of appending,CAMEL-5279,12556091,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,16/May/12 17:48,05/Jul/12 19:59,14/Jul/23 05:45,16/May/12 18:22,2.8.5,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-stream,,,,0,,,,,,,,,"When a file stream is used with camel-stream, the file is not opened in append mode, therefore the file is overwritten with every message, ending up with just the last message, all others are lost.

This contrasts with the documented behavior.",,hadrian,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,241152,,,2012-05-16 17:48:15.0,,,,,,,Patch Available,,,,"0|i0263z:",10591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Forgot a space between hours and minutes in org/apache/camel/util/TimeUtils.java,CAMEL-5277,12555977,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,olifant1990,olifant1990,16/May/12 07:54,24/May/12 06:58,14/Jul/23 05:45,16/May/12 20:32,,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,0,space,spaces,TimeUtil,uptime,,,,,"org/apache/camel/util/TimeUtils.java

in the printDuration method is something wrong on line 63 and 72.

63: s += "" "" + fmtI.format(minutes) + (minutes > 1 ? "" minutes"" : ""minute"");
has to be:
63: s += "" "" + fmtI.format(minutes) + (minutes > 1 ? "" minutes"" : "" minute"");

72: s += "" "" + fmtI.format(hours) + (hours > 1 ? "" hours"" : ""hour"");
has to be:
72: s += "" "" + fmtI.format(hours) + (hours > 1 ? "" hours"" : "" hour"");",all environments,muellerc,olifant1990,,,,,,,,,,,,,,,,,,,KARAF-1500,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,241150,,,Thu May 24 06:58:09 UTC 2012,,,,,,,,,,,"0|i0263j:",10589,,,,,,,,,,,,,,,,,,,,"16/May/12 20:29;muellerc;Ronald, thanks for the patch.;;;","21/May/12 08:28;olifant1990;Has this also been changed in Karaf? Because it says it has been copied?;;;","22/May/12 22:08;muellerc;I will have a look at the Karat code base and provide a fix if needed.;;;","23/May/12 21:58;muellerc;I created KARAF-1500 and attached a patch for it.;;;","24/May/12 06:58;olifant1990;Thanks for fixing it!;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Jetty client can corrupt streams if used in a bridge mode (proxy),CAMEL-5274,12555006,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/12 07:34,15/Jun/12 09:47,14/Jul/23 05:45,12/May/12 07:56,2.8.5,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jetty,,,,0,,,,,,,,,"The jetty http producer should favor streams over Strings, which otherwise could cause the payload to be corrupted if doing a bridge mode, eg from jetty to jetty.",,,,,,,,,,,,,,,,,,,CAMEL-5367,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,239260,,,Sat May 12 10:11:03 UTC 2012,,,,,,,,,,,"0|i0262v:",10586,,,,,,,,,,,,,,,,,,,,"12/May/12 10:11;njiang;@Claus,

I just found the DefaultJettyHttpBinding just try to take the response as String too.
We may need to update request and response side at the same time.

Willem;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet producer not passing along the Accept header ,CAMEL-5268,12554584,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/May/12 23:15,22/May/12 03:42,14/Jul/23 05:45,22/May/12 03:42,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-restlet,,,,0,,,,,,,,,"Refer to the thread on user forum.
http://camel.465427.n5.nabble.com/camel-restlet-Accept-header-td5692917.html

DefaultRestletBinding.populateRestletRequestFromExchange() may be missing a Restlet API call to set the accepted media types the Request object.       

Request.getClientInfo().setAcceptedMediaTypes(acceptedMediaTypes)

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238834,,,Tue May 22 03:41:59 UTC 2012,,,,,,,,,,,"0|i0261j:",10580,,,,,,,,,,,,,,,,,,,,"10/May/12 07:44;davsclaus;William are you working on a patch?;;;","21/May/12 19:27;wtam;@Claus.  Yes.;;;","21/May/12 22:10;wtam;Committed revision 1341227.  (trunk)

@Claus Could you please back merge to other branches if necessary?;;;","22/May/12 03:41;davsclaus;Thanks William. Nice to see you back with a commit.

I have backported the fix to the 2.9 branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Content-Length returned for converted result objects with Unicode characters,CAMEL-5265,12554493,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,manuelh9r,manuelh9r,09/May/12 14:03,10/May/12 07:38,14/Jul/23 05:45,10/May/12 07:38,2.8.0,2.9.0,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-servlet,,,,0,patch,,,,,,,,"The camel-servlet component responds with an incorrect http Content-Length header, causing the HTTP client to retreive a incomplete response, when the body of the out message is of a POJO type and is converted into a string that contains unicode characters.

For example, the following route returns ""Büe Wör"", but should return ""Büe Wörld"".
{quote}     
from(""servlet:///testUnicodeWithObjectResponse?matchOnUriPrefix=true"") 
   .process(new Processor() {
       public void process(Exchange exchange) throws Exception {                    
           String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);
           exchange.getOut().setHeader(Exchange.CONTENT_TYPE, contentType + ""; charset=UTF-8"");  
    }})
    .transform(constant(
        new Object(){
            @Override
            public String toString() {
                return ""Büe Wörld"";
            }
        }
    ));
{quote}

The attached patch contains a fix for the problem and a test to reproduce the problem.",,manuelh9r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/May/12 14:12;manuelh9r;patch.diff;https://issues.apache.org/jira/secure/attachment/12526162/patch.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238743,,,Thu May 10 07:38:52 UTC 2012,,,,,,,Patch Available,,,,"0|i0260v:",10577,,,,,,,,,,,,,,,,,,,,"09/May/12 14:12;manuelh9r;Patch with tests;;;","10/May/12 07:38;davsclaus;Thanks for the patch.

I used the \u0000 for the uni code chars, as people in eg China etc. will have trouble reading the source code. 

Also I am using the charset value from the exchange, which is what being used to convert the message to String.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cometd component does not pass EnableSessionHeaders parameter to CometdBinding properly.,CAMEL-5263,12554465,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jwatkins,jwatkins,09/May/12 10:55,10/May/12 01:34,14/Jul/23 05:45,10/May/12 01:34,,,,,,,,,,,,,2.10.0,,,,camel-cometd,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/May/12 10:55;jwatkins;camelCometdBooleanAndSessionHeaderPatch.txt;https://issues.apache.org/jira/secure/attachment/12526138/camelCometdBooleanAndSessionHeaderPatch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238707,,,Thu May 10 01:34:57 UTC 2012,,,,,,,Patch Available,,,,"0|i0260f:",10575,,,,,,,,,,,,,,,,,,,,"09/May/12 10:57;jwatkins;I noticed that I had made an error and not brought over a change from my branch into the patch. The initial version didn't pass the property to the binding. I have added a fix as well as more unit tests to cover this. Additionally, I have added support for booleans as values for the session headers.;;;","09/May/12 16:26;njiang;Applied patch with thanks to Joshua, I also fixed some check style errors at the same time.;;;","10/May/12 01:34;njiang;Applied patch into the trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SEDA/VM requires completely same URI on producer and consumer side when consumer route is adviced,CAMEL-5261,12554453,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thxmasj,thxmasj,09/May/12 09:15,20/May/12 19:57,14/Jul/23 05:45,20/May/12 19:57,2.9.1,2.9.2,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"The producer side and consumer side of the SEDA (and VM) component seems to require the completely same URI to be able to communicate. Completely same meaning that all URI options must be the same on both sides. The strange thing is that this only is required when I have adviced the consumer route. 2.9.0 does not have this problem.

Attached a unit test - the producerWithDifferentUri will fail on 2.9.1 and 2.9.2. If the advice is removed it will not.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/May/12 11:50;thxmasj;CamelSedaTest.java;https://issues.apache.org/jira/secure/attachment/12526148/CamelSedaTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238695,,,Sun May 20 16:03:27 UTC 2012,,,,,,,,,,,"0|i025zz:",10573,Regression,,,,,,,,,,,,,,,,,,,"09/May/12 09:25;davsclaus;Thanks, can you re-attach the test case and mark [x] in grant license to Apache. Then we can use your code as an unit test in the source.;;;","09/May/12 11:51;thxmasj;Done!;;;","20/May/12 15:06;davsclaus;You need to do as told on the wiki page
http://camel.apache.org/advicewith.html

eg in the tip: Telling Camel you are using adviceWith
;;;","20/May/12 16:03;davsclaus;I have reproduced the issue and work on a fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
LDAP Component lose headers,CAMEL-5260,12554452,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,anacortes,anacortes,09/May/12 09:12,10/May/12 18:37,14/Jul/23 05:45,09/May/12 20:59,2.9.0,,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-ldap,,,,0,ldap,,,,,,,,"When we call to a LDAP endpoint, the result is returned in the Out body and we lose the IN headers (see http://camel.465427.n5.nabble.com/LDAP-Component-lose-headers-td5696602.html). 

A fix seems relatively easy. The solution could be add this line inside the process() method in LdapProducer.java
 exchange.getOut().setHeaders(exchange.getIn().getHeaders());",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,238694,,,Thu May 10 18:37:56 UTC 2012,,,,,,,,,,,"0|i025zr:",10572,,,,,,,,,,,,,,,,,,,,"09/May/12 09:24;davsclaus;Do you want to try working on a patch, to fix this bug?
Likewise attachments should also be copied to preserve those.;;;","09/May/12 20:59;muellerc;Until this fix is available in a version which is suitable for you, you can use a content enricher [1] as workaround.

[1] http://camel.apache.org/content-enricher.html;;;","10/May/12 16:52;anacortes;Cool! You've done this really fast, i haven't had time to see how to create the patch :);;;","10/May/12 18:37;muellerc;But you are more than welcome to work on other issues ;-) [1]
Normally it's a good to let easy to resolve issues for new contributors, but because we considered this as a bug, I prefer to make sure it will be part of Camel 2.10.0 which we plan to release soon...

[1] http://camel.apache.org/contributing.html

Best,
Christian;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa feature can not be installed out of box,CAMEL-5257,12554446,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/May/12 08:31,02/Jun/12 18:36,14/Jul/23 05:45,02/Jun/12 18:36,2.8.5,2.9.2,,,,,,,,,,,2.10.0,2.8.6,2.9.3,,karaf,,,,0,,,,,,,,,"When I try to run the camel-itest-karaf, I found the camel-jpa feature can not be install out of box, as the servlet api cannot be resolved. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238688,,,2012-05-09 08:31:57.0,,,,,,,,,,,"0|i025z3:",10569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Running camel:run with blueprint gets a java.lang.NoClassDefFoundError: org.osgi.vendor.framework property not set,CAMEL-5248,12554036,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/May/12 09:34,05/May/12 09:43,14/Jul/23 05:45,05/May/12 09:43,2.10.0,,,,,,,,,,,,2.10.0,,,,osgi,tooling,,,0,,,,,,,,,"When running mvn camel:run with a blueprint app, you may get this exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,238255,,,2012-05-05 09:34:05.0,,,,,,,,,,,"0|i025x3:",10560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sure to close file input stream when converting file to string to avoid locking file on windows,CAMEL-5235,12553453,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/May/12 06:51,02/May/12 08:48,14/Jul/23 05:45,01/May/12 07:05,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/File-Processor-Not-deleting-the-files-tp5670301.html

Need to explicit close the file input/output streams to avoid the files to be locked on windows.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,237615,,,Wed May 02 08:48:42 UTC 2012,,,,,,,,,,,"0|i025u7:",10547,,,,,,,,,,,,,,,,,,,,"01/May/12 09:18;bvahdat;Claus, one stupid question of mine:

Why don't we simply remove these two static member classes EncodingFileReader as well as EncodingFileWriter and just make use of JDK's own InputStreamReader & OutputStreamWriter directly? To my understanding these two classes provide no added value other than trouble. And the JDK's own bridges (byte streams to character streams) are already *encoding aware* anyway!

So the two usage methods would simply become:

{code}
    public static BufferedReader toReader(File file, String charset) throws IOException {
        FileInputStream in = new FileInputStream(file);
        return IOHelper.buffered(new InputStreamReader(in, charset));
    }
{code}


{code}
    public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {
        FileOutputStream os = new FileOutputStream(file, append);
        return IOHelper.buffered(new OutputStreamWriter(os, charset));
    }
{code}

They were both introduced by CAMEL-2056.;;;","01/May/12 09:31;davsclaus;Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.

With the current code we explicit close those now.;;;","01/May/12 09:32;davsclaus;You are welcome to do some investigations and see if we can do as you suggests, but we need to make sure the file streams gets closed, to avoid locking issues with windows.;;;","01/May/12 10:26;bvahdat;{quote}
Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.
{quote}

No as that's done for ""free"" through the close() method magic, that's the call-chaining of the close() call by the underlying input/output streams. As an example when we look at BufferedReader.close() method we see that the close() call get's chained and the underlying stream (hopefully) does properly chain the call again and again, until the OS native stream gets properly closed. *But* that's the user's responsibility to
do that:


{code}
BufferedReader myReader = CamelContext.getTypeConverter().convertTo(BufferedReader.class, ...);
…
…
myReader.close(); // user should close the stream properly after the usage
{code}

The main ""problem"" is that we can't control if the user do *properly* close the Reader, Writer, In and Outputstream after the usage. And if they don't, then they will run into trouble and think something in Camel could be the reason for that.;;;","01/May/12 14:48;davsclaus;Yeah if the user gets a reader/stream etc then he may need to close it after use.

But in this use-case it was converting to String or byte[] etc directly. And for that Camel must make sure to close the stream internally.;;;","02/May/12 08:08;bvahdat;While trying to find some resources on the web describing what my *poor* english is talking about, I came along many of them but the best one was given through that *already dissappered real vendor* itself:

{quote}
Similarly, when closing chained streams, you only need to close the outermost stream class because the close() call is automatically trickled through all the chained classes; in the example above, you would simply call the close() method on the GZIPOutputStream class.
{quote}

When you look at the example there the inner most OutputStream is also a FileOutputStream, however there's no need of an explicit close call on that:

http://java.sun.com/developer/technicalArticles/Streams/ProgIOStreams/

There are plenty of other APIs having similar semantics (call-chaining) like when you close a JDBC Statement:

{quote}
Note:When a Statement object is closed, its current ResultSet object, if one exists, is also closed.
{quote}

http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()

So why I still ask for your approval to get rid of those two obsolete static member classes.
;;;","02/May/12 08:48;davsclaus;Yes they can possible be removed, just make sure the FileInputStream gets closed, as otherwise it can lock file handles on Windows.;;;",,,,,,,,,,,,,,,,,,,,,,,
Spring-WS does neither set message body nor message headers if exchange is not outCapable,CAMEL-5234,12553389,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,benjamin.gniza,benjamin.gniza,30/Apr/12 17:15,11/Jun/12 21:10,14/Jul/23 05:45,08/Jun/12 16:22,2.7.5,2.8.4,2.9.2,,,,,,,,,,2.10.0,2.9.3,,,camel-spring-ws,,,,0,in,out,out-capable,response,spring-ws,,,,"Spring-WS component does not behave as expected from pipes and filters pattern if exchange is not _outCapable_.
If _ExchangeHelper_._isOutCapable_ returns false for the given _exchange_ the IN-message is returned instead of the WS-Response.
Example:
{code:title=ExampleRoute}
        from(""timer://foo?fixedRate=true&period=1000"")//
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");
{code}

In the example above I would expect the WS-response written to the files in the responses directory. Currently (since 2.7.3) the IN message is written to the files.
This is caused by _SpringWebserviceProducer#process_ because it only sets headers and body for the OUT-message if _isOutCapable_ is _true_.

Workaround (maybe this has side effects!):
{code:title=ExampleRoute}
                from(""timer://foo?fixedRate=true&period=1000"")//
                .setExchangePattern(ExchangePattern.InOut) // <-- Override with InOut Pattern
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");
{code}

This behavior has been implemented to fix CAMEL-3974. From my point of view its counter intuitive since other processing-steps don't check the exchange's _outCapability_.
It took me several hours to find out why I always got the IN message back, although the webservice was called correctly and returned correct results.
Maybe an option should be provided to control this behavior. At least a log-message should be written to explain, that the webservice-reponse is thrown away.

",,bvahdat,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Jun/12 12:08;bvahdat;CAMEL-5234.patch;https://issues.apache.org/jira/secure/attachment/12531393/CAMEL-5234.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,237544,,,Mon Jun 11 21:10:39 UTC 2012,,,,,,,,,,,"0|i025tz:",10546,,,,,,,,,,,,,,,,,,,,"01/May/12 09:40;bvahdat;This behavior is intended and not a bug!

So that if you need an InOut Exchange-Pattern then just say it using the DSL, that's instead of:

{code}
to(""spring-ws:http://..."")...
{code}

you could do:

{code}
...inOut(""spring-ws:http://..."")....
{code}

See also http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-0-td4584312i20.html#a4593321
;;;","02/May/12 15:17;bvahdat;BTW as in the meanwhile inOut() has been already deprecated, then better make use of setExchangePattern(exchangePattern) API.
See the Javadoc of inOut() for more details. ;;;","02/May/12 15:40;bvahdat;Just realized that you have already made use of setExchangePattern(ExchangePattern.InOut) API.

I do agree to put a log-message to warn that the webservice-response will be thrown away. Do you have any suggestion for a meaningful and well-understandable log message to be used here?;;;","02/May/12 16:37;benjamin.gniza;Regarding your linked post:
Didn't you say there that this seems API-breaking for you? Providing such a change in a patch version shouldn't be done. (This behavior was introduced from 2.7.2 to 2.7.3).

Anyway, I think this may be intentional but is very confusing. Using the restlet-component (http://camel.apache.org/restlet.html) you don't have to change the Exchange-Pattern but can go with the following example (which is similiar to my first spring-ws example):
{code:title=Restlet Example}
from(""timer://foo?fixedRate=true&period=1000"")//
                .setHeader(""id"", new SimpleExpression(""1""))//
                .to(""restlet:http://localhost:9000/Example/{id}"")//
                .to(""file://responses"");
{code}
I think we agree that this inconsitent component behavior may confuse a lot of people.;;;","02/May/12 17:03;bvahdat;Yes at that time it seemed / was API breaking to me as it happened in a patch version. And do agree that this could be confusing for people trying to upgrade.

I will try to get in touch with Richard Kettelerij who has denoted this component. Just wonder what he thinks about this.;;;","02/Jun/12 18:39;davsclaus;Yes the response from Spring-WS should be used regardless of the MEP pattern. Only if the actual invoked web service method is a OneWay web service, then it should not use the response from the WS. eg bottom line its the nature of the WS method that dictates this, not the MEP flag in Camel.;;;","03/Jun/12 09:26;muellerc;This means if the MEP is inOnly and the web service returns a response, we should put this into the in message (body and headers) after cleaning it from the request body and headers, right?;;;","03/Jun/12 09:36;davsclaus;Yes.

Normally the response is set on the IN message if its NOT out capable.

if OUT capable
  set response OUT
else
  set response IN

But in the world of WS you can have OneWay which is a bit special WS. Normally they are request/reply over WS.

;;;","03/Jun/12 10:04;bvahdat;Now I'm a bit confused :-(
Currently we have the following by SpringWebserviceProducer

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
}
{code}

Now do you mean we should change this to

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
} else {
    exchange.getIn().setBody(body);
}
{code}

And what about camel-restlet? Seems it doesn't care about MEP:
https://fisheye6.atlassian.com/browse/~br=trunk/camel/trunk/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java?hb=true#to266

Also do we maybe have a documentation about these MEP rules somewhere where I can learn it from?;;;","04/Jun/12 12:37;bvahdat;Also looking at camel-cxf it does the same way as camel-spring-ws (which is a *different behaviour* than camel-restlet :-():

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java?hb=true#to183
;;;","04/Jun/12 12:59;muellerc;Babak, could you please start a general discussion about this on dev@.
My understanding is the following:
If a component provides integration for e.g. spring-ws and execute a request which will receive a respone, this component should check the MEP and put the respone into the out message if the MEP is ""put capable"" or replace the in message if not (and also the headers and attachments of course).;;;","04/Jun/12 13:26;bvahdat;Done:
http://camel.465427.n5.nabble.com/About-what-to-do-with-the-Response-retrieved-through-a-Producer-when-the-Exchange-is-NOT-out-capable-td5713946.html;;;","08/Jun/12 12:08;bvahdat;A potential patch for the review.;;;","08/Jun/12 15:39;davsclaus;The patch seems fine;;;","11/Jun/12 21:10;muellerc;Looks good for me too.;;;",,,,,,,,,,,,,,,
camel-blueprint - Should not set empty location for properties component,CAMEL-5229,12553102,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Apr/12 07:47,27/Apr/12 07:55,14/Jul/23 05:45,27/Apr/12 07:55,,,,,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,,,,0,,,,,,,,,"Property placeholders using blueprint, should avoid setting empty locations by default",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,237118,,,2012-04-27 07:47:29.0,,,,,,,,,,,"0|i025sv:",10541,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel 2.9.2 jetty component no longer works with Jetty 7,CAMEL-5227,12553070,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,snortasprocket,snortasprocket,27/Apr/12 00:19,30/Apr/12 13:57,14/Jul/23 05:45,27/Apr/12 05:36,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-jetty,,,,0,,,,,,,,,"When attempting to create a camel-jetty endpoint in Camel 2.9.2, the following exception is thrown:
{noformat}
java.lang.NoSuchMethodError: org.eclipse.jetty.servlet.ServletContextHandler.addFilter(Lorg/eclipse/jetty/servlet/FilterHolder;Ljava/lang/String;Ljava/util/EnumSet;)V
at org.apache.camel.component.jetty.JettyHttpComponent.enableMultipartFilter(JettyHttpComponent.java:407)
    at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:325)
    at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)
    at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1707)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1979)
    at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1934)
    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1862)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1646)
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1533)
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1420)
    at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1388)
.
.
.
{noformat}

This appears to be a regression of a caused by the [this merge from trunk|https://fisheye6.atlassian.com/changelog/camel?cs=1307901], which I suspect requires Jetty 8 to be used.

Creating the endpoint under 2.9.1 works fine.

",,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5016,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,237019,,,Mon Apr 30 13:57:03 UTC 2012,,,,,,,,,,,"0|i025sf:",10539,Regression,,,,,,,,,,,,,,,,,,,"27/Apr/12 00:21;snortasprocket;Fix link in description.;;;jira-users","27/Apr/12 05:15;davsclaus;What version of Jetty are you using?;;;","27/Apr/12 05:16;davsclaus;Its this ticket
https://issues.apache.org/jira/browse/CAMEL-5016;;;","27/Apr/12 05:27;davsclaus;I have reverted rev 1307901 on the 2.9 branch so the API is compatible with Jetty 7 again. This is the version we support on the 2.9 branch.;;;","27/Apr/12 05:28;davsclaus;I am inclined to do the same on the Camel trunk as we are not supporting Jetty 8 currently. Jetty is hard to upgrade as many other projects depend on it, CXF, AMQ, Karaf etc.;;;","27/Apr/12 05:36;davsclaus;Thanks for reporting. I have reverted the change on Camel trunk so Camel 2.10 is Jetty 7 API compatible again.;;;","30/Apr/12 13:57;snortasprocket;Verified as fixed in 2.9.3-SNAPSHOT. Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty can't distinguish between Sharable and Unsharable codecs,CAMEL-5225,12552870,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edge,edge,26/Apr/12 16:03,13/Jun/12 09:33,14/Jul/23 05:45,08/Jun/12 15:30,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,0,netty,,,,,,,,"Camel-netty uses general configuration model for referenced encoders/decoders for channel pipelines, see DefaultServerPipelineFactory. That is, create encoder/decoder objects at configuration parsing time and store them in a list, then use them when a pipeline is established. However, this will make encoder/decoder objects shared among different pipelines, that may cause data conflicts, when the encoder/decoder is not Sharable(has object status/not annotated as @Sharable), e.g. a LengthFieldBasedFrameDecoder.

Although we can avoid the problem by totally writing a new serverpipelinefactory for our apps, several problem still remains, please see detailed description and testcase for this bug at:

http://camel.465427.n5.nabble.com/camel-netty-bug-and-the-need-of-best-practice-for-creating-referenced-parameter-object-on-looking-up-td5627926.html",ALL,davsclaus,edge,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Apr/12 17:06;edge;DefaultServerPipelineFactory.java.patch;https://issues.apache.org/jira/secure/attachment/12524889/DefaultServerPipelineFactory.java.patch","27/Apr/12 17:03;edge;UnsharableCodecsConflictsTest.java;https://issues.apache.org/jira/secure/attachment/12524888/UnsharableCodecsConflictsTest.java","26/Apr/12 17:22;edge;UnsharableCodecsConflictsTest.java;https://issues.apache.org/jira/secure/attachment/12524467/UnsharableCodecsConflictsTest.java",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,236809,,,Wed Jun 13 09:33:13 UTC 2012,,,,,,,,,,,"0|i025rz:",10537,,,,,,,,,,,,,,,,,,,,"26/Apr/12 17:22;edge;here is the test for showing this bug, as mentioned in the post at nabble, you can get random results each time you run the testcase when this bug exists.;;;","27/Apr/12 06:57;davsclaus;camel-netty have been improved for Camel 2.10.

And if you use decoders/encoders that cannot be shared with multiple consumers, then you need to enlist 2 in the registry etc.
This is *not* a bug, but how its designed. You as the end user must configure the endpoints/components correctly.

I have added your test to the source and it passes on trunk.;;;","27/Apr/12 16:56;edge;Thank you very much for your response and adding my testcase to the trunk. However, your answer makes me aware of two things:

1.My testcase is very very misleading (so sorry for that), makes people think the problem is due to sharing decoders among consumers, but that's not the case, as I explained very clearly in the posts, it is because you share them among *pipelines*, not consumers.

2.Camel-netty in version 2.10 (as well as 2.9.2) introduced a new bug, severe than the one I reported, breaks netty's pipeline model more than before. Hence even I correct the implementation of DefaultServerPipelineFactory, the testcase still breaks.

So here I attach the correct testcase, and do some reference to show the problem I reported as well as the new bug introduced.

sorry again for the previous misleading testcase :);;;","27/Apr/12 17:10;edge;Here is the correct testcase and the patch to pass the testing. The patch simply creates a new decoder(by hard coding that matches the testcase) each time when getpipeline is called, when you run the testcase against patched 2.9.1 version of cammel-netty, you get it passed, but not for 2.9.2 and 2.10.;;;","27/Apr/12 17:20;edge;Here are some references:

1.showing that unsharable decoders should not be shared among channels(pipelines)

http://stackoverflow.com/questions/9254800/is-framedecoder-not-safe-in-non-single-connection-situation

and of course the mentioned url:

http://netty.io/docs/stable/api/org/jboss/netty/channel/ChannelHandler.Sharable.html

2.the evidence showing the new bug

Line 183-185 of NettyConsumer.java in version 2.9.2 ant 2.10:
---------------------------------------------------------------------------------------------------
        // must get the pipeline from the factory when opening a new connection
        ChannelPipeline serverPipeline = pipelineFactory.getPipeline(this);
        serverBootstrap.setPipeline(serverPipeline);
---------------------------------------------------------------------------------------------------

The netty javadoc for ServerBootStrap.setPipeline:
---------------------------------------------------------------------------------------
public void setPipeline(ChannelPipeline pipeline)
Sets the default ChannelPipeline which is cloned when a new Channel is created. Bootstrap creates a new pipeline which has the same entries with the specified pipeline for a new channel.
Calling this method also sets the pipelineFactory property to an internal ChannelPipelineFactory implementation which returns a shallow copy of the specified pipeline.

Please note that this method is a convenience method that works only when 1) you create only one channel from this bootstrap (e.g. one-time client-side or connectionless channel) or 2) the ChannelPipelineCoverage of all handlers in the pipeline is ""all"". You have to use setPipelineFactory(ChannelPipelineFactory) if 1) your pipeline contains a ChannelHandler whose ChannelPipelineCoverage is ""one"" and 2) one or more channels are going to be created by this bootstrap (e.g. server-side channels).
----------------------------------------------------------------------------------------

So you are setting the pipeline to the serverbootstrap for netty consumer (which opens server-side channels), simply breaks the second situation when ""You have to use setPipelineFactory(ChannelPipelineFactory)"". However, the implementation in 2.9.1 and before is correct.

;;;","08/Jun/12 15:30;davsclaus;Thanks for reporting.

I have refactored to use the pipeline factory, so we support stateful codecs;;;","10/Jun/12 03:01;edge;Would you please adopt my revised UnsharableCodecsConflictsTest.java and run the test? I only saw the code somewhat reverted to version 2.9.1, but didn't solve the problem I reported. The problem exists as long as you use code like this(DefaultServerPipelineFactory.java):

        List<ChannelUpstreamHandler> decoders = consumer.getConfiguration().getDecoders();
        for (int x = 0; x < decoders.size(); x++) {
            channelPipeline.addLast(""decoder-"" + x, decoders.get(x));
        }

this configuration model causes the decoders(created and cached in consumer.getConfiguration().getDecoders()) to be shared among pinelines and then lead to conflicts on stateful codecs.;;;","13/Jun/12 09:33;davsclaus;Okay I have further improved the code to support for shareable and non-shareable encoders/decoders.;;;",,,,,,,,,,,,,,,,,,,,,,
"The done file got deleted, when using the file component even if noop property set to true",CAMEL-5224,12552825,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edvicif,edvicif,26/Apr/12 10:10,29/Apr/12 12:51,14/Jul/23 05:45,29/Apr/12 12:51,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,camel-file,,,,,,,,"We are consuming a feed from a mounted windows network drive, where we have rw access.
During the download we shouldn't touch anything so other users see the directory intact.

However even if we turn noop=true the done file got deleted after successfull conumptions
","I was using Windows XP and working on windows directory, when discovered the issue.",,,,,,,36000,36000,,0%,36000,36000,,,,,,,,,,,,,,,,,,,,,"26/Apr/12 10:12;edvicif;DoneMoveTest.java;https://issues.apache.org/jira/secure/attachment/12524418/DoneMoveTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,236810,,,Thu Apr 26 10:17:56 UTC 2012,,,,,,,,,,,"0|i025rr:",10536,,,,,,,,,,,,,,,,,,,,"26/Apr/12 10:12;edvicif;I've attached a unit test, which reproduce the issue.;;;","26/Apr/12 10:12;edvicif;Ticket were generated based on conversation:
http://camel.465427.n5.nabble.com/Prevent-done-file-deletion-after-file-consumption-td5665345.html#a5667144;;;","26/Apr/12 10:17;edvicif;Note the documentation:
http://camel.apache.org/file2.html#File2-Usingdonefiles

After the first example box it is stated: ""Camel will automatically delete the done file when it's done consuming the files.""

Maybe this needs to be updated as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot find resource in classpath using OSGi blueprint,CAMEL-5223,12552807,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tsh,tsh,26/Apr/12 07:46,15/Jun/12 15:46,14/Jul/23 05:45,15/Jun/12 15:46,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,,,,0,,,,,,,,,"I switched from Apache Camel version 2.8.4 (in ServiceMix 4.4.1) to the most recent version 2.9.2. Resource loading in 2.8.4 worked well, but not in the named release.

Find attached a small test case that uses XSLT and String-Template Endpoints. Neither of them can load their resource from the separate bundle.

# Install Apache ServiceMix 4.4.1
# Configure ServiceMix to use Apache Camel 2.9.2 (see {{etc/org.apache.karaf.features.cfg}})
# Start up ServiceMix
# Install feature 'camel-string-template'
# Build the attached test project using maven
# Copy/Link the built artifact into the {{deploy}} folder
# Copy/Link the route {{src/test/resources/camel-route}} into the {{deploy}} folder

The XSLT Component tries to load the resource eagerly. Therefore the route will not start and throws the following exception:
{noformat}
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: com/basis06/apache/camel/HelloWorld.xslt
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsUrl(ResourceHelper.java:122)
	at org.apache.camel.component.xslt.XsltEndpoint.loadResource(XsltEndpoint.java:67)
{noformat}

The same problem exists with the String-Template Component. But this component will fail not until it is called in the route.
","x86_64 GNU/Linux
Java 1.6.0_26
Apache ServiceMix 4.4.1",davsclaus,hadrian,tsh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Apr/12 07:47;tsh;test-classpath-resource.tar.gz;https://issues.apache.org/jira/secure/attachment/12524405/test-classpath-resource.tar.gz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236811,,,Fri Jun 15 15:43:57 UTC 2012,,,,,,,,,,,"0|i025rj:",10535,,,,,,,,,,,,,,,,,,,,"26/Apr/12 12:02;davsclaus;Resource loading works fine for me.

I moved the XML file into the src/main/resources/OSGI-INF/blueprint directory, which is the standard for blueprint XML files.
I removed the string template endpoint, so the route only did the xstl.

I installed the application on Fuse ESB which supports offically Camel 2.9, and it worked fine
I copied a test file and it was processed and from the shell I can get details
{code}
FuseESB:karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 165-camel-3

Properties
		id = helloWorld
		parent = 37fe883b

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 62ms
	Max Processing Time: 62ms
	Mean Processing Time: 62ms
	Total Processing Time: 62ms
	Last Processing Time: 62ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-04-26 14:01:03
	Last Exchange Completed Date: 2012-04-26 14:01:03

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""file:data/out"" id=""to2""/>
</route>
{code};;;","26/Apr/12 12:10;davsclaus;I did get puzzled by the code that loads the resource in camel-core-osgi, so I have asked for the OSGi experts to chim in.
I posted on Camel @dev so keep an eye there.;;;","26/Apr/12 12:58;tsh;Putting the blueprint xml into the bundle works, because they share the same bundle context then.

But my test case tries to use a classpath resource from another bundle. This works fine for classes exported by the bundle but not for resources.

Putting the blueprint xml into the deploy folder deploys that in its own bundle context that will dynamically import required packages (from other bundles).

You can extend the test case and successfully invoke the HelloWorld class inside the route. But you cannot access any resource from the bundle that provides the HelloWorld class.

;;;","26/Apr/12 13:32;dkulp;
I ran into this same issue with CXF's WS-N server on Tuesday.   The xsd's are in the cxf-wsn-api bundle, but the cxf-wsn-core bundle could not load them even if importing the package.   The ONLY solutions I found were:

1) Make cxf-wsn-core use a Dynamic-Import for the package that contains the resources.  A normal import did not work, just the Dynamic-Import

2) Make cxf-wsn-core use a Require-Bundle: cxf-wsn-api

I'm not sure yet if this is a bug in the OSGi stuff.  (I also only checked with Felix, I need to also check to see if Equinox exhibits the same issue)


;;;","15/Jun/12 14:43;hadrian;This is not really a Camel issue but an Aries/Karaf one. I think it's already fixed, but we're not gonna block the 2.10.0 and wait for new releases. I unset the fix version for now.;;;","15/Jun/12 15:02;tsh;The 'OsgiClassResolver' in the camel-spring bundle contains the bug.
{code}
public URL loadResourceAsURL(String uri) {
    ObjectHelper.notEmpty(uri, ""uri"");
    return bundleContext.getBundle().getEntry(uri);
}
{code}

The call to {{getEntry}} does only look in the classpath of the bundle. Imported packages are not considered. {{getResource}} is the correct method to call.

See http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getEntry(java.lang.String)
See also http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getResource(java.lang.String)
;;;","15/Jun/12 15:08;tsh;The {{OsgiClassResolver}} is now (in the trunk) located in {{camel-core-osgi}}. Same code, same problem.
;;;","15/Jun/12 15:43;davsclaus;I tried your suggestion with Karaf 2.2.7, and Camel 2.10-SNAPSHOT, and got it working.

The route is processed and I got a hello world in the output directory.

{code}
davsclaus:/opt/apache-karaf-2.2.7$ mv sample.xml data/in
davsclaus:/opt/apache-karaf-2.2.7$ ls data/
cache/             in/                out/               tmp/               
generated-bundles/ log/               port               
davsclaus:/opt/apache-karaf-2.2.7$ ls data/in/.camel/sample.xml 
data/in/.camel/sample.xml
davsclaus:/opt/apache-karaf-2.2.7$ cat data/out/sample.xml 
""Hello World""davsclaus:/opt/apache-karaf-2.2.7$ 
{code};;;","15/Jun/12 15:43;davsclaus;karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 79-camel-3

Properties
		id = helloWorld
		parent = 6c4f7b4c

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 177ms
	Max Processing Time: 177ms
	Mean Processing Time: 177ms
	Total Processing Time: 177ms
	Last Processing Time: 177ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-06-15 17:43:41
	Last Exchange Completed Date: 2012-06-15 17:43:41

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""string-template:com/basis06/apache/camel/Quote.txt"" id=""to2""/>
    <to uri=""file:data/out"" id=""to3""/>
</route>;;;",,,,,,,,,,,,,,,,,,,,,
The file consumer should use the charset encoding when reading the file if configured,CAMEL-5222,12552800,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Apr/12 06:49,26/Apr/12 07:29,14/Jul/23 05:45,26/Apr/12 07:29,,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"See CAMEL-5215.

This applies to the consumer as well. We should tighten this up, to ensure the charset is always used if configured. Currently the charset option could be shadowed if you did a convertBodyTo and specified another charset etc.

Also we should tighten up to use the charset configuration on the file endpoints. And added DEBUG logging which charset is being used for reading/write the files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236812,,,2012-04-26 06:49:49.0,,,,,,,,,,,"0|i025rb:",10534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HazelcastComponent.doStop bombing out,CAMEL-5218,12552693,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,henriqueo,henriqueo,25/Apr/12 17:40,25/Apr/12 22:26,14/Jul/23 05:45,25/Apr/12 22:26,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-hazelcast,,,,0,,,,,,,,,"I am setting up an own hazelcast instance on HazelcastComponent, it is created by Spring,
the problem is when HazelcastComponent.doStop is called, a NullPointerException is throw, because
createOwnInstance is null.
 ",,henriqueo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236816,,,Wed Apr 25 22:26:41 UTC 2012,,,,,,,,,,,"0|i025qf:",10530,,,,,,,,,,,,,,,,,,,,"25/Apr/12 22:26;muellerc;Hello Henrique,
thanks for reporting!
I have it fixed for Camel 2.9.3 and Camel 2.10.0. Camel 2.8.x doesn't have this problem.

Best,
Christian;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The file producer should use the charset encoding when writing the file if configured,CAMEL-5215,12552541,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Apr/12 09:49,25/Apr/12 11:31,14/Jul/23 05:45,25/Apr/12 11:31,,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"When writing to a file, we offer the charset option on the endpoint, as well the charset property set on the exchange.
However in a route  that is optimized as
{code}
from file
 to file
{code}

Then we optimize to do a file move operation instead. We should detect the charset configured and then we would need to stream and write using the configured charset.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236819,,,2012-04-25 09:49:30.0,,,,,,,,,,,"0|i025pr:",10527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"split().tokenizeXML(""child"", ""parent"").streaming() does not work correctly when parent's namespace declarations are separated with new line",CAMEL-5212,12552317,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,belis,belis,24/Apr/12 14:00,29/Apr/12 13:36,14/Jul/23 05:45,29/Apr/12 13:36,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,split,tokenizeXML,,,,,,,"when I try to split a big XML file using split().tokenizeXML(""child"", ""parent"").streaming() and if the parent's namespace declaration are separated with new line in the XML file, child element does not inherit the namespace declarations. When all declarations are on the same line it works ok.

<?xml version=""1.0"" encoding=""UTF-8""?>
<parent xmlns:ns1=""ns1.url""
        xmlns:ns2=""ns2.url"">
  <child></child>
  <child></child>
</parent>

doesn't work but


<?xml version=""1.0"" encoding=""UTF-8""?>
<parent xmlns:ns1=""ns1.url"" xmlns:ns2=""ns2.url"">
  <child></child>
  <child></child>
</parent>

is OK",,belis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236822,,,Sun Apr 29 13:36:34 UTC 2012,,,,,,,,,,,"0|i025p3:",10524,,,,,,,,,,,,,,,,,,,,"29/Apr/12 13:36;davsclaus;Thanks for reporting, and providing a sample XML showing a working and non working use-case;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop causes NullPointerException on error,CAMEL-5210,12552248,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hynek,hynek,24/Apr/12 06:07,27/Apr/12 07:59,14/Jul/23 05:45,27/Apr/12 07:58,2.9.2,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"The following context will cause NullPointerException.

    <routeContext id=""myCamelContext"" xmlns=""http://camel.apache.org/schema/spring"">    
        <route>
            <from uri=""jms:myQueue""/>
            <onException>
                <exception>org.xml.sax.SAXParseException</exception>
                <redeliveryPolicy maximumRedeliveries=""2""/>
                <handled><constant>true</constant></handled>
                <to uri=""log:camelfatal?showAll=true&amp;multiline=true&amp;level=ERROR""/> 
            </onException>
            <loop copy=""true"">
              <constant>3</constant>
              <inOnly uri=""smtp://you_can_leave_this_unchanged""/>
            </loop>
        </route>
    </routeContext>


The callstack on the NullPointerException:
Daemon Thread [Camel (appServerCamelContext) thread #1 - JmsConsumer[emailOutbox]] (Suspended (exception NullPointerException))	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 262	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 223	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 304	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	LoopProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	LoopProcessor.process(Exchange, AsyncCallback, AtomicInteger, AtomicInteger) line: 103	
	LoopProcessor.process(Exchange, AsyncCallback) line: 74	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	TraceInterceptor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	TraceInterceptor.process(Exchange, AsyncCallback) line: 91	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 333	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 223	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 304	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	UnitOfWorkProcessor.processAsync(Exchange, AsyncCallback, UnitOfWork) line: 150	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 117	
	RouteInflightRepositoryProcessor.processNext(Exchange, AsyncCallback) line: 50	
	RouteInflightRepositoryProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange) line: 86	
	EndpointMessageListener.onMessage(Message) line: 104	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 560	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 498	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 467	
	DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	Thread.run() line: 662	
",,hynek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236824,,,Fri Apr 27 07:59:05 UTC 2012,,,,,,,,,,,"0|i025on:",10522,,,,,,,,,,,,,,,,,,,,"27/Apr/12 07:59;davsclaus;Thanks for reporting and with the stacktrace;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Different servlets interfere with each other,CAMEL-5206,12552091,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cschneider,cschneider,23/Apr/12 07:18,07/Feb/13 14:03,14/Jul/23 05:45,07/Feb/13 14:03,2.9.2,,,,,,,,,,,,2.11.0,,,,camel-servlet,,,,0,,,,,,,,,"See http://java.dzone.com/articles/gotcha-when-using-camel

If using two wars with one servlet in each with the same name then servlet endpoints may end up on the wrong servlet. I think this should not happen with pure war deploys. Trying to check if camel is in a shared lib folder.

In any case this behaviour is not what people expect naively so we should try to fix that so that each war has its own combinaation of servlets and servlet endpoints that do not interfere with others.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236828,,,Thu Feb 07 14:03:50 UTC 2013,,,,,,,,,,,"0|i025nr:",10518,,,,,,,,,,,,,,,,,,,,"07/Feb/13 14:03;davsclaus;We now detect the duplicate servlet name and fail starting the servlet. Then people will detect this quicker and can remedy by using unique servlet names.

This applies only when they use a shared lib to share Camel JARs in the container.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
redelivery exhausted marker should be cleared by try catch EIP and when errorHandler handles the message,CAMEL-5201,12551989,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/12 14:42,21/Apr/12 14:55,14/Jul/23 05:45,21/Apr/12 14:55,,,,,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,0,,,,,,,,,"The logic which clear redelivery state should also clear the redelivery exhausted flag in try .. catch, and when the error handler handles the message.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236833,,,2012-04-21 14:42:58.0,,,,,,,,,,,"0|i025mn:",10513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential dead-lock when shutting down Camel with NotifyBuilder doing notication,CAMEL-5200,12551977,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/12 08:07,25/Apr/12 11:24,14/Jul/23 05:45,21/Apr/12 08:52,2.9.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Gracefull-shutdown-timeouts-due-to-NotifyBuilder-blocks-on-context-tp5654048p5654048.html

We should avoid the synchronized getRoutes method which is really not needed.",,schmidtm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Apr/12 11:24;schmidtm;shutdown-testcase.tar.gz;https://issues.apache.org/jira/secure/attachment/12524173/shutdown-testcase.tar.gz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236834,,,Wed Apr 25 11:24:58 UTC 2012,,,,,,,,,,,"0|i025mf:",10512,,,,,,,,,,,,,,,,,,,,"25/Apr/12 11:24;schmidtm;Eclipse/Maven project exposing the bug everytime.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
initialDelay and idempotentRepository Endpoint URI parameters fail to be read from Camel context when Turkish language is set in host operating system.,CAMEL-5199,12551933,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,morenoisidro,morenoisidro,20/Apr/12 21:08,22/Apr/12 09:18,14/Jul/23 05:45,22/Apr/12 09:18,2.8.1,,,,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,0,"camel-core,",context,endpoint,spring,,,,,"org.apache.camel.util.ObjectHelper.capitalize() method uses native JAVA String.toUpperCase() method (without parameters), which performs capitalization according to operating system current language and regional settings configuration. When these are set to Turkish, a call to capitalize() method, with a String starting with ""i"" as parameter, returns Turkish dotted ""I"" as capitalized ""i"", which is wrong according to programmatic language and expected behavior.

This behaviour impacts, at least, in Endpoint URI parameters which names start with char ""i"", such as ""idempotentRepository"" and ""initialDelay"" URI parameters. When setter/getter methods lookup is performed for these parameters, wrong method names are returned due to ObjectHelper.capitalize() method. This method uses standard Java String.toUpperCase() function which returns a dotted ""I"" instead of dotless ""I"" for idempotentRepository and initialDelay parameters.

To solve this, the attached patch consists of refactoring ObjectHelper.capitalize() method. Instead of calling toUpperCase() method, it is called toUpperCase(Locale.ENGLISH) to enforce 'I' character (dotless) return.",CamelContext Spring configuration. Versions: Camel 2.8.1 / Spring 3.0.,morenoisidro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Apr/12 20:51;morenoisidro;ObjectHelper.java.patch;https://issues.apache.org/jira/secure/attachment/12523650/ObjectHelper.java.patch","21/Apr/12 20:51;morenoisidro;TurkishCapitalizationTest.java;https://issues.apache.org/jira/secure/attachment/12523651/TurkishCapitalizationTest.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236835,,,Sun Apr 22 09:18:15 UTC 2012,,,,,,,Patch Available,,,,"0|i025m7:",10511,,,,,,,,,,,,,,,,,,,,"20/Apr/12 21:20;morenoisidro;Set Regional settings to Turkish before running the test.

Operating System specific configuration:

Windows 7: just Turkish regional settings (not necesary Windows display language) is enough to make the test fail.

OSX 10.7.3: set Turkish as display language, not just regional settings.;;;","21/Apr/12 08:53;davsclaus;Thanks for reporting. Do you mind re-attaching your files and mark [x] in grant license to Apache. Otherwise we cannot accept and use your patches in the source.;;;","21/Apr/12 20:54;morenoisidro;Sorry, I've just re-attached the files. Thanks to you.;;;","22/Apr/12 09:18;davsclaus;Thanks I have fixed all the toUpperCase and toLowerCase in camel-core to use the english locale.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
SftpChangedExclusiveReadLockStrategy does not check the correct field to determine if a file is changing,CAMEL-5196,12551742,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,steve_barham,steve_barham,20/Apr/12 08:22,20/Apr/12 09:41,14/Jul/23 05:45,20/Apr/12 09:41,2.8.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-ftp,,,,0,locking,patch,regression,sftp,,,,,"I have recently upgraded from Camel 2.7 to a more recent version. I can confirm that the bug is still in trunk. 

In Camel 2.7, there was a generic FileChangedExclusiveReadLockStrategy. This checked the modification time of the file using GenericFile.lastModified. This field was set by SftpComponent#asRemoteFile as file.getAttrs().getMTime() * 1000. 

In Camel 2.8 onwards, this behaviour is implemented by SftpChangedExclusiveReadLockStrategy. This incorrectly (to my mind) retrieves the timestamp on line 67 using: 

newLastModified = f.getAttrs().getATime();

Taking the atime of the file doesn't make a great deal of sense to me; on a POSIX compliant filesystem, the atime will be incremented every time the file is polled, meaning that this strategy will never be able to mark a file as unchanged. While some filesystems are mounted nowadays as noatime or relatime, the mtime is still absolutely the safest mechanism to determine if something is writing to a target file. 

The impact of this bug is that we cannot reliably poll files from a remote SFTP server. 
",,,,,,,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,"20/Apr/12 08:22;steve_barham;Switch_to_modified_time_for_remote_timestamp_checks_for_SftpChangedExclusiveReadLockStrate.patch;https://issues.apache.org/jira/secure/attachment/12523464/Switch_to_modified_time_for_remote_timestamp_checks_for_SftpChangedExclusiveReadLockStrate.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,236549,,,Fri Apr 20 09:41:13 UTC 2012,,,,,,,Patch Available,,,,"0|i025lj:",10508,Regression,,,,,,,,,,,,,,,,,,,"20/Apr/12 09:41;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSLTUriResolver fails to include from classpath under windows,CAMEL-5195,12551629,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,juliengb,juliengb,19/Apr/12 14:50,20/Apr/12 16:01,14/Jul/23 05:45,20/Apr/12 16:01,2.9.0,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,camel-xslt,,,0,xslt,,,,,,,,org.apache.camel.builder.xml.XsltUriResolver uses File.separator to separate classpath parts instead of simply '/'. This prevents <xsl:include /> to work under windows when the including xslt is located in a subfolder of the classpath.,Windows,juliengb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,236437,,,Fri Apr 20 16:01:48 UTC 2012,,,,,,,,,,,"0|i025lb:",10507,,,,,,,,,,,,,,,,,,,,"20/Apr/12 14:58;davsclaus;Can you post your xslt endpoint, and snippets from your xslt template where you use xsl:include.
Mind that if you do not specfify a scheme in xsl:include, then its interpreted as relative to the path from the xstl endpoint.
;;;","20/Apr/12 15:03;davsclaus;I have committed a fix on trunk and 2.9 branch. You are welcome to give the SNAPSHOT a try on your system.;;;","20/Apr/12 15:27;juliengb;Thanks for the patch, it fixes the problem.

In case you still need the info, the endpoint:
{code:xml}
<to uri=""xslt:xslt/transform.xsl"" />
{code}

the include:
{code:xml}
<xsl:stylesheet [...]>
	<xsl:include href=""included.xsl"" />
[...]
{code}

Both transform.xsl and included.xsl are in the ""/xslt"" path of an OSGi bundle deployed to Fuse ESB/Apache Servicemix.
;;;","20/Apr/12 16:01;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Strange warning appears: WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id ,CAMEL-5193,12551589,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,syberyan,syberyan,19/Apr/12 08:56,29/Apr/12 16:04,14/Jul/23 05:45,29/Apr/12 16:04,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"The warning gets printed but other than that, everything seems to work. (I hope)

{code}
12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id: ID-dris-ixor-be-42350-1334569164986-0-1052464, will 
fallback and use first error handler.
12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN  distribution.kv78.dispatch - Failed delivery (attempt = 199) : org.apache.http.conn.HttpHostConnectException: Connection to http://81.82.232.183:9292 ref
used - 0299c1d9 - KV8passtimes - 81.82.232.183:9292 - queue_dispatchHttpQueue_ID_dris.ixor.be-36583-1334569163882-4_1_24_1_1007
{code}

When looking up the log statement in RedeliveryErrorHandler, I find this:

{code}
else if (!exceptionPolicy.getErrorHandlers().isEmpty()) {
                // note this should really not happen, but we have this code as a fail safe
                // to be backwards compatible with the old behavior
                log.warn(""Cannot determine current route from Exchange with id: {}, will fallback and use first error handler."", exchange.getExchangeId());
                processor = exceptionPolicy.getErrorHandlers().iterator().next();
            }
{code}

So it shouldn't happen but it happens after all...


Here is the route causing the warning. I think it started when I made the route transacted. 
As shown in the log snippet above, the warning is printed when the HTTP endpoint throws an IOException (route ENDPOINT_DISPATCH)
{code}        
        from(ENDPOINT_DISPATCH_QUEUE +
            ""?cacheLevelName=CACHE_CONSUMER&"" + // necessary for message groups to work
            ""concurrentConsumers={{hermes.dris.distribution.kv78.concurrentOutgoingHttpDispatchers}}&"" +
            ""maxConcurrentConsumers={{hermes.dris.distribution.kv78.maxConcurrentOutgoingHttpDispatchers}}"")
            .routeId(ROUTE_ID_DISPATCH_QUEUE)
            .onException(Throwable.class)
                // transacted routes override the default error handler
                // to avoid the message going to the the ActiveMQ DLQ, forward to our DLQ here
                .to(ENDPOINT_DLQ)
                .handled(true)
            .end()
            .transacted()
             // determine action
             // the timingPointSequencer will check what needs to happen with the message
            .beanRef(""timingPointSequencer"", ""handleDispatch"")
            .choice()
                 // normal situation, the message can be sent
                .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_PROCEED)))
                    .to(ENDPOINT_DISPATCH)
                 // delay message, usually because of previous errors for this destination
                .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_REENQUEUE)))
                    .log(LoggingLevel.INFO, ""Re-enqueuing"" + MESSAGE_LOG_FORMAT)
                    .to(ENDPOINT_DISPATCH_QUEUE)
                .otherwise()
                    .log(LoggingLevel.ERROR, ""No action header set ???"" + MESSAGE_LOG_FORMAT)
                    .to(ENDPOINT_DLQ)
                .end()
            .end();

        from(ENDPOINT_DISPATCH)
            .routeId(ROUTE_ID_DISPATCH)
            .onException(IOException.class)
                // in case of IO exceptions, the message is always re-enqueued
                // reschedule parameters are set by the timingPointSequencer
                .beanRef(""timingPointSequencer"", ""handleFailure"")
                .log(LoggingLevel.WARN, ""Failed delivery (attempt = ${in.header.tpSecAttempt}) : ${in.header.CamelExceptionCaught}"" + MESSAGE_LOG_FORMAT)
                .to(ENDPOINT_DISPATCH_QUEUE)
                .handled(true)
            .end()
             // clear http headers to avoid interference from other http endpoints
            .removeHeaders(""CamelHttp*"")
            .setHeader(Exchange.HTTP_URI, simple(""http://${header."" + HEADER_DESTINATION_ADDRESS + ""}""))
            .setHeader(Exchange.HTTP_PATH, simple(""${properties:hermes.dris.distribution.kv78.controller.urlpath}""))
            .setHeader(Exchange.CONTENT_TYPE, constant(""application/xml""))
            .setHeader(Exchange.CONTENT_ENCODING, constant(""gzip"")) // use gzip compression
            .log(verboseLoggingLevel, ""Sending request to ${in.header.CamelHttpUri}/${in.header.CamelHttpPath}"" + MESSAGE_LOG_FORMAT)
             // use multicast instead of a pipeline, or the audit log will contain the http response!
            .multicast()
                .stopOnException()
                .to(ENDPOINT_TIMINGPOINT_HTTP + ""?httpClientConfigurerRef=timingPointHttpClientConfigurer&headerFilterStrategy=#distributionHttpHeaderFilterStrategy"", ENDPOINT_AUDIT_OUTGOING)
            .end()
            .beanRef(""timingPointSequencer"", ""handleSuccess"");
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236397,,,Sun Apr 29 15:22:56 UTC 2012,,,,,,,,,,,"0|i025kv:",10505,,,,,,,,,,,,,,,,,,,,"29/Apr/12 14:22;davsclaus;In your multicast, you only have 1 processor (eg only 1 to). If you remove the multicast, then I would assume the WARN is removed.;;;","29/Apr/12 14:27;davsclaus;For the various endpoints can you post the real values you are using, eg ENDPOINT_DISPATCH and so forth.;;;","29/Apr/12 14:34;davsclaus;Ah you got 2 endpoints in the multicast, with the comma on the far right side.;;;","29/Apr/12 15:22;davsclaus;Okay I can re-produce the issue now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
spring.schema is not up to date,CAMEL-5192,12551585,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbonofre,jbonofre,19/Apr/12 08:15,03/Jun/12 14:53,14/Jul/23 05:45,03/Jun/12 14:53,2.8.4,2.9.1,,,,,,,,,,,2.8.6,2.9.3,,,camel-cxf,camel-spring,camel-spring-integration,,0,,,,,,,,,"The URI of the Spring schema has been updated in Camel 2.9.1 and 2.8.4:

http://camel.apache.org/schema/cxf/

We can see that starting from 2.9.1 and 2.8.4, we suffix the schema with -spring or -blueprint.

However, the spring.schema resource file has not been updated with this suffix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,236393,,,Thu Apr 19 08:56:14 UTC 2012,,,,,,,,,,,"0|i025kn:",10504,,,,,,,,,,,,,,,,,,,,"19/Apr/12 08:56;cschneider;Looks like a bug .. I think we should also update the spring.schema file to reflect this change;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX issues on WebSphere,CAMEL-5187,12551223,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,christian.ohr,christian.ohr,17/Apr/12 13:18,18/Apr/12 08:00,14/Jul/23 05:45,18/Apr/12 08:00,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,0,,,,,,,,,"While setting up a Camel web application for WebSphere (7) I encountered two issues

1. Documentation: the Camel JMX docs proposes the following settings for WebSphere:
{code}
<camel:jmxAgent id=""agent"" createConnector=""true"" mbeanObjectDomainName=""org.yourname"" mbeanServerDefaultDomain=""WebSphere""/>
{code}

This registers the beans with the PlatformMbeanServer instead of the WebSphere MBean server. The following setup works better:
{code}
<camel:jmxAgent id=""agent"" createConnector=""false"" mbeanObjectDomainName=""org.yourname"" usePlatformMBeanServer=""false"" mbeanServerDefaultDomain=""WebSphere""/>
{code}

2. For each Camel route, the same Tracer and DefaultErrorHandler MBeans are tried to be registered over and over again. Because WebSphere changes the ObjectNames on registration, 

{{server.isRegistered(name);}} in {{DefaultManagementAgent#registerMBeanWithServer}} always returns false, which causes the MBean to be re-registered, which again cause Exceptions, e.g.

{code}
14:35:48,198 [WebContainer : 4] [] WARN  - DefaultManagementLifecycleStrategy.onErrorHandlerAdd(485) | Could not register error handler builder: ErrorHandlerBuilderRef[CamelDefaultErrorHandlerBuilder] as ErrorHandler MBean.
javax.management.InstanceAlreadyExistsException: org.apache.camel:cell=wdf-lap-0319Node01Cell,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"",context=wdf-lap-0319/camelContext,type=errorhandlers,node=wdf-lap-0319Node01,process=server1
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:465)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1496)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:975)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:929)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:494)
	at com.ibm.ws.management.PlatformMBeanServer.registerMBean(PlatformMBeanServer.java:484)
	at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:320)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:236)
...
{code}

The web application starts up, but with a lot of exceptions in the log.

Proposal:
Instead of using a Set<ObjectName> for mbeansRegistered, use a Map<ObjectName, ObjectName> where the key is the ""Camel"" ObjectName and the value is the actually deployed ObjectName.

I will provide a patch that illustrates the idea.
",WebSphere 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Apr/12 21:34;christian.ohr;CAMEL-5178.patch;https://issues.apache.org/jira/secure/attachment/12523027/CAMEL-5178.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,236087,,,Wed Apr 18 08:00:13 UTC 2012,,,,,,,Patch Available,,,,"0|i025jj:",10499,,,,,,,,,,,,,,,,,,,,"18/Apr/12 08:00;davsclaus;Thanks for the patch. I updated the doc as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backmerge CAMEL-5018 to the Bindy component for non-required fields,CAMEL-5180,12551105,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,magnuspalmer,magnuspalmer,16/Apr/12 17:51,17/Apr/12 07:57,14/Jul/23 05:45,17/Apr/12 07:57,2.9.1,,,,,,,,,,,,2.9.3,,,,camel-bindy,,,,0,,,,,,,,,"The issue, originally reported via CAMEL-5133, is to backmerge the CAMEL-5018 fix into the 2.9.x branch.

I merged revision 1292164 into my local 2.9.x branch that I had updated with two new test cases.
Before merge one test failed, after merge all tests were successfull.
Attaching the updated model and tabtest.
--- 

Revision: 1292164
Author: ningjiang
Date: den 22 februari 2012 08:49:40
Message:
CAMEL-5018 support the set the default value on the field of bindy CVS
----
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Apr/12 17:58;magnuspalmer;BindyTabSeparatorTest.java;https://issues.apache.org/jira/secure/attachment/12522822/BindyTabSeparatorTest.java","16/Apr/12 17:58;magnuspalmer;PurchaseOrder.java;https://issues.apache.org/jira/secure/attachment/12522821/PurchaseOrder.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235969,,,Tue Apr 17 07:57:30 UTC 2012,,,,,,,,,,,"0|i025hz:",10492,,,,,,,,,,,,,,,,,,,,"16/Apr/12 17:58;magnuspalmer;Think that I haven't configured the right settings in my Eclipse for formatting unfortunately.;;;","17/Apr/12 07:57;davsclaus;Thanks for the test cases.

I applied them to trunk and the 2.9 branch.
And backported CAMEL-5180 to 2.9 as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel error handler stop routing on original route when an exception occur in the splitter using jaxb marshalled objects ,CAMEL-5164,12550582,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lfoppiano,lfoppiano,11/Apr/12 21:12,17/Jul/12 22:12,14/Jul/23 05:45,18/Apr/12 16:51,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-core,camel-jaxb,,,0,,,,,,,,,"I've been digging into this problem for some time now and I haven't find why this is happening. I'm using camel 2.9.1. 
The whole problems is quite complicated to explain, I've created a test that reproduce the error that might be more useful.

I have a route that get some XML and transform it with a processor in an object generated from XSD with JAXB. After that the object (transported as XML) is then split based a certain logic. The route uses the deadLetterCHannel error handler to a 'reject' endpoint. 

Now, sometimes when I get some invalid character in the input file (0x10 eg.) (in my processor I don't polish them), the splitter will crash but, instead of detouring only the messages that contains errors to the deadLetterChanne, it will detour every message coming after the error occurs.

I know that I can fix the problem in the processor by removing the invalid characters, but in my opinion, camel should be more robust and doesn't block the entire processing for a ""non fatal"" error. Or I should use a different way for doing what I'm doing... 

Please have a look at the code and let me know, I think is a bug but I'm waiting for your opinion.

Thanks in advance ",,lfoppiano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5172,"13/Apr/12 06:09;lfoppiano;SplitterAndExceptionRouteTest.java;https://issues.apache.org/jira/secure/attachment/12522533/SplitterAndExceptionRouteTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235446,,,Tue Jul 17 22:12:41 UTC 2012,,,,,,,,,,,"0|i025ef:",10476,,,,,,,,,,,,,,,,,,,,"13/Apr/12 05:16;davsclaus;Luca thanks for reporting.

Do you mind re-attaching the test source code, and mark [x] in grant license to Apache. Then we can use that in Camel as an unit test and add to camel-jaxb so we can test against regressions.;;;","13/Apr/12 06:28;davsclaus;I have re-produced the issue and am working on a fix.;;;","15/Apr/12 12:19;davsclaus;CAMEL-5172 fixes this;;;","15/Apr/12 15:09;davsclaus;This is now fixed by CAMEL-5172. However CAMEL-5172 has an API change, which makes it more harder to backport to the 2.9 branch. We may consider doing this despite the API change as its mostly internal facing. And for people using 3rd party type converters they most often use the @Converter annotation that is not affected by the API change.

If not we would need to implement a special fix for this in the 2.9 branch.;;;","18/Apr/12 16:51;davsclaus;Should be fixed in the next 2.9 release.;;;","17/Jul/12 22:12;lfoppiano;It has been implemented in 2.10.0. This fix made my day! :) 

cool stuff!;;;",,,,,,,,,,,,,,,,,,,,,,,,
If throttler or delayer expression evaluation throws exception then error handler is not used,CAMEL-5163,12550480,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/12 08:10,11/Apr/12 08:47,14/Jul/23 05:45,11/Apr/12 08:47,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"If you use the throttler or delayer EIP and the expression evaluated at runtime throws an exception, then that is not caught and handled on the exchange, causing the error handler not to react.

See CAMEL-5126",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235344,,,2012-04-11 08:10:54.0,,,,,,,,,,,"0|i025e7:",10475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnException - Handler or Continued predicate is invoked twice per exception,CAMEL-5162,12550474,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/12 06:23,11/Apr/12 07:16,14/Jul/23 05:45,11/Apr/12 07:16,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"See CAMEL-5139

When using handled(predicate) or continued(predicate) those is evaluated twice per exception. We should only do this once, which is what the end user would normally except.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235338,,,2012-04-11 06:23:40.0,,,,,,,,,,,"0|i025dz:",10474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
If MyBatis experiences an error on commit (e.g. unique PK violation) it appears to hold the session open and cause DB writelock errors,CAMEL-5161,12550449,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,daubman,daubman,10/Apr/12 22:01,11/Apr/12 22:03,14/Jul/23 05:45,11/Apr/12 22:03,2.10.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-mybatis,,,,0,exception,mybatis,sql,,,,,,"When MyBatis experiences an error committing a statement the session.close() is not called and the DB is caught in a writelock state until camel is exited.
I have not tested a fix yet, but I believe that if, in: camel/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java
session.commit() is placed in a try/catch block with session.close() in its finally it will ensure the session is closed even when MyBatis throws an exception during a commit.

One of the exceptions I've experienced this with is 'java.sql.BatchUpdateException' where a row was attempting to be inserted with a field that violated a table's unique index constraint.

I should be able to submit a patch later this week if necessary.",,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,235313,,,Wed Apr 11 22:03:19 UTC 2012,,,,,,,,,,,"0|i025dr:",10473,,,,,,,,,,,,,,,,,,,,"11/Apr/12 22:03;muellerc;Thanks for reporting Aaron! I fixed it today (because we will start releasing Camel 2.8.5 and 2.9.2 tomorrow).

Best,
Christian;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 camel-cxfrs producer should keep the response detail when the exception is thrown,CAMEL-5158,12550375,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Apr/12 14:00,11/Apr/12 05:03,14/Jul/23 05:45,11/Apr/12 05:03,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,0,,,,,,,,,"CxfRsProducer doesn't put the response detail message into the exception instead of just calling response.toString().
We should fix it by looking up the response from input stream of the response entity.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235240,,,2012-04-10 14:00:43.0,,,,,,,,,,,"0|i025db:",10471,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Message hasAttachments need to populate initial attachments,CAMEL-5157,12550364,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 12:34,11/Apr/12 09:47,14/Jul/23 05:45,11/Apr/12 09:47,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"This is needed to ensure we answer the correct.

For example it may report false, before the attachments has been initial populated.
hasAttachments -> false
getAttachments.size -> 2

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235229,,,Tue Apr 10 12:43:43 UTC 2012,,,,,,,,,,,"0|i025d3:",10470,,,,,,,,,,,,,,,,,,,,"10/Apr/12 12:43;davsclaus;As attachments is seldom used, we could consider @deprecating {{hasAttacments}} as pople can just use {{getAttachments}}, then we can optimize logic in Camel to avoid creating an empty HashMap when copying a Message. We do this for example as defensive copy for the redelivery error handler etc.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language - OGNL - Invoking explicit method with no parameters should not cause ambiguous exception for overloaded methods,CAMEL-5154,12550315,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 05:08,10/Apr/12 06:07,14/Jul/23 05:45,10/Apr/12 06:07,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having
- toUpperCase()
- toUpperCase(Locale)

Then if you specify this in a simple ognl expression as follows
{code}
${body.toUpperCase()}
{code}

Then Camel bean component should pick the no-parameter method as specified.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235180,,,2012-04-10 05:08:45.0,,,,,,,,,,,"0|i025c7:",10466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language - OGNL - Invoking explicit method with no parameters should not cause ambiguous exception for overloaded methods,CAMEL-5153,12550314,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 05:08,11/Apr/12 04:56,14/Jul/23 05:45,11/Apr/12 04:56,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having
- toUpperCase()
- toUpperCase(Locale)

Then if you specify this in a simple ognl expression as follows
{code}
${body.toUpperCase()}
{code}

Then Camel bean component should pick the no-parameter method as specified.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235179,,,2012-04-10 05:08:45.0,,,,,,,,,,,"0|i025cf:",10467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty psuedo proxy,CAMEL-5151,12550235,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matt.narrell,matt.narrell,09/Apr/12 15:17,13/Jun/12 11:40,14/Jul/23 05:45,13/Jun/12 11:40,2.9.1,,,,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,1,,,,,,,,,"I have a route:

   from(""netty:tcp://somewhere:1234?..."")
     .to(""bean:myBean?method=callOut"")

Where the callOut method does several things, followed by a producerTemplate call to another netty endpoint:

   producerTemplate.sendBody(""netty:tcp://somewhereElse:6789..."", ExchangePattern.InOut, body);

I'm unable to proxy ""directly"" from/to the netty endpoints, and need to pass through this bean.  However, I receive the following exception:

   Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener()    instead or call await*() from a different thread.",,ainhab,davsclaus,matt.narrell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,235100,,,Wed Jun 13 11:40:04 UTC 2012,,,,,,,,,,,"0|i025br:",10464,,,,,,,,,,,,,,,,,,,,"09/Apr/12 15:18;matt.narrell;This works fine with Mina, but chokes with Netty.;;;","29/Apr/12 07:34;davsclaus;Can you try with 2.9 or 2.10 SNAPSHOT as camel-netty have had some changes.;;;","30/Apr/12 16:31;matt.narrell;Same exception with 2.10-SNAPSHOT:
{code}
Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:314) ~[netty-3.4.2.Final.jar:na]
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:226) ~[netty-3.4.2.Final.jar:na]
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:314) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:175) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:186) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:119) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
{code};;;","13/Jun/12 09:49;ainhab;This problem needs to be fixed, it is easily reproducable, This will also effect the camel load-balancing with NETTY.;;;","13/Jun/12 11:40;davsclaus;Should work now, also without using a bean, just by having from -> to;;;",,,,,,,,,,,,,,,,,,,,,,,,,
StAXConverter is not threadsafe when not using Woodstox,CAMEL-5142,12549742,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,05/Apr/12 15:38,06/Apr/12 14:34,14/Jul/23 05:45,06/Apr/12 14:34,2.9.1,,,,,,,,,,,,2.8.5,2.9.2,,,camel-core,,,,0,,,,,,,,,"The StAXConverter uses singletons for the XMLInputFactory and XMLOutputFactory.   That works fine with woodstox where those implementations are threadsafe.   However, the sun parser built into the JDK is not thread safe.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,234733,,,2012-04-05 15:38:24.0,,,,,,,,,,,"0|i0259r:",10455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bean component - @Handler should take precedence in a bean that implements Predicate,CAMEL-5140,12549663,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Apr/12 10:55,05/Apr/12 11:37,14/Jul/23 05:45,05/Apr/12 11:37,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"If you use a bean in a Camel route, and have not specified the method name to invoke. Then Camel has to scan for suitable methods to use. And for that we have the @Handler annotation which should take precedence in this process. However if the bean implements Predicate, or Processor, then Camel will use that. However the @Handler should be used instead, as this is what the end-user expects. And also what we tell in the docs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,234654,,,2012-04-05 10:55:26.0,,,,,,,,,,,"0|i0259b:",10453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer component does not suspend,CAMEL-5137,12549189,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gordonkl,gordonkl,02/Apr/12 17:04,05/Apr/12 17:06,14/Jul/23 05:45,05/Apr/12 17:06,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,A route which begins with a Timer consumer does not suspend the consumer when the route is suspended.,Windows XP and RedHat Linux,gordonkl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Apr/12 15:35;gordonkl;TimerTest.java;https://issues.apache.org/jira/secure/attachment/12521514/TimerTest.java","05/Apr/12 15:35;gordonkl;TimerTestOutput.txt;https://issues.apache.org/jira/secure/attachment/12521515/TimerTestOutput.txt",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,234180,,,Thu Apr 05 17:06:43 UTC 2012,,,,,,,,,,,"0|i0258n:",10450,,,,,,,,,,,,,,,,,,,,"05/Apr/12 09:07;davsclaus;Can you provide more details?

The timer consumer will cancel the task, when the consumer is suspended or stopped
and therefore the timer tasks stops firing. This is the expected behavior.
;;;","05/Apr/12 15:35;gordonkl;Here is a simple test case which has a route started by a timer every second and just logs a message.  After running a time or two, we suspend the CamelContext and wait as we observe the timer continues to fire and the route executes despite being suspended.;;;","05/Apr/12 17:01;davsclaus;Ah thanks, we needed some logic in TimerConsumer to detect the suspend/resume.;;;","05/Apr/12 17:06;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
BindyCsvDataFormat breaks for non-required fields when separator is a whitespacecharacter like tab.,CAMEL-5133,12548943,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,magnuspalmer,magnuspalmer,31/Mar/12 11:17,16/Apr/12 18:00,14/Jul/23 05:45,04/Apr/12 10:04,2.7.3,2.8.4,2.9.1,,,,,,,,,,2.10.0,,,,camel-bindy,,,,0,,,,,,,,,"When the separator is a whitespacecharacter and the last two (or more) fields are not required and empty, the parsing fails.

The cause is this:
BindyCsvDataFormat.java

 138               // Read the line
 139              String line = scanner.nextLine().trim();

String.trim() trims whitespace characters as in Character.isWhitespace(separatorChar)

See also:
http://camel.465427.n5.nabble.com/Bindy-Having-trouble-with-the-required-field-tp5597196p5597196.html

I can provide testcases and patches if necessary.","Windows:
OS Name:                   Microsoft Windows 7 Enterprise
OS Version:                6.1.7601 Service Pack 1 Build 7601
OS Manufacturer:           Microsoft Corporation

SpringSource Tool Suite 
Version: 2.9.1.RELEASE
Build Id: 201203221000",,,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,234016,,,Mon Apr 16 18:00:51 UTC 2012,,,,,,,,,,,"0|i0257r:",10446,,,,,,,,,,,,,,,,,,,,"02/Apr/12 23:21;magnuspalmer;This actually works in trunk (2.10-SNAPSHOT).
Seem like a side-effect of another change, haven't figured it out yet. ;;;","03/Apr/12 06:24;njiang;I think CAMEL-5018 fix the issue.;;;","03/Apr/12 08:23;magnuspalmer;Yes, that seems to be the one.
Should I close this as a ""duplicate"" and link to CAMEL-5018?;;;","04/Apr/12 10:04;njiang;
It was fixed by CAMEL-5018.;;;","04/Apr/12 10:05;njiang;@Magnus, I just marked this issue to be resolved.;;;","04/Apr/12 10:05;njiang;@Magnus, I just marked this issue to be resolved.;;;","16/Apr/12 18:00;magnuspalmer;CAMEK-5018 fixes this.
CAMEL-5180 created to get that fix backported into the 2.9.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs feature does not work as it refers to jetty-bundle-version which does not resolve,CAMEL-5131,12548662,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,29/Mar/12 13:17,29/Mar/12 14:12,14/Jul/23 05:45,29/Mar/12 14:12,,,,,,,,,,,,,2.9.2,,,,camel-hdfs,,,,0,,,,,,,,,"In the feature file the camel-hdfs feature loads the bundle:
<bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jetty/${jetty6-bundle-version}</bundle>

As jetty-bundle-version is not defined that does not work.

I see two possible solutions:
1. use jetty-version instead
2. Remove the bundle as the feature also loads the war feature which should load jetty

I will try to fix with variant 1. Does anyone know why we need the bundle if we have the war feature?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233759,,,2012-03-29 13:17:15.0,,,,,,,,,,,"0|i0257b:",10444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptFrom() doesn't work with property placeholders,CAMEL-5129,12548495,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,28/Mar/12 13:48,05/Apr/12 10:31,14/Jul/23 05:45,05/Apr/12 10:31,2.8.0,,,,,,,,,,,,2.10.0,2.9.2,,,,,,,0,,,,,,,,,"When using property placeholders in consumer endpoints, interceptFrom is not able to match the pattern against the Endpoint URI because the latter is passed unresolved. {{EndpointHelper.matchEndpoint(String uri, String pattern)}} receives the placeholder in the first parameter rather than the resolved value of the property.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233592,,,2012-03-28 13:48:27.0,,,,,,,,,,,"0|i0256v:",10442,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RMI endpoint doesn't handle nested exception and raise CamelRuntimeException instead of RemoteException,CAMEL-5122,12548308,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbonofre,jbonofre,27/Mar/12 13:38,11/Jun/12 07:42,14/Jul/23 05:45,11/Jun/12 07:42,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.3,2.8.5,2.9.2,,,,2.10.0,2.9.3,,,camel-rmi,,,,0,,,,,,,,,"When we have a route looking like:

<from uri=""rmi:...""/>
<to uri=""myBean""/>

if an exception is raised on myBean, the RMI endpoint ignores the exception described in the RemoteInterface and always raises a RuntimeCamelException nesting the original exceptions.

More over, RuntimeCamalException should not be raised by the RMI endpoint. It would make more sense to raise a RemoteException, as we are on a RMI endpoint.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233405,,,Mon Jun 04 17:47:32 UTC 2012,,,,,,,,,,,"0|i0255b:",10435,,,,,,,,,,,,,,,,,,,,"04/Jun/12 17:47;davsclaus;Any update on this? If you got a sample unit test, I may help.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfDestination should copy the in message header to the out message when it sends the message back,CAMEL-5116,12547998,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Mar/12 09:33,31/Mar/12 05:43,14/Jul/23 05:45,31/Mar/12 05:43,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233095,,,Sat Mar 31 05:43:54 UTC 2012,,,,,,,,,,,"0|i0253z:",10429,,,,,,,,,,,,,,,,,,,,"31/Mar/12 05:43;njiang;Applied the patch into trunk, 2.9.x and 2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfBeanDestination should copy the in message header to the out message,CAMEL-5115,12547997,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Mar/12 09:29,31/Mar/12 05:42,14/Jul/23 05:45,31/Mar/12 05:42,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,0,,,,,,,,,"User complains about can not access any other headers after the cxfbean in this mail thread[1].
We should let the CxfBeanDestination copy the in message header before it sends the message back.

[1]http://camel.465427.n5.nabble.com/Camel-CXF-Drops-Headers-tt5590792.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233094,,,Sat Mar 31 05:42:26 UTC 2012,,,,,,,,,,,"0|i0253j:",10427,,,,,,,,,,,,,,,,,,,,"25/Mar/12 09:32;njiang;We should do the same thing in the CXfDestination.;;;","31/Mar/12 05:42;njiang;Applied patch into trunk， 2.9.x and 2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Download page does not include any hashes,CAMEL-5114,12547931,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,sebb,sebb,24/Mar/12 01:46,25/Mar/12 13:30,14/Jul/23 05:45,25/Mar/12 13:30,,,,,,,,,,,,,2.10.0,,,,website,,,,0,,,,,,,,,Download pages should include either MD5 or SHA1 hashes (or both),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,233028,,,Sun Mar 25 13:30:05 UTC 2012,,,,,,,,,,,"0|i0253b:",10426,,,,,,,,,,,,,,,,,,,,"25/Mar/12 13:30;muellerc;Thanks for pointing this out. I added the MD5 and SHA1 checksum links to our download page.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using shareUnitOfWork with DeadLetterChannel sending message to a route doesnt work as expected,CAMEL-5110,12547443,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Mar/12 19:15,21/Mar/12 20:30,14/Jul/23 05:45,21/Mar/12 20:30,2.9.0,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Error-handling-issue-for-splitter-with-sharedUnitOfWork-and-stopOnException-td5550093.html

The issue is that the when the message is handled by the dead letter channel, then some state from the sub unit of work, should be cleared, to ensure the exchange can be processed by the dead letter channel. This becomes only an issue when the dead letter endpoint is another route.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,232601,,,2012-03-21 19:15:33.0,,,,,,,,,,,"0|i0252f:",10422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
axiom 1.2.12 can't work with abdera 1.1.2,CAMEL-5109,12547333,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,21/Mar/12 05:19,10/Jan/13 08:48,14/Jul/23 05:45,14/Dec/12 08:17,2.8.4,2.9.1,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,0,,,,,,,,,"CAMEL-4192 upgrade to axiom 1.2.12, and we have camel-atom feature which use latest axiom 1.2.12 and abdera 1.1.2 together, however, actually abdera 1.1.2  need work with axiom 1.2.10.

In org.apache.abdera.parser.stax.util.FOMExtensionIterator(abdera code), it need use a field currentChild which inherit from org.apache.axiom.om.impl.traverse.OMAbstractIterator(axiom code),  but field currentChild was removed from axiom 1.2.12, so that we can see exception like
java.lang.NoSuchFieldError: currentChild
	at org.apache.abdera.parser.stax.util.FOMExtensionIterator.hasNext(FOMExtensionIterator.java:74)
	at org.apache.abdera.parser.stax.util.FOMList.buffer(FOMList.java:60)
	at org.apache.abdera.parser.stax.util.FOMList.size(FOMList.java:77)


As abdera 1.1.2 already the latest version so that I think we need rollback to axiom 1.2.10 utill next abdera version which can work with axiom 1.2.12

Btw I believe this is the reason that why CXF still use axiom 1.2.10.",,ben.truitt,ffang,,,,,,,,,,,,,,,,,,,CAMEL-5947,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,232491,,,Thu Dec 13 11:10:03 UTC 2012,,,,,,,,,,,"0|i02527:",10421,,,,,,,,,,,,,,,,,,,,"21/Mar/12 08:20;ffang;commit fix
http://svn.apache.org/viewvc?rev=1303301&view=rev for trunk
http://svn.apache.org/viewvc?rev=1303304&view=rev for 2.9.x branch
http://svn.apache.org/viewvc?rev=1303306&view=rev for 2.8.x branch;;;","12/Dec/12 20:39;ben.truitt;This appears to be broken again in Camel 2.10.2.  The change the re-introduced this issue was revision 1356481:
http://svn.apache.org/viewvc/camel/trunk/parent/pom.xml?r1=1356480&r2=1356481&diff_format=h;;;","13/Dec/12 02:34;ffang;Hi,

Thanks for pointing out this issue.
Sent an alarm mail around to community.

Freeman;;;","13/Dec/12 11:10;ffang;reopen it as this issue get introduced again;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
cxfrs producer should retain the message headers when it gets the response,CAMEL-5107,12547021,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Mar/12 14:21,20/Mar/12 08:51,14/Jul/23 05:45,20/Mar/12 08:51,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,0,,,,,,,,,"Here is the discussion[1] about it.
[1]http://camel.465427.n5.nabble.com/CXFRS-producer-removing-JMS-headers-tp5568925p5574037.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,232179,,,Tue Mar 20 08:51:05 UTC 2012,,,,,,,,,,,"0|i0251r:",10419,,,,,,,,,,,,,,,,,,,,"20/Mar/12 08:51;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer endpoint getState does not work in JMX,CAMEL-5102,12546812,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,16/Mar/12 16:19,16/Mar/12 16:26,14/Jul/23 05:45,16/Mar/12 16:26,2.9.0,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,jmx,,,0,,,,,,,,,The getState attribute does not work.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231970,,,2012-03-16 16:19:13.0,,,,,,,,,,,"0|i0250n:",10414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange.FAILURE_ENDPOINT header points to incorrect endpoint with multicast,CAMEL-5098,12546713,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,16/Mar/12 02:54,21/Mar/12 14:55,14/Jul/23 05:45,21/Mar/12 14:55,2.8.4,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,0,,,,,,,,,"With multicast when an Exchange is sent to multiple endpoints, the FAILURE_ENDPOINT header points to the last endpoint hit, not the (last) one that actually caused the exception.

I have a fix for it, but I need to see if this happens for other EIPs as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,231871,,,Tue Mar 20 02:10:54 UTC 2012,,,,,,,,,,,"0|i024zr:",10410,,,,,,,,,,,,,,,,,,,,"20/Mar/12 02:10;hadrian;I have a few tests failing, looks like this will take one more day. There is a bit of inconsistency in the way exception handling is correlated with exchange properties.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect feature definition for camel-fop,CAMEL-5097,12546711,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,16/Mar/12 02:47,16/Mar/12 02:49,14/Jul/23 05:45,16/Mar/12 02:49,2.10.0,,,,,,,,,,,,2.10.0,,,,,,,,0,,,,,,,,,,"Missing dependency in feature causes ""no export found"" error during feature validation:

{code}
[WARNING] Failed to validate feature camel-fop
[WARNING] No export found to match org.apache.avalon.framework.configuration (imported by mvn:org.apache.camel/camel-fop/2.10-SNAPSHOT)
{code}

The cause is a dependency on the non-bundle avalon jars.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,231869,,,2012-03-16 02:47:23.0,,,,,,,,,,,"0|i024zj:",10409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToMockEndpoint doesn't start or stop the producer which is intercepted,CAMEL-5089,12546534,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Mar/12 07:25,15/Mar/12 08:55,14/Jul/23 05:45,15/Mar/12 08:55,2.7.0,2.8.0,2.9.0,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,0,,,,,,,,,The producer which is intercepted by the InterceptSendToMockEndpoint should manage the lifecycle of  the delegate producer otherwise the delegate producer will complain about it.,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5084,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231692,,,Thu Mar 15 08:55:35 UTC 2012,,,,,,,,,,,"0|i024xr:",10401,,,,,,,,,,,,,,,,,,,,"15/Mar/12 08:55;njiang;Applied patch into trunk, camel 2.9.x and camel 2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cometD component doesn't support multiple endpoints with different ports,CAMEL-5087,12546524,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Mar/12 02:58,15/Mar/12 11:24,14/Jul/23 05:45,15/Mar/12 11:24,2.8.0,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cometd,,,,0,,,,,,,,,"Current camel-cometD component always use on server and it doesn't support to create multiples endpoints with different ports.

Here is the thread which discuss about it.
[1]http://camel.465427.n5.nabble.com/Error-with-multiple-CometD-components-td5562936.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231682,,,Thu Mar 15 11:24:44 UTC 2012,,,,,,,,,,,"0|i024xb:",10399,,,,,,,,,,,,,,,,,,,,"15/Mar/12 11:24;njiang;Committed the patch into trunk, camel-2.8.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Archetype: camel-archetype-web retains loaded classes after redeployment, causing permgen space to fill up.",CAMEL-5086,12546425,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,drichelson,drichelson,14/Mar/12 16:53,20/Mar/12 06:39,14/Jul/23 05:45,20/Mar/12 05:54,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-spring,,,,0,leak,memory,memory_leak,permgen,spring,tomcat,war,webapp,"Steps to reproduce:
1. Create a new camel web project (based on instructions here: http://camel.apache.org/camel-maven-archetypes.html ):

mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-web -DarchetypeVersion=2.9.1 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-group

2. Build the new project:
mvn clean install

3. Copy .war file in target/ to tomcat's webapps directory.
4. Reload webapp (easiest way is to touch the .war file)
5. If you are using a profiler, you will see that the permgen space increases on every reload (the previous webapp's classes don't get unloaded)
6. Eventually the webapp container will crash with a permgen out of memory error.

Workaround: restarting the webapp container will reset the permgen space.
Removing the Spring nature of the project makes this go away, so it could be a problem with Spring itself.

This also happens when using Jetty7, so I don't think it is a problem with the container.

","Apache Tomcat 7.0.26
jdk 1.6.0_26
CentOS:
Linux version 2.6.18-238.el5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Mar/12 05:50;davsclaus;tomcat.png;https://issues.apache.org/jira/secure/attachment/12519026/tomcat.png","20/Mar/12 05:52;davsclaus;tomcat2.png;https://issues.apache.org/jira/secure/attachment/12519027/tomcat2.png",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231583,,,Tue Mar 20 06:39:02 UTC 2012,,,,,,,,,,,"0|i024x3:",10398,,,,,,,,,,,,,,,,,,,,"20/Mar/12 05:41;davsclaus;I suggest to attach jvisualvm to the tomcat container and try to see if you can spot any leaks?;;;","20/Mar/12 05:49;davsclaus;We have fixed a number of leaks on trunk. I suggest to try the upcoming 2.10 release. Or the 2.9.2 release.

I just tried with 2.10 and could not detect any leaks. I touched the web app 5 times
{code}
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
{code}

And memory usage was low. When performing a GC I get down to 7-8mb.;;;","20/Mar/12 05:53;davsclaus;And my permgen, was not leaking, and getting down to 31mb - see tomcat2;;;","20/Mar/12 06:03;davsclaus;I am trying with the 2.9-SNAPSHOT to see how it goes there.;;;","20/Mar/12 06:39;davsclaus;Looks fine with the 2.9-SNAPSHOT (to be 2.9.2 release).;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Failover EIP - Should use defensive copy of exchange before failover to avoid side effects,CAMEL-5085,12546403,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Mar/12 14:52,15/Mar/12 10:44,14/Jul/23 05:45,15/Mar/12 10:44,2.8.1,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,0,,,,,,,,,"When using the failover load balancer, it works directly on the given exchange, and in case of a failover, it clears the exception state etc.

However this does not work too well as if you use a processor directly then you can mutate the message before failover, which mean when the exchange is failed over, then its a 100% copy of the input message, but the previously mutated message.

We should do like the other EIPs by doing a defensive copy of the exchange.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231561,,,2012-03-14 14:52:34.0,,,,,,,,,,,"0|i024wv:",10397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error when mocking all endpoints and using cxf,CAMEL-5084,12546398,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hefiso,hefiso,14/Mar/12 14:31,15/Mar/12 08:57,14/Jul/23 05:45,15/Mar/12 08:57,2.9.1,,,,,,,,,,,,2.9.2,,,,camel-cxf,,,,0,,,,,,,,,"When upgrading from Apache Camel 2.9.0 to 2.9.1 I suddently get an error when using camel-cxf endpoints. When running my JUnit tests (extending CamelSpringTestSupport) I get this exception:

Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.getBindingOperationInfo(CxfProducer.java:331)
	at org.apache.camel.component.cxf.CxfProducer.prepareBindingOperation(CxfProducer.java:202)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:141)
	at org.apache.camel.impl.SynchronousDelegateProducer.process(SynchronousDelegateProducer.java:61)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:144)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:56)
When I debug my test I see that the method doStart() in CxfProducer is never called, resulting in client being null (hence the NullPointerException in CxfProducer.java:331 ). 

I suspect the mocking all endpoints with the InterceptSendToEndpoint, 
short-circut the startup procedure to not delegate the start call to 
the intercepted endpoint. Or there abouts. 

See discussion in camel user forum: http://camel.465427.n5.nabble.com/Error-using-apache-cxf-w-Camel-2-9-1-tc5560906.html

",Generic windows,,,,,,,,,,,,,,,,,,,,,CAMEL-5089,,,,,,,,,,,,"14/Mar/12 14:33;hefiso;hefiso-test.zip;https://issues.apache.org/jira/secure/attachment/12518328/hefiso-test.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,231556,,,Thu Mar 15 08:57:51 UTC 2012,,,,,,,,,,,"0|i024wn:",10396,,,,,,,,,,,,,,,,,,,,"14/Mar/12 14:33;hefiso;Example showing the error. Downgrade to version 2.9.0 removes the error.;;;","15/Mar/12 06:57;njiang;I just debugged the code with the test case, I found the InterceptSendToEndpoint doesn't sart the producer which it created.
After updated the code for it, the test passed.
;;;","15/Mar/12 07:35;njiang;This issue should be resolved by CAMEL-5089.;;;","15/Mar/12 08:57;njiang;It should be resolve in camel 2.9.2, before that you can applied the patch of CAMEL-5089 yourself.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jt400 - Parameter length when doing Program Call issue,CAMEL-5080,12546272,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,janacleto,janacleto,13/Mar/12 18:14,15/Mar/12 12:44,14/Jul/23 05:45,15/Mar/12 12:44,2.8.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,0,camel-jt400,components,ProgramCall,,,,,,"When the length of each parameter of a program.PGM is greater than the length of his values, the parameters are setted incorrectly.

Example:

Input of program.pgm:
param1 -> A5 (alphanumeric with length 5) 
param2 -> A5 (alphanumeric with length 5) 

When the String array is {""123"", ""456""} the values are setted on each parameter as:
param1 = 12345
param2 = 6

",,janacleto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Mar/12 10:55;janacleto;camel-jt400.patch;https://issues.apache.org/jira/secure/attachment/12518445/camel-jt400.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,231430,,,Thu Mar 15 12:44:55 UTC 2012,,,,,,,Patch Available,,,,"0|i024vr:",10392,,,,,,,,,,,,,,,,,,,,"13/Mar/12 18:15;janacleto;Here the patch to correct the issue.;;;","15/Mar/12 10:43;davsclaus;Joao, can you re-attach your patch. And make sure to mark [x] in grant license to ASF. Otherwise we cannot accept your patch.;;;","15/Mar/12 10:55;janacleto;Here is the attach with grant license to ASF. Thanks Claus.;;;","15/Mar/12 12:44;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Message Loss when using Weighted Round Robin LoadBalancer,CAMEL-5070,12545675,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,nikosd23,nikosd23,08/Mar/12 16:48,10/Mar/12 09:25,14/Jul/23 05:45,09/Mar/12 19:25,2.9.1,,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,0,,,,,,,,,"chooseProcessor method accesses resources in a non synchronized fashion. This leads in errors during loadbalancing and as a result messages are lost. I have created a project that provides an integration test (using karaf 2.2.5 and a custom command to check messages of the activemq broker) with a custom weighted round robin loadbalancer that ""seems"" to solve the issue of lost messages.
 
The problem with the provided solution is that when messages are dequeued from the second stage of queues (queues1, 2 and 3) in custom-loadbalancer-route subproject the jmsconsumer threads also block (checked this using profiler). I would expect only the jmsconsumer threads of the first queue (initial.queue) to block waiting for the synchronized chooseProcessor method. Any clues on why this happens?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Mar/12 16:49;nikosd23;loadbalancer-itest.zip;https://issues.apache.org/jira/secure/attachment/12517574/loadbalancer-itest.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,230858,,,Sat Mar 10 09:25:11 UTC 2012,,,,,,,,,,,"0|i024tj:",10382,,,,,,,,,,,,,,,,,,,,"08/Mar/12 16:49;nikosd23;Attaching the maven project that contains the camel route, the custom activemq commands and the itest subproject;;;","08/Mar/12 17:14;nikosd23;You can reproduce the problem by uncommenting the weightedRoundRobin line in the custom-loadbalancer-route subproject (and commenting of course the custom). The custom karaf command that was implemented (queue:broker-info) provides the following information QName|QConsumerCount|QSize|QEnqueueCount|QDequeueCount.;;;","09/Mar/12 14:21;davsclaus;Which jms consumer is blocked?
And what is your problem exactly?

Can you post some more details. ;;;","09/Mar/12 14:44;nikosd23;Weighted Round Robin Loadbalancer should be synchronized. The custom loadbalancer provided in the integration test does exactly this. It solves the problem of the index out of bound exception:

Caused by: java.lang.ArrayIndexOutOfBoundsException: 3
        at java.util.concurrent.CopyOnWriteArrayList.get(CopyOnWriteArrayList.java:343)[:1.6.0_20]
        at org.apache.camel.processor.loadbalancer.WeightedRoundRobinLoadBalancer.chooseProcessor(WeightedRoundRobinLoadBalancer.java:52)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:39)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[71:org.apache.camel.camel-core:2.9.0]

Nevertheless, if you follow this approach jms consumers of queue1, queue2 and queue3 block. If you try to loadbalance a large amount of messages from the first queue to the other 3, using the synchronized weighted round robin loadbalancer, then you will see that the queues (queue1,2 and 3) are growing without obvious to me reason. The second route is only from jms to log.;;;","09/Mar/12 15:40;akarpe;Hi Nikos,

I can see the scenario you are mentioning happening under load where the counter and/or runtimeWeight may get out of synch under load...

I am however unclear on the queues growing without reason issue. Do you mean there are additional messages being created and dispatched to the queues.

Can you remove the synchronized on the chooseProcessor() method and synchronize just the counter and runtimeWeight and see if there is a change in behavior. 

Cheers,

Ashwin...;;;","09/Mar/12 18:27;nikosd23;Hi Ashwin,

The provided sync load balancer solves the issue of lost messages. If you check the itest subproject you will see that the number of messages enqueued to initial route is the same as the sum of the messages dequeued from the three queues. I am not implying that additional messages are being created and dispatched to queues.

I believe that the whole process of chooseprocessor should be atomic not just the access to counter shared resource or weights, that is why I synched the whole method.

I have profiled the plain weighted round robin loadbalancer and experienced the same behaviour in terms of blocking jmsconsumer threads of all queues, so maybe this is the normal behavior. Sorry for not having done this before.

Thanks,
Nikos;;;","09/Mar/12 18:41;akarpe;Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...;;;","09/Mar/12 18:41;akarpe;Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...;;;","09/Mar/12 19:24;akarpe;Hi Nikos,

I have applied the fix to the trunk... 

https://svn.apache.org/viewvc?view=revision&revision=1298993

Thanks for identifying the issue and offering a patch for it.

Cheers,

Ashwin...;;;","09/Mar/12 19:25;akarpe;Applied fix to trunk as revision r1298993.

Thanks to Nikolaos Dimos for providing the patch.

- Ashwin...;;;","10/Mar/12 08:57;davsclaus;See the asyncConsumer option on the JMS component
http://camel.apache.org/jms;;;","10/Mar/12 09:25;nikosd23;Thanks Ashwin and Claus.;;;",,,,,,,,,,,,,,,,,,
JMX statistics problem with intercept(),CAMEL-5066,12545618,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salever,salever,08/Mar/12 06:35,09/Nov/12 08:59,14/Jul/23 05:45,09/Mar/12 11:56,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,jmx,,,0,,,,,,,,,"Here is the test class:

{noformat}
public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              	intercept().to(""log:intercept"");
		from(""timer://myTimer?period=2000"").setBody()
				.simple(""Current time is ${header.firedTime}"").to(""log:out"");
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
}

{noformat}
The MBean [org.apache.camel/processors/XXX/to2/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed.

I used 2.9.2-SNAPSHOT.",,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5780,,,,,,,,,,"08/Mar/12 06:36;salever;ASF.LICENSE.NOT.GRANTED--intercept-statistics-bug.jpg;https://issues.apache.org/jira/secure/attachment/12517531/ASF.LICENSE.NOT.GRANTED--intercept-statistics-bug.jpg",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,230801,,,Thu Mar 08 06:42:32 UTC 2012,,,,,,,,,,,"0|i024sn:",10378,,,,,,,,,,,,,,,,,,,,"08/Mar/12 06:42;salever;Related talend JIRA issue: http://jira.talendforge.org/browse/TESB-5142;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
npe in camel 2.9.1 validator,CAMEL-5063,12545354,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,preben,preben,06/Mar/12 15:27,19/Mar/12 19:04,14/Jul/23 05:45,18/Mar/12 11:27,2.9.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,1,,,,,,,,,"validator component seems broken in 2.9.1. Gives you a npe when loading xsd from classpath during unittesting.
See http://camel.465427.n5.nabble.com/npe-in-camel-2-9-1-validator-tc5540894.html
prefixing with classpath eg. <to uri=""validator:classpath:BroadcastMonitor.xsd""  /> doesn't help.","windows xp, jdk 6",davidkarlsen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Mar/12 07:33;preben;validatortest.zip;https://issues.apache.org/jira/secure/attachment/12517536/validatortest.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,230540,,,Mon Mar 19 19:04:30 UTC 2012,,,,,,,,,,,"0|i024rz:",10375,,,,,,,,,,,,,,,,,,,,"08/Mar/12 07:32;preben;Did some investigation and found the course of the npe. The XSD used for validation is an old legacy xsd that imported a namespace without any ref. to a xsd. I have attached a testcase that shows the problem.
The validator component should handle this without throwing a npe, and warn about the inconsistency.;;;","08/Mar/12 07:33;preben;validator testcase;;;","19/Mar/12 13:09;bvahdat;@Claus

There was a tiny typo by the XSD being referenced inside ValidatorIllegalImportTest: BroadCastMonitor.xsd instead of BroadcastMonitor.xsd making tests pass on Windows (case-insensitive) but not on CI-Server (Ubuntu), which is now fixed:

http://svn.apache.org/viewvc?view=revision&revision=1302393
http://svn.apache.org/viewvc?view=revision&revision=1302405

I should confess I was really surprised to see you using Windows!!!
;;;","19/Mar/12 13:14;davsclaus;Yeah I am using Windows Vista, with a OS-X look and feel.;;;","19/Mar/12 19:04;preben;doh - my bad.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-bam is not thread safe and throws ConcurrentModificationException,CAMEL-5060,12545093,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,04/Mar/12 14:15,02/Jun/12 21:00,14/Jul/23 05:45,02/Jun/12 21:00,2.9.0,,,,,,,,,,,,2.10.0,2.9.3,,,camel-bam,,,,0,,,,,,,,,"camel-bam is not thread safe and throws ConcurrentModificationException:

{noformat}
2012-03-04 14:36:39,528 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:261)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:173)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:132)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{noformat}",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,230279,,,Sat Jun 02 20:59:47 UTC 2012,,,,,,,,,,,"0|i024rb:",10372,,,,,,,,,,,,,,,,,,,,"11/Apr/12 07:22;davsclaus;Christian do you have a test to reproduce the issue?
I ran camel-bam test and looked in the logs and no exception was thrown.
The fix could just be to use a ConcurrentMap, but would like a test to verify as well.;;;","11/Apr/12 11:06;muellerc;I hit this issue, by switching to derby and/or updating the maven profiles which use a different JPA provider.
I will provide a patch whith which you can reproduce this exception later today.;;;","27/Apr/12 22:18;muellerc;Sorry for my delayed response Claus. When you build the camel-bam component with the Eclipselink profile, you will get the exception:

{code}
$ cd components/camel-bam
$ mvn clean install -Peclipselink
{code}

you will get
{code}
2012-04-27 23:44:57,280 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:266)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:178)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{code};;;","29/May/12 19:53;muellerc;I still get this exception, if I use the eclipselink profile:
{code}
2012-05-29 21:45:51,084 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
2012-05-29 21:45:51,086 [d #0 - seda://a] DEBUG TransactionTemplate            - Initiating transaction rollback on application exception
org.apache.camel.RuntimeCamelException: java.util.ConcurrentModificationException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1256)
	at org.apache.camel.bam.processor.BamProcessorSupport.onError(BamProcessorSupport.java:151)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:101)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:123)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	... 33 more
{code};;;","02/Jun/12 12:14;davsclaus;Can you try again?;;;","02/Jun/12 20:57;muellerc;This issue is solved. I will close this issue.

Now I get another exception (which I will track with another issue, if I cannot resolve it by myself in the next days):
{code}
2012-06-02 22:49:15,385 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null]); nested exception is javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
org.springframework.orm.jpa.JpaSystemException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null]); nested exception is javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)
	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)
	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)
	at org.apache.camel.bam.model.ActivityState.isActivity(ActivityState.java:82)
	at org.apache.camel.bam.model.ProcessInstance.getActivityState(ProcessInstance.java:124)
	at org.apache.camel.bam.TimeExpression.evaluate(TimeExpression.java:55)
	at org.apache.camel.bam.rules.TemporalRule.processExchange(TemporalRule.java:100)
	at org.apache.camel.bam.rules.ActivityRules.processExchange(ActivityRules.java:63)
	at org.apache.camel.bam.rules.ProcessRules.processExchange(ProcessRules.java:44)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:58)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
Query: InsertObjectQuery(ActivityState[2 on ProcessInstance[123] null])
	at org.eclipse.persistence.internal.jpa.EntityManagerImpl.flush(EntityManagerImpl.java:786)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.performPreQueryFlush(EJBQueryImpl.java:1298)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.executeReadQuery(EJBQueryImpl.java:434)
	at org.eclipse.persistence.internal.jpa.EJBQueryImpl.getResultList(EJBQueryImpl.java:742)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	... 46 more
Caused by: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.3.2.v20111125-r10461): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL120602224913110' defined on 'CAMEL_ACTIVITYSTATE'.
Error Code: 20000
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, ESCALATIONLEVEL, RECEIVEDMESSAGECOUNT, TIMEEXPECTED, TIMEOVERDUE, ACTIVITYDEFINITION_ID, PROCESSINSTANCE_CORRELATIONKEY) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [2, 0, 0, null, null, null, 123]
{code};;;","02/Jun/12 20:59;muellerc;And with the openjpa profile, I got some other exceptions:
{code}
2012-06-02 22:55:55,532 [main           ] DEBUG JpaTransactionManager          - Initiating transaction rollback after commit exception
org.springframework.orm.jpa.JpaSystemException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.; nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:471)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:147)
	at org.apache.camel.bam.ProcessBuilder.createActivityProcessor(ProcessBuilder.java:96)
	at org.apache.camel.bam.ActivityBuilder.createProcessor(ActivityBuilder.java:50)
	at org.apache.camel.bam.ActivityBuilder.getProcessor(ActivityBuilder.java:58)
	at org.apache.camel.bam.ProcessBuilder.populateRoutes(ProcessBuilder.java:170)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:616)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:285)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:216)
	at org.apache.camel.bam.BamRouteTest.setUp(BamRouteTest.java:62)
	at org.apache.camel.bam.MultipleActivitiesConcurrentlyTest.setUp(MultipleActivitiesConcurrentlyTest.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:74)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2337)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2174)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1990)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1514)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:933)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:570)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:467)
	... 46 more
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: Column 'NAME'  cannot accept a NULL value. {prepstmnt 1033140423 INSERT INTO CAMEL_PROCESSDEFINITION (id, name) VALUES (?, ?) [params=?, ?]} [code=20000, state=23502]
FailedObject: org.apache.camel.bam.model.ProcessDefinition@5106def2
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4912)
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4878)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:136)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:78)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:143)
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:79)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:99)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:87)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:713)
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:131)
	... 54 more
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: Column 'NAME'  cannot accept a NULL value. {prepstmnt 1033140423 INSERT INTO CAMEL_PROCESSDEFINITION (id, name) VALUES (?, ?) [params=?, ?]} [code=20000, state=23502]
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:247)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:223)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$1000(LoggingConnectionDecorator.java:72)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:1162)
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:272)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1741)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:267)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:118)
	... 64 more
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
Bug: Unique Endpoints Leaking in DefaultInflightRepository,CAMEL-5058,12544960,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zilatica,zilatica,02/Mar/12 16:35,08/Mar/12 16:08,14/Jul/23 05:45,07/Mar/12 22:19,2.9.0,,,,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,0,,,,,,,,,"If you have an endpoint protocol which uses unique URIs you will leak Strings in the HashMap stored in the DefaultInflightRepository (org.apache.camel.impl.DefaultInflightRepository)

It seems there is a reference counting scheme in place, but it doesn't do a remove until the ""stop"" method is called to shut the system down.  We are running XMPP endpoints, which use a protocol like xmpp://someaccount@domain/password?to=someOtherAccount
When there are 10 million accounts, not all of which are active, but all of which may message at some time or another, no references are removed to the endpointCount.

When the count becomes 0, the reference should be removed and the size method will still return the appropriate result.

Please be careful in the implementation to synchronize on some object (perhaps the AtomicInteger) reflecting a read/write lock on the endpoint count modification.",,zilatica,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,"07/Mar/12 14:39;zilatica;fixLeak.diff;https://issues.apache.org/jira/secure/attachment/12517403/fixLeak.diff","06/Mar/12 22:25;zilatica;fixLeak.diff;https://issues.apache.org/jira/secure/attachment/12517321/fixLeak.diff",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,230146,,,Thu Mar 08 16:08:59 UTC 2012,,,,,,,,,,,"0|i024qv:",10370,,,,,,,,,,,,,,,,,,,,"03/Mar/12 11:22;davsclaus;The inflight registry should be route based instead of endpoint, as that is what the graceful shutdown really needs. 
So instead of being endpoint based, we can switch to be route id, based instead.

Can you post some more details about your use-case, I wonder why you get so many unique endpoints in the registry, as its consumer based. Are you adding a lot of new routes or the likes?;;;","03/Mar/12 16:10;davsclaus;I have committed a fix that removes entries from the registry when removing a route.

We need to keep it endpoint key based due producer template setup a UoW which essentially is a exchange created outside a route, and therefore we do not have a routeId at this given moment.;;;","03/Mar/12 17:04;bvahdat;Just for the sake of not losing the revision history:

trunk: http://svn.apache.org/viewvc?view=revision&revision=1296653
2.9.x: http://svn.apache.org/viewvc?view=revision&revision=1296655 ;;;","04/Mar/12 07:12;davsclaus;Ah I was 1000 numbers behind in the commit message :);;;","05/Mar/12 14:04;zilatica;We construct endpoints at runtime to send a message to the XMPP subsystem.  It isn't ideal, but it works for us.  With the memory leak, however, it has to be restarted once a week or so.

Thanks for the fast fix!;;;","05/Mar/12 20:00;zilatica;I'm not quite sure this fixes our problem.  We aren't creating a true route.  We are using a ProducerTemplate to send a Message to an Endpoint, and the Endpoint is unique, created at runtime, and would essentially create a new entry in the ConcurrentHashMap stored in the DefaultInflightRepository.

Ideally, when remove is called with an Exchange, if the reference count becomes 0, then the entry is removed from the Map.;;;","06/Mar/12 08:02;davsclaus;Zach,

Yes I suspected there was still a problem for you. But I didn't have a chance to ask how you send the messages. So just to be sure, you use a producer template to send to dynamic endpoint uris.
;;;","06/Mar/12 10:24;davsclaus;Notice ideally the inflight registry would just track for routes only. But the producer template uses an UoW as well for some reason we had to do a while ago. So it will also enlist itself in the inflight registry (well its in fact also an inflight message you may say).

So we can either ensure to remove from the inflight map if it become zero as you suggest. This may require a bit of locking, as you need to remove and compare.

Alternative, as the map, does not need to be removed in real time, we can have a background thread, doing the cleanup in a scheduled fashion.;;;","06/Mar/12 13:03;zilatica;Claus, that is correct that I'm using the producer template to send the messages.  I actually have a solution that I'm currently testing, but I've got to wait for our legal department to review the change to submit back to the community (we've got a big process I have to follow).

Hopefully I will be able to submit the patch, including a unit test, to validate the change.;;;","06/Mar/12 22:25;zilatica;The diff to fix the leak.  Note the unit test runs 2,000,000 operations to validate the fix.  It runs in 1 second on my computer, so the bottleneck due to the synchronized is limited.;;;","07/Mar/12 07:26;davsclaus;Zach thanks for the patch. Can you re-attach the patch and make sure the mark [x] in grant license to ASF in the file attachment wizard. We need this to be able to accept your patch.
;;;","07/Mar/12 14:39;zilatica;Re-attaching code with agreement to allow the Apache License;;;","07/Mar/12 14:39;zilatica;Done;;;","07/Mar/12 22:19;davsclaus;Thanks for the patch.;;;","08/Mar/12 10:14;bvahdat;I did polish the provided unit-test a bit mostly because of the required visibility of the failed flag (volatile keyword).
Especially required while running tests on the multi-core boxes.;;;","08/Mar/12 13:39;zilatica;Yea, my bad.  I remembered I had some cleanup to do on that hack-n-slash unit test last night.  Ugly, ugly unit test...


Thanks for the cleanup Babak!;;;","08/Mar/12 16:08;davsclaus;I improved this to avoid the synchronization in CAMEL-5057. As well only to track in flight per routes, as per endpoint is not needed.;;;",,,,,,,,,,,,,
Using a custom thread pool profile does not work with EIP,CAMEL-5053,12544578,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Feb/12 08:54,29/Feb/12 12:26,14/Jul/23 05:45,29/Feb/12 12:26,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ThreadPoolProfile-and-multicast-tp5524245p5524245.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229764,,,Wed Feb 29 10:40:31 UTC 2012,,,,,,,,,,,"0|i024pr:",10365,,,,,,,,,,,,,,,,,,,,"29/Feb/12 09:05;davsclaus;The problem is CAMEL-4244 which broke this;;;","29/Feb/12 10:40;davsclaus;Some of the EIPs works. 

However the code wasn't consistent, as all EIPs that support thread pools should use ProcessorDefinitionHelper which have helper methods to configure the thread pool accordingly, which not all was doing after the refactoring in 2.9.0.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when assigning a simple Object as final bean,CAMEL-5051,12544453,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,bvahdat,fabdouglas,fabdouglas,28/Feb/12 17:51,29/Feb/12 00:29,14/Jul/23 05:45,29/Feb/12 00:28,2.9.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"Considering this route :

from(""direct://myendpoint"").routeId(""myendpoint.route"").bean(new Object());

I get a NPE. I know, this is a very rare case that noone will reach again...
Anyway the fix is very simple, and is attached with it's test case.
","JSE6, Windows7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Feb/12 18:00;fabdouglas;CAMEL-5051.patch;https://issues.apache.org/jira/secure/attachment/12516364/CAMEL-5051.patch","28/Feb/12 17:55;fabdouglas;MyRouteBuilder.java;https://issues.apache.org/jira/secure/attachment/12516363/MyRouteBuilder.java","28/Feb/12 17:53;fabdouglas;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12516361/stacktrace.txt",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,229690,,,Wed Feb 29 00:27:38 UTC 2012,,,,,,,,,,,"0|i024pb:",10363,,,,,,,,,,,,,,,,,,,,"28/Feb/12 17:53;fabdouglas;Relevant trace : 
{noformat} 
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:386)
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:397)
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:380)
	at org.apache.camel.component.bean.BeanInfo.createMethodInfo(BeanInfo.java:323)
{noformat} ;;;","29/Feb/12 00:27;bvahdat;Thanks for reporting, I did however change the patch your provided a bit as the intention is *not* to skip the java.lang.Object.toString() method. See the static block initializing the EXCLUDED_METHODS field.

Also added a tiny unit-test to verify the behaviour. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in TimerListener if JMX enabled,CAMEL-5049,12544421,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/12 13:29,28/Feb/12 13:34,14/Jul/23 05:45,28/Feb/12 13:34,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"If adding and removing a lot of routes, and you have JMX enabled with load statistics, then it may leak memory, as the route listener is not properly removed when the route is removed, due invalid equals/hashCode.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229658,,,2012-02-28 13:29:24.0,,,,,,,,,,,"0|i024ov:",10361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in SedaComponent if adding and removing a lot of seda endpoints with different queue names,CAMEL-5048,12544376,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/12 05:40,28/Feb/12 09:20,14/Jul/23 05:45,28/Feb/12 09:20,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"If you add and remove a lot of seda endpoints with different queue names, then the seda component may keep references to non used queues.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229613,,,2012-02-28 05:40:43.0,,,,,,,,,,,"0|i024on:",10360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when adding/removing a lot of routes with JMX enabled related to Tracer,CAMEL-5046,12544226,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Feb/12 07:11,27/Feb/12 12:33,14/Jul/23 05:45,27/Feb/12 12:33,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,jmx,,,0,,,,,,,,,"Related to CAMEL-5045 but this ticket is about CAMEL-4500 which introduced a leak on the 2.9 branch on, in relation to tracer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229463,,,Mon Feb 27 12:33:37 UTC 2012,,,,,,,,,,,"0|i024o7:",10358,,,,,,,,,,,,,,,,,,,,"27/Feb/12 12:33;davsclaus;There was only a very minor leak.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when adding/removing a lot of routes with JMX enabled,CAMEL-5045,12544171,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Feb/12 14:42,27/Feb/12 07:12,14/Jul/23 05:45,27/Feb/12 07:10,2.8.4,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,jmx,,,0,,,,,,,,,"If you add and remove a lot of routes to CamelContext and have JMX enabled, then the DefaultManagementLifecycleStrategy will accumulate a map of provisional JMX performance counters for the route mbeans. The map should be cleared after usage, as the map is no longer needed.

Memory will accumulate as the map has reference to old objects which cannot be GC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229408,,,Mon Feb 27 07:12:49 UTC 2012,,,,,,,,,,,"0|i024nz:",10357,,,,,,,,,,,,,,,,,,,,"26/Feb/12 15:33;davsclaus;Also CAMEL-4500 introduced a leak as well, in terms of ManagedTracer being kept around in a separate Map. We need to remove not needed tracer from that map as well.;;;","27/Feb/12 07:12;davsclaus;I created CAMEL-5046 to track the leak from CAMEL-4500 with ManagedTracer as it only affects 2.9 onwards.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Removing a route with route scoped error handler, should remove the error handler from JMX",CAMEL-5041,12544161,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Feb/12 09:03,02/Mar/12 13:26,14/Jul/23 05:45,02/Mar/12 13:26,,,,,,,,,,,,,2.10.0,,,,camel-core,jmx,,,0,,,,,,,,,"A route scoped error handler should be removed if the route is removed from JMX.
Context scoped error handlers, should be kept.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229398,,,Fri Mar 02 13:26:23 UTC 2012,,,,,,,,,,,"0|i024n3:",10353,,,,,,,,,,,,,,,,,,,,"28/Feb/12 12:59;davsclaus;I post on @dev about removing the error handler mbeans from JMX as it would be easier than trying to keep properly track of which error handler is context vs route scoped. And which may be used by other routes, and whatnot. 

And all together the error handler mbeans does not bring much value, and people have not talked about them on the @user. So they are most likely not in use as much.;;;","28/Feb/12 13:00;davsclaus;http://camel.465427.n5.nabble.com/DISCSS-Remove-error-handler-mbeans-from-JMX-tp5521743p5521743.html;;;","02/Mar/12 13:26;davsclaus;The route scoped error handlers is now removed from JMX when removing a route.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Thread pools should not be enlisted in JMX if part of adding a new route, and JMX is disabled for new routes",CAMEL-5040,12544116,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Feb/12 12:27,25/Feb/12 12:37,14/Jul/23 05:45,25/Feb/12 12:37,,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"If you have configured registerNewRoutes=false for jmxAgent, then thread pools created during a route, such as a seda consumer, should not be enlisted in JMX.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229354,,,2012-02-25 12:27:33.0,,,,,,,,,,,"0|i024mv:",10352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer endpoint should support multiple consumers ,CAMEL-5038,12543990,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Feb/12 14:03,24/Feb/12 14:37,14/Jul/23 05:45,24/Feb/12 14:37,,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multiple-timers-with-same-name-in-same-context-td5505128.html

Basically you may have 2+ routes with the same timer endpoint, as you want to kick-off 2+ tasks at about the same time. The endpoint should just support multiple consumers by default, to let this happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229228,,,2012-02-24 14:03:56.0,,,,,,,,,,,"0|i024mf:",10350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel route with bean element sends on startup invalid message to target route that is represented by a proxy who exposes route,CAMEL-5036,12543970,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sburkard,sburkard,24/Feb/12 09:44,24/Feb/12 15:43,14/Jul/23 05:45,24/Feb/12 15:43,2.2.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"I expose a Camel route with a direct endpoint defined in an OSGi bundle with the <camel:proxy> and <osgi:service> tags. The reason for this is to be able to call this direct-route in other routes (defined in other bundles) as a ""sub-route"" directly as bean [.bean(routeproxy, ""method"")]. This works as expected.

But on route startup the toString method is called on the route (for a description) which is propagated to the elements of the route. Therefore my bean-element (which is the direct-route-proxy) receives the toString call and the CamelInvocationHandler converts this toString call to a message and sends it to the direct-route. This more or less empty message is of course not valid for the target route and produces an error on bundle startup.  

Shouldn't the toString call be suppressed by the proxy, since toString is not part of the Interface the proxy represents? Or is my approach a not recommended or problematic approach?


Parts of stacktrace to show the way from route startup to the produced message

=> route receives ""empty"" message
[omitted]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65)
	at $Proxy568.toString(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor406.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
=> toString call is converted to message and sent to route

[omitted]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy583.toString(Unknown Source)
	at org.apache.camel.component.bean.ConstantBeanHolder.toString(ConstantBeanHolder.java:48)
=> toString called on bean-element in route (bean is a proxy for a route) 

[omitted]
	at java.lang.String.valueOf(String.java:2826)
	at java.lang.StringBuilder.append(StringBuilder.java:115)
	at org.apache.camel.impl.EventDrivenConsumerRoute.toString(EventDrivenConsumerRoute.java:46)
	at org.apache.camel.management.mbean.ManagedRoute.<init>(ManagedRoute.java:41)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onRoutesAdd(DefaultManagementLifecycleStrategy.java:368)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:109)
=> Route startup",,sburkard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229208,,,Fri Feb 24 15:43:58 UTC 2012,,,,,,,,,,,"0|i024lz:",10348,,,,,,,,,,,,,,,,,,,,"24/Feb/12 15:43;davsclaus;Changed the toString to avoid calling toString on the bean;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfProducer should release the CXF when the Producer is stopped.,CAMEL-5035,12543950,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Feb/12 04:30,24/Feb/12 06:18,14/Jul/23 05:45,24/Feb/12 06:18,2.6.0,2.7.5,2.8.4,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,0,,,,,,,,,"CXF ClientImpl has the requestContext need to be cleaned when the CxfProducer is stopped.
If we don't call the Client.destory() method, the requestContext will cause the memory leak.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229188,,,Fri Feb 24 06:18:09 UTC 2012,,,,,,,,,,,"0|i024lr:",10347,,,,,,,,,,,,,,,,,,,,"24/Feb/12 06:18;njiang;Committed the patch into trunk, camel2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Seda producer should not handover completions if waiting for task to complete,CAMEL-5033,12543820,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Feb/12 08:57,23/Feb/12 09:42,14/Jul/23 05:45,23/Feb/12 09:42,2.8.4,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"See CAMEL-5021 which causes the file consumer to rollback the file to early

So if you link the seda producer to be synchronous by using the wait for task to complete, then the task should not have on completions handed over, as we are waiting for that task to complete, and copy its result back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5021,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,229059,,,2012-02-23 08:57:05.0,,,,,,,,,,,"0|i024l3:",10344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX statistics problem with some components,CAMEL-5027,12543647,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salever,salever,22/Feb/12 09:17,22/Feb/12 16:49,14/Jul/23 05:45,22/Feb/12 16:49,2.8.4,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"Here is the test class:
{noformat}
public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              from(""timer:foo?period=5000"").routeId(""timer"").loadBalance()
                     .roundRobin().id(""load_balance_1"").to(""log:one"")
                     .id(""log_one"").to(""log:two"").id(""log_two"").end();
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
 
}
{noformat}

The MBean [org.apache.camel/processors/XXX/load_balancer_1/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed. The same problem exists in Intercept,Log.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Feb/12 09:29;salever;Camel-bug.jpg;https://issues.apache.org/jira/secure/attachment/12515566/Camel-bug.jpg",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,228886,,,Wed Feb 22 14:16:24 UTC 2012,,,,,,,,,,,"0|i024jr:",10338,,,,,,,,,,,,,,,,,,,,"22/Feb/12 09:29;salever;Details;;;","22/Feb/12 09:38;salever;For detail, refer to http://jira.talendforge.org/browse/TESB-3905;;;","22/Feb/12 14:16;davsclaus;Thanks for reporting and with screenshot.

I have reproduced the issue, the load balancer does not record any stats.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Streaming splitter ignores exception handling,CAMEL-5024,12543482,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rludvig,rludvig,21/Feb/12 13:22,23/Nov/12 13:59,14/Jul/23 05:45,22/Feb/12 03:39,2.8.3,2.8.4,2.9.0,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"If an exception occurs on the next() call of an Iterator in a streaming splitter, the exception is never propagated to the exception or the error handler. This will lead to improper route termination, and inifite rollback/retry cycles.

I attached the minimal test case demonstrating the issue.","Ubuntu Linux
Java version ""1.6.0_24""",,,,,,,,,,,,,,,,,,CAMEL-5025,,,CAMEL-5818,,,,,,CAMEL-5681,,,,,,"21/Feb/12 13:24;rludvig;SplitExceptionHandlingTest.java;https://issues.apache.org/jira/secure/attachment/12515355/SplitExceptionHandlingTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,228728,,,Wed Feb 22 03:39:05 UTC 2012,,,,,,,,,,,"0|i024j3:",10335,,,,,,,,,,,,,,,,,,,,"22/Feb/12 03:39;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Printer endpoint can only print a single job,CAMEL-5023,12543475,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattik,agattik,21/Feb/12 12:46,22/Feb/12 06:31,14/Jul/23 05:45,22/Feb/12 04:12,2.9.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-printer,,,,0,,,,,,,,,"The JavaDoc for javax.print.DocPrintJob.print(Doc, PrintRequestAttributeSet) reads:

""This method should only be called once for a given print job.""

However org.apache.camel.component.printer.PrinterOperations reuses the same DocPrintJob to print over and over again. This results in:

javax.print.PrintException: already printing
	at sun.print.UnixPrintJob.print(UnixPrintJob.java:286) ~[na:1.6.0_29]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:107) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:101) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.print(PrinterProducer.java:55) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.process(PrinterProducer.java:49) ~[camel-printer-2.9.0.jar:2.9.0]
","MacOSX, RAW printer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,228721,,,Wed Feb 22 04:12:53 UTC 2012,,,,,,,,,,,"0|i024iv:",10334,,,,,,,,,,,,,,,,,,,,"22/Feb/12 04:12;njiang;Applied patch into trunk, camel-2.8.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-twitter feature is invalid,CAMEL-5022,12543410,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,20/Feb/12 22:18,21/Feb/12 17:43,14/Jul/23 05:45,21/Feb/12 17:43,2.10.0,,,,,,,,,,,,2.10.0,,,,camel-twitter,,,,0,,,,,,,,,"{noformat}
christian-muellers-macbook-pro:camel cmueller$ cd platforms/karaf/
christian-muellers-macbook-pro:karaf cmueller$ mvn clean install -Pvalidate
...
[WARNING] Failed to validate feature camel-twitter
[WARNING] No export found to match com.google.appengine.api.urlfetch (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)
[WARNING] No export found to match twitter4j.internal.http.alternative (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,228656,,,Tue Feb 21 17:42:52 UTC 2012,,,,,,,,,,,"0|i024in:",10333,,,,,,,,,,,,,,,,,,,,"21/Feb/12 17:42;muellerc;fixed by Willem with r1291623;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-file: file is renamed but error handling continues.,CAMEL-5021,12543404,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,20/Feb/12 21:28,24/Feb/12 06:56,14/Jul/23 05:45,23/Feb/12 08:57,2.8.1,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,camel-file,,,,,,,,"Symptoms: 
# Exception is thrown from the child route with NoErrorHandler configured.
# Parent and child routes are linked with async. endpoints (seda, vm, nmr, etc.), which are configured to behave *synchronously* (attribute *waitForTaskToComplete=Always* in seda, vm-endpoints and attribute *synchronous=true* in nmr-endpoint).

The behavior with nmr endpoint is almost the same except for the next file is picked up before the lock on the previous one is released.

Here is a unit test to reproduce the issue:

{code:java|title=org.foo.bar.FileRedeliveryWithoutErrorHandlerTest.java}
package org.foo.bar;

import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.processor.RedeliveryPolicy;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.hamcrest.CoreMatchers.equalTo;

public class FileRedeliveryWithoutErrorHandlerTest extends CamelTestSupport {

    private File newFile;
    private File errorFile;
    
    @Before
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void createFile() throws Exception {
        newFile = new File(""target/files/in/newFile.txt"");
        newFile.createNewFile();
        errorFile = new File(""target/files/in/.error/newFile.txt"");
    }
    
    @After
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void deleteFile() throws Exception {
        newFile.delete();
        errorFile.delete();
    }
    
    @Test
    public void testFileRedeliveryWithoutErrorHandler() throws Exception {
        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.setExpectedMessageCount(1);

        result.assertIsNotSatisfied();
        
        // created file have to exist because redelivery attempts are not completed
        assertThat(newFile.exists(), equalTo(true));
        assertThat(errorFile.exists(), equalTo(false));
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();

        RedeliveryPolicy policy = new RedeliveryPolicy();
        policy.setAsyncDelayedRedelivery(false);
        policy.setLogRetryStackTrace(true);
        policy.setMaximumRedeliveries(100);
        policy.setMaximumRedeliveryDelay(30000);
        policy.setRedeliveryDelay(1000);
        policy.setUseExponentialBackOff(false);
        policy.setRetryAttemptedLogLevel(LoggingLevel.WARN);
        registry.bind(""redeliveryPolicy"", policy);

        return registry;
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                errorHandler(defaultErrorHandler())
                    .onException(Exception.class)
                    .redeliveryPolicyRef(""redeliveryPolicy"")
                    .log(LoggingLevel.ERROR, ""Error"");

                from(""file:target/files/in?initialDelay=100&delay=100&move=.backup&moveFailed=.error"")
                    .to(""seda:async?waitForTaskToComplete=Always&size=1"")
                    .to(""mock:result"");
                from(""seda:async"")
                    .errorHandler(noErrorHandler())
                    .delay(1000)
                    .throwException(new RuntimeException(""Hello World!""));
            }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5033,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,228650,,,Fri Feb 24 06:56:18 UTC 2012,,,,,,,,,,,"0|i024if:",10332,,,,,,,,,,,,,,,,,,,,"23/Feb/12 08:58;davsclaus;Will be fixed by CAMEL-5033;;;","24/Feb/12 06:56;szhemzhitsky;Hello Claus,

Thanks a lot.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't use the resourceClass Parameter of CXF-RS Component,CAMEL-5009,12542681,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fribeiro,fribeiro,15/Feb/12 13:54,16/Feb/12 16:43,14/Jul/23 05:45,16/Feb/12 12:12,2.8.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,0,,,,,,,,,"When I use the resourceClass parameter as described in the docs, I get an unexpected error:

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

@Path(""/sample/"")
public final class SampleResource {

  @Path(""/{param1}/{param2}"")
  public Object sampleOperation(@PathParam(""param1"") final String param1, @PathParam(""param2"") final String param2) {
    return null;
  }

}

import org.apache.camel.builder.RouteBuilder;

public final class SampleRouteBuilder extends RouteBuilder {

  @Override
  public void configure() {
    from(""cxfrs:http://0.0.0.0:8080?resourceClass=SampleResource"")...
  }

}

The workaround has been using the resourceClasses parameter instead.",All Camel environments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227967,,,Thu Feb 16 16:43:37 UTC 2012,,,,,,,,,,,"0|i024fr:",10320,,,,,,,,,,,,,,,,,,,,"16/Feb/12 12:12;njiang;Applied patch into trunk , camel-2.9.x, camel-2.8.x branches.;;;","16/Feb/12 16:43;fribeiro;Thanks, Willem, I will keep the wiki updated accordingly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms component,  request/reply results in NullPointer when JMSCorrelationID is set to empty string on inbound JMS message. ",CAMEL-5006,12542591,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,pgfox,pgfox,14/Feb/12 20:17,15/Feb/12 01:36,14/Jul/23 05:45,15/Feb/12 01:36,2.9.0,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-jms,,,,0,,,,,,,,,"A request/reply invocation results in the following exception when JMSCorrelationID is set to empty String ("""") on the inbound JMS message. 

{code}
[JmsConsumer[myqueue]] DefaultErrorHandler ERROR Failed delivery for exchangeId: ID-myexchange-id. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
java.lang.NullPointerException
at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:882)[:1.6.0_30]
at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.CorrelationMap.put(CorrelationMap.java:68)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.registerReply(TemporaryQueueReplyManager.java:42)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer$1.createMessage(JmsProducer.java:157)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:199)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:142)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:156)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:153)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:343)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:163)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:98)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_30]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_30]
at java.lang.Thread.run(Thread.java:662)[:1.6.0_30]

{code}

I have also tested this against Trunk version 1239497 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Feb/12 21:38;pgfox;JmsProducer.java.patch;https://issues.apache.org/jira/secure/attachment/12514552/JmsProducer.java.patch","14/Feb/12 21:38;pgfox;JmsRequestReplyCorrelationTest.java;https://issues.apache.org/jira/secure/attachment/12514553/JmsRequestReplyCorrelationTest.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227877,,,Wed Feb 15 01:36:57 UTC 2012,,,,,,,,,,,"0|i024f3:",10317,,,,,,,,,,,,,,,,,,,,"14/Feb/12 20:24;pgfox;Added another test method to JmsRequestReplyCorrelationTest.java to show the issue. 

Where JMSCorrelationID is set to empty String I would expect the same behavior as if it set to Null. ;;;","14/Feb/12 20:46;pgfox;I have made a simple change in JmsProducer.java.patch which appears to resolve the junit test. Perhaps someone more familiar with the JMSCorrelationID logic could see a better approach?
 ;;;","14/Feb/12 21:28;hadrian;Pat, we cannot include patches if you do not explicitly grant us the license to do so. There is a checkbox for that you need to check when you upload (if you are ok with us including your work). If that was your intention could you please remove the attachments and reattach with the grant option? Thanks.;;;","14/Feb/12 21:38;pgfox;Thanks Hadrain, I have reattached and granted license.;;;","14/Feb/12 21:44;hadrian;Thanks, looks good, testing now.;;;","15/Feb/12 01:36;hadrian;Nice spot, good patch. Thanks Pat for the contribution.;;;",,,,,,,,,,,,,,,,,,,,,,,,
simple without embedded text results in an NPE,CAMEL-5005,12542549,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,14/Feb/12 15:08,15/Feb/12 15:00,14/Jul/23 05:45,15/Feb/12 15:00,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"After switching to 2.9 

the following results in a NPE

{code}
<camel:setBody>
	<camel:simple></camel:simple>
</camel:setBody>
{code}

I'm not sure if it is now required to have something in the content of the simple element. 
I used it for setting the body element to an empty string before (worked with 2.8.1)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227835,,,Wed Feb 15 14:01:12 UTC 2012,,,,,,,,,,,"0|i024ev:",10316,,,,,,,,,,,,,,,,,,,,"15/Feb/12 14:01;davsclaus;Using <camel:constant/> ought to set an empty string as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel simple language wrong working with real number,CAMEL-5004,12542537,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,akudinov,akudinov,14/Feb/12 14:35,16/Feb/12 07:03,14/Jul/23 05:45,16/Feb/12 07:03,2.6.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"I compute real number in route:
   <setBody>0.02</setBody>
After that I want to filter:
   <filter><simple>${body} > 0 </simple> ... </filter>
This expression return false for value in body = 0.02","linux, servicemix-4.3.1",szhemzhitsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227823,,,Thu Feb 16 07:03:54 UTC 2012,,,,,,,,,,,"0|i024en:",10315,,,,,,,,,,,,,,,,,,,,"16/Feb/12 07:03;davsclaus;I have improved the simple language to work better with floating point numbers.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error handler not called when recipient list has non existing endpoint,CAMEL-5000,12542227,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Feb/12 12:16,11/Feb/12 13:19,14/Jul/23 05:45,11/Feb/12 13:19,2.8.4,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"Given this route
{code}

                onException(Exception.class)
                        .handled(true)
                        .to(""mock:dead"");

                from(""direct:start"")
                    .recipientList(constant(""fail:endpoint""))
                    .to(""mock:result"");
{code}

You would assume the on exception will handle the exception from the recipient list with the non existing endpoint.
This is not the case. We should let recipient list detect and let the error handler handle it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5001,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227514,,,2012-02-11 12:16:11.0,,,,,,,,,,,"0|i024dr:",10311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade from 2.8.3 to 2.9.0 breaks the schema validation capability in the Camel Validation component ,CAMEL-4999,12542145,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,akarpe,akarpe,10/Feb/12 15:51,11/Feb/12 13:38,14/Jul/23 05:45,11/Feb/12 13:38,2.9.0,,,,,,,,,,,,2.9.1,,,,camel-core,,,,0,,,,,,,,,"A Camel user reported the following in the Camel User Forum issue
http://camel.465427.n5.nabble.com/Validation-error-after-upgrade-from-Camel-2-8-3-to-2-9-0-td5472816.html

Details 
--------
I have a route that use 
http://camel.apache.org/validation.html


after upgrade Camel from 2.8.3 to 2.9.0 during validation I receive 
the following error 
by: org.xml.sax.SAXParseException: src-resolve: Cannot resolve the 
name 'ecc:PositionType' to a(n) 'type definition' component. 
        at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown 
Source)[:] 
        at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:] 
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.getGlobalDecl(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseLocal(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseLocalElements(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown 
Source)[:] 
        at javax.xml.validation.SchemaFactory.newSchema(SchemaFactory.java:524)[:] 
        at org.apache.camel.processor.validation.ValidatingProcessor.createSchema(ValidatingProcessor.java:231)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.processor.validation.ValidatingProcessor.loadSchema(ValidatingProcessor.java:105)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:55)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:432)[90:org.apache.camel.camel-core:2.9.0] 

",,fbalicchia,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,227432,,,Sat Feb 11 13:38:40 UTC 2012,,,,,,,,,,,"0|i024dj:",10310,,,,,,,,,,,,,,,,,,,,"11/Feb/12 08:46;fbalicchia;After some unit test i see that the problem is fixed in version 2.10-SNAPSHOT.
The jira issue that fix the problem is: 
CAMEL-4877: Validator component now supports xs:import again.

The version of camel that has this from are 2.9.0 and 2.9.0-RC1.

From my point of view this iusse can be closed 

Thanks from help




;;;","11/Feb/12 13:38;davsclaus;Already fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DigitalSignatureEndpoint not clearing headers after verify,CAMEL-4996,12541919,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,09/Feb/12 03:31,09/Feb/12 03:51,14/Jul/23 05:45,09/Feb/12 03:51,2.8.4,,,,,,,,,,,,2.10.0,,,, camel-crypto,,,,0,,,,,,,,,"The DigitalSignatureEndpoint has a clearHeaders option that is supposed to clear headers after a verify operation. However that is not working because the headers cleared are not the actual header values, but the name of the java String fields, which is irrelevant at runtime.

The default value of the clearHeaders should also be true, so that Camel does not leave debris in the Exchange after a verify operation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,227206,,,Thu Feb 09 03:51:23 UTC 2012,,,,,,,,,,,"0|i024cv:",10307,,,,,,,,,,,,,,,,,,,,"09/Feb/12 03:51;hadrian;Fixed. There is no workaround available.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BindyDataFormat should not use the default encoding,CAMEL-4989,12541633,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Feb/12 15:07,08/Feb/12 01:26,14/Jul/23 05:45,08/Feb/12 01:26,2.4.0,2.5.0,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,,2.10.0,2.8.5,2.9.1,,camel-bindy,,,,0,,,,,,,,,"Here is the mail thread[1] which discuss about it.
[1]http://camel.465427.n5.nabble.com/Bindy-CSV-parser-uses-default-encoding-tp5456136p5456136.html",,,,,,,,,,,,,,,,,,,,,,CAMEL-3483,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226920,,,Wed Feb 08 01:26:27 UTC 2012,,,,,,,,,,,"0|i024bb:",10300,,,,,,,,,,,,,,,,,,,,"08/Feb/12 01:26;njiang;Applied patch into trunk, camel 2.9.x and camel 2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problems with Simple language,CAMEL-4988,12541628,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcondevigo,dcondevigo,07/Feb/12 14:08,23/Feb/12 12:14,14/Jul/23 05:45,23/Feb/12 12:14,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"If you don't use a simple expresion that falls back to the SimpleBackwardsCompatibleParser, the simple language doesn't seem to work. If I override the start and end token with an explicit definition of the simplelanguage everything works well.

  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean> 

It seems that org.apache.camel.language.simple.SimpleExpressionParser.SimpleExpressionParser(String) fails to create an expression because startToken and endToken are ""automagically"" changed for strange Strings. It seems that when exchange.getContext().resolveLanguage(""simple"") tries to resolve the languaje it doesn't use the default construtor and injects a strange start and end token in the constructor SimpleLanguage(String functionStartToken, String functionEndToken).",Standalone application with Spring context and routes defined in XML.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226915,,,Thu Feb 23 11:37:21 UTC 2012,,,,,,,,,,,"0|i024b3:",10299,,,,,,,,,,,,,,,,,,,,"08/Feb/12 05:00;davsclaus;Can you provide more details what you problem is?;;;","08/Feb/12 07:45;dcondevigo;The problem is that I upgraded my application to Camel 2.9.0 from Camel 2.8.0 and all the routes with simple expressions started to fail. All the other routes seem to work as usual, Camel is an great framework!

I debugged the application and the source of the problem seems to be in the simple expressions. The parsers allways fails (sometimes silently) because the start and end tokens are strange strings (like ""97830e4816280eb7"") instead of the usual strings ""${"", ""}"".

Debugging the application with a breakpoint in the SimpleLanguage constructor ""public SimpleLanguage(String functionStartToken, String functionEndToken)"" I found that Camel automatically replaces the standard tokens with these strange strings (I copy the stacktrace at the end of the comment). It seems that in the SimpleLanguage initialization the SpringInjector chooses the wrong constructor instead of the default one.

If I declare a bean with de SimpleLanguage an set explicitly the tokens everything works fine.

Thread [DefaultQuartzScheduler-camel-7_Worker-1] (Suspended (breakpoint at line 110 in SimpleLanguage))	
	SimpleLanguage.<init>(String, String) line: 110	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	
	Constructor<T>.newInstance(Object...) line: 513	
	BeanUtils.instantiateClass(Constructor<T>, Object...) line: 126	
	CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Constructor<?>, Object[]) line: 108	
	ConstructorResolver.autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 280	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 1003	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 907	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 485	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(Class, int, boolean) line: 331	
	SpringInjector.newInstance(Class<T>) line: 39	
	DefaultLanguageResolver.resolveLanguage(String, CamelContext) line: 75	
	SpringCamelContext(DefaultCamelContext).resolveLanguage(String) line: 951	
	SimpleBuilder.createExpression(Exchange) line: 86	
	SimpleBuilder.evaluate(Exchange, Class<T>) line: 80	
	Splitter.createProcessorExchangePairs(Exchange) line: 102	
	Splitter(MulticastProcessor).process(Exchange, AsyncCallback) line: 208	
	Splitter.process(Exchange, AsyncCallback) line: 97	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	TraceInterceptor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	TraceInterceptor.process(Exchange, AsyncCallback) line: 91	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 322	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 213	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 303	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	Pipeline.process(Exchange, Exchange, AsyncCallback, Iterator<Processor>, AsyncProcessor) line: 117	
	Pipeline.process(Exchange, AsyncCallback) line: 80	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	UnitOfWorkProcessor.processAsync(Exchange, AsyncCallback, UnitOfWork) line: 150	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 117	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange, AsyncCallback) line: 44	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 99	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange) line: 71	
	QuartzEndpoint.onJobExecute(JobExecutionContext) line: 112	
	CamelJob.execute(JobExecutionContext) line: 54	
	JobRunShell.run() line: 216	
	SimpleThreadPool$WorkerThread.run() line: 549	
;;;","12/Feb/12 10:53;davsclaus;Can you paste your spring XML file so its easier for us to get started creating a test case that reproduces the issue you talk about.;;;","15/Feb/12 11:16;dcondevigo;It seems that if you have a bean of java.lang.String type, it uses it to autowire the start and end token of the SimpleLanguage. If you have a bean of this type you have to define a bean to configure SimpleLanguage to keep routes work as usual. For example this file works:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 
	  
  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean>	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>

But this one doesn't work (it prints ""[${body}]"" instead of ""[Text]"")

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>;;;","23/Feb/12 10:58;davsclaus;How often do you have a <bean> of type String? Whats the point? I have never seen the need for that.;;;","23/Feb/12 11:33;davsclaus;But yeah I think autowiring by type is bad practice. Lets see if we can change the SpringInjector to only auto wire by name instead.;;;","23/Feb/12 11:37;davsclaus;Related to CAMEL-1811;;;",,,,,,,,,,,,,,,,,,,,,,,
ManagedPerformanceCounterMBean should extend ManagedCounterMBean,CAMEL-4986,12541405,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,eamelink,eamelink,06/Feb/12 13:02,07/Feb/12 16:07,14/Jul/23 05:45,07/Feb/12 16:05,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-jmx,,,,0,,,,,,,,,"ManagedPerformanceCounterMBean does not extend ManagedCounterMBean, while ManagedPerformanceCounter does extend ManagedCounter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,226693,,,Tue Feb 07 16:05:02 UTC 2012,,,,,,,,,,,"0|i024an:",10297,,,,,,,,,,,,,,,,,,,,"07/Feb/12 08:46;davsclaus;Babak, you got time to fix this? Seems easy, although running the unit tests on camel-core would be good to ensure the JMX tests still work as expected.;;;","07/Feb/12 16:05;bvahdat;I verified the change by running all camel-core tests where they did all pass on trunk, however on the 2.9.x branch I got one failed test which has nothing to do with this change:

{code}
Failed tests:
  testShutdownGraceful(org.apache.camel.impl.PendingExchangesTwoRouteShutdownGracefulTest): mock://bar Received message count. Expected: <1> but was: <2>

Tests run: 4033, Failures: 1, Errors: 0, Skipped: 0
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring security example does not work,CAMEL-4985,12541390,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,06/Feb/12 10:36,10/Feb/12 05:25,14/Jul/23 05:45,06/Feb/12 10:39,2.8.4,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,examples,,,,0,,,,,,,,,"When you try to run the spring security example and access it from a browser you get 404. I debugged into it and the reason is that the camel context does not attach to the camel http servlet.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226678,,,2012-02-06 10:36:47.0,,,,,,,,,,,"0|i024af:",10296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http does not send header values that are empty strings,CAMEL-4984,12541384,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,falkmarcus,falkmarcus,06/Feb/12 09:32,27/Feb/12 09:00,14/Jul/23 05:45,24/Feb/12 17:11,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-http,,,,0,,,,,,,,,"HttpProducer does not send HTTP header if header value from camel was an empty string.

This is because ObjectHelper.createIterator(headerValue, null) will produce an empty iteration if headerValue is an empty string!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226672,,,Mon Feb 27 09:00:19 UTC 2012,,,,,,,,,,,"0|i024a7:",10295,,,,,,,,,,,,,,,,,,,,"06/Feb/12 10:11;falkmarcus;There is a workarround: you can pass a list with an empty string as header value and than camel-http will send this header;;;","24/Feb/12 16:18;davsclaus;I do not know when such a use-case is needed to send empty values as HTTP headers. When do you do that?;;;","27/Feb/12 08:48;falkmarcus;Actually, the backend service which we are calling via HTTP requires that all required headers are set, even if there are no value for it. 

Also to me such a policy seems to be awkward. 

;;;","27/Feb/12 09:00;davsclaus;Well I could possible see a use-case if you want to reset a cache http header or the likes. Anyway its fixed now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Problem Removing Endpoints ,CAMEL-4976,12541151,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,03/Feb/12 23:17,07/Feb/12 02:40,14/Jul/23 05:45,07/Feb/12 02:40,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,1,,,,,,,,,"(see context on the [users@|http://camel.465427.n5.nabble.com/Problem-Removing-Endpoints-td5455029.html] list)

When using removeEndpoints(String) with a pattern, some endpoints (like jms topics) are reported as removed but they are not.
",,mikek753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,226503,,,Tue Feb 07 02:40:24 UTC 2012,,,,,,,,,,,"0|i0248f:",10287,,,,,,,,,,,,,,,,,,,,"07/Feb/12 02:40;hadrian;Fixed on both trunk and camel-2.9.x. The problem was due to inconsistent way of computing endpoint keys for non singleton endpoints.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF Transport should update the content-type as other CXF transport does,CAMEL-4973,12541043,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Feb/12 08:08,03/Feb/12 14:46,14/Jul/23 05:45,03/Feb/12 14:46,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.5,2.8.4,2.9.0,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,0,,,,,,,,,"If you want to leverage the camel transport for CXF to route the message with sub camel context, you may face an issue that camel transport doesn't setup the content type with the encoding information like this ""text/xml; charset=UTF-8""
It just sets the Content-Type like this ""text/xml"" which fails WS-I validation. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226395,,,Fri Feb 03 14:46:27 UTC 2012,,,,,,,,,,,"0|i0247r:",10284,,,,,,,,,,,,,,,,,,,,"03/Feb/12 14:46;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use xquery predicate in filter after an xpath splitter.  ,CAMEL-4970,12540919,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ltsall,ltsall,02/Feb/12 13:18,06/Feb/12 15:12,14/Jul/23 05:45,06/Feb/12 15:12,2.8.0,2.8.1,2.8.2,2.8.3,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-saxon,,,,0,xpath,xquery,,,,,,,"After upgrading from 2.5.0 to 2.9.0 using xqury predicate after an xpath filter throws  java.lang.ClassCastException: net.sf.saxon.tinytree.TinyElementImpl cannot be cast to net.sf.saxon.om.DocumentInfo . Attached unit test doesn't fail in camel 2.5.0.

from(""direct:xpath"") 
.split(xpathsplitter) 
.filter().xquery(""//record[type=2]"") 
.to(""mock:result"");    	

See nabble discussion http://camel.465427.n5.nabble.com/Unit-test-fails-after-upgrading-to-2-7-1-Cannot-use-xquery-expression-after-xpath-td4422582.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Feb/12 13:18;ltsall;XqueryPredicateFilterTest.java;https://issues.apache.org/jira/secure/attachment/12512942/XqueryPredicateFilterTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,226272,,,Mon Feb 06 15:12:39 UTC 2012,,,,,,,,,,,"0|i02473:",10281,,,,,,,,,,,,,,,,,,,,"06/Feb/12 14:21;njiang;This issue is introduced by the enhancement of the XmlConverter to support the stax API better. When turning the Element to a DOMSource, we should create a Document first and then create a DomSource based on the Document.;;;","06/Feb/12 15:12;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyProducer with user defined client pipeline factory ,CAMEL-4960,12540519,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dmitrijz,dmitrijz,31/Jan/12 09:16,08/Apr/12 13:49,14/Jul/23 05:45,08/Apr/12 13:49,2.8.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-netty,,,,0,,,,,,,,,"If user defined client pipeline factory is configured, Netty Producer shares the same instance of ClientPipelineFactory for all created connections. See code below:
  configuration.getClientPipelineFactory().setProducer(this);
  configuration.getClientPipelineFactory().setExchange(exchange);
  configuration.getClientPipelineFactory().setCallback(callback);
  clientPipeline = configuration.getClientPipelineFactory().getPipeline();

Which can cause an issue in multithreaded environment. Maybe it is better to create user defined client pipeline factory for each connection as it is done with DefaultClientPipelineFactory?",Windows 7,dmitrijz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225932,,,Sun Apr 08 13:35:23 UTC 2012,,,,,,,,,,,"0|i0244v:",10271,,,,,,,,,,,,,,,,,,,,"08/Apr/12 13:02;davsclaus;This works as designed. When you use a custom factory then it's shared. Because a custom factory could be configured and whatnot. I will improved the docs a bit on this.;;;","08/Apr/12 13:35;davsclaus;I decided to make the factories stateless, then it works much better.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect caching type converter misses for NaN,CAMEL-4959,12540504,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ciand7,ciand7,31/Jan/12 07:06,28/Feb/12 11:43,14/Jul/23 05:45,23/Feb/12 12:47,2.8.3,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,0,,,,,,,,,"When converting Double or Float with value NaN, org.apache.camel.converter.ObjectConverter returns ""null"". But org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(Class, Exchange, Object) interpret this ""null"" as ""suitable conversion not found"" and cache misses. This lead to completely forgetting of conversion for given types.
For example, when conversing Double to Long, all works until Double is NaN. After that, conversion for ""Double-to-Long"" marked as misses. And  camel stop do any conversion for Double-to-Long until restart.

Possible solution is to modify ObjectConverter`s methods to return ""Void.TYPE"" instead of ""null"" for NaN.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,225917,,,Tue Feb 28 11:43:59 UTC 2012,,,,,,,,,,,"0|i0244n:",10270,,,,,,,,,,,,,,,,,,,,"31/Jan/12 08:23;davsclaus;That is correct. Andrey can you provide a patch with unit test that test this fix?;;;","31/Jan/12 09:43;ciand7;Hi, Claus. 
Yes, I can try to make patch with unit test for ObjectConverter.

But suggested solution - return Void.TYPE from toXXXX() methods of ObjectConverter - is not correct :) ObjectConverter is converter, so that methods must declare return type correctly - Short, Long, Integer. It is not possible to return Void from toXXXX()...

May be it is correct to return 0 for NaN? 
At least JDK do it:
==
Double d = Double.NaN;
Float f = Float.NaN;
System.out.println(d.longValue() + "", "" + f.shortValue());
==
will print 
""0, 0""

;;;","02/Feb/12 10:00;davsclaus;Yeah lets return 0 for the primitive types.

Patches is welcome, with unit tests.;;;","26/Feb/12 13:01;bvahdat;I did ""Refactor to Method"" for the case if the to be converted value is NaN:

http://svn.apache.org/viewvc?view=revision&revision=1293828;;;","27/Feb/12 20:31;bvahdat;IMHO the changes introduced by of this ticket causes regression failure. To avoid null values being misinterpreted as cache misses we do now convert e.g.

Float.NaN => (Byte) 0

which was not the case before.

Why not just simply *not* mark the conversion as miss *if* the conversion result is (Float.NaN / Double.NaN  ==> null). That's do *not* add any entry for such conversion results into the misses cache and revert back ObjectConverter to what it was before. Does this make sense to you?

And I simply don't get why the misses cache is a ConcurrentMap:

{code} 
protected final ConcurrentMap<TypeMapping, TypeMapping> misses = new ConcurrentHashMap<TypeMapping, TypeMapping>();
{code} 

To my understanding

{code} 
protected final List<TypeMapping> misses = new CopyOnWriteArrayList<TypeMapping>();
{code} 

would be just fine! Why do we need a Map to memorize the cache misses? Where we then do things like

{code} 
misses.put(key, key);
{code}

On it which is not really intuitive while reading the code, is this maybe because ideally we want to do lookup by the misses cache (misses.containsKey()) in O(1) instead of O(N)? 

See also:

http://camel.465427.n5.nabble.com/ObjectConverter-problem-td5517376.html;;;","28/Feb/12 11:36;davsclaus;Yeah I have corrected the coverters to deal with NaN.

And yes we need to lookup fast in type converter registry as its used a lot in Camel, and it should be as fast as possible, as it can become a bottleneck.;;;","28/Feb/12 11:43;bvahdat;Yeah dealing with NaN's directly in BaseTypeConverterRegistry itself was what I was looking for, Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel 2.9.0 incapable of working with % in endpoint URIs,CAMEL-4954,12540342,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,hadrian,sruehl,sruehl,30/Jan/12 10:26,18/Mar/13 18:15,14/Jul/23 05:45,03/Feb/12 22:16,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.
At first the java.net.Uri#getQuery will be called with according to the javadoc ""Returns the decoded query component of this URI"" returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc ""Returns the decoded scheme-specific part of this URI."" returns a decoded URI.
So to summarize we get in any case a decoded URI.
This URI will then be than in the method org.apache.camel.util.URISupport#parseQuery(String) again decoded with java.net.URLDecoder#decode(String,String).
This code leads to the following behaviour:
 If a % is properly encoded with %25test the %25test will be substituted by the first call to %test and the decoded again which leads to an Exception.

In the http://svn.apache.org/viewvc?view=revision&revision=1166508 commit you can see that the % was uncommented from org.apache.camel.util#UnsafeUriCharactersEncoder. Maybe this is related.

However... Double encoding of URIs seems quite odd. With any URI char there is no issue with that. But with % the % will be decoded again, which makes a % unusable in Camel.",Mac 10.7 Java 1.6.0_29,,,,,,,,,,,,,,,,,CAMEL-6176,,,,CAMEL-4425,,,,,,,,,,,,"02/Feb/12 14:19;sruehl;PercentTest.java;https://issues.apache.org/jira/secure/attachment/12512949/PercentTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225755,,,Fri Feb 10 16:37:20 UTC 2012,,,,,,,,,,,"0|i0243j:",10265,,,,,,,,,,,,,,,,,,,,"30/Jan/12 10:28;sruehl;Maybe this issue is a side effect;;;","30/Jan/12 10:35;sruehl;FYI %2525test leads to the excepted behavior (%test).;;;","02/Feb/12 14:19;sruehl;Attached jUnit test which demonstrates the issue.;;;","02/Feb/12 15:03;hadrian;Thanks a lot for reporting this and especially for providing a unit test. That is a problem I will fix today. In general however, the aim is to get rid of the normalizeEndpointUri. It is used because the uri design for some components allows the creation of invalid URIs that cannot be passed, so using it was a workaround in the first place (from almost the very beginning). The endpoint creation is quite convoluted and is due for some refactoring anyway, but I thought it could wait until 3.0.

The goal for 3.0 is to ensure that all components only accept valid URIs, so it's the responsibility of the user to encode whatever needs encoding, as it the case with any other technology the uses URIs. There is a new method a component can override now, preProcessUri(String) that would convert (and log) the original invalid Uri into a valid one, which could be used instead of the original one. This should also help with migration.

On a side note, using clear passwords in the uri is not the most secure thing to do. You may want to take a look at camel-jasypt. It may provide a different, safer, workaround.;;;","03/Feb/12 07:20;hadrian;@Sebastian, I committed a fix, actually more like a workaround on trunk. It took a while because I had to run the full tests to make sure I didn't break something. A better fix is possible and get rid of the double decode, but that only after we fix all components to not rely on unsafe URIs and then we can remove the double decode and more importantly the normalize.

It should work for you now. It would be great if you could test it from trunk. I will merge to 2.9.1 in a few hours.;;;","08/Feb/12 01:32;njiang;@Hadrian,

A lot of test failed because of patch merging into the Camel 2.8.x.
Can you take a look at it ?
 ;;;","10/Feb/12 06:26;njiang;Revert the patch of 1240189 in camel 2.8.x branch to fix the build.
;;;","10/Feb/12 16:37;sruehl;@Hadrian I wasn't able to build the trunk by myself (the camel build tips won't help) so I can't test it. But thanks for the tip for camel-jasypt.

@Willem Im quite not sure of the content of patch 1240189 but could you link to the hudson output (or a place where the test output can be found)?

Because its reverted shouldn't then this Issue reopened?;;;",,,,,,,,,,,,,,,,,,,,,,
On shutdown JmsConsumer doesn't shut down direct subroutes properly and loops forever,CAMEL-4949,12540200,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,27/Jan/12 21:45,02/May/13 02:29,14/Jul/23 05:45,29/Jan/12 11:08,2.9.0,,,,,,,,,,,,2.10.0,,,,camel-jms,camel-spring,,,2,shutdown,,,,,,,,"Our route looks like this:

{code}
from(""activemq:start"")
   .to(""direct:dir"")
{code}

On shutdown, if there is a message in the direct: route, Camel will wait indefinitely for the message to finish. Regardless of the shutdown strategy.

See attached unit test.",,dragisak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4950,"27/Jan/12 21:47;dragisak;CAMEL-4949.patch;https://issues.apache.org/jira/secure/attachment/12512233/CAMEL-4949.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225615,,,Sun Jan 29 11:08:34 UTC 2012,,,,,,,,,,,"0|i0242f:",10260,,,,,,,,,,,,,,,,,,,,"28/Jan/12 13:43;davsclaus;You have redelivery happening forever, this is really not a good idea.

There is already JIRA ticket to have redelivery error handler support breaking out redelivery attempts during graceful shutdown.;;;","28/Jan/12 15:09;davsclaus;I created a new ticket as the other JIRA ticket is to interrupt/cancel delayed redeliveries, which is a bit harder to do.;;;","29/Jan/12 03:27;dragisak;As shown in the unit test, SedaConsumer does this correctly. It's only the JMS that keeps retrying even when the shutdown is in progress. If your direct route is set to retry for a long time (exponential backoff, many redeliveries etc.), system shutdown can take forever. Infinite redelivery is set here just as an example. ;;;","29/Jan/12 11:08;davsclaus;Thanks for reporting. Is fixed by CAMEL-4950.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Delay using bean does not work in XML DSL,CAMEL-4947,12540028,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Jan/12 11:48,27/Jan/12 13:19,14/Jul/23 05:45,27/Jan/12 13:19,2.9.0,,,,,,,,,,,,2.10.0,2.8.4,2.9.1,,camel-core,camel-spring,,,0,,,,,,,,,"Reported on the user forum
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225531,,,Fri Jan 27 12:00:51 UTC 2012,,,,,,,,,,,"0|i0241z:",10258,,,,,,,,,,,,,,,,,,,,"27/Jan/12 12:00;muellerc;I can confirm this. Yesterday I tried a few different configurations, but it didn't work.

{code:xml}
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start"" />
            <delay>
            	<method bean=""delayer"" method=""sendAtTime""/> 
            	<to uri=""mock:end""/>
            </delay>
        </route>
    </camelContext>
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Producer calls done method of Camel callback several times,CAMEL-4945,12539895,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,stefanbo72,stefanbo72,26/Jan/12 13:38,01/Feb/12 09:00,14/Jul/23 05:45,01/Feb/12 09:00,2.8.3,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,0,,,,,,,,,"If the CXF Producer of Camel is called asynchronously for a WS-RM endpoint, Camel receives multiple final events, like ExchangeCompletedEvent and ExchangeFailedEvent. This leads also to negative JMX counters for inflight exchanges. The root cause is a bug in the handleResponse and handleException methods of org.apache.camel.component.cxf.CxfClientCallback. In those methods, which are called for WS-RM communication, although it is oneway, the done method of camelAsyncCallback is called also for oneway exchanges. However this callback method is already called in the process method of org.apache.camel.component.cxf.CxfProducer for oneway exchanges, which causes the mentioned effects.
The following changes in org.apache.camel.component.cxf.CxfClientCallback can fix this:
    public void handleResponse(Map<String, Object> ctx, Object[] res) {
        try {
            super.handleResponse(ctx, res);            
        } finally {
            // bind the CXF response to Camel exchange
            if (!boi.getOperationInfo().isOneWay()) {
                // copy the InMessage header to OutMessage header
                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
				camelAsyncCallback.done(false);
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug(""{} calling handleResponse"", Thread.currentThread().getName());
            }
        }
    }
    
    public void handleException(Map<String, Object> ctx, Throwable ex) {
        try {
            super.handleException(ctx, ex);
            camelExchange.setException(ex);
        } finally {
            // copy the context information
            if (!boi.getOperationInfo().isOneWay()) {
                // copy the InMessage header to OutMessage header
                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
				camelAsyncCallback.done(false);
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug(""{} calling handleException"", Thread.currentThread().getName());
            }
        }
    }        
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jan/12 10:30;stefanbo72;CAMEL-4945.patch;https://issues.apache.org/jira/secure/attachment/12512399/CAMEL-4945.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,225398,,,Wed Feb 01 09:00:05 UTC 2012,,,,,,,Patch Available,,,,"0|i0241j:",10256,,,,,,,,,,,,,,,,,,,,"27/Jan/12 13:32;davsclaus;Thanks for reporting.

Is it possible for you to either create a
- patch with a proposed fix
- unit test demonstrating the issue

ASF requires that any contributed code is attached as files to a JIRA ticket and where you click [x] in grant license to Apache.
If not then we cannot accept your contribution.;;;","30/Jan/12 10:30;stefanbo72;Proposed patch;;;","30/Jan/12 13:26;davsclaus;Thanks for the patch.

Would it be possible with an unit test as well? Or can you point to an existing unit-test in camel-cxf that would test your patch?;;;","01/Feb/12 09:00;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
exchange.getIn().getBody(<SomeClass>.class) throws an exception for Jaxb model objects,CAMEL-4942,12539865,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,26/Jan/12 06:15,27/Jan/12 20:13,14/Jul/23 05:45,27/Jan/12 20:13,2.8.3,,,,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,camel-jaxb,,,0,,,,,,,,,"{code}
exchange.getIn().getBody(Foo.class);
{code}

should return a Foo instance or null, if no suitable type converter is available. The java doc says: ""return the body of the message as the specified type, or <tt>null</tt> if not possible to convert""

If Foo is an Jaxb object model, this method call:
- throws an org.xml.sax.SAXParseException if the body content is a string
- throws a javax.xml.bind.UnmarshalException if the body content is another Jaxb model object

Please have a look on the attached sample eclipse project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jan/12 06:16;muellerc;test.zip;https://issues.apache.org/jira/secure/attachment/12511949/test.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225368,,,Fri Jan 27 20:13:33 UTC 2012,,,,,,,,,,,"0|i0240v:",10253,,,,,,,,,,,,,,,,,,,,"26/Jan/12 06:16;muellerc;Test which shows the issue;;;","26/Jan/12 16:29;bvahdat;Following my findings regarding the problem you've reported by this ticket:

- The problem raises *even if* you would use the trunk code as your Camel dependency, that's version 2.10-SNAPSHOT
- If you skip out your declared dependency to camel-jaxb then *ALL* of your tests would pass!
- The tests would also *ALL* pass if you would instead do
{code}
exchange.getContext().getTypeConverter().convertTo(Foo.class, exchange.getIn());
{code}

- IMHO the bug is the way the method

{code}
org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(Class<T> type, Exchange exchange, Object value)
{code}

Has been implemented on line 90 & 91
 
{code}
if (isJaxbType(type)) {
  return unmarshall(type, exchange, value);
{code} 

Which doesn't take into account if the class of the *value* object is JAXB complaint as well, that's isJaxbType(value.getClass())

Notes:
- IMHO we should better skip 2.6.0 as a Affects Version by this ticket, as that version is not supported anymore!
- As I'm a newbie, let's see what others (Claus?) think about this behaviour.
- In the case I'm *not* wrong, we should better backport the fix both to the 2.8.x & 2.9.x branches.

All in one the workaround solution is to avoid the FallbackTypeConverter be enlisted into the TypeConverterRegistry, for example in that you skip the dependency to camel-jaxb because of:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-jaxb/src/main/resources/META-INF/services/org/apache/camel/FallbackTypeConverter
;;;","26/Jan/12 17:24;muellerc;Hi Babak!

Thanks for looking into this issue (I'm too busy at the moment)... :-(
This issue is not urgent for us, because our workaround at the moment looks like below:
{code}
Object body = exchange.getIn().getBody();
if (body instanceof Foo) {
  // process Foo
} else {
  // process Bar
}
{code}

But in my opinion it's a bug.
+1 for for fixing this in 2.10, 2.9 and 2.8.

Best,
Christian;;;","26/Jan/12 21:55;bvahdat;I committed a patch into the trunk which I will double check using your provided test as soon as it reaches the snapshot repo.;;;","27/Jan/12 08:24;bvahdat;I added your provided test route (FallbackTypeConverterDoesNotThrowExceptionTest) which verifies the fix.;;;","27/Jan/12 11:56;muellerc;Thank you Babak! I will be the sponsor for your beer the next time we meet. :-);;;","27/Jan/12 12:10;muellerc;I think the fix version for the 2.8.x branch has to be 2.8.5, because 2.8.4 is already in vote...;;;","27/Jan/12 12:26;bvahdat;Yeah you're right but I intended to do it the same way as CAMEL-4947 as the vote has not passed yet.

I see that the overhead for a new 2.8.4 release would be huge to be done by the release manager (Hadrian) but IMHO these two fixes are *really* important. I wait to see how the vote will end up and will do 2.8.4 => 2.8.5 change if it would pass!;;;","27/Jan/12 15:45;muellerc;I don't think this issue is really urgent because:
- it exists at least since release 2.6.0
- our users has workarounds for this

So, let's fix it in 2.8.5 if there is no other reason to build a new release version for 2.8.4...;;;","27/Jan/12 16:03;bvahdat;Did change the Fix Version/s as you recommended.;;;","27/Jan/12 20:13;bvahdat;Back-ported to both 2.8.x & 2.9.x branches as well.;;;",,,,,,,,,,,,,,,,,,,
ManagedBrowsableEndpoint are broken,CAMEL-4938,12539678,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,v_cheruvu@hotmail.com,v_cheruvu@hotmail.com,24/Jan/12 22:06,30/Jan/12 17:22,14/Jul/23 05:45,30/Jan/12 14:36,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,jmx,,,0,,,,,,,,,"ManagedeBrowsableEndpoint are broken which means any component that inherit ManagedBrowsableEndpoint have errors as well. Please see the link below which will have error screen shot of queueSize JMX operations.


http://camel.465427.n5.nabble.com/JMX-queue-size-operation-fails-Camel-2-9-0-td5233089.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jan/12 13:49;davsclaus;CAMEL-4938.patch;https://issues.apache.org/jira/secure/attachment/12512416/CAMEL-4938.patch","30/Jan/12 15:16;bvahdat;org.apache.camel.component.jms.BrowsableQueueTest.jpg;https://issues.apache.org/jira/secure/attachment/12512423/org.apache.camel.component.jms.BrowsableQueueTest.jpg",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,225181,,,Mon Jan 30 17:22:13 UTC 2012,,,,,,,,,,,"0|i023zz:",10249,,,,,,,,,,,,,,,,,,,,"25/Jan/12 18:09;bvahdat;A dirty fix would be to duplicate the JMX operations already provided by ManagedBrowsableEndpoint on the SedaEndpoint as well. This seems to be also the case for JmsQueueEndpoint!;;;","30/Jan/12 13:22;davsclaus;Thanks for reporting.

We should add a specialized ManagedSedaEndpoint to combine the browsable with the custom seda operations, in one combined interface the JMX API can handle calling.

Also adding to the unit tests that it uses some of the JMX operations from browsable endpoint in the seda endpoint test.

I am running a test with a fix.;;;","30/Jan/12 15:16;bvahdat;Claus,

thanks beforehand for providing & applying the patch which indeed resolved the problem, however the solution is to my understanding is not *generic* as we've now introduced SEDA Endpoint specific logic into DefaultManagementObjectStrategy:

{code}
        } else if (endpoint instanceof SedaEndpoint) {
            ManagedSedaEndpoint me = new ManagedSedaEndpoint((SedaEndpoint) endpoint);
            me.init(context.getManagementStrategy());
            return me;
{code}

And have also introduced a ManagedSedaEndpoint which is again *Endpoint specific*, IMHO not nice!

Another note: by enableing JMX on

{code}
org.apache.camel.component.jms.BrowsableQueueTest
{code}

I see that the JMX operations are enlisted twice, causing (almost) the same behaviour (see the attached screenshot).

Shouldn't we remove the ManagedResource & ManagedOperation annotations on JmsQueueEndpoint as well? The same as you did for SedaEndpoint?;;;","30/Jan/12 17:08;davsclaus;Ah that single method is actually @deprecated and wasn't included on trunk.

There is no duplicate methods, just methods with the same name, but with different parameters (eg overloaded methods).;;;","30/Jan/12 17:22;davsclaus;Yeah its a better idea to do like JMS endpoint. So I will fix that. Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HTTP TRACE should be disabled by default,CAMEL-4926,12539187,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Jan/12 18:04,20/Jan/12 18:47,14/Jul/23 05:45,20/Jan/12 18:47,2.8.3,2.9.0,,,,,,,,,,,2.10.0,2.8.4,2.9.1,,,,,,0,,,,,,,,,"Jetty, Apache HTTP, have HTTP TRACE disabled by default. We should also do this in Camel. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224689,,,2012-01-20 18:04:28.0,,,,,,,,,,,"0|i023xb:",10237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadsProcessor configured with ExecutorService with DiscardPolicy or DiscardOldestPolicy leaves inflight exchanges for discarded tasks unprocessed.,CAMEL-4925,12539115,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,20/Jan/12 10:02,23/Jan/12 17:00,14/Jul/23 05:45,23/Jan/12 12:44,2.8.0,,,,,,,,,,,,2.10.0,,,,camel-core,,,,0,,,,,,,,,"ThreadsProcessor configured with ExecutorService with DiscardPolicy or DiscardOldestPolicy leaves inflight exchanges for discarded tasks unprocessed.

Here is the code from ThreadsProcessor. In case of DiscardPolicy or DiscardOldestPolicy executorService will no throw RejectedExecutionException, so exchange remains unprocessed and count of inflight exchanges will not be decremented for such discarded exchanges.

{code:java|title=ThreadsProcessor#process(Exchange, AsyncCallback)}
public boolean process(Exchange exchange, AsyncCallback callback) {
    if (shutdown.get()) {
        throw new IllegalStateException(""ThreadsProcessor is not running."");
    }

    ProcessCall call = new ProcessCall(exchange, callback);
    try {
        executorService.submit(call);
        // tell Camel routing engine we continue routing asynchronous
        return false;
    } catch (RejectedExecutionException e) {
        if (isCallerRunsWhenRejected()) {
            if (shutdown.get()) {
                exchange.setException(new RejectedExecutionException());
            } else {
                callback.done(true);
            }
        } else {
            exchange.setException(e);
        }
        return true;
    }
}
{code}

Unit test is attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jan/12 16:55;szhemzhitsky;CAMEL-4925.patch;https://issues.apache.org/jira/secure/attachment/12511394/CAMEL-4925.patch","20/Jan/12 10:02;szhemzhitsky;CamelRoutingTest.java;https://issues.apache.org/jira/secure/attachment/12511245/CamelRoutingTest.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224617,,,Mon Jan 23 17:00:43 UTC 2012,,,,,,,,,,,"0|i023x3:",10236,,,,,,,,,,,,,,,,,,,,"20/Jan/12 11:15;davsclaus;We would need to wrap those 2 policies, and then remove the exchange from them inflight registry, when the rejectedExecutor callback is invoked.;;;","20/Jan/12 11:44;szhemzhitsky;So if we wrap these two policies, how to know which exchange must be removed from the inflight repository?;;;","20/Jan/12 12:25;davsclaus;Yeah we would need to check in ThreadsDefinition if you have configured Discard and DiscardOldest. And then wrap those policies with a custom policy, so we get the callback from the JDK when the task is rejected.

The discard, would possible not be needed, as I would assume the thread pool will reject it asap, when you try to submit it. But the discard oldest, is an existing task from the task queue, so that is a different story.

Then we need to provide this as a callback to the ThreadsProcessor, so it can do custom logic when the RejectedExecutionHandler#rejectedExecution is invoked. We can then from the Runnable parameter cast that to ProcessCall, and then get access to the Exchange. Then we can set on the Exchange a RejectedExecutionException as exception, and invoke its callback. Then Camel will take it from there to remove the exchange from inflight registry and whatnot.

Something along the lines of that. Its a shame the API of the ExecutorService do not have a 2nd optional runnable parameter for rejected execution. Then it would have been easier. As you just submit 2 runnable's. And the JDK will invoke the appropriate.;;;","21/Jan/12 14:56;davsclaus;After looking into this for a bit, then the JDK does *not* offer good APIs for being able to do custom logic when rejected, by which you get access to the inner details of the runnable task you submitted to the thread pool. That means for DiscardOldest, you do *not* know which Exchange is to be discarded, as you cannot get access to the Exchange. The JDK ThreadPoolExecutor will wrap the runnable/FutureTask using an adapter, which does not expose API for you to get access to the Exchange.

Even if you create a custom FutureTask and submit that, then it's the adapter you get when the task is rejected. And the adapter does not allow to get you to your custom FutureTask.

So the best we can do is to deny supporting DiscardOldest, and then we can handle Abort and Discard in the ThreadsProcessor, where we can mark the exchange to stop routing, so the exchange will be done, which means that it will be unregistered from the inflight registry and whatnot.;;;","21/Jan/12 17:14;szhemzhitsky;Hi Claus,
I noticed the same things you mentioned and attached a sample patch that can possibly be used to support correct rejection of submitted tasks. The idea is to provide our own _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_ from _DefaultThreadPoolFactory_. These pools wrap submitted tasks with custom _FutureTask_ that supports rejection. _RejectedExecutionHandlers_ in the _ThreadPoolRejectedPolicy_ are also changed to check whether the discarded tasks can be rejected (I also added blocking policy into the _ThreadPoolRejectedPolicy_).

So if submitted tasks do not implement _Rejectable_ interface the behavior is exactly the same as with ordinary _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_. If these tasks are _Rejectable_, their _reject()_ method will be called. 

The only problem is what to do if the user provides its own ExecutorService to configure the ThreadsProcessor. I suppose in that case this user should be fully responsible for handling rejections correctly (it should be mentions in camel docs or somewhere else).;;;","22/Jan/12 11:06;davsclaus;Sergey,

Thanks for the patch. This seems promising. I am polishing this a bit
- discard and discard oldest = the exchange will not continue routing, done successfully
- abort = the exchange will not continue routing, an exception will be set, done with a failure

Then you can decide to use between abort or discard, to chose between whether the exchange should done with a failure or not.

I am removing the blocked policy, as its not tested, and we have no people asking for it. Don't give people robe to hang themselves.

And yeah if end user provide their own thread pool, then they are responsible for handling that situation. 
;;;","22/Jan/12 15:33;szhemzhitsky;Claus, thanks a lot.

I've done some experiments with the blocking policy that seems rather dangerous, as threads in the pool may become timed out before the rejected task will be put into the queue. So you're right that this policy has to be removed.;;;","23/Jan/12 12:33;davsclaus;Thanks for the contribution. I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html

This outputs a report if the source code is not aligned with the checkstyle we have in place. eg checking for missing license headers, and code formatting and the likes.;;;","23/Jan/12 17:00;szhemzhitsky;{quote}
I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html
{quote}
Hi Claus, thanks for providing this useful link.;;;",,,,,,,,,,,,,,,,,,,,,
PollEnrich in default mode should block,CAMEL-4920,12538967,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/12 13:49,19/Jan/12 19:39,14/Jul/23 05:45,19/Jan/12 15:58,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"Currently it uses receiveNoWait, it should use receive (eg block). You should use timeout = -1 for receiveNoWait. This is also what we write in the documentation and javadoc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224469,,,Thu Jan 19 19:39:35 UTC 2012,,,,,,,,,,,"0|i023vz:",10231,,,,,,,,,,,,,,,,,,,,"19/Jan/12 13:54;davsclaus;btw this issue causes the test failures on trunk
https://builds.apache.org/job/Camel.trunk.fulltest/663/#showFailuresLink

Which became apparent after the seda consumer does no longer poll during CamelContext is starting.;;;","19/Jan/12 19:39;bvahdat;Well done :-)

Now all tests pass again [1] other than the one which has to do with CAMEL-4794 and the related one CAMEL-4900.

[1] https://builds.apache.org/job/Camel.trunk.fulltest/664/;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Serialisation Data Format is unable to unmarshal in OSGi environment,CAMEL-4915,12538806,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,raulvk,raulvk,18/Jan/12 14:13,19/Jan/12 10:51,14/Jul/23 05:45,19/Jan/12 10:51,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,serialization,,,,,,,,"This happens because camel-core doesn't have access to custom classes. Maybe this data format should be isolated into it's own package and have DynamicImport-Package: * in its manifest headers. That way it will be able to access any class from the environment.

Another possibility is to dig deeper into what classloader is being used to resolve the class. It seems like the camel-core classloader is used rather than the TCCL. Possible culprit could be http://docs.oracle.com/javase/6/docs/api/java/io/ObjectInputStream.html#resolveClass(java.io.ObjectStreamClass).",Karaf 2.2.0 with Equinox 3.6.0.v20100517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224309,,,Thu Jan 19 10:29:32 UTC 2012,,,,,,,,,,,"0|i023uv:",10226,,,,,,,,,,,,,,,,,,,,"18/Jan/12 14:17;davsclaus;Its the ObjectConvert.toClass that needs to use the ClassResolver API from CamelContext to load the class. Then it ought to work, as this is how we do load stuff in osgi with Camel.

;;;","19/Jan/12 10:29;davsclaus;Committed a fix and added an osgi test for spring-dm.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Using namespaces with xpath does not work as the namesapces is not parsed and injected into the camel model,CAMEL-4913,12538775,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/12 11:00,18/Jan/12 11:25,14/Jul/23 05:45,18/Jan/12 11:25,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-blueprint,,,,0,,,,,,,,,"Using xpath predicates in a blueprint xml file does not work if you use custom namespaces, as the camel-blueprint component does not detect the custom namespaces, as camel-spring does.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224278,,,2012-01-18 11:00:38.0,,,,,,,,,,,"0|i023uf:",10224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Twitter component fixes,CAMEL-4908,12538625,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,bibryam,bibryam,17/Jan/12 13:21,24/Jan/12 08:45,14/Jul/23 05:45,19/Jan/12 04:38,2.10.0,,,,,,,,,,,,2.10.0,,,,camel-twitter,,,,0,,,,,,,,,"Fix ConcurrentModificationException for StreamingConsumer.
Fix NPE for FilterConsumer
Use additional query parameters for FilterConsumer like userIds, keywords.
I didn't added tests for these fixes, because currently it seems like it connects to the internet and does real twitter queries. I will check this in a separate issue. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jan/12 13:21;bibryam;twitter.diff;https://issues.apache.org/jira/secure/attachment/12510834/twitter.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,224128,,,Tue Jan 24 08:38:16 UTC 2012,,,,,,,Patch Available,,,,"0|i023tb:",10219,,,,,,,,,,,,,,,,,,,,"17/Jan/12 13:29;davsclaus;Bilgin you may want to read about checkstyle, so you can run a test to run a report on the command line, which tells you if the source code is aligned as it should (eg indent, parenthesis, and whatnot)

See building with checkstyle here:
http://camel.apache.org/building.html

And btw I do not think you need to create a new ArrayList when you guard it as unmodified, as the caller will not be able to modify the list.
Or did I miss a point? If so please add a code comment in the source why this is done as is
return Collections.unmodifiableList(new ArrayList(receivedStatuses));
;;;","17/Jan/12 14:41;bibryam;I will pay more attention to CS. My editor intelliJ orders the imports in different order and I don't know the order expected from CS, will spent some time there.

About:
return Collections.unmodifiableList(new ArrayList(receivedStatuses));

the caller is not able to modify the array, but while the caller is iterating the source array is modified with clear/add methods and that's causing the error mentioned previously;;;","17/Jan/12 14:59;bvahdat;@Bilgin
Personally I do use eclipse but in your case applying [1] will do the trick. Please also check [2] just in the case you don't know how to apply it to your IntelliJ installation.

[1] https://svn.apache.org/repos/asf/camel/trunk/etc/idea/settings.jar
[2] http://musingsofaprogrammingaddict.blogspot.com/2010/03/import-code-style-settings-into.html;;;","19/Jan/12 04:38;davsclaus;Thanks for the patch.

I have fixed CS.;;;","24/Jan/12 01:52;bibryam;Thanks for the info Babak. I installed the settings following the instructions, but still have to do some formatting manually, like indenting ""throws"" statements at 8 spaces instead of 12. Is this expected behaviour or the IDE should do all the formatting automatically?;;;","24/Jan/12 08:38;bvahdat;I've got no experience of using IntelliJ but the problem you are facing seems really odd to me if IntelliJ doesn't honor the given settings. I would expect any given IDE to do all the formattings automatically!

AFAIK Claus makes use of IntelliJ and maybe he can help you here.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"org.apache.camel.util.concurrent.ExecutorServiceHelper.getThreadName(String, String) method throws IllegalArgumentException when name parameter contains '$', ""${"" or '}'",CAMEL-4904,12538560,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,saucier,saucier,16/Jan/12 19:29,05/Apr/12 17:10,14/Jul/23 05:45,19/Jan/12 05:46,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.1,,,camel-core,,,,0,,,,,,,,,"When the ""name"" parameter contains a '$', ""${"" or '}' substring, the getThreadName method will throw an erroneous IllegalArgumentException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,224064,,,Thu Apr 05 17:10:18 UTC 2012,,,,,,,,,,,"0|i023sn:",10216,,,,,,,,,,,,,,,,,,,,"17/Jan/12 06:26;davsclaus;Thanks for reporting. I fixed that on trunk yesterday with CAMEL-4903.
Will have to manually backport a fix, for the older branches as the trunk changed. Basically you need to quote the names, so the replace works.;;;","17/Jan/12 06:28;davsclaus;Stephen if you wish to work on a patch, then you can take a look at this commit
http://svn.apache.org/viewvc?rev=1232013&view=rev

Notice the quote replacement code.;;;","17/Jan/12 08:21;bvahdat;Claus not that much important at all but I commented a svn-typo by CAMEL-4903 ;;;","17/Jan/12 13:10;davsclaus;Babak

In due time you will be able to make the commit log changes yourself :)

Its not really that important, and just risk something odd **** up with svn/git / syncing and whatnot.
So I would just leave it as is.;;;","17/Jan/12 13:19;bvahdat;fair enough :-);;;","19/Jan/12 05:46;davsclaus;Fixed on 2.8 branch as well.;;;","04/Apr/12 23:47;saucier;I am confused -- the bug details indicate that this fix should be present in 2.9.1 and 2.8.4, but as far as I can tell, it isn't in either. 

I am looking at
https://svn.apache.org/repos/asf/camel/tags/camel-2.8.4/camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java
and
https://svn.apache.org/repos/asf/camel/tags/camel-2.9.1/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

What is in trunk seems okay:
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

Am I missing something? Testing with 2.9.1, my bug still exists.;;;","05/Apr/12 06:52;davsclaus;
The fix works fine as we use this quote the matcher before using
{code}

    // must quote the names to have it work as literal replacement
        shortName = Matcher.quoteReplacement(shortName);
        longName = Matcher.quoteReplacement(longName);
{code}

However note that the syntax in Camel 2.10 has changed to use # instead of $ as tokens. This avoids any confusions with property placeholders, simple language etc. The 2.9 and older releases uses the $ to not break compatibility.;;;","05/Apr/12 16:01;saucier;Could you please check again the links I posted previously? The code that is included in 2.8.4 and 2.9.1 does not quote the replacement, and still exhibits the issue as it is still checking after the replacement that that string does not contain a '}' character which my name does. This is working in trunk due to the use of a regular expression (and the fact that '#' is being used as the delimiter for placeholders, which are not contained in my particular names).;;;","05/Apr/12 17:10;davsclaus;Then I suggest to not use { } in your thread names. Its very unusual.;;;",,,,,,,,,,,,,,,,,,,,
path to xsd in spring.schemas not equivalent to path on http site,CAMEL-4902,12538491,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akudrevatych,akudrevatych,16/Jan/12 08:35,17/Jan/12 09:23,14/Jul/23 05:45,17/Jan/12 09:23,2.9.0,,,,,,,,,,,,,,,,camel-cxf,,,,0,,,,,,,,,"in spring.schemas we have line
http\://camel.apache.org/schema/cxf/camel-cxf-2.9.0.xsd=schema/cxfEndpoint.xsd
but there isn't such file on http://camel.apache.org/schema/cxf/ only camel-cxf.xsd and camel-cxf-2.9.0-spring.xsd
please make it correct.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223995,,,Tue Jan 17 09:23:12 UTC 2012,,,,,,,,,,,"0|i023s7:",10214,,,,,,,,,,,,,,,,,,,,"16/Jan/12 09:27;njiang;I just updated the camel.apache.org web site with right name of the camel-cxf.xsd.
I also moved the camel-cxf-2.9.0-blueprint.xsd to  http://camel.apache.org/schema/blueprint/cxf ;;;","17/Jan/12 09:23;akudrevatych;thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quartz component doesn't start with a persistent scheduler,CAMEL-4900,12538454,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bryanck,bryanck,15/Jan/12 20:04,16/Mar/12 15:06,14/Jul/23 05:45,16/Mar/12 10:22,2.8.4,2.9.0,,,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-quartz,,,,0,,,,,,,,,"I have scheduler persistence on but clustering is not turned on. When starting my app the first time, it starts OK. After shutting down and staring a second time, an exception is thrown and the app doesn't start up. This did not occur in 2.8.3. The following exception occurs:

Caused by: org.quartz.SchedulerException: Trigger's related Job's name cannot be null
	at org.quartz.Trigger.validate(Trigger.java:955) ~[quartz-1.8.5.jar:na]
	at org.quartz.core.QuartzScheduler.rescheduleJob(QuartzScheduler.java:982) ~[quartz-1.8.5.jar:na]
	at org.quartz.impl.StdScheduler.rescheduleJob(StdScheduler.java:302) ~[quartz-1.8.5.jar:na]
	at org.apache.camel.component.quartz.QuartzComponent.doAddJob(QuartzComponent.java:233) ~[camel-quartz-2.9.0.jar:2.9.0]

In 2.9.0, the code was changed here and this is where it craashes:
{code}
if (!isClustered()) {
    trigger.setStartTime(Calendar.getInstance().getTime());
    scheduler.rescheduleJob(trigger.getName(), trigger.getGroup(), trigger);
}
{code}

My component definition looks like this:

{code}
<endpoint id=""myschedule"" uri=""quartz://fmc/mycron=${myschedule.cron}&amp;stateful=true"" />
{code}

Again, this affects 2.9.0 but not 2.8.3. I have not found a workaround yet.
","Java 1.6.0_29 64-bit, Mac OS X 10.7 and CentOS 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Jan/12 13:47;bryanck;quartztest.zip;https://issues.apache.org/jira/secure/attachment/12511429/quartztest.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223958,,,Fri Mar 16 15:06:24 UTC 2012,,,,,,,,,,,"0|i023rr:",10212,,,,,,,,,,,,,,,,,,,,"15/Jan/12 20:26;bvahdat;I *assume* this relates to the change done by CAMEL-4794 in QuartzComponent from:

{code}
if (!isClustered()) {
  scheduler.resumeTrigger(trigger.getName(), trigger.getGroup());
}
{code}

to:

{code}
if (!isClustered()) {
  trigger.setStartTime(Calendar.getInstance().getTime());
  scheduler.rescheduleJob(trigger.getName(), trigger.getGroup(), trigger);
}
{code}

;;;","15/Jan/12 20:29;bvahdat;@Bryan
Sorry, just realized that you have pasted the same code-snippet by the Description field.;;;","16/Jan/12 18:06;bryanck;Yes, I suspect that change is what is causing this. The call to rescheduleJob() validates that the trigger's job name is not null. But the job name IS null. I tried adding a job.name=xxx property to the endpoint URL, but that did not fix the problem.;;;","17/Jan/12 08:26;bvahdat;@Bryan would you have the possibility to provide a unit-test demonstrating the regression failure you mentioned or provide maybe a snippet of your routing logic so that we can reproduce this regression failure on the trunk. ;;;","17/Jan/12 17:19;bryanck;I can put together a test program. It will have to wait until this weekend though as it will require a little work (needs a database for persistence, etc.);;;","22/Jan/12 13:47;bryanck;Here is a simple app that demonstrates the problem. It uses gradle (v1.0m7). Unzip and run ""gradle runClean"". This will run with a fresh database. Then run ""gradle run"" to run with the existing database. The exception will be thrown.;;;","22/Jan/12 17:56;hadrian;Bryan, thanks for the test case. I am looking into it. Babak suggested that my changes may be the culprit.;;;","22/Jan/12 18:10;bvahdat;Hadrian, 

Thanks alot for looking into it! As I now can silently leave my box and play a bit with my small kids, right now yelling at me :-);;;","02/Feb/12 21:51;bryanck;This also affects the newly released 2.8.4 now.;;;","28/Feb/12 15:40;davsclaus;So what is the status of this? ;;;","16/Mar/12 08:05;davsclaus;Bryan thanks for your sample application.
I am adding unit tests based upon your work.

;;;","16/Mar/12 08:41;davsclaus;Bryan which container do you run your app?
And how do you restart your app?;;;","16/Mar/12 08:49;davsclaus;I can only reproduce this, if the ""restart"" does not run cleanly. Then upon starting again, then the trigger still exists, and causes that exception reported by Bryan.;;;","16/Mar/12 10:22;davsclaus;Another way of reproducing was just to stop/start the route itself.;;;","16/Mar/12 10:50;bvahdat;Claus

Thanks for digging into this issue and resolving it.

Mange tak :-);;;","16/Mar/12 15:06;bryanck;I tested the latest 2.8.x branch. This fixed the issue for me. Thanks!;;;",,,,,,,,,,,,,,
validation of camel-websocket feature failed,CAMEL-4896,12538402,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,14/Jan/12 16:11,14/Jan/12 17:48,14/Jul/23 05:45,14/Jan/12 17:48,2.10.0,,,,,,,,,,,,2.10.0,,,,karaf,,,,0,,,,,,,,,"{noformat}
Christian-Muellers-MacBook-Pro:camel cmueller$ cd platforms/karaf/
Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Commands
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ karaf ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ karaf ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ karaf ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ karaf ---
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ karaf ---
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ karaf ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/2.10-SNAPSHOT/karaf-2.10-SNAPSHOT.pom
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Commands 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ camel-karaf-commands ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ camel-karaf-commands ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-karaf-commands ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ camel-karaf-commands ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-karaf-commands ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-karaf-commands ---
[INFO] Compiling 15 source files to /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-karaf-commands ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ camel-karaf-commands ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-karaf-commands ---
[INFO] Surefire report directory: /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
There are no tests to run.

Results :

Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-bundle-plugin:2.3.4:bundle (default-bundle) @ camel-karaf-commands ---
[WARNING] Warning building bundle org.apache.camel.karaf:camel-karaf-commands:bundle:2.10-SNAPSHOT : Split package org/apache/karaf/util
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.util]
Reference from     /Users/cmueller/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.2.5/org.apache.karaf.util-2.2.5.jar
Classpath          [Jar:., Jar:camel-core, Jar:slf4j-api, Jar:org.apache.karaf.shell.console, Jar:jline, Jar:jansi, Jar:org.osgi.core, Jar:org.osgi.compendium, Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.jaas.config, Jar:org.apache.karaf.jaas.boot, Jar:org.apache.aries.blueprint, Jar:org.apache.aries.util, Jar:org.apache.aries.testsupport.unit, Jar:org.apache.aries.proxy.api, Jar:org.apache.felix.gogo.runtime, Jar:org.apache.karaf.util]
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-karaf-commands ---
[INFO] Checking legal files in: camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ camel-karaf-commands ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/target/camel-karaf-commands-2.10-SNAPSHOT.jar to /Users/cmueller/.m2/repository/org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/commands/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.pom
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.4:install (default-install) @ camel-karaf-commands ---
[INFO] Installing org/apache/camel/karaf/camel-karaf-commands/2.10-SNAPSHOT/camel-karaf-commands-2.10-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ apache-camel ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ apache-camel ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] >>> features-maven-plugin:2.2.5:validate (validate) @ apache-camel >>>
[INFO] 
[INFO] --- maven-antrun-plugin:1.6:run (create-prop) @ apache-camel ---
[INFO] Executing tasks

main:
     [echo] Maven version: 2.10-SNAPSHOT
     [echo] OSGi version: 2.10.0.SNAPSHOT
[INFO] Executed tasks
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] <<< features-maven-plugin:2.2.5:validate (validate) @ apache-camel <<<
[INFO] 
[INFO] --- features-maven-plugin:2.2.5:validate (validate) @ apache-camel ---
[INFO] == Preparing for validation ==
[INFO]  - getting list of system bundle exports
[INFO]  - getting list of provided bundle exports
[INFO]     scanning org.apache.camel.karaf:apache-camel:pom:2.10-SNAPSHOT for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-api:jar:1.5.3:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-service:jar:1.5.3:provided for exports
[INFO]     scanning log4j:log4j:jar:1.2.16:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.framework:jar:2.0.5:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.2.0:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.configadmin:jar:1.2.4:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.core:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.compendium:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.core:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:javax.servlet:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.osgi.foundation:jar:1.0.0:provided for exports
[INFO]     scanning junit:junit:jar:4.8.1:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:0.3:provided for exports
[INFO]     scanning org.slf4j:slf4j-api:jar:1.6.1:provided for exports
[INFO]     scanning org.apache.aries.testsupport:org.apache.aries.testsupport.unit:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries.proxy:org.apache.aries.proxy.api:jar:0.3:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:0.3:provided for exports
[INFO]     scanning org.apache.karaf.shell:org.apache.karaf.shell.console:jar:2.2.5:provided for exports
[INFO]     scanning org.sonatype.jline:jline:jar:2.5:provided for exports
[INFO]     scanning org.fusesource.jansi:jansi:jar:1.7:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.2.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.2.0:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.modules:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.config:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.karaf:org.apache.karaf.util:jar:2.2.5:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.gogo.runtime:jar:0.10.0:provided for exports
[INFO]  - populating repositories with Karaf core features descriptors
[INFO]  - validation of file:/Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO] == Analyzing feature descriptor ==
[INFO]  - read /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/standard/2.2.5/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/standard/2.2.5/xml/features
[INFO]     scanning feature karaf-framework for exports
[INFO]     scanning feature spring for exports
[INFO]     scanning feature spring-web for exports
[INFO]     scanning feature spring for exports
[INFO]     scanning feature spring-aspects for exports
[INFO]     scanning feature spring-dm for exports
[INFO]     scanning feature spring-dm-web for exports
[INFO]     scanning feature spring-instrument for exports
[INFO]     scanning feature spring-jdbc for exports
[INFO]     scanning feature spring-jms for exports
[INFO]     scanning feature spring-struts for exports
[INFO]     scanning feature spring-test for exports
[INFO]     scanning feature spring-orm for exports
[INFO]     scanning feature spring-oxm for exports
[INFO]     scanning feature spring-tx for exports
[INFO]     scanning feature spring-web for exports
[INFO]     scanning feature spring-web-portlet for exports
[INFO]     scanning feature wrapper for exports
[INFO]     scanning feature obr for exports
[INFO]     scanning feature config for exports
[INFO]     scanning feature jetty for exports
[INFO]     scanning feature http for exports
[INFO]     scanning feature war for exports
[INFO]     scanning feature kar for exports
[INFO]     scanning feature webconsole-base for exports
[INFO]     scanning feature webconsole for exports
[INFO]     scanning feature ssh for exports
[INFO]     scanning feature management for exports
[INFO]     scanning feature eventadmin for exports
[INFO]     scanning feature jasypt-encryption for exports
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/enterprise/2.2.5/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/enterprise/2.2.5/xml/features
[INFO]     scanning feature transaction for exports
[INFO]     scanning feature jpa for exports
[INFO]     scanning feature jndi for exports
[INFO]     scanning feature application-without-isolation for exports
[INFO]  - validation of mvn:org.apache.cxf.karaf/apache-cxf/2.5.1/xml/features
[INFO]  - adding 12 known features from mvn:org.apache.cxf.karaf/apache-cxf/2.5.1/xml/features
[INFO]     scanning feature activemq for exports
[INFO]     scanning feature cxf-specs for exports
[INFO]     scanning feature cxf-jaxb for exports
[INFO]     scanning feature cxf-abdera for exports
[INFO]     scanning feature opensaml for exports
[INFO]     scanning feature wss4j for exports
[INFO]     scanning feature cxf-saaj-impl for exports
[INFO]     scanning feature cxf-war-java5 for exports
[INFO]     scanning feature cxf for exports
[INFO]     scanning feature cxf-sts for exports
[INFO]     scanning feature cxf-wsn-api for exports
[INFO]     scanning feature cxf-wsn for exports
[INFO]  - validation of mvn:org.jclouds.karaf/jclouds-karaf/1.2.2/xml/features
[INFO]  - adding 46 known features from mvn:org.jclouds.karaf/jclouds-karaf/1.2.2/xml/features
[INFO]     scanning feature guice for exports
[INFO]     scanning feature jclouds for exports
[INFO]     scanning feature jclouds-compute for exports
[INFO]     scanning feature jclouds-api-filesystem for exports
[INFO]     scanning feature jclouds-api-eucalyptus for exports
[INFO]     scanning feature jclouds-api-elasticstack for exports
[INFO]     scanning feature jclouds-api-vcloud for exports
[INFO]     scanning feature jclouds-driver-jsch for exports
[INFO]     scanning feature jclouds-driver-sshj for exports
[INFO]     scanning feature jclouds-driver-slf4j for exports
[INFO]     scanning feature jclouds-driver-log4j for exports
[INFO]     scanning feature jclouds-driver-bouncycastle for exports
[INFO]     scanning feature jclouds-aws-cloudwatch for exports
[INFO]     scanning feature jclouds-aws-ec2 for exports
[INFO]     scanning feature jclouds-aws-s3 for exports
[INFO]     scanning feature jclouds-azureblob for exports
[INFO]     scanning feature jclouds-bluelock-vcloud-zone01 for exports
[INFO]     scanning feature jclouds-cloudfiles-uk for exports
[INFO]     scanning feature jclouds-cloudfiles-us for exports
[INFO]     scanning feature jclouds-cloudloadbalancers-us for exports
[INFO]     scanning feature jclouds-cloudonestorage for exports
[INFO]     scanning feature jclouds-cloudserver-uk for exports
[INFO]     scanning feature jclouds-cloudserver-us for exports
[INFO]     scanning feature jclouds-cloudsigma-zrh for exports
[INFO]     scanning feature jclouds-elastichosts-lon-b for exports
[INFO]     scanning feature jclouds-elastichosts-lon-p for exports
[INFO]     scanning feature jclouds-elastichosts-sat-p for exports
[INFO]     scanning feature jclouds-eucalyptus-s3 for exports
[INFO]     scanning feature jclouds-eucalyptus-ec2 for exports
[INFO]     scanning feature jclouds-gogrid for exports
[INFO]     scanning feature jclouds-go2cloud-jhb1 for exports
[INFO]     scanning feature jclouds-greenhousedata-element-vcloud for exports
[INFO]     scanning feature jclouds-ninefold-storage for exports
[INFO]     scanning feature jclouds-openhosting-east1 for exports
[INFO]     scanning feature jclouds-rimuhosting for exports
[INFO]     scanning feature jclouds-savvis-symphonyvpdc for exports
[INFO]     scanning feature jclouds-serverlove-z1-man for exports
[INFO]     scanning feature jclouds-skalicloud-sdg-my for exports
[INFO]     scanning feature jclouds-softlayer for exports
[INFO]     scanning feature jclouds-slicehost for exports
[INFO]     scanning feature jclouds-synaptic-storage for exports
[INFO]     scanning feature jclouds-stratogen-vcloud-mycloud for exports
[INFO]     scanning feature jclouds-trmk-ecloud for exports
[INFO]     scanning feature jclouds-trmk-vcloudexpress for exports
[INFO]     scanning feature jclouds-services for exports
[INFO]     scanning feature jclouds-commands for exports
[INFO] == Validating feature descriptor ==
[INFO]  - validating 105 features
[INFO]  - step 1: Checking if all artifacts exist
[INFO]     OK: all 500 OSGi bundles have been found
[INFO]  - step 2: Checking if all imports for bundles can be resolved
[INFO]     OK: imports resolved for xml-specs-api
[INFO]     OK: imports resolved for camel-core
[INFO]     OK: imports resolved for camel-spring
[INFO]     OK: imports resolved for camel
[INFO]     OK: imports resolved for camel-blueprint
[INFO]     OK: imports resolved for camel-test
[INFO]     OK: imports resolved for camel-context
[INFO]     OK: imports resolved for camel-cxf
[INFO]     OK: imports resolved for camel-cache
[INFO]     OK: imports resolved for camel-castor
[INFO]     OK: imports resolved for camel-crypto
[INFO]     OK: imports resolved for camel-http
[INFO]     OK: imports resolved for camel-http4
[INFO]     OK: imports resolved for camel-mina
[INFO]     OK: imports resolved for camel-mina2
[INFO]     OK: imports resolved for camel-jetty
[INFO]     OK: imports resolved for camel-servlet
[INFO]     OK: imports resolved for camel-jms
[INFO]     OK: imports resolved for camel-jmx
[INFO]     OK: imports resolved for camel-ahc
[INFO]     OK: imports resolved for camel-amqp
[INFO]     OK: imports resolved for camel-atom
[INFO]     OK: imports resolved for camel-aws
[INFO]     OK: imports resolved for camel-bam
[INFO]     OK: imports resolved for camel-bean-validator
[INFO]     OK: imports resolved for camel-bindy
[INFO]     OK: imports resolved for camel-cometd
[INFO]     OK: imports resolved for camel-csv
[INFO]     OK: imports resolved for camel-dozer
[INFO]     OK: imports resolved for camel-eventadmin
[INFO]     OK: imports resolved for camel-exec
[INFO]     OK: imports resolved for camel-flatpack
[INFO]     OK: imports resolved for camel-freemarker
[INFO]     OK: imports resolved for camel-ftp
[INFO]     OK: imports resolved for camel-guice
[INFO]     OK: imports resolved for camel-groovy
[INFO]     OK: imports resolved for camel-hazelcast
[INFO]     OK: imports resolved for camel-hawtdb
[INFO]     OK: imports resolved for camel-hdfs
[INFO]     OK: imports resolved for camel-hl7
[INFO]     OK: imports resolved for camel-ibatis
[INFO]     OK: imports resolved for camel-irc
[INFO]     OK: imports resolved for camel-jackson
[INFO]     OK: imports resolved for camel-jasypt
[INFO]     OK: imports resolved for camel-jaxb
[INFO]     OK: imports resolved for camel-jclouds
[INFO]     OK: imports resolved for camel-jcr
[INFO]     OK: imports resolved for camel-jing
[INFO]     OK: imports resolved for camel-jibx
[INFO]     OK: imports resolved for camel-jdbc
[INFO]     OK: imports resolved for camel-josql
[INFO]     OK: imports resolved for camel-jpa
[INFO]     OK: imports resolved for camel-jxpath
[INFO]     OK: imports resolved for camel-juel
[INFO]     OK: imports resolved for camel-kestrel
[INFO]     OK: imports resolved for camel-krati
[INFO]     OK: imports resolved for camel-ldap
[INFO]     OK: imports resolved for camel-lucene
[INFO]     OK: imports resolved for camel-mail
[INFO]     OK: imports resolved for camel-msv
[INFO]     OK: imports resolved for camel-mvel
[INFO]     OK: imports resolved for camel-mybatis
[INFO]     OK: imports resolved for camel-nagios
[INFO]     OK: imports resolved for camel-netty
[INFO]     OK: imports resolved for camel-ognl
[INFO]     OK: imports resolved for camel-paxlogging
[INFO]     OK: imports resolved for camel-printer
[INFO]     OK: imports resolved for camel-protobuf
[INFO]     OK: imports resolved for camel-quartz
[INFO]     OK: imports resolved for camel-quickfix
[INFO]     OK: imports resolved for camel-restlet
[INFO]     OK: imports resolved for camel-rmi
[INFO]     OK: imports resolved for camel-routebox
[INFO]     OK: imports resolved for camel-script
[INFO]     OK: imports resolved for camel-ruby
[INFO]     OK: imports resolved for camel-rss
[INFO]     OK: imports resolved for camel-saxon
[INFO]     OK: imports resolved for camel-scala
[INFO]     OK: imports resolved for camel-script-jruby
[INFO]     OK: imports resolved for camel-script-javascript
[INFO]     OK: imports resolved for camel-script-groovy
[INFO]     OK: imports resolved for camel-sip
[INFO]     OK: imports resolved for camel-shiro
[INFO]     OK: imports resolved for camel-smpp
[INFO]     OK: imports resolved for camel-snmp
[INFO]     OK: imports resolved for camel-soap
[INFO]     OK: imports resolved for camel-solr
[INFO]     OK: imports resolved for camel-spring-integration
[INFO]     OK: imports resolved for camel-spring-javaconfig
[INFO]     OK: imports resolved for camel-spring-security
[INFO]     OK: imports resolved for camel-spring-ws
[INFO]     OK: imports resolved for camel-sql
[INFO]     OK: imports resolved for camel-stax
[INFO]     OK: imports resolved for camel-stream
[INFO]     OK: imports resolved for camel-string-template
[INFO]     OK: imports resolved for camel-syslog
[INFO]     OK: imports resolved for camel-tagsoup
[INFO]     OK: imports resolved for camel-twitter
[INFO]     OK: imports resolved for camel-velocity
[WARNING] Failed to validate feature camel-websocket
[WARNING] No export found to match org.eclipse.jetty.websocket;version=""[7.0,8)"" (imported by mvn:org.apache.camel/camel-websocket/2.10-SNAPSHOT)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.190s]
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SUCCESS [8.200s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [3.677s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 15.020s
[INFO] Finished at: Sat Jan 14 17:09:24 CET 2012
[INFO] Final Memory: 16M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.5:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: 1 unresolved imports in feature camel-websocket -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :apache-camel
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223908,,,Sat Jan 14 17:45:00 UTC 2012,,,,,,,,,,,"0|i023rb:",10210,,,,,,,,,,,,,,,,,,,,"14/Jan/12 17:45;muellerc;I fixed this by adding explicitly the needed dependency from Jetty. I asked on the dev@karaf list why this dependency was not included (still not included) in the Karaf 2.2.x branch, but it's included in the current trunk.
I added a TODO in our features file to remove the dependency when it's provided in the Jetty feature by Karaf.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parameter binding not working with BeanExpression,CAMEL-4894,12538387,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,14/Jan/12 04:27,01/Mar/12 17:33,14/Jul/23 05:45,01/Mar/12 17:33,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,"The parameter [binding options|http://camel.apache.org/bean-binding.html] available in camel-2.9.0 do not work for BeanExpression. The reason is the fake ognl parser that gets confused about the syntax. We need to align the two scenarios and probably replace the ognl like parsing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223893,,,Sun Jan 15 16:49:52 UTC 2012,,,,,,,,,,,"0|i023qv:",10208,,,,,,,,,,,,,,,,,,,,"15/Jan/12 16:49;davsclaus;I took a look, its a minor bug in the OgnlHelper.splitOgnl method which did not take into account the new parameter binding syntax, which allows end users to specify methods having parenthesis defining the parameter binding. 

Fixing that makes the test work, (there is a error in the unit test as the method name is bar, not foo)
As well the expected result was wrong, so I simplified the unit test to return a fixed reply, and assert the input values.

Committed to trunk in rev 1231704, will backport to the 2.9 branch as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext autoStartup=false and starting context programmatically doesnt work,CAMEL-4892,12538331,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/12 15:41,13/Jan/12 15:46,14/Jul/23 05:45,13/Jan/12 15:46,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,0,,,,,,,,,If a <camelContext> is set to autoStartup=false and then later tried to start it via code or JMX doesn't start routes associated with it. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223837,,,2012-01-13 15:41:28.0,,,,,,,,,,,"0|i023qf:",10206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timed out Exchanges should be removed from seda queues,CAMEL-4882,12538003,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,11/Jan/12 01:10,16/Jan/12 08:02,14/Jul/23 05:45,11/Jan/12 04:21,2.9.0,,,,,,,,,,,,2.10.0,2.7.5,2.8.4,2.9.1,camel-core,,,,0,,,,,,,,,When the SedaProducer times out and stops waiting for an Exchange to be processed it should remove it from the queue as well. Same applies to the vm: component.,,,,,,,,,,,,,,,,,,,CAMEL-4901,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223509,,,2012-01-11 01:10:51.0,,,,,,,,,,,"0|i023o7:",10196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
API-breaking changes in Validator-component,CAMEL-4877,12537768,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hutchkintoot,hutchkintoot,09/Jan/12 14:55,19/Jan/12 07:13,14/Jul/23 05:45,19/Jan/12 05:35,2.9.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,1,,,,,,,,,"Hi, we tried to upgrade to 2.9.0 last week but ran into trouble when using the newly moved validator component. 

Before upgrading (running 2.8.0), having a root xsd that imported or included other xsd-files on the class-path was no problem for us. But upgrading to 2.9.0 breaks this functionality. Resulting in the following error 

{code}
...
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: validator://com/yyy/infra/applications/yyy-application/consumer/ws/consumer-report-request.xsd due to: src-resolve: Cannot resolve the name 'ns6:YyyReport' to a(n) 'element declaration' component.
...
{code}

I can see in the new documentation for the validator-component that there is an new property that you can set called *resourceResolver*. Given the name and the description of the interface LSResourceResolver my guess is that an implementation of that interface is required to get the old functionality back. 

I might be wrong, but to me this is API-breaking. It would be great if you could provide a ""defalut"" resourceResolver to mimic the old behavior since we rely a lot on the ability to compose schemas via includes or imports. 

",,dpascual80,gordonkl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jan/12 13:35;hutchkintoot;xsd-import_example.zip;https://issues.apache.org/jira/secure/attachment/12510837/xsd-import_example.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223274,,,Thu Jan 19 07:13:17 UTC 2012,,,,,,,,,,,"0|i023n3:",10191,,,,,,,,,,,,,,,,,,,,"15/Jan/12 15:30;davsclaus;Can you attach a little example of this, such as the template file which refer to the other template. Just to be sure, so we can use that for an unit test.;;;","16/Jan/12 11:40;hutchkintoot;attatched simple maven project. Just switch the pom-property camel.version between 2.9.0 and 2.8.0 to verify the difference in behaviour.;;;","17/Jan/12 13:20;davsclaus;Johan, can you re-attach the example, and grant [x] in give license to Apache (or what the checkbox says). We need this due legal, to be able to use any of your work/example for fixing this. 

The attached file should have an Apache feather at the icon logo.;;;","17/Jan/12 13:35;hutchkintoot;Attached file again with flag.;;;","19/Jan/12 05:35;davsclaus;Thanks for reporting. Your use-case works now in an unit test.;;;","19/Jan/12 07:13;hutchkintoot;Thanks Claus! Looking forward to 2.9.1.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Route Info Command Exchange Date NPE,CAMEL-4872,12537624,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sully6768,sully6768,07/Jan/12 04:45,17/Jan/12 15:14,14/Jul/23 05:45,17/Jan/12 15:14,2.10.0,2.8.3,2.9.0,,,,,,,,,,2.10.0,2.9.1,,,karaf,,,,0,,,,,,,,,"Executing the camel:info-route/camel:route-info against a route that hasn't processed an exchange will throw an NPE due to First Exchange Date and Last Exchange Completed Date are null.

Patch is forthcoming.

Thanks,
Scott ES",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jan/12 14:22;sully6768;CAMEL-4872-trunk.patch;https://issues.apache.org/jira/secure/attachment/12510838/CAMEL-4872-trunk.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223130,,,Tue Jan 17 14:23:44 UTC 2012,,,,,,,,,,,"0|i023lz:",10186,,,,,,,,,,,,,,,,,,,,"07/Jan/12 04:47;sully6768;Patch to check for nulls on exchange dates;;;","07/Jan/12 05:53;sully6768;patch for 2.9.x;;;","07/Jan/12 05:54;sully6768;patch for 2.8.x;;;","09/Jan/12 13:59;davsclaus;I wonder if we should not just print an empty string when there is no data?

I am just guessing here, what if people start hacking perl scripts that executes ssh to access karaf and invoke this command, and then grab the result stream, and then parse the text. All in the good spirit to gather stats from a non-Java world ;)


;;;","17/Jan/12 13:21;davsclaus;Scott, if you got a bit of time, then a new patch would be nice. Would be good to have this fixed, before we start consider cutting a new release of any of the Camel branches.;;;","17/Jan/12 14:22;sully6768;Updated patch for trunk with empty output per Claus.;;;","17/Jan/12 14:23;sully6768;Hey Claus,

I have uploaded a new patch with the changes you asked for.

Best Regards,
Scott ES
http://fusesource.com;;;",,,,,,,,,,,,,,,,,,,,,,,
"Request with Content-Type= application/x-www-form-urlencoded  throws ""Cannot read request parameters due Invalid parameter, expected to be a pair but was "" when body is empty.",CAMEL-4871,12537602,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,amit1000,amit1000,06/Jan/12 21:56,12/Mar/12 20:26,14/Jul/23 05:45,28/Feb/12 16:05,2.8.0,,,,,,,,,,,,2.10.0,2.9.1,,,camel-http,,,,0,,,,,,,,,"ISSUE
-----------
When CAMEL Servlet component receiving request with Content-Type= application/x-www-form-urlencoded. as below it throws Cannot read request parameters due Invalid parameter, expected to be a pair but was "" when body is empty.

Request
------------
<html>
    </head>

    <body>
        <form method=""post"" action=""http://test/assertionConsumer/1.0"">
          <div>
            <input type=""hidden"" name=""ID"" value=""fim page"" />
            <input type=""hidden"" name=""RelayState"" value=""http://dev.ecosys.com?count=id-afc417c792b413bd0208e2f7454fd030"" />
            <input type=""hidden"" name=""SAMLResponse"" value=""PHNhbWxwOlJlc3="" />
          </div>
        </form>
        <span id=""user_msg""></span>
        <script type=""text/javascript"">sso();</script>
    </body>
</html>

RESOLUTION
-------------
Added defensive check, body is not null and not blank, to avoid Invalid parameter exception. I've updated org.apache.camel.component.http.DefaultHttpBinding class for that.


// Push POST form params into the headers to retain compatibility
			// with DefaultHttpBinding
			String body = message.getBody(String.class);
			//Added defensive check, body is not null and not blank, to avoid Invalid parameter exception. ( My changes)
			if (body != null && !body.equals("""")) {
				for (String param : body.split(""&"")) {
					String[] pair = param.split(""="", 2);
					if (pair.length == 2) {
						String name = URLDecoder.decode(pair[0], charset);
						String value = URLDecoder.decode(pair[1], charset);
						if (headerFilterStrategy != null
								&& !headerFilterStrategy
										.applyFilterToExternalHeaders(name,
												value, message.getExchange())) {
							HttpHelper.appendHeader(headers, name, value);
						}
					} else {
						throw new IllegalArgumentException(
								""Invalid parameter, expected to be a pair but was ""
										+ param);
					}
				}
			}

",,amit1000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Mar/12 20:20;amit1000;DefaultHttpBinding.java;https://issues.apache.org/jira/secure/attachment/12518075/DefaultHttpBinding.java","06/Jan/12 22:08;amit1000;DefaultHttpBinding.java;https://issues.apache.org/jira/secure/attachment/12509723/DefaultHttpBinding.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223108,,,Mon Mar 12 20:20:15 UTC 2012,,,,,,,,,,,"0|i023lr:",10185,,,,,,,,,,,,,,,,,,,,"11/Jan/12 20:49;amit1000;We need new release to resolve this issue.;;;","24/Feb/12 15:52;davsclaus;Amit, can you re-attach the file attachments and mark [x] in grant license to Apache. Otherwise we cannot use your work.;;;","28/Feb/12 16:05;davsclaus;I fixed this using not empty check, on the camel-http and camel-http4 components.;;;","12/Mar/12 20:20;amit1000;Please find the re-attached file with mark[x] in grant license to Apache. Thanks for you help!!! ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Attachments is not propagated in the template components such as camel-stringtemplate,CAMEL-4870,12537547,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,davsclaus,davsclaus,06/Jan/12 17:17,07/Jan/12 14:49,14/Jul/23 05:45,07/Jan/12 14:49,2.7.3,,,,,,,,,,,,2.10.0,2.7.5,2.8.4,2.9.1,camel-freemarker,camel-stringtemplate,camel-velocity,,0,,,,,,,,,"In the StringTemplateEndpoint we should propagate attachments as well, currently its only the headers.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,223053,,,Sat Jan 07 14:48:40 UTC 2012,,,,,,,,,,,"0|i023lj:",10184,,,,,,,,,,,,,,,,,,,,"06/Jan/12 17:18;davsclaus;See nabble
http://camel.465427.n5.nabble.com/How-to-send-a-templated-mail-with-attachment-tp5125167p5125167.html;;;","07/Jan/12 12:31;muellerc;Committed into trunk with r1228603;;;","07/Jan/12 12:37;muellerc;Committed into branch 2.9.x with r1228606;;;","07/Jan/12 14:42;muellerc;Committed into branch 2.8.x with r1228623;;;","07/Jan/12 14:48;muellerc;Committed into branch 2.7.x with r1228626;;;",,,,,,,,,,,,,,,,,,,,,,,,,
xpath expression with $header with saxon may throw exception if header did not exist,CAMEL-4858,12537143,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jan/12 07:15,04/Jan/12 08:26,14/Jul/23 05:45,04/Jan/12 08:24,2.8.3,2.9.0,,,,,,,,,,,2.7.5,2.8.4,2.9.1,,camel-core,camel-saxon,,,0,,,,,,,,,"See CAMEL-747

We should return an empty String instead of a Void.class, as this works with both JDK + Saxon XPathEngine.
Saxon does not work with the Void.class.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,222653,,,Wed Jan 04 08:26:36 UTC 2012,,,,,,,,,,,"0|i023iv:",10172,,,,,,,,,,,,,,,,,,,,"04/Jan/12 08:26;davsclaus;The workaround is to not use $headerName but a Camel function, using the Camel function namespace, to use the header function.

See details at: http://camel.apache.org/xpath;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoint URI normalization: information in path is lost,CAMEL-4857,12537080,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,azarov,azarov,03/Jan/12 17:08,02/May/13 02:29,14/Jul/23 05:45,25/Sep/12 06:48,2.9.0,,,,,,,,,,,,2.11.0,,,,camel-core,,,,0,,,,,,,,,"A project with a test case is here: https://github.com/alaz/camel290_uri

The test case with the problem description (the problem occured during migration of camel-beanstalk https://github.com/osinka/camel-beanstalk component onto 2.9.0):

{code:title=UriTest.java}
package camel290.uri;

import java.util.Map;
import org.apache.camel.Consumer;
import org.apache.camel.Endpoint;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.impl.DefaultComponent;
import org.apache.camel.impl.DefaultEndpoint;
import org.apache.camel.test.CamelTestSupport;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class UriTest extends CamelTestSupport {

  /**
   * An URI of Camel Beanstalk component consists of a hostname, port and a list
   * of tube names. Tube names are separated by ""+"" character (which is more or less
   * usualy used on the Web to make lists), but every tube name may contain URI special
   * characters like ? or +
   */

  class MyEndpoint extends DefaultEndpoint {
    String uri = null;
    String remaining = null;

    public MyEndpoint(final String uri, final String remaining) {
      this.uri = uri;
      this.remaining = remaining;
    }

    public Producer createProducer() throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public Consumer createConsumer(Processor prcsr) throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public boolean isSingleton() {
      return true;
    }
  }

  class MyComponent extends DefaultComponent {
    @Override
    protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {
      return new MyEndpoint(uri, remaining);
    }
  }

  @Before
  @Override
  public void setUp() throws Exception {
    super.setUp();
    context.addComponent(""my"", new MyComponent());
  }

  @Test
  public void testExclamationInUri() {
    /**
     * %3F is not an ?, it's part of tube name.
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B+tube%3F"", MyEndpoint.class);
    assertNotNull(""endpoint"", endpoint);
  }

  @Test
  public void testPath() {
    /**
     * Here a tube name is ""tube+"" and written in URI as ""tube%2B"", but it gets
     * normalized, so that an endpoint sees ""tube1+tube+""
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B"", MyEndpoint.class);
    assertEquals(""Path contains several tube names, every tube name may have + or ? characters"", ""host:11303/tube1+tube%2B"", endpoint.remaining);
  }
}
{code} ",,azarov,bvahdat,davsclaus,hadrian,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5420,,"14/Sep/12 10:57;davsclaus;CAMEL-4857.patch;https://issues.apache.org/jira/secure/attachment/12545133/CAMEL-4857.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,222590,,,Tue Sep 25 06:48:43 UTC 2012,,,,,,,,,,,"0|i023in:",10171,,,,,,,,,,,,,,,,,,,,"04/Jan/12 08:55;njiang;The issue is caused by CAMEL-4425, now camel is try to turn the encoded uri string to be a normalized one. That is why the ""%2B"" is changed to ""+"", ""%3F"" is changed to ""?"" at the end.

It think we need to find a way to resolve the issue of using unsafe uri code in camel uri. 

Willem

;;;","19/Jan/12 06:33;davsclaus;CAMEL-4256 is the real cause. It is too restrictive in terms of URI flexibility. We need to open up this so the component writers have the power back again, and can totally decide how to handle uri's in their components.;;;","19/Jan/12 08:05;davsclaus;I noticed that CAMEL-4256 or thereabouts also broke some previous URI validation. For example we have a check for double ampersand, that is now being normalized into an empty parameter """" -> null. ;;;","04/Jun/12 19:18;hadrian;I beg to differ.

The question is not if Camel is too restrictive, but rather if camel uses URIs or not. What a URI is and isn't is clearly defined by a spec. The changes for CAMEL-4256 were intended to still support the invalid uris we now use in Camel and provide a migration path for 3.0. If some scenarios were missed, that can be fixed.

However the question still remains, does Camel use URIs or not? Today, I wouldn't know how to define the concept of URI flexibility. I totally agree that that component writers should have complete control on how to handle URIs but those should be URIs to start with. That's not the case today, is it?;;;","04/Jun/12 21:01;bvahdat;IMHO the *CORE* question should not be if Camel uses URIs correctly or not but more important than that if Camel is *REALLY* 100% backward-compatible by it's minor releases which to my understanding is much much more important than to be 100% IETF RFC_XYZ complaint.

In this concrete case the user reporting this issue (on Jan. 3rd) was struggling to upgrade to a newer Camel version a day before (on Jan. 2nd) which then ended up with:
https://plus.google.com/103504600126086444972/posts/5q1aFtYLryi

@Alexander please correct me if I'm wrong.

Anyway, I think this's really sad :-(;;;","04/Jun/12 21:51;hadrian;@Babak,

Although we never were 100% backward compatible in minor releases, the intent is to be 100% backwards compatible. The incompatibility only crept in, I believe, because there are no unit tests for enough variations of URIs. When the changes got committed all the tests passed and it's not like existing tests were deleted or we introduced incompatibilities on purpose. We do strive to be 100% backwards compatible on patch releases though and we are, with very rare exceptions.

I was the one publishing that release, and believe it or not, vanity wasn't among the reasons. Sad? Maybe. I have a long list myself. 

That said, I totally agree that the the camel-core should be more stable and less incompatibilities should be introduced on minor releases. We can discuss on dev@ if and how this could be achieved.
;;;","05/Jun/12 07:30;azarov;[~bvahdat], please do not build your proofs based on my old emotions. In the end of a day, I'm rational in my decisions.

I perfectly understand every release may bring some bugs. [~hadrian] explains there were incomplete test coverage of URIs.

I still wonder why no Camel users have been affected by the same issue, since URI is the main transport of transmitting settings into Camel components. Anyway (a) the number of camel-beanstalk component users is very small and no one complained; (b) the number of voters/watchers of this issue shows no significant interest. Hence, if nobody needs it, it seems logical to postpone the fix.;;;","05/Jun/12 09:14;bvahdat;@Alexander I'm absolutely aware of the fact that through providing that link I did abash you, I'm REALLY sorry for that and please accept my apologies  :-(

However my ONLY INTENTION was to show how frustrating an update could be, that's it! IMHO we had better postponed these URI issues and discussions for the Camel 3 roadmap to AVOID taking any risks and also breaking the existing behaviour given through the minor releases.;;;","07/Jun/12 22:04;muellerc;I will go through this until end of this week...;;;","14/Sep/12 10:57;davsclaus;A patch which allows component writers to control if the uri should be raw or encoded (default as now). 
;;;","25/Sep/12 06:48;davsclaus;Introduced {{useRawUri}} method to {{Component}} which gives component writers full power.;;;",,,,,,,,,,,,,,,,,,,
BAM - database constraint violation when restaring application,CAMEL-4854,12537045,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcin84,marcin84,03/Jan/12 13:04,03/Jan/12 17:03,14/Jul/23 05:45,03/Jan/12 17:03,2.8.2,,,,,,,,,,,,2.8.4,2.9.1,,,camel-bam,,,,0,,,,,,,,,"Take BAM example from http://camel.apache.org/bam-example.html  (or any other one, it doesn't matter).

Here is the one I'm using:

        ActivityBuilder request = activity(""eaiBroker:topic:SOME_TOPIC?concurrentConsumers=1"").name(""Request"")
                .correlate(xpath(""/MessageRequest/@Id"").stringResult());

        ActivityBuilder response = activity(""eaiBroker:topic:SOME_OTHER_TOPIC?concurrentConsumers=1"").name(""Response"")
                .correlate(xpath(""MessageResponse/@Id"").stringResult());

        response
                .starts().after(request.completes())
                .expectWithin(seconds(15))
                .errorIfOver(seconds(30))
                .to(""log:com.eai?level=error"");



 First run of the application and everything works. Restart application and try to activate one of BAM rules, there will be an exception that database constraint has been violated. Every time application is started, Camel tries to do following sql insert

insert into CAMEL_ACTIVITYDEFINITION (name, processDefinition_id, id) values (?, ?, ?)

but name columne must be unique in CAMEL_ACTIVITYDEFINITION .


Workaround for this is to purge BAM tables every time you want to restart the application, but it's not a solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,222555,,,Tue Jan 03 17:03:19 UTC 2012,,,,,,,,,,,"0|i023hz:",10168,,,,,,,,,,,,,,,,,,,,"03/Jan/12 14:24;marcin84;I tried to solve on my own, and the problem occurs because of invalid XML configuration. The BAM example that is in binary distribution 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <property name=""jpaTemplate"" ref=""jpaTemplate""/>
        <property name=""transactionTemplate"" ref=""transactionTemplate""/>
    </bean>

should be changed to 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <constructor-arg><ref bean=""jpaTemplate""/></constructor-arg>
        <constructor-arg><ref bean=""transactionTemplate""/></constructor-arg>
    </bean>

Second version calls valid constructor for ProcessBuilder which creates ProcessName. The first one leaves process name as null.;;;","03/Jan/12 17:03;davsclaus;I fixed the ProcessBuilder in camel-bam to create the processor name if not explicit configured.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ftp consumer - NPE if using 2 slashes as starting directory,CAMEL-4850,12536787,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,02/Jan/12 10:08,02/Jan/12 10:51,14/Jul/23 05:45,02/Jan/12 10:51,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.1,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Continuation-of-NPE-for-FTP-endpoint-tp5107992p5107992.html

The workaround is to not use double slashes.

This may also affect using a root as absolute path for FTP consumer, as the starting directory will be interpreted as empty.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,222470,,,2012-01-02 10:08:21.0,,,,,,,,,,,"0|i023h3:",10164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ProducerCache from CamelContext service list when shutting down a route,CAMEL-4842,12536659,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Dec/11 13:35,05/Jan/12 11:11,14/Jul/23 05:45,05/Jan/12 11:11,2.8.3,2.9.0,,,,,,,,,,,2.10.0,2.8.4,2.9.1,,camel-core,,,,0,,,,,,,,,"If people add routes dynamic and remove the routes later on, we need to remove services which may have been added to the CamelContext services list. For example the ProducerCache by SendProcessor etc.

This will ensure that the ProducerCache can be GC'ed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,222342,,,Thu Jan 05 10:09:26 UTC 2012,,,,,,,,,,,"0|i023fb:",10156,,,,,,,,,,,,,,,,,,,,"30/Dec/11 13:35;davsclaus;See nabble
http://camel.465427.n5.nabble.com/ProducerCache-memory-leak-tp5108206p5108206.html;;;","04/Jan/12 14:07;davsclaus;When using route scoped onException in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown.;;;","04/Jan/12 15:16;davsclaus;Fixed the route scoped onException issue;;;","05/Jan/12 10:09;davsclaus;When using route scoped onCompletion in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
URISupport: URI normalization duplicates query if path is empty,CAMEL-4841,12536588,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,koscejev,koscejev,29/Dec/11 16:00,30/Dec/11 08:49,14/Jul/23 05:45,30/Dec/11 08:49,2.8.3,,,,,,,,,,,,2.10.0,2.7.5,2.8.4,,camel-core,,,,0,,,,,,,,,"URI with empty path, but non-empty query part is not properly normalized. The query part is in fact duplicated. E.g, URI ""foobar://?foo=1&bar=2"" is incorrectly normalized to ""foobar://?foo=1&bar=2?bar=2&foo=1"".

This is caused by incorrect identification of the path part in org.apache.camel.util.URISupport.normalizeUri(String):
        int idx = path.indexOf('?');
        if (idx > 0) {
            path = path.substring(0, idx);
        }

The comparison of ""idx > 0"" is incorrect, because this way, if '?' is the first character, the path is not set to empty string. The correct comparison should be ""idx > -1"" or ""idx >= 0"" or even just ""idx != -1"" since that's the only value that String.indexOf returns when the character is not found.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,222271,,,Fri Dec 30 08:49:09 UTC 2011,,,,,,,,,,,"0|i023f3:",10155,,,,,,,,,,,,,,,,,,,,"30/Dec/11 08:49;njiang;Applied patch into trunk, camel-2.8.x, camel-2.7.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xml-spec-api feature should reference woodstox bundle,CAMEL-4828,12536312,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,23/Dec/11 20:25,24/Dec/11 06:56,14/Jul/23 05:45,24/Dec/11 06:56,2.8.3,,,,,,,,,,,,2.8.4,2.9.0,,,karaf,,,,0,,,,,,,,,"Several Camel features uses javax.xml.stream. If ServiceMix Spec provides the API, it doesn't provide an implementation.

The xml-specs-api feature should ship an implementation, woodstox.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221995,,,Sat Dec 24 06:56:05 UTC 2011,,,,,,,,,,,"0|i023c7:",10142,,,,,,,,,,,,,,,,,,,,"24/Dec/11 06:33;jbonofre;Fixed on trunk: revision 1222919.;;;","24/Dec/11 06:56;jbonofre;Fixed on camel-2.8.x: revision 1222924.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jibx/camel-xstream features required woodstox dependency,CAMEL-4819,12536208,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 20:36,26/Dec/11 16:55,14/Jul/23 05:45,23/Dec/11 20:20,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.0,,,camel-jibx,camel-xstream,karaf,,0,,,,,,,,,"The camel-jibx and camel-xstream features don't install out of the box:
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.dom4j/1.6.1_4 in feature(s) camel-xstream-2.9-SNAPSHOT, camel-jibx-2.9-SNAPSHOT: Unresolved constraint in bundle org.apache.servicemix.bundles.dom4j [65]: Unable to resolve 65.0: missing requirement [65.0] package; (&(package=javax.xml.stream)(version>=1.0.0)(!(version>=2.0.0)))

camel-jibx feature has a dependency to ServiceMix dom4j bundle.

This bundle requires javax.xml.stream (provided by woodstox).",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221891,,,Mon Dec 26 16:55:04 UTC 2011,,,,,,,,,,,"0|i023a7:",10133,,,,,,,,,,,,,,,,,,,,"23/Dec/11 20:01;jbonofre;Fixed on trunk: revision 1222821.;;;","23/Dec/11 20:17;jbonofre;Fixed on camel-2.8.x: revision 1222825.;;;","24/Dec/11 10:46;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream;;;","24/Dec/11 13:48;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:


Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream ;;;","26/Dec/11 16:55;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx 



Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs/camel-soap features require JAXB definition,CAMEL-4818,12536205,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 20:11,26/Dec/11 16:47,14/Jul/23 05:45,23/Dec/11 16:21,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.0,,,camel-hdfs,karaf,,,0,,,,,,,,,"The camel-hdfs and camel-soap features don't install out of the box:

Error executing command: Could not start bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxws-api-2.2/1.9.0 in feature(s) camel-soap-2.9-SNAPSHOT, camel-hdfs-2.9-SNAPSHOT, cxf-specs-2.5.1: Unresolved constraint in bundle org.apache.servicemix.specs.jaxws-api-2.2 [88]: Unable to resolve 88.0: missing requirement [88.0] package; (&(package=javax.xml.bind)(version>=2.2.0))

The ServiceMix JAXWS specs require a JAXB 2.2.x implementation available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221888,,,Mon Dec 26 16:47:50 UTC 2011,,,,,,,,,,,"0|i0239z:",10132,,,,,,,,,,,,,,,,,,,,"22/Dec/11 23:24;muellerc;It's a indirect dependency from camel-hdfs, it's a direct dependency from camel-soap on which camel-hdfs depends.;;;","23/Dec/11 15:57;jbonofre;Fixed on trunk: revision 1222709.;;;","23/Dec/11 16:20;jbonofre;Fixed on camel-2.8.x: revision 1222723.;;;","24/Dec/11 10:56;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs 


Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-soap;;;","24/Dec/11 13:50;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-soap 

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs;;;","26/Dec/11 16:47;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-soap



Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs 
2011-12-26 17:43:29.653:INFO:oejs.Server:jetty-7.5.4.v20111024
2011-12-26 17:43:29.672:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8181 STARTING
2011-12-26 17:43:29.805:INFO:oejsh.ContextHandler:started HttpServiceContext{httpContext=DefaultHttpContext{bundle=org.apache.karaf.deployer.features [34]}}

;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-atom/camel-rss feature doesn't work,CAMEL-4815,12536166,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 15:15,26/Dec/11 16:50,14/Jul/23 05:45,23/Dec/11 17:57,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.0,,,camel-atom,camel-rss,karaf,,0,,,,,,,,,"camel-atom feature defines a dependency to abdera-core, which require woodstox dependency:

Error executing command: Could not start bundle mvn:org.apache.abdera/abdera-core/1.1.2 in feature(s) camel-atom-2.9.0, cxf-abdera-2.5.1: Unresolved constraint in bundle org.apache.abdera.core [62]: Unable to resolve 62.0: missing requirement [62.0] package; (&(package=javax.xml.stream)(version>=1.0.0)(!(version>=2.0.0)))
",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221849,,,Mon Dec 26 16:50:21 UTC 2011,,,,,,,,,,,"0|i0239b:",10129,,,,,,,,,,,,,,,,,,,,"23/Dec/11 17:35;jbonofre;Fixed on trunk: revision 1222765.;;;","23/Dec/11 17:57;jbonofre;Fixed on camel-2.8.x: revision 1222769.;;;","24/Dec/11 10:41;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom;;;","24/Dec/11 13:44;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-atom

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-rss;;;","26/Dec/11 16:50;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom


Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-rss;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-servlet feature doesn't work,CAMEL-4812,12536086,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,muellerc,muellerc,21/Dec/11 21:02,22/Dec/11 15:53,14/Jul/23 05:45,22/Dec/11 15:53,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.0,,,camel-servlet,karaf,osgi,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-servlet
Error executing command: Could not start bundle mvn:org.apache.camel/camel-servlet/2.9.0 in feature(s) camel-servlet-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-servlet [80]: Unable to resolve 80.0: missing requirement [80.0] package; (&(package=org.osgi.service.http)(version>=1.2.0)(!(version>=2.0.0)))


We have to install the Karaf http feature first.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221769,,,Thu Dec 22 15:53:08 UTC 2011,,,,,,,,,,,"0|i0238n:",10126,,,,,,,,,,,,,,,,,,,,"22/Dec/11 08:35;njiang;we could add the dependency of karaf http feature to resolved this kind of issue.;;;","22/Dec/11 09:32;jbonofre;+1, we should add a feature dependency to Karaf http.;;;","22/Dec/11 09:52;muellerc;+1
This is what I proposed in my issue description.;;;","22/Dec/11 15:49;jbonofre;Willem fixed it on trunk: revision 1222139.;;;","22/Dec/11 15:53;jbonofre;And Dan merged it on camel-2.8.x: revision 1222282.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-ognl featues doesn't work,CAMEL-4811,12536084,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Dec/11 20:49,22/Dec/11 17:51,14/Jul/23 05:45,22/Dec/11 17:51,2.9.0,,,,,,,,,,,,2.9.0,,,,osgi,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-ognl 
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.ognl/3.0.2_1 in feature(s) camel-ognl-2.9.0: The bundle ""org.apache.servicemix.bundles.ognl_3.0.2.1 [59]"" could not be resolved. Reason: Missing Constraint: Import-Package: javassist; version=""[3.11.0,4.0.0)""

In our parent/pom.xml we define
<javassist-bundle-version>3.9.0.GA_1</javassist-bundle-version>
which doesn't fit the import range",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221767,,,Wed Dec 21 22:02:57 UTC 2011,,,,,,,,,,,"0|i0238f:",10125,,,,,,,,,,,,,,,,,,,,"21/Dec/11 21:55;muellerc;I will upgrade to javassist bundle 3.12.1.GA_2 which is the latest one SMX provides;;;","21/Dec/11 22:02;muellerc;We do not have this problem in camel-2.8.x;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-eventadmin do not work,CAMEL-4810,12536071,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Dec/11 19:11,22/Dec/11 18:28,14/Jul/23 05:45,22/Dec/11 17:52,2.9.0,,,,,,,,,,,,2.8.4,2.9.0,,,osgi,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-eventadmin
Error executing command: Could not start bundle mvn:org.apache.camel/camel-eventadmin/2.9.0 in feature(s) camel-eventadmin-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-eventadmin [59]: Unable to resolve 59.0: missing requirement [59.0] package; (&(package=org.osgi.service.event)(version>=1.2.0)(!(version>=2.0.0)))

We have to install the feature eventadmin (from Karaf) first",,,,,,,,,,,,,,,,,,,CAMEL-4816,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221754,,,2011-12-21 19:11:26.0,,,,,,,,,,,"0|i02387:",10124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throttler and Delay EIP will invoke done callback twice if using async delayed,CAMEL-4795,12535669,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/11 08:50,19/Dec/11 12:39,14/Jul/23 05:45,19/Dec/11 12:39,2.7.4,2.8.3,,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-core,,,,0,,,,,,,,,"If using async delayed on Throttler or Delay EIP, then a 2nd done on the callback is invoked, which should not happen. As the Camel routing engine, is invoking the done as well.

The 2nd done can cause what would appear as a routing error as a NPE occurs in the error handler, as the exchange is already done, and some cleanup work have occurred.
{code}
java.lang.NullPointerException
	at org.apache.camel.processor.RedeliveryErrorHandler.processAsyncErrorHandler(RedeliveryErrorHandler.java:387)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:336)
	at org.apache.camel.processor.interceptor.Debug$1$1.done(Debug.java:56)
	at org.apache.camel.processor.interceptor.TraceInterceptor$1.done(TraceInterceptor.java:188)
	at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:307)
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221353,,,2011-12-19 08:50:11.0,,,,,,,,,,,"0|i0234v:",10109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
After restarting route a camel-quartz component fires right away (and it shouldn't),CAMEL-4794,12535649,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,19/Dec/11 03:43,20/Dec/11 00:52,14/Jul/23 05:45,20/Dec/11 00:52,2.8.3,,,,,,,,,,,,2.8.4,2.9.0,,,camel-quartz,,,,0,,,,,,,,,"I am adding a new QuartzRouteRestartTest that demonstrates this issue. Not only a message is fired right after restart, but the scheduled times are messed up as well. I tried to keep the fire interval as low as possible, but it has to be large enough to demonstrate the problem. So I went down to 0/5 (fire every five sec), but it's more obvious with 0/10 or 0/15, the trigger starts firing at the wrong time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221333,,,Tue Dec 20 00:52:41 UTC 2011,,,,,,,,,,,"0|i0234n:",10108,,,,,,,,,,,,,,,,,,,,"19/Dec/11 13:01;bvahdat;The newly introduced QuartzRouteRestartTest unit-test breaks the checkstyle (the checkstyle-error-messages on my box are in german and not english):

{code}
[INFO] Starting audit...
D:\Data\eclipse-workspace\camel\components\camel-quartz\src\test\java\org\apache\camel\component\quartz\QuartzRouteRestartTest.java:61:41: 'DONE' entspricht nicht dem Muster '^[a-z][a-zA-Z0-9]*$'.
D:\Data\eclipse-workspace\camel\components\camel-quartz\src\test\java\org\apache\camel\component\quartz\QuartzRouteRestartTest.java:61:41: Variable 'DONE' wird explizit mit 'false' initialisiert (Defaultwert für ihren Typ).
Audit done.
{code};;;","20/Dec/11 00:52;hadrian;Checkstyle fixed as well;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using the CamelContext.stopRoute(routeId) should not remove the route from context,CAMEL-4790,12535559,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Dec/11 08:03,19/Dec/11 13:21,14/Jul/23 05:45,19/Dec/11 13:21,2.8.3,,,,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,0,,,,,,,,,"Christian reported a camel route stop issue few months ago[1], I found this bug by running the unit test he submit.
{code}
public class RouteRemoveTest extends ContextTestSupport {
 
+    public void testStopRouteOnContext() throws Exception {
+        assertEquals(ServiceStatus.Started, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
+        assertEquals(ServiceStatus.Started, context.getRouteStatus(""foo""));
+        
+        context.stopRoute(""foo"");
+        
+        assertEquals(ServiceStatus.Stopped, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
+        assertEquals(ServiceStatus.Stopped, context.getRouteStatus(""foo""));
+    }
{code}

The route foo should not be removed from the camelContext.
[1] http://camel.465427.n5.nabble.com/Stop-a-route-for-unit-testing-tt4724550.html#a5011082

",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221243,,,Mon Dec 19 13:21:10 UTC 2011,,,,,,,,,,,"0|i0233r:",10104,,,,,,,,,,,,,,,,,,,,"17/Dec/11 14:16;davsclaus;Willem is this an issue in Camel 2.8.x as well? If so please backport the fix.;;;","17/Dec/11 14:41;njiang;committed the patch into trunk and 2.8.x branch.;;;","17/Dec/11 14:42;njiang;@Claus,
I just committed the backport fix of Camel 2.8.x after resolving some network connect issue.;;;","17/Dec/11 18:12;muellerc;I added the second unit test I provided and it still fails:

{code:java}
public void testStopRouteOnRoute() throws Exception {
    assertEquals(ServiceStatus.Started, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
    assertEquals(ServiceStatus.Started, context.getRouteStatus(""foo""));

    ((DefaultRoute) context.getRoute(""foo"")).stop();

    assertEquals(ServiceStatus.Stopped, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
    assertEquals(ServiceStatus.Stopped, context.getRouteStatus(""foo""));
}
{code}

Do I something stupid?;;;","18/Dec/11 00:49;njiang;Hi Christian

I was planing to send a mail for the second unit test but it takes me too much time to merge the patch due to the network issue.

Here is my explanation for it, because Camel is using the RouteService to delegate the life cycle invocation, it is also in charge of do some clean up work with the CamelContext. If you just stop the route directly without through the CamelContext API, you will face a issue that the RouteService can not has the same status of the Route.
So my suggestion is you should use the CamelContext API instead of stop the route directly.

We should consider not expose the Route itself to client to use in Camel 3.0.
  
;;;","18/Dec/11 07:49;davsclaus;I have added javadoc notes to the API to document how to properly control the lifecycle of the routes, eg use the API from CamelContext.;;;","18/Dec/11 12:29;muellerc;Should we deprecate the methods (context.getRoute(String), context.getRoutes(), ...)?;;;","19/Dec/11 13:21;davsclaus;No we should not deprecate those methods, as end users should be able to get the Route instance if they need.

Its just the lifecycle of the routes is best handled using the API from CamelContext to ensure graceful shutdown, and whatnot.;;;",,,,,,,,,,,,,,,,,,,,,,
Wrapped RouteContextProcessor could potential rewrap and cause an ever growing processor path,CAMEL-4787,12535463,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,davsclaus,davsclaus,16/Dec/11 14:33,16/Dec/11 14:35,14/Jul/23 05:45,16/Dec/11 14:35,2.9.0,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"There is a problem in the UnitOfWork processor that wraps using a RouteContextProcessor, where the latter is used to track the current route the exchange is being routed. Unfortunately the wrapping may re-wrap itself, causing every growing processor paths.

{code}
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221147,,,2011-12-16 14:33:59.0,,,,,,,,,,,"0|i02333:",10101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws can allow SNAPSHOT transitive dependencies,CAMEL-4785,12535394,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,16/Dec/11 00:20,17/Dec/11 08:58,14/Jul/23 05:45,16/Dec/11 00:21,2.9.0,,,,,,,,,,,,2.9.0,,,,,,,,0,,,,,,,,,The camel-aws component depends on aws-java-sdk which has several dependencies defined using version ranges. The problem with version ranges is that they can introduce SNAPSHOT versions if they are available on your system which is not so good... in my case I had this http://download.java.net/maven/2/com/sun/mail/javax.mail/1.4.5-SNAPSHOT/javax.mail-1.4.5-SNAPSHOT.jar jar in my local repo so camel-aws promptly used that SNAPSHOT lib.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,221078,,,Fri Dec 16 00:21:37 UTC 2011,,,,,,,,,,,"0|i0232n:",10099,,,,,,,,,,,,,,,,,,,,"16/Dec/11 00:21;janstey;[janstey@duffman camel-aws]$ svn ci -m ""CAMEL-4785 - lock down versions of dependencies coming from aws sdk""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1215000.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Hazelcast Map consumer does not properly create an Exchange.,CAMEL-4776,12535118,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,14/Dec/11 09:02,14/Dec/11 10:08,14/Jul/23 05:45,14/Dec/11 10:08,,,,,,,,,,,,,2.9.0,,,,,,,,0,,,,,,,,,"The Hazelcast map consumer, when creating an Exchange fills the out message, instead of the in message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220802,,,2011-12-14 09:02:43.0,,,,,,,,,,,"0|i0230n:",10090,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicRouter EIP with bean endpoint should support method parameter with OGNL,CAMEL-4773,12534925,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Dec/11 10:47,13/Dec/11 14:27,14/Jul/23 05:45,13/Dec/11 14:27,2.9.0,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Dynamic-Routing-tp5068570p5068570.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220609,,,2011-12-13 10:47:46.0,,,,,,,,,,,"0|i022zz:",10087,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel feature is invalid,CAMEL-4772,12534837,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,12/Dec/11 21:19,13/Dec/11 06:33,14/Jul/23 05:45,13/Dec/11 06:33,2.7.5,,,,,,,,,,,,2.7.5,,,,osgi,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf 2.7.5-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
Downloading: http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.commons-pool/${commons-pool-bundle-version}/org.apache.servicemix.bundles.commons-pool-${commons-pool-bundle-version}.jar
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.066s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [1:17.335s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:20.222s
[INFO] Finished at: Mon Dec 12 22:12:52 CET 2011
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.2:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: Could not find artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-pool:jar:${commons-pool-bundle-version} in central (http://repo1.maven.org/maven2)
[ERROR] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220521,,,Tue Dec 13 06:33:43 UTC 2011,,,,,,,,,,,"0|i022zr:",10086,,,,,,,,,,,,,,,,,,,,"13/Dec/11 06:33;njiang;Applied patch into camel-2.7.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-castor feature is invalid,CAMEL-4771,12534833,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,12/Dec/11 20:59,13/Dec/11 09:34,14/Jul/23 05:45,13/Dec/11 09:34,2.8.4,,,,,,,,,,,,2.8.4,,,,osgi,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Commands
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
...
Downloaded: http://repository.apache.org/snapshots/org/apache/camel/camel-castor/2.8.4-SNAPSHOT/camel-castor-2.8.4-20111212.023754-18.jar (17 KB at 21.9 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.195s]
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SUCCESS [7.749s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [29.685s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.617s
[INFO] Finished at: Mon Dec 12 21:54:41 CET 2011
[INFO] Final Memory: 16M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.4:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: mvn:commons-io/commons-io/1.3.2 is not an OSGi bundle -> [Help 1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220517,,,2011-12-12 20:59:41.0,,,,,,,,,,,"0|i022zj:",10085,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz - Using underscore in group name does not work,CAMEL-4769,12534755,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/11 09:32,12/Dec/11 12:11,14/Jul/23 05:45,12/Dec/11 12:11,2.7.4,2.8.3,2.9.0,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-quartz,,,,0,,,,,,,,,"The group name is not properly resolved if people specify a invalid host name, such as with underscores.
If so we should fallback and grab the group name by grabbing the string until the first path separator char.

See nabble
http://camel.465427.n5.nabble.com/Camel-Quartz-consumer-doesn-t-allow-underscores-tp5063734p5063734.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Dec/11 11:22;bibryam;quartz.diff;https://issues.apache.org/jira/secure/attachment/12506991/quartz.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220439,,,Mon Dec 12 12:11:04 UTC 2011,,,,,,,,,,,"0|i022z3:",10083,,,,,,,,,,,,,,,,,,,,"12/Dec/11 11:22;bibryam;simple fix;;;","12/Dec/11 12:11;davsclaus;Bilgin thanks for the patch. I already had it fixed, but ASF infra was not working well this morning, so I had to delay committing until it worked again;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extra request parameters sent by the camel-http4 component,CAMEL-4768,12534751,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,xverges,xverges,12/Dec/11 09:01,16/Jun/16 13:08,14/Jul/23 05:45,13/Dec/11 08:42,2.8.3,,,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-http,,,,0,,,,,,,,,"Described in http://camel.465427.n5.nabble.com/Extra-Request-Params-sent-in-camel-HTTP-component-GET-request-td5042808.html

Route 
{code}
from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http4://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 
{code}
sends to the server the {{bridgeEndpoint=true&throwExceptionOnFailure=false}} parameters,
while route 
{code}
from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 
{code}
behaves properly and removes them","jdk1.6.0_29; Windows XP",,,,,,,,,,,,,,,,,,,,,,,CAMEL-10064,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220435,,,Tue Dec 13 08:42:47 UTC 2011,,,,,,,,,,,"0|i022yv:",10082,,,,,,,,,,,,,,,,,,,,"13/Dec/11 08:42;njiang;Applied patch into trunk, 2.8.x and 2.7.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test will through NPE when setting the system property of skipStartingCamelContext to be true,CAMEL-4756,12534426,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Dec/11 03:58,09/Dec/11 14:56,14/Jul/23 05:45,09/Dec/11 14:56,2.8.2,2.8.3,,,,,,,,,,,2.8.4,2.9.0,,,camel-test,,,,0,,,,,,,,,"We will get a NPE error when setting skipStartingCamelContext system property to be true.
{code}
      java.lang.NullPointerException
        at org.apache.camel.spring.SpringCamelContext.springCamelContext(SpringCamelContext.java:75)
        at org.apache.camel.test.junit4.CamelSpringTestSupport.createCamelContext(CamelSpringTestSupport.java:180)
        at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:197)
        at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:167)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220148,,,Fri Dec 09 14:56:59 UTC 2011,,,,,,,,,,,"0|i022w7:",10070,,,,,,,,,,,,,,,,,,,,"09/Dec/11 14:56;njiang;Applied patch into trunk and camel-2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The onException clause should make use of the correct logger name given through the log DSL ,CAMEL-4754,12534359,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bvahdat,bvahdat,08/Dec/11 16:25,12/Dec/11 05:48,14/Jul/23 05:45,12/Dec/11 05:48,2.8.3,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/global-onException-clause-wrongly-identifies-route-in-which-exception-occurs-log-name-td5058304.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Dec/11 22:55;bvahdat;CAMEL-4754-option-one.patch;https://issues.apache.org/jira/secure/attachment/12506807/CAMEL-4754-option-one.patch","09/Dec/11 22:56;bvahdat;CAMEL-4754-option-two.patch;https://issues.apache.org/jira/secure/attachment/12506808/CAMEL-4754-option-two.patch","08/Dec/11 17:45;bvahdat;debugger.jpg;https://issues.apache.org/jira/secure/attachment/12506624/debugger.jpg",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,220081,,,Mon Dec 12 05:48:37 UTC 2011,,,,,,,,,,,"0|i022vr:",10068,,,,,,,,,,,,,,,,,,,,"08/Dec/11 17:55;bvahdat;Maybe just as a small hint, I attached a screenshot showing the cause of the problem: the LogProcessor gets (correctly) wired with the simple expression we've on log DSL, like:

{code}
onException(Exception.class)
    .log(""Error due ${exception.message}"");
{code}

But with the *wrong* CamelLoggger object which is to be used for the route 'bar'. Correctly it should be wired to the CamelLogger of the route 'foo'.;;;","09/Dec/11 10:07;davsclaus;The workaround is to use route scoped onExceptions.

;;;","09/Dec/11 10:12;davsclaus;Its a bug in the error handler when using context scoped onException.

When the routes is built, then the error handler is mixed in the routes (Camel 2.x architecture), and in this logic error handlers is build based on the given route built, and a reference is stored in the context scoped OnException. However that reference should have been keyed to the given created route. This ensures when Camel picks the OnException to handle the exception that occurred, it should pick the error handler that matches the current route. Beforehand it will pick the last created error handler from the last created route. All though the error handler reacts similar, it was only the Log DSL that uses the route id in the log process, and thus that route id was wrong, causing the Log processor to log the wrong id.
;;;","09/Dec/11 12:41;davsclaus;This has API changes and a slightly bigger changes in the routing engine. So am a bit inclined to backport to a patch release, to only fix a route id in a log. And we have a known workaround.;;;","09/Dec/11 15:06;bvahdat;@Claus,

I'm afraid that the test ContextScopedOnExceptionCorrectRouteContextTest doesn't really verify the fix, as we do swallow all the possible exceptions after the template.sendBody() call, so that using the processor DSL even if we would assert on:

{code}
assertEquals(""balabala"", routeId);
{code}

The tests would still pass well! as we swallow all kindes of the exceptions after the template.sendBody() calls (including a CamelExecutionException wrapping junit.framework.ComparisonFailure)

I went for another approach using a logger-name-recording-log4j-appender (see below) and removed the processor approach. If you think this would make more sense to you I would append the diff (tomorrow) into this ticket so that you can apply it into the trunk.

{code}
public class ContextScopedOnExceptionCorrectRouteContextTest extends ContextTestSupport {

    private LoggerNameRecordingAppender loggerNameRecordingAppender;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        // append our custom log4j Appender through which we want to verify the
        // logger name of the log messages
        loggerNameRecordingAppender = new LoggerNameRecordingAppender(""Error due Forced foo error"", ""Error due Forced bar error"");
        Logger.getRootLogger().addAppender(loggerNameRecordingAppender);
    }

    @Override
    protected void tearDown() throws Exception {
        // we're done, so remove our custom Appender from the root logger
        Logger.getRootLogger().removeAppender(loggerNameRecordingAppender);

        super.tearDown();
    }

    @Override
    public boolean isUseRouteBuilder() {
        return false;
    }

    public void testContextScopedOnExceptionLogRouteBarFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"")
                    .throwException(new IllegalArgumentException(""Forced bar error""));
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);
        
        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // ignore
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(1, barHits.size());
        assertEquals(""bar"", barHits.get(0));

        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(0, fooHits.size());
    }

    public void testContextScopedOnExceptionLogRouteFooFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .throwException(new IllegalArgumentException(""Forced foo error""))
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"");

                from(""direct:killer"").routeId(""killer"")
                    .to(""mock:killer"");
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(0);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);

        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // expected
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(1, fooHits.size());
        assertEquals(""foo"", fooHits.get(0));

        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(0, barHits.size());
    }

    private static class LoggerNameRecordingAppender extends AppenderSkeleton {

        private final List<String> recordedLogMessages;
        private final Map<String, List<String>> recordedLoggerNames;

        LoggerNameRecordingAppender(String... logMessages) {
            this.recordedLogMessages = new ArrayList<String>(Arrays.asList(logMessages));
            this.recordedLoggerNames = new HashMap<String, List<String>>();
            for (String logMessage : logMessages) {
                recordedLoggerNames.put(logMessage, new ArrayList<String>());
            }
        }

        @Override
        protected void append(LoggingEvent event) {
            String logMessage = event.getRenderedMessage();
            if (recordedLogMessages.contains(logMessage)) {
                // add this hit to the list of the logger names we have got so far
                // for this log message
                List<String> actual = recordedLoggerNames.get(logMessage);
                actual.add(event.getLoggerName());
            }
        }

        List<String> getRecordedLoggerNamesFor(String logMessage) {
            return Collections.unmodifiableList(recordedLoggerNames.get(logMessage));
        }

        @Override
        public boolean requiresLayout() {
            return false;
        }

        @Override
        public void close() {
            // noop
        }
    }
}
{code};;;","09/Dec/11 15:25;davsclaus;The new unit tests has a inlined processor that checks the route id is the correct value.

However fell free to submit a patch with your logging appender ""trick"". You must attach a file to the JIRA and mark [x] in grant license to Apache. Otherwise we cannot accept your contribution.;;;","09/Dec/11 15:33;bvahdat;But that check doesn't really work, because if you would do

{code}
assertEquals(""balabala"", routeId);
{code}

The test would still *pass*. The processor is O.K. the problem are those 2 catch blocks after the template.sendBody() calls. Maybe you want to give it a try with that ""balabala"" routeId to see what I mean.;;;","09/Dec/11 23:06;bvahdat;Attached two potential fixes you may want to consider (either one *or* two, but not both)

- CAMEL-4754-option-one.patch: to remedy the potential exception swallowing on junit.framework.ComparisonFailure, I hope my pointer I tried to explain in my previous posts is clear by now

- CAMEL-4754-option-two.patch: how did you name it? Yeah, this's the one with that logging appender ""trick""

The decision is yours :-);;;","11/Dec/11 10:26;bvahdat;According to my previous post on this I reopened the ticket, so that we can remedy this ""false positive"" effect while unit-testing.
See the two provided patches for this.;;;","12/Dec/11 05:48;davsclaus;Thanks for the patch. I went for number one and polished it a bit.;;;",,,,,,,,,,,,,,,,,,,,
camel-guice osgi import version range in manifest.mf,CAMEL-4751,12534261,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,07/Dec/11 21:59,08/Dec/11 07:55,14/Jul/23 05:45,08/Dec/11 07:55,2.8.2,,,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-guice,,,,0,2.8.3,2.9.0,camel,,,,,,"in Camel-Guice component's pom.xml we have:
 <properties>    
    <camel.osgi.export.pkg>org.apache.camel.guice.*</camel.osgi.export.pkg>
    <camel.osgi.import.additional>
        com.google.inject*;version=""[2,3)""        
    </camel.osgi.import.additional>
  </properties>

i.e imported version of google-guice package is [2,3). Unfortunately this in not compatible with any of the releases from Google-Guice (version 2 or 3). Guice seems to maintain 'package' level versioning. ""com.google.inject;version=1.3""

Suggested:fix:
Change the lower version from 2 to 1.2 .
This bug is a showstopper for us to integrate and deploy solution with camel+guice+peaberry on to karaf osgi.


We have from guice 3:
guice 
----------
Manifest-Version = 1.0
Archiver-Version = Plexus Archiver
Built-By = mcculls
Build-Jdk = 1.6.0_24
Created-By = Apache Maven

Bundle-Vendor = Google, Inc.
Bundle-RequiredExecutionEnvironment = J2SE-1.5,JavaSE-1.6
Bundle-Name = guice
Bundle-Copyright = Copyright (C) 2006 Google Inc.
Bundle-DocURL = http://code.google.com/p/google-guice/
Bundle-Description = Guice is a lightweight dependency injection framework for J
ava 5 and above
Bundle-SymbolicName = com.google.inject
Bundle-Version = 3.0.0
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2

Import-Package =
        javax.inject,
        org.aopalliance.intercept
Export-Package =
        com.google.inject.matcher;version=1.3,
        com.google.inject.name;version=1.3,
        com.google.inject.spi;version=1.3,
        com.google.inject.binder;version=1.3,
        com.google.inject.util;version=1.3,
        com.google.inject;version=1.3
","windows, linux",surya108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Dec/11 22:01;surya108;camel_guice_osgi_import_version_fix.patch;https://issues.apache.org/jira/secure/attachment/12506528/camel_guice_osgi_import_version_fix.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,219983,,,Thu Dec 08 07:55:23 UTC 2011,,,,,,,Patch Available,,,,"0|i022v3:",10065,,,,,,,,,,,,,,,,,,,,"07/Dec/11 22:01;surya108;changed properties in camel-guice pom.xml. to be compatible with versioning from google-guice jars.;;;","08/Dec/11 07:55;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream - Should close previous stream if re-initializing a new stream,CAMEL-4748,12534159,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Dec/11 10:03,07/Dec/11 10:12,14/Jul/23 05:45,07/Dec/11 10:12,2.7.4,2.8.3,,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-stream,,,,0,,,,,,,,,"For example if scanStream=true then the previous stream should be closed, prior to re-initalizing a new stream.

For example on Windows this may cause a file to be locked by the JVM due the old InputStream is not closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,219881,,,2011-12-07 10:03:36.0,,,,,,,,,,,"0|i022uf:",10062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tokenize pair - evaluated as predicate should close input stream,CAMEL-4742,12533868,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/11 11:58,05/Dec/11 12:37,14/Jul/23 05:45,05/Dec/11 12:37,2.9.0,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"If you read from a file and use the tokenize pair in a predicate such as a filter / content based router, then the input stream should be closed. Otherwise OS such as Windows keep a lock on the stream, and the file cannot be moved/deleted after processing is done.

See nabble
http://camel.465427.n5.nabble.com/Riding-on-org-apache-camel-language-TokenPairPredicateTest-tp5041981p5041981.html

Note that using tokenizePair as a predicate is must likely very unusual, as its meant for splitting a stream into tokens, and thus most often only used with the splitter EIP.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,219594,,,2011-12-05 11:58:18.0,,,,,,,,,,,"0|i022t3:",10056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty component requires a URI parameter to set receiveBufferSizePredictorFactory for UDP consumers,CAMEL-4737,12533684,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,geemang,geemang,02/Dec/11 20:27,04/Dec/11 14:46,14/Jul/23 05:45,04/Dec/11 14:46,2.8.3,Future,,,,,,,,,,,2.8.4,2.9.0,,,camel-netty,,,,0,camel-netty,,,,,,,,"The Netty UDP consumer truncates received messages that are larger than 768 bytes. A number of higher level protocols and data-formatters have message sizes larger than 768. E.g. Syslog 1024 bytes

NOTE: There is a difference between receiveBufferSize receiveBufferSizePredictor see: http://lists.jboss.org/pipermail/netty-users/2010-January/001958.html  ",Mac OSX Lion,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Dec/11 20:29;geemang;camel-netty-patch.txt;https://issues.apache.org/jira/secure/attachment/12505928/camel-netty-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,219411,,,Sun Dec 04 14:46:46 UTC 2011,,,,,,,Patch Available,,,,"0|i022s7:",10052,,,,,,,,,,,,,,,,,,,,"04/Dec/11 13:58;njiang;Applied patch with thanks to Martin.
I also fixed some check style errors (changed tabs to spaces) and set default the receiveBufferSizePredictor to be 0.;;;","04/Dec/11 14:46;njiang;Applied patch into trunk and 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dumping route to XML created by Java DSL using an expression with Transform EIP may not output the actual used expression,CAMEL-4733,12533588,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Dec/11 09:55,03/Dec/11 08:26,14/Jul/23 05:45,03/Dec/11 08:26,2.8.2,,,,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,0,,,,,,,,,"Given this route
{code}
                from(""direct:start"").routeId(""myRoute"")
                    .transform(constant(""Hello World""))
                    .to(""mock:result"");
{code}

Will be dumped as XML as:
{code:xml}
<route group=""org.apache.camel.util.DumpModelAsXmlTransformRouteTest$1"" id=""myRoute"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""direct:start""/>
    <transform id=""transform1"">
        <expressionDefinition/>
    </transform>
    <to uri=""mock:result"" id=""to1""/>
</route>
{code}

The <transform> is wrong as it should contain the expression definition properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,219316,,,Fri Dec 02 13:50:08 UTC 2011,,,,,,,,,,,"0|i022rb:",10048,,,,,,,,,,,,,,,,,,,,"02/Dec/11 09:58;davsclaus;Another example
{code}

                from(""direct:start"").routeId(""myRoute"")
                    .filter(simple(""${body} > 10""))
                        .to(""mock:result"");
{code};;;","02/Dec/11 13:50;davsclaus;Frist part fixed when using expression clause builder such as:

{code}
from(""direct:start"").routeId(""myRoute"")
 .transform().constant(""Hello World"")
 .to(""mock:result"");
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertiesComponent in vm:// uri,CAMEL-4724,12533102,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akudrevatych,akudrevatych,29/Nov/11 11:49,02/Dec/11 12:46,14/Jul/23 05:45,02/Dec/11 12:46,2.8.3,2.9.0,,,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,0,,,,,,,,,"when using vm:// uri and sender and receiver in different contexts properties searched in sender, but supposed to search in receiver, where route is defined.

[discussion|http://camel.465427.n5.nabble.com/using-vm-with-different-camelContexts-and-property-parser-td5022731.html]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,218830,,,Fri Dec 02 12:46:03 UTC 2011,,,,,,,,,,,"0|i022pb:",10039,,,,,,,,,,,,,,,,,,,,"02/Dec/11 12:46;njiang;Applied patch into trunk and camel-2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident-wssecurity shouldn't import org.apache.cxf.transport.http_osgi package anymore,CAMEL-4718,12532890,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,28/Nov/11 10:56,28/Nov/11 11:34,14/Jul/23 05:45,28/Nov/11 11:34,,,,,,,,,,,,,2.8.4,2.9.0,,,,,,,0,,,,,,,,,org.apache.cxf.transport.http_osgi package won't exist since cxf 2.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,218623,,,Mon Nov 28 11:34:59 UTC 2011,,,,,,,,,,,"0|i022nz:",10033,,,,,,,,,,,,,,,,,,,,"28/Nov/11 11:34;ffang;commit fix
http://svn.apache.org/viewvc?rev=1207068&view=rev for trunk
http://svn.apache.org/viewvc?rev=1207082&view=rev for 2.8.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException thrown by hawtbuf codec decode in OSGi,CAMEL-4709,12532577,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hadrian,hadrian,24/Nov/11 04:58,09/Dec/11 15:09,14/Jul/23 05:45,09/Dec/11 15:09,,,,,,,,,,,,,2.9.0,,,,camel-hawtdb,,,,0,,,,,,,,,"When running the HawtDBAggregateRouteTest from camel-itest-osgi, the following stack trace results. Looks like hawtdb is not instantiate object during readObject from an ObjectIndputStream.

{code}

Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
        at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:57)
        at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:52)
        at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
        at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:161)
        ... 57 more
{code}

I am disabling the test for now.",,,,,,,,,,,,,,,,CAMEL-4762,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,218310,,,Fri Dec 09 15:09:27 UTC 2011,,,,,,,,,,,"0|i022lz:",10024,,,,,,,,,,,,,,,,,,,,"24/Nov/11 12:39;njiang;The test in the camel 2.8.x does not has this kind of problem.
It was caused by the hawtbuf doesn't use the dynamic imports * any more, which makes the ObjectStream can't load the class which it needs. ;;;","09/Dec/11 15:09;njiang;Applied patch into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scala DSL does not support defining route-scoped error handlers,CAMEL-4698,12532104,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,rvalk,rvalk,20/Nov/11 22:35,21/Nov/11 07:52,14/Jul/23 05:45,21/Nov/11 07:52,2.8.2,2.9.0,,,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-scala,,,,0,,,,,,,,,The Scala DSL does not allow for defining error handlers at the route scope. The 'errorHandler' method only sets the context-scoped error handler.,All (DSL limitation),,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,"20/Nov/11 22:42;rvalk;camel-scala-route_error_handler.patch.tar.gz;https://issues.apache.org/jira/secure/attachment/12504447/camel-scala-route_error_handler.patch.tar.gz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,217840,,,Mon Nov 21 07:52:53 UTC 2011,,,,,,,Patch Available,,,,"0|i022jj:",10013,,,,,,,,,,,,,,,,,,,,"20/Nov/11 22:42;rvalk;Patch for SRouteDefinition.scala.
Unit test suite for issue.;;;","21/Nov/11 07:52;njiang;Applied patch into trunk, Camel 2.8.x  Camel 2.7.x branch with thanks to Robert.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When a route is removed from camel, LifecycleStrategy is called twice ",CAMEL-4696,12532015,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,bibryam,bibryam,18/Nov/11 23:49,28/Nov/11 13:26,14/Jul/23 05:45,26/Nov/11 10:02,2.8.3,,,,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,0,,,,,,,,,"DefaultCamelContext.removeRoute method has these lines among others

 if (getRouteStatus(routeId).isStopped()) {
    routeService.setRemovingRoutes(true);
    shutdownRouteService(routeService);
    removeRouteDefinition(routeId);
    ServiceHelper.stopAndShutdownServices(routeService);

I think the last line from this snippet is not needed, because the route should be already stopped in order to pass the IF statement and then it is shutdown through this call shutdownRouteService(routeService);

 ServiceHelper.stopAndShutdownServices(routeService) tries to stops again the route if not stopped, but the worse is it shutdown the rout again.
It seems to me like a bug, other thoughts?


",,,,,,,,,,,,,,,,,CAMEL-4514,,,,,,,,,,,,,,,,,"18/Nov/11 23:52;bibryam;unnamed.patch;https://issues.apache.org/jira/secure/attachment/12504298/unnamed.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,217751,,,Mon Nov 28 13:26:44 UTC 2011,,,,,,,Patch Available,,,,"0|i022j3:",10011,,,,,,,,,,,,,,,,,,,,"18/Nov/11 23:52;bibryam;Here is a unit test showing the bug;;;","26/Nov/11 09:58;davsclaus;Thanks Bilgin for the unit test.

I have committed the patch and fixed it as you suggested in DefaultCamelContext.

I have upgraded your JIRA account so you can assign tickets, as you contribute many patches recently.
So by assigning the ticket we can see you are working on a patch. Keep up the good work.;;;","28/Nov/11 13:26;bibryam;Thanks Claus. Jira perms will simplify my life a little more :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Calling the camel-smpp component results in a NullPointerException,CAMEL-4695,12532007,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,18/Nov/11 22:32,18/Jul/13 19:20,14/Jul/23 05:45,18/Nov/11 22:37,,,,,,,,,,,,,2.9.0,,,,camel-smpp,,,,0,,,,,,,,,"When the camel-smpp component is called to submit a SMS, a NullPointerException is thrown:

{code:title=Stacktrace}
Caused by: java.lang.NullPointerException
       at org.jsmpp.util.PDUByteBuffer.appendAll(PDUByteBuffer.java:182)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.util.DefaultComposer.submitSm(DefaultComposer.java:238)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.DefaultPDUSender.sendSubmitSm(DefaultPDUSender.java:196)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.SynchronizedPDUSender.sendSubmitSm(SynchronizedPDUSender.java:192)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SubmitSmCommandTask.executeTask(SubmitSmCommandTask.java:86)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:248)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SMPPSession.submitShortMessage(SMPPSession.java:320)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.apache.camel.component.smpp.SmppSubmitSmCommand.execute(SmppSubmitSmCommand.java:56)
       ... 62 more
{code}",,davsclaus,muellerc,rusbob,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,217743,,,Thu Jul 18 19:20:00 UTC 2013,,,,,,,,,,,"0|i022iv:",10010,,,,,,,,,,,,,,,,,,,,"18/Jul/13 06:37;rusbob;Christian, how this issue has been resolved? Can I patch *2.8.0* version?;;;","18/Jul/13 06:40;davsclaus;Yes you can patch the code yourself. Click the Source tab on this ticket to see the code changes.;;;","18/Jul/13 18:06;rusbob;Ok, but the fix has been done in *new* [SmppSubmitSmCommand file|https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java?r2=1203887&r1=1179457]

Where do I add this fix in [2.8.0 version|https://fisheye6.atlassian.com/browse/~br=camel-2.8.x/camel/branches/camel-2.8.x/components/camel-smpp/src/main/java/org/apache/camel/component/smpp]?;;;","18/Jul/13 19:20;muellerc;It's easy if you have a look at the change set Claus mentioned [1]. The fix is also back ported to the camel-2.8.x maintenance branch...

[1] https://fisheye6.atlassian.com/changelog/camel?cs=1165993;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
can't use same quartz scheduled route policy on two routes,CAMEL-4692,12531949,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,julian.cable,julian.cable,18/Nov/11 15:09,22/Nov/11 22:53,14/Jul/23 05:45,22/Nov/11 18:51,2.8.2,,,,,,,,,,,,2.8.4,2.9.0,,,camel-quartz,,,,0,,,,,,,,,"The following XML DSL defines two routes using the same route policy:

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <camel:propertyPlaceholder id=""properties"" location=""file:///etc/camel/css.properties""/>

    <camel:package>cdp_test</camel:package>
    <camel:route id=""r1"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/1""/>
      <camel:to uri=""stream:out""/>
    </camel:route>
    <camel:route id=""r2"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/2""/>
      <camel:to uri=""stream:out""/>
    </camel:route>

  </camel:camelContext>

  <bean id=""pol1"" class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""00,30 * * * * ? *""/>
    <property name=""routeStopTime""  value=""10,40 * * * * ? *""/>
  </bean>

</beans>

This is the logging output. r2 does not follow the policy:

[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler 'DefaultQuartzScheduler-camel-1' initialized from an externally provided properties instance.
[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler version: 1.8.4
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-START-r1 for action: START on route:
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-STOP-r1 for action: STOP on route:
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpoint[file://data/1]
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r2 started and consuming from: Endpoint[file://data/2]
[pache.camel.spring.Main.main()] QuartzComponent                INFO  Starting Quartz scheduler: DefaultQuartzScheduler-camel-1
[pache.camel.spring.Main.main()] QuartzScheduler                INFO  Scheduler DefaultQuartzScheduler-camel-1_$_NON_CLUSTERED started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Total 2 routes, of which 2 is started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.8.2 (CamelContext: camel-1) started in 0.596 seconds
hello 1
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
[el-1) thread #2 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpoint[file://data/1]
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-2] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpoint[file://data/1]
hello 2
hello 2
[artzScheduler-camel-1_Worker-3] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpoint[file://data/1]
hello 2
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
[el-1) thread #2 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpoint[file://data/1]
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-4] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpoint[file://data/1]

If I use two separate identical route policies it works as I expect.",tomcat6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Nov/11 15:57;bibryam;routePolicy.diff;https://issues.apache.org/jira/secure/attachment/12504765/routePolicy.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,217685,,,Tue Nov 22 22:53:24 UTC 2011,,,,,,,,,,,"0|i022i7:",10007,,,,,,,,,,,,,,,,,,,,"22/Nov/11 09:58;davsclaus;Is the problem also when starting? eg the log above shows that only r1 is stopped.;;;","22/Nov/11 10:20;julian.cable;Hi Claus, in the example, r1 will start and stop on schedule whereas r2 stays active always.

Julian;;;","22/Nov/11 15:57;bibryam;ScheduledRoutePolicy was working only with one route (the first one assigned) at a time. I tried to fix that by introducing a map (a little bit refactoring) to store the routes using the same policy.

Julian, can you give it a try?;;;","22/Nov/11 18:51;davsclaus;Thanks Bilgin for the patch. Keep up the good work. Its been noticed you great work for the community.;;;","22/Nov/11 22:53;julian.cable;Fantastic, Thanks guys. I'll put a dev build together and try it.

Julian;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"When stopping CamelContext should not clear lifecycleStrategies, to make restart safely possible",CAMEL-4682,12531456,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Nov/11 13:14,18/Nov/11 01:43,14/Jul/23 05:45,15/Nov/11 13:19,2.7.4,2.8.2,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-core,,,,0,,,,,,,,,"We should not clear the lifecycleStrategies on CamelContext when stop() is invoked, as if we restart by invoking start(), the lifecycle strategies should be in use again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,217192,,,2011-11-15 13:14:15.0,,,,,,,,,,,"0|i022fz:",9997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel IRC component password and port configuration properties do not work,CAMEL-4679,12531390,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davaleri,davaleri,davaleri,15/Nov/11 00:40,15/Nov/11 16:19,14/Jul/23 05:45,15/Nov/11 16:19,2.8.1,,,,,,,,,,,,2.9.0,,,,camel-irc,,,,0,,,,,,,,,"If one sets a password in the URI for this component, the password is concatenated with the username when the URI is ""sanitized"" by IrcConfiguration#sanitize and is not properly parsed when reread by the IrcConfiguration#configure operation.

The result is that the concatenated combo is sent as the username and the colon is an illegal character.  The user's secret is also sent with their username and may inadvertently end up in log files.

If one specifies a port in the URI for this component, the port is not a URI parameter and is not handled by the IrcConfiguration#configure method.  The port is ignored and the default port range of 6667-6669 is attempted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,217126,,,2011-11-15 00:40:28.0,,,,,,,,,,,"0|i022fb:",9994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy - CSV format - Should be able to marshal with quotes,CAMEL-4672,12531229,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Nov/11 14:32,12/Nov/11 15:04,14/Jul/23 05:45,12/Nov/11 15:04,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,1,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bindy-CSV-marshal-does-not-properly-quote-values-defined-by-the-CsvRecord-separator-td4809017.html

Its fairly common to marshal to/from with quotes in CSV format.
We should make this easier by adding an attribute to @CsvRecord where you can define a quote char to use, either single or double etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216966,,,Sat Nov 12 15:04:26 UTC 2011,,,,,,,,,,,"0|i022dr:",9987,,,,,,,,,,,,,,,,,,,,"12/Nov/11 15:04;davsclaus;There is now a {{quote}} attribute you can specify on @CsvRecord;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The javax.xml.tranform.stax imported package should be optional,CAMEL-4670,12531177,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,11/Nov/11 20:56,14/Nov/11 16:07,14/Jul/23 05:45,14/Nov/11 16:07,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"It forbids camel to be deployed on 1.5, which can be problematic when using an OSGi container with some packages hidden.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216914,,,Sat Nov 12 15:20:01 UTC 2011,,,,,,,,,,,"0|i022db:",9985,,,,,,,,,,,,,,,,,,,,"12/Nov/11 10:43;davsclaus;Camel requires JDK6+.

The code uses JDK6+ only API so its not possible to run camel-core on JDK1.5 or older.
;;;","12/Nov/11 15:20;gnodet;Yeah, I'm not deploying on JDK 1.5, but rahter on a JDK 1.6 with hidden packages.  The reason to hide those packages is if you want to provide your own implementation of JAXB, STAX, JAXWS or any other specs.  In such a case, you need to hide the packages and it's quite easy to make sure camel can support this use case.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JpaConsumer - Should rollback if processing of an exchange failed,CAMEL-4668,12531128,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Nov/11 12:46,13/Nov/11 13:53,14/Jul/23 05:45,12/Nov/11 09:48,2.7.4,2.8.2,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-jpa,,,,1,,,,,,,,,"If a JPA consumer pickup X messages and then one of those messages fails to be processed and throws an exception, then the JPA consumer should detect this and mark the TX as rollback.

Currently there is a flaw which causes the JPA consumer to commit the batch.

See nabble
http://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.html",,davidkarlsen@gmail.com,preben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Nov/11 23:14;bvahdat;JpaTXRollbackTest.patch;https://issues.apache.org/jira/secure/attachment/12503507/JpaTXRollbackTest.patch","13/Nov/11 10:54;preben;JpaTXRollbackTest2.patch;https://issues.apache.org/jira/secure/attachment/12503529/JpaTXRollbackTest2.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216866,,,Sun Nov 13 13:53:27 UTC 2011,,,,,,,,,,,"0|i022cv:",9983,,,,,,,,,,,,,,,,,,,,"11/Nov/11 13:56;bvahdat;There's something baffling me here, which I like to understand/learn how it's possible that it works!

Looking at [1] there's no try/catch or onException(....).handled(true) or the likes on the route, so sending the payload SendEmail(""kaboom@beer.org"") should blow up with a CamelExecutionException wrapping the thrown IllegalArgumentException(""Forced"") through the usage of the template on the client side (in this case the test method testTXRollback()) but it doesn't!!!

For sure I'm missing some pieces of this tricky puzzle...


[1] https://svn.apache.org/repos/asf/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaTXRollbackTest.java;;;","11/Nov/11 14:04;davsclaus;Its 2 different things:
1: The template send 3 messages to INSERT data into the database.
2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.
;;;","11/Nov/11 14:13;bvahdat;But if I start the route as the first step in the test method it *still* passes:

{code}
    @Test
    public void testTXRollback() throws Exception {
        // start route
        context.startRoute(""foo"");

        // first create three records
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""foo@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""bar@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));

        // should rollback the entire
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        // we should retry and try again
        mock.expectedMinimumMessageCount(4);

        assertMockEndpointsSatisfied();

        assertTrue(""Should be >= 2, was: "" + foo.intValue(), foo.intValue() >= 2);
        assertTrue(""Should be >= 2, was: "" + bar.intValue(), bar.intValue() >= 2);
    }

{code}

And what I've learned is that the call at the line:
{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

should at the latest by now blow up with a CamelExecutionException but still it doesn't!;;;","12/Nov/11 09:50;davsclaus;Sending to JPA does *not* fail. So the 3 template code lines works fine.

Its the Camel route that fails. The JPA consumer is scheduled, so it will poll again later (after 2sec). And it will keep failing due that hardcoded exception being thrown. But foo and bar records will be fine, but as they are part of the same TX, they will also rollback. So the foo and bar counter will keep incrementing.;;;","12/Nov/11 12:17;preben;@Claus

Regarding the jmx statistics I added this to your test:

        MBeanServer mBeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer();
        Set<ObjectName> objNameSet = mBeanServer.queryNames(new ObjectName(""org.apache.camel:type=routes,name=\""foo\"",*""), null);
        ObjectName managedObjName = new ArrayList<ObjectName>(objNameSet).get(0);
        Long exchangesCompleted = (Long) mBeanServer.invoke(managedObjName, ""getExchangesCompleted"", null, null);
        Long exchangesFailed = (Long) mBeanServer.invoke(managedObjName, ""getExchangesFailed"", null, null);
     
        assertTrue(""Should be 0 since they are rolled back, was : "" + exchangesCompleted, 0 == exchangesCompleted);
        assertTrue(""Should be >=2, was: "" + exchangesFailed , exchangesFailed >= 2);

Now the test fails since there are completed exchanges. Shouldn't the jmx statistics reflect that the exchange actual did not complete (rolled back) as the test implies ?

;;;","12/Nov/11 23:14;bvahdat;@Claus,

As Preben tries to push his JMX expectations I insist on my Routing expectations. Really not an easy job for you, but I really appreciate your contribution.

You said:

2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.

However a slight modification of this test case by me (see the attachment) proves the opposite, that is, after routing is completed there're *3* rows in the table! I've a suspection that somewhere along the way the thrown IllegalArgumentException(""Forced"") is simply swallowed!

Again my expectation is that the call to

{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

Should blow up with a CamelExecutionException, but that's another story which I still don't understand :-(;;;","13/Nov/11 10:53;preben;@Babak

When you send using the template the records are inserted in its own tx so they should be committed as base for the test to run, and not rolled back. See attached patch.

I'm still not happy about the jmx stats though. ;;;","13/Nov/11 12:07;bvahdat;@Prebsen,

thanks for you comment, but the patch you attached reveals exactly the same behaviour as my attached patch also does, as you added the following assertion:

{code}
List<?> foundSendEmails = jpaTemplate.find(SELECT_ALL_STRING);
assertTrue(""Expect table 3 elements in SendEmail, was: "" + foundSendEmails.size(), foundSendEmails.size() == 3);
{code}

And this is *exactly* what I do *NOT* expect. Apparently according to what Claus said, the transaction should have been *rollbacked*. So after the routing of those 3 payloads completes the transaction through the spring's JpaTransactionManager should have been *rollbacked*, *but it's NOT*, as there're three rows on that table having the addresses 'foo@beer.org', 'bar@beer.org', and 'kaboom@beer.org'.

Maybe it's because of my poor english why I don't get the point. Anyone available who could explain it to me in german, or may be even better in my mother tongue persian :-)

Thanks anyway.;;;","13/Nov/11 13:53;bvahdat;O.K. it took long for me to get the point but now I've got it! Sorry for my misapprehension. ;;;",,,,,,,,,,,,,,,,,,,,,
Hardcoded initial delay for completionInterval in AggregateProcessor,CAMEL-4660,12531004,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,okhofstad,okhofstad,10/Nov/11 14:33,11/Nov/11 09:13,14/Jul/23 05:45,11/Nov/11 09:13,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,Aggregation,,,,,,,,"When setting the completionInterval on an aggregator, the first completion will be triggered after 1000ms. The reason is the hardcoded initial delay in AggregateProcessor.

This behavior has not been documented and is not expected. The expected behavior is for the first completion to be triggered after the given interval. The first completion would then be triggered after completionInterval, the second after 2 * completionInterval, the third after 3 * completionInterval and so on.",,okhofstad,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Nov/11 14:37;okhofstad;initialCompletionInterval.patch;https://issues.apache.org/jira/secure/attachment/12503218/initialCompletionInterval.patch","10/Nov/11 15:40;okhofstad;initialCompletionIntervalTest.patch;https://issues.apache.org/jira/secure/attachment/12503240/initialCompletionIntervalTest.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216742,,,Fri Nov 11 09:13:24 UTC 2011,,,,,,,Patch Available,,,,"0|i022b3:",9975,,,,,,,,,,,,,,,,,,,,"10/Nov/11 14:37;okhofstad;Patch which sets the initial delay to the same value as the completionInterval;;;","10/Nov/11 15:40;okhofstad;Added patch with test to reproduce the problem;;;","11/Nov/11 09:13;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Open the range when importing org.apache.fe lix.gogo.commands package,CAMEL-4659,12531001,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gnodet,gnodet,10/Nov/11 13:53,02/May/13 02:29,14/Jul/23 05:45,11/Nov/11 11:56,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,karaf,,,,0,,,,,,,,,"We need to import the package with [0.6,1) instead of [0.10,1) to be able to deploy on oder karaf versions (< 2.2.4)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4658,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216739,,,Fri Nov 11 11:56:26 UTC 2011,,,,,,,,,,,"0|i022av:",9974,,,,,,,,,,,,,,,,,,,,"11/Nov/11 09:31;davsclaus;The imports is now
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.10,1)"";status=provisional,org.apache.karaf.shell.console;versi
 on=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.bl
 ueprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code}

I wonder if the org.apache.felix.service.command should also be [0.6,1) range as well?;;;","11/Nov/11 09:32;davsclaus;A patch
{code}
Index: pom.xml
===================================================================
--- pom.xml	(revision 1200770)
+++ pom.xml	(working copy)
@@ -71,7 +71,7 @@
           <instructions>
             <Import-Package>
               org.apache.felix.service.command,
-              org.apache.felix.gogo.commands,
+              org.apache.felix.gogo.commands;version=""[0.6,1)"",
               org.apache.karaf.shell.console,
               *
             </Import-Package>
{code};;;","11/Nov/11 10:40;njiang;@Claus
I think you need to specify the version range of org.apache.felix.service.command.
If you doesn't specify it, the bundle plugin will pickup the version range according to meta-info of the bundle which is managed by the pom dependencies.;;;","11/Nov/11 11:05;davsclaus;Thanks Willem, here is MANIFEST.MF after the change
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.6,1)"";status=provisional,org.apache.karaf.shell.console;versio
 n=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.blu
 eprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code};;;","11/Nov/11 11:06;davsclaus;Before the change the bundle plugin appended status=provisional to the import.
{code}
org.apache.felix.service.command;version=""[0.10,1)"";status=provisional
{code}

Should we do that as well?;;;","11/Nov/11 11:25;njiang;Here are some information about the provisional[1], I think it is introduced by felix bundle itself.
[1]http://felix.apache.org/site/provisional-osgi-api-policy.html;;;","11/Nov/11 11:56;njiang;Applied the patch into trunk and camel 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel 2.9.0 SNAPSHOT not start on OSGI apache karaf,CAMEL-4658,12530999,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexey-s,alexey-s,10/Nov/11 13:49,02/May/13 02:29,14/Jul/23 05:45,11/Nov/11 12:07,,,,,,,,,,,,,2.8.3,2.9.0,,,karaf,,,,0,,,,,,,,,"Compiling my project is done using maven pluggins
maven-dependency-plugin and features-maven-plugin.
First unpack apache-karaf-2.2.3.zip.
The second component uses mvn:org.apache.camel.karaf/apache-camel/${ camel-version }/xml/features

karaf-version = 2.2.3
camel-version = 2.9.0-SNAPSHOT (build 2011-11-10)

Establish the following set of components
{code}
<feature version='${karaf-version}'>ssh</feature>
<feature version='${karaf-version}'>config</feature>
<feature version='${karaf-version}'>webconsole</feature>
<feature version='${karaf-version}'>wrapper</feature>

<feature version='${camel-version}'>camel-blueprint</feature>
<feature version='${camel-version}'>camel-ftp</feature>
<feature version='${camel-version}'>camel-http</feature>
<feature version='${camel-version}'>camel-http4</feature>
<feature version='${camel-version}'>camel-quartz</feature>
{code}
After starting karaf error log ${karaf.data}/log/karag.log
{code}
2011-11-10 16:19:51,128 | ERROR | Thread-6                                                           | FeaturesServiceImpl              | s.internal.Features
ServiceImpl$1  977 | 11 - org.apache.karaf.features.core - 2.2.3 | Error installing boot features
java.lang.Exception: Could not start bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.9.0-SNAPSHOT in feature(s) camel-core-2.9.0-SNAPSHOT: Unresolve
d constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: missing requirement [95.0] package; (&(package=org.apache.fe
lix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)[11:org.apache.karaf.features.core:2.2.3]
        at org.apache.karaf.features.internal.FeaturesServiceImpl$1.run(FeaturesServiceImpl.java:975)[11:org.apache.karaf.features.core:2.2.3]
Caused by: org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: miss
ing requirement [95.0] package; (&(package=org.apache.felix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))
{code}
We must add a dependency on a component in a file features.xml

Camel 2.8.1 and 2.7.0 to work correctly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4659,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216737,,,2011-11-10 13:49:44.0,,,,,,,,,,,"0|i022an:",9973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms - Request/Reply - Leak in ActiveMQSessionPool causing it to eat up memory, when using fixed replyTo queue names",CAMEL-4657,12530985,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,10/Nov/11 11:05,11/Nov/11 08:34,14/Jul/23 05:45,11/Nov/11 08:34,,,,,,,,,,,,,,,,,camel-jms,,,,0,activemq,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Possible-memory-leak-in-org-apache-activemq-pool-PooledSession-tp4964951p4964951.html

This bug is in ActiveMQ, but creating a ticket to get it resolved as the leak is apparent when using Spring DMLC with CACHE_SESSION, which Camel by default does when doing request/reply over JMS with fixed replyTo queues.

Then the consumer is not cached, and therefore created on each poll, but the ActiveMQSessionPool keeps growing in its internal list of created consumers, as the session is cached.

Most likely a patch is needed to fix this in the AMQ side",,zgl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,AMQ-3588,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,216723,,,Fri Nov 11 08:34:44 UTC 2011,,,,,,,,,,,"0|i022af:",9972,,,,,,,,,,,,,,,,,,,,"11/Nov/11 08:34;davsclaus;This was a bug in ActiveMQ which has been fixed in the upcoming AMQ 5.6 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy does not support quoted value with separator char in CSV datasource,CAMEL-4655,12530968,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,olivierursushorribilis,olivierursushorribilis,10/Nov/11 07:35,12/Nov/11 14:11,14/Jul/23 05:45,12/Nov/11 14:11,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,0,,,,,,,,,"i'm currently writing a tuto on Camel (2.8.2).

Showing HTTP4 component usage by downloading US Gov public data, i found a problem :


                from(""quartz://dataTimer?cron=0+*+*+*+*+?"").to(""direct:datas"");

                from(""direct:datas"")
                .to(""http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"")
                .unmarshal(new BindyCsvDataFormat(""net.thejeearchitectcookbook.camel.earthquake""))
                .process(new Processor() {

                        public void process(Exchange exchange) throws Exception {

                                Message message = exchange.getIn();

                                // ...
                        }
                });

The data format is like and my separator char is "","":

nc,71678421,0,""Wednesday, November  9, 2011 14:53:13 UTC"",37.5727,-118.8170,1.3,6.60,14,""Central California""

I want to get all datas as java.lang.String but the date value raises exception :

java.lang.IllegalArgumentException: No position 11 defined for the field: 14, line: 2 must be specified]

My separator is "","" but some values are nested inside "" "". Unfortunately there are "","" inside the "" "".

Bindy get lost !
 
How can i get String values nested inside "" "" and containing "","" ?

I can note that Camel CSV component deals with it without any problems.


Here is my pojo :


package net.thejeearchitectcookbook.camel.earthquake;

import java.io.Serializable;


import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
import org.apache.camel.dataformat.bindy.annotation.DataField;


@CsvRecord( separator = "","")
public class EarthquakeInfos implements Serializable {
   
        @DataField(pos = 1)
    private String src;
       
        @DataField(pos = 2)
    private String eqid;
       
        @DataField(pos = 3)
    private String version;
       
    @DataField(pos = 4)
    private String datetime;
   
        @DataField(pos = 5)
    private String lat;
       
        @DataField(pos = 6)
    private String lon;
   
    @DataField(pos = 7)
    private String magnitude;
   
        @DataField(pos = 8)
    private String depth;
       
        @DataField(pos = 9)
    private String nst;
       
    @DataField(pos = 10)
    private String place;
   



    public String getSrc() {
                return src;
        }

        public void setSrc(String src) {
                this.src = src;
        }

        public String getEqid() {
                return eqid;
        }

        public void setEqid(String eqid) {
                this.eqid = eqid;
        }

        public String getVersion() {
                return version;
        }

        public void setVersion(String version) {
                this.version = version;
        }

        public String getLat() {
                return lat;
        }

        public void setLat(String lat) {
                this.lat = lat;
        }

        public String getLon() {
                return lon;
        }

        public void setLon(String lon) {
                this.lon = lon;
        }

        public String getDepth() {
                return depth;
        }

        public void setDepth(String depth) {
                this.depth = depth;
        }

        public String getNst() {
                return nst;
        }

        public void setNst(String nst) {
                this.nst = nst;
        }

        public String getDatetime() {
        return datetime;
    }

    public void setDatetime(String datetime) {
        this.datetime = datetime;
    }

    public String getMagnitude() {
        return magnitude;
    }

    public void setMagnitude(String magnitude) {
        this.magnitude = magnitude;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }
} 

I can find that CSV Camel component performs well with the same datasource :

from(""direct:datas"")
.to(""http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"")
.unmarshal().csv().process(new Processor() {

	public void process(Exchange exchange) throws Exception {

		Message message = exchange.getIn();
		List<List<String>> datas = (List<List<String>>) message.getBody();
		// Skip header
		datas = datas.subList(1, datas.size() - 1);
		// Process my data
		for (List<String> row : datas) {
			// Process Row
			String datetime = row.get(3);
			String region = row.get(9);
			String magnitude = row.get(6);
					
		}
	}
});
","Mac Snow Leopard
Java(TM) SE Runtime Environment (build 1.6.0_26-b03-384-10M3425)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02-384, mixed mode)
Maven 3.0.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216706,,,Sat Nov 12 14:11:51 UTC 2011,,,,,,,,,,,"0|i0229z:",9970,,,,,,,,,,,,,,,,,,,,"12/Nov/11 14:11;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when using SEDA route and attaching an extra consumer,CAMEL-4650,12530849,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,09/Nov/11 10:47,18/Nov/11 01:44,14/Jul/23 05:45,15/Nov/11 12:08,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"I'm trying to construct a system for moving some seda queues over to
ActiveMQ during system shutdown. What I did was create a Route that
connects to some of my seda queues and then drains the queue to activemq.

Basicly I got two routes, the drainer:

from(""seda:"" + sedaId + ""?size=1000"")
                    .routeId(routeName +
sedaIs).noAutoStartup().to(activeMQFailuresQueue);


And the main route:

from(""seda:"" + sedaId + ""?size=1000"")
                    .routeId(routeName + sedaIs).to(SomeProcessor);

Now, sometimes the main route stalls for various reasons I need to
restart the jvm process it is running in, so I start the first route.
But when trying this in production, I got:

 java.lang.NullPointerException
    at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
    at
org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210)
    at
org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155)
    at
org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129)
    at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)


Bvahdat added a comment:
just a very tiny pointer:

Looking at the source it seems that  the
SedaEndpoint.getConsumerMulticastProcessor() method returns 'null' causing
the NPE, as the condition:

multicastStarted == false || consumerMulticastProcessor == null

is true.
","Java 6, Camel 2.8.2, Centos 4.",,,,,,,,,,,,,,,,,,,,,,,CAMEL-4680,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216587,,,Tue Nov 15 12:08:24 UTC 2011,,,,,,,,,,,"0|i02293:",9966,,,,,,,,,,,,,,,,,,,,"09/Nov/11 11:40;bvahdat;I did a typo in the user forum about the condition which holds, causing the NPE. Correctly it's:

{code}
multicastStarted == true || consumerMulticastProcessor == null
{code}

Looking at SedaConsumer.sendToConsumers() it's:

{code}
    protected void sendToConsumers(Exchange exchange) throws Exception {
        int size = endpoint.getConsumers().size();

        // if there are multiple consumers then multicast to them
        if (size > 1) {

            if (LOG.isDebugEnabled()) {
                LOG.debug(""Multicasting to {} consumers for Exchange: {}"", endpoint.getConsumers().size(), exchange);
            }
           
            // use a multicast processor to process it
            MulticastProcessor mp = endpoint.getConsumerMulticastProcessor();

            // and use the asynchronous routing engine to support it
            AsyncProcessorHelper.process(mp, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                    // noop
                }
            });
        } else {
            // use the regular processor and use the asynchronous routing engine to support it
            AsyncProcessorHelper.process(processor, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                    // noop
                }
            });
        }
    }
{code}

Which as you see does call:
{code}
endpoint.getConsumerMulticastProcessor();
{code}

But doesn't take into the account that the returned reference (of type MulticastProcessor) could be null. In your case it *was* null, as apparently the condition I mentioned in user forum holds.  

I would love to provide a patch for this, but the SedaEndpoint is to me one of those non-trivial camel's endpoint (concurrency was / is never trivial :-().

If some camel riders could give me a hint, I would assign the ticket to myself and would provide a patch (including a unit-test) proving the fix.;;;","09/Nov/11 13:33;bvahdat;@Tarjei, could you please give me some hints:

Are your both routes (you called them the main & the drainer one) in the same camel context? If so I wonder how it should work *at all* as you would consume twice using exactly the same seda uri in the same camel context as soon as you start the drainer route (for example through jmx)! IMHO the camel behaviour in this case would be undefined / unpredictable when a new message would arrive at this time to the seda endpoint.

The Java-DSL doesn't inhibit you to do that and the code would of course compile but at runtime using the from() clause you would *concurrently* consume twice using the same seda endpoint java object, again the uri by both routes seems to me to be exactly the same:

{code}
from(""seda:"" + sedaId + ""?size=1000"")
{code}

I propose to use the try/catch or onException clause to send the failed messsages (the not processed ones) to some endpoints (for example ""direct:failed"") and as soon as you start the drainer route you would consume from that endpoint in drainer route instead of consuming *concurrently* from the seda endpoint together with the main route at *the same time*.

What do you think?;;;","10/Nov/11 08:34;tarjei@scanmine.com;Hi Babak,

1. Yes both routes are in the same context.

2. Yes the point is to consume from the same seda endpoint. Think of this endpoint as a buffer between processes that take differing amounts of time and should not happen sequentially. 

3. I got an errorhandler for shorter errors like this:

.onException(java.net.ConnectException.class, SolrServerException.class, SolrException.class)
	.log(LoggingLevel.ERROR,routeName+ "":Connection down"")
				.maximumRedeliveries(4)
				.backOffMultiplier(1)
				.redeliveryDelay(redeliveryDelay)
				.to(""log:SolrRouteError?showAll=true&showStackTrace=true&showHeaders=true&showException=true"")
				.to(getSolrFailuresQueue())
				.handled(true)
				.end()

The problem is that on some errors the time it takes for a request can be quite long so the seda queue builds up.

Maybe I should shut down the consuming route before starting the drainer - would that help?
;;;","10/Nov/11 08:51;bvahdat;Yeah try stopping the main route first before starting the drainer one and see if you can still reproduce the NPE. And before starting the drainer route make sure that the main route is *really* stopped.

For example with a JMX client like JConsole you can check it through the getState() operation of the main route, of course I assume you have not disabled the Camel's JMX support, see:

http://camel.apache.org/camel-jmx.html#CamelJMX-UsingJMXtomanageApacheCamel;;;","10/Nov/11 17:14;bvahdat;I could reproduce your issue on the trunk through a 2 liner change of [1] as the following:

{code}
public class SedaConcurrentConsumersTest extends ContextTestSupport {

    public void testSendToSeda() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hello World"");

        template.sendBody(""seda:foo?concurrentConsumers=5"", ""Hello World"");

        assertMockEndpointsSatisfied();
        
        context.getRoutes().get(0).getConsumer().start();
        template.sendBody(""seda:foo?concurrentConsumers=5"", ""Claus absence today is a showstopper!"");
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""seda:foo?concurrentConsumers=5"").noAutoStartup().to(""mock:result"");
                
                from(""seda:foo?concurrentConsumers=5"").to(""mock:result"");
            }
        };
    }
}
{code}

Which blows up with a NPE exactly on the same place as yours:

{code}
2011-11-10 17:58:42,108 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is starting
2011-11-10 17:58:42,155 [main           ] INFO  AnnotationTypeConverterLoader  - Found 3 packages with 15 @Converter classes to load
2011-11-10 17:58:42,217 [main           ] INFO  LazyLoadingTypeConverter       - Loaded 163 core type converters (total 163 type converters)
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Cannot start route route1 as its configured with autoStartup=false
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Route: route2 started and consuming from: Endpoint[seda://foo?concurrentConsumers=5]
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Total 2 routes, of which 1 is started.
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.282 seconds
2011-11-10 17:58:42,358 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
2011-11-10 17:58:42,358 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2011-11-10 17:58:42,358 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2011-11-10 17:58:42,374 [#1 - seda://foo] ERROR SedaConsumer                   - Error processing exchange. Exchange[Message: Second Hello World]. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_29]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_29]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_29]
2011-11-10 17:58:43,374 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[seda://foo?concurrentConsumers=5]
2011-11-10 17:58:43,374 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 1 seconds
2011-11-10 17:58:43,374 [main           ] INFO  DefaultInflightRepository      - Shutting down with no inflight exchanges.
2011-11-10 17:58:43,374 [main           ] INFO  DefaultCamelContext            - Uptime: 1.329 seconds
2011-11-10 17:58:43,374 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is shutdown in 1.016 seconds
{code}

This is a clear evidence for me that while you start the drainer route, the main route is *still* running causing the NPE as a side effect.

Again IMHO you misuse the Camel's provided Java-DSL. See my previous comments on this ticket for a possible fix of it.

I leave the closing of this ticket to you, as to my understanding it's definitely *not* a bug but just a side effect of the API-misusage.

Good luck
Babak 





[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersTest.java;;;","10/Nov/11 18:50;tarjei@scanmine.com;Babak, thank you for working on this issue. 

As it stands, it is an api misuse, and I will close the bug.

T;;;","10/Nov/11 18:50;tarjei@scanmine.com;Closed as API misuse. ;;;","15/Nov/11 10:16;davsclaus;Regardless if its an API misuse etc. then Camel should shield itself better and report a IllegalArgumentException or IllegalStateException etc. with a better error description what is wrong.

We should generally avoid any NPE being thrown inside Camel code.;;;","15/Nov/11 10:26;bvahdat;Absolutely agree on that.;;;","15/Nov/11 11:12;davsclaus;The unit test above can be fixed if you start the route correctly using the startRoute method form CamelContext
;;;","15/Nov/11 11:14;davsclaus;Ah sorry I can still reproduce the NPE. Will try to add some configuration check.;;;","15/Nov/11 11:59;bvahdat;I think that the problem/challenge resides in the fact that camel-core doesn't realize that there's already another route consuming from the same URI (in this case the Seda consumer with multipleConsumers *not* enabled) if one of the routes is not autoEnabled and the other one is already up and consuming and one starts that not-autoEnabled route afterwards through the provided API.

However if both routes are already autoEnabled (which is the default) then this case gets caught correctly at the startup of the camel context:

{code}
org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed: Endpoint[seda://foo?concurrentConsumers=5]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1916)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1892)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1820)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1604)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1494)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1381)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1359)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:171)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:114)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
{code};;;","15/Nov/11 12:08;davsclaus;The NPE is now fixed and an error message is reported.

I created a new ticket for the check if multiple consumers is supported when manually starting a route.;;;",,,,,,,,,,,,,,,,,
NPE from DefaultCxfBinding when <soap:Body/> is null ,CAMEL-4649,12530844,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,xldai,xldai,09/Nov/11 10:18,09/Nov/11 13:42,14/Jul/23 05:45,09/Nov/11 13:42,2.8.2,,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-cxf,,,,0,,,,,,,,,"when got soap message from CXF component like this:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Header>
......
</soap:Header>
<soap:Body/>
</soap:Envelope>

the NPE will be thrown: 

18:04:51,255 | WARN  | tp1212500935-153 | ache.cxf.common.logging.LogUtils  372 |  -  -  | Interceptor for {http://airportsoap.sopera.de}airport#{http://airportsoap.sopera.de}getAirportInformationByISOCountryCode has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:395)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:103)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:80)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:323)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:289)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[141:org.apache.cxf.bundle:2.5.0]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:939)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:875)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.Server.handleAsync(Server.java:391)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:393)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)[54:org.eclipse.jetty.io:7.4.5.v20110725]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)[54:org.eclipse.jetty.io:7.4.5.v20110725]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)[53:org.eclipse.jetty.util:7.4.5.v20110725]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]


Looking into the source codes, before the line 395 of DefaultCxfBinding, the elements variable shoulde be checked if it's null.","Win 7, JDK1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216582,,,Wed Nov 09 13:42:35 UTC 2011,,,,,,,,,,,"0|i0228v:",9965,,,,,,,,,,,,,,,,,,,,"09/Nov/11 13:42;njiang;Applied patch with thanks to Xilai.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple expression does not find method toString(),CAMEL-4647,12530741,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,romanstumm,romanstumm,08/Nov/11 17:36,09/Nov/11 10:19,14/Jul/23 05:45,09/Nov/11 10:19,2.8.0,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"In a route builder, we have a log definition: 

from(""direct:testSimple"")
 .log(""${body.toString}"");

The body contains an object, that implements a public toString() method. But the problem is, that the simple-expression does not find the method toString() and route processing stops without throwing an exception.

The funny thing is, that when we just rename the method, e.g. toInfoString(), then it works:
from(""direct:testSimple"")
 .log(""${body.toInfoString}"");

Why does simple expression have a problem with a method named ""toString""?
",camel 2.8.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216479,,,Wed Nov 09 09:31:04 UTC 2011,,,,,,,,,,,"0|i0228f:",9963,,,,,,,,,,,,,,,,,,,,"09/Nov/11 09:31;davsclaus;Just do .log(""${body}"") as Camel will convert the body to a String which then triggers a type conversion -> String.

When using the OGNL support in the simple language it leverages it from the bean component, which excludes the methods from java.lang.Object by default. We should possible include the toString() method.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Stop or shutdown a route with a custom timeout value, will still log using the default timeout in the logs",CAMEL-4619,12530418,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Nov/11 11:19,05/Nov/11 11:32,14/Jul/23 05:45,05/Nov/11 11:32,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"If you stop a route with a custom time out value, then the graceful shutdown strategy will still use the default timeout value in the logs, so that information is not correct. For example if you have a short default value, but provide a higher timeout value, then you can have the log show negative timeout values.

INFO  DefaultShutdownStrategy        - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -14 seconds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,216156,,,2011-11-05 11:19:14.0,,,,,,,,,,,"0|i02227:",9935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
source jars missing in 2.9.0-RC1,CAMEL-4611,12530085,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,03/Nov/11 17:26,03/Nov/11 17:40,14/Jul/23 05:45,03/Nov/11 17:40,,,,,,,,,,,,,2.9.0,,,,,,,,0,,,,,,,,,"There are no source jars in the latest staged release https://repository.apache.org/content/repositories/orgapachecamel-137/org/apache/camel/camel-core/2.9.0-RC1/

Found this warning in the logs

{code}
[INFO] --- maven-source-plugin:2.1.2:jar-no-fork (attach-sources) @ camel-core ---
[WARNING] NOT adding sources to artifacts with classifier as Maven only supports one classifier per artifact. Current artifact [org.apache.camel:camel-core:bundle:2.9-SNAPSHOT] has a [] classifier.
{code}

which led me to FELIX-3058. Gonna back our maven-bundle-plugin version down to 2.3.4 shortly which resolves the issue. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,215944,,,Thu Nov 03 17:40:21 UTC 2011,,,,,,,,,,,"0|i0220f:",9927,,,,,,,,,,,,,,,,,,,,"03/Nov/11 17:40;janstey;Will be fixed when we actually cut the 2.9.0 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel ftp read file after close connection,CAMEL-4605,12529819,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexey-s,alexey-s,02/Nov/11 07:21,05/Nov/11 12:56,14/Jul/23 05:45,05/Nov/11 12:56,2.8.1,,,,,,,,,,,,2.8.3,2.9.0,,,camel-ftp,,,,0,,,,,,,,,"There is an error with ftp server. 
Many files on the server. All files have no time to be processed. 
When the processing of the next file, the process stops. 
Error - The request is a file after closing the connection. 

Camel config route: 
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
  xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
  xmlns:camel=""http://camel.apache.org/schema/blueprint""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  default-activation=""lazy"">

  <cm:property-placeholder persistent-id=""ccwe.exchange.oos"">
    <cm:default-properties>
      <cm:property name=""ftp.doc.url"" value=""ftp://mail01.zakupki.gov.ru/auto/organization/all/""/>
      <cm:property name=""ftp.doc.add_params"" value=""""/>
    </cm:default-properties>
  </cm:property-placeholder>
  
  <bean id=""readProcess"" class=""mypackage.docread.ReadProcess""/>

  <bean id=""routePolicy"" 
    class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""* 0/10 * * * ?""/>
    <property name=""routeStopTime"" value=""* 4/10 * * * ?""/>
  </bean>

  <camelContext id=""exchange-read"" 
     xmlns=""http://camel.apache.org/schema/blueprint"" autoStartup=""false"">
     
    <threadPoolProfile id=""fooProfile"" 
       poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>
       
    <route id=""readRoute"" 
      routePolicyRef=""routePolicy""
      shutdownRunningTask= ""CompleteAllTasks"">
      
      <from uri=""{{ftp.doc.url}}?noop=true&amp;binary=true{{ftp.doc.add_params}}""/>
      <to uri=""bean:readProcess""/>
    </route>
  </camelContext>
</blueprint>
{code}

We have two streams
bq. <threadPoolProfile id=""fooProfile"" poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>


The first thread (thread#0) reading file from ftp server
{code}
2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  261 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Processing file: GenericFile[organization_all_20111023_010003_33.xml.zip]
2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  293 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Retrieving file: auto/organization/all/organization_all_20111023_010003_33.xml.zip from: Endpoint[ftp://mail01.zakupki.gov.ru/auto/organization/all/?
binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]
{code}

The second stream (thread#1) is stopped
{code}
2011-11-02 09:14:00,004 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ScheduledPollConsumer            | camel.impl.ScheduledPollConsumer  265 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     This consumer is stopping, so cancelling scheduled task: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@2bf8d0a4
2011-11-02 09:14:00,005 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | pache.camel.impl.DefaultConsumer   83 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping consumer: FtpConsumer[ftp://mail01.zakupki.gov.ru/auto/organization/all/?binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]
2011-11-02 09:14:00,007 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ProcessorEndpoint$1              | pache.camel.impl.DefaultProducer   76 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping producer: Producer[bean://readProcess]
2011-11-02 09:14:00,010 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21
{code}

Warning!!!! ftp close connection. Completed method FTPClient.disconnect(). Parament _controlInput_ = null.

{code}
2011-11-02 09:14:03,182 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  460 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Route: readRoute shutdown complete, was consuming from: Endpoint[...]
2011-11-02 09:14:03,182 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  158 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Graceful shutdown of 1 routes completed in 3 seconds
{code}

The first thread (thread#0) continues reading the file [organization_all_20111023_010003_33.xml.zip].
{code}
2011-11-02 09:14:04,172 | ERROR | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | ache.camel.processor.CamelLogger  232 | 94 - org.apache.camel.camel-core - 2.8.1 | Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:295)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTP.getReply(FTP.java:622)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1408)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1467)[97:org.apache.commons.net:2.2]
	at org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory(FtpOperations.java:406)[99:org.apache.camel.camel-ftp:2.8.1]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,215678,,,Sat Nov 05 08:38:30 UTC 2011,,,,,,,,,,,"0|i021z3:",9921,,,,,,,,,,,,,,,,,,,,"03/Nov/11 13:00;alexey-s;Redefine the creation of a method of FTPClient FTPClient createFtpClient () class FtpEndpoint.
Add to the method displays the message
{code}
LOGGER.info(""create FTPClient {}"", client);
{code}

{code}
public class FTPClientTest extends FTPClient {
    private static final Logger LOGGER = LoggerFactory.getLogger(FTPClientTest.class);

    public FTPClientTest() {
        super();
    }

    @Override
    public void disconnect() throws IOException {
        LOGGER.info(""FTPClient disconnect {}"", this);
        super.disconnect();
    }

    @Override
    protected Socket _openDataConnection_(int command, String arg) throws IOException {
        LOGGER.info(""FTPClient _openDataConnection_ {}"", this);
        return super._openDataConnection_(command, arg);
    }

    @Override
    protected void _connectAction_() throws IOException {
        LOGGER.info(""FTPClient _connectAction_ {}"", this);
        super._connectAction_();
    }
}
{code}

We observe the creation of two FTPClient
{code}
2011-11-03 15:22:00,862 | INFO  | Blueprint Extender: 2 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
...
{code}
2011-11-03 15:22:01,213 | INFO  | Blueprint Extender: 1 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@738e7a09
{code}

Last post by FTPClient
{code}
2011-11-03 15:28:01,543 | INFO  | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FTPClientTest| nt.file.remote.ext.FTPClientTest   25 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient _openDataConnection_ org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
Note the number of object *FTPClientTest@2e81d81e*.

Begins to stop the second process (thread # 1):
{code}
2011-11-03 15:28:09,010 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  425 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Waiting as there are still 56 inflight and pending exchanges to complete, timeout in 291 seco
nds.
2011-11-03 15:28:10,004 | WARN  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  143 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Timeout occurred. Now forcing the routes to be shutdown now.
2011-11-03 15:28:10,004 | WARN  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy | ultShutdownStrategy$ShutdownTask  433 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Interrupted while waiting during graceful shutdown, will force shutdown now.
{code}

Completing the process (thread # 0):
{code}
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  103 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Service already stopped: org.apache.camel.impl.SharedProducerServicePool@50ec2522
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  108 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Stopping service DefaultErrorHandler[TraceInterceptor[To[bean:readProcess]]]
2011-11-03 15:28:10,011 | DEBUG | DefaultQuartzScheduler-exchange-read_Worker-1 | FtpConsumer | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21
2011-11-03 15:28:12,908 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | FTPClientTest | nt.file.remote.ext.FTPClientTest   19 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient disconnect org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
As you can see, the system is stopped *FTPClientTest@2e81d81e*. This object belongs to the first thread (thread # 0).
;;;","04/Nov/11 10:27;davsclaus;The FTPClient library is not threads safe.

Where do you use that thread pool profile?;;;","05/Nov/11 08:38;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Camel-ftp-read-next-file-after-close-connection-tp4952369p4952369.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Malformed URI fragment copied twice,CAMEL-4601,12529572,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,31/Oct/11 22:15,22/Dec/11 15:49,14/Jul/23 05:45,27/Nov/11 03:27,2.8.2,,,,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,0,,,,,,,,,"In URISupport.createURIWithQuery if the uri parameter contains a fragment but no query, the fragment is added a second time in the returned URI.

Fairly easy to fix if anybody wants to take a stab at it :).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Nov/11 20:01;bibryam;uri_fragment.diff;https://issues.apache.org/jira/secure/attachment/12505033/uri_fragment.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,215432,,,Sun Nov 27 03:27:27 UTC 2011,,,,,,,,,,,"0|i021y7:",9917,,,,,,,,,,,,,,,,,,,,"24/Nov/11 20:01;bibryam;A simple patch;;;","24/Nov/11 20:50;hadrian;Wasn't hard, was it? :);;;","27/Nov/11 03:27;hadrian;Patch applied with thanks to Bilgin.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Using Saxon to do XML split and xpath evaluation causes XPathExpression exception,CAMEL-4594,12529231,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/11 11:02,28/Oct/11 14:14,14/Jul/23 05:45,28/Oct/11 14:14,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-saxon,,,,0,,,,,,,,,"If you do a route like
{code}
                from(""direct:start"")
                    .split().xpath(""/persons/person"")
                    .choice()
                        .when().xpath(""person/city = 'London'"")
                            .to(""mock:london"")
                        .when().xpath(""person/city = 'Paris'"")
                            .to(""mock:paris"")
                        .otherwise()
                            .to(""mock:other"");
{code}

Then Saxon throws this exception
{code}
Caused by: javax.xml.xpath.XPathExpressionException: Supplied node must be built using the same or a compatible Configuration
	at net.sf.saxon.xpath.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:284)
	at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:677)
	... 77 more
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,215091,,,2011-10-28 11:02:26.0,,,,,,,,,,,"0|i021wn:",9910,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XPath will lock File input in case of an exception during xpath evaluation,CAMEL-4591,12529036,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/11 11:54,27/Oct/11 13:23,14/Jul/23 05:45,27/Oct/11 13:23,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"We have a similar issue with XPath, as we had with XSLT and XQuery.

If the message is a java.io.File and an exception occurs during evaluation, then that file is locked on Windows platforms.
We need to close the FileInputStream to unlock the file, and allow Windows to access the file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,214896,,,Thu Oct 27 13:13:01 UTC 2011,,,,,,,,,,,"0|i021vz:",9907,,,,,,,,,,,,,,,,,,,,"27/Oct/11 13:13;davsclaus;btw workaround is to convert the body to String.class beforehand.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XQuery component does not work with StAXSource out of the box,CAMEL-4584,12528738,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/11 19:11,26/Oct/11 07:26,14/Jul/23 05:45,26/Oct/11 07:26,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-saxon,,,,0,,,,,,,,,"The new STaXSource type converters cause camel-saxon to fail unit tests as reported by CI servers

Caused by: net.sf.saxon.trans.XPathException: Unknown source class
	at net.sf.saxon.Configuration.buildDocument(Configuration.java:2892)
	at net.sf.saxon.query.StaticQueryContext.buildDocument(StaticQueryContext.java:211)
	at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:474)

We should implement the same optimized logic as we did today in XSLT to convert to Source if StAX is allowed, as well to avoid leaking resources we need to ensure if InputStream is in use, we should ensure it gets closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,214598,,,Wed Oct 26 07:26:37 UTC 2011,,,,,,,,,,,"0|i021uf:",9900,,,,,,,,,,,,,,,,,,,,"26/Oct/11 07:26;davsclaus;Backported to 2.8.x due the new StAX converters which caused this new exception;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE using seda (with concurrentConsumers) and stream endopoints,CAMEL-4581,12528669,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,llt,llt,25/Oct/11 13:03,27/Oct/11 12:19,14/Jul/23 05:45,27/Oct/11 12:19,2.8.1,,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,,,,,0,,,,,,,,,"I found an issue with seda and stream endpoints. 
Using more then 1 concurrent consumers for seda and using ""stream:out"" as destination endopoint , I sometimes receive some NullPointerExceptions. 

This is how to reproduce the problem: 

context.addRoutes(new RouteBuilder() { 
  @Override 
   public void configure() throws Exception { 
        from(""seda:sendRequest?concurrentConsumers=10"") 
        .to(""stream:out""); 
   } 
}); 
context.start(); 

for ( int i = 0; i < 50000; i++ ) { 
        producer.sendBody(""seda:sendRequest"", String.format(""Message %d"", i)); 
} 

And this is one of the exceptions: 

2011-10-25 10:12:36,550 ERROR  [org.apache.camel.processor.DefaultErrorHandler] - Failed delivery for exchangeId: ID-localhost-51879-1319530353835-0-48591. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException 
java.lang.NullPointerException: null 
        at java.io.Writer.<init>(Writer.java:71) ~[na:1.6.0_26] 
        at java.io.OutputStreamWriter.<init>(OutputStreamWriter.java:113) ~[na:1.6.0_26] 
        at org.apache.camel.component.stream.StreamProducer.writeToStream(StreamProducer.java:135) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.stream.StreamProducer.process(StreamProducer.java:83) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:217) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129) [camel-core-2.8.1.jar:2.8.1] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26] 
        at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26] 


Lorenzo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,214529,,,Thu Oct 27 12:19:03 UTC 2011,,,,,,,,,,,"0|i021tr:",9897,,,,,,,,,,,,,,,,,,,,"27/Oct/11 09:45;njiang;I just checked the code, the StreamProducer is the member object of outputStream, that is the key of NPE.
 ;;;","27/Oct/11 12:19;njiang;Applied patch into trunk, camel-2.8.x, camel-2.7.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add option on XSLT to allow StAX,CAMEL-4579,12528659,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/11 12:22,25/Oct/11 13:21,14/Jul/23 05:45,25/Oct/11 13:04,2.8.2,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"With the new StAX converters you may convert to a StAXSource which is not supported by the XSLT transformer, and you get this exception

Caused by: org.apache.xml.dtm.DTMException: Not supported: javax.xml.transform.stax.StAXSource@14d556e
	at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:477)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:699)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1273)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1251)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:107)

We should add option on XSLT component to explicit enable StAX if the end user wants it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,214519,,,Tue Oct 25 13:21:48 UTC 2011,,,,,,,,,,,"0|i021tb:",9895,,,,,,,,,,,,,,,,,,,,"25/Oct/11 13:21;davsclaus;This also fixes a bug in 2.8.2 where you may see this exception.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy BindyFixedLength parser is not Thread Safe while marshalling.,CAMEL-4573,12528347,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,surya108,surya108,22/Oct/11 02:32,22/Oct/11 08:41,14/Jul/23 05:45,22/Oct/11 08:41,2.8.1,,,,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,0,patch,,,,,,,,"Camel Fixed Length Parser. Not Threadsafe, as instance variable private Map<Integer, List<String>> results; is being used while marshalling/unbinding. Inconsistencies in multithreaded environment causing data from different threads being used.

Very similar to BUG 4311 ( for KeyValuePair Parser)","linux, windows",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/11 02:36;surya108;camel_bindy_patch_4573;https://issues.apache.org/jira/secure/attachment/12500279/camel_bindy_patch_4573",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,113483,,,Sat Oct 22 08:41:50 UTC 2011,,,,,,,Patch Available,,,,"0|i021rz:",9889,,,,,,,,,,,,,,,,,,,,"22/Oct/11 02:36;surya108;Fixed the Code, Changed instance variable to local one so that it is thread safe.;;;","22/Oct/11 08:41;davsclaus;Thanks for the patch. I fixed the same issue in the CSV as well. So all three is now fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SLF4JLog does not work with JdbcDriver for Quickfix/J,CAMEL-4568,12528139,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eliotc,eliotc,21/Oct/11 04:52,25/Oct/11 08:07,14/Jul/23 05:45,24/Oct/11 13:57,2.8.0,,,,,,,,,,,,2.8.3,2.9.0,,,,,,,0,Quickfix,,,,,,,,"I discovered that to use SLF4J log, JdbcDriver cannot be present in the Quickfix/J config file. Otherwise, the default LogFactory - ScreenLogFactory will be used. We need JdbcDriver setting as it is used for persisting FIX messages into database for FIX session management.

After debugging the code, I found out that this could be fixed by swapping those two lines in QuickfixjEngine.java

298: isJdbcLog(settings, impliedLogFactories);
299: isSL4JLog(settings, impliedLogFactories);

Can we please have this fixed for the next release?",,,,,,,,,,,,,,,,,,,,,,CAMEL-3318,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,97521,,,Tue Oct 25 08:07:19 UTC 2011,,,,,,,,,,,"0|i021qv:",9884,,,,,,,,,,,,,,,,,,,,"21/Oct/11 08:45;njiang;Hi,

I just checked the code, it looks like Quickfix doesn't supports to let you configure two logger at the same time.
Which means even you switch the code let the JdbcDriver work, you still can't get the SLF4jLog work for you at the same time.
How about you just update configuration instead of changing the code.
;;;","24/Oct/11 13:57;njiang;Now the jdbcLog will be set when there is a setting on the JdbcSetting.SETTING_LOG_EVENT_TABLE.
If there more than one logFactory is configured, the QuickfixjEngine will throw a configuration exception for it.;;;","24/Oct/11 23:40;eliotc;Hi Willem,

Thanks for looking into this.

I don't think I have made our requirements clear.  What we need is being able to use SLF4JLog as the logFactory and at the same time use Jdbc as the MessageStoreFactory (we do NOT want to use jdbc logFactory).

The code intends to, as you mentioned, allow configuration of ONE logFactory and ONE MessageStoreFactory (defines where messages are persisted for session management). That is actually in line with what we want. 

However, because both logFactory and MessageStoreFactory share the same settings - JdbcDriver, it assumes that we intend to use jdbc logFactory even though the intention was to use jdbc for MessageStore hence it skipped the SLF4J setting (refer to isSL4JLog() method).

From what I observed, it does not throw an exception when more than one logFactoies are configured, it just skipped the logFactory setting once there is already one logFactory configured (see inferLogFactory() method).

That is why I proposed to switch those two lines in the code 

298: isJdbcLog(settings, impliedLogFactories);
299: isSL4JLog(settings, impliedLogFactories);

By switching those two lines, SL4J setting will be picked up as logFactory and jdbc setting will be ignored. However, jdbc setting will still be picked up as the MessageStoreFactory. Another solution is to have different jdbc setting for logFactory and MessageStoreFactory.
;;;","25/Oct/11 06:08;njiang;@Eliot

I already update the code and you can configure ONE logFactory with SL4JLog or ScreenLog with ONE MessageStoreFactory with jdbcDriver by default.

If you don't specify the JdbcSetting.SETTING_LOG_EVENT_TABLE,  QuickfixjEngine will not create a JdbcLogFactory for you.

;;;","25/Oct/11 06:27;eliotc;@Willem

Thanks for that! This fix will be in the next camel release, right?

Cheers,

Eliot;;;","25/Oct/11 08:07;njiang;Yes, it will be a part of camel-2.8.3 and camel-2.9.0.;;;",,,,,,,,,,,,,,,,,,,,,,,,
CxfComponent should create a new CxfEndpoint instance if the instance is lookup from configuration registry,CAMEL-4561,12527878,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Oct/11 06:11,20/Oct/11 15:02,14/Jul/23 05:45,20/Oct/11 15:02,,,,,,,,,,,,,2.8.3,2.9.0,,,,,,,0,,,,,,,,,"CAMEL-4503 shows the bug, when we have uri parameters which can override the configuration of cxfEndpoint, the instance of cxfEndpoint from the configuration file could be changed with the uri parameters if the CxfComponnet doesn't return a new instance of the cxfEndpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4503,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,92192,,,Thu Oct 20 15:02:08 UTC 2011,,,,,,,,,,,"0|i021pb:",9877,,,,,,,,,,,,,,,,,,,,"20/Oct/11 07:49;davsclaus;When you do a .clone() then it copies the List as a reference. So you could potentially make changes in one instance, that reflects the parent instance.

So when you clone then you need to do a deep-clone of the List etc. So its fully independent. See for example
https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java
;;;","20/Oct/11 10:39;dkulp;
Haven't looked at the config reg stuff, but could the namespace parser set the bean as prototype?  Then spring would create a new one each lookup.  Does that work with Camel?;;;","20/Oct/11 12:29;njiang;Hi Dan

Setting the bean scope to be prototype works great, now the tests are passed.
BTW, we can do the same setting in the blueprint parser.
;;;","20/Oct/11 13:18;dkulp;Willem,   cool.  Glad that works.   It really does make more sense.   the cxfEndpoint stuff in Camel is really more of a ""configuration of an endpoint"", not really an endpoint itself (like it is in CXF).  Thus, setting to prototype does make more sense.   I like the fix.  :-)

Dan;;;","20/Oct/11 15:02;njiang;Applied the patch into trunk and 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-file component does not close a file when it's used with camel-xslt,CAMEL-4560,12527722,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,19/Oct/11 10:04,21/Oct/11 18:31,14/Jul/23 05:45,21/Oct/11 18:31,2.8.1,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,camel-xslt,,,0,camel-file,,,,,,,,"Here are the steps to reproduce:

# Create the directory target/in.
# Put the file ""file.xml"" into the directory target/in. Note: the end tag in this file is not closed properly.
# Run the test.
# The test should fail.
# The file ""file.xml"" remains in the target/in but it should not.

{code:java|title=FileLockedTest.java}
package org.apache.camel;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class FileLockedTest extends CamelTestSupport {

    @Test
    public void testFileLocked() throws Exception {
        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.setAssertPeriod(10000);
        result.expectedMessageCount(1);
        result.assertIsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file:target/in?delay=100&moveFailed=.error"")
                    .onException(Throwable.class)
                        .to(""mock:result"")
                    .end()
                    .to(""xslt:FileLockedTest.xsl"");
            }
        };
    }

}
{code}

{code:xml|title=FileLockedTest.xsl}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsl:stylesheet
    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
    xmlns=""http://schemas.computershare.ru/codex/2011/08/""
    version=""1.0"">

    <xsl:output method=""xml"" encoding=""UTF-8"" omit-xml-declaration=""yes"" />
    <xsl:preserve-space elements=""*""/>

    <xsl:template match=""/"">
        <xsl:apply-templates />
    </xsl:template>

    <xsl:template match=""@* | node()"">
        <xsl:copy>
            <xsl:apply-templates select=""@* | node()"" />
        </xsl:copy>
    </xsl:template>

</xsl:stylesheet>
{code}
{code:xml|title=file.xml; Note: the end tag is not closed properly}
<root></root
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,89200,,,Fri Oct 21 18:31:46 UTC 2011,,,,,,,,,,,"0|i021p3:",9876,,,,,,,,,,,,,,,,,,,,"19/Oct/11 12:32;davsclaus;What JDK and OS are you using?;;;","19/Oct/11 13:11;szhemzhitsky;Win7 x64 Enterprise

java version ""1.6.0_21""
Java(TM) SE Runtime Environment (build 1.6.0_21-b07)
Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing);;;","21/Oct/11 14:53;davsclaus;Thanks for reporting. I have coded a fix on my windows box. Running tests in camel-core before committing.;;;","21/Oct/11 18:31;davsclaus;Thanks for reporting with such a a detail error report.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Need to specify the sl4j-api version in the camel maven archetypes,CAMEL-4559,12527718,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Oct/11 09:36,19/Oct/11 12:54,14/Jul/23 05:45,19/Oct/11 12:54,2.8.0,2.8.1,,,,,,,,,,,2.8.3,2.9.0,,,tooling,,,,0,,,,,,,,,"There are some third part dependencies will introduce other version of sl4j-api as CAMEL-4545 shows, we need to specify the sl4j-api in the pom.xml resource.",,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4545,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,89195,,,Wed Oct 19 12:54:44 UTC 2011,,,,,,,,,,,"0|i021ov:",9875,,,,,,,,,,,,,,,,,,,,"19/Oct/11 12:54;njiang;applied patch into trunk and 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-archerype-blueprint creates the blueprint file with a wrong name space location,CAMEL-4557,12527546,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,18/Oct/11 06:26,18/Oct/11 07:40,14/Jul/23 05:45,18/Oct/11 07:40,,,,,,,,,,,,,2.8.2,2.9.0,,,tooling,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,88757,,,Tue Oct 18 07:40:56 UTC 2011,,,,,,,,,,,"0|i021of:",9873,,,,,,,,,,,,,,,,,,,,"18/Oct/11 07:40;davsclaus;Backported to 2.8.2 as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyProducer creating new connection on every message,CAMEL-4556,12527524,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,maccamlc,maccamlc,18/Oct/11 00:49,08/Apr/12 12:55,14/Jul/23 05:45,08/Apr/12 12:55,2.8.1,,,,,,,,,,,,2.10.0,2.9.2,,,camel-netty,,,,0,,,,,,,,,"Using a NettyProducer without the disconnect=true configuration is causing the route to block after 10 messages on the to(""netty://tcp...."") call.

It appears that a new socket connection is created for every message, and then after 10 connections no new connection is allowed (must be a default thread pool limit?).

Using the disconnect=true option fixes the problem as a socket is connected, message sent, then disconnected. But this does not seem viable for implementations where that overhead is undesirable or where more than one response is expected on a channel.

--

This is a small Unit Test that shows the problem (http://camel.465427.n5.nabble.com/Camel-Netty-Producer-creating-new-connection-on-every-message-td4844805.html#none) 



package netty; 

import java.util.Arrays; 
import java.util.Collection; 
import java.util.concurrent.TimeUnit; 
import java.util.concurrent.atomic.AtomicBoolean; 
import java.util.concurrent.atomic.AtomicInteger; 

import junit.framework.TestCase; 

import org.apache.camel.CamelContext; 
import org.apache.camel.Exchange; 
import org.apache.camel.ExchangePattern; 
import org.apache.camel.Processor; 
import org.apache.camel.builder.RouteBuilder; 
import org.apache.camel.impl.DefaultCamelContext; 
import org.junit.Before; 
import org.junit.BeforeClass; 
import org.junit.Test; 
import org.junit.runner.RunWith; 
import org.junit.runners.Parameterized; 
import org.junit.runners.Parameterized.Parameters; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 

@RunWith(Parameterized.class) 
public class NettyTest extends TestCase 
{ 
    private final static Logger logger = LoggerFactory.getLogger(NettyTest.class); 
    private final static CamelContext serverContext = new DefaultCamelContext(); 

    private final CamelContext clientContext = new DefaultCamelContext(); 
    private final AtomicInteger responseCounter = new AtomicInteger(0); 
    private final AtomicBoolean passedTen = new AtomicBoolean(false); 

    private Boolean disconnectClient; 

    public NettyTest(Boolean disconnectClient) 
    { 
        this.disconnectClient = disconnectClient; 
    } 

    @Parameters 
    public static Collection<Object[]> configs() 
    { 
        return Arrays.asList(new Object[][] { { true }, { false } }); 
    } 

    @BeforeClass 
    public static void createServer() throws Exception 
    { 
        serverContext.addRoutes(new RouteBuilder() 
        { 
            @Override 
            public void configure() throws Exception 
            { 
                from(""netty:tcp://localhost:9000?sync=true&disconnectOnNoReply=false&allowDefaultCodec=true&tcpNoDelay=true&reuseAddress=true&keepAlive=false"") 
                        .setExchangePattern(ExchangePattern.InOut) 
                        .process(new Processor() { 

                            @Override 
                            public void process(Exchange exchange) throws Exception 
                            { 
                                Object body = exchange.getIn().getBody(); 
                                logger.info(""Request received : Value = {}"", body); 
                            } 
                            
                        }) 
                        .transform(constant(3)).stop(); 
            } 
        }); 

        serverContext.start(); 
    } 

    @Before 
    public void createClient() throws Exception 
    { 
        clientContext.addRoutes(new RouteBuilder() 
        { 
            @Override 
            public void configure() throws Exception 
            { 
                // Generate an Echo message and ensure a Response is sent 
                from(""timer://echoTimer?delay=1s&fixedRate=true&period=1s"") 
                        .setExchangePattern(ExchangePattern.InOut) 
                        .transform() 
                        .constant(2) 
                        .to(ExchangePattern.InOut, ""netty:tcp://localhost:9000?allowDefaultCodec=true&tcpNoDelay=true&reuseAddress=true&keepAlive=false&sync=true&disconnect="" + disconnectClient.toString()) 
                        .process(new Processor() 
                        { 
                            @Override 
                            public void process(Exchange exchange) throws Exception 
                            { 
                                Object body = exchange.getIn().getBody(); 
                                logger.info(""Response number {} : Value = {}"", 
                                        responseCounter.incrementAndGet(), body); 

                                if (responseCounter.get() > 10) { 
                                    passedTen.set(true); 
                                } 
                            } 

                        }).stop(); 
            } 
        }); 
    } 

    @Test 
    public void test() throws Exception 
    { 
        clientContext.getShutdownStrategy().setTimeout(1); 

        clientContext.start(); 

        logger.info(""Disconnect = {}"", this.disconnectClient); 

        Thread.sleep(TimeUnit.SECONDS.toMillis(15)); 

        clientContext.stop(); 

        assertTrue(""More than 10 responses have been received"", passedTen.get()); 
    } 
} ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,88722,,,Sun Apr 08 12:48:40 UTC 2012,,,,,,,,,,,"0|i021o7:",9872,,,,,,,,,,,,,,,,,,,,"08/Apr/12 12:48;davsclaus;This is now working on trunk where the connection will be re-used.

There is a slight API change, but I think it may be worthwhile to backport that to 2.9 branch. It only affects people who develop custom pipeline factories which should only be a few use-cases.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf endpoint should be able to determine soap version from incoming message,CAMEL-4553,12527443,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,17/Oct/11 12:43,20/Oct/11 10:02,14/Jul/23 05:45,20/Oct/11 10:02,,,,,,,,,,,,,2.8.3,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"more details from
http://camel.465427.n5.nabble.com/Camel-CXF-component-SOAP-1-1-amp-1-2-support-td4909456.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,88147,,,Thu Oct 20 10:02:01 UTC 2011,,,,,,,,,,,"0|i021nj:",9869,,,,,,,,,,,,,,,,,,,,"20/Oct/11 10:02;ffang;commit fix
http://svn.apache.org/viewvc?rev=1185978&view=rev for trunk
http://svn.apache.org/viewvc?rev=1186705&view=rev for 2.8.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[WebConsole Archetype] Unable to run with ""mvn jetty:run""",CAMEL-4545,12527191,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cexbrayat,cexbrayat,14/Oct/11 13:08,19/Oct/11 12:55,14/Jul/23 05:45,19/Oct/11 12:55,2.9.0,,,,,,,,,,,,2.8.3,2.9.0,,,tooling,,,,0,maven,patch,,,,,,,"If you install the camel-archetype-webconsole from the trunk (2.9-SNAPSHOT actually), and create a new project with it (""mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-webconsole -DarchetypeVersion=2.9-SNAPSHOT""), you can't run ""mvn jetty:run"".
There are conflicts with slf4j-api binding as you can see in the following logs

{code:xml} 
...
[main] ContextLoader ERROR Context initialization failed
java.lang.NoSuchMethodError: org.slf4j.helpers.MessageFormatter.format(Ljava/lang/String;Ljava/lang/Object;)Lorg/slf4j/helpers/FormattingTuple;
        at org.slf4j.impl.Log4jLoggerAdapter.info(Log4jLoggerAdapter.java:323)[slf4j-log4j12-1.6.1.jar:1.6.1]
...
{code} 

Running ""mvn dependencies:tree"" show that two versions of slf4j are loaded.

You can find with this issue a patch that exclude slf4j for activemq-camel, which solve the problem. 

But you then ran in the following problem

{code:xml}
... 
java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/mypath/.m2/repository/org/apache/camel/camel-web/2.9-SNAPSHOT/camel-web-2.9-SNAPSHOT.war!/WEB-INF/classes/
...
{code} 

Which can be solved by updating jetty-version to a more recent one (7.5.3.v20111011) in the parent pom ( issue [CAMEL-4544|https://issues.apache.org/jira/browse/CAMEL-4544] with patch)
",,davidkarlsen@gmail.com,,,,,,,,,,,,,,,,,,,,CAMEL-4544,CAMEL-4559,,,,,,,,,,,"19/Oct/11 07:12;cexbrayat;webconsole-archetype-issue.patch;https://issues.apache.org/jira/secure/attachment/12499649/webconsole-archetype-issue.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,85576,,,Wed Oct 19 12:55:50 UTC 2011,,,,,,,Patch Available,,,,"0|i021lr:",9861,Regression,,,,,,,,,,,,,,,,,,,"14/Oct/11 13:10;cexbrayat;To completely resolve this issue, 4544 needs to be fixed;;;","14/Oct/11 13:41;davidkarlsen@gmail.com;Could it be an idea to control the slf4j version for all camel modules via the dependencyManagement section in the topmost pom?;;;","19/Oct/11 09:38;njiang;I just did some test by adding the dependency of sl4j-api in the archetype pom, the webconsole can be started without any trouble.
so I created a new JIRA CAMEL-4559 to updated all other camel archetype.;;;","19/Oct/11 12:55;njiang;This issue is fixed by CAMEL-4559.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Can't find splitter bean in registry using multiple camel contexts with ""vm"" endpoint",CAMEL-4542,12526990,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,berndfischer63,berndfischer63,13/Oct/11 08:38,14/Nov/11 15:35,14/Jul/23 05:45,14/Oct/11 11:14,2.8.0,2.8.1,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,newbie,test-patch,,,,,,,"The splitter component can use a bean with a ""split method"". It seems that this ""split bean"" is handled as expression and resolved lately using Camel Context from current exchange.

If I send an exchange using a separate CamelContext (""client"")

<camelContext id=""client"" xmlns=""http://camel.apache.org/schema/spring"">
</camelContext>

to a route defined in another CamelContext (""server"") using in-memory transport like ""direct"" or ""vm""

<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">

   <route id=""route02"" trace=""false"" streamCache=""false"">
     <from uri=""vm:route02""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route02""/>
   </route>

</camelContext>

the test fails with 

""Cannot find class: stringLineSplitter"" (Camel 2.8.0). 
""org.apache.camel.NoSuchBeanException - No bean could be found in the registry for: stringLineSplitter"" (Camel 2.9-SNAPSHOT)

If I understood Camel right it fails
because it tries to resolve this bean based on client Camel Context
which is still set at the current exchange send from ""client"" to ""server"" but it
doesn't contain the bean.

If I send an exchange using same ""client"" CamelContext to another route in
""server"" CamelContext involving ""external"" components like ""jms"" (ActiveMQ)

<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">

   <route id=""route03"" trace=""false"" streamCache=""false"">
     <from uri=""jms:queue:route03""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route03""/>
   </route>

</camelContext>

the test passed successfully. It seems that ""jms"" component creates a
new exchange using ""server"" CamelContext.
","OS    - Windows XP 32 Bit
Java  - Sun 1.6_26
Camel - 2.8.0/2.8.1/2.9-SNAPSHOT",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Oct/11 08:43;berndfischer63;MethodCallExpression.java.diff;https://issues.apache.org/jira/secure/attachment/12498862/MethodCallExpression.java.diff","13/Oct/11 08:43;berndfischer63;testcase.zip;https://issues.apache.org/jira/secure/attachment/12498861/testcase.zip",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,85304,,,Fri Oct 14 13:05:59 UTC 2011,,,,,,,Patch Available,,,,"0|i021l3:",9858,,,,,,,,,,,,,,,,,,,,"13/Oct/11 08:43;berndfischer63;unit test (mvn project) and patch hopefully solving the problem;;;","14/Oct/11 13:05;njiang;Applied patch with thanks to Bernd and added a new unit test for it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to convert jms textmessage to bytemessage,CAMEL-4540,12526884,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,preben,preben,12/Oct/11 18:00,15/Oct/11 10:57,14/Jul/23 05:45,15/Oct/11 10:57,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,0,,,,,,,,,"When receiving a jms textmessage and just forward it to a another queue as a jms bytemessage the original textmessage is sendt without being converted to a jms bytemessage. 

JmsBinding.makeJmsMessage seems to use the exchange headers to determine of a new jms message should be created or the original send.
Exchange headers seems to be populated if you do routing or set a dummy header.

See http://camel.465427.n5.nabble.com/Convert-jms-message-from-textmessage-to-bytemessage-tc4895362.html

/preben","Linux, Windowns",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Oct/11 15:38;preben;jmsbug.zip;https://issues.apache.org/jira/secure/attachment/12499051/jmsbug.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,74252,,,Sat Oct 15 09:43:21 UTC 2011,,,,,,,,,,,"0|i021kn:",9856,,,,,,,,,,,,,,,,,,,,"14/Oct/11 15:38;preben;testcase showing the problem;;;","15/Oct/11 09:31;davsclaus;What is your use-case as its a really odd to pickup a TextMessage and route it directly as a BytesMessage.;;;","15/Oct/11 09:43;preben;Year I know this case is unusual.

We have a hub and spokes design integrating different systems.
One component is responsible for taking events/messages from system A -> put it on the hub (jms queue/topic), and one outbound component is responsible for picking up from the hub queue -> sending to system B,C ...

In this case the outbound component receives a textmessage on the hub and just have to send a bytemessage to the receiving system B's bytemessage queue without doing any routing. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Using AuthorizationPolicy on a Route prevents Processors from being exposed via JMX,CAMEL-4536,12526679,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marcozapletal,marcozapletal,11/Oct/11 15:51,23/Oct/11 13:37,14/Jul/23 05:45,23/Oct/11 13:37,2.8.1,,,,,,,,,,,,2.8.3,2.9.0,,,jmx,,,,0,,,,,,,,,"Using AuthorizationPolicy on a route (e.g., using .policy(myAuthPolicy) in a Java DSL) prevents that processors on this route are exposed via JMX. 

Steps to reproduce:

-) Start the Camel app in the attached test case (MyRouteBuilder)
-) Open JConsole
-) Connect to the corresponding local process
-) Under ""processors"" only the processors from the route without the policy are shown, but not the ones from the route where a policy is used","Windows 7, Java 1.6.0_23",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Oct/11 15:55;marcozapletal;ASF.LICENSE.NOT.GRANTED--JConsole screenshot showing only the processors of the route that does not use a policy.jpg;https://issues.apache.org/jira/secure/attachment/12498618/ASF.LICENSE.NOT.GRANTED--JConsole+screenshot+showing+only+the+processors+of+the+route+that+does+not+use+a+policy.jpg","11/Oct/11 15:52;marcozapletal;policy-jmx-test.zip;https://issues.apache.org/jira/secure/attachment/12498617/policy-jmx-test.zip",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,59317,,,Sun Oct 23 13:37:55 UTC 2011,,,,,,,,,,,"0|i021jr:",9852,,,,,,,,,,,,,,,,,,,,"23/Oct/11 13:37;davsclaus;Thanks for reporting with sample application.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad endpoint in examples in documentation JMS Component,CAMEL-4534,12526575,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,iocanel,kborgul,kborgul,11/Oct/11 08:24,11/Oct/11 13:41,14/Jul/23 05:45,11/Oct/11 13:41,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,,,,"Adress: http://camel.apache.org/jms.html

In section: ""Request-reply over JMS and using a shared fixed reply queue""
is: .inOut().to(""activemq:queue:foo?replyTo=bar?receiveTimeout=250"")
should be: .inOut().to(""activemq:queue:foo?replyTo=bar&receiveTimeout=250"")

The same in ""Request-reply over JMS and using an exclusive fixed reply queue""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,58991,,,Tue Oct 11 13:41:43 UTC 2011,,,,,,,,,,,"0|i021jb:",9850,,,,,,,,,,,,,,,,,,,,"11/Oct/11 13:41;iocanel;Updated the documentation. 

Thanks for reporting Krzystof!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown when connection is null loses root cause,CAMEL-4533,12526511,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jbonofre,stu.c,stu.c,10/Oct/11 20:34,12/Oct/11 07:48,14/Jul/23 05:45,12/Oct/11 07:48,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-jdbc,,,,0,,,,,,,,,"When attempting to run a query against a datasource to which a connection could not be established, the attempt to rollback the transaction (which has not yet started) causes an NPE to be thrown which loses the root cause exception thrown by the driver",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/11 20:37;stu.c;camel-4533.txt;https://issues.apache.org/jira/secure/attachment/12498463/camel-4533.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,56967,,,Wed Oct 12 07:48:32 UTC 2011,,,,,,,Patch Available,,,,"0|i021j3:",9849,,,,,,,,,,,,,,,,,,,,"12/Oct/11 07:47;jbonofre;Fixed on trunk: revision 1182244.;;;","12/Oct/11 07:48;jbonofre;Fixed on camel-2.8.x: revision 1182245.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms - When useMessageIDAsCorrelationID an timeout occurs due no reply message, then old correlationID is not evicted from dynamic reply selector",CAMEL-4530,12526371,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/11 12:21,25/Oct/11 11:36,14/Jul/23 05:45,09/Oct/11 12:50,2.6.0,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-jms,,,,0,,,,,,,,,"If you use both fixed reply queues and have useMessageIDAsCorrelationID=true, then the dynamic MessageSelectorCreator may not evict the correlationID causing the JMSMessage selector to keep growing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,50938,,,2011-10-09 12:21:22.0,,,,,,,,,,,"0|i021if:",9846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProduder should not ignore the query part of HTTP_URI header,CAMEL-4526,12526324,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Oct/11 13:43,10/Oct/11 13:44,14/Jul/23 05:45,10/Oct/11 13:44,2.5.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-http,,,,0,,,,,,,,,"Here is the mail thread discusses about it.
http://camel.465427.n5.nabble.com/Query-part-of-HTTP-URI-header-ignored-td4880040.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,50591,,,Mon Oct 10 13:44:43 UTC 2011,,,,,,,,,,,"0|i021hj:",9842,,,,,,,,,,,,,,,,,,,,"10/Oct/11 13:44;njiang;Applied patch into trunk and camel-2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
simple predicate fails to introspect the exception in an onException clause using onWhen,CAMEL-4513,12525682,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,thomasgueze,thomasgueze,04/Oct/11 15:04,10/Apr/12 11:56,14/Jul/23 05:45,23/Oct/11 14:23,,,,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,0,,,,,,,,,"The bug occured in the 2.6.0 version of Camel I'm using. I haven't test it against the latest version but I've checked the sources and it doesn't seem to have change since.

Given a camel route, with a onException clause like this :

{code}
this.onException(MyException.class)
    .onWhen(simple(""${exception.myExceptionInfo.aValue} == true""))
    ...
{code}

MyException is a customed exception like this :

{code:title=MyException.java}
public class MyException extends Exception {
   ....
   public MyExceptionInfo getMyExceptionInfo() {
     ...
   }
}
{code}

What I've observed is that when BeanExpression.OgnlInvokeProcessor.process iterate through the methods to calls, it does :
{code}
                // only invoke if we have a method name to use to invoke
                if (methodName != null) {
                    InvokeProcessor invoke = new InvokeProcessor(holder, methodName);
                    invoke.process(resultExchange);

                    // check for exception and rethrow if we failed
                    if (resultExchange.getException() != null) {
                        throw new RuntimeBeanExpressionException(exchange, beanName, methodName, resultExchange.getException());
                    }

                    result = invoke.getResult();
                }
{code}

It successfully invoke the method : invoke.process(resultExchange);
But it checks for exception in the exchange. Since we are in an exception clause, there is an actual exception (thrown by the application, but unrelated with the expression language search) and it fails

There is a simple workaround for that : writing his own predicate class to test wanted conditions",,,,,,,,,,,,,,,,,,CAMEL-5156,,,,,,CAMEL-5156,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,44381,,,Sun Oct 23 14:23:54 UTC 2011,,,,,,,,,,,"0|i021en:",9829,,,,,,,,,,,,,,,,,,,,"23/Oct/11 14:23;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel flatpack component drops all headers from the original message,CAMEL-4510,12525601,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,dragisak,dragisak,03/Oct/11 23:30,23/Oct/11 10:28,14/Jul/23 05:45,23/Oct/11 10:27,2.8.1,,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-flatpack,,,,0,flatpack,,,,,,,,"In the simple example:

{code}
from(""file:/foo.csv"")
   .setHeader(""MyHeader"", constant(""Hello""))
   .to(""flatpack:foo"");

from(""flatpack:foo"")
   .to(""bean:importer"");
{code}

Header ""MyHeader"" is not being passed to the bean in the second route.

Looking at Camel Flatpack code I see that in {{FixedLengthEndpoint.processDataSet}} it creates an exchange object from scratch and, thus, looses any incoming headers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,43965,,,Sun Oct 23 10:28:47 UTC 2011,,,,,,,,,,,"0|i021dr:",9825,,,,,,,,,,,,,,,,,,,,"04/Oct/11 06:36;muellerc;Hello Dragisa!
Thanks for reporting. Do you consider to provide a patch for it?
Best,
Christian;;;","04/Oct/11 16:57;dragisak;If I get some time, I'll try to submit a patch. Currently I have a workaround for this.;;;","21/Oct/11 22:32;muellerc;Committed to trunk with revision r1187582;;;","23/Oct/11 10:11;muellerc;Committed to branch 2.8.x with revision r1187857;;;","23/Oct/11 10:21;muellerc;Committed to branch 2.7.x with revision r1187859;;;","23/Oct/11 10:28;muellerc;Hello Dragisa!
It would be great if you could test whether this patch fix your issue.
Best,
Christian;;;",,,,,,,,,,,,,,,,,,,,,,,,
Header not set after dead letter queue handles unmarshal error,CAMEL-4509,12525539,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,roytruelove@gmail.com,roytruelove@gmail.com,03/Oct/11 15:37,05/Oct/11 09:46,14/Jul/23 05:45,05/Oct/11 09:46,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"We have a route which unmarshals a soap msg into an object.  On that route is a dead letter queue error handler.  That DLQ sets headers on the message used later for error reporting.

If the error is thrown by the marshaller, the *first header* that we try to set is wiped out.  The 2nd header is set with no problem.  If an error is thrown by something other than the marshaller, the correct headers are set.

See attached project with failed test case (canSetHeadersOnBadXmlDeadLetter)","Java version: 1.6.0_11, vendor: Sun Microsystems Inc.
OS name: ""windows xp"", version: ""5.1"", arch: ""x86"", family: ""windows""
",roytruelove@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Oct/11 15:38;roytruelove@gmail.com;marshalBug.zip;https://issues.apache.org/jira/secure/attachment/12497477/marshalBug.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,43812,,,Wed Oct 05 09:46:50 UTC 2011,,,,,,,,,,,"0|i021dj:",9824,,,,,,,,,,,,,,,,,,,,"03/Oct/11 15:38;roytruelove@gmail.com;Added full maven project with failing unit test;;;","03/Oct/11 16:36;roytruelove@gmail.com;WORKAROUND:  have the first step in the DLQ route set a header that's not intended for use.  This will 'reset' the exchange and the next header will be set.;;;","05/Oct/11 09:46;davsclaus;The work around is either to set the header 2 times, or have a noop operation at first, such as a log, or an empty processor.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient List cannot vary destination by changing property in an expression,CAMEL-4503,12525193,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,29/Sep/11 14:50,21/Oct/11 09:42,14/Jul/23 05:45,21/Oct/11 09:42,2.8.1,,,,,,,,,,,,2.8.3,2.9.0,,,,,,,0,,,,,,,,,"This is probably due to producers being cached based on unresolved endpoint URI, rather than the resolved endpoint URI. Haven't tested this theory out though.

See message on user list http://markmail.org/message/sdysp6sspq5lomf4",,achim_nierbeck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4561,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,40003,,,Fri Oct 21 09:42:24 UTC 2011,,,,,,,,,,,"0|i021c7:",9818,,,,,,,,,,,,,,,,,,,,"29/Sep/11 14:59;janstey;IRC chat on this here http://irclogs.dankulp.com/logs/irclogger_log/karaf?date=2011-09-29,Thu&sel=335#l331;;;","05/Oct/11 07:29;achim_nierbeck;Unfortunately I just realized that the mentioned workaround doesn't work :(

I'm investigating why it isn't I'm down to the following right now: 

answer = endpoints.get(getEndpointKey(uri));

in DefaultCamelContext does give me the wrong Endpoint, at least it's bound to the wrong URI. 

it's called from 

endpoint = resolveEndpoint(exchange, recipient);

in RecipientListProcessor.createProcessorExchangePairs(...)

The following scenario doesn't work right now for the workaround, this might be a different bug though: 
- Recipient A is resolved the way it should work and can be called
- if Recipient B is questioned it also works and can be used. 
- if Recipient A is questioned from the cache again, Recipient B is provided and therefore the requests end up 
  on the wrong host. 

I also added a comment to the mailing-list about this. ;;;","19/Oct/11 15:52;davsclaus;Okay the bug seems to be in camel-cxf, in CxfComponent.createEndpoint. As it return the same endpoint instance even though the ?address is different.;;;","19/Oct/11 16:09;davsclaus;CAMEL-4139 causes this problem, it will lookup existing bean by its id, and reuse that as CxfEndpoint.
Even if CxfComponent is creating a new CxfEndpoint.

It seems the problem is that if you omit the address in the <cxf:cxfEndpoint> in the XML file.
And then you want to use that <cxf:cxfEndpoint> bean but specific the address at runtime. Then CxfComponent
will still hand out a shared CxfEndpoint. 

It guess the tricky part is that with cxf:bean:xxx you refer to a bean, and then you *also* provide additional configurations which should override.
This seems a hard path to support. Maybe cxf:bean:xxx should be made to not accept any parameters at all, if that makes sense.

Alternative the cxf:bean:xxx should be sort of a template, and then being able to create ""clones"" of itself.;;;","20/Oct/11 05:04;njiang;In most case the configure of cxfEndpoint bean will not be changed, it should be OK if you just reuse the bean endpoint.
If there are some parameter which can be used to override the configuration in the endpoint uri, we could clone a new endpoint to use.;;;","20/Oct/11 07:47;davsclaus;Willem I have committed an unit tests that reproduces the issue
tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxf2Test.java

With your recent fix on trunk (eg the clone) the problem with picking up the wrong bean is resolved as far.
But we get a NPE exception later.

{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.prepareRequest(CxfProducer.java:168)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:89)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:321)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:212)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:575)
{code}

The CxfBinding is null on the endpoint. So I guess a little more fix is needed. Do you mind digging into this?;;;","20/Oct/11 08:13;njiang;@Claus
That's my bad, I will update the copy method of CxfEndpoint by setting the list reference with a deep copy one.;;;","20/Oct/11 09:02;njiang;The NPE is caused by the clone method of CxfEndpoint, as you know CxfEndpoint extends the ServiceSupport object which has lots of AutomBoolean objects.
If the CxfEndpoint instance is started, the cloned CxfEndpoint will not start again.
It looks like calling the clone method is not a idea way to resolve such issue. I'm still looking for a good solution. ;;;","21/Oct/11 09:42;njiang;This is fixed by CAMEL-4561;;;",,,,,,,,,,,,,,,,,,,,,
dataCoding not working properly in camel-smpp,CAMEL-4491,12524817,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ljb,ljb,27/Sep/11 08:14,25/Oct/11 13:11,14/Jul/23 05:45,25/Oct/11 13:11,2.7.0,2.8.0,2.9.0,,,,,,,,,,2.9.0,,,,camel-smpp,,,,0,,,,,,,,,"This is related to CAMEL-3093.

The way the dataCoding option works is incorrect (or at least very confusing). After reading the documentation I was under the impression that the given value would be used in the data_coding-part of the submit_sm PDU-packets, but this is not the case. When 0 is given as dataCoding 0x11 (hexadecimal) is sent in the PDU-packets. If 4 is specified 0x15 is sent, and if 8 is specified then 0x19 is sent. This is caused in SmppProducer by the use of the constructor with several parameters:
{code}
new GeneralDataCoding(
        false,
        true,
        MessageClass.CLASS1,
        Alphabet.valueOf(submitSm.getDataCoding()))
{code}
It constructs a DCS-value as defined in the GSM 03.38 specification, not as specified in the SMPP specification. 0x11 is for example a valid DCS-value in GSM 03.38, but is reserved in SMPP. I think that it would be better and more logical if the constructor with one parameter was used instead:
{code}
new GeneralDataCoding(submitSm.getDataCoding())
{code}

This is more flexibal (DCS-values can still be created manually) and is a better default value (0 instead of 0x11). With my SMS-center (this probably varies between centers though) a data_coding of 0x11 forces me to do the 7-bit GSM decoding myself. When 0 is specified (or 3) all I have to do is to pass it ISO-8859-1 encoded bytes.",,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4086,,,,,,,,,,"27/Sep/11 08:15;ljb;patch.txt;https://issues.apache.org/jira/secure/attachment/12496648/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,17190,,,Tue Oct 25 13:10:35 UTC 2011,,,,,,,Patch Available,,,,"0|i0219b:",9805,,,,,,,,,,,,,,,,,,,,"21/Oct/11 21:37;muellerc;Hello Jonas!

A few days ago I committed a patch to this component to allow sending multilingual and multipart messages: [CAMEL-4086|https://issues.apache.org/jira/browse/CAMEL-4086]

It would be great if you could test whether this fix also your issue. You can find our latest SNAPSHOTS [here|https://repository.apache.org/content/repositories/snapshots/]. I still have to update the WIKI pages which should be done after the weekend.

Best,
Christian;;;","25/Oct/11 09:08;ljb;I have now done some testing with the SNAPSHOT-version and so far it works great. With the new version, the only thing I have to do is to pass it strings. Even with the default values I don't have to do any extra work myself.;;;","25/Oct/11 13:10;muellerc;Jonas, thank you very much. I really appreciate it.
I will close this issue, because it looks like it's solved with CAMEL-4086. Feel free to reopen this issue or open a new one if you have problems again.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 sends out a 'http4' GET request,CAMEL-4489,12524630,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,fedexp,fedexp,26/Sep/11 13:23,25/Oct/11 11:35,14/Jul/23 05:45,09/Oct/11 14:52,,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-http,,,,0,http,http4,,,,,,,"When I try to do : from(""http4://www.google.com/"").to(""mock:results"") using apache camel-http4 scheme, a GET request is being sent out with 'http4' as the protocol - my proxy server fails to understand this as a protocol. 

This is what the log looks like: 

  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (RequestAddCookies.java132) - CookieSpec selected: best-match
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (RequestAuthCache.java75) - Auth cache not set in the context
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultRequestDirector.java643) - Attempt 1 to execute request
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java264) - Sending request: GET http4://www.google.com/ HTTP/1.1
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""GET http4://www.google.com/ HTTP/1.1[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""Host: www.google.com[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""Proxy-Connection: Keep-Alive[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - >> ""[\r][\n]""
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java268) - >> GET http4://www.google.com/ HTTP/1.1
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java271) - >> Host: www.google.com
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (DefaultClientConnection.java271) - >> Proxy-Connection: Keep-Alive
  DEBUG [Camel (camel-1) thread #0 - http4://www.google.com/] (Wire.java63) - << ""HTTP/1.1 502 Proxy Error 



","Windows XP, JDK 1.6",fedexp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,779,,,Wed Sep 28 08:43:36 UTC 2011,,,,,,,,,,,"0|i0218v:",9803,,,,,,,,,,,,,,,,,,,,"26/Sep/11 20:39;fedexp;I checked the same code from a non-proxy env and it seems to work fine. 
In my proxy environment however, ethereal trace tells me that a request for http4://www.google.com is being sent to the proxy!;;;","27/Sep/11 08:06;davsclaus;Josh what are you trying to archive?

from(""http4:xxx"") will repeatable invoke a HTTP GET to that external url, and route the response as a message. What is your use case for doing that? ;;;","27/Sep/11 10:18;fedexp;Claus, Did you mean to ask - what am I trying to achieve? 
I am trying to read from a streaming http url... I know polling it won't help coz, I would need to have a connection open and kept-alive (I'll have to find a way around it). 

The issue here is that camel is sending a ""GET *http4*://www.google.com"" instead of ""GET *http*://www.google.com"" - this happens only when I use it in my proxy environment. I am not sure what the issue is, coz httpclient 4 works perfectly fine when used standalone, using the same proxy.;;;","27/Sep/11 10:22;fedexp;I can confirm it coz, I've used a packet sniffer  (ethereal) and observed the GET request and it is indeed a http4 protocol and not http - I can attach the trace if you want.;;;","27/Sep/11 10:47;davsclaus;I think Willem have fixed this on trunk. There is a commit
http://svn.apache.org/viewvc?rev=1176274&view=rev;;;","27/Sep/11 10:54;njiang;Hi Josh,

Can you try the patch that I just committed? you can merge it into the camel version that you are using without any trouble :).
I will merge the patch to the other branch of camel.

Willem
;;;","27/Sep/11 12:28;njiang;committed the patch into trunk, camel-2.8.x, camel-2.7.x.;;;","27/Sep/11 16:04;fedexp;I tried with the patch, it does not work. I did something to make it work, but I'll leave it to you to figure out what the issue is.

I see the changes you've made, but that doesn't change what is returned here:

In HttpPollingConsumer.java:

{code} protected HttpRequestBase createMethod() 
   {
        String uri = endpoint.getEndpointUri();
        return new HttpGet(uri);
    }
{code}

I had a debug point here on String uri=endpoint.getEndpointUri(); and I noticed that it pointed to 'http4://www.google.com' and to make it work, I changed the uri to ""http://www.google.com"" (during debug) and it returned the correct response (HTTP 200). 

;;;","27/Sep/11 16:06;fedexp;what you really need to fix, I believe, is the EndPoint URI. It cannot contain a http4 instead of http as protocol.
Your changes were made to HttpEndPoint and HttpProducer files, but somehow my code never breaks in HttpProducer, instead it goes to HttpPollingConsumer all the time - may be you should look here to fix this issue?;;;","28/Sep/11 08:04;njiang;Hi Josh,

I'm sorry I didn't check all the path that could effect the http method url.
After went through the code and I found a way to verify my change and find a minor issue of http component.

I will commit a better patch shortly.

Willem;;;","28/Sep/11 08:12;fedexp;Willem, 

Thank you. I will look forward to your patch.;;;","28/Sep/11 08:15;fedexp;I've an out-of-context question here... I understand that by default the HttpConsumer polls the target website, but how do I make it work in a 'http streaming' scenario? For instance, say you are connected to a twitter stream, which keeps pushing chunked data on a http connection that you would keep open, how would I handle this scenario using camel? ;;;","28/Sep/11 08:43;njiang;Hi Josh,

I don't think current HttpConsumer support this 'http streaming' out of box.
You may take a look at the camel-cometd component to see if it can do the job for you.

Willem;;;",,,,,,,,,,,,,,,,,
MockEndpoint should reset defaultProcessor,CAMEL-4487,12524545,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,25/Sep/11 00:56,25/Oct/11 11:36,14/Jul/23 05:45,25/Sep/11 08:10,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-core,,,,0,,,,,,,,,Thanks for the patch. I added unit test as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Sep/11 00:56;szhemzhitsky;MockEndpoint.patch;https://issues.apache.org/jira/secure/attachment/12496375/MockEndpoint.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,3342,,,Sun Sep 25 08:10:27 UTC 2011,,,,,,,Patch Available,,,,"0|i0218f:",9801,,,,,,,,,,,,,,,,,,,,"25/Sep/11 08:10;davsclaus;Thanks for the patch. I added an unit test as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions are not propagated to the parent route when endpoint cannot be resolved in the RoutingSlip EIP,CAMEL-4486,12524543,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,25/Sep/11 00:12,25/Sep/11 17:39,14/Jul/23 05:45,25/Sep/11 17:39,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"Here is the unit test to reproduce the issue

{code}
package org.test;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class RecipientListTest extends CamelTestSupport {

    public static class Router {
        public String findEndpoint() {
            return ""unresolved://endpoint"";
        }
    }

    @Test
    public void recipientList() throws Exception {
        MockEndpoint endpoint = getMockEndpoint(""mock://error"");
        endpoint.expectedMessageCount(1);

        sendBody(""direct://parent"", ""Hello World!"");

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct://parent"")
                    .onException(Throwable.class)
                        .to(""mock://error"")
                    .end()
                    .to(""direct://child"");

                from(""direct://child"")
                    .errorHandler(noErrorHandler())
                    .routingSlip(bean(Router.class));
            }
        };
    }

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,3455,,,Sun Sep 25 17:39:20 UTC 2011,,,,,,,,,,,"0|i02187:",9800,,,,,,,,,,,,,,,,,,,,"25/Sep/11 17:39;davsclaus;Thanks for reporting and having a re-produceable unit test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Using custom expression in RecipientList EIP which throws exception, is not triggering onException",CAMEL-4484,12524512,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/11 11:07,08/Feb/12 06:01,14/Jul/23 05:45,25/Sep/11 07:45,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,Similar issue as CAMEL-4482 but for the recipient list EIP,,tmielke,,,,,,,,,,,,,,,,,,,,,,CAMEL-4485,CAMEL-4991,,,,,,,,,"07/Feb/12 09:14;tmielke;CAMEL-4484-testcase.tgz;https://issues.apache.org/jira/secure/attachment/12513589/CAMEL-4484-testcase.tgz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,3480,,,Wed Feb 08 06:01:37 UTC 2012,,,,,,,,,,,"0|i0217r:",9798,,,,,,,,,,,,,,,,,,,,"07/Feb/12 09:14;tmielke;I would like to reopen this bug. 
Attached is a testcase CAMEL-4484-testcase.tgz that still fails.
This JUnit test loads a Camel route that uses a dynamic <recipientList>. If it fails to route the msg to an endpoint, the configured error handler is not called. 

;;;","08/Feb/12 05:07;davsclaus;I am looking into this.;;;","08/Feb/12 06:01;davsclaus;I created a new ticket as this ticket is not the same about the issue reported by Torsten.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Using custom expression in Splitter EIP which throws exception, is not triggering onException",CAMEL-4482,12524509,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/11 07:49,27/Nov/11 14:25,14/Jul/23 05:45,24/Sep/11 09:49,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Global-exception-not-invoked-in-case-of-Exception-fired-while-iterating-through-File-Splitter-td4826097.html

We should detect exceptions occurred during evaluation of the expression, and then cause the splitter EIP to fail asap.",,davidkarlsen@gmail.com,,,,,,,,,,,,,,,,,,CAMEL-4483,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13758,,,Sun Nov 27 14:25:16 UTC 2011,,,,,,,,,,,"0|i0217b:",9796,,,,,,,,,,,,,,,,,,,,"27/Nov/11 14:25;nilsoni;Hi Clause,
It seems that this issue is not yet resolved. Can you please try the code uploaded by me in the nabble http://camel.465427.n5.nabble.com/Global-exception-not-invoked-in-case-of-Exception-fired-while-iterating-through-File-Splitter-td4826097.html Try the file SplitInProgress.java


The exception is still uncaught by the clause
onException(Throwable.class)
.process(customMoveFailed());
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RuntimeCamelException ""Ambiguous Parameter Mapping"" must not be thrown, if there are parameters of the same type but with different QNames in ServiceInterfaceStrategy",CAMEL-4480,12524405,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ojelinski,ojelinski,23/Sep/11 11:58,26/Oct/11 17:02,14/Jul/23 05:45,08/Oct/11 11:54,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-soap,,,,0,,,,,,,,,"In different WebMethods I have parameters of the same type, but with different QNames. The following if-clause (in ServiceInterfaceStrategy.analyzeServiceInterface(..)) throws an exeption in these cases (thrown if NOT QNameOfMethod1 equals QNameOfMethod2), but it should on the contrary throw an exception if the QNames ARE equal:

                if (inTypeNameToQName.containsKey(ti.getTypeName())
                    && (!(ti.getTypeName().equals(""javax.xml.ws.Holder"")))
                    && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {
                    throw new RuntimeCamelException(""Ambiguous parameter mapping. The type [ ""
                                                    + ti.getTypeName()
                                                    + "" ] is already mapped to a QName in this context."");
                }

The ""NOT"" must be deleted:

...
&& (inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))
...
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Oct/11 06:49;rnewcomb;camel-4480-trunk.patch;https://issues.apache.org/jira/secure/attachment/12497593/camel-4480-trunk.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,41784,,,Wed Oct 26 17:02:18 UTC 2011,,,,,,,,,,,"0|i0216v:",9794,,,,,,,,,,,,,,,,,,,,"01/Oct/11 08:25;davsclaus;Can you attach an unit test that reproduces the issue?;;;","04/Oct/11 06:49;rnewcomb;The attached patch expands the multi-part unit test suite to demonstrates the behavior described in this issue.  

The patch also provides a potential fix for the issue. 

Note that the solution recommended in the original issue description will not work. That solution would cause parameters that are reused across multiple web methods to be rejected with an error.   

An alternative solution (as implemented in the patch) is as follows:

1. Change the behavior of the ServiceInterfaceStrategy to log a WARN message in the case where a new QName mapping would override an existing  mapping.  The new mapping will be ignored after the warning. 

2. Move the QName + dataType uniqueness enforcement to the @WebMethod level

The warning is an appropriate alternative to the current error. The ServiceInterfaceStrategy.findQNameForSoapActionOrType(…) operation _could_ return an unexpected value when a dataType is reused within the interface with a different QName; however, this risk is fully mitigated when calling findQNameForSoapActionOrType(…) with a valid soapAction that uniquely identifies the target @WebMethod on the service. At that point the MethodInfo class is queried for the type-to-QName mapping for the method, and the results will be as expected.;;;","04/Oct/11 06:54;rnewcomb;Willem: would you mind having a look at this patch, since you committed the original multi-part enhancement?;;;","08/Oct/11 11:53;njiang;Applied patch with thanks to Rich.
I also merged the patch into camel 2.8.x branch.;;;","26/Oct/11 17:02;ojelinski;works for me. Thank you very much.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Because local PrintService objects on Windows have a name which is not their UNC path, the PrinterProducer can never find them.",CAMEL-4478,12524275,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,denis@denisrobert.net,denis@denisrobert.net,22/Sep/11 12:17,25/Oct/11 11:35,14/Jul/23 05:45,01/Oct/11 08:49,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-printer,,,,0,,,,,,,,,"In org.apache.camel.component.printer.PrinterProducer, the line:

setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());

reconstructs a UNC path which is expected to match the name of a PrintService on the system. For local printers on Windows, the name of the PrintService is simply the name of the printer without the host and any backslashes, so the PrinterProducer is never able to find them.

So when config.getHostname() is ""localhost"", at least on Windows, the line should be simply:

setPrinter(config.getPrintername())

so that we'd have code like:

if (""localhost"".equalsIgnoreCase(config.getHostname())) {
  setPrinter(config.getPrintername());
} else {
  setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());
}

This can only work if issue CAMEL-4477 about the error in parseURI() in PrinterConfiguration is also fixed.
","Windows 7 64-bit, jdk 1.6.0_20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,41782,,,Sat Oct 01 08:49:17 UTC 2011,,,,,,,,,,,"0|i0216f:",9792,,,,,,,,,,,,,,,,,,,,"01/Oct/11 08:49;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"parseURI in org.apache.camel.component.printer.PrinterConfiguration leaves a prefixed ""/"" on the printername attribute which should be removed",CAMEL-4477,12524271,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,denis@denisrobert.net,denis@denisrobert.net,22/Sep/11 12:10,25/Oct/11 11:36,14/Jul/23 05:45,01/Oct/11 08:39,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-printer,,,,0,,,,,,,,,"in PrinterConfiguration.parseURI(), the line:

setPrintername(uri.getPath());

ends up leaving the starting ""/"" which is not really a part of the printer's name. When the PrinterProducer later searches for the matching PrintService, it attempts to recreate the printer path from the host name and the printer name with the following:

setPrinter(""\\\\"" + config.getHostname() + ""\\"" + config.getPrintername());

which ends up with a string like: \\<HostName>\/<printer> because the leading ""/"" was not removed from the printer name, and which leads to the printer never being found.","Windows 7 64-bit, jdk 1.6.0_20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,41783,,,Sat Oct 01 08:39:50 UTC 2011,,,,,,,,,,,"0|i02167:",9791,,,,,,,,,,,,,,,,,,,,"22/Sep/11 13:26;davsclaus;Thanks for reporting.

Do you want to try and provide a patch for this problem?
You can read about contributing here. And also some info how to create a patch
http://camel.apache.org/contributing.html;;;","01/Oct/11 08:39;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel splitter/aggregator 2x slower in 2.8.1 vs 2.7.3,CAMEL-4476,12524221,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bryanck,bryanck,22/Sep/11 00:12,22/Sep/11 13:42,14/Jul/23 05:45,22/Sep/11 13:42,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"I noticed a sharp decline in the performance of my application when I upgraded from Camel 2.7.3 to 2.8.1. I discovered that the splitter/aggregator had become the bottleneck in my app. I have created a sample app that demonstrates the issue. The aggregator uses a lock, and I suspect lock contention may be at the root of this, but didn't notice any changes around that in the code diff between the versions.

I uploaded the sample app to http://www.vancameron.net/CamelPerf.zip. It uses gradle. Unzip to a directory then run ""gradle"" from the command line. To change the version from 2.8.1 to 2.7.3, edit the build.gradle file and run again.

The app loads 10 files with 100k lines each. It prints the current time in msec per batch.
","Oracle JDK 1.6.0_26 64-bit, CentOS 6 64-bit",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13767,,,Thu Sep 22 13:42:55 UTC 2011,,,,,,,,,,,"0|i0215z:",9790,Regression,,,,,,,,,,,,,,,,,,,"22/Sep/11 06:42;bryanck;This looks like it was caused by using <simple>xxx</simple> expressions for the completion timeout and completion size. It seems that the expression is being evaluated for each batch in 2.8 but that was not the behavior in 2.7. That caused the performance degradation. Changing to <constant> expressions fixed the performance problem I was having.;;;","22/Sep/11 07:55;bryanck;Though I uncovered a problem. When using a constant expression, there is no way to inject a property value. So if I want the batch size configurable, it seems the only way to do this is to use a ""simple"" expression. But using the ""simple"" expression causes the aforementioned performance issue.;;;","22/Sep/11 12:47;davsclaus;With constant: Time taken 68040 ms
With simple: Time taken 100913 ms;;;","22/Sep/11 12:56;davsclaus;Okay got it optimized so its as fast again:
With simple: Time taken 68876 ms;;;","22/Sep/11 13:42;davsclaus;Thanks for reporting. 

I added a test AggregateSimpleExpressionIssueTest which is similar to yours. It can be run manually. And the test now runs as fast for constant/simple language.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
file: consumer does not create directory,CAMEL-4474,12523860,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,taariql,davidkarlsen@gmail.com,davidkarlsen@gmail.com,21/Sep/11 13:04,25/Oct/11 11:35,14/Jul/23 05:45,23/Sep/11 07:51,2.8.1,,,,,,,,,,,,2.7.4,2.8.2,2.9.0,,camel-core,,,,0,component,consumer,file,,,,,,"According to http://camel.apache.org/file2.html autoCreate is true by default and should for a consumer create the directory.
{noformat}
autoCreate 	true 	Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. 
{noformat}
This does not happen and thus a route startup would fail.",java 1.6,davidkarlsen@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Sep/11 17:04;taariql;CAMEL-4474_file__consumer_does_not_create_directory.patch;https://issues.apache.org/jira/secure/attachment/12496142/CAMEL-4474_file__consumer_does_not_create_directory.patch","22/Sep/11 17:09;taariql;CAMEL-4474_file__consumer_does_not_create_directory1.patch;https://issues.apache.org/jira/secure/attachment/12496144/CAMEL-4474_file__consumer_does_not_create_directory1.patch","22/Sep/11 17:16;taariql;CAMEL-4474_file__consumer_does_not_create_directory2.patch;https://issues.apache.org/jira/secure/attachment/12496146/CAMEL-4474_file__consumer_does_not_create_directory2.patch","21/Sep/11 14:57;davidkarlsen@gmail.com;Camel4474.java;https://issues.apache.org/jira/secure/attachment/12495378/Camel4474.java","21/Sep/11 14:57;davidkarlsen@gmail.com;app-config-context.xml;https://issues.apache.org/jira/secure/attachment/12495379/app-config-context.xml","21/Sep/11 14:57;davidkarlsen@gmail.com;app-config.properties;https://issues.apache.org/jira/secure/attachment/12495377/app-config.properties","21/Sep/11 14:57;davidkarlsen@gmail.com;test-context.xml;https://issues.apache.org/jira/secure/attachment/12495380/test-context.xml",,7.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13760,,,Fri Sep 23 07:23:33 UTC 2011,,,,,,,,,,,"0|i0215j:",9788,Regression,,,,,,,,,,,,,,,,,,,"21/Sep/11 14:39;taariql;David can you please post a test for this?
There are tests[1] for this code so maybe you missed something with permissions etc, or of course maybe these tests miss something.

[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerAutoCreateDirectoryTest.java;;;","21/Sep/11 14:57;davidkarlsen@gmail.com;See attached test - you can toggle the mkdir flag to make it pass or fail.;;;","21/Sep/11 15:57;taariql;You're using a dot in the directory name which is not allowed, is this the error you're getting?

IllegalArgumentException(""Only directory is supported. Endpoint must be configured with a valid starting directory: "" + file);;;;","21/Sep/11 16:15;davidkarlsen@gmail.com;I will have to test tomorrow at work. But I do not see this requirement documented an place: http://camel.apache.org/file2.html .
It's also not a problem as long as the directory in fact exists - so I doubt that is the case - but I'll double check tomorrow.;;;","21/Sep/11 18:37;davidkarlsen@gmail.com;Hah! You are dead-right - but why??

{noformat}
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only directory is supported. Endpoint must be configured with a valid starting directory: target/incoming.dir
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1145)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:108)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)
	at 

{noformat}

Changing it to one w/o dot fixed it - and the error message ""Only directory is supported."" is misleading.;;;","22/Sep/11 04:57;taariql;Great.

The reason is stated in the comments in FileEndpoint;
// we assume its a file if the name has a dot in it (eg foo.txt)

Since a directory can have a dot, like .m2, .camel etc, we should perhaps always assume it's a directory, but that doesn't sound right either.
Feel free to submit a patch to improve the code or even documentation to make it clearer.;;;","22/Sep/11 07:25;davsclaus;That dot thingy is a left over from the 1.x days as you could configure a fileName and/or a directory. In 2.x it must be a starting directory. And you can use the new fileName option to pin point a specific file.

David there is something wrong with your system as we use the File API to check if its a directory first
{code}
boolean isDirectory = file.isDirectory();
        if (!isDirectory && file.getName().contains(""."")) {
            throw new IllegalArgumentException(""Only directory is supported. Endpoint must be configured with a valid starting directory: "" + file);
        }
{code}

So what OS and file system are you using?;;;","22/Sep/11 08:48;taariql;Claus I don't think there's a problem with his OS or filesystem, isDirectory will return true only if it exists and is a directory.
So it will always throw the exception if the directory does not exist and has a dot.

I have half a patch from doing a new test yesterday, so if David hasn't got a patch in mind I can finish it the weekend when I get a gap.;;;","22/Sep/11 13:29;davsclaus;Ah Taarig yeah of course :) ;;;","22/Sep/11 17:04;taariql;Doesn't seem like there's more to do on this, patch attached.;;;","22/Sep/11 17:16;taariql;Fixed a comment in the test code. Please see the last attachment, CAMEL-4474_file__consumer_does_not_create_directory2.patch;;;","23/Sep/11 07:23;davsclaus;Taariq thanks of the patch. I have granter your JIRA account karma to assign tickets, as you seem to contribute a fair number of patches to Camel. Soo keep it up.;;;",,,,,,,,,,,,,,,,,,
Unable to use cxf:binding configuration for the endpoint,CAMEL-4473,12523857,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,szhemzhitsky,szhemzhitsky,21/Sep/11 12:54,22/Sep/11 07:05,14/Jul/23 05:45,22/Sep/11 07:05,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'service': Error setting property val
ues; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.ap
ache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the pa
rameter type of the setter match the return type of the getter?
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1361)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory
.java:1086)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory
.java:517)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.j
ava:456)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.jav
a:580)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.ja
va:895)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
        at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84)
        at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1)
        at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280)
        at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304)
        ... 30 more
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.apache.camel.com
ponent.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the parameter type o
f the setter match the return type of the getter?
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1358)
        ... 44 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/11 17:40;szhemzhitsky;camel-cxf-binding-failure-test.zip;https://issues.apache.org/jira/secure/attachment/12495409/camel-cxf-binding-failure-test.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,41573,,,Thu Sep 22 07:05:47 UTC 2011,,,,,,,,,,,"0|i0215b:",9787,,,,,,,,,,,,,,,,,,,,"21/Sep/11 12:55;szhemzhitsky;Unit test has been attached;;;","21/Sep/11 17:40;szhemzhitsky;Valid camel-cxf-binding-failure-test.zip zip archive with unit test has been attached. The old one has been deleted.;;;","22/Sep/11 07:05;njiang;Just commit a quick fix in trunk and camel 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HazelcastComponentHelper. copyHeaders() creates an Out message,CAMEL-4472,12523851,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tmrkus,tmrkus,21/Sep/11 12:05,21/Sep/11 15:52,14/Jul/23 05:45,21/Sep/11 15:52,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-hazelcast,,,,0,,,,,,,,,"Due to lazy creation of Out message in DefaultExchange.getOut() implementation, HazelcastComponentHelper.copyHeaders() method inadvertently creates an Out message if one has not been set yet, which then creates problems in CamelInvocationHandler.getBody() which then returns null as a result. 

There should be a check in copyHeaders() to see if Out exists, e.g.: 

{code}
// set out headers 
if (ex.hasOut()) { 
    ex.getOut().setHeaders(headers); 
} 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/11 12:07;tmrkus;CAMEL-4472.patch;https://issues.apache.org/jira/secure/attachment/12495348/CAMEL-4472.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,59907,,,Wed Sep 21 15:47:23 UTC 2011,,,,,,,Patch Available,,,,"0|i02153:",9786,,,,,,,,,,,,,,,,,,,,"21/Sep/11 15:47;davsclaus;The copyHeaders is only used by the producers as a mean to preserve headers after sending a message to hazelcast. So we should be okay with this patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LifecycleStrategy should be started/stopped when CamelContext is starting/stopping,CAMEL-4467,12523700,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Sep/11 12:09,20/Sep/11 12:16,14/Jul/23 05:45,20/Sep/11 12:16,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"The LifecycleStrategy strategies is not start/stopped if they are a Service, such as the DefaultManagementLifecycleStrategy",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13771,,,2011-09-20 12:09:55.0,,,,,,,,,,,"0|i0213z:",9781,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XStreamDataFormat has NPE when marshalling route to XML,CAMEL-4460,12523421,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Sep/11 10:04,17/Sep/11 10:36,14/Jul/23 05:45,17/Sep/11 10:36,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"You can get a NPE when marshalling a route to XML which has <xstream> in the route

Caused by: java.lang.NullPointerException
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:170)
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:165)
	at com.sun.xml.internal.bind.v2.runtime.reflect.AdaptedAccessor.get(AdaptedAccessor.java:61)
	... 55 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13768,,,2011-09-17 10:04:19.0,,,,,,,,,,,"0|i0212f:",9774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CAMEL-4407 has caused a regression in the features.xml,CAMEL-4459,12523384,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,16/Sep/11 20:09,17/Sep/11 04:30,14/Jul/23 05:45,16/Sep/11 20:33,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,osgi,,,,0,,,,,,,,,"
The scriptengine things that were added as part of CAMEL-4407 have made doing a features:install camel-script in a ""plain"" Karaf instance not work as those dependencies are not available in Central.   Thus, setups that worked in the past that did not need those no longer work.

Propose moving those three deps to a ""camel-script-optional"" feature that would not be pulled in by default.   If a user needs them, they would need to configure Karaf to pull from another repo.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,60337,,,Sat Sep 17 04:30:35 UTC 2011,,,,,,,,,,,"0|i02127:",9773,Regression,,,,,,,,,,,,,,,,,,,"17/Sep/11 04:30;ffang;Hi Dan,

I think camel-script feature by default should contain those scriptengines which make this feature working out of the box.
How about we address it using the way like
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-groovy/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-javascript/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/${scriptengines.version}</bundle>

in the feature descriptor we can indicate mvn repo url which isn't the Central one, and by this way we needn't configure karaf org.ops4j.pax.url.mvn.cfg. camel-restlet feature already use this way so I think camel-script can do it as well.

Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFConsumer may extract the request message as the response message and this can lead to problems,CAMEL-4452,12523162,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,15/Sep/11 08:03,16/Sep/11 11:39,14/Jul/23 05:45,16/Sep/11 06:31,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"CAMEL-4030 with Revision 1129070 in trunk changed the way how the response message is retrieved from the exchange and this is causing some issue.

In particular, the changed code may retrieve the request message as the response message when the call is oneway (when the condition camelExchange.getPattern().isOutCapable() is false).

Subsequently, this is leading to an NPE when the output operation is used to extract the payload body from this request message because there is no output operations in the oneway case at:

        for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {

and resulting in:

java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:394)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:126)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:71)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)
	at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:130)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)


I see this change was introduced with CAMEL-4030 to support some sort of wire-tap short-cut:

from(""cxf:xxx"").inonly(""jms:xxx"").to(""xxx"")

I am not sure how this inbound/outbound switching operation relates to this use case.

But in any case, this new behavior can lead to this problem and  I think the old behavior (skipping the response message part if there is no response) should be reinstated.

I have a simple test case that can reproduce this problem, but the exception is thrown in an executor thread and only written to the log and the original test caller thread doesn't see the exception. So, it's not a useful automatic test case. Maybe, there is a way. Let me know, how you think.

thanks.
regards, aki


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Sep/11 14:46;ay;test.tar.gz;https://issues.apache.org/jira/secure/attachment/12494627/test.tar.gz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13766,,,Fri Sep 16 11:39:06 UTC 2011,,,,,,,,,,,"0|i0210n:",9766,,,,,,,,,,,,,,,,,,,,"15/Sep/11 13:49;njiang;Hi Aki,

I checked the code of NPE, I don't think it relates to the change of CAMEL-4030.
The camelExchange is not same with the cxfExchange, I don't think the oneway invocation can cause the NPE that you mentioned.
I guess there are some thing wrong with the boi.getOutput() checking.

Can  you submit the test case into this JIRA to let me have a look?

Willem;;;","15/Sep/11 14:46;ay;Hi Willem,
thanks for looking into this.

Attached is a tar.gz file containing a test case (analogue to the other GreeterTest in camel-cxf) but using the wsdl and no service class.

The logging for the camel cxf component needs to be activated to see the exception stack trace (org.apache.camel.component.cxf.level=INFO
). 

The exception comes from the greeter.greetMeOneWay when it tries to extract the response payload out of the request message.


thanks.
regards, aki
;;;","16/Sep/11 06:17;njiang;I found the NPE are thrown from other GreeterPayLoad tests, it can be fix by adding an NP checking on the boi.getOutput incase of the boi is oneway operation.

I will commit the fix shortly.
;;;","16/Sep/11 06:31;njiang;Applied the patch into trunk and 2.8.x branch.;;;","16/Sep/11 11:39;ay;Hi Willem,
Checking boi.getOutput() != null, as you patched, will avoid the NPE for this oneway case. But I think this solution may lead to some unexpected result in those cases when the getOutput() isn't null but for some reason the response message is not available, no? 

I still find it strange to automatically take the request message for the response message.

Or am I missing some point?

regards, aki  ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when unmarshalling using serialization data format,CAMEL-4449,12523019,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,incubos,incubos,14/Sep/11 09:34,17/Sep/11 19:26,14/Jul/23 05:45,17/Sep/11 11:24,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"Spring configuration:
{code:xml}
    <!-- A custom CamelContext -->
    <camel:camelContext id=""camel"">
        <!-- JSON data format marshalling -->
        <camel:dataFormats>
            <camel:serialization id=""serialization""/>
        </camel:dataFormats>

        <!-- RawOffer input route -->
        <camel:route>
            <camel:from uri=""kestrel://etl01f/feeds""/>
            <camel:unmarshal ref=""serialization""/>
            <camel:to uri=""bean:shard?method=consume""/>
        </camel:route>
    </camel:camelContext>
{code}

Exception:
{code:java}
run:
     [java] log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).
     [java] log4j:WARN Please initialize the log4j system properly.
     [java] log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
     [java] 13:28:07.587 [main] INFO  o.a.c.s.h.CamelNamespaceHandler - OSGi environment not detected.
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) is starting
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - JMX enabled. Using ManagedManagementStrategy.
     [java] 13:28:09.415 [main] INFO  o.a.c.i.c.AnnotationTypeConverterLoader - Found 3 packages with 14 @Converter classes to load
     [java] 13:28:09.489 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded 153 core type converters (total 153 type converters)
     [java] 13:28:09.528 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded additional 0 type converters (total 153 type converters) in 0.003 seconds
     [java] 13:28:09.730 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating endpoint for queue ""feeds"" on etl01f, parameters={}
     [java] 13:28:09.967 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating MemcachedClient for etl01f/feeds
     [java] 2011-09-14 13:28:10.073 INFO net.spy.memcached.MemcachedConnection:  Added {QA sa=etl01f/95.108.229.218:22133, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
     [java] 2011-09-14 13:28:10.084 INFO net.spy.memcached.MemcachedConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@711b50a1
     [java] 13:28:10.293 [main] INFO  o.a.c.c.kestrel.KestrelConsumer - Starting consumer for kestrel://etl01f/feeds
     [java] 13:28:10.302 [main] INFO  o.a.camel.spring.SpringCamelContext - Route: route1 started and consuming from: Endpoint[kestrel://etl01f/feeds]
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started.
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) started in 1.291 seconds
     [java] 13:28:12.858 [Camel (camel) thread #0 - Poller-kestrel://etl01f/feeds] ERROR o.a.c.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID-incubos-osx-local-51787-1315992488896-0-1. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
     [java] java.lang.NullPointerException: null
     [java] 	at org.apache.camel.impl.SerializationDataFormat.unmarshal(SerializationDataFormat.java:57) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:56) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.component.kestrel.KestrelConsumer$Poller.run(KestrelConsumer.java:230) [camel-kestrel-2.8.0.jar:2.8.0]
     [java] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26]
     [java] 	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26]
{code}

It seems that {{ExchangeHelper.convertToType()}} method returned {{null}} because {{camelContext.getTypeConverter()}} returned {{null}}. ","MacOS X 10.6.8
Java 1.6.0_26
Apache Camel 2.8.0
Consuming from remote Kestrel queue (XStream marshalling/unmarshalling works just fine)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,60309,,,Sat Sep 17 13:45:08 UTC 2011,,,,,,,,,,,"0|i020zz:",9763,,,,,,,,,,,,,,,,,,,,"15/Sep/11 18:04;davsclaus;We love contributions, so patches is welcome.;;;","16/Sep/11 10:40;incubos;I would be glad to but I don't have enough time now to produce a patch myself. :(;;;","16/Sep/11 13:05;mrlalonde;XStream can serialize classes even if they don't implement Serializable.  Did the the class for you message body implement Serializable?  If not, then it was suppose to fail so the resolution might just be to give a more descriptive error message and perhaps a more meaningful exception?!;;;","17/Sep/11 11:24;davsclaus;Fixed the potential NPE;;;","17/Sep/11 13:45;incubos;My message body class implements {{Serializable}}. It has Scala {code:java}Tuple2[String, java.util.List[String]]{code} type.


;;;",,,,,,,,,,,,,,,,,,,,,,,,,
thread safety issue with Exchange.getUnitOfWork(),CAMEL-4447,12522947,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgtombs,dgtombs,13/Sep/11 20:30,12/Dec/11 17:31,14/Jul/23 05:45,05/Oct/11 07:13,2.8.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"I'm having a somewhat rare issue with NullPointerExceptions in a multithreaded route. It seems that there is a race condition between one thread operating on the UnitOfWork and another removing it. I have gotten the following stacktraces so far:

{noformat}
ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:309) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:349) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
{noformat}

And:

{noformat}
ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.impl.DefaultExchange.isTransacted(DefaultExchange.java:331) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:57) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
{noformat}

Looking at the source, both NullPointerExceptions were thrown by code like:

{code}
return getUnitOfWork() != null && getUnitOfWork().isTransacted();
{code}

Oddly, I've only seen this happen soon after startup and only once per run.

The actual route is company confidential, but it's basically:

JMS -> Stream Resequencer -> Bean",JDK 1.6.0_20 on Linux x86_64,dgtombs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Sep/11 16:27;davsclaus;CAMEL-4447.patch;https://issues.apache.org/jira/secure/attachment/12496131/CAMEL-4447.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13761,,,Mon Dec 12 17:31:58 UTC 2011,,,,,,,,,,,"0|i020zj:",9761,,,,,,,,,,,,,,,,,,,,"14/Sep/11 03:14;njiang;I just check the code of Camel 2.8.x, there are some change on the DefaultChannel. 
Can you try the latest released Camel 2.8.1, not the 2.8.1-SNAPSHOT to see if the bug is still there?
;;;","14/Sep/11 13:26;dgtombs;Is 2.8.1 released? I don't see it on the site.;;;","14/Sep/11 13:57;njiang;Camel 2.8.1 is promoted to the maven central repo two days ago, you can try it now :)
;;;","19/Sep/11 20:20;dgtombs;OK, I tested with 2.8.1. Still got the same Exceptions, still very soon after startup.;;;","22/Sep/11 13:55;dgtombs;Upon further testing, I get 1-5 of these exceptions within 6 minutes of startup both on Solaris and Linux.;;;","22/Sep/11 15:32;davsclaus;David do you mind posting your Camel route?;;;","22/Sep/11 16:27;davsclaus;A patch with a potential fix. David you can try this patch on the Camel 2.8.1 source code  (eg from the 2.8.1 tag).;;;","22/Sep/11 18:19;dgtombs;Hi Claus, thanks for the patch but are you sure it applies against Camel 2.8.1? It seems DefaultChannel was moved and a couple other changes made.;;;","23/Sep/11 05:15;davsclaus;Yeah you would need to adjust the patch accordingly.

Or take a look at the backport to the 2.8 branch
http://svn.apache.org/viewvc?view=revision&revision=1174248
;;;","28/Sep/11 06:39;davsclaus;David any update?;;;","12/Dec/11 16:02;dgtombs;Sorry for the delay, working on a different project now. I did just test with 2.8.2, and got a similar exception:

{noformat}
12-Dec 10:51:51 ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:302) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.2.jar:2.8.2]
{noformat}

I will test with 2.8.3 later.;;;","12/Dec/11 17:31;dgtombs;I haven't gotten any exceptions with 2.8.3 while running a few tests.;;;",,,,,,,,,,,,,,,,,,
camel-bindy - Marshaling using CSV will insert wrong char separator if using an escaped separator char such as a pipe,CAMEL-4446,12522919,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/11 16:13,24/Jun/16 22:42,14/Jul/23 05:45,13/Sep/11 16:17,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-bindy,,,,0,,,,,,,,,"When using bindy in CSV format with a separator in the model as ""\\|"" to denote a pipe character, then it does not work consistent for marshal and unmarshal. In marshal it will insert \ as separator, but it should use | instead.

See nabble
http://camel.465427.n5.nabble.com/bindy-different-behavior-between-marshal-and-unmarshal-with-pipe-separator-tp4798488p4798488.html",,tlandich,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13775,,,Fri Jun 24 19:40:10 UTC 2016,,,,,,,,,,,"0|i020zb:",9760,,,,,,,,,,,,,,,,,,,,"24/Jun/16 19:40;tlandich;With version:2.15.2, the bug remains.  The escape characters are still added into the Header Columns when marshaling back the object. 
e.g. 
   Separator = \ \ |

Output: 
   Header 1 \ | Header2 \ |... 

Pls. advise when we can expect the fix.  

Thanks.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong slash in FTP component for doneFile,CAMEL-4444,12522736,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oliches,oliches,12/Sep/11 13:39,13/Sep/11 11:34,14/Jul/23 05:45,13/Sep/11 11:34,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-ftp,,,,0,,,,,,,,,"I tried to use the doneFile with FTP component.
When I used it to my FTP on my windows machine everything goes fine.
When I tried to act the same with a FTP host on a Linux machine, I got an issue.

I sniff the packet to see what goes wrong and I see this :
the doneFile 
DELE public/Test/in\myFile.txt  
the file to process
DELE public/Test/in/myFile.xml


After a Quick look on the code:
org.apache.camel.component.file.GenericFileEndpoint 
line 682

 String answer = pattern;
        if (ObjectHelper.isNotEmpty(path) && ObjectHelper.isNotEmpty(pattern)) {
            // done file must always be in same directory as the real file name
            answer = path + File.separator + pattern;
        }

        if (getConfiguration().needToNormalize()) {
            // must normalize path to cater for Windows and other OS
            answer = FileUtil.normalizePath(answer);
        }

We use the ""File.Separator"" but in this case, it should get a kind of ""FTP.Separator"" or the FTP component should return true to the needToNormalize method and change the narmalizePath method to manage this case.




",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Sep/11 10:59;oliches;CAMEL-4444.patch;https://issues.apache.org/jira/secure/attachment/12494213/CAMEL-4444.patch","13/Sep/11 10:07;oliches;CAMEL-4444.patch;https://issues.apache.org/jira/secure/attachment/12494203/CAMEL-4444.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13776,,,Tue Sep 13 11:34:29 UTC 2011,,,,,,,,,,,"0|i020yv:",9758,,,,,,,,,,,,,,,,,,,,"13/Sep/11 08:24;davsclaus;There is a {{separator}} option you can use to explicit configure the separator style.;;;","13/Sep/11 09:34;oliches;Thanks, 

I think the last thing to fix, it's to replace the 

File.separator on line 685 of the org.apache.camel.component.file.GenericFileEndpoint class by getFileSeparator()

and it will be fine.;;;","13/Sep/11 10:07;oliches;Here is a potential patch;;;","13/Sep/11 10:54;davsclaus;Olivier can you re-attach the patch and this time make sure to [x] in Grant license to Apache, as we cannot accept patches otherwise.;;;","13/Sep/11 11:34;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Error in camel-restlet feature definition,CAMEL-4439,12522701,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,12/Sep/11 07:01,12/Sep/11 07:20,14/Jul/23 05:45,12/Sep/11 07:20,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,,,,,0,,,,,,,,,"The current contents of the camel-features.xml file reads:

{code}
<feature name='camel-restlet' version='2.7.1-fuse-00-43' resolver='(obr)'>
  <feature version='2.7.1-fuse-00-43'>camel-core</feature>
  <bundle dependency=""true"">mvn:org.apache.camel/camel-restlet/2.7.1-fuse-00-43</bundle>
  <bundle>mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.0.5</bundle>
</feature>
{code}

It actually should read http://fernandoribeiro.eti.br/2011/09/12/bug-in-fuse-4-4/ (Thanks to Fernando Ribeiro for the heads up!)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13777,,,Mon Sep 12 07:20:31 UTC 2011,,,,,,,,,,,"0|i020xr:",9753,,,,,,,,,,,,,,,,,,,,"12/Sep/11 07:07;gertvanthienen;Fixed in trunk by Freeman (http://svn.apache.org/viewvc?view=revision&revision=1164544)
and marked the restlet jar as a dependency in OBR resolution in http://svn.apache.org/viewvc?view=revision&revision=1169620;;;","12/Sep/11 07:20;davsclaus;Backported to 2.8 branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnException using redeliveryPolicyRef from another XML file may not pickup that policy,CAMEL-4438,12522672,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Sep/11 09:12,12/Sep/11 06:06,14/Jul/23 05:45,12/Sep/11 06:06,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/redeliveryPolicyProfile-and-onException-redeliveryPolicyRef-tp4738408p4738408.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13778,,,2011-09-11 09:12:14.0,,,,,,,,,,,"0|i020xj:",9752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer clientFactoryBean's bus should be initialized,CAMEL-4436,12522539,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,wtam,wtam,wtam,10/Sep/11 03:12,10/Sep/11 16:30,14/Jul/23 05:45,10/Sep/11 05:20,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"This defect only manifests itself if an application hosts more than one CamelContext.  The first CamelContext contained by a Spring application context that does not have a custom bus (e.g. any http conduit configurations) while the second Spring application/Camel context does have a custom bus.

The symptom is when the application sends an message to the cxfrs endpoint in the second context (that contains custom bus), the cxfrs endpoint picks up the wrong bus.  It picks up the default cxf in the first application context.

Furthermore, this defect only affects cxfrs producer using URI address format. E.g.
  <to uri=""cxfrs://https://localhost:8181/CxfRsProducerTest/""/>

It does not affect cxfrs addresses defined as a bean.  E.g.
  <to uri=""cxfrs://bean://rsClientHttps""/>
  <cxf:rsClient id=""rsClientHttps"" address=""https://localhost:8181/CxfRsProducerTest/""/>

 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13770,,,Sat Sep 10 16:30:00 UTC 2011,,,,,,,,,,,"0|i020x3:",9750,,,,,,,,,,,,,,,,,,,,"10/Sep/11 05:20;wtam;Committed revision 1167448 - 2.9.0.x
Committed revision 1167458 - 2.8.2.x
;;;","10/Sep/11 16:30;wtam;r1167555 - 2.9.0.x
r1167556 - 2.8.2.x;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jms endpiont - option maximumBrowseSize is not in use,CAMEL-4433,12522435,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/11 14:58,20/Sep/11 16:32,14/Jul/23 05:45,10/Sep/11 05:37,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,0,,,,,,,,,"The JmsEndpoint have a maximumBrowseSize option to limit the number of messages to browse back.
This option is not in use.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,59990,,,2011-09-09 14:58:34.0,,,,,,,,,,,"0|i020wf:",9747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when sending the SMS message less than 255.,CAMEL-4422,12521532,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Sep/11 03:07,07/Sep/11 04:22,14/Jul/23 05:45,07/Sep/11 04:22,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-smpp,,,,0,,,,,,,,,"User complain about the NPE, when using the camel-smpp component to send the message which length is less than 255.
Here is the mail thread about it.
 http://camel.465427.n5.nabble.com/SMPP-2-8-component-null-pointers-tp4776354p4776354.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13772,,,Wed Sep 07 04:22:49 UTC 2011,,,,,,,,,,,"0|i020tz:",9736,,,,,,,,,,,,,,,,,,,,"07/Sep/11 04:22;njiang;Applied patch into trunk and 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamResequencer poisoned by bad Exchange,CAMEL-4401,12520947,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dgtombs,dgtombs,31/Aug/11 17:15,14/Sep/11 09:31,14/Jul/23 05:45,13/Sep/11 15:43,2.7.1,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"If a StreamResequencer's configured Expression returns null for an Exchange (e.g., if a header does not exist) and the resequencer's pipeline is currently empty, the bad Exchange will be added to the pipeline. ResequencerEnginer.insert() succeeds in calling sequence.add() with the bad Exchange, but throws an Exception when calling sequence.successor(). This results in the message ending up at the Error Handler but the bad Exchange still in the Engine's sequence. Probably insert() should be probably be more transactional.

After this happens:
1) Trying to add a further exchange (even a ""good"" one) results in an Exception when calling sequence.add().
2) ResequencerEngine.deliverNext() results in an Exception so no further messages will be delievered.

I will attach a unit test to reproduce when I get a chance.","JDK 1.6.0_20, Linux x86_64",dgtombs,hadrian,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,60679,,,Wed Sep 14 09:31:30 UTC 2011,,,,,,,,,,,"0|i020pj:",9716,,,,,,,,,,,,,,,,,,,,"31/Aug/11 17:17;dgtombs;A possible kludge-fix could be to compare() every Exchange with itself before adding to the Engine's sequence. This should weed out un-comparable Exchanges.;;;","13/Sep/11 13:02;davsclaus;David do you have an unit test reproducing this issue?;;;","13/Sep/11 14:19;davsclaus;I can reproduce the issue and I am working on a fix.;;;","13/Sep/11 15:43;davsclaus;Resequencer will now validate the incoming Exchange before enqueing. If invalid an exception is thrown. Added new option ignoreInvalidExchanges to ignore invalid exchanges.;;;","14/Sep/11 00:57;dgtombs;Thanks for the fix. Are you sure you don't want to just catch IllegalArugmentException in StreamResequencer.process(), though?;;;","14/Sep/11 09:31;davsclaus;Thanks David, changed the code accordingly.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Exeptions cannot be propagated to the parent route when using LogEIP,CAMEL-4388,12520430,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,27/Aug/11 10:52,27/Aug/11 16:31,14/Jul/23 05:45,27/Aug/11 16:31,2.7.1,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"Here is unit test that demonstrates the problem.
For the unit test pass successfully it's necessary to delete LogEIP from the route.

{code}
package org.apache.camel.impl;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class PropagateExceptionTest extends CamelTestSupport {

    @Test
    public void failure() throws Exception {
        getMockEndpoint(""mock:handleFailure"").whenAnyExchangeReceived(new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                throw new RuntimeException(""TEST EXCEPTION"");
            }
        });

        getMockEndpoint(""mock:exceptionFailure"").expectedMessageCount(1);
        sendBody(""direct:startFailure"", ""Hello World"");
        assertMockEndpointsSatisfied();
    }

    @Test
    public void success() throws Exception {
        getMockEndpoint(""mock:handleSuccess"").whenAnyExchangeReceived(new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                throw new RuntimeException(""TEST EXCEPTION"");
            }
        });

        getMockEndpoint(""mock:exceptionSuccess"").expectedMessageCount(1);
        sendBody(""direct:startSuccess"", ""Hello World"");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder[] createRouteBuilders() throws Exception {
        return new RouteBuilder[] {
                new RouteBuilder() {
                    public void configure() throws Exception {
                        from(""direct:startFailure"")
                            .onException(Throwable.class)
                                .to(""mock:exceptionFailure"")
                                .end()
                            .to(""direct:handleFailure"")
                            .to(""mock:resultFailure"");

                        from(""direct:handleFailure"")
                            .errorHandler(noErrorHandler())
                            .log(""FAULTY LOG"")
                            .to(""mock:handleFailure"");
                    }
                },

                new RouteBuilder() {
                    public void configure() throws Exception {
                        from(""direct:startSuccess"")
                            .onException(Throwable.class)
                                .to(""mock:exceptionSuccess"")
                                .end()
                            .to(""direct:handleSuccess"")
                            .to(""mock:resultSuccess"");

                        from(""direct:handleSuccess"")
                            .errorHandler(noErrorHandler())
                            .to(""mock:handleSuccess"");
                    }
                }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Aug/11 14:23;szhemzhitsky;LogProcessor.patch;https://issues.apache.org/jira/secure/attachment/12491960/LogProcessor.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13784,,,Sat Aug 27 16:03:23 UTC 2011,,,,,,,,,,,"0|i020mn:",9703,,,,,,,,,,,,,,,,,,,,"27/Aug/11 14:23;szhemzhitsky;Patch has been attached;;;","27/Aug/11 16:03;davsclaus;Thanks for reporting and the patch. Yeah the callback must be invoked in the async method. We will get this fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultExchange.copy always creates a DefaultMessage even if the source exchange had a custom Message type,CAMEL-4385,12520255,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,26/Aug/11 14:42,29/Aug/11 15:51,14/Jul/23 05:45,29/Aug/11 15:51,2.8.0,,,,,,,,,,,,2.9.0,,,,camel-core,,,,0,,,,,,,,,"We have a exchange with a custom MyMessage type as in message.
exchange.copy() creates an exchange with an in message of type DefaultMessage. 

Correct would be if the in message of the dest exchange would be of type MyMessage. 

I will first commit a test case that shows the problem and currently will fail.
",,draier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,63364,,,2011-08-26 14:42:16.0,,,,,,,,,,,"0|i020lz:",9700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamResequencer logs unhandled Exceptions at DEBUG level,CAMEL-4383,12520141,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgtombs,dgtombs,25/Aug/11 18:50,30/Aug/11 00:04,14/Jul/23 05:45,27/Aug/11 08:02,2.7.1,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"If an unhandled Exception is caught by StreamResequencer.run(), it effectively logs the Exception at DEBUG level. A thrown Exception can indicate that a delivered message was not fully processed (as is the case in my route), so this means a message is dropped with a notification in the log only at DEBUG level. This is highly undesirable in a critical route.

It should at least be logged at WARN level, and preferably should be handled using the configured ErrorHandler for the route.",Linux JDK 1.6.0_20,dgtombs,,,,,,,,,,,,,,,,,,,,,,CAMEL-4264,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13785,,,Tue Aug 30 00:04:16 UTC 2011,,,,,,,,,,,"0|i020lj:",9698,,,,,,,,,,,,,,,,,,,,"25/Aug/11 18:52;dgtombs;I'm encountering an Exception here due to CAMEL-4264.;;;","27/Aug/11 07:24;davsclaus;See CAMEL-3783;;;","27/Aug/11 08:02;davsclaus;Thanks for reporting. Should be logging at ERROR level now.;;;","30/Aug/11 00:04;dgtombs;Thanks for the quick fix!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
FilterCreateCamelContextPerClassTest is wrong configured,CAMEL-4375,12519949,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akuhtz,akuhtz,24/Aug/11 11:58,26/Aug/11 10:19,14/Jul/23 05:45,26/Aug/11 10:19,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-test,,,,0,,,,,,,,,The FilterCreateCamelContextPerClassTest is wrong configured. The isCreateCamelContextPerClass() should return true as written in the comment but currently returns false. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Aug/11 11:58;akuhtz;camel-4375.patch;https://issues.apache.org/jira/secure/attachment/12491469/camel-4375.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13783,,,2011-08-24 11:58:10.0,,,,,,,Patch Available,,,,"0|i020jr:",9690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It's hardly possible to use all expression of the Simple language to create file names in the file component,CAMEL-4370,12519790,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,23/Aug/11 06:17,24/Aug/11 08:49,14/Jul/23 05:45,24/Aug/11 08:49,2.7.1,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,camel-file,,,,,,,,"Sometimes it can be necessary to use custom headers to create a file name.

For example, I declare my file endpoint in the following manner:

{code}
<route id=""fileReader"">
    <from uri=""file://rootFolder?move=.backup&amp;moveFailed=.error/${header.CustomHeader}"" />
    <to uri=""file://out""/>
</route>
{code}

The header ""CustomHeader"" cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile

{code}
/**
 * Bind this GenericFile to an Exchange
 */
public void bindToExchange(Exchange exchange) {
    exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE, this);
    GenericFileMessage<T> in = new GenericFileMessage<T>(this);
    exchange.setIn(in);
    populateHeaders(in);
}

/**
 * Populates the {@link GenericFileMessage} relevant headers
 *
 * @param message the message to populate with headers
 */
public void populateHeaders(GenericFileMessage<T> message) {
    if (message != null) {
        message.setHeader(Exchange.FILE_NAME_ONLY, getFileNameOnly());
        message.setHeader(Exchange.FILE_NAME, getFileName());
        message.setHeader(""CamelFileAbsolute"", isAbsolute());
        message.setHeader(""CamelFileAbsolutePath"", getAbsoluteFilePath());

        if (isAbsolute()) {
            message.setHeader(Exchange.FILE_PATH, getAbsoluteFilePath());
        } else {
            // we must normalize path according to protocol if we build our own paths
            String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath());
            message.setHeader(Exchange.FILE_PATH, path);
        }

        message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
        message.setHeader(Exchange.FILE_PARENT, getParent());

        if (getFileLength() >= 0) {
            message.setHeader(""CamelFileLength"", getFileLength());
        }
        if (getLastModified() > 0) {
            message.setHeader(Exchange.FILE_LAST_MODIFIED, new Date(getLastModified()));
        }
    }
}
{code}

As you can see a new ""in"" message is created and not all the headers from the original message are copied to it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13790,,,Wed Aug 24 08:49:18 UTC 2011,,,,,,,,,,,"0|i020in:",9685,,,,,,,,,,,,,,,,,,,,"24/Aug/11 08:49;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-netty option ""encoder"" and ""decoder"" does not work",CAMEL-4367,12519740,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,szabi,szabi,22/Aug/11 21:49,26/Aug/11 14:03,14/Jul/23 05:45,26/Aug/11 14:03,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,2.7.2,2.7.3,2.8.0,,,,,2.8.1,2.9.0,,,camel-netty,,,,0,,,,,,,,,"Contrary to the documentation, the ""encoder"" and ""decoder"" option is unusable as it's value is taken as-is instead of resolving the references using the registry.

This bug was introduced in the revision 960621 as part of CAMEL-2907.

Patch can be found at https://github.com/szabolcsberecz/camel/commit/b3bcc8dd284575c931048ea410c44577474e25dd",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Aug/11 12:57;szabi;CAMEL-4367.patch;https://issues.apache.org/jira/secure/attachment/12491339/CAMEL-4367.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13789,,,Fri Aug 26 14:03:04 UTC 2011,,,,,,,Patch Available,,,,"0|i020hz:",9682,Regression,,,,,,,,,,,,,,,,,,,"23/Aug/11 00:47;njiang;Hi Szabolcs,

Thanks for the patch. 
Can you submit the patch to the JIRA and grant it with Apache license ?
So I can apply it into trunk.

Willem;;;","23/Aug/11 07:48;edge;Hi, all

Actually I don't see it as a bug in this case, the documentation clearly says that when ""encoder"" and ""decoder"" is used, the property value should be a class' name inheriting org.jboss.netty.channel.ChannelDownStreamHandler/org.jboss.netty.channel.ChannelUpStreamHandler, if you need to resolve the class from registry, please use the ""encoders"" and ""decoders"".

Although it's a good idea that the ""encoder"" and ""decoder"" property can also be resolved from registry, please make sure that the call to 

    EndpointHelper.setReferenceProperties(component.getCamelContext(), this, parameters);

doesn't introduce any side-effects. ;;;","23/Aug/11 08:16;szabi;Hi all,

It looks like I misunderstood the documentation. Anyway, if you think it's a good idea to use the registry for these two options, I will submit the patch.

Actually, the call to setReferenceProperties does introduce side-effects as it will try to resolve from registry every option value with a leading ""#"". The question is, do you see it as a bad thing?

If you would rather only have the ""encoder"" and ""decoder"" option resolved from registry, I will update the patch.

Szabolcs;;;","23/Aug/11 08:23;njiang;I just checked the camel-netty wiki page, it said it supports the encoder and decoder option, the ""#"" is used for reference in camel by default, I don't think it is wrong.

@Szabolcs
I'm OK with your patch, once you submit the patch, I will be happy to apply it into trunk. ;;;","23/Aug/11 17:58;edge;Well, as I said , I don't see the original implementation as a bug, so if all others accept the new way -- maybe as an improvement -- we will check to make sure the side-effects don't affect our current code. Of course as Jiang said, if one use ""#"" in property value for reference as default, there should be no harm.;;;","26/Aug/11 14:03;njiang;Applied patch into trunk and 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Freemarker - Loading template from file system fails,CAMEL-4365,12519691,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/11 14:14,22/Aug/11 14:19,14/Jul/23 05:45,22/Aug/11 14:19,2.9.0,,,,,,,,,,,,2.9.0,,,,camel-freemarker,,,,0,,,,,,,,,"This only affects Camel 2.9.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,39729,,,2011-08-22 14:14:12.0,,,,,,,,,,,"0|i020hj:",9680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in parsing of JPA uri,CAMEL-4362,12519556,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,davidkarlsen@gmail.com,davidkarlsen@gmail.com,21/Aug/11 17:02,22/Nov/11 23:22,14/Jul/23 05:45,22/Nov/11 23:22,2.8.0,,,,,,,,,,,,2.8.4,2.9.0,,,camel-jpa,,,,0,,,,,,,,,"According to http://camel.apache.org/jpa.html entityName is optional.
When configuring with the following uri (e.g. w/o entityName):
<camel:endpoint id=""jpaEndpoint"" uri=""jpa:?persistenceUnit=journalPersistenceUnit&amp;usePersist=true"" />
the following warning will be displayed
2011-08-21 18:57:11,381 [main][][][][][][][] WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue
due to the incorrect if test in the JpaComponent:

{noformat}
// lets interpret the next string as a class
        if (path != null) {
            // provide the class loader of this component to work in OSGi environments as camel-jpa must be able
            // to resolve the entity classes
            Class<?> type = getCamelContext().getClassResolver().resolveClass(path, JpaComponent.class.getClassLoader());
            if (type != null) {
                endpoint.setEntityType(type);
            }
        }
{noformat}

path is not null, but it is the rest of the string and not the entityname. e.g it should not start with ? if it is an entityname - else it is the options.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,60187,,,Tue Nov 22 23:22:56 UTC 2011,,,,,,,,,,,"0|i020gv:",9677,,,,,,,,,,,,,,,,,,,,"21/Aug/11 17:46;davidkarlsen@gmail.com;I now see:

commit ad352d2328a4dd398a334f24b6d03944a3bcfc59
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Fri Aug 19 11:27:59 2011 +0000

    Jpa component should only try to load EntityClass if the path is not empty string.
    
    git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1159596 13f79535-47bb-0310-9956-ffa450edef68

So this issue can be closed and the changelog updated.;;;","21/Aug/11 20:42;muellerc;Already fixed with commit 1159596: http://svn.apache.org/viewvc?rev=1159596&view=rev;;;","22/Nov/11 17:05;davidkarlsen@gmail.com;I still see this message.
WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue

even with camel 2.8.3;;;","22/Nov/11 23:22;muellerc;fixed for Camel 2.8.4 and 2.9.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Exception thrown during JAXB marshalling will cause SedaConsumer to break,CAMEL-4359,12519470,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,19/Aug/11 20:59,20/Aug/11 10:52,14/Jul/23 05:45,20/Aug/11 10:52,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-jaxb,,,,1,,,,,,,,,"Error handler tries to add message body to error log. If it tries to use JAXB type converter and marshalling throws exception, the exception is thrown all the way back to SedaConsumer. SedaConsumer will then retry to create error message in the same way until the point where exception is not handled any more and SedaConsumer loop breaks off.

One single bad message can stop Seda route.",,dragisak,matthew.moore,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Aug/11 21:02;dragisak;CAMEL-4359.patch;https://issues.apache.org/jira/secure/attachment/12491002/CAMEL-4359.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13792,,,Sat Aug 20 10:52:05 UTC 2011,,,,,,,,,,,"0|i020g7:",9674,,,,,,,,,,,,,,,,,,,,"19/Aug/11 21:02;dragisak;I am adding unit test that demonstrates the problem.;;;","20/Aug/11 10:52;davsclaus;Thanks for the unit test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
header added using an EventNotifier is not present at AggregationStrategy for http endpoints,CAMEL-4354,12519401,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,19/Aug/11 11:24,02/Sep/11 09:15,14/Jul/23 05:45,19/Aug/11 17:01,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"A new header added using an EventNotifier is not present when the exchange is aggregated with an AggregationStrategy.
This is happening only if the enpoint type is http, ftp doesn't have this issue.

This was working with an early version of 2.8.0-SNAPSHOT

Following the EventNotifier code used.

{code:title=ExchangeSentEventNotifier.java|borderStyle=solid}
public class ExchangeSentEventNotifier extends EventNotifierSupport {

	@Override
	protected void doStart() throws Exception {
        /*
         *  filter out unwanted events
         *  we are interested only in ExchangeSentEvent
         */
        setIgnoreCamelContextEvents(true);
        setIgnoreServiceEvents(true);
        setIgnoreRouteEvents(true);
        setIgnoreExchangeCreatedEvent(true);
        setIgnoreExchangeCompletedEvent(true);
        setIgnoreExchangeFailedEvents(true);
        setIgnoreExchangeSentEvents(false);		
	}

	@Override
	protected void doStop() throws Exception {

	}

	@Override
	public boolean isEnabled(EventObject event) {
		return event instanceof ExchangeSentEvent;
	}

	@Override
	public void notify(EventObject event) throws Exception {
    	if(event.getClass() == ExchangeSentEvent.class){
            ExchangeSentEvent eventSent = (ExchangeSentEvent)event;
            
            log.debug(""Took "" + eventSent.getTimeTaken() + "" millis to send to: "" + eventSent.getEndpoint());

            //storing time taken to the custom header            
            eventSent.getExchange().getIn().setHeader(""x-time-taken"", eventSent.getTimeTaken());
            
    	}
		
	}

}
{code} ",linux/windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13793,,,Mon Aug 22 07:36:28 UTC 2011,,,,,,,,,,,"0|i020f3:",9669,,,,,,,,,,,,,,,,,,,,"19/Aug/11 11:30;davsclaus;This is actually a miss usage of the EventNotifer as the idea it is a read-only event notification mechanism.
Any changes on headers is not meant to guaranteed to be preserved etc. ;;;","19/Aug/11 11:34;davsclaus;Also make sure you set the header on the correct IN or OUT. See
http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html

The exchange may very well have an OUT message already, so you should populate it correctly. Storing the detail directly on the Exchange as a property will always preserve it.;;;","19/Aug/11 13:00;crive;fixed by making use of exchange property

{code:java}
eventSent.getExchange().setProperty(""x-time-taken"", eventSent.getTimeTaken());
{code};;;","19/Aug/11 15:15;davsclaus;Marco which http component did you use? http4 or the regular http, or the jetty http producer?;;;","19/Aug/11 15:23;davsclaus;Okay the ExchangeSentEvent is being fired to early for async routing engine. For synchronous routing, the event is emitted *after* the producer has completed. For async routing is emitted just after the producer have send, but not waiting for until its done. To keep it consistent we ought to fire the event when the producer is done. Then its the same for sync and async.;;;","19/Aug/11 17:01;davsclaus;ExchangeSentEvent is now emitted when producer is done for both sync/async routing.;;;","22/Aug/11 07:36;crive;shall we consider a better practice using an exchange property instead of an header?;;;",,,,,,,,,,,,,,,,,,,,,,,
"Ftp consumer using done file should cater for if stepwise has been enabled, and thus the done file path is to be calculated differently",CAMEL-4352,12519319,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Aug/11 17:07,02/Sep/11 09:20,14/Jul/23 05:45,18/Aug/11 17:45,2.6.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,0,,,,,,,,,The workaround is to use ${file:onlyname} or not using stepwise.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,13794,,,Thu Aug 18 17:07:46 UTC 2011,,,,,,,,,,,"0|i020en:",9667,,,,,,,,,,,,,,,,,,,,"18/Aug/11 17:07;davsclaus;See nabble
http://camel.465427.n5.nabble.com/doneFileName-doesn-t-seem-to-work-tp4704701p4704701.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synchronized code causes long delays and hangs for big applications especially with Blueprint,CAMEL-4345,12519240,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jgenender,jgenender,18/Aug/11 05:18,19/Sep/11 17:44,14/Jul/23 05:45,19/Aug/11 00:58,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"The DefaultCamelContext uses synchronized ""endpoints"" which ends up ultimately extending a LinkedHashMap through the LRUCache.  The LinkedHashMap is obviously not thread safe, so it requires synchronized guards when accessing the endpoints object.  This especially happens in the getEndpoint(s) calls in the DefaultCamelContext.  In large systems with lots of routes and on multicore systems, dynamically created routes (and many routes) can cause long delays and hang for long times since route creation and the starting of the camel route can occur in unison with synchronization.  In a blueprint container, such as Karaf, this can cause timeouts on the bundle and camel routes will appear to hang indefinately.  Thread dumps show the hangs occur on the synchronized call in getEndpoint(s).  The fix for this is to use concurrent apis as much as possible and remove the synchronized code.  I refactored the LRUCache/LRUSoftCache to use Google's ConcurrentLinkedHashMap (ASL2 License http://code.google.com/p/concurrentlinkedhashmap) and removed the synchronized code that locks the endpoints object.  This should remove the hangs since the locks are no longer required.  Since COncurrentLinkedHashmap is not OSGi ready, I have shaded the classes in core.  On my executions, all unit tests pass with this refactoring using the concurrent code.  This should speed up Camel on multicore systems that have lots of routes.",Linux and Mac multicore machines,ben.manes,boday,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Aug/11 05:28;jgenender;CAMEL-4345.patch;https://issues.apache.org/jira/secure/attachment/12490756/CAMEL-4345.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13796,,,Fri Aug 19 12:26:01 UTC 2011,,,,,,,Patch Available,,,,"0|i020d3:",9660,,,,,,,,,,,,,,,,,,,,"18/Aug/11 05:28;jgenender;Patch attached against TRUNK as of r1158987;;;","18/Aug/11 13:27;davsclaus;Nice patch.

By shading it into camel-core I like the fact that the camel-core dependency don't change.
However are there people who would not like shading this into camel-core?

And are there any Apache policy that would discourage this fact?
eg the JAR contains .class files which are not from Apache ?

If just the JDK had this class already. Even JDK7 dont have it, right?;;;","18/Aug/11 15:55;joed;At least the google code is ASF License, would that help some?;;;","18/Aug/11 16:00;davsclaus;Yeah the ASL license sure does :)

I think back in the days Spring framework included the aop alliance JAR in the Spring JAR directly as well.

;;;","18/Aug/11 16:07;dkulp;
I have no problem shading it in, but does it need to be exported from the bundle in OSGi?

Since it's completely an internal field, I don't think it does.   I'd definitely prefer it didn't get exported so if some other project has a bundle with it, we don't conflict and such.;;;","18/Aug/11 17:29;ben.manes;Please open an issue to OSGi-ify CLHM and I'll do it for the next release (no timeframe).

As Google Guava is OSGi ready and I helped port the algorithm into MapMaker, that may also be a reasonable choice if it becomes a concern.

I'll be meeting up with Doug Lea in Sept. to discuss caching for JDK8, so maybe we'll see something in the standard libs eventually.

Cheers,
Ben
(CLHM author, Googler)

P.S. Don't you love Google Alerts? ;);;;","18/Aug/11 17:47;hadrian;@Ben, thanks for the offer and welcome to the Camel community :).;;;","19/Aug/11 00:44;hadrian;Patch applied in r1159457 with thanks to Jeff. Jeff, we expect more from you :).
There are a few checkstyle issues in the patch I will correct in the next hour or so and mark this issue as resolved.;;;","19/Aug/11 00:58;hadrian;Fixed checkstyle and also removed the OSGi export of the google stuff. The intent I believe was to make it accessible to components, but we can do that via a utility factory if/when needed.

Thanks Jeff!;;;","19/Aug/11 08:21;davsclaus;The osgi manifest contains import of the google code
{code}
Import-Package: com.googlecode.concurrentlinkedhashmap,javax.activatio
 n;resolution:=optional,javax.management,javax.management.modelmbean,j
 avax.management.remote,javax.naming,javax.naming.spi,javax.net.ssl,ja
 vax.xml.bind;resolution:=optional,javax.xml.bind.annotation;resolutio
 n:=optional,javax.xml.bind.annotation.adapters;resolution:=optional,j
 avax.xml.namespace,javax.xml.parsers,javax.xml.stream;resolution:=opt
 ional,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform
 .sax,javax.xml.transform.stream,javax.xml.validation,javax.xml.xpath,
 org.apache.xalan.xsltc.trax;resolution:=optional,org.osgi.framework;v
 ersion=""[1.4,2)"",org.slf4j;version=""[1.6,2)"",org.w3c.dom,org.xml.sax
{code}

I cannot see that its being exported, so I would assume we are almost okay.

What if another bundle exports com.googlecode.concurrentlinkedhashmap,
then camel-core could potential pickup that instead from itself, or am I mistaking?;;;","19/Aug/11 08:21;davsclaus;Did anyone create a ticket at Google CLHM to ask for osgify the distribution, as Ben said we should do?;;;","19/Aug/11 11:34;jgenender;Claus, yes I opened an issue to OSGI-ify ConcurrentLinkedHashMap.

Good catch on the import... it should not be in there.... clearly the Felix runs before the shade ;-)  

The fix is in the camel-core pom, right under the <camel.osgi.import>, add this:

{code}
!com.googlecode.concurrentlinkedhashmap,
{code}
    
That will fix it.;;;","19/Aug/11 12:26;davsclaus;I have applied that last change in osgi imports. And ran the osgi tests. All seems fine. Even camel-cxf which uses LRUCache from camel-core. It works also in osgi with that change above.;;;",,,,,,,,,,,,,,,,,
Username/password ignored when connectionFactory is set in JMS component,CAMEL-4329,12518681,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anydoby,anydoby,12/Aug/11 09:28,13/Aug/11 08:47,14/Jul/23 05:45,13/Aug/11 08:47,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-jms,,,,0,,,,,,,,,"There is a conflict between 2 properties: connectionFactory and username/password. If I set both the connectionFactory wins and jms endpoint uses connection factory that is unaware of username/password specified for the endpoint. 
We need to use both - we have different systems and use different connections factories with different username/passwords.

Let's assume I have a setup with 2 connection factories jmsConnectionFactory1 and jmsConnectionFactory2 and an endpoint jms:queue:myQueue?connectionFactory=jmsConnectionFactory2&username=myuser&password=secret, here is what happens:

I see that in JmsComponent:133 you retrieve the first ConnectionFactory (jmsConnectionFactory1) found in Spring.
Then in JmsComponent:414 you create a delegating ConnectionFactory which always uses username/password (with jmsConnectionFactory1) and set it to the endpoint.
Then in JmsComponent:434 you finally set the right ConnectionFactory (jmsConnectionFactory2) to the endpoint, though the username/password are lost forever.

I have solved it for our project by implementing a clone of JmsComponent with overriden createEndpoint. Move line 434 [setProperties(endpoint.getConfiguration(), parameters);] a the line immediately after 407 [String password = getAndRemoveParameter(parameters, ""password"", String.class);]
",irrelevant,anydoby,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13803,,,Sat Aug 13 08:47:53 UTC 2011,,,,,,,,,,,"0|i0209j:",9644,,,,,,,,,,,,,,,,,,,,"13/Aug/11 08:47;davsclaus;Thanks for the detailed report;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when catching exceptions,CAMEL-4326,12518453,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cedric.delaunois,cedric.delaunois,10/Aug/11 14:36,10/Aug/11 17:31,14/Jul/23 05:45,10/Aug/11 17:31,2.6.0,2.7.0,2.8.0,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"The following (blueprint) route produces a NullPointerException :

{code:xml}
<route id=""restproxy"">           
    <from uri=""restlet:http://localhost:9080/oe/ws/offre/{id}""/>
    <doTry>
        <to uri=""restlet:http://bla.dot.com:8080/oe/ws/offre/{id}""/>
        <doCatch>
            <exception>org.apache.camel.component.restlet.RestletOperationException</exception>
        </doCatch>
    </doTry>
</route>
{code}

This happens for when catching any exception classes that does not belong to camel-core or to the classpath (in a OSGI environment).

The NullPointerException is caused by the following statement in class org.apache.camel.model.CatchDefinition, method createExceptionClasses() :
{code}
Class<Exception> type = CastUtils.cast(ObjectHelper.loadClass(name, getClass().getClassLoader()));
{code}
i.e. the class is not found by the class loader.

A work-around is to activate dev:dynamic-import on the camel-core bundle.
","ServiceMix 4.x (OSGI environment), Blueprint route definition.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13810,,,2011-08-10 14:36:15.0,,,,,,,,,,,"0|i0208v:",9641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong exception uri when an HTTP error code is returned,CAMEL-4325,12518450,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cedric.delaunois,cedric.delaunois,10/Aug/11 14:20,19/Sep/11 17:45,14/Jul/23 05:45,02/Sep/11 09:21,2.6.0,2.7.0,2.8.0,,,,,,,,,,2.8.2,2.9.0,,,camel-restlet,,,,0,,,,,,,,,"When a REST service returns an HTTP error code (e.g. 404), the URI property of the exception is incorrect.
The URI is the URI of the origin endpoint of the route.
It should be instead the URI of the endpoint that threw the exception.

For instance, in the following route :
{code:xml}
<route id=""restproxy"">           
    <from uri=""restlet:http://localhost:9080/oe/ws/offre/{id}""/>           
    <doTry>
        <to uri=""restlet:http://bla.dot.com:8080/oe/ws/offre/{id}""/>
        <doCatch>
            <exception>org.apache.camel.CamelException</exception>
            <log message=""URI=${exception.uri}""/>
        </doCatch>
    </doTry>
</route>
{code}

The logged URI is ""restlet:http://localhost:9080/oe/ws/offre/{id}"" but should be instead the real URI used, e.g. ""restlet:http://bla.dot.com:8080/oe/ws/offre/1"".

This bug might be fixed by the following code change in class org.apache.camel.component.restlet.RestletProducer, method populateRestletProducerException() :
   - String uri = exchange.getFromEndpoint().getEndpointUri();
   + String uri = response.getRequest().getResourceRef()

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,60192,,,Fri Sep 02 09:21:21 UTC 2011,,,,,,,,,,,"0|i0208n:",9640,,,,,,,,,,,,,,,,,,,,"13/Aug/11 11:17;davsclaus;Thanks for reporting Cedric do you want to try to work on a patch? with an unit test that reproduces the issue and proves the fix works as expected?;;;","02/Sep/11 09:21;njiang;Applied patch with unit test into the trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Response body lost when an HTTP error code is returned,CAMEL-4324,12518447,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,cedric.delaunois,cedric.delaunois,10/Aug/11 14:01,19/Sep/11 18:12,14/Jul/23 05:45,02/Sep/11 09:20,2.6.0,2.7.0,2.8.0,,,,,,,,,,2.8.2,2.9.0,,,camel-restlet,,,,0,,,,,,,,,"When a REST service returns an HTTP error code (e.g. 404) with some content in the response body, this body is not correctly copied into the exception.
This results e.g. in ${exception.responseBody} having a value like ""org.restlet.data.Response@17bf0a7"" in the following route fragment :

<doTry>
    <to uri=""restlet:http://my.service.com/ws/{id}""/>
    <doCatch>
        <exception>org.apache.camel.CamelException</exception>
        <log message=""body is : ${exception.responseBody}""/>
    </doCatch>
</doTry>

The problem is probably due to the statement (class org.apache.camel.component.restlet.RestletProducer, method populateRestletProducerException) :
{code}
   String copy = response.toString();
{code}

that should be instead something like :
{code}
   String copy = null;
   if (response.getEntity() != null) {
       // get content text
       copy = response.getEntity().getText();
   }
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,60185,,,Fri Sep 02 09:20:40 UTC 2011,,,,,,,,,,,"0|i0208f:",9639,,,,,,,,,,,,,,,,,,,,"13/Aug/11 11:18;davsclaus;Thanks for reporting Cedric do you want to try to work on a patch? with an unit test that reproduces the issue and proves the fix works as expected?;;;","13/Aug/11 16:15;cedric.delaunois;Claus, I won't be able to work on this for the next 3 weeks. If it is ok for you to wait, then I will work on the patch.;;;","02/Sep/11 09:20;njiang;Applied patch into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
AnnotationTypeConverterLoader doesn't try all the classloaders to load the converter class,CAMEL-4322,12518429,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Aug/11 11:21,10/Feb/12 02:59,14/Jul/23 05:45,10/Aug/11 13:45,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"User complained about cannot start the camel context with web container[1], after digging the code of AnnotationTypeConverterLoader, I found that AnnotationTypeConverterLoader doesn't try all the classloader to load the converter class.

[1]http://camel.465427.n5.nabble.com/TypeConverterLoaderException-in-WebApplication-on-ContextLoad-td4684853.html",,davidkarlsen@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13809,,,Wed Aug 10 13:45:31 UTC 2011,,,,,,,,,,,"0|i0207z:",9637,,,,,,,,,,,,,,,,,,,,"10/Aug/11 13:45;njiang;Applied patch into trunk and camel-2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example feature: wrong spring version,CAMEL-4319,12518319,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,amarkevich,amarkevich,09/Aug/11 14:15,02/Sep/11 09:23,14/Jul/23 05:45,10/Aug/11 17:59,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,examples,,,,0,,,,,,,,,"Feature
apache-camel-2.8.0.zip\apache-camel-2.8.0\examples\camel-example-etl\src\main\resources\features.xml 
contains
       <bundle>mvn:org.springframework/spring-jdbc/2.5.6.SEC01</bundle>
       <bundle>mvn:org.springframework/spring-orm/2.5.6.SEC01</bundle> 
Exception during 'hibernate-feauture' feature installation:
12:23:21,337 | INFO  | l Console Thread | araf.shell.console.jline.Console  258 | 36 - org.apache.karaf.shell.console - 2.2.1 | Exception caught while executing command java.lang.Exception: Could not start bundle mvn:org.springframework/spring-jdbc/2.5.6.SEC01 in feature(s) hibernate-feauture-0.0.0: The bundle ""org.springframework.jdbc_2.5.6.SEC01 [332]"" could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=""[2.5.6.SEC01,2.5.6.SEC01]""
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)[38:org.apache.karaf.features.core:2.2.1]
...
Caused by: org.osgi.framework.BundleException: The bundle ""org.springframework.jdbc_2.5.6.SEC01 [332]"" could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=""[2.5.6.SEC01,2.5.6.SEC01]""
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1317)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1301)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:319)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:284)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:276)[osgi-3.6.0.v20100517.jar:]
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:350)[38:org.apache.karaf.features.core:2.2.1]
        ... 15 more

Solution:
Change version for bundles org.springframework/spring-jdbc and org.springframework/spring-orm to 3.0.5.RELEASE instead 2.5.6.SEC01.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13806,,,2011-08-09 14:15:07.0,,,,,,,,,,,"0|i0207b:",9634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Scheduled poll consumer from pollEnrich should not be polling when route starts, but on demand",CAMEL-4318,12518293,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Aug/11 08:13,19/Sep/11 17:51,14/Jul/23 05:45,09/Aug/11 10:01,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Overriding-ScheduledPollConsumer-tp4676752p4676752.html

The problem is that the file consumer is started when the route starts
{code}
2011-08-09 10:11:05,648 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.284 seconds
2011-08-09 10:11:06,628 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:07,130 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:07,632 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:08,133 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:08,634 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:09,135 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:09,637 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
{code}

Instead it should only be polling on demand",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,13813,,,Fri Sep 02 09:25:17 UTC 2011,,,,,,,,,,,"0|i02073:",9633,,,,,,,,,,,,,,,,,,,,"09/Aug/11 10:00;davsclaus;If using 0 as timeout on pollEnrich with a scheduled polling consumer (using EventDrivenPollingConsumer to poll) then Camel now ensures there is given time for at least one scheduled poll run. Otherwise the scheduler would not be able to poll within a 0 timeout;;;","02/Sep/11 09:25;davsclaus;Cannot backport to 2.8.1 as it has API changes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf bundle should not ship the camel-cxf-transport packages.,CAMEL-4316,12518277,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Aug/11 02:57,09/Aug/11 14:22,14/Jul/23 05:45,09/Aug/11 14:22,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"Camel-cxf bundle of camel 2.8.0 ships and exports the packages of camel-transport, it could cause some trouble when we install the camel-transport and camel-cxf bundles at the same time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13815,,,Tue Aug 09 14:22:33 UTC 2011,,,,,,,,,,,"0|i0206n:",9631,,,,,,,,,,,,,,,,,,,,"09/Aug/11 14:22;njiang;Applied patch into trunk and camel-2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Bindy Parser One to Many KvP Unmarshall Issue,CAMEL-4311,12518098,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,06/Aug/11 01:41,02/Sep/11 09:32,14/Jul/23 05:45,07/Aug/11 10:32,2.7.0,2.7.2,2.7.3,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-bindy,,,,0,,,,,,,,,"Bindy KvP unmarshall issue. 

While unmarshalling FIX messages, camel-bindy causing inconsistencies if the incoming fix messages are defined to map using 'OneToMany' annotations.

In a given route for eg:

 BindyKeyValuePairDataFormat kvpBindyDataFormat = new BindyKeyValuePairDataFormat(""org.apache.camel.dataformat.bindy.model.fix.complex.onetomany"");
        public void configure() {
            from(URI_DIRECT_START).unmarshal(kvpBindyDataFormat).to(URI_MOCK_RESULT);
        }

kvpBindyDataFormat is single instance for multiple threads and with in 'BindyKeyValuePairFactory' class instance varialbe  below is shared across multiple threads causing data inconsistencies.

private Map<String, List<Object>> lists = new HashMap<String, List<Object>>(); 

Values from previous thread/messages are retained in the current thread causing issues.

For eg in the test case: public class BindyComplexOneToManyKeyValuePairUnMarshallTest extends CommonBindyTest 

if we send another message  with no repeating groups are sent.

String message2 = ""8=FIX 4.19=2034=135=049=INVMGR56=BRKR"" + ""1=BE.CHM.00111=CHM0001-0158=this is a camel - bindy test"" 
        				  + ""10=220"";

The output message has repeating group data from message processed in earlier thread are pouplated causing data inconsistencies.

Please suggest the fix considering multi-threading scenario. I am willing to volunteer for the fix.

Regards,
Surya



 ","Windows, Linux ",surya108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Aug/11 20:21;surya108;BindyComplexOneToManyKeyValuePairUnMarshallTest_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489587/BindyComplexOneToManyKeyValuePairUnMarshallTest_patch_4311.txt","06/Aug/11 20:21;surya108;BindyKeyValuePairDataFormat_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489588/BindyKeyValuePairDataFormat_patch_4311.txt","06/Aug/11 20:25;surya108;BindyKeyValuePairFactory_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489590/BindyKeyValuePairFactory_patch_4311.txt",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,62853,,,Sun Aug 07 10:32:13 UTC 2011,,,,,,,,,,,"0|i0205j:",9626,,,,,,,,,,,,,,,,,,,,"06/Aug/11 09:46;davsclaus;You are welcome to try to fix this and work on a patch.;;;","06/Aug/11 20:20;surya108;changed few files to handle instance variable causing issues while parsing messages in multi threaded situation.

Changed instance variable to local.

added new method     
public void bind(List<String> data, Map<String, Object> model, int line, Map<String, List<Object>> lists) throws Exception {

Map<String, List<Object>> lists was instance variable root cause of bug.

patches for two java classes and 1 test case. Existing test case updated, sending multiple messages would cause test case to fail without the fix.

Please review and let me know if anything else need to be updated.

Regards,
Surya
;;;","06/Aug/11 20:21;surya108;patch files for 4133.;;;","06/Aug/11 20:25;surya108;update comments in patch file. ;;;","07/Aug/11 10:32;davsclaus;Thanks for the patch. Keep 'em coming :);;;",,,,,,,,,,,,,,,,,,,,,,,,,
xslt component - Cannot load xslt file from file system,CAMEL-4305,12517903,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Aug/11 09:43,02/Sep/11 09:36,14/Jul/23 05:45,04/Aug/11 09:45,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-spring,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Custom-URIResolver-for-Camel-tp4665485p4665485.html

The Spring IO resource is a bit pants, as you ask for it to give an input stream, and then it fails doing that for a plain file url.
Instead it gives you an URL connection, and you get a unknown host exception.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,13819,,,2011-08-04 09:43:34.0,,,,,,,,,,,"0|i02047:",9620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The cxfbean-component no longer works in OSGI (failure to auto create and NullPointerException),CAMEL-4299,12517769,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ljb,ljb,03/Aug/11 09:05,09/Aug/11 14:29,14/Jul/23 05:45,09/Aug/11 14:29,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,osgi,,,0,,,,,,,,,"Camel fails to auto create the cxfbean-component. I have tried both with blueprint and Spring-DM. For Spring-DM i get the following error:
Cannot auto create component: cxfbean

My Spring XML-file:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""jetty:http://0.0.0.0:8080?matchOnUriPrefix=true"" />
			<camel:to uri=""cxfbean:myBean"" />
		</camel:route>
	</camel:camelContext>

	<bean id=""myBean"" class=""mypackage.MyJaxRsAnnotatedBean"" />

</beans>
{code}

I have both the camel-cxf and camel-cxf-transport bundles installed and it seems that both of them  have a ComponentResolver for cxfbean published in the OSGI-registry. I can get my bundle to start if I create the cxfbean-component explicity in my Spring- or blueprint-XML file:
{code}
<bean id=""cxfbean"" class=""org.apache.camel.component.cxf.cxfbean.CxfBeanComponent"" />
{code}
But then I will get a NullPointerException when I visit a URL handled by my JAXRS-annotated bean:
java.lang.NullPointerException
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:96)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanDestination.process(CxfBeanDestination.java:83)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:286)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.component.jetty.CamelContinuationServlet.service(CamelContinuationServlet.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:538)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1352)
	at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:97)
	at org.apache.camel.component.jetty.CamelMultipartFilter.doFilter(CamelMultipartFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1323)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:937)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:406)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:871)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)
	at org.eclipse.jetty.server.Server.handle(Server.java:346)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:589)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1048)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:601)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)
	at java.lang.Thread.run(Thread.java:680)
",Karaf 2.2.0 (with a jre.properties modified to work with cxf),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,13811,,,Tue Aug 09 14:28:47 UTC 2011,,,,,,,,,,,"0|i0202v:",9614,,,,,,,,,,,,,,,,,,,,"09/Aug/11 14:28;njiang;The NPE is caused by the cxf bus can not be loaded rightly without setting a right TCCL.
I also fixed the issue that camel-cxf and camel-cxf-transport both of them have a ComponentResolver for cxfbean published in the OSGI-registry.

The patched are committed into camel trunk and camel 2.8.x branch.
Please checkout the latest camel 2.9-SNAPSHOT for verification.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-ws bundle specify a wrong version of spring package,CAMEL-4295,12516936,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Aug/11 14:35,05/Aug/11 09:00,14/Jul/23 05:45,02/Aug/11 14:44,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-spring-ws,,,,0,,,,,,,,,"Spring-ws bundle version is 2.0.2 but camel-spring-ws bundle imports spring package with the rang of [3,4).
So camel-spring-ws feature can not be installed rightly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13824,,,Fri Aug 05 09:00:12 UTC 2011,,,,,,,,,,,"0|i0201z:",9610,,,,,,,,,,,,,,,,,,,,"02/Aug/11 14:44;njiang;Applied patch into trunk.;;;","05/Aug/11 09:00;njiang;Merged the patch into 2.8.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF Endpoint creates incomplete WSDL,CAMEL-4294,12516924,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,herriot1,herriot1,02/Aug/11 13:19,15/Aug/11 23:10,14/Jul/23 05:45,04/Aug/11 08:26,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,1,,,,,,,,,"The dynamically created WSDL for a cxf:cxfEndpoint declaration is malformed when using a complex type as parameter.

Please see as well the discussion here.

http://camel.465427.n5.nabble.com/Camel-CXF-Endpoint-creating-incomplete-WSDL-td4642433.html

Use attached test project to run mvn test with version 2.8.0 and 2.7.2, this should show the error.",,,,,,,,,,,,,,,,,,,,,,,,CXF-3707,CAMEL-4251,,,,,,,,,"02/Aug/11 13:19;herriot1;camel-cxf-test.zip;https://issues.apache.org/jira/secure/attachment/12488888/camel-cxf-test.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13822,,,Fri Aug 05 17:33:43 UTC 2011,,,,,,,,,,,"0|i0201r:",9609,,,,,,,,,,,,,,,,,,,,"04/Aug/11 08:26;njiang;Applied patch into the camel trunk.;;;","04/Aug/11 17:18;toddjr;Hello,

  We are trying to upgrade our application to Camel 2.8.0/CXF 2.4.1 and this bug is also biting us.  Thanks for the quick turn-around on resolution first and foremost, but is there anyway to back port the fix to Camel 2.8 and CXF 2.4.1?  If not, what is the timeline for the release of Camel 2.9?

Thanks,
John;;;","04/Aug/11 17:23;dkulp;
CXF 2.4.2 will likely be released in a couple weeks.   Since it contains a bunch of fixes for things that Camel users have been encountering, I would expect a Camel 2.8.1 to be released shortly after that to update to 2.4.2.
;;;","04/Aug/11 18:12;toddjr;I see a branch for CXF 2.4.x fixes and the fix was applied to trunk as well as the branch for CXF.  For Camel, I only see the fix applied to the trunk.  Hopefully there will be a Camel 2.8.1 release or 2.9 release soon.

Thanks,
John;;;","04/Aug/11 22:24;muellerc;Hello John!
We just started to work on Camel 2.9. It will take approximately 3 month to see Camel 2.9.
But starting with Camel 2.7 we provide again patch releases. If this patch can be applied to the 2.8 branch, I'm sure you will see a 2.8.1 release much earlier. But at present I don't have an idea when.
Best,
Christian;;;","05/Aug/11 03:35;njiang;Hi John,

The patches of this issue are fixed from camel and cxf separately. You don't need these two patches at the same time.
If you are using camel 2.8.0, you just need to upgrade the CXF version to 2.4.2.

Willem;;;","05/Aug/11 04:01;njiang;Also merged the patch into 2.8.x branch.;;;","05/Aug/11 17:33;toddjr;Excellent.

Thanks much,
John;;;",,,,,,,,,,,,,,,,,,,,,,
@Bean method name is ignored,CAMEL-4293,12516889,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vmathon,vmathon,02/Aug/11 09:05,02/Sep/11 09:39,14/Jul/23 05:45,03/Aug/11 19:35,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"Since 2.8.0 Exchange.BEAN_METHOD_NAME is always used instead of @Bean method name (see BeanInfo.createInvocation(Object pojo, Exchange exchange)). As a consequence, the wrong method is choosen when I use a beanref invokation on a method that uses @Bean 
parameter binding.

I built a simple test case as a zip file containing an Eclipse Helios maven project (see attachment). The test fails with camel 2.8.0 and succeeds with 2.7.3 and earlier (at least until 2.6.0).

regards 
Vincent MATHON","Win7, Java 1.6_25, Eclipse Helios, m2Eclipse, maven 3.x",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Aug/11 09:07;vmathon;camel-bug-2.8.0.zip;https://issues.apache.org/jira/secure/attachment/12488869/camel-bug-2.8.0.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13818,,,Wed Aug 03 19:35:12 UTC 2011,,,,,,,,,,,"0|i0201j:",9608,Regression,,,,,,,,,,,,,,,,,,,"03/Aug/11 17:44;davsclaus;The *header* always takes precedence. This is by design, and older Camel releases had this as a bug.;;;","03/Aug/11 17:47;davsclaus;I can see your issue as you use @Bean in the method signature, and thus it uses the method name that was used to invoke itself. That of course is not expected. 

However if you do route to a bean, and provide a header with a method name, then that header is being used.;;;","03/Aug/11 18:38;davsclaus;Thanks Vincent. I have reproduced your issue. The problem is that you do a bean invocation inside another bean invocation (eg since you use @Bean on the bean you invoke). And thus the @Bean sees the header which is should not affect it.;;;","03/Aug/11 19:35;davsclaus;Thanks for reporting and providing a sample to demonstrate the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws won't build offline,CAMEL-4287,12515914,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,01/Aug/11 13:12,02/Sep/11 09:42,14/Jul/23 05:45,01/Aug/11 13:13,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,,,,,0,,,,,,,,,"If you build camel-aws in Maven's offline mode (-o), you may get the following error:

No versions available for org.codehaus.jackson:jackson-core-asl:jar:[1.4,) within specified range

This will occur even if you have the libs locally. This is happening because Maven cannot download the remote metadata to get a list of versions for jackson-core-asl. Specifying a hard version for this (not a range) gets around the issue. Committing a fix shortly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13827,,,Mon Aug 01 13:13:20 UTC 2011,,,,,,,,,,,"0|i02007:",9602,,,,,,,,,,,,,,,,,,,,"01/Aug/11 13:13;janstey;janstey@duffman:/x1/asf/camel/trunk/components/camel-aws$ svn ci -m ""CAMEL-4287 - get AWS component building offline""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1152755.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dump as xml fails if message body is already xml,CAMEL-4283,12515781,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/11 14:43,19/Sep/11 18:09,14/Jul/23 05:45,29/Jul/11 14:57,2.8.0,,,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,0,,,,,,,,,MessageHelper.dumpAsXml has a problem if the message body is already xml.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13845,,,2011-07-29 14:43:39.0,,,,,,,,,,,"0|i01zzb:",9598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf OSGi bundle uses an incorrect CXF version range,CAMEL-4276,12515644,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,28/Jul/11 13:17,25/Oct/11 11:35,14/Jul/23 05:45,29/Jul/11 07:46,2.7.3,2.8.0,,,,,,,,,,,2.7.4,2.8.1,2.9.0,,camel-cxf,,,,0,,,,,,,,,"The camel-cxf Karaf feature defines the following CXF version range:

<feature version=""[2.4,2.6)"">cxf</feature>

which is correct.

Unfortunately the camel-cxf bundle import statement doesn't define explicitly the CXF version range. The Felix maven-bundle-plugin determines the version range with the CXF version used and so define it to [2.4,2.5).

1/ it's not correct as it doesn't match the feature definition
2/ it means that you can't use Camel with CXF 2.5.0-SNAPSHOT",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,66676,,,Fri Jul 29 07:46:21 UTC 2011,,,,,,,,,,,"0|i01zxr:",9591,,,,,,,,,,,,,,,,,,,,"28/Jul/11 16:01;jbonofre;Fixed on Camel trunk: revision 1151903.;;;","29/Jul/11 07:38;jbonofre;Fixed on camel-2.8.x branch: revision 1152130.;;;","29/Jul/11 07:46;jbonofre;Fixed on camel-2.7.x branch: revision 1152136.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
MDCUnitOfWork behaviour incorrect with nested routes,CAMEL-4274,12515477,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yaytay,yaytay,27/Jul/11 06:11,02/Sep/11 09:47,14/Jul/23 05:45,27/Jul/11 07:25,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"MDCUnitOfWork.clear() removes any content set by MDCUnitOfWork from MDC.
If there are two separate exchange running at the same time in the same thread, as happens when a ProduceTemplate is used from Java, this is incorrect because the MDC of the parent is cleared after the child completes.
Conceptually the MDC should be a stack, but MDC only accepts strings so the simplest thing to do is for MDCUnitOfWork to replace the previous values in clear().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jul/11 06:14;yaytay;Camel-MDC.patch;https://issues.apache.org/jira/secure/attachment/12487934/Camel-MDC.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13831,,,Wed Jul 27 07:25:39 UTC 2011,,,,,,,Patch Available,,,,"0|i01zxb:",9589,,,,,,,,,,,,,,,,,,,,"27/Jul/11 06:14;yaytay;Patch to reset MDC back to original values in clear().;;;","27/Jul/11 07:25;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connection to sftp server occasionally don't want to come back,CAMEL-4269,12515383,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marekni,marekni,26/Jul/11 11:53,02/Sep/11 09:49,14/Jul/23 05:45,26/Jul/11 13:25,2.7.2,2.7.3,,,,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,0,,,,,,,,,"Problem appear if somebody kill logged on user on sftp server while you are connected with consumer.
Camel is not able to reconnect on next poll even if it says that it will do this.
RemoteFileConsumer is not connected but it thinks that it is still logged in.

I think ""loggedIn"" flag should be down after each disconnecting action like in attached patch.

{quote}
2011-07-24 22:35:14,848 WARN  [RemoteFilePollingConsumerPollStrategy:37] Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://test@host 
2011-07-24 22:35:14,849 WARN  [RemoteFilePollingConsumerPollStrategy:52] Consumer Consumer[sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true] could not poll endpoint: sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true caused by: Cannot change directory to: test 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: test
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:408)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:393)
	at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:77)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:49)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:406)
	... 14 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)
	at java.io.PipedInputStream.read(PipedInputStream.java:361)
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)
	... 15 more
{quote}
","windows, linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jul/11 11:55;marekni;Camel-4269-RemoteFileConsumerPatch.txt;https://issues.apache.org/jira/secure/attachment/12487816/Camel-4269-RemoteFileConsumerPatch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13832,,,Tue Jul 26 13:25:39 UTC 2011,,,,,,,Patch Available,,,,"0|i01zw7:",9584,,,,,,,,,,,,,,,,,,,,"26/Jul/11 13:25;davsclaus;Thanks Marek for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fail to close stream in DefaultPropertiesResolver,CAMEL-4265,12515292,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,edge,edge,25/Jul/11 17:55,02/Sep/11 09:46,14/Jul/23 05:45,26/Jul/11 07:15,2.7.3,2.8.0,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"    protected Properties loadPropertiesFromFilePath(CamelContext context, String path) throws IOException {
        if (path.startsWith(""file:"")) {
            path = ObjectHelper.after(path, ""file:"");
        }
        InputStream is = new FileInputStream(path);
        Properties answer = new Properties();
        answer.load(is);
        return answer;
    }

    Stream not closed before return, as well as in another method: loadPropertiesFromClasspath.    ",Any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jul/11 06:24;edge;close_inputstream.patch;https://issues.apache.org/jira/secure/attachment/12487796/close_inputstream.patch","26/Jul/11 04:59;edge;close_inputstream.patch;https://issues.apache.org/jira/secure/attachment/12487791/close_inputstream.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13840,,,Fri Jul 29 14:28:42 UTC 2011,,,,,,,,,,,"0|i01zvb:",9580,,,,,,,,,,,,,,,,,,,,"25/Jul/11 19:40;davsclaus;Thanks for reporting. Do you want to try to provide a patch to fix this?

See more details here
http://camel.apache.org/contributing.html;;;","26/Jul/11 04:59;edge;I attached a file, hope it's in needed format.

No test case could be provided since it is a simple close operation surrounded by try ... finally.;;;","26/Jul/11 05:59;davsclaus;Edge, can you re-attach the patch and make sure to grant license to Apache. We cannot accept patches without the license.;;;","26/Jul/11 06:24;edge;Didn't notice the license choice, this time would be ok.;;;","26/Jul/11 07:15;davsclaus;Thanks for the patch.

I polished it a bit to use IOHelper to close the resource.;;;","29/Jul/11 12:58;edge;Can I modify it's fixed version, to add 2.8.1？;;;","29/Jul/11 13:01;davsclaus;Please dont change the fix versions as its only committers who does this, when he commits/backports.;;;","29/Jul/11 13:24;davsclaus;When we are to cut a 2.8.1 release, we will look at all the bugs fixed for Camel 2.9 and backport the bugs that can be done and make sense. I am sure this bug will be backported. So just have patience.;;;","29/Jul/11 14:28;edge;ok, thanks.;;;",,,,,,,,,,,,,,,,,,,,,
The routeContext stack of DefaultUnitOfWork should be thread safe,CAMEL-4264,12515233,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,njiang,njiang,25/Jul/11 10:02,30/Aug/11 00:04,14/Jul/23 05:45,26/Aug/11 01:59,2.7.3,2.8.0,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,3,,,,,,,,,"Here is the stack trace
{code}
java.util.EmptyStackException
        at java.util.Stack.peek(Stack.java:85)
        at java.util.Stack.pop(Stack.java:67)
        at 
org.apache.camel.impl.DefaultUnitOfWork.popRouteContext(DefaultUnitOfWork.java:226)
        at 
org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:260)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
        at 
org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
        at 
org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:113)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
        at 
org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at 
org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:397)
        at 
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at 
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

{code}
You can find more information in this mail thread[1]
[1]http://camel.465427.n5.nabble.com/EmptyStackException-in-DefaultUnitOfWork-popRouteContext-td4630106.html",,dgtombs,mkolev,muellerc,schmidtm,,,,,,,,,,,,,,,,,CAMEL-4383,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13834,,,Tue Aug 30 00:04:37 UTC 2011,,,,,,,,,,,"0|i01zuv:",9578,,,,,,,,,,,,,,,,,,,,"25/Jul/11 11:17;muellerc;I saw this exception also from time to time in Camel 2.3.0, only when we enable tracing on the Camel context.;;;","25/Jul/11 12:45;njiang;Applied patch into trunk.;;;","25/Jul/11 14:20;mkolev;Hi Willem,
is it really necessary to synchronize on the {{routeContext}} param
in {code}public void pushRouteContext(RouteContext routeContext){code}?

There are also other synchronization issues that concern the other memeber variables of the class, (e.g. {{synchronizations}} and {{subUnitOfWorks}}). Is synchrnonization really (not)needed for those memebers?;;;","25/Jul/11 14:42;schmidtm;Hi Willem, could you please add the number 2.5.0 to the list of affected versions?;;;","26/Jul/11 10:11;muellerc;pushRouteContext() should also synchronize on routeContextStack instead of routeContext. Thanks Matthias for pointing this out.;;;","26/Jul/11 10:23;muellerc;Committed r1151054
Thanks Matthias for pointing this out.;;;","26/Jul/11 10:31;muellerc;Added to the 2.9.0 release notes;;;","25/Aug/11 18:24;dgtombs;This issue is biting my organization hard in a critical route where we can't drop any messages. Would it be possible to target this for 2.8.1 or some kind of bugfix release? Thanks.;;;","26/Aug/11 01:57;njiang;Merged the patch into camel 2.8.x branch.
;;;","30/Aug/11 00:04;dgtombs;Excellent, thank you!;;;",,,,,,,,,,,,,,,,,,,,
Properties component - Cached locations may add duplicates,CAMEL-4261,12514999,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Jul/11 07:15,08/Aug/11 18:02,14/Jul/23 05:45,22/Jul/11 09:19,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/LRUCache-memory-leak-when-using-camel-properties-file-tp4621357p4621357.html

The internal cache should be a soft cache and we should use a key holder to ensure equals/hashCode",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13843,,,2011-07-22 07:15:15.0,,,,,,,,,,,"0|i01zu7:",9575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing setter or constructor-argument for elementNameStrategyRef in SoapJaxbDataFormat,CAMEL-4254,12514903,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ojelinski,ojelinski,21/Jul/11 12:59,23/Sep/11 12:32,14/Jul/23 05:45,04/Aug/11 10:19,2.7.0,2.7.3,,,,,,,,,,,2.8.1,2.9.0,,,camel-soap,,,,0,,,,,,,,,"Because the variable ""elementNameStrategyRef"" in org.apache.camel.dataformat.soap.SoapJaxbDataFormat can't be set, it is always null. Therefore declaring the data format with spring-dsl leads to an automatic fallback to the default strategy ""TypeNameStrategy"" in org.apache.camel.dataformat.soap.SoapJaxbDataFormat.checkElementNameStrategy(Exchange exchange). This further leads to wrong results when marshalling.

So the following declararion does not work correctly:
...
    <bean id=""myStrategy"" class=""org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy"">
    	<constructor-arg value=""my.package.MyServiceInterface""/>
	<constructor-arg value=""true""/>
    </bean>
...
    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
...
		<dataFormats>
			<soapjaxb id=""mySoap"" 
                              contextPath=""my.package"" 
                              elementNameStrategyRef=""myStrategy""/>
		</dataFormats>
...
                <route>
        	        <from uri=""cxf:/MyService?serviceClass=my.package.MyServiceInterface"" />
...
            		<convertBodyTo type=""my.package.MyType""/>
			<marshal ref=""mySoap""/>
...",,ojelinski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jul/11 19:01;ojelinski;camel-soap-2.7.3.patch.txt;https://issues.apache.org/jira/secure/attachment/12488010/camel-soap-2.7.3.patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,13816,,,Fri Sep 23 12:32:29 UTC 2011,,,,,,,,,,,"0|i01zsn:",9568,,,,,,,,,,,,,,,,,,,,"21/Jul/11 16:30;davsclaus;Oliver do you want to work on a patch?;;;","22/Jul/11 07:24;ojelinski;Yes, I think I can do that during the weekend. Are there any documents on naming conventions, code-style etc.?;;;","22/Jul/11 07:33;davsclaus;There is some documentation here
http://camel.apache.org/developers.html

But in terms of code style / naming. Then follow the existing code.

There is a checkstyle rule which we run from a command line, which ensures the formatting of the code is consistent.
http://camel.apache.org/building.html

But dont worry to much about that as the Camel team can take care of that.;;;","22/Jul/11 07:50;ojelinski;ok, thanks!;;;","27/Jul/11 19:01;ojelinski;I generated a patch for the camel-2.7.3 tag, where the problem is solved. I had to modify the spring-context for one unit-test, too, because the strategy ref was not declared and after fixing the bug, this naturally lead to exceptions.;;;","28/Jul/11 07:44;davsclaus;Willem can you look at this as part of that other ticket for camel-soap you have assigned?;;;","04/Aug/11 10:19;njiang;Applied patch with thanks to Oliver.;;;","23/Sep/11 12:32;ojelinski;It works. Thanx.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Using tempFileName option should use the separator option to allow control of path separators in the generated file name,CAMEL-4252,12514759,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Jul/11 08:20,02/Sep/11 09:55,14/Jul/23 05:45,20/Jul/11 16:18,2.7.2,2.8.0,,,,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/FTP-temp-file-not-being-created-correctly-on-Windows-Camel-2-7-2-tp4591581p4591581.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13842,,,2011-07-20 08:20:47.0,,,,,,,,,,,"0|i01zs7:",9566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TraceInterceptor does not work correctly for AsyncProcessing,CAMEL-4246,12514569,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yaytay,yaytay,19/Jul/11 11:34,02/Sep/11 09:51,14/Jul/23 05:45,22/Jul/11 11:33,2.7.1,,,,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,0,,,,,,,,,"TraceEventHandlers are not called correctly when a node is processed asynchronously.

From  org.apache.camel.processor.interceptor.TraceInterceptor:
            try {
                // special for interceptor where we need to keep booking how far we have routed in the intercepted processors
                if (node.getParent() instanceof InterceptDefinition && exchange.getUnitOfWork() != null) {
                    TracedRouteNodes traced = exchange.getUnitOfWork().getTracedRouteNodes();
                    traceIntercept((InterceptDefinition) node.getParent(), traced, exchange);
                }

                // process the exchange
                try {
                    sync = super.process(exchange, callback);
                } catch (Throwable e) {
                    exchange.setException(e);
                }
            } finally {
                // after (trace out)
                if (shouldLog && tracer.isTraceOutExchanges()) {
                    logExchange(exchange);
                    traceExchangeOut(exchange, traceState);
                }
            }

As it is this results in traceExchangeOut being called before the callback, which is wrong.
The call to super.process needs to wrap the callback to call traceExchangeOut (and the finally block shouldn't run if the process is asynch).

This isn't a regression, but the change to make more routes asynchronous makes it more noticeable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13838,,,2011-07-19 11:34:51.0,,,,,,,,,,,"0|i01zqv:",9560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use XA JMS trabsaction on WebLogic,CAMEL-4240,12514409,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ciand7,ciand7,18/Jul/11 08:34,23/Sep/11 13:49,14/Jul/23 05:45,23/Sep/11 13:49,,,,,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,0,,,,,,,,,"There is problem with camel-jms component deployed on WebLogic 10.3.X and XA connection factory. 

As spring developers suggests, if we use XA transaction on WebLogic we must set SessionTransacted to false and specify transactionManager. See http://ourcraft.wordpress.com/2008/10/22/the-mysteriously-necessary-sessiontransactedtrue/ comment #9 by Juergen Hoeller.

But camel-jms setup transactionManager for MessageListener only when ""transacted"" property is true. So, it is not possible to use XA transactions with WebLogic JMS.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Sep/11 07:03;ciand7;camel-jms-r1173278-CAMEL-4240-light.diff;https://issues.apache.org/jira/secure/attachment/12496072/camel-jms-r1173278-CAMEL-4240-light.diff","22/Sep/11 07:03;ciand7;camel-jms-r1173278-CAMEL-4240.diff;https://issues.apache.org/jira/secure/attachment/12496071/camel-jms-r1173278-CAMEL-4240.diff",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13762,,,Fri Sep 23 13:49:48 UTC 2011,,,,,,,,,,,"0|i01zpj:",9554,,,,,,,,,,,,,,,,,,,,"26/Jul/11 14:59;davsclaus;Andrey do you care to work on a patch and test it to see if works on WebLogic?;;;","27/Jul/11 08:19;ciand7;Hi Claus,

Yes, of course. I can try to create patch and check it on WebLogic 10.3.3. I can do it next weekend.
;;;","20/Sep/11 15:06;davsclaus;Andrey any update on this?;;;","22/Sep/11 07:03;ciand7;Hi Claus,
I attach two versions of patch for this issue. 

First - camel-jms-r1173278-CAMEL-4240.diff - contains significant changes in transaction settings behavior.

Main point is to have identical meaning of 'transactionManager' and 'sessionTransacted' properties between JMS component and Spring MessageListenerContainer.

1. If 'transacted'==false && tm==null && lazyCreateTransactionManager==false, then do nothing with transaction in MessageListenerContainer.
2. If 'transacted'==false && tm==null && lazyCreateTransactionManager==true, then create and setup own tm (imho it is not good idea).
3. If 'transacted'==false && tm!=null, then setup only tm in MessageListenerContainer.
4. If 'transacted'==true && tm==null && lazyCreateTransactionManager==false, then setup only sessionTransacted in MessageListenerContainer.
5. If 'transacted'==true && tm==null && lazyCreateTransactionManager==true, then set sessionTransacted, create and setup own tm.
6. If 'transacted'==true && tm!=null, then set sessionTransacted and tm in MessageListenerContainer.

Case 3 corresponds to typical J2EE configuration with XA tm. 

But I would like to do more tests with WebLogic and ActiveMQ.

===
Second patch version -  ""light"" - camel-jms-r1173278-CAMEL-4240-light.diff.
It only allow setup tm without 'transacted' property. It is almost identical to current implementation and safer.
;;;","23/Sep/11 13:49;davsclaus;Thanks. I applied the light patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Archetypes fail to build in offline mode,CAMEL-4237,12514244,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,15/Jul/11 16:20,25/Oct/11 11:35,14/Jul/23 05:45,15/Jul/11 16:22,2.7.2,,,,,,,,,,,,2.7.4,2.8.0,,,,,,,0,,,,,,,,,"If build tooling/archetypes with the --offline Maven argument you may see an error like

[ERROR]     Unresolveable build extension: Error resolving version for plugin 'org.apache.maven.archetype:archetype-packaging'

Seems the version for archetype-packaging in the dependencyManagement section defined in the parent pom is not propagating down to build extension... when Maven is not in offline mode it can simply grab the latest version from the metadata at central. I'm committing a simple fix shortly. ",Maven 3.0.2 on Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13856,,,Fri Jul 15 16:23:18 UTC 2011,,,,,,,,,,,"0|i01zov:",9551,,,,,,,,,,,,,,,,,,,,"15/Jul/11 16:22;janstey;janstey@mojo:/x1/asf/camel/trunk$ svn ci -m ""CAMEL-4237 - fix issue with archetypes not building in Maven offline mode""
Sending        tooling/archetypes/camel-archetype-activemq/pom.xml
Sending        tooling/archetypes/camel-archetype-blueprint/pom.xml
Sending        tooling/archetypes/camel-archetype-component/pom.xml
Sending        tooling/archetypes/camel-archetype-java/pom.xml
Sending        tooling/archetypes/camel-archetype-scala/pom.xml
Sending        tooling/archetypes/camel-archetype-spring/pom.xml
Sending        tooling/archetypes/camel-archetype-spring-dm/pom.xml
Sending        tooling/archetypes/camel-archetype-web/pom.xml
Sending        tooling/archetypes/camel-archetype-webconsole/pom.xml
Transmitting file data .........
Committed revision 1147216.
;;;","15/Jul/11 16:23;janstey;Assuming this issue will be fixed in 2.8 since the VOTE has been -1'd;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprint2Test  testErrorHandler test is failed.,CAMEL-4235,12514199,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Jul/11 11:10,15/Jul/11 12:35,14/Jul/23 05:45,15/Jul/11 12:35,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-blueprint,osgi,,,0,,,,,,,,,"org.apache.camel.itest.osgi.blueprint.CamelBlueprint2Test.testErrorHandler failed dure to the CircularDependencyException.

{code}
[Blueprint Extender: 1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle CamelBlueprintTestBundle14
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to intialize bean camel-1
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:724)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)

......
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[mock:result] <<< in route: Route[[From[direct:start]] -> [To[mock:result]]] because of org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='dlc'], BeanRecipe[name='.camelBlueprint.bean.factory.dlc'], BeanRecipe[name='camel-1'], BeanRecipe[name='dlc']]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:794)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:705)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1659)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13855,,,Fri Jul 15 12:35:00 UTC 2011,,,,,,,,,,,"0|i01zof:",9549,,,,,,,,,,,,,,,,,,,,"15/Jul/11 11:12;davsclaus;The work around is to use <bean> for error handlers, eg
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

  <bean id=""dlc"" class=""org.apache.camel.builder.DeadLetterChannelBuilder"">
    <property name=""deadLetterUri"" value=""mock:dead""/>
  </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">

        <!--<errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>-->

        <route errorHandlerRef=""dlc"">
            <from uri=""direct:start""/>
            <to uri=""mock:result""/>
        </route>

    </camelContext>

</blueprint>
{code};;;","15/Jul/11 12:35;njiang;I just committed a quick fix for it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate/MockEndpoint does not seem to trigger context exception handling.,CAMEL-4234,12514185,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xbbrck,xbbrck,15/Jul/11 09:20,18/Jul/11 14:07,14/Jul/23 05:45,18/Jul/11 14:07,2.7.0,2.7.1,2.7.2,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"Hello,

I have a camel route that has ""onException"" clause.  When I run it on Tomcat it works pefectly, but in my integration test (JUnit4 + Spring Tests) the exception handling isn't triggered.  The unit tests uses a producer template and mock endpoint, so it seems that it is in one of those.

I'll try to reproduce it in a small test case.

Kind regards,
Bryan. ","JUnit4 Spring tests, Spring DSL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Jul/11 12:27;xbbrck;CAMEL-4234.zip;https://issues.apache.org/jira/secure/attachment/12486861/CAMEL-4234.zip","18/Jul/11 06:26;xbbrck;routes.xml;https://issues.apache.org/jira/secure/attachment/12486795/routes.xml",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13846,,,Mon Jul 18 14:06:58 UTC 2011,,,,,,,,,,,"0|i01zo7:",9548,,,,,,,,,,,,,,,,,,,,"18/Jul/11 06:25;xbbrck;Hello,

It doesn't seem to be easy to replicate the issue, but I did get some extra information.

I do get the following log entry:
TRACE [org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy] - The type is scoped for route: userWs.getUser however Exchange is at route: userWs.listUsers

Which explains why the onException isn't triggerd.  But what is strange, is that the onException is defined on context level and the route thas is executed is userWS.getUsers.

I'll include my routing config, and keep working on a simple example.;;;","18/Jul/11 06:34;davsclaus;What version of Camel do you exactly use?;;;","18/Jul/11 06:37;xbbrck;The 2.8-SNAPSHOT of https://repository.apache.org/content/repositories/snapshots/;;;","18/Jul/11 12:27;xbbrck;Added a simple example that causes the error.

There are 2 routes, both with there own input but both use the same output.  In my test cases I mock the output.  The test case fails because the exception isn't caught.

Do you have an idea about the issue?  Is there a workaround?

Kind regards.
Bryan.;;;","18/Jul/11 12:33;xbbrck;The same error exists from version 2.7.0, it worked until 2.6.0.;;;","18/Jul/11 13:02;davsclaus;Can you make sure you use the latest source code. There has been a fix to ensure <onException>s is being enlisted with the correct context/route scope.;;;","18/Jul/11 13:30;xbbrck;I tested with 2.9-SNAPSHOT and it does work. Any idea when the final version will be released?

Kind regards,
Bryan.;;;","18/Jul/11 14:06;davsclaus;Camel 2.8 is being cut later today/tomorrow. So this ticket is included.

I added an unit test based to verify it works in both java and xml dsl.;;;",,,,,,,,,,,,,,,,,,,,,,
shouldn't call BaseTypeConverterRegistry.loadTypeConverters() in OSGi container,CAMEL-4231,12514162,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,ffang,ffang,15/Jul/11 06:00,15/Jul/11 08:40,14/Jul/23 05:45,15/Jul/11 08:40,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"the Activator in camel-core take care of loading the converters from bundles, we should avoid  calling BaseTypeConverterRegistry.loadTypeConverters() in OSGi container, otherwise due to no classloader was specified, see this code in OsgiTypeConverter
            @Override
            public Set<ClassLoader> getClassLoaders() {
                // we don't need any classloaders as we use osgi service tracker instead
                return Collections.emptySet();
            }

we'll get exception like
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.servicemix.camel.converter]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:90)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:406)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:42)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:56)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:163)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jul/11 07:01;ffang;CAMEL-4231-new.patch;https://issues.apache.org/jira/secure/attachment/12486555/CAMEL-4231-new.patch","15/Jul/11 06:03;ffang;CAMEL-4231.patch;https://issues.apache.org/jira/secure/attachment/12486552/CAMEL-4231.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13857,,,Fri Jul 15 08:40:13 UTC 2011,,,,,,,,,,,"0|i01znj:",9545,,,,,,,,,,,,,,,,,,,,"15/Jul/11 07:01;ffang;attach CAMEL-4231-new.patch which change the load order, loadCoreTypeConverters firstly, keep it same as the scenario out-of OSGi container.;;;","15/Jul/11 08:40;davsclaus;Applied patch. Thanks Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Running the camel-example-spring-javaconfig fails on startup,CAMEL-4219,12513891,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jul/11 08:57,13/Jul/11 09:09,14/Jul/23 05:45,13/Jul/11 09:09,,,,,,,,,,,,,2.8.0,,,,examples,,,,0,,,,,,,,,This example fails when running mvn camel:run as stated in the readme.txt file.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13870,,,2011-07-13 08:57:53.0,,,,,,,,,,,"0|i01zkv:",9533,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FtpOperations Delete operation not respecting Stepwise Attribute,CAMEL-4215,12513810,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dsmw,dsmw,12/Jul/11 15:59,25/Oct/11 11:36,14/Jul/23 05:45,13/Jul/11 07:07,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,,,,"Current implementation of deleteFile(String name) ignores the Endpoints 'stepwise' requirement. 

This was noticed when interfacing with a MVS ftp system with the operation failing silently as the resulting exception is swallowed by higher order code.

I've unfortunately been unable to create a test case that emulates the behavior, since the Apache FtpServer and associated mocks used within the test cases don't emulate the behavior of the MVS platform.

I believe other operations suffer the same problem (e.g rename).

I've attached a patch that corrects the issue. Existing test cases all pass, though someone will probably want to see if this implementation is the most efficient.",All,dsmw,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Jul/11 16:00;dsmw;FtpOperations.patch;https://issues.apache.org/jira/secure/attachment/12486196/FtpOperations.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13869,,,Wed Jul 13 07:07:43 UTC 2011,,,,,,,,,,,"0|i01zjz:",9529,,,,,,,,,,,,,,,,,,,,"13/Jul/11 07:07;davsclaus;Thanks for the patch. I removed the code that swallowed the exception to surface the problem to the end user (as it will have the exception + stacktrace).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa can't find entities when using blueprint in OSGi,CAMEL-4213,12513774,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ljb,ljb,12/Jul/11 10:18,12/Sep/11 06:09,14/Jul/23 05:45,12/Sep/11 06:09,2.7.2,,,,,,,,,,,,2.9.0,,,,camel-jpa,osgi,,,0,,,,,,,,,"When using the following simple route, the entity classes can't be found:
{code}
public void configure() throws Exception {
    from(""direct:test-in"").to(""jpa:mypackage.MyEntity1"");
    from(""jpa:mypackage.MyEntity2"").to(""log:test-out"");
}
{code}
The error message is:
09:43:55,417 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity1
09:43:55,467 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity2

followed by many warnings about that the entityType is not known for the consumer.

The errors only occur when using blueprint to bootstrap the route. When using spring-dm everything works fine. The entity classes are located in the same bundle as the route. My guess is that it uses the wrong classloader.

JPA works fine otherwise. It is only the camel-jpa component I have problems with. camel-jpa is a very spring-centric module, using a spring TransactionManager and all, so I hope that my use case makes sense.

For completeness here is my blueprint-file:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	default-activation=""eager"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.1.0"">

	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<package>mypackage</package>
	</camelContext>

	<bean id=""jpa"" class=""org.apache.camel.component.jpa.JpaComponent"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
		<property name=""transactionManager"" ref=""transactionManager"" />
	</bean>

	<bean id=""transactionManager"" class=""org.springframework.orm.jpa.JpaTransactionManager"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
	</bean>

	<reference id=""entityManagerFactory"" interface=""javax.persistence.EntityManagerFactory"" filter=""(osgi.unit.name=myunit)"" />

</blueprint>
{code}
The EntityManagerFactory is created by Aries Jpa, but it shouldn't be relevant for the question.",Apache Karaf 2.2.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,60913,,,Mon Sep 12 06:09:43 UTC 2011,,,,,,,,,,,"0|i01zjj:",9527,,,,,,,,,,,,,,,,,,,,"30/Aug/11 06:33;davsclaus;Can you attach the configuration of the EntityManagerFactory if possible. In essence a complete example is desirable to create an unit test in osgi blueprint that reproduces the issue, which then helps verify the fix implemented.;;;","30/Aug/11 07:01;iocanel;ObjectHelper is using the Thread Context Class loader in order to resolve the class. Spring DM sets the Thread Context Class Loader to the class loader of the bundle that created the context, while blueprint does not.

I think that the problem could be solved if the OsgiClassResolver would use the bundle class loader in order to resolve classes.

I could work on a patch, if you like. ;;;","30/Aug/11 07:40;davsclaus;I think Gert fixed camel-blueprint to set the TCCL as well.;;;","30/Aug/11 07:41;davsclaus;A patch is of course welcome, but an osgi blueprint unit tests in camel-itest-osgi would be great.;;;","05/Sep/11 20:20;iocanel;@Claus: Indeed the TCCL is set (at least in the trunk) and its enough to properly load the classes, when using the blueprint. I did a test project using openjpa, aries jpa & camel-blueprint and I didn't have any issues (using the trunk). 


@Jonas: Can you try again using the trunk (version 2.9-SNAPSHOT)?;;;","06/Sep/11 09:44;ljb;It works with 2.9-SNAPSHOT! I also tried the same test on 2.7.3 which failed, so it seems that the bug has been fixed.;;;","06/Sep/11 14:12;njiang;This issue may be fixed by CAMEL-4347.;;;","12/Sep/11 06:09;davsclaus;Already fixed as part of another ticket.;;;",,,,,,,,,,,,,,,,,,,,,,
URISupport - Normalize URI should support parameters with same key,CAMEL-4211,12513761,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Jul/11 07:09,12/Jul/11 09:23,14/Jul/23 05:45,12/Jul/11 09:23,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problems-with-jetty-component-and-posts-with-more-then-one-value-for-a-field-tp4576908p4576908.html

The end user is using jetty producer component to send a HTTP POST/GET to some external client. In the endpoint uri he have the parameters, and there are 2 times {{to}} as parameter key. Currently Camel loses the 2nd {{to}} parameter. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4212,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13867,,,2011-07-12 07:09:28.0,,,,,,,,,,,"0|i01zj3:",9525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy Parser not handling Null values in KVP,CAMEL-4198,12513275,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,08/Jul/11 15:16,19/Sep/11 19:40,14/Jul/23 05:45,28/Jul/11 07:39,2.7.1,,,,,,,,,,,,2.8.2,2.9.0,,,camel-bindy,,,,0,,,,,,,,,"Camel Bindy is not handling null values in KVP. It throws ArrayIndexOutOfBounds Exception.
From the source below if FIX message has a key value pair with null value i.e (eg: 43=1|63=|64=xyz) the key 63 has no value an while parsing it throws exception for keyValuePair[1].

           // Get KeyValuePair
            String[] keyValuePair = s.split(getKeyValuePairSeparator());

            // Extract Key
            int key = Integer.parseInt(keyValuePair[0]);

            // Extract key value
            String value = keyValuePair[1];",developement ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Jul/11 02:49;surya108;BindyKeyValuePairFactory_patch_4198.patch;https://issues.apache.org/jira/secure/attachment/12488057/BindyKeyValuePairFactory_patch_4198.patch","25/Jul/11 01:19;surya108;BindyKeyValuePairFactory_patch_4198.patch;https://issues.apache.org/jira/secure/attachment/12487660/BindyKeyValuePairFactory_patch_4198.patch","28/Jul/11 02:49;surya108;fix.txt;https://issues.apache.org/jira/secure/attachment/12488056/fix.txt","25/Jul/11 02:18;surya108;fix.txt;https://issues.apache.org/jira/secure/attachment/12487666/fix.txt",,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13829,,,Thu Jul 28 07:39:09 UTC 2011,,,,,,,,,,,"0|i01zg7:",9512,,,,,,,,,,,,,,,,,,,,"08/Jul/11 15:31;davsclaus;Do you want to attempt to provide a patch with a fix?

It seems you may have to check the length of the keyValuePair is > 1 to avoid the NPE.

And if possible an unit test would be really good as well.;;;","08/Jul/11 15:31;davsclaus;You can read about contributing here
http://camel.apache.org/contributing.html;;;","08/Jul/11 15:37;surya108;Hi Claus,
 
Thanks for providing information on how to contribute, I will attempt to fix this one and keep posted.

Regards,;;;","23/Jul/11 11:02;davsclaus;Any update on a patch?;;;","24/Jul/11 06:23;surya108;Just started working on it, will submit the patch once done.;;;","25/Jul/11 01:19;surya108;Patch for Issue 4198 is attached.

Fix in file BindyKeyValuePairFactory.java in package org.apache.camel.dataformat.bindy.

Fix made to check KeyValuePair String[] length>1.

No Unit tests added or updated. Only updated input fix message used for testing in Unit Tests. Added new tag with no value for tag 55.
""file://src/test/data/fix?noop=true"";

Without patch unit tests would fail for problem stated in the jira description.

Fix now handles key:value in fix message with no 'value' populated as well.



;;;","25/Jul/11 02:18;surya108;updated test file with tag 55 (no value).;;;","25/Jul/11 19:41;davsclaus;Surya

Can you re-attach the files and make sure to [x] in grant license to Apache, when you attach the files?
We cannot accept any patches if this is not done.

The file icon should have an Apache feather, when you have done the [x];;;","28/Jul/11 02:49;surya108;Reattaching files with ""Grant License to ASF"".;;;","28/Jul/11 07:39;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,
"JmsEndpoint that is a topic should not be singleton scoped, only queues should be",CAMEL-4194,12513243,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jul/11 10:31,25/Oct/11 11:35,14/Jul/23 05:45,08/Jul/11 10:54,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Removing-routes-programmatically-tp4556741p4556741.html

If you have multiple consumers on the *exact same* JMS endpoint uri, and if you remove on of the consumers (eg from a route), then the singleton JmsEndpoint will be stopped. This causes the other active consumers to not receive any messages anymore.

This problem is only if you remove the route. If you stop route then there is no problem.",,,,,,,,,,,,,,,,,,,,,,CAMEL-4179,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13877,,,2011-07-08 10:31:30.0,,,,,,,,,,,"0|i01zfb:",9508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ProcessorFactory interface isn't usable in scala,CAMEL-4187,12513169,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,07/Jul/11 18:17,07/Jul/11 18:19,14/Jul/23 05:45,07/Jul/11 18:19,,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13883,,,2011-07-07 18:17:22.0,,,,,,,,,,,"0|i01zdr:",9501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using adviceWith 2 times or more in Java DSL with a context scoped onException causing the 1st advised route to not work as expected,CAMEL-4184,12513119,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Jul/11 10:29,07/Jul/11 16:16,14/Jul/23 05:45,07/Jul/11 16:16,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/intercept-using-adviceWith-tp4520468p4520468.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13875,,,Thu Jul 07 13:38:19 UTC 2011,,,,,,,,,,,"0|i01zd3:",9498,,,,,,,,,,,,,,,,,,,,"07/Jul/11 13:38;davsclaus;Okay this is a bit trickier as when you do the advice on the existing routes, the previous context scoped OnException have been merged into the routes, as if they where route scoped. So when the merge is done, the OnException now appear as route scoped instead of context scoped.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dependency:go-offline fails in tooling/maven pom,CAMEL-4177,12512968,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,janstey,janstey,06/Jul/11 11:31,06/Jul/11 11:35,14/Jul/23 05:45,06/Jul/11 11:35,,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,,,,"{code}
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Maven Plugins ............................ FAILURE [3.566s]
[INFO] Camel :: Maven Camel Plugin ....................... SKIPPED
[INFO] Camel :: Maven Guice Plugin ....................... SKIPPED
[INFO] Camel :: Html to Pdf Plugin ....................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.320s
[INFO] Finished at: Wed Jul 06 08:45:30 NDT 2011
[INFO] Final Memory: 10M/55M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.1:resolve-plugins (resolve-plugins) on project maven-plugins: Nested: Failure to find org.apache.maven.plugins:maven-plugin-plugin:jar:2.2.1 in http://repo1.maven.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced
{code}","Apache Maven 3.0.2 (r1056850; 2011-01-08 21:28:10-0330)
Java version: 1.6.0_23, vendor: Sun Microsystems Inc.
Java home: /opt/jdk1.6.0_23/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"", version: ""2.6.32-27-generic"", arch: ""amd64"", family: ""unix""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13896,,,Wed Jul 06 11:35:29 UTC 2011,,,,,,,,,,,"0|i01zbj:",9491,,,,,,,,,,,,,,,,,,,,"06/Jul/11 11:33;janstey;maven-plugin-plugin 2.2.1 doesn't actually exist at central. The following link gives a 404

http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-plugin-plugin/2.2.1/

Going to switch to another version shortly.;;;","06/Jul/11 11:35;janstey;janstey@duffman:/x1/asf/camel/trunk/tooling/maven$ svn commit -m ""CAMEL-4177 - fix issue when using dependency:go-offline""
Sending        maven/camel-maven-plugin/pom.xml
Sending        maven/guice-maven-plugin/pom.xml
Sending        maven/pom.xml
Transmitting file data ...
Committed revision 1143353.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 component does not support proxy settings for HTTPS,CAMEL-4176,12512937,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,doffe,doffe,06/Jul/11 06:59,17/Jul/11 07:35,14/Jul/23 05:45,17/Jul/11 07:35,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-http,,,,0,,,,,,,,,"Camel-http4 does not support http proxy configuration for HTTPS (https4:// endpoints).

Scenario 1:

Camel -- HTTP --> Proxy -- HTTPS4 --> Destination

http.proxyHost & http.proxyPort are specified and recognized:

		String _authUsername=""WS_P2P_INTERNAL"";
		String _authPassword=""WS_P2P_INTERNAL"";
		
		from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)
		
		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""+_authUsername+""&authPassword=""+_authPassword+""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001"");


Getting exception:

java.lang.IllegalStateException: Scheme 'http' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)

Attaching the whole log - http_exception.log


Scenario 2:


Camel -- HTTPS --> Proxy -- HTTPS4 --> Destination

Camel does not seem top recognize and accept https.proxyHost and https.proxyPort settings:

getContext().getProperties().put(""https.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""https.proxyPort"", ""9001"");



","Win 7 x64
JDK 1.6.0 25",doffe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jul/11 10:42;davsclaus;CAMEL-4176.patch;https://issues.apache.org/jira/secure/attachment/12486586/CAMEL-4176.patch","15/Jul/11 14:53;davsclaus;camel-core-2.9-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12486624/camel-core-2.9-SNAPSHOT.jar","15/Jul/11 15:00;davsclaus;camel-http4-2.9-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12486626/camel-http4-2.9-SNAPSHOT.jar","06/Jul/11 07:00;doffe;http_exception.log;https://issues.apache.org/jira/secure/attachment/12485381/http_exception.log","15/Jul/11 10:00;doffe;out.log;https://issues.apache.org/jira/secure/attachment/12486576/out.log","15/Jul/11 11:20;doffe;out2.log;https://issues.apache.org/jira/secure/attachment/12486588/out2.log",,,6.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13853,,,Fri Jul 15 15:01:34 UTC 2011,,,,,,,,,,,"0|i01zbb:",9490,Regression,,,,,,,,,,,,,,,,,,,"07/Jul/11 06:30;davsclaus;Ah sorry there is special support for those as properties on the CamelContext. This is very uncommon.;;;","07/Jul/11 06:56;davsclaus;Ah I debugged a bit and discovered the issue is likely because your http proxy has scheme: http. eg http client will default and use http scheme if you dont specify that.
;;;","07/Jul/11 06:57;davsclaus;Also in scenario 2 you should use ""http"" and not ""https"" as documented
http://camel.apache.org/http4

{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
{code};;;","07/Jul/11 07:00;davsclaus;Okay I think ProxyHttpClientConfigurer should support scheme from the proxyHost. It current dont and thus it default to http.;;;","07/Jul/11 07:11;davsclaus;We should probably add an option to configure the proxy scheme so you can do:

{code}
to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""_authUsername""&authPassword=""_authPassword""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001&proxyAuthScheme=https4"");
{code}

eg notice the new proxyAuthScheme.

For scenario 2 you can then do:
{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
getContext().getProperties().put(""http.proxyScheme"", ""https4"");
{code}
;;;","07/Jul/11 07:13;davsclaus;We can also default and use the same scheme as the producer if the proxyAuthScheme option has not been explicit set.

Then it ought to work in the original reported use-case, as Camel will fallback and use the https4;;;","07/Jul/11 07:38;davsclaus;I have committed a fix on trunk. Can you try with updated source code from trunk?;;;","08/Jul/11 10:44;doffe;Run the tests.

When proxy settings are defined in the endpoint URL, it works. If the proxyAuthScheme is defined it is used, otherwise falls back to http4.

But when the proxy setting are defined globally using getContext().getProperties().put() - it does not. When ""http.proxyScheme"" is defined it is used. But when it is not the same issue presents itself - camel falls back to http.

;;;","08/Jul/11 13:33;davsclaus;Don thanks for testing. I have just commited a new fix for that scenario with the getProperties on the CamelContext.
Can you test again on your system?;;;","09/Jul/11 10:00;doffe;Run the tests again.

I can confirm that the component uses proxy scheme correctly: if defined explicitly, it is used, if not - the system falls back to the endpoint scheme.

Work for both, the endpoint and global params.

Thanks a lot. nicely done!;;;","09/Jul/11 10:08;davsclaus;Don, thanks for reporting and testing.;;;","15/Jul/11 01:01;doffe;I'm testing against the Release Candidate from the repo:

https://repository.apache.org/content/repositories/orgapachecamel-023

I'm not sure what went wrong, but the issue seem to be back.

When 
proxyAuthScheme=http4 
or 
getContext().getProperties().put(""http.proxyScheme"", ""http4"");

are specified on a https4 endpoint I get following exception on invocation:

java.lang.IllegalStateException: Scheme 'http4' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:149)



;;;","15/Jul/11 08:41;davsclaus;Can you post your Camel route. Do you also use plain http4 scheme, (eg not https);;;","15/Jul/11 09:07;doffe;from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)
		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl"" +
				""&authUsername=WS_P2P_INTERNAL""+
				""&authPassword=WS_P2P_INTERNAL""+
				""&proxyAuthHost=aupdc00-revprx01d""+
				""&proxyAuthPort=9001""+
				""&proxyAuthScheme=http4""+
				""&x509HostnameVerifier=AllowAllHostnameVerifier""
				);

No other endpoint uses http4.The plan was to use http4 only for communication to proxy.
;;;","15/Jul/11 09:28;davsclaus;What runtime container do you use?
;;;","15/Jul/11 09:28;davsclaus;And can you post the full stracktrace?;;;","15/Jul/11 10:00;doffe;For the time being it is jetty (for testing)

mvn jetty:run

Attaching out.log;;;","15/Jul/11 10:22;davsclaus;Ah so you proxy is plain http on port 9001. 
And you use https on port 9002.;;;","15/Jul/11 10:30;davsclaus;Don, can you try with the attached JAR. Just renamed it to 2.8.0 and override your existing JAR.;;;","15/Jul/11 10:42;davsclaus;The last patch;;;","15/Jul/11 11:20;doffe;I'm getting nullpointer exception.

I'm attaching the latest log.

out2.log

p.s. if you'd like you can reach me directly - forrestline at gmail dt com;;;","15/Jul/11 14:53;davsclaus;Ah I forgot there is a minor fix in camel-core. So you need to use this JAR also. ;;;","15/Jul/11 15:00;davsclaus;Updated camel-http4 with a minor fix needed as well;;;","15/Jul/11 15:01;davsclaus;Don you need to use the updated attached camel-core and camel-http4 components. You can just rename them to 2.8.0 and override existing JARs;;;",,,,,,
The camel-blueprint does not register blueprint dependencies correctly,CAMEL-4174,12512731,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,04/Jul/11 16:13,07/Jul/11 18:20,14/Jul/23 05:45,07/Jul/11 18:20,,,,,,,,,,,,,2.8.0,,,,camel-blueprint,,,,0,,,,,,,,,It means that components are not waited for correctly in OSGi and the start of camel context can fail if some components aren't available at that time.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13895,,,Mon Jul 04 16:15:57 UTC 2011,,,,,,,,,,,"0|i01zav:",9488,,,,,,,,,,,,,,,,,,,,"04/Jul/11 16:15;gnodet;I think that's a regression since 2.6.0, but it has to be verified.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nullpointer in camel-mail when body is null,CAMEL-4173,12512716,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,04/Jul/11 13:10,04/Jul/11 13:25,14/Jul/23 05:45,04/Jul/11 13:25,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-mail,,,,0,,,,,,,,,"When trying to send a mail with an empty body (null) then we get the following NullPointer exception.
We should instead either complain about the null body or send the mail with an empty body.

13:27:27,010 | INFO  | tp1062262230-101 | ache.camel.processor.CamelLogger   87 | 55 - org.apache.camel.camel-core - 2.7.1 | Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[com.ier.ebo_servicerequest.ServiceRequestType@10e07658]]
13:27:27,013 | ERROR | tp1062262230-101 | ache.camel.processor.CamelLogger  232 | 55 - org.apache.camel.camel-core - 2.7.1 | Failed delivery for exchangeId: ID-MacBook-Pro-de-bahaaldine-local-51035-1309771358240-2-6. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[124:org.apache.cxf.bundle:2.4.0]
            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
            at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
            at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
            at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)[124:org.apache.cxf.bundle:2.4.0]
            at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)[72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)[124:org.apache.cxf.bundle:2.4.0]
            at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)[78:org.eclipse.jetty.security:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.Server.handle(Server.java:346)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)[73:org.eclipse.jetty.util:7.3.1.v20110307]
            at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
Caused by: java.lang.NullPointerException
            at javax.mail.util.ByteArrayDataSource.<init>(ByteArrayDataSource.java:137)[69:javax.mail:1.4.3]
            at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)[281:org.apache.camel.camel-mail:2.7.1]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)[49:org.springframework.context.support:3.0.5.RELEASE]
            ... 98 more
13:27:27,023 | WARN  | tp1062262230-101 | ache.cxf.common.logging.LogUtils  371 |  -  -  | Interceptor for {http://www.ier.com/WS_ServiceRequest}WSServiceRequestService#{http://www.ier.com/WS_ServiceRequest}createServiceRequest has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:218)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:195)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:142)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)[125:org.apache.camel.camel-cxf:2.7.1]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[124:org.apache.cxf.bundle:2.4.0]
            at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
            at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
            at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
            at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:118)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:208)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:205)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:113)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:184)[124:org.apache.cxf.bundle:2.4.0]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:107)[124:org.apache.cxf.bundle:2.4.0]
            at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)[72:org.apache.geronimo.specs.geronimo-servlet_2.5_spec:1.1.2]
            at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:163)[124:org.apache.cxf.bundle:2.4.0]
            at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:534)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:517)[78:org.eclipse.jetty.security:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:934)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:116)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:404)[79:org.eclipse.jetty.servlet:7.3.1.v20110307]
            at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:184)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:869)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:72)[84:org.ops4j.pax.web.pax-web-jetty:1.0.1]
            at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.Server.handle(Server.java:346)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:581)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1057)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:807)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:220)[75:org.eclipse.jetty.http:7.3.1.v20110307]
            at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)[77:org.eclipse.jetty.server:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:526)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:41)[74:org.eclipse.jetty.io:7.3.1.v20110307]
            at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:528)[73:org.eclipse.jetty.util:7.3.1.v20110307]
            at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
Caused by: org.springframework.mail.MailPreparationException: Could not prepare mail; nested exception is java.lang.NullPointerException
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:367)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[49:org.springframework.context.support:3.0.5.RELEASE]
            at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:582)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:511)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:211)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:134)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.RecipientList.process(RecipientList.java:102)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[55:org.apache.camel.camel-core:2.7.1]
            at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:135)[125:org.apache.camel.camel-cxf:2.7.1]
            ... 41 more
Caused by: java.lang.NullPointerException
            at javax.mail.util.ByteArrayDataSource.<init>(ByteArrayDataSource.java:137)[69:javax.mail:1.4.3]
            at org.apache.camel.component.mail.MailBinding.populateContentOnMimeMessage(MailBinding.java:205)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:114)[281:org.apache.camel.camel-mail:2.7.1]
            at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:46)[281:org.apache.camel.camel-mail:2.7.1]
            at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:352)[49:org.springframework.context.support:3.0.5.RELEASE]
            ... 98 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13888,,,Mon Jul 04 13:25:38 UTC 2011,,,,,,,,,,,"0|i01zan:",9487,,,,,,,,,,,,,,,,,,,,"04/Jul/11 13:25;cschneider;Fixed .. see commit;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Groovy language - classNotFoundException in OSGi environment,CAMEL-4171,12512458,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,01/Jul/11 12:00,22/Oct/12 12:44,14/Jul/23 05:45,22/Oct/12 12:44,2.7.2,,,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,camel-groovy,osgi,,0,camel-groovy,,,,,,,,"The problem is in the following method of the GroovyLanguage

@SuppressWarnings(""unchecked"")
protected Class<Script> parseExpression(String expression) {
    return new GroovyClassLoader().parseClass(expression);
}

It uses the default constructor to create GroovyClassLoader, which uses Thread context classloader, which may not be equal to the classloader of the bundle where the camel context is defined.



Caused by: java.lang.NoClassDefFoundError: groovy/lang/Script
	at java.lang.ClassLoader.defineClass1(Native Method)[:1.6.0_24]
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)[:1.6.0_24]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)[:1.6.0_24]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)[:1.6.0_24]
	at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:55)
	at groovy.lang.GroovyClassLoader$ClassCollector.createClass(GroovyClassLoader.java:519)
	at groovy.lang.GroovyClassLoader$ClassCollector.onClassNode(GroovyClassLoader.java:536)
	at groovy.lang.GroovyClassLoader$ClassCollector.call(GroovyClassLoader.java:540)
	at org.codehaus.groovy.control.CompilationUnit$11.call(CompilationUnit.java:747)
	at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:932)
	at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:509)
	at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:487)
	at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:464)
	at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:306)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:287)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:267)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:214)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:224)
	at org.apache.camel.language.groovy.GroovyLanguage.parseExpression(GroovyLanguage.java:44)
	at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:38)
	at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:27)
	at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:41)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	... 92 more
Caused by: java.lang.ClassNotFoundException: groovy.lang.Script
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)[:1.6.0_24]
	at java.security.AccessController.doPrivileged(Native Method)[:1.6.0_24]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)[:1.6.0_24]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)[:1.6.0_24]
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:696)[134:groovy-all:1.7.5]
	at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:449)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:793)[134:groovy-all:1.7.5]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)[:1.6.0_24]
	... 115 more
",,amarkevich,davsclaus,,,,,,,,,,,,,,,,,,,CAMEL-5493,,,,,,,,,,,,"19/Oct/12 10:59;amarkevich;camel-osgi.zip;https://issues.apache.org/jira/secure/attachment/12549971/camel-osgi.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,60760,,,Mon Oct 22 12:44:12 UTC 2012,,,,,,,,,,,"0|i01za7:",9485,,,,,,,,,,,,,,,,,,,,"01/Jul/11 18:28;davsclaus;Do you have a camel route or unit test etc. To reproduce this issue? 
And what osgi container are you using. And do you use felix or equionox?
;;;","02/Jul/11 01:08;ffang;Hi, 

A quick question, does your customer bundle already import groovy.lang package?

Freeman;;;","03/Jul/11 18:47;szhemzhitsky;Hi, I think that the problem is I'm using cxf and it sets thread context class loader somewhere.
I will prepare unit test to demonstrate the problem.;;;","04/Jul/11 00:52;njiang;Which version of CXF are you using?
I think we fixed some issue of Jetty TCCL with CXF-3497 few month ago.

;;;","07/Jul/11 07:46;szhemzhitsky;Hi, I'm using cxf 2.3.3.

CXF-3497 and CXF-3503 seem very similar to this issue.
;;;","13/Sep/11 13:03;davsclaus;Can you try with the new Camel 2.8.1 release?;;;","13/Sep/11 13:04;davsclaus;And with OSGi do you use Blueprint or Spring-dm?
And what OSGi container do you run on? SMX, Karaf, something else?;;;","05/Nov/11 13:09;davsclaus;Any update? Did you try with a later release or created an unit test?;;;","07/Nov/11 06:36;szhemzhitsky;Hello Claus,

Sorry for such a long answer,
I'm using ServiceMix + Spring DM and going to check it asap.

 ;;;","07/Nov/11 07:29;szhemzhitsky;Hello Claus,

I can't reproduce this issue anymore with camel 2.8.0 and cxf 2.4.2.
I suppose this issue can be resolved as duplicate of CXF-3497 and CXF-3503 as those issues has already been fixed and they look very similar to this one.

Regards,
Sergey;;;","07/Nov/11 07:31;davsclaus;Great to know its working now. Thanks for testing.;;;","19/Oct/12 10:59;amarkevich;camel 2.10.2:
- install feature 'camel-groovy';
- deploy attached sample: the same exception

;;;","21/Oct/12 14:28;davsclaus;Well OSGi is often hard to use, and this is such a case.

Your application that uses groovy would in theory need to import all the osgi packages you application uses.  So what you can do is to instruct the bundle to use dynamic imports, then it works:
{code:xml}
                    <instructions>
                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Description>${project.description}</Bundle-Description>
	  	        <DynamicImport-Package>*</DynamicImport-Package>
                        <Private-Package>org.apache.servicemix.examples.camel</Private-Package>
                    </instructions>
{code}

;;;","22/Oct/12 12:44;davsclaus;We are now using GroovyShell to parse and evaluate the script.

The attached sample works on Karaf 2.2.9 now.;;;",,,,,,,,,,,,,,,,
camel-smpp component doesn't support sms messages longer than 254 symbols.,CAMEL-4170,12512438,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,justas,justas,01/Jul/11 07:52,04/Jul/11 16:12,14/Jul/23 05:45,04/Jul/11 16:12,2.6.0,,,,,,,,,,,,2.8.0,,,,camel-smpp,,,,0,,,,,,,,,"Exception is thrown when trying to send sms messages longer than 254 characters. According to smpp specification:

The short message data
should be inserted in either
the short_message or
message_payload fields.
Both fields must not be used
simultaneously.

Camel-smpp producer always sets short_message field.
short_message max length is 254 octets, while message_payload can be up to 64K. camel smpp producer should set the correct smmp fields according to message length.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13894,,,Mon Jul 04 16:09:03 UTC 2011,,,,,,,,,,,"0|i01z9z:",9484,,,,,,,,,,,,,,,,,,,,"03/Jul/11 20:02;muellerc;The JSMPP web site only provides an example which sends multiple messages in this case: [SubmitLongMessageExample|http://code.google.com/p/jsmpp/source/browse/trunk/src/java/examples/org/jsmpp/examples/SubmitLongMessageExample.java]

I will check the SMPP specification how to set the long message.;;;","03/Jul/11 21:10;muellerc;If the short message is longer than 254 character, the message payload TLV optional parameter is used.
Thanks Justas for reporting this issue.;;;","04/Jul/11 16:05;muellerc;the optional parameters are not set in the submitShortMessage call in SmppProducer;;;","04/Jul/11 16:09;muellerc;Committed r1142721;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Label of marshal and unmarshal processors do not appear in trace output,CAMEL-4167,12512343,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,lucien.schmitz@ubs.com,lucien.schmitz@ubs.com,30/Jun/11 16:16,07/Jul/11 03:20,14/Jul/23 05:45,01/Jul/11 10:37,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"My route is defined as following:

        from(mqIn)
        .routeId(Helper.getRouteId(this.getClass().getName()))
        .errorHandler(deadLetterChannel(""log:DEAD"").maximumRedeliveries(1).retryAttemptedLogLevel(LoggingLevel.WARN))
        .onException(EAIException.class).maximumRedeliveries(0).handled(true).to(""bean:AuditBO?method=handleException"").end()
        //.transacted(""PROPAGATION_REQUIRES_NEW"")
        .setHeader(""UBS_ID"",new AuditId())
        .wireTap(""seda:auditNew"")
        .unmarshal(""SwiftDataFormat"")
        .setHeader(""MT"", getMT)
        .setHeader(""SWIFTAddress"", getSwiftAddress)
        .to(mqOut);

The tracing output is the following
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) wireTap(seda://auditNew) -->  <<< Pattern:InOnly, Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:String, ...
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore)  --> setHeader[MT] <<< Pattern:InOnly, Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) setHeader[MT] --> setHeader[SWIFTAddress] <<< Pattern:InOnly, Headers:{MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) setHeader[SWIFTAddress] --> direct://core <<< Pattern:InOnly, Headers:{SWIFTAddress=ZYAMCHZ0XXXX, MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.core.CoreToMQ) direct://core -->  <<< Pattern:InOnly, Headers:{SWIFTAddress=ZYAMCHZ0XXXX, MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.core.CoreToMQ)  --> choice <<< Pattern:InOnly, Headers:{MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7, SWIFTAddress=ZYAMCHZ0XXXX}, 

The bug I found is the missing label of the unmarshal processor.
","Eclipse on Windows XP, unsing Spring",,,,,,,,,,,,,,,,,,,,,CAMEL-4180,,,,,,,,,,,,"30/Jun/11 16:43;cmoulliard;Screen shot 2011-06-30 at 18.42.10.png;https://issues.apache.org/jira/secure/attachment/12484795/Screen+shot+2011-06-30+at+18.42.10.png",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13892,,,Thu Jul 07 03:20:44 UTC 2011,,,,,,,,,,,"0|i01z9b:",9481,,,,,,,,,,,,,,,,,,,,"30/Jun/11 16:29;cmoulliard;The getLabel() method of the DefaultRouteNode class returns """" when the processor is ""marshall"" or ""unmarshall"". This is why this is not displayed in the TRACE.;;;","30/Jun/11 16:42;cmoulliard;What is strange is that the MarshallProcessor implements Traceable and in debug mode , this part of the code is skipped

{code}
    public String getLabel(Exchange exchange) {
        if (expression != null) {
            return expression.evaluate(exchange, String.class);
        }

        Processor target = processor;
        if (target != null) {
            // can be wrapped
            if (target instanceof InstrumentationProcessor) {
                target = ((InstrumentationProcessor) target).getProcessor();
            }

            if (target instanceof Traceable) { ---> by passed
                Traceable trace = (Traceable) target;
                return trace.getTraceLabel();
            }
        }

        // default then to definition
        return processorDefinition.getLabel();
    }
{code}

Is it because the processor returned is of type (see attachment);;;","01/Jul/11 18:22;davsclaus;Charles can you check your first commit in this link
http://svn.apache.org/viewvc?rev=1141866&view=rev

And ensure those test changes is reverter properly
;;;","06/Jul/11 07:32;davsclaus;Okay I have fixed this. The tests has been reverted and the marshal/unmarshal is now in the tracer;;;","06/Jul/11 22:54;muellerc;ConvertBodyDefinition and my others have still the same issue. Should we reopen this ticket or create a new, more generic one, and check all XXXDefinitions?;;;","07/Jul/11 03:20;davsclaus;I have created a ticket and linked to this;;;",,,,,,,,,,,,,,,,,,,,,,,,
"camel-smpp component prints ""1"" or ""2"" to console when sending sms messages.",CAMEL-4166,12512332,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,justas,justas,30/Jun/11 14:59,25/Oct/11 11:35,14/Jul/23 05:45,30/Jun/11 15:11,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-smpp,,,,0,,,,,,,,,"in SmppBinding.java:
{code}
if (in.getHeaders().containsKey(DATA_CODING)) {
    System.out.println(""1"");
    submitSm.setDataCoding((Byte) in.getHeader(DATA_CODING));
} else {
    System.out.println(""2"");
    submitSm.setDataCoding(configuration.getDataCoding());
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jun/11 15:05;justas;patch.txt;https://issues.apache.org/jira/secure/attachment/12484783/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,68700,,,Thu Jun 30 15:11:14 UTC 2011,,,,,,,,,,,"0|i01z93:",9480,,,,,,,,,,,,,,,,,,,,"30/Jun/11 15:06;justas;Patch attached;;;","30/Jun/11 15:08;janstey;Thanks Justas. This is already fixed in trunk. Checking now to see if it was fixed in the last release.;;;","30/Jun/11 15:11;janstey;It will be in the next release (version 2.8.0).

Thanks for reporting this.

Cheers,
Jon;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
LoanBroker example have some issues when it is deployed into osgi container like ServiceMix,CAMEL-4165,12512323,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Jun/11 13:13,30/Jun/11 13:46,14/Jul/23 05:45,30/Jun/11 13:46,2.6.0,2.7.0,2.7.1,2.7.2,,,,,,,,,2.8.0,,,,examples,,,,0,,,,,,,,,"When you deploy the camel-example-loanbroker bundle into OSGi container, the osgi container only load the WebService route because there are some confliction of the bean ids.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13890,,,Thu Jun 30 13:46:32 UTC 2011,,,,,,,,,,,"0|i01z8v:",9479,,,,,,,,,,,,,,,,,,,,"30/Jun/11 13:46;njiang;Applied patch into the trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThrottlingInflightRoutePolicy can deadlock,CAMEL-4149,12511461,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sm,sm,24/Jun/11 11:37,25/Oct/11 11:35,14/Jul/23 05:45,26/Jun/11 09:36,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"Using ThrottlingInflightRoutePolicy can deadlock a route in some situations. The unit test pasted in below shows one such situation.

What happens is that the bottom route processes its first exchange, then suspends. Since it is suspended it will not take the next exchange from the seda queue, and so it will never check whether it should re-enable the route.

Perhaps it will work by putting the check to re-enable the route in the onExchangeBegin method, if that is called even when the route is suspended?

{code}
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.DefaultInflightRepository;
import org.apache.camel.impl.ThrottlingInflightRoutePolicy;
import org.apache.camel.impl.ThrottlingInflightRoutePolicy.ThrottlingScope;
import org.apache.camel.test.CamelTestSupport;

public class ThrottleTest extends CamelTestSupport {

	@Produce(uri = ""direct:input"")
	protected ProducerTemplate input;
	protected MockEndpoint resultEndpoint;

	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
	    return new RouteBuilder() {
            public void configure() {
            	resultEndpoint = new MockEndpoint(""mock:result"");
            	resultEndpoint.setCamelContext(getContext());
            	
            	getContext().setInflightRepository(new DefaultInflightRepository() {
            		@Override
            	    public void add(Exchange exchange) {
            			super.add(exchange);
            			System.out.println(""                        add "" + this.size());
            	    }
            		@Override
           	        public void remove(Exchange exchange) {
            			super.remove(exchange);
            			System.out.println(""                     remove "" + this.size());
           	        }
            		
            	});
            	
            	ThrottlingInflightRoutePolicy throttler = new ThrottlingInflightRoutePolicy();
            	
            	throttler.setMaxInflightExchanges(1);
            	throttler.setScope(ThrottlingScope.Context);

            	from(""direct:input"")
            		.inOnly(""seda:hey"", ""seda:hey"", ""seda:hey"", ""seda:hey"", ""seda:hey"")
            		.delay(1000)
        		.inOnly(""log:inputDone"");
            	
            	from(""seda:hey"")
            		.routePolicy(throttler)
            		.inOut(""log:outputDone"")
            		.to(resultEndpoint);
            }
        };
	}
	
	public void testThatAllExchangesAreReceived() throws Exception {
		input.sendBody(""hello"");
		
		resultEndpoint.expectedMessageCount(5);
		resultEndpoint.assertIsSatisfied();
	}
}
{code}",,sm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13909,,,Sun Jun 26 09:36:11 UTC 2011,,,,,,,,,,,"0|i01z5b:",9463,,,,,,,,,,,,,,,,,,,,"25/Jun/11 08:49;davsclaus;Its because you use seda endpoints, context scoped endpoints and only define the route policy in one of the routes.;;;","26/Jun/11 09:36;davsclaus;Thanks for reporting. Fixed on trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfPayload to Node conversion is not working properly ,CAMEL-4143,12511324,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,avenderov,avenderov,23/Jun/11 06:56,25/Oct/11 11:35,14/Jul/23 05:45,24/Jun/11 06:28,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"We are using {{camel-cxf}} component and building it from the sources. Also we have slightly modified {{CxfPayloadConverterTest.testCxfPayloadToNode}} test, added some additional checks. Here are the changes that were made to the test:
{code:borderStyle=solid}
Index: CxfPayloadConverterTest.java
===================================================================
--- CxfPayloadConverterTest.java	(revision 6644)
+++ CxfPayloadConverterTest.java	(revision 6686)
@@ -49,6 +49,7 @@
         DocumentBuilderFactory documentBuilderFactory =
                 DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
         DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
         document = documentBuilder.parse(file);
         document.getDocumentElement().normalize();
@@ -118,5 +119,13 @@
         exchange.getIn().setBody(payload);
         node = exchange.getIn().getBody(Node.class);
         assertNotNull(node);
+        Element root = (Element) node;
+        assertEquals(""root element name"", ""root"", root.getNodeName());
+        assertEquals(""root element namespace"", ""http://www.test.org/foo"",
+                root.getNamespaceURI());
+        Element bar = (Element) root.getElementsByTagName(""bar"").item(0);
+        assertEquals(""child element name"", ""bar"", bar.getNodeName());
+        assertEquals(""child element namespace"", ""http://www.test.org/foo"",
+                bar.getNamespaceURI());
     }
 } 
{code}
Since there is no explicit converter from {{CxfPayload}} to {{Node}} the fallback converter from {{CxfPayloadConverter}} is used for this conversion. Fallback converter from {{CxfPayloadConverter}} under the hood uses converters from {{XmlConverter}}. There are two suitable converters in {{XmlConverter}} class which are randomly selected. Some times {{public Element toDOMElement(Node node)}} converter is used and some times {{public Document toDOMDocument(final Node node)}} converter is used. If {{public Document toDOMDocument(final Node node)}} converter is used then test fails with {{ClassCastException}}. To avoid this, explicit converter from {{CxfPayload}} to {{Node}} should be added. Patch that adds {{CxfPayload}} to {{Node}} converter is provided. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jun/11 06:58;avenderov;CxfPayloadConverter.patch;https://issues.apache.org/jira/secure/attachment/12483548/CxfPayloadConverter.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13918,,,Fri Jun 24 06:28:31 UTC 2011,,,,,,,Patch Available,,,,"0|i01z3z:",9457,Unit Test Broken,,,,,,,,,,,,,,,,,,,"23/Jun/11 06:58;avenderov;Patch that adds new converter.;;;","23/Jun/11 07:51;nickolay_martinov;The problem is not that there is ClassCastException. The problem is that sometimes converter returns Element and sometimes it returns Document. Behavior should be at least stable. Ideally behavior should be predictable.;;;","24/Jun/11 06:28;njiang;Applied patch with thanks to Alexey.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-cxf-osgi can't be deployed with CXF 2.4.x,CAMEL-4138,12511212,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jun/11 09:12,22/Jun/11 12:32,14/Jul/23 05:45,22/Jun/11 12:29,,,,,,,,,,,,,2.8.0,,,,examples,,,,0,,,,,,,,,"As CXF 2.4.x remove the org.apache.cxf.transport.http_osgi package due to the refactoring of cxf http transport, current camel-example-cxf-osgi cannot be deployed into ServiceMix with CXF 2.4.x.
",,cschneider,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13938,,,Wed Jun 22 12:32:50 UTC 2011,,,,,,,,,,,"0|i01z2v:",9452,,,,,,,,,,,,,,,,,,,,"22/Jun/11 11:11;cschneider;Can you go into more details what happens? I have successfully run camel-cxf services in osgi at least using the camel transport for cxf. ;;;","22/Jun/11 12:25;njiang;It relates to the OSGi import package of ""org.apache.cxf.transport.http_osgi"", you can find more information with my commit[1].
[1]http://svn.apache.org/viewvc?rev=1138350&view=rev
;;;","22/Jun/11 12:32;cschneider;Ah .. so it just could not resolve the package. In my examples I typically use require bundle for the cxf dependency. This is more stable atthe moment... well until we refactor cxf to use more fine granular bundles. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfNamespaceHandler should not just set the TCCL and not set it back,CAMEL-4137,12511194,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,22/Jun/11 03:44,15/Aug/11 15:19,14/Jul/23 05:45,15/Aug/11 15:19,2.8.0,,,,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,0,,,,,,,,,"Current CxfNamespaceHandler set the TCCL to parser the cxfEndpoint, but it never reset the TCCL back.
It will cause some trouble if there are lots of Blueprint Namespcehandlers are called by the same thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13799,,,Mon Aug 15 15:19:22 UTC 2011,,,,,,,,,,,"0|i01z2n:",9451,,,,,,,,,,,,,,,,,,,,"22/Jun/11 03:51;njiang;Applied patch into trunk.;;;","22/Jun/11 04:10;joed;This breaks the wsdl service.

Caused by: java.lang.NullPointerException
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:92)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:369)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:499)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:241)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:202)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:101)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:202)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:132)
;;;","23/Jun/11 14:36;njiang;I just did some work to find out we should set right ClassLoader for the BluepringBus.
Now I just create CXF-3615 for it.;;;","27/Jun/11 09:10;davsclaus;Whats the status of this? Is there more work for Camel 2.8? We want to close down and cut a release.;;;","27/Jun/11 09:32;njiang;This issue need to a new release of CXF, Current solution just a workaround, it has some side effects.
I think we can post it to Camel 2.9.0, as we are closing to the Apache Camel 2.8.0 release.;;;","28/Jun/11 08:17;davsclaus;Okay moving this to Camel 2.9 so Willem can fix it when CXF 2.4.x has been released that has the fix.;;;","15/Aug/11 15:19;njiang;Applied patch into trunk and Camel 2.8.x after upgrading CXF to 2.4.2.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint doesn't handle elements with a namespace prefix,CAMEL-4133,12511154,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,21/Jun/11 20:16,25/Oct/11 11:35,14/Jul/23 05:45,22/Jun/11 02:43,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-blueprint,,,,0,,,,,,,,,"Camel-blueprint only works if the camelContext and related elements are not using a namespace prefix.  Like:

{code:xml}
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <routeBuilder ref=""reportIncidentRoutes""/>
  </camelContext>
{code}

If you try and use a prefixed form like:
{code:xml}
  <camel:camelContext id=""camel"" xmlns:camel=""http://camel.apache.org/schema/blueprint"">
    <camel:routeBuilder ref=""reportIncidentRoutes""/>
  </camel:camelContext>
{code}

it won't parse.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jun/11 20:17;dkulp;CAMEL-4133.patch;https://issues.apache.org/jira/secure/attachment/12483338/CAMEL-4133.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13937,,,Wed Jun 22 02:43:35 UTC 2011,,,,,,,Patch Available,,,,"0|i01z1r:",9447,,,,,,,,,,,,,,,,,,,,"21/Jun/11 20:17;dkulp;
The issue is using el.getNodeName() instead of el.getLocalName() in the namespace handler.;;;","22/Jun/11 02:43;njiang;Applied patch with thanks to Dan. I also updated an OSGi integration test to verify the change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Issue with using preserveMessageQos and JMS delivery mode not being propagated correctly,CAMEL-4124,12510978,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Jun/11 16:30,25/Oct/11 11:36,14/Jul/23 05:45,20/Jun/11 16:44,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,,,,If doing a JMS -> JMS (preserveMessageQos) then the JMSDeliveryMode may not be correctly preserved. This problem is only if the route is a straight JMS -> JMS. If you add some steps in between then the JmsMessage may be touched and the property is then propagated correctly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13927,,,2011-06-20 16:30:27.0,,,,,,,,,,,"0|i01yzr:",9438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error using multiple error handlers and onException (java.lang.IllegalStateException: SendProcessor has not been started),CAMEL-4107,12510434,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nikosd23,nikosd23,15/Jun/11 12:49,15/Jun/11 14:58,14/Jul/23 05:45,15/Jun/11 14:22,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-core,camel-test,,,1,,,,,,,,,"When we use more than one errorHandler in our routes and onException, we face test failures with the following exception:
java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[mock://custom])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:94)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:621)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:242)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:189)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:121)[camel-core-2.7.2.jar:2.7.2]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_20]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_20] ",,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jun/11 13:25;nikosd23;unit-test-multiple-error-handlers.zip;https://issues.apache.org/jira/secure/attachment/12482664/unit-test-multiple-error-handlers.zip","15/Jun/11 12:59;nikosd23;unit-test-multiple-error-handlers.zip;https://issues.apache.org/jira/secure/attachment/12482663/unit-test-multiple-error-handlers.zip",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13963,,,Wed Jun 15 14:58:19 UTC 2011,,,,,,,,,,,"0|i01yvz:",9421,,,,,,,,,,,,,,,,,,,,"15/Jun/11 12:59;nikosd23;Attached you can find two unit tests that instantiate two different camel contexts. One contains routes that reference one errorHandler and the other contains routes that reference two error handlers. The tests of the first camel context pass, while the tests of the second fail with the aforementioned exception.;;;","15/Jun/11 13:10;davsclaus;Can you re-attach the file, and this time mark [x] in grant license to Apache.;;;","15/Jun/11 13:25;nikosd23;Attaching again the file with Grant licence to ASF;;;","15/Jun/11 14:22;davsclaus;This issue is fixed on trunk.;;;","15/Jun/11 14:58;nikosd23;Thanks for your reply.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Thread controlling FTP Polling Process dies,CAMEL-4105,12510319,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bbuzzard,bbuzzard,14/Jun/11 15:02,25/Oct/11 11:35,14/Jul/23 05:45,16/Jun/11 05:32,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,,,,"I have several threads each polling a different FTP Remote folder location.  This works fine for a couple of weeks then one or more FTP Threads die (disappear).  I'm going to attach a snippet from my log file below.  Notice that normally the connection to the FTP site does not exists.  The connection is then made and the folders are checked then the FTP process disconnects.  Some of the folders are on the same remote FTP site and I don't know if that causes a problem or not.

The first time I notice that the thread is dead is when the code starts checking the FTP threads to see if they are connected and I notices that not all of the thread are listed.

*** LOG SNIPPET ***
2011-06-13 11:40:00,531 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,905 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,911 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,914 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,918 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,184 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,470 | DEBUG | Took 0.565 seconds to poll: Outbound/Vendors | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,470 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,562 | DEBUG | Took 0.650 seconds to poll: Outbound/TransportXML | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,562 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,582 | DEBUG | Took 0.668 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Took 0.665 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,877 | DEBUG | Took 0.693 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,877 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:46,452 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:40:46,465 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:00,524 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:00,583 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,985 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,996 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:01,043 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,048 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:01,171 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:01,527 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,536 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,596 | DEBUG | Took 0.553 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,596 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:02,396 | DEBUG | Took 1.348 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,396 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,973 | DEBUG | Took 1.802 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:02,973 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:36,017 | ERROR | Could not accept connection : org.apache.activemq.transport.InactivityIOException: Channel was inactive for too long: /172.24.1.95:45512 | org.apache.activemq.broker.TransportConnector | ActiveMQ Task
2011-06-13 11:42:00,520 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:42:00,572 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:42:00,580 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
","apache-activemq-fuse-01-00, apache-camel-2.6.0-fuse-00-00, Java jdk1.6.0_25",bbuzzard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13942,,,Thu Jun 16 16:39:10 UTC 2011,,,,,,,,,,,"0|i01yvj:",9419,,,,,,,,,,,,,,,,,,,,"14/Jun/11 16:05;davsclaus;Can you upgrade to a never Camel release.

;;;","14/Jun/11 16:36;bbuzzard;Does the newest version fix this problem?  If so, what was the problem?  We prefer not to update unless there is a specific fix.  We don't want to introduce new bugs if we can avoid it.;;;","14/Jun/11 16:39;bbuzzard;Pulling FTP files in from a remote FTP site is very important to us.  If we can't revolve this issue then I will have to remove the FTP Consumers and implement the code external to camel, so that's why I set the priority to ""BLOCKED'. ;;;","15/Jun/11 15:47;davsclaus;I can see you use a FuseSource product. If you are a FuseSource subscriber then I suggest to use that channel to get help with your issue. They can provide you with a solution for your current version so you dont have to do a upgrade.

That said I am adding more logic in the ScheduledPollConsumer so we do a full try .. catch(Error e) to catch any kind of errors thrown to avoid the thread from dying. This may possible cause the JDK scheduled thread pool to fail scheduling the task. 

Also I am adding a runLoggingLevel option you can use to enable to configure a logging level that logs: START, COMPLETE on the scheduled task. Then that may help us/you to see when it stops logging that. Likewise there is a ERROR that logs all thrown error from the thread.

;;;","15/Jun/11 15:48;davsclaus;See also CAMEL-3216;;;","15/Jun/11 16:17;davsclaus;I would suggest to set option: useFixedDelay=true, and also add a higher delay between pools instead of the default value of 500 millis. So for example: useFixedDelay=true&delay=10s. To only poll every 10th second.;;;","15/Jun/11 16:53;bbuzzard;The delay for each FTP route is set to 60,000 (60 sec).  Some of the routes are polling from the same host, but different directories, and that is why it may appear in my log that I am polling every 500 millis.  Are you saying in the case where I am polling different directories on the same host that each of those polls should be further apart in time?

Yes I am using a particular version of Camel from FUSE, but it was not our intent to do this on a regular basis.  We were only trying to address a particular set of problems with the ActiveMQ-Camel 5.4.1 release.  The Fuse group assured us that the code we were using was submitted back to the open source ActiveMQ-Camel projects.  Please let us know if that is not true.

I would be more than happy to assist you with any coding or testing that needs to be done to work through this problem.    ;;;","16/Jun/11 05:31;davsclaus;Yes FuseSource ensures that the code is submitted back to Apache. In fact we mostly fix and commit at Apache first, and then sync the code to FuseSource.

I have committed a fix to the trunk, that:
- option {{useFixedDelay}} is now default true
- will rigorously catch all errors throw from the scheduled task (catch {{java.lang.Error}})
- added runLoggingLevel option to log start/complete logs when the scheduled task runs. For example set {{runLoggingLevel=INFO}} and you should see this in the logs. This can maybe help you see when a thread stops from running.;;;","16/Jun/11 16:08;bbuzzard;The fix looks good except I'm getting errors when I try to compile I get an error with LOG.error(""Scheduled task started on:   {}"", this.getEndpoint());

I looked at the Interface for LOG and I don't see that signature.  Was the LOG interface modified?;;;","16/Jun/11 16:19;davsclaus;Camel 2.6 uses Apache commons-logging. Camel 2.7+ uses slf4j as logging. So you may have to adjust the patch slightly when back porting.;;;","16/Jun/11 16:39;bbuzzard;Thank you for the quick fix!  I'm making the adjustment now for back porting.;;;",,,,,,,,,,,,,,,,,,,
Camel PropertyPlaceHolder throws an Error when using ${user.home} environment variable in Windows,CAMEL-4099,12510093,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,carloc,carloc,13/Jun/11 12:00,25/Oct/11 11:35,14/Jul/23 05:45,13/Jun/11 18:58,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,"camel-core,",configuration,"propertyplaceholder,",,,,,,"Error happens when I try to configure using properyconfigurer
<camel:propertyPlaceholder location=""file://${user.home}/aventurine-config/aventurine-config.properties"" id=""propertyPlaceHolder""/> and try to use an environment variable. THis happens only on windows environment. This works on Ubuntu, It seems that camel is removing the slashes in ${user.home}

org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[From[file:{{upload.folder}}]] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)
	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1239)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:466)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:222)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at com.ccti.StartUFM.main(StartUFM.java:35)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[From[file:{{upload.folder}}]] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:170)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:706)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1432)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1336)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1314)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 18 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:96)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:83)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:963)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:405)
	... 36 more","Windows 7, Java 1.6",carloc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13955,,,Mon Jun 13 18:58:38 UTC 2011,,,,,,,,,,,"0|i01yuf:",9414,,,,,,,,,,,,,,,,,,,,"13/Jun/11 12:20;davsclaus;Can you use windows path separators?

Should be something like:
{code}
file:${user.home}\aventurine-config\aventurine-config.properties
{code}

;;;","13/Jun/11 12:47;carloc;Changed it to this

<camel:camelContext id = ""camelContext"">
		<camel:propertyPlaceholder location=""file:${user.home}\aventurine-config\aventurine-config.properties"" id=""propertyPlaceHolder""/>

something's wrong with the user.home

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.comp;;;","13/Jun/11 12:55;davsclaus;Well of course it would be nice if Camel dont give a *** if the separators is \ or /. Well if only windows would be like the others :)

Can you check your user home property? It seems to be resolved to ""C:Userscarloc"". The \ is missing. Could still be a bug in Camel though.;;;","13/Jun/11 14:10;carloc;seems to work fine with the spring propertyconfigurer. also happens on my colleague's workstation. his workstation is also windos.

THanks;;;","13/Jun/11 14:56;davsclaus;Okay I guess there is an issue when using that on Windows as it uses \ path separators.

;;;","13/Jun/11 18:55;davsclaus;Okay found the bug. The replacement string must be quoted when using replaceFirst in the matcher, to have it work as a direct literal replacement.

Se the JDK javadoc
http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String);;;","13/Jun/11 18:58;davsclaus;I have committed a fix. Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http - Issue with reusing cached http producer with authenticated user,CAMEL-4096,12510081,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,davsclaus,davsclaus,13/Jun/11 08:46,28/Jun/11 03:18,14/Jul/23 05:45,28/Jun/11 03:17,,,,,,,,,,,,,2.5.0,,,,camel-http,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multiple-remote-connection-to-the-same-host-but-different-users-tp4309456p4309456.html

We should keep auth information in endpoint key, so using a different credential will not re-using cached with another credential.

This problem is most likely also in camel-http4.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,69868,,,Tue Jun 28 03:17:49 UTC 2011,,,,,,,,,,,"0|i01ytr:",9411,,,,,,,,,,,,,,,,,,,,"27/Jun/11 18:09;boday;I haven't been able to reproduce this issue.  From my testing, the producer cache uses the endpoint URI as the key which is unique because the user/password are part of the URI.  Perhaps, I'm missing something though.  Any thoughts on this?;;;","28/Jun/11 03:15;njiang;I just checked the change log , and found this issue should be fix last year.
You can find more information in CAMEL-2945.;;;","28/Jun/11 03:17;njiang;This issue was already fixed in CAMEL 2.5.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting pattern on <to> with a custom id causes a failure,CAMEL-4089,12509912,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/11 12:33,25/Oct/11 11:35,14/Jul/23 05:45,11/Jun/11 13:15,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-spring,,,,0,,,,,,,,,"<to uri=""mock:result"" pattern=""InOut"" id=""crap""/>

{code}

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'crap': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'pattern' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'pattern' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1361)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1086)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:563)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.spring.processor.SpringTestHelper.createSpringCamelContext(SpringTestHelper.java:37)
	at org.apache.camel.spring.processor.SpringSimpleResultTypeRouteTest.createCamelContext(SpringSimpleResultTypeRouteTest.java:46)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:88)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:62)
	at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:139)
	at com.intellij.junit3.JUnit3IdeaTestRunner.startRunnerWithArgs(JUnit3IdeaTestRunner.java:52)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:199)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'pattern' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'pattern' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1358)
	... 34 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13968,,,2011-06-11 12:33:06.0,,,,,,,,,,,"0|i01yrz:",9403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailBinding may drop characters from content type when using determineContentType option,CAMEL-4083,12509836,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gm2552,gm2552,10/Jun/11 14:12,25/Oct/11 11:35,14/Jul/23 05:45,12/Jun/11 11:01,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-mail,,,,0,content-type,mail,mime,smime,,,,,"The method ""determineContentType"" in the MailBinding class may drop characters from the end of the Content-Type header (specifically ending quotes).  

Example:

Take the following SMINE enveloped data content type:
{code}
   Content-Type: application/pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m""
{code}

When an incoming Exchange is processed by the mail Component with the above content type header, the resulting content type after the determineContentType is application/pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m   (note the ending quote).  This results in a parsing error later on the processing chain.  The following simple unit test demonstrates the issue as it fails on the assertEquals call.

-----------------------------------------------------------------------------------------------------
{code}
package org.apache.camel.component.mail;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ContentTypeTest
{
    @Test
    public void testDetermineContentType_endingWithQuotes_assertContentMatches()
    {
    	final String contentType = ""application/pkcs7-mime; smime-type=enveloped-data; name=\""smime.p7m\""""; 
    	
    	final MailConfiguration configuration = new MailConfiguration();
    	final MailBinding binding = new MailBinding();
    	
    	final DefaultExchange exchange = new DefaultExchange((CamelContext)null);
    	exchange.getIn().setHeader(""Content-Type"", contentType);
    	
    	
    	String determinedType = binding.determineContentType(configuration, exchange);
    	
    	assertEquals(contentType, determinedType);
    }
}
{code}
",JSE 1.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13971,,,Sat Jun 11 18:21:06 UTC 2011,,,,,,,,,,,"0|i01yqv:",9398,,,,,,,,,,,,,,,,,,,,"11/Jun/11 18:21;davsclaus;Yeah the logic seems a bit misleading. It mistakenly looks for charset, without checking that the key is {{charset=xxx}} in the Content-Type.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in CxfConsumer.asyncInvoke that causes setResponseBack to be called twice,CAMEL-4079,12509721,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/Jun/11 14:33,25/Oct/11 11:35,14/Jul/23 05:45,09/Jun/11 20:00,2.6.0,2.7.2,2.8.0,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,Bug in CxfConsumer.asyncInvoke that causes setResponseBack to be called twice.  The asyncInvoke should execute one of the conditions (continuation.isNew() or continuation.isResumed().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13976,,,Thu Jun 09 20:00:09 UTC 2011,,,,,,,,,,,"0|i01ypz:",9394,,,,,,,,,,,,,,,,,,,,"09/Jun/11 20:00;wtam;2.7.3.x
Committed revision 1134060

2.8.0.x
Committed revision 1134059.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"FileIdempotentRepository fileStore does not get loaded on bootrapping, therefore files are processed again",CAMEL-4076,12509673,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,adkathuria@yahoo.com,adkathuria@yahoo.com,09/Jun/11 07:49,25/Oct/11 11:35,14/Jul/23 05:45,10/Jun/11 10:02,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,camel-ftp,,,0,FileIdempotent,"FileStore,",,,,,,,"I am using JVM based initialization of Camel using Spring.
I use the documented Camel initialization procedure of main.setApplicationContext(""my-spring-camel-config.xml"");
main.start()

I also use the documented FileIdempotentRepository that points to a FileStore.
However, when Camel initializes this filestore is not loaded up. Hence, the LRU cache contained within this is empty.
As a result, all my files are FTPed again from the remote server.

This happens everytime I start my JVM resulting in expensive FTP of files.",Win,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jun/11 15:56;adkathuria@yahoo.com;BatchLoadDriver.java;https://issues.apache.org/jira/secure/attachment/12481950/BatchLoadDriver.java","09/Jun/11 15:56;adkathuria@yahoo.com;FtpRouteBuilder.java;https://issues.apache.org/jira/secure/attachment/12481951/FtpRouteBuilder.java","09/Jun/11 15:56;adkathuria@yahoo.com;InvokeWithProcessor.xml;https://issues.apache.org/jira/secure/attachment/12481952/InvokeWithProcessor.xml",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13967,,,Fri Jun 10 10:02:29 UTC 2011,,,,,,,,,,,"0|i01ypb:",9391,,,,,,,,,,,,,,,,,,,,"09/Jun/11 08:01;davsclaus;Can you attach your spring xml file with the camel routes and the file store definition.;;;","09/Jun/11 13:44;davsclaus;Are you hot-deploying your application. I wonder if a restart may not cause Camel to recognize this and not load the store on the 2nd+ starts.;;;","09/Jun/11 15:56;adkathuria@yahoo.com;BatchLoadDriver - is the main spring driver
FtpRouteBuilder - Builds the FTP route
Spring Config - registers the route

On restart of the application, it does not read the '.dat' file, thereby downloading the files again;;;","09/Jun/11 15:59;adkathuria@yahoo.com;Thanks for your reply. It is a simple Java program (please find attachments). It is not hot deployment, and the example is not container based, but a simple Java 'Main' driver that starts the camel context via spring initialization;;;","10/Jun/11 09:33;davsclaus;Thanks I got this fixed now.

As a workaround in the <bean> tag you can use spring support for an init / destroy method and invoke doStart / doStop to load and stop the store.;;;","10/Jun/11 10:02;davsclaus;Thanks for reporting. I have fixed it on trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Misconfigured CXF Endpoint url results in NPE instead of actual exception.  ,CAMEL-4073,12509642,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,szetheli,szetheli,08/Jun/11 21:06,25/Oct/11 11:36,14/Jul/23 05:45,10/Jun/11 09:33,2.7.2,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"I'm new to Camel, trying to setup the JMS CXF service based on the [http://camel.apache.org/better-jms-transport-for-cxf-webservice-using-apache-camel.html], but with our own JMS services.  In the process I transposed some configuration and ended up with an NPE when CXF tried to start.

The URL passed to jaxws:endpoint/@address=""tcp://MyDomainServer1:2506,tcp://MyDomainServer1:2506"".  I know this wasn't what camel expected here, after debugging, but wanted to open a bug, since the actual meaningful exception is actually lost due to an NPE.

Expected Exception.  this was obtained with a debugger in CXF/camel before the NPE is thrown.
{code}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: MyDomainServer1://2506,tcp://MyDomainServer2:2506 due to: No component found with scheme: MyDomainServer1
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:457)
	at org.apache.camel.component.cxf.transport.CamelDestination.activate(CamelDestination.java:116)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:181)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:127)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:239)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:489)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1544)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at com.expedia.cc.container.remoting.prototype.Main.main(Main.java:37)

{code}

The Actual Exception was:
{code}
Exception in thread ""main"" java.lang.RuntimeException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'JMS_prototype.Server': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:96)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at com.expedia.cc.container.remoting.prototype.Main.main(Main.java:37)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'JMS_prototype.Server': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	... 4 more
Caused by: javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:343)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:239)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:489)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1544)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1417)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.FailedToCreateConsumerException.<init>(FailedToCreateConsumerException.java:31)
	at org.apache.camel.component.cxf.transport.CamelDestination.activate(CamelDestination.java:120)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:181)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:127)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)
	... 25 more
{code}

Basically the problem is that the {{destinationEndpoint = getCamelContext().getEndpoint(camelDestinationUri);}} call fails, resulting the the FailedToCreateConsumerException first parameter to be null.  Since its internally expecting the endpoint to not be null, it NPE's.  Fix is most likely to make FailedToCreateConsumerException null safe.  Since it principly uses the endpoint to get the URI, you could make a constructor that took the URI that you were trying to configure, instead of relying on an already created endpoint.","Spring 3.0.5.RELEASE, CXF 2.3.2, Camel 2.7.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jun/11 20:27;dkulp;CAMEL-4073.patch;https://issues.apache.org/jira/secure/attachment/12481976/CAMEL-4073.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13966,,,Fri Jun 10 09:33:37 UTC 2011,,,,,,,,,,,"0|i01yon:",9388,,,,,,,,,,,,,,,,,,,,"09/Jun/11 20:27;dkulp;
Attached a Patch for this.   

The proposal above calls for a modification of the FailedToCreateConsumerException to handle this.   However, the proper fix is likely to throw a NoSuchEndpointException in this particular case.   The patch does that, however, if something ELSE goes wrong, it does use the original proposed modification to get something better than an NPE. 


;;;","10/Jun/11 09:33;njiang;Applied patch with thanks to Dan :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in camel-spring-ws actual results come with windows line endings and the comparison fails,CAMEL-4068,12509489,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,07/Jun/11 17:32,07/Jun/11 17:34,14/Jul/23 05:45,07/Jun/11 17:34,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-spring-ws,,,,0,,,,,,,,,"Several tests like org.apache.camel.component.spring.ws.ConsumerEndpointMappingResponseHandlingRouteTest.testRootQName
fail with ComparisonFailure as the expected result has unix file endings and the actual result has windows file endings on windows",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13982,,,2011-06-07 17:32:41.0,,,,,,,,,,,"0|i01ynj:",9383,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failures in camel-hdfs on windows as Streams are not closed correctly,CAMEL-4067,12509479,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,07/Jun/11 16:10,07/Jun/11 16:19,14/Jul/23 05:45,07/Jun/11 16:18,2.7.2,,,,,,,,,,,,2.8.0,,,,camel-hdfs,,,,0,,,,,,,,,"On windows some hdfs tests fail as the streams are not correctly being closed. 

The first stacktrace looks like below. This is a bit misleading as in fact the problem is that not all exchanges could be processed. The reason is that the file component can´t rename the file as it is still open. This is because an inputStream is opened for the file but never closed.

junit.framework.AssertionFailedError: expected:<40> but was:<12>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:283)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:195)
	at junit.framework.Assert.assertEquals(Assert.java:201)
	at org.apache.camel.component.hdfs.HdfsProducerFileWriteTest.testSimpleWriteFile(HdfsProducerFileWriteTest.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13980,,,Tue Jun 07 16:18:21 UTC 2011,,,,,,,,,,,"0|i01ynb:",9382,,,,,,,,,,,,,,,,,,,,"07/Jun/11 16:18;cschneider;Added close calls were streams were left open;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in bean validation BeanValidatorRouteTest ComparisonFailure: expected:<[may not be null]> but was:<[kann nicht null sein]>,CAMEL-4066,12509447,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,07/Jun/11 11:49,07/Jun/11 11:52,14/Jul/23 05:45,07/Jun/11 11:51,2.7.2,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,,,,"org.junit.ComparisonFailure: expected:<[may not be null]> but was:<[kann nicht null sein]>
	at org.junit.Assert.assertEquals(Assert.java:123)
	at org.junit.Assert.assertEquals(Assert.java:145)
	at org.apache.camel.component.bean.validator.BeanValidatorRouteTest.validateShouldFailWithImpliciteDefaultGroup(BeanValidatorRouteTest.java:89)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

",German locale,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13981,,,Tue Jun 07 11:51:26 UTC 2011,,,,,,,,,,,"0|i01yn3:",9381,Unit Test Broken,,,,,,,,,,,,,,,,,,,"07/Jun/11 11:51;cschneider;Setting default locale to US;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMLSecurity component does not decode element-level encrypted content,CAMEL-4063,12509417,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rnewcomb,rnewcomb,07/Jun/11 04:52,16/Jun/11 13:53,14/Jul/23 05:45,16/Jun/11 13:53,2.7.1,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,,,,The camel-xmlsecurity component does not decode element-level encrypted data.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,71113,,,Thu Jun 16 13:53:14 UTC 2011,,,,,,,,,,,"0|i01ymf:",9378,,,,,,,,,,,,,,,,,,,,"07/Jun/11 04:53;rnewcomb;CAMEL-4061 includes a potential fix for this defect.;;;","16/Jun/11 13:53;hadrian;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel XMLSecurity encryption fails with a client-specified passPhrase,CAMEL-4062,12509416,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rnewcomb,rnewcomb,07/Jun/11 04:44,16/Jun/11 13:52,14/Jul/23 05:45,16/Jun/11 13:52,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"Camel XMLSecurity produces an NPE when a client-provided passPhrase is included as a marshal().secureXml() parameter.

java.lang.NullPointerException
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.generateEncryptionKey(XMLSecurityDataFormat.java:176)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.marshal(XMLSecurityDataFormat.java:94)
        at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,71115,,,Thu Jun 16 13:52:10 UTC 2011,,,,,,,,,,,"0|i01ym7:",9377,,,,,,,,,,,,,,,,,,,,"07/Jun/11 04:47;rnewcomb;CAMEL-4061 includes a potential fix for this defect.;;;","16/Jun/11 13:52;hadrian;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
continued(true) doesn't work when is invoked for the second time in the Camel flow,CAMEL-4057,12509344,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,matihost,matihost,06/Jun/11 11:26,04/Apr/12 10:48,14/Jul/23 05:45,10/Jun/11 18:21,2.4.0,2.7.2,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,continued,exception,handler,,,,,,"When Camel flow contains error handling as continued(true), it is not invoked when the error occurs for the second time (even in different onException).
What is more the exception is not handled even by global onException and Camel flow is interruped. ",Apache Camel 2.4.0-fuse-00-00 and Apache Camel 2.7.2 ,,,,,,,,,,,,,,,CAMEL-5139,,,,,,,,,,,,,,,,,,"10/Jun/11 05:28;boday;CAMEL-4057.patch;https://issues.apache.org/jira/secure/attachment/12482020/CAMEL-4057.patch","06/Jun/11 11:28;matihost;ContinuedTest.java;https://issues.apache.org/jira/secure/attachment/12481562/ContinuedTest.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13959,,,Fri Jun 10 18:21:35 UTC 2011,,,,,,,,,,,"0|i01yl3:",9372,,,,,,,,,,,,,,,,,,,,"06/Jun/11 11:28;matihost;Attached testcase which shows the issue.
Testes against Camel 2.7.2 and 2.4.0-fuse-00-00;;;","09/Jun/11 05:26;boday;this also fails when simply throwing an exception multiple times in the same route...I'm looking into it;;;","10/Jun/11 05:28;boday;here is a proposed fix for this...just removing the Exchange.FAILURE_HANDLED property from the exchange (when being continued) did the trick...I don't see any side effects yet, but I'm still testing it...if anyone sees any issues with this, let me know...thanks;;;","10/Jun/11 05:50;davsclaus;Bean yeah I think that does the trick. There is a number of error handler related metadata to keep track on :).
Can you retest with latest update from trunk as I just committed an improvement to the error handling in general.;;;","10/Jun/11 18:21;boday;tested against latest and all seems well...just committed the fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,
javax.script dependency in camel-core,CAMEL-4047,12509215,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,03/Jun/11 17:56,08/Jun/11 03:05,14/Jul/23 05:45,08/Jun/11 03:05,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"
The OSGi imports for camel-core ends up with a non-optional dependency on javax.script due to it being used in the Activator.    However, the karaf feature for camel-core doesn't have a dependency on org.apache.servicemix.specs.scripting-api-1.0 .

One of two things should be done:
1) mark javax.script as optional.  This MAY require some updates to the Activator to work when it's not available.

2) Update the karaf features file to add:
{code:xml}
<bundle dependency=""true"">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/${servicemix-specs-version}</bundle>
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Jun/11 17:38;dkulp;CAMEL-4047.patch;https://issues.apache.org/jira/secure/attachment/12481593/CAMEL-4047.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13985,,,Wed Jun 08 03:05:35 UTC 2011,,,,,,,Patch Available,,,,"0|i01yiv:",9362,,,,,,,,,,,,,,,,,,,,"03/Jun/11 18:02;hadrian;Dan, thanks for reporting this!
I don't see 2) as being an option and have a strong preference towards 1).;;;","03/Jun/11 18:55;dkulp;
Actually, #2 is really the correct solution to this.  In OSGi, the smx scripting-api jar is really the version of the API jar with  the factory (ScriptEngineMaker) that works in OSGi.   You cannot really use the in-jdk versions.   This is the same as all the other api jars we use.

Thus, we need to make sure we depend on that version up front in the features file.  Otherwise, you can end up with a path like:
{code}
features:install ....camel-core...
{code}
which would depend on the in-jdk version.  Then, later, I install something like camel-bean-validator or something else that would pull in the smx api version.   Any scripting engine installed after that will result in classcasts in camel as the javax.script classes will be different as the new bundles will get the smx version and Camel will expect the in-jdk version.

;;;","03/Jun/11 20:56;hadrian;More I think about it, more my head spins... I agree 2) would completely solve the problem, but it is the right solution?

We cannot use the jre version of the ScriptEngineFactory in an OSGi deployment, that much is clear. Both 1) and 2) do not have *any* impact on non-OSGi deployments, so we're good there.

Assumption (*): There is a fair percentage of deployments that do *not* need/use a script engine (say x%).

Solution 2) brings the extra feature dependency for the camel-core on all *osgi* deployments. If x is relatively small e.g. x <= 20, I don't think it's a big problem, especially given the meager 32k the extra bundle is bringing.

If x is larger, say x >= 80, would it make sense to make the dependency optional? Of course we then have the problem Dan explained. We can get activation to fail for things like camel-bean-validator if camel-core was using the jre version of the ScriptEngine. 3rd party component writers would have to be aware of that too.

I don't know it may be overkill for just the 32k... On the plus side, we should be able to reach a consensus quickly on this though.

;;;","03/Jun/11 21:01;jbonofre;My preference is more on the 2/ because I think it's the most secure way.

It requires:
- to exclude javax.script from the system package (by tuning the jre.properties file)
- add the ServiceMix Specs bundle in the feature

Like this, we can guarantee that it works, which is more hazardous just flagging the javax.script package as optional.;;;","03/Jun/11 21:21;dkulp;
The other option MAY be to move all  the javax.script stuff into the camel-script component.  It already has a bundle Activator in there that could handle this.   

That said, I'm not 100% sure if that's acceptable as there COULD be use cases of the script things without camel-script.   Thoughts?
;;;","04/Jun/11 01:12;hadrian;+1. This sounds great, camel-script SHOULD be used with jsr-223 languages.;;;","06/Jun/11 17:38;dkulp;
May need to use ""git apply"" to apply the patch due to the removal of a file.

I've tested a bit in a standalone OSGi container (TSF) installing the camel-script feature and such.   However, I haven't been able to run the camel-ittest-osgi stuff yet due to them being broken.;;;","08/Jun/11 01:02;hadrian;@Dan, patch looks good. I started a full test and will commit when done (could take a while...). Thanks for the contribution.;;;","08/Jun/11 03:05;hadrian;Fixed in r1133232. Thanks Dan for patch and keep them coming.;;;",,,,,,,,,,,,,,,,,,,,,
ChoiceProcessor : unable to find the mBeans processor,CAMEL-4044,12509203,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,rdubois,rdubois,03/Jun/11 17:03,02/May/13 02:29,14/Jul/23 05:45,11/Jun/11 03:01,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"Using the jconsole, we are not able to locate some processors after a ChoiceProcessor.

For example :

from(""direct:start"").to(""mock:test1"").id(""mock1"")
.choice()
.when(predicate).to(""mock:test2"").id(""test2"")
.otherwise().to(""mock:test3"").id(""test3"")
.end()
.to(""mock:outOfChoice"").id(""outOfChoice"");

The processors mock1 and outOfChoice are well found but not the processors test2 and test3.
",Windows XP,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4050,"10/Jun/11 21:48;dkulp;camel-4044.patch;https://issues.apache.org/jira/secure/attachment/12482103/camel-4044.patch","11/Jun/11 08:37;davsclaus;coverage.png;https://issues.apache.org/jira/secure/attachment/12482138/coverage.png",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13885,,,Sat Jun 11 08:37:58 UTC 2011,,,,,,,,,,,"0|i01yi7:",9359,Unit Test Broken,,,,,,,,,,,,,,,,,,,"03/Jun/11 17:34;hadrian;Thanks Remy for reporting this.

I could reproduce the problem at least in part. I will look into it over the weekend and come back with more details, probably a fix too.;;;","04/Jun/11 14:47;davsclaus;CAMEL-4050 fixes this issue;;;","04/Jun/11 15:26;davsclaus;This one was fixed by chance when I got CAMEL-4050 resolved. I had a look at the unresolved bugs and notice this issue about the CBR. So I realized my changes most likely would resolve this as well. Adding unit test confirmed that.;;;","10/Jun/11 21:47;dkulp;
The added unit test does no actually test that this is solved.   It doesn't assert that calls to isRegistered actually return true.  If you assert that, you'll see the test fails.;;;","10/Jun/11 21:48;dkulp;
Attaching a patch that actually  solves the issues.  It's a little more involved that could be, but needs some API cleanup, hopefully for 3.0.;;;","10/Jun/11 22:06;hadrian;@Dan, awesome patch! I started a full test build and will apply later today if all goes well. Many thanks and we look forward to more contributions from you.;;;","11/Jun/11 03:01;hadrian;Patch applied to both trunk and 2.7.x branch. Thanks Dan for the contribution.;;;","11/Jun/11 08:37;davsclaus;Parts of all the new code added isn't tested. We should consider adding tests for this. See coverage image attached.;;;",,,,,,,,,,,,,,,,,,,,,,
"Camel does not work out of the box in Java webstart, due classpath scanning is not possible",CAMEL-4026,12508608,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jn,jn,28/May/11 01:16,23/Jul/11 11:07,14/Jul/23 05:45,23/Jul/11 11:07,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,webstart,,,,,,,,"This is a regression.  Worked fine for us in Camel 2.5.0, fails in Camel 2.7.1.  

Easy to reproduce.  Run the following code in a webstart-deployed application:

CamelContext context = new DefaultCamelContext();
context.getTypeConverterRegistry(); 

Which produces the following exception:

2011-05-26 16:52:57,550 [javawsApplicationMain] ERROR test.TestCamelContext - Failed
org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:986)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverterRegistry(DefaultCamelContext.java:1001)
    at test.TestCamelContext.test(TestCamelContext.java:54)
    at test.TestCamelContext.main(TestCamelContext.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.sun.javaws.Launcher.executeApplication(Unknown Source)
    at com.sun.javaws.Launcher.executeMainClass(Unknown Source)
    at com.sun.javaws.Launcher.doLaunchApp(Unknown Source)
    at com.sun.javaws.Launcher.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:79)
    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:395)
    at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:41)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
    at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1613)
    at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:899)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:984)
    ... 12 more
",Windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"31/May/11 20:10;jn;camel webstart trace.txt;https://issues.apache.org/jira/secure/attachment/12480989/camel+webstart+trace.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,67106,,,Sat Jul 23 11:07:07 UTC 2011,,,,,,,,,,,"0|i01ye7:",9341,,,,,,,,,,,,,,,,,,,,"28/May/11 01:34;jn;Some further information which might be useful.

This may be the same issue as CAMEL-522 (resolved in Camel 1.5.0).  In that issue, it was stated that using the version-based protocol (something like <jar href=""camel-core.jar"" version=""1.4.01""/>) fails, while including the version in the jar name  (something like <jar href=""camel-core-1.4.01.jar""/>) succeeds.  I have only tested the version-based protocol, and this is the case which fails for me.

Andreas Kuhtz suggested on the mailing list [1] that the issue is caused by the webstart classloader not returning the correct url for the jar.  This assessment seems correct to me, as I confirmed that a resource url for package ""test"" was returned from the classloader as:

jar:http://localhost:8080/camel-webstart/lib/camel-webstart.jar!/test/

when the jar actually originated from:

http://localhost:8080/camel-webstart/lib/camel-webstart__V2.21-20110527-e55f306.jar

... where 2.21-20110527-e55f306 is the version.

The classloader is of type com.sun.jnlp.JNLPClassLoader.  I haven't tested this, but it seems like method ""JarFile getJarFile(URL)"" might be used to convert from the url to the cached jar file.  Unfortunately, making use of this method would bind you to the internal com.sun implementation. :(

[1] http://camel.465427.n5.nabble.com/addTypeConverter-does-not-clear-misses-in-BaseTypeConverterRegistry-td4288871.html;;;","28/May/11 01:39;jn;Reference mailing list thread at http://www.mail-archive.com/users@camel.apache.org/msg15125.html;;;","28/May/11 13:30;davsclaus;Its in fact not a regression. Java Web Start doesn't work with classpath scanning over http urls.
;;;","28/May/11 19:52;jn;I guess whether or not it's a regression is a matter of perspective.  From my perspective, the camel context throws an exception when starting up in 2.7.1, whereas it started up fine with no exception in 2.5.0, and I would call that a regression.  Regardless of what you call it, Camel can't start up in webstart, and that's a problem for us. ;;;","29/May/11 08:16;davsclaus;In the past Camel will silently ignore this issue and still startup. But the type converters wont be loaded properly. Now Camel detects this problem and fails starting. ;;;","29/May/11 08:18;davsclaus;Can you try enabling TRACE logging on: org.apache.camel.impl.converter package. And then post the log + full stacktraces. Then we can take a look and maybe spot something we can fix.;;;","30/May/11 10:14;akuhtz;The problem can be solved easily if you use Spring to configure the CamelContext as described here: http://www.mail-archive.com/users@camel.apache.org/msg15126.html

Starting from Camel 2.8 you even no longer need to register the TypeConverters from the core package if I get this ticket right: https://issues.apache.org/jira/browse/CAMEL-3953

A step to solve this problem with pure java created CamelContext would be to check what happens in SpringCamelContext if a bean that implements PackageScanClassResolver is defined and check if this code can be used.;;;","31/May/11 20:10;jn;As requested, Attaching log file with log level TRACE.;;;","01/Jun/11 11:06;davsclaus;Jim do you have some simple Java code to start a Java application as Java Web Start? I would like to experiment with that a big, to dig up some ideas what we can do.
;;;","01/Jun/11 21:56;jn;Claus, I'm not aware of any way to start a webstart app programmatically from Java.  I've been doing a full deployment for my testing.  This involves:  (1) building your code into a jar; (2) signing *all* jars (your jar and third party jars) with the *same* certificate; you can use a self-generated certificate for this; (3) creating a webstart descriptor file (*.jnlp) which points to your jars and main class; (4) configuring/deploying the JnlpDownloadServlet on a servlet container such as tomcat (this servlet is needed to support the version-based download protocol [1]); (5) deploying your jars and jnlp on the servlet container; (6) using a browser to request the jnlp file.

More info can be found in the webstart dev guide:
http://download.oracle.com/javase/1,5.0/docs/guide/javaws/developersguide/contents.html

Obviously this is a lot of work.  We have ant scripts that automate most of this for us, but they are tied to our build process (using ivy for pulling in dependencies, for example), so I can't just send that to you.

[1] Note that the problem I reproduced was with the version-based protocol.  I have not tried without the version-based protocol, but I suspect the problem might not exist without.
;;;","02/Jun/11 13:00;davsclaus;Do you use any other camel JARs than camel-core in your webstart project? And if so which ones do you use?;;;","02/Jun/11 20:30;jn;The jars I'm using are camel-core, commons-management, slf4j-api, slf4j-log4j12, log4j, and the jar containing my test code.;;;","05/Jun/11 11:07;davsclaus;Jms since you dont use any extra camel JARs then you didnt hit any issues with not being able to discover type converters on the classpath with java web start.

;;;","05/Jun/11 23:53;jn;As far as I know, we're not using or relying on any type converters in our application.  The issue which impacts us is the fact that the DefaultCamelContext throws an exception during startup in our application, when deployed via webstart/jnlp.;;;","23/Jul/11 11:07;davsclaus;Should be improved in Camel 2.8;;;",,,,,,,,,,,,,,,
XPath namespaces not present when <xpath> element inside a <routeContext> element,CAMEL-4025,12508603,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pegli,pegli,27/May/11 22:49,29/May/11 13:49,14/Jul/23 05:45,29/May/11 13:49,2.6.0,2.7.1,,,,,,,,,,,2.8.0,,,,camel-spring,,,,0,,,,,,,,,"I have a route that is inside a {{<routeContext>}} element which uses XPath as part of a filter and a choice.  The input document has a default namespace that is not blank.  When I try to run a message through the route, I see the following error in the logs:

{code:none}
com.sun.org.apache.xpath.internal.domapi.XPathStylesheetDOM3Exception: Prefix must resolve to a namespace: foo
{code}

Adding the namespace declaration to the {{beans}} element as is done in the unit tests for camel-spring doesn't fix the problem, and neither does adding it to the {{<camelContext>}} element as described in the documentation.  I copied the {{SpringXPathFilterWithNamespaceTest}} class and created an input route configuration that uses a {{routeContext}}, and was able to reproduce the issue.","OSX 10.6.7
java version ""1.6.0_24""
Java(TM) SE Runtime Environment (build 1.6.0_24-b07-334-10M3326)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-334, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/May/11 22:52;pegli;SpringXPathFilterWithNamespaceOnRouteContextTest.java;https://issues.apache.org/jira/secure/attachment/12480714/SpringXPathFilterWithNamespaceOnRouteContextTest.java","27/May/11 22:51;pegli;xpathFilterWithNamespaceOnRouteContext.xml;https://issues.apache.org/jira/secure/attachment/12480713/xpathFilterWithNamespaceOnRouteContext.xml",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14012,,,Fri May 27 22:52:25 UTC 2011,,,,,,,,,,,"0|i01ydz:",9340,,,,,,,,,,,,,,,,,,,,"27/May/11 22:51;pegli;Route definition with an XPath filter inside a route context.  Place in src/test/resources/org/apache/camel/spring/processor;;;","27/May/11 22:52;pegli;unit test that reproduces bug; requires route definition xml file also attached to this isuse.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue using errorBuilderRef with the xml dsl,CAMEL-4022,12508547,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,hadrian,hadrian,27/May/11 13:27,10/Jun/11 08:42,14/Jul/23 05:45,10/Jun/11 08:42,2.7.1,,,,,,,,,,,,2.8.0,,,,,,,,0,,,,,,,,,"While fixing issues around the errorHandler I noticed that <onException> definitions defined in the camel context are ignored if a route specifies its own errorHandlerRef. The reason is that we set the onException definition on the default error handler. I have a fix for that, but I discovered a different issue (I think) for which I would like to discuss the solution.

When we have an onException definition that looks kinda like this:
{code}
<onException>
  <exception> java.lang.IllegalArgumentException</exception>
  <to uri=""mock:illegalArgumentException""/>
</onException>
{code}
... something happens, the IAE exception is caught, we do something, but in that process another exception is thrown. Currently, that would be caught by the default error handler, which may not be what we want.

What error handler (if any) should handle exceptions thrown while in onException?

The onException mechanism is somewhat similar to a try/catch. I don't think the exceptions thrown while handling onException should be handled by the same error handler configured for the route, or even the context scoped one. The processing should be very simple, predictable and immutable. Since the default ""CamelDefaultErrorHandlerBuilder"" can be replaced, it is not imho a solution and we need one global one that does as little as possible (the problem would be agreeing what that is: no redeliveries, logging or not, etc).

Thoughts?




",,,,,,,,,,,,,,,,,,,CAMEL-3989,,,,,CAMEL-4041,,,,,,,,,,"06/Jun/11 14:57;davsclaus;onexceptionerrorhandler.patch;https://issues.apache.org/jira/secure/attachment/12481573/onexceptionerrorhandler.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13977,,,Fri Jun 10 08:42:27 UTC 2011,,,,,,,,,,,"0|i01ydb:",9337,,,,,,,,,,,,,,,,,,,,"27/May/11 13:55;davsclaus;The behavior should be that no error handler should be used, when routing inside the <onException>.

For example as you say if another exception, or the same type of exception occurs, then the complexity gets hard. What if there is another onException that handles that exception, and then another exception is thrown and you go back to the first onException. And so on. Eg you have to be careful to not go in circles.

The onException is to allow end users to handle that exception in any custom way. For example to prepare some custom reply message (instead of the exception).

If you want to continue routing and have error handling, then send the message to a route:
{code}
onException(SomeException.class).handled(true).to(""direct:someRoute"");
{code};;;","27/May/11 14:14;hadrian;@Claus, thanks for the input. That's the issue, what if I don't want handled(true) and to(""direct:someRoute"") fails?

For the situation you mention where there is an onException handling the exception thrown while handling, that should *not* trigger. That is only meant for exceptions thrown on the route, not while handling. I believe exception thrown while handling have a special status and should be handled differently, in a simple, predictable way, not by the ErrorHandler configured for the route.

We need to come up with a good convention.;;;","27/May/11 14:17;hadrian;To be more precise, I believe exceptions thrown while handling are extremely exceptional and imho indicate a design/coding problem that needs to be resolved by the developer and should not appear in production. I don't see any good choice a framework like camel can make for you in such situations.;;;","01/Jun/11 17:25;hadrian;I added a test in r1130232 that demonstrates the problem. What should happen if exception is thrown while handling exception? Imho, certainly not going through redeliveries and the default error handler (which can be replaced by the user app).

My proposal is to have a fatalErrorHandler for this scenario that is simple and stateless (i.e. no redelivery and virtually no chances of throwing other exceptions, no sending to other endpoints). If that sounds good I can implement the piping for it while we keep discussing what exactly the fatalErrorHandler should do. If you can think of better solutions feel free to comment.

Thoughts?;;;","02/Jun/11 16:33;joed;This is an interesting use-case....
I strongly agree that it is an edge-case, ideally I think this should be something that is done as try/catch/finally, but since the case can occur
from my looking at the test I agree that some sort of fatalError is at least a good start.;;;","02/Jun/11 16:38;joed;Second comment, whatever we do, I think the most important is that it is not hidden from the user in any way shape or form.
Like swallowing it and carrying on as if nothing happened...;;;","02/Jun/11 17:26;hadrian;Johan, not sure how edge-case it is. Absolutely agree that we should not just swallow it.

Actually since it's a separate issue than the one reported here, I opened an improvement issue CAMEL-4041, and we can continue the discussion there.;;;","05/Jun/11 12:36;davsclaus;I had a bit time to look into that unit test Hadrian committed.

I moved it into its separate unit test file: ExceptionCamel4022Test
That makes it easier to debug.

I also added a bunch of unit tests that showed the expected behavior of onException when an exception was thrown: ExceptionThrownFromOnExceptionTest

The odd thing from Hadrians test is that if you send the message to direct:intermediate instead of direct:start, then it works as expected. I haven't debugged this more throughly to see the oddity.

;;;","05/Jun/11 12:46;davsclaus;The current logic for onException is as follows:

1. onException will shadow any errorHandler
2. any errorHandler does not take part if onException is processing an exception (this is the intend, but Hadrian created an unit test where the DLC interfered)


The logic in onException is roughly a ""magic"" try .. catch
{code}
try

   // while loop routing the exchange
 
} catch (OnException e) {
   try {
      // onException route logic goes here, if there is any
   } catch (Throwable t) {
      // ops an exception occurred in onException, we will store it on the exchange
      // TOOD: this is where we may want the onExceptionErrorHandler (to log the exception or something)
      exchange.setException(t);
   }
   
   if (!continued) {
      // mark exchange to stop routing (this is the default behavior)
   }
   if (!handled) {
      // if onException is configured to NOT handle, then rethrown exception (this is the default behavior)
      throw exchange.getException();
   }
}
{code}

So if an exception is thrown during onException processing, then that exception is caught. But we may want to introduce that OnExceptionErrorHandler (FatalErrorHandler as named by Hadrian) to log the exception (I think that's already done). But having an OnExceptionErrorHandler, we could let end user configure what to do. But again this may just become more complicated.

;;;","05/Jun/11 15:41;davsclaus;*Note:* We ought to discuss this in ticket CAMEL-4041

Okay Hadrian is correct when he suggests a OnExceptionErrorHandler (he named it FatalErrorHandler) that is stateless and doesn't do redelivery and whatnot. I got a prototype up and running with that now.

So what we need to consider is what the outcome of the processing of the Exchange should be when using OnException and a 2nd exception is thrown from within OnException. I hope you follow me now.

As I see we can do either of the following
a) log the 2nd exception and then ignore it
b) log the 2nd exception and set it as exception on the Exchange
c) as b + force the exchange to fail, even if continued/handled was set to true
d) as b + having an option to control if we should force the exchange to fail or not

And in terms of logging, we can have log level options end users can control in  case they don't want that. But by default I suggest its logged at WARN level incl. stacktraces

The ""big"" questions is what we should consider as the outcome. Should the 2nd exception be ignored or not. And if not ignored should it replace the 1st exception on the Exchange. And if so should we always force the Exchange to fail, even if the end user configured handled(true) etc.

;;;","06/Jun/11 09:48;davsclaus;I have added unit tests on trunk
http://svn.apache.org/viewvc?rev=1132562&view=rev

That tests for <onException> with both context and route scoped error handlers. I cannot reproduce the issue Hadrian reported in the initial comment of this JIRA ticket.

The test Hadrian created in r1130232 does neither reproduce it as its only a Java DSL test (no XML DSL test as well) and it indicated another issue, which is what should happen if another exception is thrown during processing onException. That is ticket CAMEL-4041.

;;;","06/Jun/11 14:35;hadrian;Claus, I can understand how you got confused. I should have been clearer in the description above. This shouldn't be a duplicate of CAMEL-3989, as I said in the description above: ""I discovered a different issue"". And the problem, although I discovered while looking into the camel-spring issue is in camel-core. Anyway, the title and description are not clear, I agree with that.

Regarding your comment above, yes, my test targeted the java dsl, to resolve the part of the issue that became CAMEL-4041 on Thu, one day later.

I don't think it's worth getting pedantic and cleanup the description and title of this issue (feel free if you think it's important). I would however continue the discussion for CAMEL-4041 here, because we have the context here (unless we copy a couple of the relevant comments there).

To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

To the proposed issues of having it configurable, I am strongly against it being configurable. This is a fatal situation that should not occur in the first place. If the exception should be ignored, again no, I believe Johan said the same thing. This is a situation much more likely to appear during development (in production it would be only the result of insufficient testing). We should fail fast and loud. So the only viable solution to me is c), something like an 'internal server error'. There are other solutions to be considered, like stopping the route, but given the stateless nature of camel routes I don't think we should go that far.
;;;","06/Jun/11 14:51;davsclaus;> To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

??? That new error handler is *only* being used when you use OnException, and thus a description that indicate that is much better than a general/confusing name such as FatalErrorHandler. The name ExceptionWhileHandlingExceptionErrorHandler is a better description but again it doesn't trigger/being used, in case, lets say DeadLetterChannel itself caused a fatal exception while processing the exception.

So having the name OnExceptionErrorHandler is a better description as it points the user/reader in the direction its being used when you use OnException.;;;","06/Jun/11 14:52;davsclaus;And in terms of the options listed. I also currently agree/think that *c* is the best and what the end user would expect. The exception is not hidden etc. It causes the exchange to fail. And its being logged so they can find it in the log also.;;;","06/Jun/11 14:57;davsclaus;Work in progress patch for this new error handler. ;;;","06/Jun/11 15:06;davsclaus;Hadrian fell free to look at the attached patch file, it goes most of the stuff in place. Of course some unit tests have to be adjusted slightly as they was dependent on the old code. Likewise there may be some tests in camel-spring that need to be adjusted.

Since this would be a bigger change, a good idea is to run a full test before committing :);;;","07/Jun/11 02:52;hadrian;@Claus, I agree a full test is absolutely necessary before committing.

FWIW, I know this ErrorHandler is only used with OnException, i.e. when onException is used in the DSL. Naming the handler OnExceptionErrorHandler will therefore relate to the route building syntax, not the semantics which to me is a problem. I trust you'll be able to come with something better.

Couple of comments on the patch: the error handler could be a singleton (obviously stateless). I think logging should be at error level. To your comment in the code, I don't think anything related to this error handler should be configurable.

That said, it's definitely a step in the right direction. Feel free to commit the patch. We can follow up with more changes once we agree on the other details and then close the issue (CAMEL-4041).;;;","09/Jun/11 13:49;davsclaus;Okay I will return to this ticket and the patch, now that I got time again.;;;","09/Jun/11 15:54;davsclaus;Will take a bit more work to get the XML DSL side working as they use error handler ref, and this indirection takes a bit more work to proper setup with this new FatalErrorHandler.;;;","10/Jun/11 08:42;davsclaus;Fixed by CAMEL-4041. I added better validation of OnException so you cannot mis configure it.;;;",,,,,,,,,,
ConcurrentModificationException at DefaultCamelContext.getRouteDefinition(),CAMEL-4021,12508528,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,arkadi,arkadi,27/May/11 10:26,25/Oct/11 11:35,14/Jul/23 05:45,27/May/11 14:05,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"Similar to CAMEL-3493 there is also a race in getRouteDefinition()
{noformat}
java.util.ConcurrentModificationException
        at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)[:1.6.0_21]
        at java.util.AbstractList$Itr.next(AbstractList.java:343)[:1.6.0_21]
        at org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1098)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.startGatewayRoutes(GatewayRouteSetup.java:86)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.process(GatewayRouteSetup.java:73)[cih-core-1.0.jar:1.0]
{noformat}
As route count could be quite large, it would be nice to have them stored in synchronized map or something like that instead of list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14024,,,2011-05-27 10:26:05.0,,,,,,,,,,,"0|i01yd3:",9336,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect annotation parameter in examples,CAMEL-4018,12508452,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,stu.c,stu.c,26/May/11 16:41,27/May/11 01:15,14/Jul/23 05:45,27/May/11 01:15,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,,,,"In the ""Parameter Binding Annotations"" page at http://camel.apache.org/parameter-binding-annotations.html, a number of the examples include lines like;

{{public void doSomething(@Header(name = ""JMSCorrelationID"") String correlationID, @Body String body) {}}

The correct annotation parameter for @Header is actually ""value"", rather than ""name"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76187,,,Fri May 27 01:15:21 UTC 2011,,,,,,,,,,,"0|i01ycf:",9333,,,,,,,,,,,,,,,,,,,,"27/May/11 01:14;njiang;Hi Stu

After digging the code change log, I find this issue is related to CAMEL-1378 which was fixed two years ago.
I just updated the wiki page for it, and thanks for your bug report.
;;;","27/May/11 01:15;njiang;Updated the wiki page.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
type converters should return NULL for Double.NaN values instead of 0,CAMEL-4011,12508222,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,boday,boday,boday,24/May/11 17:41,25/Oct/11 11:36,14/Jul/23 05:45,26/May/11 00:45,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,converter,types,,,,,,,"see this discussion...http://camel.465427.n5.nabble.com/XPath-for-an-Integer-td4422095.html

Update the ObjectConverter.toXXX() methods to check for Double.NaN and return NULL instead of relying on Number.intValue()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/May/11 21:50;boday;CAMEL-4011.patch;https://issues.apache.org/jira/secure/attachment/12480330/CAMEL-4011.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14017,,,Thu May 26 16:43:10 UTC 2011,,,,,,,,,,,"0|i01yav:",9326,,,,,,,,,,,,,,,,,,,,"24/May/11 21:01;boday;patch for review...;;;","26/May/11 00:45;boday;patch committed...;;;","26/May/11 11:54;bvahdat;see my comments on the revision 1127744 here:

http://camel.465427.n5.nabble.com/XPath-for-an-Integer-td4422095.html

;;;","26/May/11 16:43;boday;thanks, just added the check for Float.NaN as well;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP component fails to process multiple files at once from a specified folder,CAMEL-4010,12508205,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tricasoft,tricasoft,24/May/11 15:16,06/Nov/11 11:57,14/Jul/23 05:45,06/Nov/11 11:57,2.6.0,,,,,,,,,,,,2.8.3,2.9.0,,,camel-ftp,,,,0,,,,,,,,,"Camel FTP component fails to process multiple files at once from a specified folder (let's assume the folder is /in).
When the consumer connects to a ftp account and finds a list of, let's say, 3 files, it will try to retrieve them in parallel but this is not handled properly.

As you can see from the below FTP server log, this is what Camel FTP does:
- it changes the current directory to /in
- retrieves the file
- it changes the current directory to /
- the second (probably) thread changes the directory to /in
- retreives the second file
- the first (probably) thread sends a delete command but it sends it as if it were in the root folder but it is actually in the /in folder
- the FTP gives an error that the file doesn't exist
- somehow the FTP Component blocks itself on the first file...

See my comments in the following log starting with *****

(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,206)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> RETR WS_1001_1.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 150 Connection accepted
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> SSL connection for data connection established
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 226 Transfer OK
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD /
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PWD
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,207)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> RETR WS_1001_2.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 150 Connection accepted
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> DELE in/WS_1001_1.xml    ***** The location is already /in, should be DELE WS_1001_1.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 File not found
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,208)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> NLST in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 Directory not found
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PWD
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in            ***** Current directory is already /in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 CWD failed. ""/in/in"": directory not found.

For the whole FTP server logs go here: http://pastie.org/private/kknnkxpbyzqmai7gsm8z5g
For the Servicemix/Camel(Trace) log: http://pastie.org/private/eulookxiepan3nkjyu41a

A workaround that seems to work is to use the maxMessagesPerPoll=1 option.","Camel 2.6.0-fuse-0.1-0.9
Running in ServiceMix
Java 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4625,"25/May/11 13:19;tricasoft;test-camel-ftp.zip;https://issues.apache.org/jira/secure/attachment/12480407/test-camel-ftp.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76188,,,Sat Nov 05 13:11:38 UTC 2011,,,,,,,,,,,"0|i01yan:",9325,,,,,,,,,,,,,,,,,,,,"25/May/11 13:19;tricasoft;Sample test case using Camel Nmr in combination with Camel FTP.

You need to do:
- unzip and enter the folder
- mvn install
- copy the .zip file from /sa/target to ServiceMix deploy folder
- put more than 3 files at once on the input FTP;;;","29/May/11 12:21;davsclaus;Cannot be critical as there is a workaround;;;","05/Nov/11 13:11;davsclaus;The ftp consumer is not thread safe, we should possible force the ftp consumer to run synchronously.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad href links generated for certain endpoint uris in camel-web,CAMEL-3991,12507699,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,19/May/11 01:26,25/Oct/11 11:36,14/Jul/23 05:45,04/Jun/11 01:50,2.7.1,,,,,,,,,,,,2.7.2,2.8.0,,,camel-web,,,,0,,,,,,,,,"When new Endpoints are created via camel-web, some endpoint uris result in bad href links generated for the endpoint page.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14029,,,Sat Jun 04 01:48:30 UTC 2011,,,,,,,,,,,"0|i01y6f:",9306,,,,,,,,,,,,,,,,,,,,"19/May/11 01:28;hadrian;Fix applied in rev 1124497 for trunk and rev 1129431 for camel-2.7.2.;;;","04/Jun/11 01:48;hadrian;This issue is a potential XSS vulnerability discovered by Sow Ching Shiong and reported by Secunia (secunia.com). Please find below the original report:

{quote}
We have received a vulnerability report from a third-party researcher (Sow
Ching Shiong) regarding a cross-site scripting vulnerability in Apache Camel
and contact you on his behalf to attempt a coordinated disclosure.

Please see the vulnerability details below.

We have confirmed the vulnerability in version 2.7.0.

We have reserved Secunia Advisory SA44415 and set a preliminary release date
of 25th May, 2011 for the publication of our advisory. We are, of course,
prepared to postpone this date in case you need more time to address the
vulnerability, as long as you keep us updated on the status.

Also, don't hesitate to contact us in case you have any comments or
questions.

Details:

Input passed via the URL to ""camel/endpoints/<endpoint>"" is not properly
sanitised before being returned to the user. This can be exploited to
execute arbitrary HTML and script code in a user's browser session in
context of an affected site.


PoC from the reporter:

==
http://localhost:8161/camel/endpoints/mock:someName<iframe
src=""javascript:alert('Stored XSS')""

For Stored XSS, please visit
http://localhost:8161/camel/endpoints again to trigger it.
{quote};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
onException definition ignored when using route/@errorHandlerRef with the xml dsl,CAMEL-3989,12507623,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,18/May/11 14:50,10/Jun/11 13:57,14/Jul/23 05:45,10/Jun/11 13:57,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-spring,,,,0,,,,,,,,,"When using a route definition like below:

{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
  <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
  <route errorHandlerRef=""errorHandler"">
    <from uri=""direct:start""/>
[...]
{code}

the onException definition is not propagated to the ref'd DLC and hence it will be ignored.",,,,,,,,,,,,,,,,,,,,CAMEL-4022,,,,,,,,,,,CAMEL-4058,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,71446,,,Fri Jun 10 13:57:08 UTC 2011,,,,,,,,,,,"0|i01y5z:",9304,,,,,,,,,,,,,,,,,,,,"06/Jun/11 12:07;davsclaus;I cannot reproduce this issue with the source code on trunk. Hadrian do you have an example that fails?;;;","06/Jun/11 12:11;davsclaus;Ah okay the issue you have is that the onException doesn't do anything.
{code:xml}

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    "">

  <bean id=""myFail"" class=""java.lang.IllegalArgumentException"">
    <constructor-arg index=""0"" value=""Damn""/>
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">

    <errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead""/>

    <onException>
      <exception>java.lang.IllegalArgumentException</exception>
      <handled>
        <constant>false</constant>
      </handled>
    </onException>

    <route errorHandlerRef=""myDLC"">
      <from uri=""direct:start""/>
      <to uri=""mock:a""/>
      <throwException ref=""myFail""/>
    </route>
  </camelContext>

</beans>
{code}

So with that above, it gets into the DLC. And in your case you would expect it to be not handled at all, and the Exchange to fail?;;;","06/Jun/11 12:33;davsclaus;Okay this ticket is in fact invalid. The source code is correct.

When you do
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
{code}

Its a bit unusual behavior and we may have to throw some error on startup stating this is a mis-configuration. You cannot have <handled> without any child outputs.

So you have to add some logic what to do:
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
    <log message=""Damn something went wrong, and I will just fail""/>
  </onException>
{code}

However the <onException> can also be used to have per exception specific redelivery policy, for example. You may have a a DLC error handler with a pre configured redelivery policy:
{code:xml}
    <errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead"">
      <redeliveryPolicy maximumRedeliveries=""5"" redeliveryDelay=""1000"" useCollisionAvoidance=""true""/>
    </errorHandler>
{code}

And then in case of a special MyException we want to use a different redelivery policy, so we can ""override"" this:
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <redeliveryPolicy maximumRedeliveries=""3"" redeliveryDelay=""5000""/>
  </onException>
{code}

So what happens is that the DLC is being used, but in case of a MyException is being thrown it will use the <redeliveryPolicy> settings defined in the <onException> instead of its default (well in fact it does an overlay).

So in this example, so even after 3 redelivery attempts, the exchange is exhausted, and is handled by the error handler (the DLC) in this case. So the exchange is moved into the dead letter queue.

So what we need to do is to add a check in OnException that it fail on startup if it has been misconfigured.;;;","06/Jun/11 13:51;davsclaus;That said. There is one interresting aspect when doing a
{code:xml}
<errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead"">
      <redeliveryPolicy maximumRedeliveries=""5"" redeliveryDelay=""1000"" useCollisionAvoidance=""true""/>
    </errorHandler>

  <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
{code}

eg we set handled=false, in the OnException for MyException. If the intention is to say that
a) okay by default use the Dead Letter Channel to handle exceptions
b) but for this special exception MyException, then *dont* use DLC but just regard it as not handled (eg its failed on the Exchange).

In case b (which I can see a good point for end user to expect) then there is a bug in trunk. However that's fairly easy to fix. I think we should change this in Camel to act like that. So if you have configured handled or any outputs on the <onException> then the DLC will not kick in.;;;","10/Jun/11 13:57;davsclaus;Is fixed with those recent error handler fixes/improvements.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Name Part of the Sender & the Recipient Email Addresses are not encoded with the Exchange charset,CAMEL-3985,12507541,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,karthz,karthz,17/May/11 23:09,29/Feb/12 14:15,14/Jul/23 05:45,29/Feb/12 14:15,2.7.1,,,,,,,,,,,,2.10.0,2.9.1,,,camel-mail,,,,0,camel-mail,charset,encoding,,,,,,"The name part of an email address can have any character, and it needs to be encoded with the correct charset provided for the exchange. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Feb/12 20:08;michal.warecki;MailBinding.diff;https://issues.apache.org/jira/secure/attachment/12516383/MailBinding.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,76189,,,Wed Feb 29 14:15:37 UTC 2012,,,,,,,,,,,"0|i01y53:",9300,,,,,,,,,,,,,,,,,,,,"28/Feb/12 20:08;michal.warecki;I attach patch for that bug. Could someone check this? :-);;;","29/Feb/12 14:15;davsclaus;Michael, thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Potential ClassCastException if JmsMessage isn't set anymore,CAMEL-3979,12507462,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/May/11 08:58,25/Oct/11 11:35,14/Jul/23 05:45,17/May/11 09:16,2.7.1,,,,,,,,,,,,2.7.2,2.8.0,,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Correct-way-to-handle-transactions-acroos-multiple-routes-joined-with-ActiveMQ-tp4402998p4402998.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14037,,,2011-05-17 08:58:54.0,,,,,,,,,,,"0|i01y3r:",9294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring-WS producer doesn't propagate headers,CAMEL-3974,12507187,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rkettelerij,rkettelerij,rkettelerij,13/May/11 21:53,25/Oct/11 11:35,14/Jul/23 05:45,29/May/11 22:19,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-spring-ws,,,,0,,,,,,,,,"The Spring-WS producer only sets the body of the exchange, headers aren't propagated.

See Nabble: http://camel.465427.n5.nabble.com/spring-ws-component-not-propagating-in-headers-to-out-message-td4393731.html",,schmug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/May/11 15:17;schmug;propagate-headers.patch;https://issues.apache.org/jira/secure/attachment/12479336/propagate-headers.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14018,,,Sun May 29 22:19:00 UTC 2011,,,,,,,,,,,"0|i01y2n:",9289,,,,,,,,,,,,,,,,,,,,"16/May/11 15:17;schmug;simple patch to propagate in headers to out message. Unit test could perhaps be simplified.;;;","27/May/11 13:44;davsclaus;Richard whats the status of this?

Getting bugs fixed is important so we have a path for doing a release.;;;","27/May/11 14:46;rkettelerij;Claus, I'll pick it up this weekend. Had some trouble with my dev environment so I haven't committed a fix yet.;;;","29/May/11 22:19;rkettelerij;trunk 1128970.

Thanks Doug for providing a patch, I've polished it a bit.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Dumping route to XML created by Java DSL using an expression may not output the actual used expression,CAMEL-3971,12507106,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/May/11 10:18,18/May/11 09:41,14/Jul/23 05:45,18/May/11 09:41,2.7.0,,,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"See this unit test
ManagedCamelContextDumpRoutesAsXmlTest

The route in Java DSL
{code}
                from(""seda:bar"").routeId(""myOtherRoute"")
                    .filter().header(""bar"")
                        .to(""mock:bar"")
                    .end();
{code}

And the output in XML
{code:xml}
  <route group=""org.apache.camel.management.ManagedCamelContextDumpRoutesAsXmlTest$1"" id=""myOtherRoute"">
        <from uri=""seda:bar""/>
        <filter id=""filter1"">
            <expressionDefinition/>
            <to uri=""mock:bar"" id=""to2""/>
        </filter>
    </route>
{code}

The same example created by Spring XML, outputs the XML correct


",,,,,,,,,,,,,,,,,,,,,,CAMEL-3984,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14032,,,2011-05-13 10:18:11.0,,,,,,,,,,,"0|i01y1z:",9286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inject custom package scan class resolver asap to ensure loading of classpath works,CAMEL-3967,12507016,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/May/11 16:59,12/May/11 17:10,14/Jul/23 05:45,12/May/11 17:10,2.7.0,,,,,,,,,,,,2.8.0,,,,camel-spring,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/TypeConverter-loading-failes-in-JBoss-5-1-0-GA-tp4389726p4389726.html

The issue is when using JBoss and Camel 2.7

",,rkettelerij,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14052,,,2011-05-12 16:59:39.0,,,,,,,,,,,"0|i01y13:",9282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ftp producer - If sending noop fails it should force re-connection attempt,CAMEL-3965,12506935,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/11 05:35,25/Oct/11 11:35,14/Jul/23 05:45,12/May/11 06:12,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Limitations-or-bug-on-FTP2-with-FTPS-tp4372423p4372423.html

The RemoteFileProducer should force check if the connection is alive on the client, if the noop fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14050,,,2011-05-12 05:35:50.0,,,,,,,,,,,"0|i01y0n:",9280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringTestSupport - debugBefore does not work,CAMEL-3959,12506644,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/May/11 18:21,09/May/11 18:45,14/Jul/23 05:45,09/May/11 18:45,2.7.0,,,,,,,,,,,,2.8.0,,,,camel-test,,,,0,,,,,,,,,"You cannot use the debugBefore / debugAfter when using CamelSpringTestSupport from camel-test. The problem is that the Spring Framework triggers Camel to start before the unit test have setup the debugger and whatnot.

We should align this so it works like without spring, so its the CamelTestSupport that invokes start on CamelContext

See nabble
http://camel.465427.n5.nabble.com/CamelSpringTestSupport-and-debugBefore-tp4382259p4382259.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14070,,,2011-05-09 18:21:23.0,,,,,,,,,,,"0|i01xzb:",9274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Route cannot be started within web-console, if autoStartup=""false"" is set in camel.xml",CAMEL-3950,12506417,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jimmyrueedi,jimmyrueedi,06/May/11 14:46,25/Oct/11 11:35,14/Jul/23 05:45,08/May/11 09:49,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-web,,,,0,,,,,,,,,"When a route has autoStartup=""false"" set in the camel.xml, it cannot be started anymore in the web- console.
In the logfile, an entry is generated, similar to this:
""Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp7446303-52""
If a route does not have autoStartup=""false"", it can be stopped and started normally (as before with ActiveMQ 5.4.2 / Camel 2.4.0)

Reproduce steps:
- Configure a route with ""<route autoStartup=""false"">""
- Start the ActiveMQ Service
- Navigate to ""http://server.domain.tld:8161/camel/routes
- try to start the route with the button ""Start""
- check the logfile ""activemq.log""
","Windows 2008 R2, JRE 1.6, ActiveMQ 5.5.0, Camel 2.7.1 (included in ActiveMQ 5.5.0 plus: camel-ftp-2.7.1.jar)
NO JDK Installed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14074,,,Mon May 30 06:50:28 UTC 2011,,,,,,,,,,,"0|i01xxb:",9265,,,,,,,,,,,,,,,,,,,,"26/May/11 12:47;jimmyrueedi;Well, I searched long time, to find out, how to test this.
What can I do, to prove, it's working? (I just downloaded the newest snapshot twice and replaced all camel-xyz.jar in my ActiveMQ Setup...

Greetings from a newbie
Jimmy;;;jira-users","26/May/11 15:39;davsclaus;I think you need to upgrade your AMQ as well, as it ""rebrand"" the camel-web console it embeds.;;;","30/May/11 06:50;jimmyrueedi;Well, I took the snapshots of camel and AMQ from May, 26th and upgraded my installation.
The behaviour is unchanged, even I removed the ""old"" .jar-files:
------------------- snip -------------------
2011-05-30 08:41:48,136 | INFO  | Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp2889719-43
------------------- snip -------------------
Seems, there is no change in effect, actually.

Update: 27.06.2011: Took the latest Snapshots actually (ActiveMQ5.6 from June, 24th and camel 2.8 from Junde 27th)
--> no change in behaviour, still doesn't work

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with the RSET command with POP3 servers,CAMEL-3948,12506357,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,06/May/11 01:51,25/Oct/11 11:36,14/Jul/23 05:45,27/Jun/11 10:59,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-mail,,,,0,,,,,,,,,"Issue is discussed in this [thread|http://camel.465427.n5.nabble.com/POP3-mail-deletion-td4370158.html].

Note: Donald posted interesting and helpful findings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jun/11 22:21;dwhytock;MailConsumer.java;https://issues.apache.org/jira/secure/attachment/12483362/MailConsumer.java","27/Jun/11 16:30;dwhytock;MailConsumer_20110627.java;https://issues.apache.org/jira/secure/attachment/12483974/MailConsumer_20110627.java","21/Jun/11 22:21;dwhytock;diff.txt;https://issues.apache.org/jira/secure/attachment/12483363/diff.txt","27/Jun/11 16:30;dwhytock;diff_20110627.txt;https://issues.apache.org/jira/secure/attachment/12483973/diff_20110627.txt",,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13891,,,Fri Jul 01 03:04:03 UTC 2011,,,,,,,,,,,"0|i01xwv:",9263,,,,,,,,,,,,,,,,,,,,"20/Jun/11 03:08;dwhytock;Contributing this patch to MailConsumer.  It adds a property, POP3UID, to the exchange when it's created from a POP3 message, then synchronizes the exchange with the folder's message in processCommit() to ensure deletion.;;;","20/Jun/11 03:37;njiang;Hi Donald,

Can you submit a diff patch instead of the java file?
It will be helpful for us to review the patch.
;;;","20/Jun/11 06:57;davsclaus;This patch cannot be accepted as it uses some internal sun code, eg it has these imports
{code}
import com.sun.mail.pop3.POP3Folder;
import com.sun.mail.pop3.POP3Message;
{code}
;;;","21/Jun/11 22:21;dwhytock;Generates a UID for POP3 messages by concatenating the header lines and using UUID.nameUUIDFromBytes().  Saves generated UID to the POP3UID property on the exchange.

This will work for any POP3 server that generates a sufficiently unique message ID in the headers, without being dependent on the format of the headers.;;;","27/Jun/11 09:38;davsclaus;Donald thanks for the new patch.;;;","27/Jun/11 10:52;davsclaus;Donald I have committed your patch on trunk with a few slight minor changes. Do you mind testing the code on trunk to see if that works on your system?;;;","27/Jun/11 10:59;davsclaus;I have also removed the rsetbeforequit being set in the mail configuration. So Camel does not set that option at all.;;;","27/Jun/11 16:09;dwhytock;Not working on my system with the changes.  Will isolate the problem change and resubmit.
;;;","27/Jun/11 16:30;dwhytock;getAllHeaders() returns a set of Header objects. Concatenating and comparing them requires extracting the text from them.;;;","01/Jul/11 03:04;njiang;I just applied the diff_20110627 into the camel trunk.;;;",,,,,,,,,,,,,,,,,,,,
AnnotationTypeConverterLoader fails for folders containing spaces,CAMEL-3942,12506305,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jcdelmas,jcdelmas,05/May/11 16:10,25/Oct/11 11:36,14/Jul/23 05:45,09/May/11 12:14,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"This problem appears when jar dependencies with type converters have path containing space characters.

In my case, the camel-mail-2.7.1.jar jar is located in my local maven repository.

I get this error during my project startup: 
{noformat}
[...]
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/D:/Documents and Settings/501915291/.m2/repository/org/apache/camel/camel-mail/2.7.1/camel-mail-2.7.1.jar!/META-INF/services/org/apache/camel/TypeConverter
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parse(URI.java:3019)
        at java.net.URI.<init>(URI.java:578)
        at java.net.URL.toURI(URL.java:918)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:118)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:108)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:69)
        ... 63 more
{noformat}

FIX:
findPackages method in AnnotationTypeConverterLoader shouldn't use URIs to store already visited jars.",Windows XP,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,"09/May/11 08:24;jcdelmas;spaces_issue.patch;https://issues.apache.org/jira/secure/attachment/12478573/spaces_issue.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14068,,,Mon May 09 12:14:34 UTC 2011,,,,,,,Patch Available,,,,"0|i01xvj:",9257,,,,,,,,,,,,,,,,,,,,"07/May/11 08:59;davsclaus;Jean can you re-attach your patch and this time make sure to [x] in grant license to Apache. Otherwise we cannot accept your patch.;;;","09/May/11 08:37;jcdelmas;Ok, the patch has been re-attached.;;;","09/May/11 12:14;davsclaus;Thanks for the patch. I have applied it, although I used getPath from the URL (no need to convert to URI).

Do you mind testing code from trunk on your system?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JdbcAggregationRepository count (*) is not working with MySQL 5.0,CAMEL-3936,12506078,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,bouba,bouba,03/May/11 17:38,03/May/11 20:49,14/Jul/23 05:45,03/May/11 20:19,2.7.1,,,,,,,,,,,,2.8.0,,,,camel-sql,,,,0,Aggregation,Camel,JDBC,MySQL,Repository,,,,"The JdbcAggregationRepository makes a {noformat} 'SELECT COUNT (*) FROM....'{noformat}  SQL request at line 131 in the source code. 

This appears to be incorrect with MySQL because theire is a space between COUNT and (. 

By replacing the request with {noformat} 'SELECT COUNT(*) FROM....'{noformat}  (without the white space) the bug is corrected for MySQL (I think it should be tested with other database without the space). 

This request can be tested with Mysql Query Browser (the returned error is the same as the one encountered when we execute the JdbcAggregationRepository with Camel). 

The exception returned is the following: 
{noformat} ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID:COE-WRKST2-1749-1304443569312-2:2:1:88:1. Exhausted after delivery attempt: 1 caught: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:728)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:744)
	at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:775)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:131)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:114)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:114)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:251)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:189)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:409)
	at com.mysql.jdbc.Util.getInstance(Util.java:384)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1054)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3566)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3498)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1959)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113)
	at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
	... 42 more{noformat} ",MySQL 5.0 (but I suspect the bug appears with all 5.X versions...) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14065,,,Tue May 03 20:49:22 UTC 2011,,,,,,,,,,,"0|i01xu7:",9251,,,,,,,,,,,,,,,,,,,,"03/May/11 20:04;muellerc;{code}
SELECT COUNT(*) FROM....
{code}

also works for:
- MySQL 5.1
- Oracle 10g


It looks like it's the right query: http://www.w3schools.com/SQL/sql_func_count.asp

I will change it
;;;","03/May/11 20:14;muellerc;It works also with H2;;;","03/May/11 20:18;muellerc;Hello Baptiste!

Thanks for reporting this issue. I committed the proposed change with revision 1099228.

Cheers,
Christian;;;","03/May/11 20:20;bouba;I also think the syntax without space is the good one. 

Thanks for the reactivity Christian ! 

Baptiste;;;","03/May/11 20:49;rkettelerij;Note that you can work around this issue in MySQL by setting the SQL_MODE parameter to ""IGNORE_SPACE"". 
Nevertheless it's good that this is fixed in 2.8.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel XSLT does not work when used with camel-blueprint,CAMEL-3934,12506023,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,iocanel,iocanel,03/May/11 05:41,02/May/13 02:29,14/Jul/23 05:45,30/May/11 15:55,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,,,,2.8.0,,,,camel-xslt,,,,0,,,,,,,,,"camel-xslt cannot found the xslt document when used with camel-blueprint, do to FileNotFoundException.
Apparently, the component uses spring resource abstraction, which is not applicable when used with camel-blueprint.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4031,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14006,,,Mon May 16 14:02:31 UTC 2011,,,,,,,,,,,"0|i01xtr:",9249,,,,,,,,,,,,,,,,,,,,"16/May/11 14:02;rodehav;I seem to have a very similar problem. The xsl file cannot be found although it's included in the bundle itself. It resides in the subfolder ""resources/xslt"". I don't use Spring DSL or blueprint. I use normal java DSL, like this:

{code}
from(""file:..."").to(""xslt:resources/xslt/claes-basis2esb-basis.xsl"");
{code}

Can someone verify if it's the same problem? Is there any progress? Also, is there a workaround I can use to get this to work in Karaf?

I'm using Camel 2.7.1 under Karaf 2.2.0 and I get the following exception:

{code}
2011-05-16 15:40:52,706 | ERROR | 76-dc962f8a57fe) | daq                              | ?                                   ? | [ERROR] null : [trs.route.daq.b07e8bfd-cff2-49b0-a376-dc962f8a57fe] The callback method start has thrown an exception : Camel context failed to start (TRS data acquisition route)
java.lang.RuntimeException: Camel context failed to start (TRS data acquisition route)
	at se.digia.connect.core.service.RouteServiceBase.doStart(RouteServiceBase.java:70)
	at se.digia.connect.core.service.ServiceBase.start(ServiceBase.java:46)
	at se.digia.trs.route.daq.DaqService.__start(DaqService.java:77)
	at se.digia.trs.route.daq.DaqService.start(DaqService.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_21]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_21]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_21]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_21]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:237)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:193)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:455)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:336)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.reconfigure(InstanceManager.java:1184)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.IPojoFactory.reconfigure(IPojoFactory.java:481)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.IPojoFactory.updated(IPojoFactory.java:648)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1567)[5:org.apache.felix.configadmin:1.2.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)[5:org.apache.felix.configadmin:1.2.8]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_21]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route15 at: >>> To[xslt:resources/xslt/claes-basis2esb-basis.xsl] <<< in route: Route[[From[file:C:\dev\connect\common/data/interfaces/daq?m... because of Failed to resolve endpoint: xslt://resources/xslt/claes-basis2esb-basis.xsl due to: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:815)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:706)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1432)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1336)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1314)
	at se.digia.connect.core.service.RouteServiceBase.doStart(RouteServiceBase.java:54)
	... 20 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt://resources/xslt/claes-basis2esb-basis.xsl due to: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:450)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:410)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:181)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:812)
	... 29 more
Caused by: javax.xml.transform.TransformerConfigurationException: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.component.xslt.XsltComponent.loadResource(XsltComponent.java:160)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:132)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:75)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:432)
	... 38 more
Caused by: java.io.FileNotFoundException: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158)
	at org.apache.camel.component.xslt.XsltComponent.loadResource(XsltComponent.java:156)
	... 41 more

{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
custom interceptor - wrapProcessorInInterceptors - passing parent Description on Split,CAMEL-3928,12505924,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,javier.arilos@gmail.com,javier.arilos@gmail.com,02/May/11 12:55,25/Oct/11 11:36,14/Jul/23 05:45,04/May/11 11:24,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"In routes with a split step, when my wrapProcessorInInterceptors method is called, the  ProcessorDefinition<?> paremeter is referencing the Split definition instead of steps inside it.

For example, for the route:

from(""direct:a"").routeId(""route:a"")
        .split(xpath(""//a/b"")).id(""task:split.products"")
            .log(""*** splited ::: body : ${body} "").id(""task:handle.that"") (*)
            .setHeader(""insplit"",constant(""in-split"")) (*)
        .end()
        .log(""* aftersplit ::: body : ${body}"").id(""task:after.split"");

for steps inside the split (*) the ProcessorDefinition is referencing the splitdefinition, while i think it should point to the log and setHeader steps.

It can be easily fixed,  in class:::

org.apache.camel.processor.DefaultChannel

in the method initChannel, changing

target = strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(), outputDefinition, target, next);

by this:

target = strategy.wrapProcessorInInterceptors(routeContext.getCamelContext(), traceDef, target, next);

","ubuntu 10.04
java version ""1.6.0_22""
Java HotSpot(TM) Client VM (build 17.1-b03, mixed mode, sharing)",hadrian,,,,,,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14060,,,Wed May 04 11:24:41 UTC 2011,,,,,,,Patch Available,,,,"0|i01xsf:",9243,,,,,,,,,,,,,,,,,,,,"02/May/11 15:27;hadrian;@Javier, thanks for noticing this and for providing a fix!
You checked the patch available box. Do you intend to provide a patch with a unit test as well, or you were referring to the solution you provided in the description? A unit test would be fantastic.;;;","02/May/11 16:06;javier.arilos@gmail.com;Hadrian,
I were referring to the solution provided, sorry but I wouldn't know how to
correctly write such a test...
Thank you.
Javier.

2011/5/2 Hadrian Zbarcea (JIRA) <jira@apache.org>

;;;","02/May/11 16:14;hadrian;@Javier, thanks for the clarification. No worries then. We appreciate unit tests whenever contributors provide them, otherwise, we have to write them ourselves to prevent the issue from popping up again in a future release. I will assign this to me and provide a unit test. It doesn't make your contribution any less important. Thanks again.;;;","02/May/11 16:22;javier.arilos@gmail.com;Thank you Hadrian,
may I have a look at your tests when you are done? this way I will learn for
next time.
Regards.

2011/5/2 Hadrian Zbarcea (JIRA) <jira@apache.org>

;;;","04/May/11 11:24;davsclaus;Javier thanks for reporting. I have fixed this on trunk, and added unit test as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
CXF's Provider service using the payload data-format may not transfer the payload correctly,CAMEL-3927,12505919,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,ay,ay,02/May/11 11:40,25/Oct/11 11:35,14/Jul/23 05:45,02/May/11 15:37,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"When using the Provider based service (i.e., one using the Provider<Source>'s invoke(Source m) signature), I observed that the payload content is not correctly extracted in the first call. The reason seems to be that the content is passed as a StaxSource instance to the camel's cxf binding component (DefaultCxfBinding) and this expects currently a DOMSource for the payload data format and therefore it not able to extract the payload content.

Some more information is described in a related mail thread at camel-user 
http://camel.465427.n5.nabble.com/Question-on-RemoveClassTypeInterceptor-in-Camel-Cxf-s-Payload-mode-td4358188.html

This problem can be reproduced using CxfConsumerProviderTest when this test is executed using the payload data format. I suppose this test should actually be executed in the payload data format mode. But this is currently not the case.

So, I am attaching the modified CxfConsumerProviderTest that uses the payload data format. This test will fail with the current trunk camel-cxf implementation. I am also attatching the patch file of the suggested change in DefaultCxfBinding that can resolve this issue and successfully pass this test.

I think we can eventually consider a different CxfPayload implementation that does not require a DOM object at all. But for now, I think we can live with this correction to avoid this payload extraction issue.

Thanks.
Regards, Aki


",,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,"02/May/11 11:43;ay;camel-cxf-20110429b-patch.txt;https://issues.apache.org/jira/secure/attachment/12477943/camel-cxf-20110429b-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14094,,,Mon May 02 15:37:35 UTC 2011,,,,,,,Patch Available,,,,"0|i01xs7:",9242,,,,,,,,,,,,,,,,,,,,"02/May/11 11:43;ay;M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerProviderTest.java
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
;;;","02/May/11 15:37;wtam;Committed revision 1098630.  Thanks Aki Yoshida for the Jira and the patch.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example 'camel-example-management': a lot of exceptions during shutdown,CAMEL-3925,12505916,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,amarkevich,amarkevich,02/May/11 10:56,25/Oct/11 11:35,14/Jul/23 05:45,02/May/11 15:33,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,examples,,,,0,,,,,,,,,"I run example using
mvn camel:run
And stop the example with ctrl + c
Console output attached.","apache-maven-3.0.3
jdk1.6.0_25_x64",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/May/11 10:57;amarkevich;camel-example-management.log;https://issues.apache.org/jira/secure/attachment/12477938/camel-example-management.log",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14104,,,2011-05-02 10:56:17.0,,,,,,,,,,,"0|i01xrr:",9240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dns creates a new exchange and drops headers,CAMEL-3920,12505829,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,joed,joed,joed,30/Apr/11 00:31,25/Oct/11 11:35,14/Jul/23 05:45,30/Apr/11 00:33,2.8.0,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,,,,"From irc:

17:33  sproingie> i have a weird problem with the dns component... it seems to not copy headers properly
17:34  sproingie> .setHeader(""foo"", constant(""bar"")).to(""dns:ip"").log(LogLevel.INFO, ""foo=${in.header.foo}"")
17:34  sproingie> foo turns up blank


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14096,,,Sat Apr 30 06:50:28 UTC 2011,,,,,,,,,,,"0|i01xqn:",9235,,,,,,,,,,,,,,,,,,,,"30/Apr/11 06:50;davsclaus;Yeah it should propagate headers and attachments so you dont loose those.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfPayloadConverter may start failing to convert a CxfPayload to a Node,CAMEL-3917,12505801,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,29/Apr/11 15:45,25/Oct/11 11:36,14/Jul/23 05:45,29/Apr/11 18:56,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"There is an issue with CxfPayloadConverter that can lead to a failure in converting the CxfPayload into something which is actually convertible. 

This problem happens when you try to convert a CxfPayload instance that has an empty body list into a Node instance. This returns null and subsequently registers this type mapping key (CxfPayload->Node) in org.apache.camel.impl.converter.BaseTypeConverterRegistry's conversion-misses table. Because of this, a subsequent conversion using a CxfPayload instance with an non empty body list will permanently fail.

I am attaching a modified CxfPayloadConversionTest that includes testCxfPayloadToNode that illustrates this problem. Currently, the last assertion of this test is failing when this issue is present.

I think we can fix this problem by returning Void.TYPE instead of a null for this case.
In this way, the conversion is regarded as a success and there will be no entry in the conversion-misses table.

So, I am also attaching the modiefied CxfPayloadConverter class that can handle this test case.

",,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,"29/Apr/11 15:52;ay;camel-cxf-20110429-patch.txt;https://issues.apache.org/jira/secure/attachment/12477806/camel-cxf-20110429-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14102,,,Fri Apr 29 18:56:21 UTC 2011,,,,,,,Patch Available,,,,"0|i01xpz:",9232,,,,,,,,,,,,,,,,,,,,"29/Apr/11 15:52;ay;M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java
M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/converter/CxfPayloadConverterTest.java;;;","29/Apr/11 18:34;davsclaus;Thanks Aki for looking into this. Yeah those fallback converters is a bit tricky. You need to return Void.TYPE if you cannot convert it at this given time, but you may be able to do that later.;;;","29/Apr/11 18:56;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Archtype components don't import into eclipse without errors,CAMEL-3915,12505798,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,29/Apr/11 15:17,29/Apr/11 15:57,14/Jul/23 05:45,29/Apr/11 15:57,,,,,,,,,,,,,2.8.0,,,,tooling,,,,0,,,,,,,,,"

The archetypes are importing into eclipse as ""java"" projects which is trying to invoke the java compiler on them. That's generating issues with the templates and such.  They should have the ""javanature"" turned off on them so they are pretty much just plain projects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/11 15:17;dkulp;archtype-eclipse.patch;https://issues.apache.org/jira/secure/attachment/12477801/archtype-eclipse.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14092,,,Fri Apr 29 15:57:14 UTC 2011,,,,,,,Patch Available,,,,"0|i01xpj:",9230,,,,,,,,,,,,,,,,,,,,"29/Apr/11 15:57;hadrian;Patch applied with thanks to Dan Kulp. Looking for more from you :).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms listener can cause class cast exception if message body type changed during routing,CAMEL-3913,12505767,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Apr/11 08:59,25/Oct/11 11:36,14/Jul/23 05:45,29/Apr/11 10:38,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/error-handling-on-Http-POST-from-ActiveMQ-to-PHP-application-td4347185.html

",,mikek753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14090,,,2011-04-29 08:59:14.0,,,,,,,,,,,"0|i01xp3:",9228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer URI parameters ignored after Route Restart,CAMEL-3912,12505748,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rrojas-chariot,rrojas-chariot,29/Apr/11 03:39,25/Oct/11 11:35,14/Jul/23 05:45,29/Apr/11 18:44,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"The URI parameters for a consumer appear to be ignored or disappear when the route where this consumer defined gets restarted.
One example could be JPA query passed in the URI and is used to filter the results from the consumer.
The attached test case shows this.
Look at the Readme.txt, camel-context.xml, and JPARouteRestartTest class for more information.

Also, took a stab at fixing the problem and provided a patch with a possible solution. I ran the unit tests after that change and all passed. :)","JDK ""1.6.0_24"", Apache Maven 2.2.1, MAC OS X 10.6.7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/11 14:23;rrojas-chariot;jpa-route-start-stop-testcase.tar.gz;https://issues.apache.org/jira/secure/attachment/12477760/jpa-route-start-stop-testcase.tar.gz","29/Apr/11 14:24;rrojas-chariot;uri-params-ignored-route-restart-patch.txt;https://issues.apache.org/jira/secure/attachment/12477761/uri-params-ignored-route-restart-patch.txt",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14088,,,Fri Apr 29 23:13:13 UTC 2011,,,,,,,Patch Available,,,,"0|i01xov:",9227,,,,,,,,,,,,,,,,,,,,"29/Apr/11 06:50;davsclaus;Robert can you re-attach your patches and make sure to [x] in grant license to Apache. We can only accept patches at Apache if you have done that, so there wont be a copyright issue. 

You can tell if there is an Apache feather icon next to the files.;;;","29/Apr/11 14:23;rrojas-chariot;Sure, no problem. Let me know if you need me to do anything or have any questions. ;;;","29/Apr/11 18:44;davsclaus;Thanks for the patch. I added an unit test in camel-core instead of the jpa test you provided.;;;","29/Apr/11 23:13;rrojas-chariot;Sure, any time.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Configuring any Byte type header via Spring XML constant would throw java.lang.ClassCastException,CAMEL-3909,12505340,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acodapella,acodapella,27/Apr/11 18:49,25/Oct/11 11:36,14/Jul/23 05:45,12/May/11 06:56,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,camel-smpp,,,,0,,,,,,,,,"Configuring any Byte type header via Spring XML constant would throw java.lang.ClassCastException

{code:xml}
<camel:setHeader headerName=""CamelSmppDestAddrTon"">
  <camel:constant>0</camel:constant>
</camel:setHeader>
{code}

java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Byte
	at org.apache.camel.component.smpp.SmppBinding.createSubmitSm(SmppBinding.java:105)
	at org.apache.camel.component.smpp.SmppProducer.process(SmppProducer.java:128)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.messageReceived(MinaConsumer.java:117)
	at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:570)
	at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
	at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
	at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
	at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
	at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/11 21:51;acodapella;CAMEL-3909-patch.txt;https://issues.apache.org/jira/secure/attachment/12477845/CAMEL-3909-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14077,,,Thu May 12 06:56:49 UTC 2011,,,,,,,Patch Available,,,,"0|i01xo7:",9224,,,,,,,,,,,,,,,,,,,,"27/Apr/11 18:51;acodapella;the work around is to set it via URI, to avoid the (Byte) casting

{code:xml}
<camel:to uri=""smpp://user@host:1234password=78910&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=producer&amp;destAddrTon=0"" />
{code}

{code:title=org.apache.camel.component.smpp.SmppBinding.java|borderStyle=solid}
//  public SubmitSm createSubmitSm(Exchange exchange) throws UnsupportedEncodingException

if (in.getHeaders().containsKey(DEST_ADDR_TON)) {
 submitSm.setDestAddrTon((Byte) in.getHeader(DEST_ADDR_TON));
 } else {
 submitSm.setDestAddrTon(configuration.getDestAddrTon());
}

{code}

;;;","27/Apr/11 20:36;davsclaus;Use the Camel type converter so it should be something like this:
{code}
submitSm.setDestAddrTon(in.getHeader(DEST_ADDR_TON, byte.class));
{code};;;","27/Apr/11 20:39;davsclaus;Christian can you take a look at this? There may be other options set having similar issue?;;;","12/May/11 06:56;davsclaus;I have fixed this. As well I spotted an issue in the disconnect logic, not setting the session instance to null.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Setting fault message after doing JMS request/reply fail propagating the fault flag,CAMEL-3902,12505181,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Apr/11 11:14,25/Oct/11 11:36,14/Jul/23 05:45,26/Apr/11 12:11,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,0,,,,,,,,,"If you do something like

from X
  inOut JMS
  setFaultBody

Then the fault flag is not propagated back when the consumer on X sees the result.
The issue is in JmsMessage which overrides copyFrom, from DefaultMessage. And it dont propagate the fault flag.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14086,,,2011-04-26 11:14:01.0,,,,,,,,,,,"0|i01xmn:",9217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Syslog Converter Not Selected Automatically,CAMEL-3890,12504938,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rrojas-chariot,rrojas-chariot,22/Apr/11 00:54,22/Nov/11 09:57,14/Jul/23 05:45,29/Apr/11 22:34,2.7.1,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,,,,"When creating a route that sends text data from a file to the Camel Syslog unmarshal data format, the following error is returned.
Looking at the org.apache.camel.component.syslog.Rfc3164SyslogConverter reveals that the @Converter annotation is missing at the class level.
The attached test case illustrates the problem. With modifications to the pom.xml to point to the modified version of the camel-syslog the test works. See the comment: CHANGE TO POINT TO MODIFIED CAMEL-SYSLOG

org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value <165>Aug  4 05:34:00 mymachine myproc[10]: %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK #\n         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n         Conveyer1=OK, Conveyer2=OK # %%

	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:143)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.ExchangeHelper.convertToMandatoryType(ExchangeHelper.java:142)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.syslog.Rfc3164SyslogDataFormat.marshal(Rfc3164SyslogDataFormat.java:29)[camel-syslog-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)[camel-core-2.7.1.jar:2.7.1]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_24]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_24]
	at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
","Mac OS X 10.6.7, JDK 1.6, Maven 3.0.2, Camel 2.7.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Apr/11 19:53;rrojas-chariot;camel-syslog-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12477836/camel-syslog-test.tar.gz","29/Apr/11 19:52;rrojas-chariot;camel-syslog.patch;https://issues.apache.org/jira/secure/attachment/12477835/camel-syslog.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14101,,,Tue Nov 22 09:57:02 UTC 2011,,,,,,,Patch Available,,,,"0|i01xj3:",9201,,,,,,,,,,,,,,,,,,,,"29/Apr/11 19:02;davsclaus;Roberto do you mind re-attaching the patches and make sure to [x] about the Apache license. Then we should be able to get the patch into the trunk;;;","29/Apr/11 19:55;rrojas-chariot;Sure, no problem. I'll keep it in mind to apply the ASF license when upload those files.;;;","29/Apr/11 22:34;joed;Fixed in revision 

1097978, Thanks Roberto!;;;","29/Apr/11 23:11;rrojas-chariot;Sure, any time.;;;","21/Nov/11 01:41;geemang;Has this been validated in 2.8.2 I get the same error. Hopefully something I'm doing wrong...

{code}
from(""direct:syslog"")
  .convertBodyTo(java.lang.String.class)
  .marshal().syslog()
  .to(""netty:udp://localhost:10514"")
{code}

2011-11-20 19:36:34,462 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1) from(direct://syslog) -->  <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
2011-11-20 19:36:34,469 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1)  --> Marshal[org.apache.camel.model.dataformat.SyslogDataFormat@66e8791] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
| Error 2011-11-20 19:36:34,618 [main] ERROR processor.DefaultErrorHandler  - Failed delivery for exchangeId: ID-martin-gees-macbook-pro-local-50036-1321839379898-1-1. Exhausted after delivery attempt: 1 caught: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
Message: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
   Line | Method
->> 140 | mandatoryConvertTo       in org.apache.camel.impl.converter.BaseTypeConverterRegistry
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat
|    58 | process                  in org.apache.camel.processor.MarshalProcessor
|    50 | process . . . . . . . .  in org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|   162 | process . . . . . . . .  in org.apache.camel.processor.interceptor.TraceInterceptor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    50 | process . . . . . . . .  in org.apache.camel.processor.interceptor.Debug$1
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   318 | processErrorHandler . .  in org.apache.camel.processor.RedeliveryErrorHandler
|   209 | process                  in     ''
|   306 | process . . . . . . . .  in org.apache.camel.processor.DefaultChannel
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   116 | process . . . . . . . .  in org.apache.camel.processor.Pipeline
|    79 | process                  in     ''
|   132 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    69 | process . . . . . . . .  in org.apache.camel.management.InstrumentationProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    61 | process . . . . . . . .  in org.apache.camel.component.direct.DirectProducer
|   102 | process                  in org.apache.camel.processor.UnitOfWorkProcessor
|   104 | process . . . . . . . .  in org.apache.camel.util.AsyncProcessorHelper
|    85 | process                  in org.apache.camel.processor.DelegateAsyncProcessor
|    63 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProducer
|   351 | doInProducer             in org.apache.camel.impl.ProducerCache$2
|   323 | doInProducer . . . . . . in     ''
|   222 | doInProducer             in org.apache.camel.impl.ProducerCache
|   323 | sendExchange . . . . . . in     ''
|   168 | send                     in     ''
|   110 | send . . . . . . . . . . in org.apache.camel.impl.DefaultProducerTemplate
|   123 | sendBody                 in     ''
|   341 | sendBody . . . . . . . . in     ''
|    49 | testSendingSyslogMessage in com.icsynergy.idr.SyslogRoutingTests
|    45 | runReflectiveCall . . .  in org.junit.runners.model.FrameworkMethod$1
|    15 | run                      in org.junit.internal.runners.model.ReflectiveCallable
|    42 | invokeExplosively . . .  in org.junit.runners.model.FrameworkMethod
|    20 | evaluate                 in org.junit.internal.runners.statements.InvokeMethod
|    28 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunBefores
|    30 | evaluate                 in org.junit.internal.runners.statements.RunAfters
|   263 | runLeaf . . . . . . . .  in org.junit.runners.ParentRunner
|    68 | runChild                 in org.junit.runners.BlockJUnit4ClassRunner
|    47 | runChild . . . . . . . . in     ''
|   231 | run                      in org.junit.runners.ParentRunner$3
|    60 | schedule . . . . . . . . in org.junit.runners.ParentRunner$1
|   229 | runChildren              in org.junit.runners.ParentRunner
|    50 | access$000 . . . . . . . in     ''
|   222 | evaluate                 in org.junit.runners.ParentRunner$2
|    30 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunAfters
|   300 | run                      in org.junit.runners.ParentRunner
|   128 | runChild . . . . . . . . in org.junit.runners.Suite
|    24 | runChild                 in     ''
|   231 | run . . . . . . . . . .  in org.junit.runners.ParentRunner$3
|    60 | schedule                 in org.junit.runners.ParentRunner$1
|   229 | runChildren . . . . . .  in org.junit.runners.ParentRunner
|    50 | access$000               in     ''
|   222 | evaluate . . . . . . . . in org.junit.runners.ParentRunner$2
|   300 | run                      in org.junit.runners.ParentRunner
|   285 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure4
|   243 | doCall                   in _GrailsTest_groovy$_run_closure2
|   190 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure1_closure21
|   179 | doCall                   in _GrailsTest_groovy$_run_closure1
^    82 | doCall . . . . . . . . . in TestApp$_run_closure1
Caused by RuntimeCamelException: java.nio.BufferUnderflowException
->> 834 | invokeMethod             in org.apache.camel.util.ObjectHelper
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|    50 | convertTo                in org.apache.camel.impl.converter.StaticMethodTypeConverter
|   182 | doConvertTo . . . . . .  in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|    47 | doConvertTo              in org.apache.camel.impl.converter.LazyLoadingTypeConverter
|   138 | mandatoryConvertTo . . . in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat;;;","22/Nov/11 09:57;davsclaus;Martin what runtime do you use? eg do you run Camel in ServiceMix, Karaf, Tomcat etc?
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Move the org.apache.camel.language.SpEL.java into camel-core to avoid export package org.apache.camel.language twice in camel-spring,CAMEL-3885,12504789,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Apr/11 13:43,20/Apr/11 14:11,14/Jul/23 05:45,20/Apr/11 14:11,2.7.0,2.7.1,,,,,,,,,,,2.8.0,,,,camel-core,camel-spring,,,0,,,,,,,,,"camel-spring and camel-core both export the org.apache.camel.language package which will cause some truble when OSGi resolve the bundle which imports this package. 
As the SpEL.java is not import any spring related class, an simple fixing is moving the SpEL.java into camel-core.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14128,,,Wed Apr 20 14:11:01 UTC 2011,,,,,,,,,,,"0|i01xhz:",9196,,,,,,,,,,,,,,,,,,,,"20/Apr/11 14:11;njiang;Applied patch into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring doesn't import into eclipse,CAMEL-3881,12504714,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,19/Apr/11 21:04,20/Apr/11 03:04,14/Jul/23 05:45,20/Apr/11 03:04,2.8.0,,,,,,,,,,,,2.8.0,,,,camel-spring,,,,0,,,,,,,,,"
camel-spring no longer imports into eclipse as OsgiSpringCamelContext references OsgiTypeConverter which implements ServiceTrackerCustomizer.   The org.osgi.compendium jar isn't a dependency of camel-spring so the class cannot be found and eclipse gives an error.

Simple fix is to add a dependency to the pom:

{code:xml}
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.compendium</artifactId>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>
{code}



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14108,,,Wed Apr 20 03:04:42 UTC 2011,,,,,,,Patch Available,,,,"0|i01xh3:",9192,,,,,,,,,,,,,,,,,,,,"20/Apr/11 03:04;hadrian;Dan, thanks for reporting and for the patch.
;;;","20/Apr/11 03:04;hadrian;Patch applied in r1095258 with thanks to Dan Kulp.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stopping a route should not stop context scoped error handler,CAMEL-3878,12504482,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Apr/11 11:19,02/May/13 02:29,14/Jul/23 05:45,17/Apr/11 14:27,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"When stopping a route using .stopRoute from CamelContext or JMX etc. then the error handler should not be stopped if its a context scoped error handler, as it would be re-used.

We should defer stopping those resources till Camel is shutting down.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3534,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14168,,,2011-04-17 11:19:42.0,,,,,,,,,,,"0|i01xgf:",9189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AdviceWith - Spring XML using a context scoped error handler causes adviceWith to not work,CAMEL-3877,12504473,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Apr/11 08:44,25/Oct/11 11:35,14/Jul/23 05:45,17/Apr/11 09:58,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,camel-spring,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Error-Handling-with-Spring-XML-tp4296920p4296920.html

I have reproduced the issue. Its only when you use a context scoped error handler. It works in all other situations. And only for XML DSL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14152,,,2011-04-17 08:44:31.0,,,,,,,,,,,"0|i01xg7:",9188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-xmpp - Should stop and clean session, so hot-deploy works ",CAMEL-3873,12504446,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Apr/11 12:45,25/Oct/11 11:35,14/Jul/23 05:45,16/Apr/11 12:47,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-xmpp,,,,0,,,,,,,,,"See this stacktrace


{code}
14:10:55,806 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 72 - org.springframework.osgi.extender - 1.2.0 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=qbus-camel-osgi, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://articleRoute@localhost?password=******&room=mechatron%40conference.mw-pc]. Reason: java.lang.NullPointerException
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:362)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:93)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.startProducer(ProducerCache.java:124)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:429)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:847)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:86)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:893)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:250)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1800)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1726)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1528)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1420)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1321)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1299)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_14]
Caused by: java.lang.NullPointerException
	at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:957)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:904)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1415)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:76)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:360)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	... 65 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14116,,,2011-04-16 12:45:18.0,,,,,,,,,,,"0|i01xfb:",9184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cache- ehcache cache replication data not distributed across nodes,CAMEL-3862,12504287,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nannou9,nannou9,14/Apr/11 16:51,25/Oct/11 11:36,14/Jul/23 05:45,16/Apr/11 12:21,2.6.0,2.7.0,2.7.1,,,,,,,,,,2.7.2,2.8.0,,,camel-cache,,,,0,camel-cache,cluster,jms,replication,,,,,Cache replication across cluster nodes doesn't work using jms or rmi replication.,Apache ServiceMix 4.3.1-fuse-01-09 and newest snapshots,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,"16/Apr/11 11:06;nannou9;camel-cache.replication.patch;https://issues.apache.org/jira/secure/attachment/12476522/camel-cache.replication.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14118,,,Sat Apr 16 12:21:20 UTC 2011,,,,,,,,,,,"0|i01xcv:",9173,,,,,,,,,,,,,,,,,,,,"14/Apr/11 16:51;nannou9;I have already solved the problem. I will be happy to see my fix in 2.8 version :). Will post a patch soon as it needs to be polished. 
Another step closer to bring camel-cache to java- clustered world :)

BTW. I guess i am the very first person who get cache cluster to work using camel-cache component as this bug was not reported/fixed before :);;;","16/Apr/11 11:04;nannou9;Replication doesn't work before, because a second parameter of put,remove methods which was kind of ignore- listeners was set to true.

What was fixed:
- now you can replicate your cache across nodes using listeners

Of course it was tested in real life and using standard test cases;;;","16/Apr/11 11:06;nannou9;Did not granted license to ASF before, so uploading again :)

Note that end lines are unix- like;;;","16/Apr/11 12:21;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-web - Cannot browse endpoints if messages was consumed from jms queue,CAMEL-3861,12504242,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Apr/11 08:54,25/Oct/11 11:35,14/Jul/23 05:45,14/Apr/11 09:38,2.7.0,,,,,,,,,,,,2.7.2,2.8.0,,,camel-web,,,,0,,,,,,,,,"You get a NPE if you brows the endpoint.

Caused by: 
java.lang.NullPointerException
        at org.apache.camel.web.resources.$_scalate_$ExchangeResource_index_ssp$$anonfun$$_scalate_$render$2.apply(ExchangeResource.index.ssp.scala:46)
        at org.apache.camel.web.resources.$_scalate_$ExchangeResource_index_ssp$$anonfun$$_scalate_$render$2.apply(ExchangeResource.index.ssp.scala:40)
        at scala.collection.Iterator$class.foreach(Iterator.scala:631)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14112,,,2011-04-14 08:54:27.0,,,,,,,,,,,"0|i01xcn:",9172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel cxfrs producer should support the configure the query parameter from the Exchange.HTTP_QUERY message header,CAMEL-3860,12504224,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Apr/11 04:31,25/Oct/11 11:36,14/Jul/23 05:45,15/Apr/11 09:33,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,,,,"As CXFRS producer can't deal with the HttpQuery from the Exchange.HTTP_QUERY message header, the camel-cxfrs router can't route the http get request with query rightly.
Here is the mail thread[1] which talks about it.

[1]http://camel.465427.n5.nabble.com/CXF-RS-QueryParam-and-HeaderParam-tp4301808p4301808.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14211,,,2011-04-14 04:31:48.0,,,,,,,,,,,"0|i01xcf:",9171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.quartz package export not versioned Quartz component,CAMEL-3856,12504134,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davaleri,davaleri,13/Apr/11 04:14,25/Oct/11 11:35,14/Jul/23 05:45,13/Apr/11 13:23,2.7.0,2.7.1,,,,,,,,,,,2.7.2,2.8.0,,,camel-quartz,,,,0,,,,,,,,,"The Quartz packaging for OSGi uses the following configuration:

{code:xml}
<camel.osgi.export.pkg>
org.apache.camel.component.quartz.*,
org.apache.camel.routepolicy.quartz.*
</camel.osgi.export.pkg>
{code}

This gets concatenated as ${camel.osgi.export.pkg};${camel.osgi.version} and then fed to the Felix Bundle Plug-in.  The issue I am seeing is that only the second package gets versioned in the bundle manifest.  org.apache.camel.component.quartz is exported without a version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Apr/11 04:17;davaleri;CAMEL-3856.patch;https://issues.apache.org/jira/secure/attachment/12476211/CAMEL-3856.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14189,,,Wed Apr 13 13:28:39 UTC 2011,,,,,,,Patch Available,,,,"0|i01xbj:",9167,,,,,,,,,,,,,,,,,,,,"13/Apr/11 04:17;davaleri;Attaching patch.  Tested against OSGi integration tests.  A selection of Karaf integration tests from trunk all fail on my machine so I am assuming that there is an underlying cause not related to this patch.;;;","13/Apr/11 13:23;davsclaus;Thanks for the patch. I have applied it.

The quartz osgi test passes.;;;","13/Apr/11 13:25;davsclaus;But it just shows how we are not there yet with osgi. It would be nice if the felix maven bundle plugin would be able to detect this. Or just being able to generate better metadata out of the box.

I will check the other camel components using multiple packages as they may have the same problem.;;;","13/Apr/11 13:28;davsclaus;Bah we need to ignore the routepolicy package as well.

The rule of thumb would be to only use one ""root"" package for components, thats easier then.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter uses a to low configured aggregation task thread pool,CAMEL-3850,12503817,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Apr/11 09:04,25/Oct/11 11:36,14/Jul/23 05:45,09/Apr/11 11:09,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-split-aggregate-parallelProcessing-hiccup-td4288393.html#a4292610

We should increase the thread pool to use a thread pool profile which has 10 threads by default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14200,,,2011-04-09 09:04:23.0,,,,,,,,,,,"0|i01xa7:",9161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OSGi - No possibility to enable ehcache clustering as: ehcache.xml is ignored and there is no possibility to set cacheManagerFactory described camel-cache docs,CAMEL-3849,12503740,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nannou9,nannou9,08/Apr/11 14:13,25/Oct/11 11:35,14/Jul/23 05:45,11/Apr/11 08:19,2.6.0,2.7.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-cache,,,,0,cacheManagerFactory,camel-cache,cluster,clustering,osgi,,,,"This bug is caused by more than one problem as:
1. camel-cache bundle provides ehcache.xml config which is ignored so then default ehcache-failsafe.xml is taken by ehcache bundle.
2. according to camel-cache docs there is a way to set cacheManagerFactory but it seems to be not implemented as
a) default CacheManagerFactory instance is created when when CacheComponent is instantiated.
b) setter method: public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) is used just nowhere.
c) there is no suitable filed in class CacheConfiguration

All above problems cause camel-cache to be not able to work in java- clustered world as default failsafe config. is really failsafe- w/o clustering.
",Apache ServiceMix 4.3.1-fuse-01-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Apr/11 07:45;nannou9;camel-cache.patch;https://issues.apache.org/jira/secure/attachment/12475984/camel-cache.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14106,,,Mon Apr 11 09:45:35 UTC 2011,,,,,,,,,,,"0|i01x9z:",9160,,,,,,,,,,,,,,,,,,,,"08/Apr/11 14:29;davsclaus;Please dont add any estimates. They just distract.;;;","08/Apr/11 23:43;joed;Just a question, but have you tried attaching the ehcache.xml file you want as a fragment bundle?
;;;","08/Apr/11 23:46;joed;Also, cacheManagerFactory is used as an option via ?cacheManagerFactory=theBean in the registry (spring/jndi/simple registry) so that method is used via the normal field resolution in Camel as far as I can see.;;;","09/Apr/11 00:35;nannou9;Haven't tried with fragment. But have tried with ?cacheMana... but it faild.
This is because: c) there is no suitable filed in class CacheConfiguration

I have already fixed the problem.
Will upload the patch file soon.;;;","10/Apr/11 07:53;davsclaus;Piotr can you upload your patch so we can get it fixed?;;;","10/Apr/11 21:21;nannou9;Fixed loading ehcache.xml and fixed setting cacheManagerFactory property via endpoint URI;;;","10/Apr/11 21:26;nannou9;Sorry for late answer. I was off for longer time.

Patch is fully working. Tested using junit and a real world servicemix 4.3.1 scenerio.
Patch was made to version apache-camel-2.6.0-fuse-00-00.

What was fixed:
* ehcache.xml file in now loaded, no more ""No configuration found. Configuring ehcache from ehcache-failsafe.xml"" logs.
* ability to set property cacheManagerFactory via spring bean ref. using ""#""

What's new:
* test case testing setting cacheManagerFactory via spring ref.

Have a FUN!

Greetings
Piotr;;;","10/Apr/11 21:43;hadrian;Piotr,

Thanks for the patch. We do not close an issue until the patch is reviewed, applied and documentation updated. The reason is that if it's marked closed, we may not realized that there is still work to be done for an issue.;;;","11/Apr/11 07:02;nannou9;Thanks Hadrian,

i will remember about that in future. This is my 1st patch to apache. But I'm sure not the last one :).
According to the patch, i haven't got much time (spent just few hours most on analyzing camel source code) but i did my best to make just a little, easy to review changes.;;;","11/Apr/11 07:45;nannou9;changed eols to Windows;;;","11/Apr/11 08:19;davsclaus;Added osgi unit test as well.;;;","11/Apr/11 08:39;nannou9;I was thinking about adding an osgi test. But was not sure what testing framework you are using. Pax Exam maybe?- this is the one i use.;;;","11/Apr/11 08:43;davsclaus;Yeah see
https://svn.apache.org/repos/asf/camel/trunk/tests/

We have karaf = just testing a bundle can be deployed
And then osgi = full unit test with pax-exam;;;","11/Apr/11 08:54;nannou9;Thanks! Great! Now i know where to look for tests and where to place them :);;;","11/Apr/11 09:23;nannou9;I see there is only a basic osgi test. Do you want me to write additional osgi test (or extend your) that will test my patch? Then include it to the patch file? It could check is the ehcache.xml file really loaded instead of ehcache-failsafe.xml. As you know loading ehcache.xml is not so obvious with osgi classloaders so it could be helpful, especially for future changes.;;;","11/Apr/11 09:39;davsclaus;Yeah we love more osgi tests, so please fell free to copy the unit test file and do a 2nd test. I like when we have multiple tests. Some are simple and others more complicated.

Then create a new ticket and attach the patch / unit test, and remember to [x] in grant license to apache.;;;","11/Apr/11 09:45;nannou9;Great! Sound like a fun! Will do that soon :);;;",,,,,,,,,,,,,
Adding type converter should clear misses map for the given type,CAMEL-3847,12503722,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Apr/11 10:19,25/Oct/11 11:36,14/Jul/23 05:45,08/Apr/11 11:25,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/addTypeConverter-does-not-clear-misses-in-BaseTypeConverterRegistry-tp4288871p4288871.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14171,,,2011-04-08 10:19:47.0,,,,,,,,,,,"0|i01x9j:",9158,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keys in cxf's protocol_headers must be handled case-insenstively,CAMEL-3842,12503631,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,07/Apr/11 12:45,25/Oct/11 11:36,14/Jul/23 05:45,17/Apr/11 15:21,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"There was an issue in CXF, where the protocol headers were not stored in a case-insensitive manor. This lead to the problem of not being able to find some headers or finding some headers in duplicates at some CXF interceptors. This issue was fixed in CXF-3367 for CXF 2.3.4 and 2.4. It was fixed by not using the plain HashMap for storing the protocol headers. 

Currently (in trunk), camel-cxf's CxfHeaderHelper and DefaultCxfBinding seem to be using HashMap to create a new CXF's message instance and this can lead to the same issue.

In CXF, this issue was fixed by replacing the usage of HashMap<String, List<String>)() with that of TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER). This approach was chosen over an alternative approach that converts the header names into lowercase and store them a hashmap because there are typically a small number of entries and using a binary search in TreeMap seems appropriate in this use case.

I have prepared a patch for a similar change in camel-cxf's CxfHeaderHelper and DefaultCxfBinding and also prepared some unit test cases to verify the behavior.

Please take a look at this suggestion.

Thanks.
Regards, Aki
",,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,"07/Apr/11 13:12;ay;patch-trunk-20110407.zip;https://issues.apache.org/jira/secure/attachment/12475708/patch-trunk-20110407.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14135,,,Sun Apr 17 15:21:13 UTC 2011,,,,,,,Patch Available,,,,"0|i01x8f:",9153,,,,,,,,,,,,,,,,,,,,"07/Apr/11 13:12;ay;the zip file including the following changes
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
M       trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfHeaderHelper.java

A       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/DefaultCxfBindingTest.java
M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/util/CxfMessageHelperTest.java
;;;","17/Apr/11 15:21;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cache osgi metadata isn't correct,CAMEL-3835,12503366,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ffang,ffang,05/Apr/11 05:14,25/Oct/11 11:35,14/Jul/23 05:45,05/Apr/11 08:02,,,,,,,,,,,,,2.7.1,2.8.0,,,camel-cache,,,,0,,,,,,,,,"1. export package org.apache.camel.component.cache doesn't has version
2. both import and export org.apache.camel.processor.cache package",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Apr/11 05:25;ffang;CAMEL-3835.patch;https://issues.apache.org/jira/secure/attachment/12475459/CAMEL-3835.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14190,,,Tue Apr 05 08:02:07 UTC 2011,,,,,,,,,,,"0|i01x6v:",9146,,,,,,,,,,,,,,,,,,,,"05/Apr/11 08:02;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SmppProducer sends incorrect data_coding parameter,CAMEL-3834,12503340,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,sgansemer@mfoundry.com,sgansemer@mfoundry.com,04/Apr/11 20:37,25/Oct/11 11:35,14/Jul/23 05:45,30/May/11 22:04,2.7.0,,,,,,,,,,,,2.7.2,2.8.0,,,camel-smpp,,,,0,,,,,,,,,"The dataCoding parameter on the SMPP uri allows for a value of 0,4, or 8.  Our aggregator expects the data_coding parameter on the SMPP request from the SmppProducer to be 0=SMSC Default Alphabet.  However, when 0, 4, or 8 is specified for the dataCoding parameter, the actual value sent on the smpp request is 1, 5, or 9.  It appears the MessageClass.Class1 on the GeneralDataCoding object in SmppProducer is masking an additional 1 to the byte value.

It seems the dataCoding parameter should allow you to specify the actual value that is needed as defined by the SMPP Protocol specification.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14193,,,Tue Apr 12 17:48:45 UTC 2011,,,,,,,,,,,"0|i01x6n:",9145,,,,,,,,,,,,,,,,,,,,"07/Apr/11 20:19;muellerc;Steve, what exactly is the problem?
SmppProducer use the Alphabet [1] class from jsmpp to set the data coding parameter. The Alphabet enum defines the values 0x00, 0x04 and 0x08. We use the Alphabet.valueOf(dataCoding) method to set the dataCoding. If you try to set a different value than 0x00, 0x04 and 0x08, you will get an IllegalArgumentException. So, everything looks good for me. Where do you receive the 1, 5 and 9 value?

[1] http://code.google.com/p/jsmpp/source/browse/tags/2.1.0/src/java/main/org/jsmpp/bean/Alphabet.java

Christian;;;","11/Apr/11 13:08;sgansemer@mfoundry.com;The value that ends up being sent on the smpp request for the data_coding byte ends up being 1,5, or 9. I believe this is caused because the GeneralDataCoding object that is used by the SmppProducer is using a MessageClass.CLASS1 which ends up masking an additional bit onto the value.  

In my case, our back end aggregator expects the data_coding value to be 0 which I can't specify because this extra bit is being set.;;;","12/Apr/11 17:48;muellerc;Steve, I think I fixed this issue. I applied a patch which uses the same configuration as in the jsmpp [SimpleSubmitExample|http://code.google.com/p/jsmpp/source/browse/tags/2.1.0/src/java/examples/org/jsmpp/examples/SimpleSubmitExample.java] for the data coding.
Could you please test this fix with the latest code from trunk or with the snapshot version from tomorrow?

Christian;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms default cache level should be CACHE_NONE when transaction is enabled,CAMEL-3828,12503160,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnodet,gnodet,01/Apr/11 18:40,08/Apr/11 14:01,14/Jul/23 05:45,08/Apr/11 14:01,2.6.0,2.7.0,,,,,,,,,,,2.8.0,,,,camel-jms,,,,0,,,,,,,,,"I lost a huge amount of time chasing the problem as the default value just screw the whole transaction (the session is created outside the transaction and cached, so usually not enlisted in the tx).
",,anoordover,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14183,,,Fri Apr 08 11:41:57 UTC 2011,,,,,,,,,,,"0|i01x5b:",9139,,,,,,,,,,,,,,,,,,,,"08/Apr/11 11:41;davsclaus;Yeah we should use CACHE_AUTO by default as spring-jms will pickup CACHE_NONE if a transaction manager has been specified, and CACHE_CONSUMER otherwise.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hawtdb - File store keeps growing if index are unique,CAMEL-3826,12503100,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Apr/11 08:08,25/Oct/11 11:36,14/Jul/23 05:45,11/Apr/11 14:16,2.6.0,2.7.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-hawtdb,,,,0,,,,,,,,,"If you use unique correlation expressions for aggregator with hawtdb, but uses timeout for completion, the indexes are properly removed using the hawtdb API. But the file store keeps growing.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14107,,,Mon Apr 11 14:16:52 UTC 2011,,,,,,,,,,,"0|i01x4v:",9137,,,,,,,,,,,,,,,,,,,,"11/Apr/11 14:16;davsclaus;Fixed thanks to help from Hiram.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException in DefaultHttpBinding,CAMEL-3816,12502668,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,29/Mar/11 06:54,30/Mar/11 08:52,14/Jul/23 05:45,30/Mar/11 08:52,2.4.0,2.6.0,,,,,,,,,,,2.8.0,,,,camel-http,,,,0,,,,,,,,,"See nabble
http://servicemix.396122.n5.nabble.com/http-post-to-camel-jetty-smx-4-3-ArrayIndexOutOfBoundsException-tp4258334p4258334.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14176,,,Wed Mar 30 07:44:39 UTC 2011,,,,,,,,,,,"0|i01x2n:",9127,,,,,,,,,,,,,,,,,,,,"29/Mar/11 06:56;davsclaus;The end user is using curl to do a HTTP POST which seems to not send any HTTP headers at all, which often is unlikely and thus not seen this issue before.;;;","29/Mar/11 06:57;davsclaus;Remember to fix this in camel-http4 as well.;;;","30/Mar/11 07:44;njiang;I just did some test on the issue, and found out it was caused by the request message was not right. 

As the Http Request was sending with application/x-www-form-urlencoded, which means the message body should be some string like ""file.name=file.xml"", but with the ""curl -v -d file.xml 'http://localhost:4443/to2-service/sendMessage"", the message body became ""file.xml"", and DefaultHttpBinding throw the exception like that.

And it has nothing to do with the Null Http header.

I just did a quick fix for in Camel trunk, please check out latest Camel 2.8-SNAPSHOT to verify the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo not reset when new bean looked up,CAMEL-3812,12502543,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,maximilien,maximilien,28/Mar/11 07:26,25/Oct/11 11:36,14/Jul/23 05:45,28/Mar/11 09:38,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"In camel-bean, when a bean is looked-up and it is not the same bean as the previous one beanInfo has to be reset.
This is done in getBean() method of org.apache.camel.component.bean.RegistryBean but the test is placed after setting bean=value so beanInfo is never reset :

if (value != bean) { 
    bean = value; 
    processor = null; 
    if (!ObjectHelper.equal(ObjectHelper.type(bean), ObjectHelper.type(value))) { 
        beanInfo = null; 
    }",,maximilien,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14188,,,Mon Mar 28 09:38:22 UTC 2011,,,,,,,,,,,"0|i01x1r:",9123,,,,,,,,,,,,,,,,,,,,"28/Mar/11 07:50;davsclaus;See nabble
http://camel.465427.n5.nabble.com/camel-ejb-problem-td4258807.html;;;","28/Mar/11 09:38;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"At payload model, set soap body element to header uncorrectly",CAMEL-3810,12502491,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ext2xhb,ext2xhb,27/Mar/11 05:47,11/Mar/15 13:31,14/Jul/23 05:45,01/Apr/11 11:17,2.4.0,,,,,,,,,,,,2.7.1,2.8.0,,,camel-cxf,,,,0,,,,,,,,,"if wsdl's operatin's has multi parts and the parts use same xml-element. Camel CXF Payload model, will mixup the xml element in body with header",,githubbot,hanson2010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Mar/11 05:53;ext2xhb;CXFMultiPartTest.java;https://issues.apache.org/jira/secure/attachment/12474723/CXFMultiPartTest.java","27/Mar/11 05:53;ext2xhb;MultiPartInvokeImpl.java;https://issues.apache.org/jira/secure/attachment/12474724/MultiPartInvokeImpl.java","27/Mar/11 05:53;ext2xhb;MultiPartTest.wsdl;https://issues.apache.org/jira/secure/attachment/12474721/MultiPartTest.wsdl","27/Mar/11 05:53;ext2xhb;MultiPartTest.xml;https://issues.apache.org/jira/secure/attachment/12474722/MultiPartTest.xml",,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14162,,,Wed Mar 11 13:31:06 UTC 2015,,,,,,,,,,,"0|i01x1b:",9121,Unit Test Broken,,,,,,,,,,,,,,,,,,,"27/Mar/11 05:53;ext2xhb; MultiPartTest.wsdl: is the wsdl, which will cause the bug;
MultiPartTest.xml: is the spring configured route.
CXFMultiPartTest.java: is the test case which failed.
MultiPartInvokeImpl.java: is service's simple ogical ;;;","27/Mar/11 06:01;ext2xhb;Here is SOAP Message show how Camel CXF mix-up the body with header

Following is soap sent by the original client to camel
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE></soap:Header><soap:Body><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Body></soap:Envelope>

Following is the soap routed by camel to service(which mixed up)
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Header><soap:Body /></soap:Envelope>
;;;","27/Mar/11 06:06;ext2xhb;here is my temporary solution for Camel

CxfEndpoint.CxfClientImpl.setParameters(){
........
/*
for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) 
{
	if (elements.size() > i && partInfo.getConcreteName().getLocalPart()
                        .equals(elements.get(i).getLocalName()))
	content.put(partInfo, elements.get(i++));
}
*/
//boi.getInput().getMessageParts())  will return the message-part which have been binding to soap body; 
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	content.put(partInfo, elements.get(i++));
}

}

DefaultCxfBinding.getResponsePayloadList(...) {
....
/*
 for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {
	if (elements.size() > i) {
		answer.put(partInfo, elements.get(i++));
    }
 }
*/
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	answer.put(partInfo, elements.get(i++));
}  
.......
}  

;;;","27/Mar/11 06:10;ext2xhb;some description for my temporary solution:
To find which message part  matched with body elemens, we must rely on the WSDL Binding informations, not rely on wsdl portType's operation information.;;;","27/Mar/11 10:26;davsclaus;Have you tried with Camel 2.7 release?;;;","27/Mar/11 13:05;ext2xhb;I haven't tried on Camel 2.7. but I have review the source code of cxf component of Camel2.7. 
As source code of Camel 2.7 which deal with message partis , is just like as Camel 2.4, so this test will also failed on camel 2.7.;;;","01/Apr/11 08:52;njiang;Applied patch with thanks to ext2.

In the CXF SoapBindingFactory.createBindingInfo method, you will see the message parts of the soap body will be store in the BindingOperationInfo's input and output message. The patch shows a way to help us tell which message part is below to message body.

BTW, the change of DefaultCxfBinding.getResponsePayloadList should be
{code}
DefaultCxfBinding.getResponsePayloadList(...) {
...
-- for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {

++ for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) { 
...
{code};;;","22/Feb/15 00:23;githubbot;GitHub user oombadness opened a pull request:

    https://github.com/apache/camel/pull/403

    CAMEL-3810 - RabbitMQ - Adding ability to requeue message

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.  Messages that are in Fault / Exception state and have the header rabbitmq.REQUEUE set to the boolean true will be rejected and have the requeue flag set to true, otherwise the message will be rejected with the requeue flag set to false (as is current behavior).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oombadness/camel CAMEL-8310

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/403.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #403
    
----
commit 20050c12682752cd13e93187f902a4aa9f2a42e7
Author: Andrew Austin <andrew.austin@wgu.edu>
Date:   2015-02-22T00:16:24Z

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.

----
;;;","11/Mar/15 13:31;githubbot;Github user oombadness closed the pull request at:

    https://github.com/apache/camel/pull/403
;;;",,,,,,,,,,,,,,,,,,,,,
Restlet Producer to add query to request URI based on runtime information (e.g. Camel header),CAMEL-3808,12502407,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,wtam,wtam,wtam,25/Mar/11 19:12,25/Oct/11 11:35,14/Jul/23 05:45,25/Mar/11 20:13,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-restlet,,,,0,,,,,,,,,"Currently, custom queries to be sent in the request URI must be defined in the route.  It is more usable to set the request URI queries at runtime. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14147,,,Fri Mar 25 20:28:22 UTC 2011,,,,,,,,,,,"0|i01x0v:",9119,,,,,,,,,,,,,,,,,,,,"25/Mar/11 20:13;wtam;Committed revision 1085543.
;;;","25/Mar/11 20:28;wtam;It looks we have documented this feature (setting CamelHttpQuery header to add query to request URI).  So, it is possibly a regression bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAPAction HTTP header value not copied correctly to from CXF message to Camel message header,CAMEL-3806,12502380,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tmielke,tmielke,25/Mar/11 14:06,25/Oct/11 11:35,14/Jul/23 05:45,29/Mar/11 03:17,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-cxf,,,,1,CXF,header,HTTP,SOAPAction,,,,,"When using camel-cxf consumer endpoint with PAYLOAD data format, the SoapActionInInterceptor correctly strips off any double quotes surrounding the SOAPAction header value, e.g:
{code}
SOAPAction: ""http://apache.org/hello_world_soap_http/greetMe""
{code}

and then sets this header on the message again:

{code:title=SoapActionInInterceptor.java}
public void handleMessage(SoapMessage message) throws Fault {
        String action = getSoapAction(message);
        if (!StringUtils.isEmpty(action)) {
            getAndSetOperation(message, action);
        }
    }
{code}

After the execution of getAndSetOperation(message, action), there are two SOAPAction headers set on the message. The original SOAPAction header value (with surrounding quotes) is part of the org.apache.cxf.message.Message.PROTOCOL_HEADERS. In addition the getAndSetOperation() method also adds 
SOAPAction=http://apache.org/hello_world_soap_http/greetMe header (without surrounding quotes). 

Later in org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(), when the CXF message headers get copied to the Camel message, it only retrieves the org.apache.cxf.message.Message.PROTOCOL_HEADERS:

{code}
Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS);
{code}

The SOAPAction header in PROTOCOL_HEADERS wasn't changed by the SoapActionInInterceptor and hence still has enclosed double quotes. These headers then get copied to the Camel In message headers. The header that was set by the SoapActionInInterceptor SOAPAction=http://apache.org/hello_world_soap_http/greetMe does not get copied!

If later in a Camel route a custom Camel Processor tries to resolve this SOAPAction header, it gets the the value with surrounding double quotes, but these should actually have been stripped off. 

This behavior is a bug.

","camel-cxf, CXF consumer endpoint with PAYLOAD data format ",mikek753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Mar/11 14:07;tmielke;testcase.zip;https://issues.apache.org/jira/secure/attachment/12474616/testcase.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14175,,,Tue Mar 29 03:17:06 UTC 2011,,,,,,,,,,,"0|i01x0f:",9117,,,,,,,,,,,,,,,,,,,,"25/Mar/11 14:07;tmielke;Attaching JUnit test. It currently fails but will succeed if the SOAPAction header value is not enclosed by double quotes.;;;","25/Mar/11 14:08;tmielke;I see two solutions:

1) copy all CXF headers into Camel in message headers:

{code:title=org.apache.camel.component.cxf.DefaultCxfBinding.java}
// pseudo code
protected void propagateHeadersFromCxfToCamel(Message cxfMessage,
            org.apache.camel.Message camelMessage, Exchange exchange) {
        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.getHeaders()
        Map<String, Object> camelHeaders = camelMessage.getHeaders();
        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage);
...
{code}

This should also copy the SOAPAction header that the SoapActionInInterceptor added to the message.

2) Have the SoapActionInInterceptor strip off the surrounding double quote from the SOAPAction header (which it does already) and replace the SOAPAction header in the already populated org.apache.cxf.message.Message.PROTOCOL_HEADERS with the modified (stripped off) value. 
That way org.apache.camel.component.cxf.DefaultCxfBinding.java does not need to be changed. 

I personally kinda prefer the second option.
;;;","27/Mar/11 10:29;davsclaus;Willem can you take a look? We should strip off double quotes from the value IMHO;;;","27/Mar/11 10:30;davsclaus;Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?;;;","28/Mar/11 07:51;njiang;Because SOAP11 and SOAP12 send the SOAPAction with different protocol:
SOAP11 uses SOAPAction=""xxx"" http header,
SOAP12 uses action=""xxx""  as a part of content-type
If we want to provides the user with consistence result, we need to store the result with key of ""SOAPAction"" for common using, CXF SOAPActionInterceptor takes care of it and strip the ""/"""" for using. In camel-cxf we copy the PROTOCOL_HEADER directly into the Camel message header, if the user using SOAP11 binding, the SOAPAction is also a part of the PROTOOL_HEADER. If the user want to get the message header of SOAPAction, he will get.
If the user using SOAP12 binding, he can't get any value with the message header of SOAPAction.

SO my suggestion is we just put the SOAPAction header from CXF message into camel message, in this way the user can get this kind of the message header directly from the camel message whatever the soap binding is.

Willem;;;","28/Mar/11 08:18;tmielke;{quote}
Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?
{quote}
According to the [SOAP 1.1 spec|http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383528], the SOAPAction header value needs to be enclosed by double quotes. Here an extract of the grammar defining the SOAPAction header:

{quote}
soapaction    = ""SOAPAction"" "":"" [ <""> URI-reference <""> ]
URI-reference = <as defined in RFC 2396 [4]>
{quote}

CXF also generates double quotes around the SOAPAction header value. ;;;","29/Mar/11 03:17;njiang;Committed a patch to fix this issue.
For the Message data formate, as the SOAPActionInInterceptor is not installed, the use can still get the SOAPAction header with double quotes surrounding.;;;",,,,,,,,,,,,,,,,,,,,,,,
Setting null body on JmsMessage should not re-initialize JMS message again,CAMEL-3805,12502372,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Mar/11 11:34,25/Oct/11 11:36,14/Jul/23 05:45,25/Mar/11 20:26,,,,,,,,,,,,,2.7.3,2.8.0,,,camel-jms,,,,1,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/choice-when-check-BodyType-null-Body-null-tp4259599p4259599.html

We should use a boolean to keep track if the message body has been explict set to null using setBody(null) to avoid re-initialize the message body on subsequent accesses",,chengt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14169,,,2011-03-25 11:34:30.0,,,,,,,,,,,"0|i01x07:",9116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language and OGNL does not support dots in key name,CAMEL-3802,12502268,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,cmoulliard,cmoulliard,24/Mar/11 09:37,25/Oct/11 11:36,14/Jul/23 05:45,25/Mar/11 08:04,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"It is not possible in a simple expression to have access to a key of a Map when the key name contains dots

ex : <simple>${body[com.fusesource.webinars.persistence.model.Incident]}</simple>
where com.fusesource.webinars.persistence.model.Incident is the key name

Camel generates the error :

{code}
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: [com not found on bean: [{com.fusesource.webinars.persistence.model.Incident=com.fusesource.webinars.persistence.model.Incident@7fec0e19[
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,68711,,,Thu Mar 24 21:26:24 UTC 2011,,,,,,,,,,,"0|i01wzj:",9113,,,,,,,,,,,,,,,,,,,,"24/Mar/11 21:26;cmoulliard;I suggest that we add a test to check if the first character of the body is a bracket. If this is the case, than we should no remove the dots from the key value

code to be changed

{code}
    public static Expression headersOgnlExpression(final String ognl) {
        return new ExpressionAdapter() {
            public Object evaluate(Exchange exchange) {
                // try with full name first
                Object header = exchange.getIn().getHeader(ognl);
                if (header != null) {
                    return header;
                }

                // split into first name
                List<String> methods = OgnlHelper.splitOgnl(ognl);
                // remove any OGNL operators so we got the pure key name
                String key = OgnlHelper.removeOperators(methods.get(0));

                header = exchange.getIn().getHeader(key);
                if (header == null) {
                    return null;
                }
                // the remainder is the rest of the ognl without the key
                String remainder = ObjectHelper.after(ognl, key);
                return new MethodCallExpression(header, remainder).evaluate(exchange);
            }

            @Override
            public String toString() {
                return ""headerOgnl("" + ognl + "")"";
            }
        };
    }
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven eclipse goal failure,CAMEL-3799,12502126,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,23/Mar/11 02:46,20/Apr/11 19:48,14/Jul/23 05:45,20/Apr/11 18:28,2.7.0,,,,,,,,,,,,2.8.0,,,,tooling,,,,0,,,,,,,,,"The error is:

{code}
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Request to merge when 'filtering' is not identical. Original=resource src/main/resources: output=target/classes, include=[], exclude=[**/*.java], test=false, filtering=false, merging with=resource src/main/resources: output=target/classes, include=[**/archetype-metadata.xml], exclude=[**/*.java], test=false, filtering=true
{code}

and it seems to be resolved in the upcoming maven-eclipse-plugin:2.9.0 (see [MECLIPSE-576|http://jira.codehaus.org/browse/MECLIPSE-576]). An update to the new release of the plugin, once available, should resolve this.

",,,,,,,,,,,,,,,,,,,CAMEL-3837,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14114,,,Wed Apr 20 19:48:59 UTC 2011,,,,,,,,,,,"0|i01wyv:",9110,,,,,,,,,,,,,,,,,,,,"20/Apr/11 11:48;davsclaus;Hadrian which Maven version are you using?

And end user reported it failed for him with 3.0.2. But after upgrading to 3.0.3 it worked
http://camel.465427.n5.nabble.com/Camel-release-2-8-td4305340.html#a4315571

PS: I wonder if we should consider having Maven 3.0.3+ being minimim for building Camel? But we can take that discussion on the @dev forum.;;;","20/Apr/11 14:00;bvahdat;Claus,

I'm really sorry for the irritation I caused, as my answer to you on the user forum was just too speedy! Unfortunately I've got still exactly the same issue having the following setup:

D:\Data\eclipse-ws\camel-trunk>mvn --version
Apache Maven 3.0.3 (r1075438; 2011-02-28 18:31:09+0100)
Maven home: P:\My Documents\dev\env\apache-maven-3.0.3\bin\..
Java version: 1.6.0_24, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_24\jre
Default locale: de_CH, platform encoding: Cp1252
OS name: ""windows xp"", version: ""5.1"", arch: ""x86"", family: ""windows""

So I tell you how I try to build and maybe you can tell me where I'm going wrong. I've checked out the camel trunk under ""D:\Data\eclipse-ws\camel-trunk"" and go through the following steps on this directory:

D:\Data\eclipse-ws\camel-trunk>mvn clean // just to make it sure that I've got no ""dead body"" hidden somewhere under the ""target"" directories

That goes well. Then as it's described @ http://camel.apache.org/building.html I do

set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=512m

That goes also well. Please note that I set the maximal heap size to just 512 and not 1024, as otherwise maven will fail to start (will not be able to allocate that much heap space on my machine). Then I do:

D:\Data\eclipse-ws\camel-trunk>mvn install -Pfastinstall

That goes smooth as well, but with that I just skipped the execution of the unit tests, so afterwards I simply do

D:\Data\eclipse-ws\camel-trunk>mvn test

That still fails as I've already reported here:

http://camel.465427.n5.nabble.com/Camel-release-2-8-tt4305340.html#a4305861#none

When I also try to do:

D:\Data\eclipse-ws\camel-trunk>mvn eclipse:clean eclipse:eclipse

It also fails with the effect I have already reported here:

https://issues.apache.org/jira/browse/CAMEL-3837

So I simply wonder how it's possible that all the steps above work on your box!!!

Again please accept my apologies for my speedy reply on the user forum...;;;","20/Apr/11 14:07;davsclaus;Babak use the mailing list for discussing your build issue.

This JIRA ticket is about the mvn eclipse:eclipse goal failing due to an Eclipse bug.;;;","20/Apr/11 14:10;davsclaus;Hmmm can people not just use an older version of the maven eclipse plugin? I recall you can add some parameters on the cmd line to specify the version. So maybe try with eclipse plugin v2.6 or 2.7 or whatever an older version that used to work.;;;","20/Apr/11 14:13;hadrian;Some update on this. This is a known maven eclipse plugin issue. I think I have a workaround for this. Will get it in today or tomorrow if I don't run into other issues.;;;","20/Apr/11 14:23;hadrian;@Claus, the particular issue that caused this bug is fixed, but there is no released version of the plugin that contains the fix yet.;;;","20/Apr/11 17:05;dkulp;
There is an easy fix for this that would work today.   In the pom, change to:

{code:xml}
<resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource> 
      <resource>
        <directory>src/main/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
{code}

and just move the archetype-metadata.xml file into src/main/resources-filtered.  CXF does this in several places and actually has src/main/resources-filtered defined in the parent pom to make it easy.



;;;","20/Apr/11 17:06;dkulp;
BTW:  I'd submit a patch but file moves in an svn patch don't usually work very well.;;;","20/Apr/11 18:28;hadrian;Fixed. Thanks to Dan Kulp for providing a solution.;;;","20/Apr/11 19:48;bvahdat;That now also works for me (mvn eclipse:eclipse). Thanks for the fix.;;;",,,,,,,,,,,,,,,,,,,,
Web Console: NPE when browsing routes with no description,CAMEL-3797,12502042,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,dejanb,dejanb,22/Mar/11 12:42,25/Oct/11 11:36,14/Jul/23 05:45,22/Mar/11 12:56,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,,,,,0,,,,,,,,,"When some of the routes does not have a description NPE will be thrown, because of the code

{code}${i.getDescription.getText}{code}

To prevent it, just use

{code}${i.getDescriptionText}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/11 12:43;dejanb;patch;https://issues.apache.org/jira/secure/attachment/12474290/patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14182,,,Tue Mar 22 12:59:31 UTC 2011,,,,,,,Patch Available,,,,"0|i01wyf:",9108,,,,,,,,,,,,,,,,,,,,"22/Mar/11 12:56;janstey;Hey Dejan,

Committed your patch in http://svn.apache.org/viewvc?view=revision&revision=1084150. Thanks for the fix!

Cheers,
Jon;;;","22/Mar/11 12:59;dejanb;Thanks Jon!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.concurrent.RejectedExecutionException using interceptSendToEndpoint,CAMEL-3795,12501970,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,21/Mar/11 18:48,25/Oct/11 11:36,14/Jul/23 05:45,30/Mar/11 16:14,2.7.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,in some circumstances interceptSendToEndpoint in conjunction with recipientList is running in exception. this seems to be the case when an http endpoint is sent in the recipient list after having processed and ftp in the previous exchange.,,crive,danielbevenius,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Mar/11 18:50;crive;InterceptSendToEndpointException.java;https://issues.apache.org/jira/secure/attachment/12474211/InterceptSendToEndpointException.java","30/Mar/11 09:28;crive;InterceptSendToEndpointExecutionException.java;https://issues.apache.org/jira/secure/attachment/12474956/InterceptSendToEndpointExecutionException.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14177,,,Mon Apr 04 15:17:56 UTC 2011,,,,,,,,,,,"0|i01wxz:",9106,,,,,,,,,,,,,,,,,,,,"21/Mar/11 18:50;crive;JUnit test showing the exception;;;","27/Mar/11 10:54;davsclaus;Please remember to add link to discussion using nabble
http://camel.465427.n5.nabble.com/java-util-concurrent-RejectedExecutionException-using-interceptSendToEndpoint-td3425179.html;;;","27/Mar/11 10:56;davsclaus;The problem is that the end user is using a custom thread pool where the default strategy is to reject executing tasks, when the thread pool do not have any free threads. And thus you get the rejected exception.

Not a problem in Camel.;;;","29/Mar/11 08:36;crive;The unit test uses mock up endpoint which does not show the wrong behaviour. 
The test attached to the ticket does not make use of custom thread pool: 

from(""direct:start"").recipientList(header(InterceptSendToEndpointException.recipientListHeaderName).tokenize("","")).to(""mock:end"");;;;","29/Mar/11 17:35;davsclaus;Can you attach the unit test which fails for you.
The attached test case works just fine! In fact it doesn't use any thread pool at all.;;;","30/Mar/11 09:28;crive;Attaching another unit test showing the exception, the difference with previous one is that it is using real endpoints.;;;","30/Mar/11 14:15;davsclaus;Okay I found the culprint. The lifecycle of the interceptor was affected by ftp producer as it was a pooled resource and thus its lifecycle is unusual. ;;;","30/Mar/11 16:14;davsclaus;It should be fixed now;;;","04/Apr/11 15:17;crive;I am still experiencing the same issue with the latest test attached. I am using camel 2.8-snapshot;;;",,,,,,,,,,,,,,,,,,,,,
Camel should reset the stream cache if the useOriginalInMessage option is true,CAMEL-3791,12501926,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,21/Mar/11 07:58,28/Mar/11 00:18,14/Jul/23 05:45,28/Mar/11 00:18,2.5.0,2.6.0,2.7.0,,,,,,,,,,2.8.0,,,,camel-core,,,,0,,,,,,,,,"{code}
--- src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(revision 1083672)
+++ src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(working copy)
@@ -591,18 +591,23 @@
         // is the a failure processor to process the Exchange
         if (processor != null) {
 
-            // reset cached streams so they can be read again
-            MessageHelper.resetStreamCache(exchange.getIn());
-
             // prepare original IN body if it should be moved instead of current body
             if (data.useOriginalInMessage) {
                 if (log.isTraceEnabled()) {
                     log.trace(""Using the original IN message instead of current"");
                 }
                 Message original = exchange.getUnitOfWork().getOriginalInMessage();
                 exchange.setIn(original);
             }

+            // reset cached streams so they can be read again
+            MessageHelper.resetStreamCache(exchange.getIn());
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14186,,,Mon Mar 28 00:18:00 UTC 2011,,,,,,,,,,,"0|i01wx3:",9102,,,,,,,,,,,,,,,,,,,,"27/Mar/11 10:37;davsclaus;Have you committed this? If so mark this ticket as resolved.;;;","28/Mar/11 00:18;njiang;The patch is already committed into the trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy is not thread-safe,CAMEL-3789,12501793,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,maria.iracheta@gmail.com,maria.iracheta@gmail.com,18/Mar/11 14:09,25/Oct/11 11:36,14/Jul/23 05:45,27/Mar/11 10:25,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"MarkerFileExclusiveReadLockStrategy is not thread-safe. When I run  a File endpoint with more than one thread the MarkerFileExclusiveReadLockStrategy only deletes the last file to start being processed. 

The MarkerFileExclusiveReadLockStrategy uses global variables: 
private File lock; 
private String lockFileName; 
and gives them values on the acquireExclusiveReadLock method. When another thread calls the releaseExclusiveReadLock method it uses the global variables to delete the locked file. That means that if another thread came and called the acquireExclusiveReadLock it would have changed the values on the global variables. 

If lock and lockFileName are not global variables the problem seems to disappear and I can a multithreaded File endpoint and not locked file is left undeleted. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/11 14:33;maria.iracheta@gmail.com;FileOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12474298/FileOperations.java.patch","22/Mar/11 14:38;maria.iracheta@gmail.com;GenericFileDeleteProcessStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474300/GenericFileDeleteProcessStrategy.java.patch","22/Mar/11 14:38;maria.iracheta@gmail.com;GenericFileRenameProcessStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474299/GenericFileRenameProcessStrategy.java.patch","22/Mar/11 12:45;maria.iracheta@gmail.com;MarkerFileExclusiveReadLockStrategy.java.patch;https://issues.apache.org/jira/secure/attachment/12474291/MarkerFileExclusiveReadLockStrategy.java.patch","22/Mar/11 14:40;maria.iracheta@gmail.com;MarkerFileExclusiveReadLockStrategyTest.java;https://issues.apache.org/jira/secure/attachment/12474301/MarkerFileExclusiveReadLockStrategyTest.java",,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14157,,,Sun Mar 27 10:25:22 UTC 2011,,,,,,,Patch Available,,,,"0|i01wwn:",9100,,,,,,,,,,,,,,,,,,,,"22/Mar/11 12:45;maria.iracheta@gmail.com;This readLockStrategy was not thread-safe. It was unlocking the last File that had been locked. Now each of the methods recreates the lock file based on the input attributes;;;","22/Mar/11 14:33;maria.iracheta@gmail.com;The method buildDirectory was not Thread Safe at the point of trying to create the directory.;;;","22/Mar/11 14:38;maria.iracheta@gmail.com;The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.;;;","22/Mar/11 14:38;maria.iracheta@gmail.com;The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.;;;","22/Mar/11 14:40;maria.iracheta@gmail.com;Junit class to test the MarkerFileExclusiveReadLockStrategy in a multithreaded scenario;;;","27/Mar/11 10:25;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,
HTTP Producer seems to send an empty body request on redelivery when the original request fails due to a connection timeout,CAMEL-3788,12501723,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akarpe,akarpe,17/Mar/11 19:47,25/Oct/11 11:36,14/Jul/23 05:45,21/Mar/11 10:13,2.0-M2,2.6.0,,,,,,,,,,,2.7.3,2.8.0,,,camel-http,,,,0,,,,,,,,,"Camel HTTP Producer is throwing an exception when it encounters a connection timeout. However instead of preserving the original message it is treating it processing the exception output. When connected to a redelivery meachanism, this results in an exception message being sent as input to the HTTP Consumer. The older versions of Camel behaved differently on read timeout. In Camel 1.x, in a read timeout, the Exception is thrown and the input message to the producer is passed through the pipeline. Now there is a difference: An exception is thrown and the output of the HTTP Producer is passed through the pipeline. 

Need to study why and what changed since Camel 1.x and ensure that the above does not happen.

For more details, please check out the following nabble entry

http://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-td3741631.html#a3897410

Cheers,

Ashwin...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14154,,,Mon Mar 21 10:13:45 UTC 2011,,,,,,,,,,,"0|i01wwf:",9099,,,,,,,,,,,,,,,,,,,,"21/Mar/11 10:13;njiang;Committed the patch into camel-http and camel-http4.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer drops authentification parameters.,CAMEL-3779,12501095,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ben@micromata.de,ben@micromata.de,11/Mar/11 01:36,09/Jun/11 08:48,14/Jul/23 05:45,09/Jun/11 08:48,2.6.0,,,,,,,,,,,,2.8.0,,,,camel-http,,,,0,,,,,,,,,"Hi, 

I run into the following problem with Camel 2.6.0:

An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.
The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.
These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.

The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.
The Java Bean Splitter produces URI like: 
{code}http4://download.acme.com/file_1.txt?username=foo&password=baa{code}

Here's the setup:
{code}
<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <method bean=""prepareDownLoadUri"" method=""parseIndexHtml"" />
   <setHeader headerName=""CamelHttpMethod"">
     <constant>GET</constant>
   </setHeader> 
   <setHeader headerName=""CamelHttpUri"">
     <simple>${body}</simple>
   </setHeader>
   <to uri=""http4://download.acme.com/"" />
   <to uri=""bean:saveFileProcessor"" />
</route>
<bean id=""prepareDownLoadUri"" class=""com.acme.PrepareDownLoadUri"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />
{code}
The injection of the URIs from the Splitter into the HttpProducer, works quite well. 
I debugged into the HttpProducer and it seems, that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with  the authentification settings from the URI.

At first, the queryString is extracted from the Exchange-Header (if provided)
{code:title=HttpProducer.createMethod(), line 273}
String url = HttpHelper.createURL(exchange, getEndpoint());
{code}
The url string contains the URI produces by the splitter including the authentification parameters: 
{code}http4://download.acme.com/file_1.txt?username=foo&password=baa{code}

Then the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273)  
and other parameters from the Exchange Header: 
{code:title=HttpProducer.createMethod(), lines 285-300}
        // is a query string provided in the endpoint URI or in a header (header overrules endpoint)
        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);
        if (queryString == null) {
            queryString = getEndpoint().getHttpUri().getRawQuery();
        }

        StringBuilder builder = new StringBuilder(uri.getScheme()).append(""://"").append(uri.getHost());

        if (uri.getPort() != -1) {
            builder.append("":"").append(uri.getPort());
        }

        if (uri.getPath() != null) {
            builder.append(uri.getRawPath());
        }

        if (queryString != null) {
            builder.append('?');
            builder.append(queryString);
        }

        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());
{code}

The problem is, in the assembling of the new URI, the authentification parameters are dropped.  

One possible solution could be: 
# check for authentification parameters in the url (line 273) and extract them.
# build the credentials, AuthScheme and provide it to the underlying http client.

thanks in advance,
ben


",,rkettelerij,,,,,,,,,,,,,,,,,,,,CAMEL-3780,,CAMEL-4056,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,13975,,,Thu Jun 09 08:48:46 UTC 2011,,,,,,,,,,,"0|i01wuf:",9090,,,,,,,,,,,,,,,,,,,,"11/Mar/11 04:57;davsclaus;Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?

Can you try with camel-http instead of camel-http4 component?
And try with latest code from trunk, eg Camel 2.7.

And please use the mailing list first to get help, and then only later open a JIRA ticket, as stated here:
http://camel.apache.org/support

;;;","11/Mar/11 11:07;ben@micromata.de;Hi Claus, 

thanks for the fast reply. 

{quote}
Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?
{quote}

The username and password parameters are needed for BASIC authentication via the http client. 

{quote}
Can you try with camel-http instead of camel-http4 component?
{quote}
Yes, with the same result: no authentification scheme is provided with the request. 

Is there any way to provide this information into the http client? 
What do you think about provide auth. information via addional header information from the Exchange?
The HttpProducer extract the information and set the auth. scheme in the http client.
In the style of the HttpConfiguration of camel-http, we could introduce the following header parameters:
||Name||Description||
|Exchange.HTTP_AUTHTIFICATION_SCHEMA| Basic, Digest, Ntml|
|Exchange.HTTP_USENAME | the username for the HTTP request |
|Exchange.HTTP_PASSWORD| the password for the HTTP request|
|Exchange.HTTP_Domain| for NTML authentication |
|Exchange.HTTP_AUTH_HOST| Optional host for NTML authentication |
|Exchange.HTTP_PROXY_HOST | the proxy to use |
|Exchange.HTTP_PROXY_AUTH_METHOD | the auth. scheme for the proxy |
|Exchange.HTTP_PROXY_USERNAME | the username for the proxy |
|Exchange.HTTP_PROXY_PASSWORD |the password for the proxy |

If you like, I can implement such a solution. 

thanks,
ben 
;;;","11/Mar/11 11:16;davsclaus;The camel-http4 component is not as good as the camel-http. Especially the http client 4.0.x was not so good. We recommend to use camel-http until Http Client 4.1.x shapes up. Which it seems to be doing.

The auth parameters for camel-http is slighly different as you would see
http://camel.apache.org/http

eg you should use authUsername, authPassword and authMethod.

In fact camel-http4 should use the *same* options as camel-http so its easy to migrate. I can see from the codebase that camel-http4 hasn't done that for some parameters so I will create a JIRA.

See the unit test HttpBasicAuthTest in camel-jetty source code for examples.

;;;","11/Mar/11 12:25;ben@micromata.de;Hi Claus, 

thanks for your prompt answer. 
In the meantime, I found the following work around: I wrote a small ProcessorBean
that simply creates the HTTP Authorization Header  and stores HTTP Authorization Header
in the message header: 
{code}
final String userPassword = ""foo"" + "":"" + ""bar"";
final byte[] encodeBase64 = Base64.encodeBase64(userPassword.getBytes());
final String encoding = new String(encodeBase64);
final String authParameter = ""Basic "" + encoding;
msg.setHeader(""Authorization"", authParameter);{code}

This solution works with camel-http and camel-http4, because both implementations of the HttpProducer,
the Header information of the message is passed through request, see HttpProducer.java from camel-http4 in the lines 87-93:
{code}
        // propagate headers as HTTP headers
        for (Map.Entry<String, Object> entry : in.getHeaders().entrySet()) {
            String headerValue = in.getHeader(entry.getKey(), String.class);
            if (strategy != null && !strategy.applyFilterToCamelHeaders(entry.getKey(), headerValue, exchange)) {
                method.addRequestHeader(entry.getKey(), headerValue);
            }
        }
{code}

The route is now:
{code}
<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <split>
     <method bean=""prepareDownLoadUriSplitter"" method=""parseIndexHtml"" />
     <!-- provide the HTTP auth. scheme -->
     <to uri=""authorizeWebRequestProcessor"" />
     <to uri=""http://download.acme.com/"" />
     <to uri=""bean:saveFileProcessor"" />
   </split>
</route>
<bean id=""prepareDownLoadUriSplitter"" class=""com.acme.PrepareDownLoadUriSplitter"" />
<bean id=""authorizeWebRequestProcessor"" class=""com.acme.AuthorizeWebRequestProcessor"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />
{code}

best regards,
ben


;;;","12/Mar/11 10:09;davsclaus;Ben you talk about a splitter? But the route you post don't have any splitter. How is that?;;;","12/Mar/11 10:10;davsclaus;This problem would be in both camel-http and camel-http4;;;","12/Mar/11 18:15;ben@micromata.de;Hi Claus, 

Sorry, I'd corrected the above route.

best regards,
ben;;;","05/Jun/11 22:40;rkettelerij;@ben. I've been debugging {{camel-http}}(*) and found no issues with authentication credentials being dropped. I did however encountered a case where the credentials aren't sent to the server because the server doesn't explicitly asks for it. This may very well apply to your situation as well. I've filled CAMEL-4056 to improve on this.

(*) I haven't checked {{camel-http4}}, but you reported that the issue also applied to {{camel-http}} so I've limited my search to {{camel-http}} for now.;;;","09/Jun/11 08:29;njiang;Hi Ben,

Can you try the latest Camel 2.8-SNAPSHOT which has the patch of CAMEL-3780 ?
I think the option of username=foo&password=baa will not be dropped any more, because camel-http4 will not treat those options as its endpoint options.

;;;","09/Jun/11 08:48;njiang;I just added a test for it in camel trunk.
It looks like the problem has be fixed.;;;",,,,,,,,,,,,,,,,,,,,
Mail component issue with starttls option,CAMEL-3769,12500780,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ahiebl,ahiebl,08/Mar/11 16:08,25/Oct/11 11:35,14/Jul/23 05:45,09/Mar/11 09:22,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-mail,,,,0,,,,,,,,,"The problem occurs when I read from a pop3 endpoint and send to an smtp endpoint in the same camel context with the mail.pop3.starttls.enable=true and mail.smtp.starttls.enable=true options.

Required Java options for starttls are set:
-Djavax.net.ssl.trustStore=D:\test\xxx.jks
-Djavax.net.ssl.trustStorePassword=yyy


When I only configure one of either route, everything works fine. When I configure both, I get the following exception:

AUTH LOGIN
C: STAT
530 Must issue STARTTLS command first
STARTTLS
S: +OK 0 0
C: NOOP
220 begin TLS negotiation
S: +OK
C: RSET
S: +OK
C: QUIT
AUTH LOGIN
S: +OK POP3 server closing connection
503 wrong state for AUTH command
2011-03-03 10:08:36,797 [foo] ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID-E6500-ahi-61446-1299143304838-0-2. Exhausted after delivery attempt: 1 caught: org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command

org.springframework.mail.MailAuthenticationException: Authentication failed; nested exception is javax.mail.AuthenticationFailedException: 503 wrong state for AUTH command

        at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:392)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:340)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:355)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:344)[org.springframework.context.support-3.0.5.RELEASE.jar:3.0.5.RELEASE]
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:44)[camel-mail-2.6.0.jar:2.6.0]
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.RoutePolicyProcessor.process(RoutePolicyProcessor.java:75)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:104)[camel-core-2.6.0.jar:2.6.0]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)[camel-core-2.6.0.jar:2.6.0]
        at java.util.TimerThread.mainLoop(Unknown Source)[:1.5.0_22]
        at java.util.TimerThread.run(Unknown Source)[:1.5.0_22]



The problem seems to be in org.apache.camel.component.mail.MailConfiguration.createJavaMailSender() where it uses the same mail session for both connection; see Session.getDefaultInstance below

        if (session != null) {
            answer.setSession(session);
        } else {
            // use our authenticator that does no live user interaction but returns the already configured username and password
            Session session;
            try {
                session = Session.getDefaultInstance(answer.getJavaMailProperties(), getAuthenticator());
            } catch (Throwable t) {
                // fallback as default instance may not be allowed on some systems
                session = Session.getInstance(answer.getJavaMailProperties(), getAuthenticator());
            }
            answer.setSession(session);
        }


This is because getDefaultInstance creates a Session object the first time it is called. Then it caches that Session and returns it for all subsequent calls. It also ignores the new and different properties for the second route.


See also http://camel.465427.n5.nabble.com/Mail-component-with-starttls-td3409505.html 
",,ahiebl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Mar/11 17:02;ahiebl;MailConfiguration.java;https://issues.apache.org/jira/secure/attachment/12473006/MailConfiguration.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14165,,,Wed Mar 09 09:22:07 UTC 2011,,,,,,,Patch Available,,,,"0|i01ws7:",9080,,,,,,,,,,,,,,,,,,,,"08/Mar/11 16:11;ahiebl;I suggest to change this section of the code to always use getInstance instead of getDefaultInstance.

{code}
        if (session != null) {
            answer.setSession(session);
        } else {
            // use our authenticator that does no live user interaction but returns the already configured username and password
            Session session = Session.getInstance(answer.getJavaMailProperties(), getAuthenticator());
            // sets the debug mode of the underlying mail framework
            session.setDebug(debugMode);
            answer.setSession(session);
        }
{code};;;","08/Mar/11 16:16;ahiebl;At least in my tests, the debugMode=true did not work either. I think this is beacuse 

{code}
// sets the debug mode of the underlying mail framework
answer.getSession().setDebug(debugMode);
{code}

creates a Session and sets the debug option for this session object. In the next few line the JavaMailProperties are set

{code}
answer.setJavaMailProperties()
{code}

which actually resets the Session object in JavaMailSenderImpl answer to null.
;;;","08/Mar/11 17:02;ahiebl;Changes are highlighted with kex word ""BUG FIX"";;;","09/Mar/11 09:22;davsclaus;trunk: 1079708.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
ManagementNamingStrategy - Should normalize ObjectName to avoid using illegal characters,CAMEL-3760,12500536,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/11 08:43,25/Oct/11 11:35,14/Jul/23 05:45,06/Mar/11 10:08,,,,,,,,,,,,,2.7.0,,,,camel-core,jmx,,,0,,,,,,,,,"For example when using JMS in the loanbroaker example. There us a colon in the JMS queue name which is invalid char in JMX.

2011-03-06 08:26:55,859 [main           ] WARN  ManagedManagementStrategy      - Cannot check whether the managed object is registered. This exception will be ignored.
javax.management.MalformedObjectNameException: Could not create ObjectName from: org.apache.camel:context=vesta.apache.org/camel-1,type=threadpools,name=JmsReplyManagerTimeoutChecker[queue2:parallelLoanRequestQueue]. Reason: javax.management.MalformedObjectNameException: Invalid character ':' in value part of property
	at org.apache.camel.management.DefaultManagementNamingStrategy.createObjectName(DefaultManagementNamingStrategy.java:315)[camel-core-2.7-SNAPSHOT.jar:2.7-SNAPSHOT]


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76190,,,Sun Mar 06 10:08:28 UTC 2011,,,,,,,,,,,"0|i01wq7:",9071,,,,,,,,,,,,,,,,,,,,"06/Mar/11 10:03;davsclaus;We just needed to quote the thread pool name which wasn't done.;;;","06/Mar/11 10:08;davsclaus;trunk: 1078442.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auto mock endpoints should strip parameters to avoid confusing when accessing the mocked endpoint,CAMEL-3757,12500510,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/11 12:29,25/Oct/11 11:35,14/Jul/23 05:45,05/Mar/11 14:20,2.7.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"If you use mocking existing endpoints, which is detailed here
http://camel.apache.org/mock.html

We should stip parameters of the mocked endpoint, eg {{file:xxxx?noop=true}}. eg so the mocked endpoint would be {{mock:file:xxxx}} without any of the parameters.

Otherwise the mock endpoint expects those parameters is part of the mock endpoint and will fail creating the mock endpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76191,,,Sat Mar 05 14:20:09 UTC 2011,,,,,,,,,,,"0|i01wpj:",9068,,,,,,,,,,,,,,,,,,,,"05/Mar/11 14:20;davsclaus;trunk: 1078291.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Relax check for clientId must be set when using durable subscribers,CAMEL-3753,12500499,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/11 07:36,25/Oct/11 11:35,14/Jul/23 05:45,05/Mar/11 07:59,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jms,,,,0,,,,,,,,,"Using durable subscribers, the clientId must be configured as well, so the broker knows who the client is.
However some JMS providers mandates the client id to be configured on the JMS ConnectionFactory instead.

So we should relax this check in camel-jms

See nabble
http://camel.465427.n5.nabble.com/Camel-GlassFish-and-durable-subscriber-tp3408634p3408634.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76192,,,Sat Mar 05 07:59:16 UTC 2011,,,,,,,,,,,"0|i01won:",9064,Regression,,,,,,,,,,,,,,,,,,,"05/Mar/11 07:59;davsclaus;trunk: 1078241.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sftp producer runs in exception fileName does not contain any path information,CAMEL-3749,12500323,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,03/Mar/11 16:58,25/Oct/11 11:36,14/Jul/23 05:45,04/Mar/11 12:25,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,,,,"When the fileName uri option does not contain any folder information, ie: ""fileName=filename.txt"" the producer runs in exception

The exception is thrown when the producer calls ls method of jsch ChannelSftp passing an empty string as directory parameter in org.apache.camel.component.file.remote.SftpOperations.existsFile line 704

sample URI: 
sftp://user@hostname:22?disconnect=true&eagerDeleteTargetFile=false%3Bstepwise%3Dfalse&fileName=SYSTEM01&password=******&soTimeout=30000&tempFileName=%24%7Bfile%3Aname.noext%7D.tmp

Stack trace:
{code}
[2011-03-03 14:40:40,827][RecipientList (thread #4)][ERROR][org.apache.camel.processor.DefaultErrorHandler][] Failed delivery for exchangeId: ID-******-33331-1299163043684-0-10. Exhausted after delivery attempt: 1 caught: org.apache.camel.component.file.GenericFileOperationFailedExcept on: 
org.apache.camel.component.file.GenericFileOperationFailedException: 
        at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:727) 
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:130) 
        at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:50) 
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) 
        at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:716) 
        at org.apache.camel.processor.MulticastProcessor.access$100(MulticastProcessor.java:78) 
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:282) 
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:274) 
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) 
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) 
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) 
        at java.util.concurrent.FutureTask.run(FutureTask.java:138) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: 4: 
        at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1353) 
        at org.apache.camel.component.file.remote.SftpOperations.existsFile(SftpOperations.java:704) 
        ... 20 more 
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0 
        at java.lang.String.charAt(String.java:686) 
        at com.jcraft.jsch.ChannelSftp.remoteAbsolutePath(ChannelSftp.java:2367) 
        at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1185) 
        ... 21 more
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76193,,,Mon Mar 07 14:57:45 UTC 2011,,,,,,,,,,,"0|i01wnr:",9060,,,,,,,,,,,,,,,,,,,,"04/Mar/11 07:16;davsclaus;Can you report the issue to JSCH as well? Its in fact their library which doesn't accept an empty string or provide a better error message if an empty string is invalid.
;;;","04/Mar/11 10:00;crive;Tried to commit a bug to jsch but unfortunately while trying to create a new issue report the server runs in error;;;","04/Mar/11 12:14;davsclaus;The issue is only when using the tempFileName option;;;","04/Mar/11 12:25;davsclaus;I have fixed it on trunk. I use ""."" now which is current path.

trunk: 1077904.;;;","07/Mar/11 14:57;crive;works for me;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JAXB marshaling broken in 2.6.0,CAMEL-3729,12499963,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,28/Feb/11 18:46,25/Oct/11 11:36,14/Jul/23 05:45,01/Mar/11 08:43,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jaxb,,,,0,jaxb,,,,,,,,"This used to work in 2.5.0 but in 2.6.0 it throws:

{noformat}
Caused by: javax.xml.bind.JAXBException: class com.ask.ugc.camel.Jask3061$Foo nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:482)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:117)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:96)
...
{noformat}


{code:java}
@ContextConfiguration(
        locations = ""foo.bar.JaxbBug$ContextConfig"",
        loader = JavaConfigContextLoader.class)
public class JaxbBug extends AbstractTestNGSpringContextTests {

    @EndpointInject(uri = ""mock:end"")
    protected MockEndpoint mockEndpoint;

    @Produce(uri = ""direct:test"")
    protected ProducerTemplate producer;

    @Test
    @DirtiesContext
    public void testJaxbMarshalling() throws InterruptedException {
        mockEndpoint.expectedMessageCount(1);

        producer.sendBody(new Foo());

        mockEndpoint.assertIsSatisfied();

    }

    @Configuration
    public static class ContextConfig extends SingleRouteCamelConfiguration {
        @Bean
        public RouteBuilder route() {
            return new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    JaxbDataFormat jaxb = new JaxbDataFormat(JAXBContext.newInstance(Foo.class));
                    from(""direct:test"").marshal(jaxb).to(""mock:end"");


                }
            };
        }
    }

    @XmlRootElement
    public static class Foo {
        String bar;

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }

}
{code}","Sun Jdk 1.6, Mac OSX",dragisak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76196,,,Tue Mar 01 17:39:11 UTC 2011,,,,,,,,,,,"0|i01wjb:",9040,Regression,,,,,,,,,,,,,,,,,,,"01/Mar/11 08:08;davsclaus;It must be something with Spring JavaConfig Testing. Using plain camel-test kit works without any problem.

I suggest to provide a classloader in the JAXBContext.newInstance, so the Foo class can be loaded.
;;;","01/Mar/11 08:18;davsclaus;Okay I have a test using JUnit instad of TestNG and it works fine on trunk code. I will add it to camel-jaxb.
;;;","01/Mar/11 08:43;davsclaus;trunk: 1075707.;;;","01/Mar/11 17:39;dragisak;We have this problem in our web app (Jersey+Spring 3.0.5). It happened when we upgraded Camel from 2.5 to 2.6. The test is just to demonstrate problem.

This same test passes with Camel 2.5 but fails with Camel 2.6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient list with parallel processing doesn't reuse aggregation threads,CAMEL-3727,12499913,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcin kolda,marcin kolda,28/Feb/11 12:28,25/Oct/11 11:36,14/Jul/23 05:45,28/Feb/11 15:20,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"When I'm using recipient list in parallel mode {{aggregateExecutorService}} in {{MulticastProcessor}} doesn't reuse threads and is creating one new thread per each request.

To reproduce this bug simply add a loop to {{RecipientListParallelTest.testRecipientListParallel()}} test:
{code:title=RecipientListParallelTest.java|borderStyle=solid}
    public void testRecipientListParallel() throws Exception {
        for (int i = 0; i < 10000; i++) {
            MockEndpoint mock = getMockEndpoint(""mock:result"");
            mock.reset();
            mock.expectedBodiesReceivedInAnyOrder(""c"", ""b"", ""a"");
            template.sendBodyAndHeader(""direct:start"", ""Hello World"", ""foo"", ""direct:a,direct:b,direct:c"");
            assertMockEndpointsSatisfied();
        }
    }
{code}

In the logs you can find:
{code}
2011-02-28 13:22:30,984 [) thread #0 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:31,984 [) thread #4 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:32,984 [) thread #8 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:34,000 [ thread #12 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:35,000 [ thread #14 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:36,000 [ thread #15 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:37,015 [ thread #16 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:38,015 [ thread #17 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76197,,,Mon Feb 28 15:20:20 UTC 2011,,,,,,,,,,,"0|i01wiv:",9038,,,,,,,,,,,,,,,,,,,,"28/Feb/11 13:35;davsclaus;Thanks for reporting. I got this covered now. Running full tests before committing the fix.;;;","28/Feb/11 15:20;davsclaus;trunk: 1075372.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kestrel: concurrent gets optimized into a single get,CAMEL-3720,12499753,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcheckoway,dcheckoway,25/Feb/11 20:15,25/Oct/11 11:35,14/Jul/23 05:45,26/Feb/11 08:11,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"Please add camel-kestrel as a component in JIRA...thx.

The bug is that spymemcached is optimizing concurrent gets for the same key into a single get.  The fix is in the attached patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Feb/11 20:17;dcheckoway;camel-kestrel-fix.patch;https://issues.apache.org/jira/secure/attachment/12471964/camel-kestrel-fix.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,37858,,,Sat Feb 26 08:11:24 UTC 2011,,,,,,,Patch Available,,,,"0|i01whb:",9031,,,,,,,,,,,,,,,,,,,,"25/Feb/11 20:17;dcheckoway;This patch tweaks the way we build the spymemcached client so it doesn't optimize get calls together.;;;","26/Feb/11 08:11;davsclaus;trunk: 1074801.

Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"OracleAQ does not support JMSReplyTo, so ensure try catch is used when accessing it",CAMEL-3718,12499673,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Feb/11 07:04,25/Oct/11 11:35,14/Jul/23 05:45,25/Feb/11 07:38,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/JmsComponent-changes-between-2-4-0-and-2-6-0-tp3398446p3398446.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76198,,,Fri Feb 25 07:38:51 UTC 2011,,,,,,,,,,,"0|i01wgv:",9029,,,,,,,,,,,,,,,,,,,,"25/Feb/11 07:38;davsclaus;trunk: 1074420.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Archetype camel-archetype-war generates well the project but no web console is available in the browser,CAMEL-3716,12499584,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cmoulliard,cmoulliard,24/Feb/11 11:32,25/Oct/11 11:36,14/Jul/23 05:45,04/Mar/11 06:42,2.6.0,,,,,,,,,,,,2.7.0,,,,tooling,,,,0,,,,,,,,,The archetype camel-archetype-war is not longer synchronized with last modifications made with component camel-web and so the camel web console does not appear into the web browser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76199,,,Fri Mar 04 06:42:23 UTC 2011,,,,,,,,,,,"0|i01wgf:",9027,,,,,,,,,,,,,,,,,,,,"04/Mar/11 06:42;davsclaus;The console works now;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sending to http endpoint may double encoding parameters,CAMEL-3715,12499570,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Feb/11 09:24,25/Oct/11 11:35,14/Jul/23 05:45,24/Feb/11 13:58,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-http,,,,0,,,,,,,,,"See nabble


The workaround is to use either HTTP_URI or HTTP_QUERY as a header with the parameters. Then they are not double encoded.

Also the HTTP_URI should be placeholder resolved, so we can use {{port}} or the likes to inject the port number dynamic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76200,,,Thu Feb 24 13:58:30 UTC 2011,,,,,,,,,,,"0|i01wg7:",9026,,,,,,,,,,,,,,,,,,,,"24/Feb/11 13:58;davsclaus;trunk: 1074153.

Also fixed camel-http4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate mail attachment names breaks the Message.getAttachments() interface contract,CAMEL-3713,12499544,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,pegli,pegli,23/Feb/11 23:46,25/Oct/11 11:35,14/Jul/23 05:45,24/Feb/11 03:41,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-mail,,,,0,,,,,,,,,"If the camel-mail component consumes a Multipart email message that contains two parts with the same filename, subsequent calls to {{DataHandler dh = Message.getAttachments().get(""filename"")}} result in a ClassCastException.  This occurs because {{MailBinding.extractAttachmentsFromMultipart()}} calls {{CollectionHelper.appendValue(map, fileName, part.getDataHandler())}} to add an attachment to the Message attachments map.  If appendValue is passed a duplicate key, it converts the map value to an ArrayList and adds the existing value and the new value to the list.  The result is a Map that contains a mix of <String,DataSource> and <String,ArrayList>.

Fix is to NOT use CollectionHelper and to check for duplicate keys prior to adding an attachment.","Mac OSX 10.6.6
java version ""1.6.0_22""
Java(TM) SE Runtime Environment (build 1.6.0_22-b04-307-10M3261)
Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-307, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Feb/11 23:48;pegli;camel-3713.diff;https://issues.apache.org/jira/secure/attachment/12471788/camel-3713.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,37854,,,Thu Feb 24 03:41:57 UTC 2011,,,,,,,Patch Available,,,,"0|i01wfr:",9024,,,,,,,,,,,,,,,,,,,,"23/Feb/11 23:48;pegli;patch against trunk that fixes CAMEL-3713.;;;","24/Feb/11 03:41;hadrian;Patch applied in r1074033 with thanks to Paul Mietz Egli.
Also added a minor checkstyle fix in r1074034.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnException - The order they are defined in the RouteBuilder / XML should be preserved when you have multiple of the same exception type,CAMEL-3711,12499504,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Feb/11 17:22,25/Oct/11 11:36,14/Jul/23 05:45,24/Feb/11 05:24,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,camel-spring,,,0,,,,,,,,,"When you have 2+ of {{onException(MyExcpetion.class)}} then the order may get reversed, in the logic which prepares the routes. The logic should cater for clashes and ensure orders is preserved.

This currently only occurs for XML based routes. The Java DSL works.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76201,,,Thu Feb 24 05:24:46 UTC 2011,,,,,,,,,,,"0|i01wfb:",9022,,,,,,,,,,,,,,,,,,,,"24/Feb/11 05:24;davsclaus;trunk: 1074046;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptFrom and from(Endpoint) don't work together,CAMEL-3709,12499477,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sm,sm,23/Feb/11 12:12,25/Oct/11 11:35,14/Jul/23 05:45,24/Feb/11 05:21,2.5.0,2.6.0,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"When using interceptFrom(String) together with from(Endpoint), the below Exception occurs during the routes building process. Looking at RoutesDefinition.java:217 reveals, that the FromDefintion just created has no URI. That causes the comparison to all the interceptFroms' URIs to fail. As far as I can tell, the way to fix this would be to add {{setUri(myEndpoint.getEndpointUri())}} in the constructor {{FromDefinition(Endpoint endpoint)}}.

Below the stack trace, there is a unit test that demonstrates the issue. Until it if fixed, it can be easily circumvented by adding the commented-out line, and then change to {{from(""myEndpoint"")}}.
{code}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: null due to: null
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:109)
	at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:217)
	at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:167)
	at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:101)
	at dk.mobilethink.adc2.endpoint.UnsetUriTest$1.configure(UnsetUriTest.java:18)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:318)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:273)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:259)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:612)
	at org.apache.camel.test.CamelTestSupport.setUp(CamelTestSupport.java:111)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.test.TestSupport.runBare(TestSupport.java:65)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NullPointerException
	at org.apache.camel.util.UnsafeUriCharactersEncoder.encode(UnsafeUriCharactersEncoder.java:56)
	at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:162)
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:107)
	... 24 more
{code}

{code}
package dk.mobilethink.adc2.endpoint;

import org.apache.camel.Endpoint;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.CamelTestSupport;

public class UnsetUriTest extends CamelTestSupport {
	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {

		return new RouteBuilder() {
			public void configure() throws Exception {
				interceptFrom(""URI1"").to(""irrelevantURI"");

				Endpoint myEndpoint = getContext().getComponent(""direct"").createEndpoint(""ignoredURI"");
				
//				getContext().addEndpoint(""myEndpoint"", myEndpoint);
				from(myEndpoint)
					.inOnly(""log:foo"");
			}
		};
	}

	public void testNothing() { }
}
{code}
",,sm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76202,,,Thu Feb 24 07:24:22 UTC 2011,,,,,,,,,,,"0|i01wev:",9020,,,,,,,,,,,,,,,,,,,,"23/Feb/11 16:20;davsclaus;You found the easter egg. There is a todo in the source code to support endpoint via ref's

    // TODO: Support lookup endpoint by ref (requires a bit more work)
;;;","24/Feb/11 05:21;davsclaus;trunk: 1074045;;;","24/Feb/11 07:24;davsclaus;trunk: 1074058.

Now works when from is using ref instead of url as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Example camel-example-cxf-tomcat does not work on Tomcat 7,CAMEL-3702,12499334,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,arnoud,arnoud,22/Feb/11 12:39,25/Oct/11 11:35,14/Jul/23 05:45,12/Apr/11 07:01,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,examples,,,,0,,,,,,,,,"I am trying to get the example camel-example-cxf-tomcat to work on Tomcat 7.0.8. This example contains a CxfEndpoint that is configured as being asynchronous (by default). Because of this asynchronous setting I was notified by an Exception that I should set the async-supported property of the CXFServlet in the web.xml. After I set this property to true, I see that invocations are received and processed by the Camel route, however the result is not returned: the connection is closed directly.
I assume this issue is not directly related to the example itself (apart from the missing async-supported property), however I was not able to pinpoint which component is triggering the connection to be closed before the result is written.","Windows 7, Tomcat 7.0.8, Camel 2.6.0",,,,,,,,,,,,,,,CXF-3362,,,,,,,,CAMEL-3734,CAMEL-3698,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,68803,,,Tue Apr 12 07:01:46 UTC 2011,,,,,,,,,,,"0|i01wdb:",9013,,,,,,,,,,,,,,,,,,,,"23/Feb/11 07:25;davsclaus;Can you try another container such as Jetty to see if make a difference? Just notice to know if its Tomcat only issue or generic web container.

Also would be nice to check with the Apache CXF if they have any issues on Tomcat with the async-supported property.;;;","23/Feb/11 08:46;arnoud;I deployed the same war in Jetty 8.0.0.M2 (supporting Servlet 3.0). Upon invoking the service I see the exception below in the logging of Jetty and the invoker gets the HTTP 500 error. 
The exact fault differs from Tomcat, as in the Tomcat case the connection was closed without any exception(s). In both cases I see the INFO logging from the route itself (input/output).
 
If I change the CxfEndpoint to be synchronous, it works fine in Jetty as well. 

{noformat}
2011-02-23 09:21:51,793 [qtp18378667-26 ] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusIncident@83dae1]]
2011-02-23 09:21:51,829 [qtp18378667-26 ] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incident.OutputStatusIncident@62812d]
2011-02-23 09:21:51.839:WARN::/camel-example-cxf-tomcat-2.6.0/webservices/incident 
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:479)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:247)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handle(Server.java:353)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:598)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)
2011-02-23 09:21:51,989 [qtp18378667-26 ] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[servlet-api-3.0.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:500)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handleAsync(Server.java:398)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:603)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)[:1.6.0_20]
{noformat};;;","23/Feb/11 10:54;arnoud;I also deployed the war to GlassFish 3.0.1, resulting in the logging below. Both GlassFish and Jetty fail with the same exception in the same method (ReadHeadersInterceptor.handleMessage()). I tried to verify if Tomcat (silently) fails in the same method as well, however it seems that it continues after invoking this method.

{noformat}
[#|2011-02-23T11:19:08.306+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,305 [d-pool-8080-(1)] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusI
ncident@1797bf]]
|#]

[#|2011-02-23T11:19:08.398+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,398 [d-pool-8080-(1)] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incide
nt.OutputStatusIncident@112691e]
|#]

[#|2011-02-23T11:19:08.405+0100|WARNING|glassfish3.0.1|javax.enterprise.system.container.web.com.sun.enterprise.web|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|StandardWrapperValve[CXFServlet]: PWC1406: Servlet.service() for servlet CXFServlet threw exception
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
        at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
        at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
        at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
        at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:325)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:226)
        at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
        at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
        at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
        at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
        at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
        at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
        at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
        at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
        at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
        at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
        at java.lang.Thread.run(Thread.java:619)
|#]

[#|2011-02-23T11:19:08.429+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,427 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]

[#|2011-02-23T11:19:08.485+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,479 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
java.lang.NullPointerException
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getFormHintFieldEncoding(PwcCoyoteRequest.java:245)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.setRequestEncodingFromSunWebXml(PwcCoyoteRequest.java:208)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getCharacterEncoding(PwcCoyoteRequest.java:129)[web-glue.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getCharacterEncoding(RequestFacade.java:360)[web-core.jar:3.0.1]
        at javax.servlet.ServletRequestWrapper.getCharacterEncoding(ServletRequestWrapper.java:134)[javax.servlet.jar:]
        at org.apache.cxf.transport.http.HttpServletRequestSnapshot.<init>(HttpServletRequestSnapshot.java:68)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$1.cacheInput(AbstractHTTPDestination.java:303)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.cacheInput(AbstractHTTPDestination.java:519)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:531)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:524)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$WrappedOutputStream.onFirstWrite(AbstractHTTPDestination.java:659)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:42)[cxf-api-2.3.2.jar:2.3.2]
        at com.ctc.wstx.io.UTF8Writer.flush(UTF8Writer.java:96)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.flush(BufferingXmlWriter.java:214)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.close(BufferingXmlWriter.java:194)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1685)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)[woodstox-osgi.jar:3.2.1]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:282)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:270)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:315)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat};;;","23/Feb/11 13:31;njiang;It looks like a CXF servlet transport issue.
I will spend some time to dig it tomorrow.
;;;","23/Feb/11 13:48;dkulp;
Willem,
It might be slightly harder to debug with 2.3.3-SNAPSHOT/2.4.0-SNAPSHOT as the HttpRequestWrapper is now only created for one-ways and in some WS-RM/Addr cases.   Thus, it may ""just work"" with 2.3.3.   Try doing a one-way and seeing if the behavior persists.

;;;","24/Feb/11 14:31;njiang;Applied patch into CXF trunk and 2.3.x branch.
If someone wants to try out the fix, please change cxf version in Camel trunk to 2.3.4-SNAPSHOT, and build the example with it.

Will resolve this issue when we upgrade the CXF version.;;;","24/Feb/11 15:54;arnoud;I've tested the example against the CXF 2.3.4-SNAPSHOT. It works fine now for Tomcat 7 and Jetty 8. On GlassFish v3 however I get the following Exception:

{noformat}
[#|2011-02-24T16:44:47.451+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=pool-36-thread-1;|2011-02-24 16:44:47,450 [ool-36-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService#{http://incident.cxf.example.camel.apache.org/}reportIncident has thrown exception, unwinding now
java.lang.IllegalStateException: The request has not been put into asynchronous mode, must call ServletRequest.startAsync first
        at org.apache.catalina.connector.Request.getAsyncContext(Request.java:3764)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getAsyncContext(RequestFacade.java:1105)[web-core.jar:3.0.1]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider$Servlet3Continuation.<init>(Servlet3ContinuationProvider.java:77)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider.getContinuation(Servlet3ContinuationProvider.java:57)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:126)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:67)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:224)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:70)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:118)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat};;;","25/Feb/11 08:08;njiang;Hi Arnound,

Thanks for reporting this, I didn't try the GlassFish v3 when I fix the issue in CXF.
It looks like different Servlet3 implementation provides different status checking, 
I will commit a quick fix in CXF to work around the issue that you just found.

Cheers,

Willem
;;;","25/Feb/11 13:29;njiang;Hi Arnoud,

I just committed a quick fix into CXF 2.3.x and trunk branch after went through the Servlet3 JRS315 the async section.
Now you should access the camel-cxf-example war which is deployed to GlassFish 3.0.1 without any other issue.
Please keep me posted if you have other issue about the camel-example-cxf-tomcat.

Cheers,
Willem;;;","25/Feb/11 18:45;arnoud;Hi Willem,

I have tested this fixed version of CXF and the example now works on GlassFish v3. Also Tomcat and Jetty still work with this fixed version. I suppose we can consider this issue as fixed?

Thanks for your time and effort!

Arnoud.;;;","26/Feb/11 08:08;davsclaus;Thanks for testing. I think we should close this ticket when Camel upgrades and uses the CXF version which has the fix. 

Willem is there an ETA on a new CXF release having that fix? We want to ship out Camel 2.7 soon.;;;","26/Feb/11 08:33;njiang;CXF 2.3.3 is already cut and voted, the servlet3 patch is not catch up this release.
I think we should add this issue as a known issue when we release Camel 2.7.0.
;;;","01/Mar/11 09:43;davsclaus;Added a note to known issues about the CXF bug, so the example doesn't work in Tomcat 7.;;;","01/Mar/11 10:04;njiang;@Claus,
I think we should keep this issue open until we upgrade the CXF version to 2.3.4.
 ;;;","01/Mar/11 10:23;davsclaus;Will be fixed by CXF 2.3.4 upgrade in CAMEL-3734;;;","12/Apr/11 07:01;njiang;Update the CXF version to 2.3.4-SNAPSHOT.;;;",,,,,,,,,,,,,,
Endpoints may be shutdown twice as they are tracked in two lists in CamelContext,CAMEL-3690,12499198,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/11 08:16,25/Oct/11 11:36,14/Jul/23 05:45,21/Feb/11 09:19,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"Endpoint is a Service which means they are listed in both a endpoint and service list. They should only be listed in the endpoint list.

This avoids issues with endpoints may be shutdown twice when Camel shutdown.

See nabble
http://camel.465427.n5.nabble.com/QuartzComponent-do-not-delete-quartz-worker-threads-when-shutdown-Camel-tp3393728p3393728.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76203,,,Mon Feb 21 09:19:07 UTC 2011,,,,,,,,,,,"0|i01wan:",9001,,,,,,,,,,,,,,,,,,,,"21/Feb/11 09:19;davsclaus;trunk: 1072897.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel-javaspaces component doesn't work with the latest version of Gigaspaces,CAMEL-3687,12499124,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgreco,dgreco,19/Feb/11 15:15,25/Oct/11 11:36,14/Jul/23 05:45,21/Feb/11 10:41,2.7.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,,,,I upgraded the camel-javaspaces to work with the latest 2.7-SNAPSHOT. Tested with Gigaspaces only,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Feb/11 15:18;dgreco;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12471473/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76204,,,Mon Feb 21 18:50:02 UTC 2011,,,,,,,Patch Available,,,,"0|i01w9z:",8998,,,,,,,,,,,,,,,,,,,,"19/Feb/11 15:18;dgreco;Patch with the corrected component. The patch has been created from the trunk;;;","21/Feb/11 10:41;davsclaus;trunk: 1072924.

Thanks for the patch.

BTW: Now that camel 2.7 is JDK1.6+, should we migrate your other Camel components to Apache?;;;","21/Feb/11 12:44;dgreco;Hi Claus,
there is the camel-hdfs component I could add, let me know you if you want me to add it;;;","21/Feb/11 18:50;davsclaus;David that would be nice, please open a JIRA ticket and attach a patch. That's how we can accept contributions at Apache. (we cannot slurp from github etc.);;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter in parallel mode blocks when empty body to split,CAMEL-3685,12499114,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/11 07:35,25/Oct/11 11:36,14/Jul/23 05:45,19/Feb/11 08:34,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"This is only in the parallel mode. Works fine in non parallel.

See nabble:
http://camel.465427.n5.nabble.com/Trying-to-split-an-empty-List-blocks-a-Quartz-initiated-thread-indefinitely-td3391736.html#a3392166",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76205,,,Sat Feb 19 08:34:45 UTC 2011,,,,,,,,,,,"0|i01w9j:",8996,,,,,,,,,,,,,,,,,,,,"19/Feb/11 08:34;davsclaus;trunk: 1072268.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When splitting inside another split, the custom aggregationStrategy is not used.",CAMEL-3677,12498874,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ojelinski,ojelinski,17/Feb/11 12:01,17/Feb/11 12:47,14/Jul/23 05:45,17/Feb/11 12:47,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"When splitting inside another split, the custom aggregationStrategy is not used. For example in the route:

{code:xml}
	    <route id=""DoubleSplitRoute"">
	    	<from uri=""direct:in"" />
	    	<setBody>
	    		<constant>
&lt;a&gt;
	&lt;b&gt;
		&lt;c&gt;Hello&lt;/c&gt;
		&lt;c&gt;World&lt;/c&gt;
	&lt;/b&gt;
	&lt;b&gt;
		&lt;c&gt;Hello&lt;/c&gt;
		&lt;c&gt;again&lt;/c&gt;
	&lt;/b&gt;
&lt;/a&gt;
	    		</constant>
	    	</setBody>
			<split>
				<xpath>a/b</xpath>
				<split strategyRef=""concatWithSpaceStrategy"">
					<xpath>b/c/text()</xpath>
					<setBody><simple>${bodyAs(java.lang.String)}</simple></setBody>
					<log message=""Got a part: ${body}""/>
				</split>
				<log message=""Got a result: ${body}""/>
			</split>
		</route>
{code}

(where the {{concatWithSpaceStrategy}} does nothing more than to concat the bodies with a space inbetween.)

The expected results would be:

{code}
Got a result: Hello World
{code}

and 

{code}
Got a result: Hello again
{code}

But that is not what happens. The actual results are two times the same:

{code}
Got a result: 
<a>
	<b>
		<c>Hello</c>
		<c>World</c>
	</b>
	<b>
		<c>Hello</c>
		<c>again</c>
	</b>
</a>
{code}

The reason is, that the strategy is not used. In the class {{org.apache.camel.processor.MulticastProcessor}}, in the method {{protected AggregationStrategy getAggregationStrategy(Exchange exchange)}}, the first step is to find an aggregationStrategy in the Exchange. This is set to {{UseOriginalAggregationStrategy}}, and because it is not null, this aggregation strategy will be used, not the one declared for the splitter.

---

A workaround would be to remove the AggregationStrategy of the Exchange, before it is aggregated, by using a processor with the following process method:

{code:java}
	public void process(Exchange exchange) throws Exception {
		if (exchange != null) {
			exchange.removeProperty(Exchange.AGGREGATION_STRATEGY);
		}
	}
{code}

After integrating this in my route, I got the desired results.","Mac OS X 10.6.6, Eclipse Helios",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76206,,,Thu Feb 17 12:47:51 UTC 2011,,,,,,,,,,,"0|i01w7r:",8988,,,,,,,,,,,,,,,,,,,,"17/Feb/11 12:25;davsclaus;Can you try with Camel 2.6.0 - We have fixed issus with splitter in that release.;;;","17/Feb/11 12:47;ojelinski;Yes, sorry, I didn't use 2.6 yet, because I had different issues, and I didn't find the bug reported, so I didn't think it would have been fixed yet. But: yes! You fixed it in 2.6. My routes are working correct without my workaround.;;;","17/Feb/11 12:47;ojelinski;Workaround no longer needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
<jmxAgent>'s disabled attribute does not support property placeholders,CAMEL-3675,12498812,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marbor,marbor,16/Feb/11 23:25,25/Oct/11 11:36,14/Jul/23 05:45,17/Feb/11 07:45,2.5.0,,,,,,,,,,,,2.7.0,,,,jmx,,,,0,,,,,,,,,"The Camel Properties web page (http://camel.apache.org/properties.html) states that property placeholder are supported on the <jmxAgent> tag.  However, the ""disabled"" attribute on this tag doesn't support property placeholders.

The AbstractCamelContextFactoryBean.initJMXAgent() method needs to call CamelContextHelper.parseBoolean() passing in the camelJMXAgent.isAgentDisabled() value to get property placeholders to work with this attribute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76207,,,Thu Feb 17 07:46:12 UTC 2011,,,,,,,,,,,"0|i01w7b:",8986,,,,,,,,,,,,,,,,,,,,"17/Feb/11 07:45;davsclaus;trunk: 1071531.;;;","17/Feb/11 07:46;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
bean component - Thread safey issue when selecting method to use in BeanInfo,CAMEL-3670,12498726,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Feb/11 07:33,25/Oct/11 11:35,14/Jul/23 05:45,16/Feb/11 09:13,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-cache,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bean-component-BeanInfo-thread-safety-tp3387197p3387197.html",,whaley,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76208,,,Wed Feb 16 09:13:47 UTC 2011,,,,,,,,,,,"0|i01w67:",8981,,,,,,,,,,,,,,,,,,,,"16/Feb/11 09:13;davsclaus;trunk: 1071179.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make Content-Type HTTP Header Optional,CAMEL-3666,12498589,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fribeiro,fribeiro,14/Feb/11 23:31,25/Oct/11 11:36,14/Jul/23 05:45,15/Feb/11 06:22,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-restlet,,,,0,,,,,,,,,"As per section 7.2.1 of RFC 2616, any HTTP/1.1 message containing an entity-body SHOULD (not MUST) include a Content- Type header field defining the media type of that body.

The populateExchangeFromRestletRequest method of the DefaultRestletBinding class, unlike others in the same class, needs to be changed:

{code:Java}if (request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)) {
  ...
} else {
  inMessage.setBody(request.getEntity().getStream());
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Feb/11 00:33;fribeiro;patch.txt;https://issues.apache.org/jira/secure/attachment/12471044/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76209,,,Tue Feb 15 06:22:22 UTC 2011,,,,,,,Patch Available,,,,"0|i01w5b:",8977,,,,,,,,,,,,,,,,,,,,"15/Feb/11 06:22;davsclaus;trunk: 1070784.

Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sampling EIP - NPE in toString,CAMEL-3664,12498521,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,14/Feb/11 12:07,25/Oct/11 11:35,14/Jul/23 05:45,14/Feb/11 12:11,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,The toString in SamplingDefinition should cater for units may be null.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76210,,,2011-02-14 12:07:21.0,,,,,,,,,,,"0|i01w4v:",8975,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SMSC initiated unbind spawns exponential amounts of reconnect threads,CAMEL-3650,12498227,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,muellerc,jacovt,jacovt,10/Feb/11 10:49,25/Oct/11 11:35,14/Jul/23 05:45,28/Feb/11 18:42,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-smpp,,,,0,smpp,,,,,,,,"It took me a bit of time to put my finger on this problem.

When an unbind PDU is sent from the SMSC side to a camel-smpp endpoint, a cascading amount reconnect threads are spawned by the reconnect code. I can reliably re-produce this problem having a simple smpp consumer to a SMSC / simulator and issuing an unbind from the SMSC / simulator.

Here are some logs (I have added additional debug messages to the SmppConsumer to show the object references and state of the SmppSession objects):

{code}
2011-02-10 12:23:05,931 [ing.Main.main()] INFO  MainSupport          - Apache Camel 2.6.0 starting
2011-02-10 12:23:06,338 [ing.Main.main()] INFO  amelNamespaceHandler - OSGi environment not detected.
2011-02-10 12:23:06,338 [ing.Main.main()] DEBUG amelNamespaceHandler - Using org.apache.camel.spring.CamelContextFactoryBean as CamelContextBeanDefinitionParser
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelProducerTemplateFactoryBean with id: template on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelConsumerTemplateFactoryBean with id: consumerTemplate on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,965 [ing.Main.main()] DEBUG SpringCamelContext   - Set the application context classloader to: java.net.URLClassLoader@16e7eec9
2011-02-10 12:23:06,984 [ing.Main.main()] DEBUG elContextFactoryBean - Found JAXB created routes: []
2011-02-10 12:23:06,990 [ing.Main.main()] DEBUG SpringCamelContext   - Adding routes from builder: Routes: []
2011-02-10 12:23:07,059 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is starting
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - JMX enabled. Using ManagedManagementStrategy.
2011-02-10 12:23:07,106 [ing.Main.main()] DEBUG faultManagementAgent - Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@7e3b014c
2011-02-10 12:23:07,168 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters ...
2011-02-10 12:23:07,194 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/camel/camel-core/2.6.0/camel-core-2.6.0.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,195 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/activemq/activemq-camel/5.3.1-fuse-02-00/activemq-camel-5.3.1-fuse-02-00.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,196 [ing.Main.main()] DEBUG ageScanClassResolver - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.activemq.camel.converter]
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG ageScanClassResolver - Found: [class org.apache.camel.component.file.GenericFileConverter, class org.apache.camel.component.bean.BeanConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.TimePatternConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.activemq.camel.converter.ActiveMQConverter, class org.apache.activemq.camel.converter.ActiveMQMessageConverter]
2011-02-10 12:23:07,474 [ing.Main.main()] INFO  nTypeConverterLoader - Found 4 packages with 15 @Converter classes to load
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.file.GenericFileConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.bean.BeanConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CamelConverter
2011-02-10 12:23:07,482 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CollectionConverter
2011-02-10 12:23:07,483 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.IOConverter
2011-02-10 12:23:07,488 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.NIOConverter
2011-02-10 12:23:07,490 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.ObjectConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.TimePatternConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.DomConverter
2011-02-10 12:23:07,492 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQConverter
2011-02-10 12:23:07,501 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQMessageConverter
2011-02-10 12:23:07,507 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters done
2011-02-10 12:23:07,508 [ing.Main.main()] INFO  DefaultTypeConverter - Loaded 150 type converters in 0.313 seconds
2011-02-10 12:23:07,516 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG dProducerServicePool - Starting service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:23:07,534 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:23:07,542 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:23:07,555 [ing.Main.main()] DEBUG ultComponentResolver - Found component: smpp via type: org.apache.camel.component.smpp.SmppComponent via: META-INF/services/org/apache/camel/component/smpp
2011-02-10 12:23:07,590 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:23:07,591 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01], path=[ubankmobile01@127.0.0.1:2775], parameters=[{amp;enquireLinkTimer=55000, amp;systemType=ubankmobile01, amp;transactionTimer=15000, password=u$@nk01}]
2011-02-10 12:23:07,605 [ing.Main.main()] DEBUG SpringCamelContext   - smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01 converted to endpoint: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] by component: org.apache.camel.component.smpp.SmppComponent@517c804b
2011-02-10 12:23:07,615 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:23:07,655 [ing.Main.main()] DEBUG ultComponentResolver - Found component: log via type: org.apache.camel.component.log.LogComponent via: META-INF/services/org/apache/camel/component/log
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[log://SmppIn], path=[SmppIn], parameters=[{}]
2011-02-10 12:23:07,666 [ing.Main.main()] DEBUG SpringCamelContext   - log://SmppIn converted to endpoint: Endpoint[log://SmppIn] by component: org.apache.camel.component.log.LogComponent@4633c1aa
2011-02-10 12:23:07,669 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:23:07,712 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:23:07,747 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:23:07,754 [ing.Main.main()] DEBUG SpringCamelContext   - Warming up route id: SmppConsumerRoute having autoStartup=true
2011-02-10 12:23:07,772 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:23:07,774 [ing.Main.main()] DEBUG ProcessorEndpoint$1  - Starting producer: Producer[log://SmppIn]
2011-02-10 12:23:07,775 [ing.Main.main()] DEBUG ProducerCache        - Adding to producer cache with key: Endpoint[log://SmppIn] for producer: Producer[log://SmppIn]
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG cutorServiceStrategy - Created new scheduled thread pool for source: DefaultErrorHandler[TraceInterceptor[To[log:SmppIn]]] with name: ErrorHandlerRedeliveryTask. [poolSize=10]. -> java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:23:07,844 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:23:07,922 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:23:07,923 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-10 12:23:07,923 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:07,925 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:10,916 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: BOUND_RX
2011-02-10 12:23:10,916 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-10 12:23:10,916 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:23:10,917 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:23:10,918 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-10 12:23:10,919 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@774e1f2b
2011-02-10 12:23:10,925 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 3.866 seconds
2011-02-10 12:23:10,935 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:23:10,936 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:18,851 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:18,852 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:24,854 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:24,854 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:30,938 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:30,938 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:37,901 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:37,901 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:45,256 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:45,256 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:51,232 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:51,232 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:57,208 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:57,208 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:03,277 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:03,277 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:09,436 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,437 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:09,821 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,821 [pool-1-thread-3] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-10 12:24:09,822 [pool-1-thread-3] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@501b2cb9]
{code}

Everything is perfectly fine up to this point. It is here that the SMSC / simulator issues an unbind request towards the camel-smpp consumer.

{code}
2011-02-10 12:24:09,937 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-10 12:24:14,826 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,827 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,829 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:19,829 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:19,830 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@1b6b7f83]
2011-02-10 12:24:19,831 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:22,835 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:22,837 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@1b6b7f83]
{code}

The above negative bind responseis due to the fact that only a single smpp RX bind is allowed to the SMSC / simulator. I suspect the underlying problem is how the exception is handled here, but I might be wrong.

{code}
2011-02-10 12:24:22,838 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:22,838 [Thread-10      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:22,838 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:22,838 [Thread-9       ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:27,838 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:27,840 [Thread-11      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:27,840 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,840 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3e30e173]
{code}

OK, wait, we have 2 SMPPSession object references now? Seems like we have 2 Threads running that tries to re-connect...

{code}
2011-02-10 12:24:27,841 [Thread-12      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:31,035 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:31,035 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:31,036 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:31,036 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:31,036 [Thread-11      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,037 [Thread-13      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,846 [Thread-12      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:32,982 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@3e30e173]
2011-02-10 12:24:32,982 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:32,983 [Thread-12      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:32,983 [Thread-14      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,983 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:36,037 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:36,037 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
{code}

Some more re-connect threads...

{code}
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:36,039 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:36,039 [Thread-15      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:36,039 [Thread-16      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,983 [Thread-14      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-14      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,985 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:37,985 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:37,985 [Thread-17      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,987 [Thread-18      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:38,831 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:38,831 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:38,832 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:38,832 [Thread-19      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:38,832 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:38,832 [Thread-16      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:38,833 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:40,957 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:40,957 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:40,958 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,958 [Thread-20      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:40,958 [Thread-15      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:40,958 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:40,959 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:42,821 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:42,822 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:42,822 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,822 [Thread-21      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:42,822 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:42,822 [Thread-18      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:42,823 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,988 [Thread-17      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:43,832 [Thread-19      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:43,834 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,834 [Thread-22      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:43,834 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:43,835 [Thread-23      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:44,972 [Thread-14      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:44,973 [Thread-14      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:44,973 [Thread-24      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:44,973 [Thread-17      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:44,973 [Thread-14      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:44,974 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:45,958 [Thread-20      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:45,958 [Thread-20      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@684be8b8]
2011-02-10 12:24:45,960 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,960 [Thread-25      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:45,960 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@79b7d13e]
2011-02-10 12:24:45,960 [Thread-26      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:47,018 [Thread-19      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:47,019 [Thread-19      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,019 [Thread-19      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:47,019 [Thread-22      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,020 [Thread-27      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
{code}

Even more re-connect threads being spawned...

{code}
2011-02-10 12:24:47,823 [Thread-21      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #4...
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@490eb6ae]
2011-02-10 12:24:47,824 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,824 [Thread-28      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,824 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3b4d82e1]
2011-02-10 12:24:47,825 [Thread-29      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:48,838 [Thread-23      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:48,962 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:48,962 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:48,963 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:48,963 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:48,963 [Thread-23      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,964 [Thread-30      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
^C2011-02-10 12:24:49,726 [Thread-5       ] INFO  rt$HangupInterceptor - Received hang up - stopping the main instance.
2011-02-10 12:24:49,726 [Thread-5       ] INFO  MainSupport          - Apache Camel 2.6.0 stopping
2011-02-10 12:24:49,727 [Thread-5       ] DEBUG MainSupport          - Stopping Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:24:49,733 [Thread-5       ] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:24:49,735 [Thread-5       ] DEBUG ledConnectionFactory - Stop the PooledConnectionFactory, number of connections in cache: 0
2011-02-10 12:24:49,736 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext:camelTestRouteBuilderContext) is shutting down
2011-02-10 12:24:49,737 [Thread-5       ] INFO  aultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 300 seconds)
2011-02-10 12:24:49,738 [Thread-5       ] DEBUG cutorServiceStrategy - Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@6e267b76 with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG aultShutdownStrategy - There are 1 routes to shutdown
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Disconnecting from: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Closing session: org.jsmpp.session.SMPPSession@501b2cb9
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - calling super.doStop()
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Stopping consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG ProcessorEndpoint$1  - Stopping producer: Producer[log://SmppIn]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  SmppConsumer         - Disconnected from: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:24:49,743 [ - ShutdownTask] DEBUG aultShutdownStrategy - Shutdown complete for: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  aultShutdownStrategy - Route: SmppConsumerRoute shutdown complete, was consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:24:49,744 [Thread-5       ] INFO  aultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,747 [Thread-5       ] INFO  ltInflightRepository - Shutting down with no inflight exchanges.
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG dProducerServicePool - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Uptime: 1 minute
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is shutdown in 0.014 seconds
{code}


The above thread-spawning quickly gets out of hand with thousands being created.

Note however that this problem does not seem to happen when the smsc goes down (session is closed and a connection refused pops up), but only when an unbind happens and then a negative bind.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76211,,,Mon Feb 28 18:41:44 UTC 2011,,,,,,,,,,,"0|i01w1r:",8961,,,,,,,,,,,,,,,,,,,,"10/Feb/11 14:35;muellerc;Will have a look on it later today...;;;","10/Feb/11 20:52;muellerc;Committed r1069564;;;","10/Feb/11 20:53;muellerc;Jaco, I applied a patch to truck. It would be nice, if you could check whether this patch solves your problem (It's a bit tricky to test).;;;","11/Feb/11 09:33;jacovt;Christian,

Thanks for the quick patch. On first glance it seems to do the trick, I would just like to do a couple more tests to see how it behaves with multiple SMPP consumers, different providers, etc.

I see the same reconnect also lives in the SmppProducer class. Could we perhaps get the fix in there too?

Thanks again. :)

---Jaco;;;","11/Feb/11 09:37;muellerc;This should also be fixed in SmppProducer;;;","11/Feb/11 20:42;muellerc;Committed r1069950;;;","11/Feb/11 20:44;muellerc;Jaco, I also fixed this issue in SmppProducer. Would be nice, if you also could check, whether this works also for the SMSC you can test with.;;;","13/Feb/11 01:20;jacovt;Hello Christian,

I have tested a bit more and after the lock change, it seems that it triggers some more exceptions down the line that stops the threads from reconnecting completely now.

Here the the full debug session:

{code}
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x3cee5a06)
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-13 03:09:30,958 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:09:30,959 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-13 03:09:30,959 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:30,961 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:33,008 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: BOUND_RX
2011-02-13 03:09:33,008 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:09:33,008 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:09:33,009 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000]
2011-02-13 03:09:33,010 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-13 03:09:33,011 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@110f965e
2011-02-13 03:09:33,017 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-13 03:09:33,017 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-13 03:09:33,018 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 2.886 seconds
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:09:33,027 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@46eff545
2011-02-13 03:09:33,028 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@46eff545: startup date [Sun Feb 13 03:09:29 SAST 2011]; root of context hierarchy]
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:45,075 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:45,076 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:55,137 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:55,138 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:05,199 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:05,199 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:15,261 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:15,261 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:25,323 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:25,323 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:31,359 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:31,359 [pool-1-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:10:31,360 [pool-1-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:31,825 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,367 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,369 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 30000 millis
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: CLOSED
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-13 03:11:06,371 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:06,371 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
2011-02-13 03:11:08,427 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:11:08,427 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:11:18,453 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:18,454 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:18,488 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:18,488 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:28,547 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:28,548 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:38,612 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:38,612 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:48,674 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:48,674 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:58,733 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:58,733 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:12:08,795 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:12:08,795 [pool-2-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:12:08,796 [pool-2-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@71b456f]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
2011-02-13 03:12:23,744 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop

{code}

After this line nothing seems to happen at all, and all threads are dead. Here is a complete thread dump:

{code}

2011-02-13 03:18:56
Full thread dump Java HotSpot(TM) 64-Bit Server VM (19.0-b09 mixed mode):

""RMI TCP Connection(3)-172.17.5.113"" daemon prio=10 tid=0x0000000042254000 nid=0x236f runnable [0x00007feee3161000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee284830> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8d548> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Connection(2)-172.17.5.113"" daemon prio=10 tid=0x00000000417ff800 nid=0x236d runnable [0x00007feee3262000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee145210> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8cd40> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""JMX server connection timeout 41"" daemon prio=10 tid=0x00000000417ef800 nid=0x236a in Object.wait() [0x00007feee3363000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000edf12f50> (a [I)
	at com.sun.jmx.remote.internal.ServerCommunicatorAdmin$Timeout.run(ServerCommunicatorAdmin.java:150)
	- locked <0x00000000edf12f50> (a [I)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI Scheduler(0)"" daemon prio=10 tid=0x00000000417ee800 nid=0x2369 waiting on condition [0x00007feee3464000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000edc9f6d0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.DelayQueue.take(DelayQueue.java:164)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:609)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:602)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI TCP Connection(1)-172.17.5.113"" daemon prio=10 tid=0x0000000041c90800 nid=0x2368 in Object.wait() [0x00007feee3665000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer.fetchNotifications(ArrayNotificationBuffer.java:417)
	- locked <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer$ShareBuffer.fetchNotifications(ArrayNotificationBuffer.java:209)
	at com.sun.jmx.remote.internal.ServerNotifForwarder.fetchNotifs(ServerNotifForwarder.java:258)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1227)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1225)
	at javax.management.remote.rmi.RMIConnectionImpl.fetchNotifications(RMIConnectionImpl.java:1231)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
	at sun.rmi.transport.Transport$1.run(Transport.java:159)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8c518> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Accept-0"" daemon prio=10 tid=0x0000000041f21000 nid=0x2366 runnable [0x00007feee3ffe000]
   java.lang.Thread.State: RUNNABLE
	at java.net.PlainSocketImpl.socketAccept(Native Method)
	at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:390)
	- locked <0x00000000edca3180> (a java.net.SocksSocketImpl)
	at java.net.ServerSocket.implAccept(ServerSocket.java:462)
	at java.net.ServerSocket.accept(ServerSocket.java:430)
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:34)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:369)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:341)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Attach Listener"" daemon prio=10 tid=0x0000000041b8b000 nid=0x2364 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""pool-2-thread-3"" prio=10 tid=0x0000000041b8c000 nid=0x21a9 waiting on condition [0x00007feee3871000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-2"" prio=10 tid=0x0000000041c90000 nid=0x21a3 waiting on condition [0x00007feee3c75000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-1"" prio=10 tid=0x0000000041b8a000 nid=0x21a1 waiting on condition [0x00007feee3a73000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x0000000041c8f800 nid=0x2173 waiting on condition [0x00007feee8372000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00000000418fa800 nid=0x2168 waiting on condition [0x00007feee3b74000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00000000418f9000 nid=0x2166 waiting on condition [0x00007feee8170000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""org.apache.camel.spring.Main.main()"" prio=10 tid=0x00007feee4420000 nid=0x2164 waiting on condition [0x00007feee8270000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000f7bd6a28> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.apache.camel.impl.MainSupport.waitUntilCompleted(MainSupport.java:309)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:139)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:322)
	at org.apache.camel.spring.Main.main(Main.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:415)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-5"" prio=10 tid=0x00007feee43a2800 nid=0x213b in Object.wait() [0x00007feee8bc9000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-4"" prio=10 tid=0x00007feee42a7800 nid=0x213a in Object.wait() [0x00007feee8cca000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x00000000419b2000 nid=0x2134 in Object.wait() [0x00007feee8dcb000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00007feee449a800 nid=0x2133 in Object.wait() [0x00007feee8ecc000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00007feee4400000 nid=0x2132 in Object.wait() [0x00007feee8fcd000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Low Memory Detector"" daemon prio=10 tid=0x0000000041704800 nid=0x212c runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread1"" daemon prio=10 tid=0x00007feee406d800 nid=0x212b waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread0"" daemon prio=10 tid=0x00007feee406a800 nid=0x212a waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Signal Dispatcher"" daemon prio=10 tid=0x00007feee4068800 nid=0x2129 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Finalizer"" daemon prio=10 tid=0x00007feee404a000 nid=0x2128 in Object.wait() [0x00007feee98b4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
	- locked <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

   Locked ownable synchronizers:
	- None

""Reference Handler"" daemon prio=10 tid=0x00007feee4048000 nid=0x2127 in Object.wait() [0x00007feee99b5000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:485)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
	- locked <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)

   Locked ownable synchronizers:
	- None

""main"" prio=10 tid=0x00000000416e3000 nid=0x2121 in Object.wait() [0x00007feeee8c4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000f7bd56c0> (a java.lang.Thread)
	at java.lang.Thread.join(Thread.java:1186)
	- locked <0x00000000f7bd56c0> (a java.lang.Thread)
	at org.apache.camel.maven.RunMojo.joinThread(RunMojo.java:511)
	at org.apache.camel.maven.RunMojo.joinNonDaemonThreads(RunMojo.java:503)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:430)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

   Locked ownable synchronizers:
	- None

""VM Thread"" prio=10 tid=0x00007feee4044000 nid=0x2126 runnable 

""GC task thread#0 (ParallelGC)"" prio=10 tid=0x00000000416f6000 nid=0x2122 runnable 

""GC task thread#1 (ParallelGC)"" prio=10 tid=0x00000000416f8000 nid=0x2123 runnable 

""GC task thread#2 (ParallelGC)"" prio=10 tid=0x00000000416fa000 nid=0x2124 runnable 

""GC task thread#3 (ParallelGC)"" prio=10 tid=0x00000000416fb800 nid=0x2125 runnable 

""VM Periodic Task Thread"" prio=10 tid=0x000000004170f000 nid=0x212d waiting on condition 

JNI global references: 1696
{code}

It seems that this might be triggered by a bug in jsmpp itself (The concurrent modification exception)

Thanks,
---Jaco;;;","13/Feb/11 21:44;muellerc;Jaco,
thanks for reporting this and your very useful tests. I found an issue in SmppConsumer and fixed it. Could you please test the latest version again.
Thanks,
Christian;;;","14/Feb/11 11:11;jacovt;Hello Christian,

Just had a quick test, the same problem seems to persist even after the latest bugfix. Here are the logs:

{code}
2011-02-14 12:54:57,128 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@590a8143], session state: CLOSED
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-14 12:54:57,129 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:57,130 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-14 12:54:59,726 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:54:59,727 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
2011-02-14 12:54:59,728 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-14 12:54:59,728 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-14 12:54:59,728 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:11,802 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:11,802 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:24,858 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:24,858 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:36,067 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:36,067 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:48,176 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:48,176 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:58,174 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:58,174 [pool-2-thread-1] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-14 12:55:58,175 [pool-2-thread-1] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:55:58,179 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:56:03,138 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@5d748654]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
{code}

The first exception bugs be a bit, I don't think that the locking / unlocking of the thread is working as expected. Reason I am saying this is that it throws that IllegalMonitorStateException the very first time it reaches the unlock() portion of the reconnect code.

Hope this helps.
---Jaco;;;","14/Feb/11 12:32;jacovt;Hello Christian,

I have spotted where the IllegalMonitorStateException comes from: in the reconnect method, the recconectLock is locked outside of the new thread that gets spawned to reconnect the smpp session, but the unlock() is done inside of the thread that gets created, meaning that the inner thread does not own the lock.

Would it not make more sense to make this whole reconnect method synchronized?

Thank you! :)
---Jaco;;;","15/Feb/11 18:47;muellerc;Yeah, well spotted. I wanted check the java doc for the ReentrantLock, but I forgot it... :-(
Anyway, I think I could solve it. The lock is now released in the same thread (Committed r1071012).

Could you check it again, please? And by the way, do you use a open source or free ware tool for your tests which I could also use?

Christian;;;","16/Feb/11 10:26;jacovt;Christian,

Thanks for the patch. I have just updated and tested it a bit. The ConcurrentModificationException persists. This seems to have something to do with the way the JSMPP session is disposed of (I don't think it actually dies). I can see this when I have visualvm connected to the JMX endoint exposed from camel. For every reconnect the live thread count increases (meaning those old threads never seems to die).

I am in the process of creating a thread dump to attach to this issue so you can have a better look. I could possibly also create the actual dump (including heap and references) that you can inspect?

I am currently not using a simulator for this testing, SMPPsim does not have unbind available from the simulator side. I did ask the developers over there to implement that functionality, but they are lacking time at the moment to do so. I have added you on gtalk to discuss a possible testing scenario from your side. I assume you have gtalk access?

---Jaco;;;","27/Feb/11 12:43;muellerc;The ConcurrentModificationException is thrown inside the jsmpp library when I remove the sessionStateListener and call unbindAndClose:
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I removed the calls to removeSessionStateListener which should work around this issue:

{code}
session.unbindAndClose();
{code}

This should not be a problem, but without a good test SMSC it's hard to test it.

I will work on a simple SMSC test implementation with which we can automate out integration unit tests.

@Jaco: Could you please test the latest trunk version!?;;;","27/Feb/11 12:43;muellerc;Committed r1075042;;;","27/Feb/11 12:58;muellerc;Report the jsmpp issue: http://code.google.com/p/jsmpp/issues/detail?id=93;;;","28/Feb/11 12:27;jacovt;Hello Christian,

Thanks for the updates and the defect that you logged over at jsmpp.

I had a quick look at the code, and yes, you are right. The bug seems to be inside of jsmpp when removing the session from an array that is not 100% thread safe.

From my side I would suggest we keep the call to session.removeSessionStateListener() in the camel-smpp code. This is the correct behavior from camel's point of view. The ConcurrentModificationException *should* not have an effect on the camel route, but it will definitely keep the thread alive (as witnessed in the stack trace / thread dump a couple of comments above) because of the still-active listener.

Even with the current trunk version of the code (the code that removed session.removeSessionStateListener()) the threads will stay alive, since there is still a listener attached.

As a workaround in the camel-smpp code, I wonder if it would be possible to surround this with a try/catch block to catch the ConcurrentModificationException: 
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I know that would not be the cleanest solution in the world, but doing it that way, we can warn the user about the problem (LOG.warn() on exception comes to mind) and the code will not have to change once jsmpp fixes the bug. Or should we rather let the exception boil all the way up and let onException() in camel handle it? We would have to document this on the camel-smpp wiki page though. This will also not fix the memory leak, but at least the code will work out of the box when the jsmpp bug is fixed and the new bundle is dropped into servicemix.

I also suggest we try to get a patch together to fix the jsmpp bug and submit it. I will see if I can get around to do that. That way we can see how quickly we can get the bug fixed in jsmpp and let the nice folk over at servicemix build an updated OSGi-aware bundle for jsmpp.

Ideas?

Thank you,
---Jaco;;;","28/Feb/11 18:39;muellerc;I will go for the following solution:
{code}
session.removeSessionStateListener(this.sessionStateListener);
// remove this hack after http://code.google.com/p/jsmpp/issues/detail?id=93 is fixed
try {
    Thread.sleep(1000);
    session.unbindAndClose();
} catch (Exception e) {
    LOG.warn(""Could not close session "" + session);
}
session = null;
{code}

With a little sleep which only has an affect if we shutdown the component or if we have to reconnect, the problem could be solved (I will test it when we have a good test SMSC implementation we can use).
However, I added also the try catch block to be sure, the ConcurrentModificationException will not boil all the way up to our user.

Do you agree?

Christian;;;","28/Feb/11 18:41;muellerc;Committed r1075473;;;",,,,,,,,,,,
camel-ftp - Should import bundle from camel-core to load file strategies,CAMEL-3642,12498088,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Feb/11 07:57,25/Oct/11 11:36,14/Jul/23 05:45,09/Feb/11 07:58,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,,,,"See forum
http://fusesource.com/forums/thread.jspa?threadID=2654&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76212,,,Wed Feb 09 07:58:23 UTC 2011,,,,,,,,,,,"0|i01vzz:",8953,,,,,,,,,,,,,,,,,,,,"09/Feb/11 07:58;davsclaus;trunk: 1068776.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-lucene - Should use Camel type converter when casting headers to String,CAMEL-3640,12497964,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/11 08:51,25/Oct/11 11:35,14/Jul/23 05:45,11/Feb/11 06:09,2.6.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-camel-lucene-component-tp3369088p3369088.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76213,,,Fri Feb 11 06:09:25 UTC 2011,,,,,,,,,,,"0|i01vzj:",8951,,,,,,,,,,,,,,,,,,,,"11/Feb/11 06:09;davsclaus;trunk: 1069680.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mistake in camel-eventAdmin feature,CAMEL-3637,12497816,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,07/Feb/11 07:47,25/Oct/11 11:35,14/Jul/23 05:45,07/Feb/11 09:41,2.6.0,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,,,,"The Camel Karaf feature camel-eventAdmin is not correct.

The features is described as follow:
<feature name=""camel-eventAdmin"" version=""2.6.0"">
  <feature version=""2.6.0"">camel-core</feature>
  <bundle>mvn:org.apache.camel/camel-eventAdmin/2.6.0</bundle>
</feature>

but the camel-eventAdmin artifact correct name is camel-eventadmin:
http://repo2.maven.org/maven2/org/apache/camel/camel-eventadmin/2.6.0/camel-eventadmin-2.6.0.jar

This typo mistake provides:
Downloading: http://repo1.maven.org/maven2/org/apache/camel/camel-eventAdmin/2.6.0/camel-eventAdmin-2.6.0.jar
[INFO] Unable to find resource 'org.apache.camel:camel-eventAdmin:jar:2.6.0' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Can't resolve bundle org.apache.camel:camel-eventAdmin:jar:2.6.0
[INFO] ------------------------------------------------------------------------

I'm gonna submit a patch to fix that.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Feb/11 09:29;jbonofre;CAMEL-3637.patch;https://issues.apache.org/jira/secure/attachment/12470424/CAMEL-3637.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76214,,,Mon Feb 07 09:41:20 UTC 2011,,,,,,,,,,,"0|i01vyv:",8948,,,,,,,,,,,,,,,,,,,,"07/Feb/11 09:41;davsclaus;trunk: 1067890.

Thanks for patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blueprint container goes 'GracePeriod' if component is defined in the same XML file,CAMEL-3620,12497618,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gertvanthienen,gertvanthienen,03/Feb/11 20:49,25/Oct/11 11:35,14/Jul/23 05:45,24/Feb/11 10:25,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-blueprint,,,,1,,,,,,,,,"When a Blueprint file contains both a route and a component bean definition, the Camel routes get started correct but the Blueprint container will go to status 'GracePeriod'.  

An example:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint
    xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""
      http://www.osgi.org/xmlns/blueprint/v1.0.0
      http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
      <route>
        <from uri=""file:activemq/input""/>
        <to uri=""file:activemq/output""/>

        <setBody>
          <simple>
            FileMovedEvent(file: ${file:name}, timestamp: ${date:now:hh:MM:ss.SSS})
          </simple>
        </setBody>
        <to uri=""amq://events"" />
      </route>
    </camelContext>

    <bean id=""amq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
      <property name=""brokerURL"" value=""vm://default?create=false&amp;waitForStart=10000""/>
    </bean>

</blueprint>
{code}

After the 5 minute time-out period, the routes are stopped and we end up with this message in the log file.
{noformat}
Unable to start blueprint container for bundle activemq2.xml due to unresolved dependencies 
  [(&(component=log)(objectClass=org.apache.camel.spi.ComponentResolver)), 
   (&(component=amq)(objectClass=org.apache.camel.spi.ComponentResolver))]
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76215,,,Thu Feb 24 10:25:57 UTC 2011,,,,,,,,,,,"0|i01vv3:",8931,,,,,,,,,,,,,,,,,,,,"22/Feb/11 06:34;davsclaus;Guillaume do you have a clue why this happen?;;;","24/Feb/11 00:33;justinbeck;I experienced this today.  It appeared to be unrelated to whether I defined components in the same file as routes.  My temporary fix was to add ""blueprint.graceperiod:=false"" to the Bundle-SymbolicName in the pom for this bundle.;;;","24/Feb/11 07:25;gnodet;Yes, I understand what's going on.  I'll see if I can do something, but I'm not sure that there's a nice way out.

@Justin: if you define the component in a different bundle that should work, but splitting into multiples blueprint files in the same bundle has no effect at all for blueprint.;;;","24/Feb/11 10:25;gnodet;Fixed by switching the service reference to optional if there's a bean defined with the same name.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent filename value when move attribute is used with File component,CAMEL-3617,12497561,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmmorel,jmmorel,03/Feb/11 14:00,25/Oct/11 11:35,14/Jul/23 05:45,04/Feb/11 11:49,2.5.0,2.6.0,,,,,,,,,,,2.7.0,,,,camel-core,,,,0,,,,,,,,,"Unless I miss a point, when I use the following endpoint, the file:name value is incorrect and is equal to file:absolute.path

<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&amp;include=.*\.dat&amp;move=${queue.done.folder}/$simple{file:name}&amp;moveFailed=${queue.failed.folder}/$simple{file:name}"" />

${queue.input.folder}, ${queue.done.folder} and ${queue.failed.folder} are absolute paths resolved by Spring.

In fact, Camel tries to move the file to ${queue.done.folder}/${queue.input.folder}/$simple{file:name}
I've also tried using $simple{header.CamelFileName} instead of $simple{file:name} and it gives the same result.

For now, I've found a workaround using a processor which put the CamelFileName header value into a ""destFile"" property 
<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&amp;include=.*\.dat&amp;move=${queue.done.folder}/$simple{property.destFile}&amp;moveFailed=${queue.failed.folder}/$simple{property.destFile}"" />
",Windows Vista,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76216,,,Fri Feb 04 11:49:04 UTC 2011,,,,,,,,,,,"0|i01vuf:",8928,,,,,,,,,,,,,,,,,,,,"03/Feb/11 15:35;davsclaus;Can you try with Camel 2.6 which has been released?;;;","04/Feb/11 08:12;jmmorel;this doesn't work either with 2.6.0.;;;","04/Feb/11 08:19;davsclaus;Can you post an example of the paths from
- ${queue.input.folder}
- ${queue.done.folder}

And when you drop a file in the input folder, is that in the ""root"" or in a sub folder? You have recursive=true enabled.;;;","04/Feb/11 09:21;davsclaus;I found the problem, which happens when using absolute paths. There was an issue resolving the relative name of ${file:name} which didn't work properly and the name was computed as the absolute name instead.;;;","04/Feb/11 09:57;davsclaus;trunk: 1067124.;;;","04/Feb/11 11:48;davsclaus;And this fixes a test on windows: 1067159;;;","04/Feb/11 11:49;davsclaus;This should be fixed on trunk now.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-josql doesnot export org.apache.camel.language.sql.* ,CAMEL-3616,12497470,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rajdavies,rajdavies,rajdavies,02/Feb/11 15:04,25/Oct/11 11:35,14/Jul/23 05:45,02/Feb/11 15:07,2.6.0,2.7.0,,,,,,,,,,,2.7.0,,,,camel-sql,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76217,,,Wed Feb 02 15:07:30 UTC 2011,,,,,,,,,,,"0|i01vu7:",8927,,,,,,,,,,,,,,,,,,,,"02/Feb/11 15:07;rajdavies;Fixed by SVN revision 1066494;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When the OsgiTypeConverter looks for TypeConverterLoader services in the OSGi registry, it should use its own BundleContext instead of the one from the client bundle so that class space consistency can be fully enforced",CAMEL-3614,12497440,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,02/Feb/11 09:51,25/Oct/11 11:36,14/Jul/23 05:45,02/Feb/11 22:16,,,,,,,,,,,,,2.7.0,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76218,,,Thu Feb 03 06:23:15 UTC 2011,,,,,,,,,,,"0|i01vtr:",8925,,,,,,,,,,,,,,,,,,,,"02/Feb/11 22:16;gnodet;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java
	M	components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
	A	components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/utils/BundleContextUtils.java
	M	components/camel-spring/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java
Committed r1066642
;;;","03/Feb/11 05:33;davsclaus;There is a compilation error now. Probably the bundle plugin not adding the new utils package.

[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /Users/davsclaus/workspace/camel/components/camel-spring/src/main/java/org/apache/camel/osgi/OsgiSpringCamelContext.java:[40,28] cannot find symbol
symbol  : variable BundleContextUtils
location: class org.apache.camel.osgi.OsgiSpringCamelContext
[INFO] 1 error
[INFO] -------------------------------------------------------------;;;","03/Feb/11 05:40;davsclaus;Fixed CS in camel-core-osig in rev: 1066734.;;;","03/Feb/11 05:44;davsclaus;Fixed the compilation error in rev: 1066735;;;","03/Feb/11 05:44;davsclaus;Fixed CS in camel-blueprint in rev: 1066736.;;;","03/Feb/11 06:11;gnodet;Sorry about that, and thx for the fixes.;;;","03/Feb/11 06:23;davsclaus;No problem. We are just glad OSGi experts help us out :);;;",,,,,,,,,,,,,,,,,,,,,,,
HttpProducer should not eat up the content-type when working in proxy mode.,CAMEL-3608,12497334,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Feb/11 13:26,25/Oct/11 11:35,14/Jul/23 05:45,03/Feb/11 10:02,,,,,,,,,,,,,2.7.0,,,,camel-http,,,,0,,,,,,,,,"Here is the user story about it.
http://stackoverflow.com/questions/4810050/how-do-i-implement-a-pass-through-jax-rs-proxy-using-apache-camel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76219,,,Thu Feb 03 10:02:07 UTC 2011,,,,,,,,,,,"0|i01vsf:",8919,,,,,,,,,,,,,,,,,,,,"03/Feb/11 10:02;davsclaus;trunk: 1066039;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP rename fails,CAMEL-3595,12496943,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mikaelfj,mikaelfj,27/Jan/11 14:08,25/Oct/11 11:36,14/Jul/23 05:45,30/Jan/11 14:10,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-ftp,,,,0,,,,,,,,,"(This is related to the user group discussion http://camel.465427.n5.nabble.com/Problem-renaming-existing-file-in-FTP-td3307670.html)

When using a tmpPrefix when uploading, the rename from the tmp-file to the destination file fails, if the destination file is already present, even though the option fileExist=Override is used.

We have the problem on just a few destination servers which all seems to be windows machines(?).

I have fetched the 2.4 branch of camel-ftp to find out why it does not work, since the unit test you refer to in your previous post do excercise the problem.

It appears that the cause of the problem is, that the FtpOperations.existsFile fails to return true, which then causes the code not to enter the part where it deletes the exisiting file.

The reason for the FtpOperations.existsFile to return false, is, that the list of existing files has the directoryname prepended, e.g. I'm trying to upload Test.REN to folder test/rename, and in the code 
""if (existing.equals(onlyName))"" 
existing=test/rename\Test.REN and onlyName=Test.REN - which returns false - but causes the later rename to fail as the target folder did contain the Test.REN. 

My guess is that it is server dependent whether the returned list of names in the directory include the directory name or not?

To fix this I have added the following line of code before the if-statement
existing = FileUtil.stripPath(FileUtil.normalizePath(existing));
So it will strip the path part of the file name before comparing it to onlyName.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jan/11 11:26;mikaelfj;camel-ftp-patch.txt;https://issues.apache.org/jira/secure/attachment/12469767/camel-ftp-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,37988,,,Mon Jan 31 10:51:23 UTC 2011,,,,,,,Patch Available,,,,"0|i01vpj:",8906,,,,,,,,,,,,,,,,,,,,"27/Jan/11 14:11;mikaelfj;Patch file from eclipse;;;","30/Jan/11 11:26;mikaelfj;The previous patch did not work when the client (camel) machine is unix and the target (ftp server) is windows as the normalizePath method checks the local OS etc.

The attached patch is now working or us - but just takes the file name as the part of the string after the left-most occurence of either / or \ - so it will not work in a rare occation where a / or \ could be part of the filename.;;;","30/Jan/11 12:53;davsclaus;Can you try with Camel 2.6 when its released. There has been many improvements and fixes since Camel 2.4.

What FTP server do you use, and which OS does it run?
The API of {{listNames}} ought to *only* return the filename, without any path indication. Hence a plain {{equals}} ought to be sufficient.

;;;","30/Jan/11 13:22;mikaelfj;We can try with 2.6 when it is out.

I'll see if I can find out which ftp server that is in use - and try out the NLST command from the command-line (which should be the ftp-command behind listNames.;;;","30/Jan/11 14:07;davsclaus;Camel 2.6 has been released. Just that we haven't put out an announcement. You can download it from the links at the release note
http://camel.apache.org/camel-260-release.html;;;","30/Jan/11 14:10;davsclaus;Based on your patch I have committed an improvement to trunk.

The path will be stripped of the name when comparing. Also the operations to strip the path caters for mixed separators.

trunk: 1065278.;;;","31/Jan/11 10:51;mikaelfj;I made the following small test case:

    public void testNlstWin() throws Exception {
        FTPClient ftpClient = new FTPClient();
        ftpClient.connect(""xxx"", 21);
        ftpClient.login(""yyy"", ""zzz"");
        System.out.println(ftpClient.getSystemName());
        String[] names = ftpClient.listNames(""test/rename"");
        for (String existing : names) {
            System.out.println(existing);
        }
        ftpClient.logout();
        ftpClient.disconnect();
    }


The strange thing is, that I get the same result from both windows and unix (runing the test of a windows machine:

Windows_NT
test/rename\Test.REN

UNIX Type: L8 Version: BSD-44
test/rename/Test.REN

I.e. both of them contains the directory as part of the returned filename - which I hadn't expected.

It might be, that we have only seen the problem on windows servers because this has been the only place where we transfer multiple files to the same destination-name. ;;;",,,,,,,,,,,,,,,,,,,,,,,
Concurrent writes to the same file has race condition,CAMEL-3584,12496560,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jan/11 15:17,25/Oct/11 11:35,14/Jul/23 05:45,08/Feb/11 15:35,2.5.0,,,,,,,,,,,,2.7.0,,,,camel-core,,,,1,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Using-Splitter-and-file-producer-with-option-fileExist-Append-failed-tp3353618p3353618.html

We need to synchronize on the file name to avoid concurrent writes to the same file.",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76220,,,Tue Feb 08 15:35:24 UTC 2011,,,,,,,,,,,"0|i01vn3:",8895,,,,,,,,,,,,,,,,,,,,"24/Jan/11 15:17;davsclaus;The workaround is to use {{threads(1)}} before the file endpoint to force single threaded access to the file producer.;;;","08/Feb/11 15:35;davsclaus;trunk: 1068443.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF does not forward the response code from CXF to Camel,CAMEL-3581,12496537,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,24/Jan/11 13:38,25/Oct/11 11:36,14/Jul/23 05:45,24/Jan/11 13:59,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"When calling a CXF service from a camel route the reponse code from CXF should be set on the camel exachange.

Currently this is not done. So when CXF sets the reponse code to e.g. 403 camel still sends 200 and the client will not be able to work with this reponse.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76221,,,2011-01-24 13:38:05.0,,,,,,,Patch Available,,,,"0|i01vmf:",8892,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"allow ScheduledRoutePolicy to handle more than one action (start, stop, resume, pause)",CAMEL-3575,12496322,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,rveguilla,rveguilla,21/Jan/11 19:37,25/Oct/11 11:35,14/Jul/23 05:45,28/Jan/11 22:29,2.6.0,,,,,,,,,,,,2.7.0,,,,camel-quartz,,,,0,,,,,,,,,"The current implementation of ScheuledRoutePolicy only supports one type of action (start,stop,resume,pause) for only one route.  If, for example,  you attempt to configure a CronScheduleRoutePolicy with a routeStartTime and routeStopTime, only the one will by handled because ScheduleRoutePolicy (super-class of CronScheduleRoutePolicy) only store one action and one route in the SchedulerContext:

 protected void loadCallbackDataIntoSchedulerContext(Action action, Route route) throws SchedulerException {
       getScheduler().getContext().put(SCHEDULED_ACTION, action);
        getScheduler().getContext().put(SCHEDULED_ROUTE, route);
}

with the effect of creating two timers (one for startTime, the other for stopTime) that execute the same action (the last call to scheduleRoute).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jan/11 19:40;rveguilla;ScheduledRoutePolicy-Patch.diff;https://issues.apache.org/jira/secure/attachment/12469005/ScheduledRoutePolicy-Patch.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76222,,,Fri Jan 28 22:30:41 UTC 2011,,,,,,,Patch Available,,,,"0|i01vl3:",8886,,,,,,,,,,,,,,,,,,,,"21/Jan/11 19:40;rveguilla;The following patch is a preliminary solution which stores ScheduledJobState info (action and route) using the jobDetail.getName() as key. ;;;","21/Jan/11 20:33;davsclaus;We have code freeze on the trunk, so we will look at this in the next release;;;","26/Jan/11 23:09;akarpe;Hi,

I am not sure that this is an issue... It is indeed possible to set a start and stop time using a single policy for a given route. The only difference is that it sets two separate triggers to handle the start and stop based on my understanding. I will create unit tests to test if this is an issue and validate this behavior and if needed use the patch above to fix it if it does the trick.

The patch above is missing unit tests to validate that it indeed works...

There is however a problem in being able to apply multiple policies (policy lists on a given route in CAMEL-3254).

I will be working on this over the next few days and will apply a fix for this as well as CAMEL-3254 in 2.7.0, following the release of 2.6.0

Cheers,

Ashwin...

P.S: Please hold off on applying the above patch...
;;;","27/Jan/11 14:42;akarpe;Hi,

I confirmed that this is an issue with a unit test. Will look into the patch and see if it can be applied without sideeffects.

Cheers,

Ashwin...;;;","27/Jan/11 15:41;akarpe;Thanks to Ricardo Veguilla for the patch.

Fix applied along with a unit test and removal of an unnecessary Routebuilder import in ScheduledJobState.

Committed to the Camel trunk as revision r1064154.

Cheers,

Ashwin...

;;;","28/Jan/11 17:34;rveguilla;Ashwin, should this issue be reclassified as a bug?

Anyway, thanks for your prompt response.;;;","28/Jan/11 22:30;akarpe;Reclassified as a bug and closed...;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel transport for cxf does not forward exception to camel exchange,CAMEL-3572,12496255,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,21/Jan/11 10:41,25/Oct/11 11:35,14/Jul/23 05:45,21/Jan/11 11:09,,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"I encountered a problem that happens if you run a route like
from(""servlet:///test"").to(""direct:cxfendpoint"")

Behind the direct endpoint there is a cxf jax-rs endpoint that is secured by spring-security. If spring security denies access based on method annotations it throws an AccessDeniedException. As JAX-RS does not handle it the exception hits the CamelDestination. There it is only logged and swallowed. As the client then gets no error it tries to handle the reponse with jaxb which fails. (See below)

21.01.2011 11:19:51 org.apache.cxf.jaxrs.provider.AbstractJAXBProvider handleJAXBException
WARNUNG: javax.xml.bind.UnmarshalException
 - with linked exception:
[com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]]
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:426)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.unmarshalFromInputStream(JAXBElementProvider.java:229)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.doUnmarshal(JAXBElementProvider.java:195)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.readFrom(JAXBElementProvider.java:166)
	at org.apache.cxf.jaxrs.client.AbstractClient.readBody(AbstractClient.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.handleResponse(ClientProxyImpl.java:463)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:177)
	at $Proxy18.getUsers(Unknown Source)
	at client.RESTClient.sayHelloAsUser(RESTClient.java:63)
	at client.RESTClient.main(RESTClient.java:34)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:682)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2090)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:1996)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1100)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:160)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
	... 11 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76223,,,Fri Jan 21 13:28:43 UTC 2011,,,,,,,,,,,"0|i01vkf:",8883,,,,,,,,,,,,,,,,,,,,"21/Jan/11 10:44;cschneider;I have tracked the problem to:

public class CamelDestination extends AbstractDestination implements Configurable {
protected class ConsumerProcessor implements Processor {
        public void process(Exchange exchange) {
            try {
                incoming(exchange);
            } catch (Throwable ex) {
                getLogger().log(Level.WARNING, ""Failed to process incoming message: "", ex);
                
            }
        }
    }
}

By exchanging the logging with
exchange.setException(ex);

The processing error is correctly transmitted to the client and the exception on client side does not happen anymore.
;;;","21/Jan/11 11:09;cschneider;Committed the fix. As we are near the release date please review;;;","21/Jan/11 12:19;njiang;@Christian
Can I have a look at the configure of the a cxf jax-rs endpoint ?
Here is an unit test[1] which works with old CamelDestination,  I'm not sure how the 
{code}
incoming(exchange)
{code}
 throw the exception.

As the below code will take care or the exception which is thrown from ServiceImplementor.
{code}
incomingObserver.onMessage(inMessage);
{code}

[1]https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-cxf/src/test/java/org/apache/camel/example/camel/transport/CamelTransportClientServerTest.java;;;","21/Jan/11 12:29;cschneider;The jaxrs server is configured like below. The exception is thrown by Spring Security when it intercepts the call the the implementation method

     <global-method-security jsr250-annotations=""enabled"" xmlns=""http://www.springframework.org/schema/security""/>

     <jaxrs:server id=""hello_rest"" address=""camel://direct:HelloWorldRestServerEndpoint"">
       <jaxrs:serviceBeans>
         <ref bean=""hello-world-bean""/>
       </jaxrs:serviceBeans>
       <jaxrs:features>
         <bean class=""org.apache.cxf.feature.LoggingFeature"" />
       </jaxrs:features>
     </jaxrs:server>
     
     <bean id=""hello-world-bean"" class=""server.HelloWorldImpl""/>

The impl class has this method:
@RolesAllowed(""ROLE_ADMIN"")
    public Map<Integer, User> getUsers()

Sergey already told me that I should use an interceptor to handle the exception from spring security and translate it. Still I think we should handle any exceptions in the CamelDestination that slip thorugh.
;;;","21/Jan/11 13:07;njiang;@Christian,
If we just throw the exception into camel route,  you need to take care the marshal the exception into the stream as not all the camel component support it out of box.

;;;","21/Jan/11 13:08;njiang;BTW, I think this change should be OK.;;;","21/Jan/11 13:28;cschneider;Yes. You are right about the marshalling but it is not so important as the exception in this place is rather a last resort. Normally the exceptions should be handled by cxf interceptors.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix compiler error in code generated by camel-archetype-component,CAMEL-3569,12496228,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,21/Jan/11 04:45,25/Oct/11 11:35,14/Jul/23 05:45,21/Jan/11 05:01,2.5.0,,,,,,,,,,,,2.6.0,,,,tooling,,,,0,,,,,,,,,"Sample output:
{code}

[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-xxx ---
[WARNING] File encoding has not been set, using platform encoding MacRoman, i.e. build is platform dependent!
[INFO] Compiling 4 source files to /w1/apache/camel/projects/camel-xxx/target/classes
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[28,7] org.apache.camel.example.HelloWorldConsumer is not abstract and does not override abstract method poll() in org.apache.camel.impl.ScheduledPollConsumer
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[38,19] poll() in org.apache.camel.example.HelloWorldConsumer cannot override poll() in org.apache.camel.impl.ScheduledPollConsumer; attempting to use incompatible return type
found   : void
required: int
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[36,4] method does not override or implement a method from a supertype
[INFO] 3 errors 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76224,,,Fri Jan 21 05:01:07 UTC 2011,,,,,,,,,,,"0|i01vjr:",8880,,,,,,,,,,,,,,,,,,,,"21/Jan/11 05:01;hadrian;Fixed in r1061633.

Problem caused by changed api and archetype code not updated.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Detect uncaught exceptions in UoWProcessor to ensure UoW is done even for those uncaught exceptions,CAMEL-3560,12495996,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/11 11:05,25/Oct/11 11:35,14/Jul/23 05:45,19/Jan/11 11:19,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"The Camel routing engines will handle this in 99.9% of the cases, but when you shutdown a Spring AC then Spring may stop beans in whatever order and this can cause those beans to fail operating during a graceful shutdown. And in worst case exceptions is thrown in situations where they are not normally done.

To cater for that and other situations the UoWProcessor should detect this and act accordingly.

This ensure the in flight registry will be tracked and we are not stuck with a missing inflight message, causing Camel to wait for the 300 sec timeout to shutdown.

For example just try hitting ctrl + c in that camel-example-management and you can see such an example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76225,,,Wed Jan 19 11:19:20 UTC 2011,,,,,,,,,,,"0|i01vhr:",8871,,,,,,,,,,,,,,,,,,,,"19/Jan/11 11:19;davsclaus;trunk: 1060768.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - The completionFromBatchConsumer option dont aggregate the last incoming exchange,CAMEL-3559,12495901,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/11 14:31,25/Oct/11 11:36,14/Jul/23 05:45,18/Jan/11 15:07,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Last-Aggregated-Exchange-lost-Aggregator-with-a-Batch-Consumer-and-persistent-AggregationRepository-tp3346214p3346214.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76226,,,Tue Jan 18 15:07:25 UTC 2011,,,,,,,,,,,"0|i01vhj:",8870,,,,,,,,,,,,,,,,,,,,"18/Jan/11 15:07;davsclaus;trunk: 1060406.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodCallExpression doesn't validate whether the method exists for all cases,CAMEL-3545,12495675,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,muellerc,muellerc,15/Jan/11 14:29,25/Oct/11 11:36,14/Jul/23 05:45,15/Jan/11 16:26,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"I tried to refactor

{code:title=org.apache.camel.model.language.MethodCallExpression.java}
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }
{code}

to

{code:title=org.apache.camel.model.language.MethodCallExpression.java}
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }
{code}

so that the created BeanExpression is also validate if you provide the bean type or an instance. With this change, some tests in org.apache.camel.language.SimpleTest fails.
I'm not sure whether the tests are faulty or if it's a bug.
Also not sure whether this should fixed in 2.6. ",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76227,,,Sat Jan 15 16:25:52 UTC 2011,,,,,,,,,,,"0|i01vef:",8856,,,,,,,,,,,,,,,,,,,,"15/Jan/11 15:36;davsclaus;I polished the code and added a comment why we only validate the last use-case.;;;","15/Jan/11 16:25;davsclaus;See CAMEL-2920

I improved the validation check to test in all 3 cases now.

trunk: 1059363.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loading routes using loadRouteDefinition from CamelContext lacks some logic from camel-core-xml,CAMEL-3543,12495591,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Jan/11 14:25,25/Oct/11 11:36,14/Jul/23 05:45,15/Jan/11 07:47,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"We have shared logic in camel-core-xml to use when build / loading routes from XML using JAXB. The routes must be prepared before they are usable for creating the runtime processors.

The logic should be moved into camel-core in the model package so we have it centralized and its more easy to reuse

See nabble
http://camel.465427.n5.nabble.com/Loading-routes-from-XML-files-with-Camel-2-4-0-tp3340082p3340082.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76228,,,Sat Jan 15 13:47:03 UTC 2011,,,,,,,,,,,"0|i01vdz:",8854,,,,,,,,,,,,,,,,,,,,"14/Jan/11 15:40;davsclaus;trunk: 1059045.;;;","15/Jan/11 13:47;davsclaus;trunk: 1059327.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jt400DataQueueConsumer incorrectly implements timeout semantics (jt400 component),CAMEL-3540,12495503,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jloureiro,jloureiro,13/Jan/11 15:53,25/Oct/11 11:36,14/Jul/23 05:45,13/Jan/11 16:59,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"Jt400DataQueueConsumer implementation of receive(long) passes the timeout argument directly to com.ibm.as400.access.DataQueue.read(int), not performing unit conversion. However, Jt400DataQueueConsumer.receive(long) accepts milliseconds, whereas DataQueue.read(int) accepts seconds as the time unit.

Also, invoking Jt400DataQueueConsumer.receive() results in a call to DataQueue.read(), which is not a blocking call; on the contrary, it will not wait for entries.

Code snippet below.

{code:title=Jt400DataQueueConsumer.java|borderStyle=solid}
        DataQueue queue = endpoint.getDataQueue();
        try {
            DataQueueEntry entry;
            if (timeout >= 0) {
                entry = queue.read((int)timeout);
            } else {
                entry = queue.read();
            }
{code}

Note that the submitted patch floors the timeout value when converting to seconds, but different rounding might be desired, which should be specified in the class documentation.",,jloureiro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Jan/11 15:57;jloureiro;Jt400DataQueueConsumer.patch;https://issues.apache.org/jira/secure/attachment/12468260/Jt400DataQueueConsumer.patch","13/Jan/11 15:57;jloureiro;Jt400DataQueueConsumerTest.java;https://issues.apache.org/jira/secure/attachment/12468261/Jt400DataQueueConsumerTest.java",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76229,,,Thu Jan 13 16:59:41 UTC 2011,,,,,,,Patch Available,,,,"0|i01vdb:",8851,,,,,,,,,,,,,,,,,,,,"13/Jan/11 16:59;davsclaus;trunk: 1058659.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-snmp - Does not support tcp protocol,CAMEL-3537,12495465,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/11 08:12,25/Oct/11 11:35,14/Jul/23 05:45,13/Jan/11 08:20,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-snmp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-snmp-2-5-problems-tp3339373p3339373.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76230,,,Thu Jan 13 08:20:38 UTC 2011,,,,,,,,,,,"0|i01vcn:",8848,,,,,,,,,,,,,,,,,,,,"13/Jan/11 08:20;davsclaus;trunk: 1058457;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregation fails to call onComplete for exchanges if the aggregation is after a bean or process.,CAMEL-3535,12495418,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bfeaver,bfeaver,12/Jan/11 20:43,25/Oct/11 11:36,14/Jul/23 05:45,14/Jan/11 10:37,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"When creating a route that contains an aggregation, if that aggregation is preceded by a bean or process, it will fail to call AggregateOnCompletion.onComplete(). I've attached a unit test that can show you the behavior. Trace level loggging will need to be enabled to see the difference. With the call to the bean, it won't show the following log entry:
{noformat}TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: ab]{noformat}
If you remove the bean call, it'll start calling onComplete() again.

What I've noticed is that if this call is not made, it ends up in a memory leak since the inProgressCompleteExchanges HashSet in AggregateProcessor never has any exchange ID's removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3317,,"12/Jan/11 20:45;bfeaver;AggregationTest.java;https://issues.apache.org/jira/secure/attachment/12468161/AggregationTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76231,,,Fri Jan 14 17:02:51 UTC 2011,,,,,,,,,,,"0|i01vc7:",8846,,,,,,,,,,,,,,,,,,,,"13/Jan/11 06:19;davsclaus;Works fine in trunk;;;","13/Jan/11 18:44;bfeaver;I noticed in the test that you committed, that you changed it to use a completion size instead of a completion interval or timeout. After running it against trunk with completion size, I see it does in fact call the AggregateOnCompletion.onComplete(). However, I'm still noticing that if you set an interval or timeout, it doesn't appear to hit that method.;;;","13/Jan/11 19:20;davsclaus;Brain this route works fine as well
{code}
                from(""seda:start"")
                    .bean(TestBean.class)
                    .aggregate(constant(""true""), new BodyInAggregatingStrategy())
                        .completionInterval(2000)
                        .to(""mock:result"");
{code}

Trace logging show the interval task triggers and invokes the onComplete
{code}

2011-01-13 20:20:06,218 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval triggered for correlation key: true
2011-01-13 20:20:06,219 [eTimeoutChecker] DEBUG AggregateProcessor             - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,221 [eTimeoutChecker] DEBUG AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B] complete.
2011-01-13 20:20:06,223 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval task complete
{code};;;","13/Jan/11 20:26;bfeaver;Even in your output the line I'm expecting is missing. Hope this clears up what I'm seeing. Here's the output when it works

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@77546dbc
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

Here's the output when it doesn't

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@614a75bb
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

The difference between the two is the following line:

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
{noformat}

This would be written to the log in AggregateProcesor$AggregateOnCompletion.onComplete() on or around line 544 in AggregateProcessor.

{code}        public void onComplete(Exchange exchange) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Aggregated exchange onComplete: "" + exchange);
            }

            // only confirm if we processed without a problem
            try {
                aggregationRepository.confirm(exchange.getContext(), exchangeId);
                // and remove redelivery state as well
                redeliveryState.remove(exchangeId);
            } finally {
                // must remember to remove in progress when we are complete
                inProgressCompleteExchanges.remove(exchangeId);
            }
        }
{code}

The lack of the inProgressCompleteExchanges.remove(exchangeId); call is precisely what's causing inProgressCompleteExchanges to grow larger and not get cleaned up.;;;","14/Jan/11 01:30;bfeaver;Looking through it a bit more, I believe the problem is related to the Pipeline that is created when there is a bean before the aggregation. Without the Pipeline, each exchange's unit of work is done after each iteration of the aggregation. When there is a pipeline, the pipeline is creating the next exchange as a copy of the first exchange and the unit of work for the copy is what is done instead of the original exchange. But the exchange that is stored within the aggregation repository is the original exchange, still with a unit of work defined (it hasn't been done, and therefore hasn't been set to null). When the aggregation completes, the UnitOfWorkProcessor finds the unit of work in the original exchange and doesn't complete that unit of work (process() method in UnitOfWorkProcessor).

{code}
// There was an existing UoW, so we should just pass through..
// so that the guy the initiated the UoW can terminate it.
return processor.process(exchange, callback);
{code}

Since the unit of work never gets done, it never calls the AggregateOnCompletion.onComplete() method. In a debugger, I ended up nulling out the UnitOfWork on the exchange before it finished the aggregation and it worked as expected.;;;","14/Jan/11 09:45;davsclaus;Thanks Brian for explaining it in more details. I will look into it.;;;","14/Jan/11 10:37;davsclaus;trunk: 1058930.

Thanks Brian it should be fixed now. Can you test it on yours side as well.;;;","14/Jan/11 17:02;bfeaver;Confirmed. Working for me as well.;;;",,,,,,,,,,,,,,,,,,,,,,
Stopping a route has side effects on adviced routes,CAMEL-3534,12495386,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jfansler,jfansler,12/Jan/11 16:10,02/May/13 02:29,14/Jul/23 05:45,17/Apr/11 14:27,2.6.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-core,,,,0,,,,,,,,,"See nable:
http://camel.465427.n5.nabble.com/errorHandler-when-stopping-routes-in-test-td3335015.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3878,"12/Jan/11 16:14;jfansler;StopRouteImpactsErrorHandlerTest.java;https://issues.apache.org/jira/secure/attachment/12468134/StopRouteImpactsErrorHandlerTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,68806,,,Sun Apr 17 11:21:33 UTC 2011,,,,,,,,,,,"0|i01vbz:",8845,,,,,,,,,,,,,,,,,,,,"12/Jan/11 16:14;jfansler;Attached is the unit test I have to recreate the issue.;;;","12/Jan/11 16:32;davsclaus;We will revisit this when we work on Camel 3.0 having a more dynamic engine when applying interceptors, error handlers at runtime;;;","12/Jan/11 16:33;davsclaus;And btw you should stop the route before you do the advice, then it may not cause side effects;;;","12/Jan/11 16:44;jfansler;You are correct Claus, moving the stop to before the advice makes the issue go away. I had set it up this way because I normally do the advice configuration in the ""setup"" call for a testing class. I then created a number of different tests/methods within the class. This causes the route to be restarted before each test, thus my call to stop it after the advice. Maybe this isn't the best way to setup my normal tests.;;;","17/Apr/11 11:21;davsclaus;CAMEL-3878 fixes this issue as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
scala - xpath not working together with choice/when,CAMEL-3531,12495334,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cpmcdaniel,cpmcdaniel,12/Jan/11 05:17,25/Oct/11 11:35,14/Jul/23 05:45,24/Apr/11 17:00,2.5.0,,,,,,,,,,,,2.7.3,2.8.0,,,camel-scala,,,,0,,,,,,,,,"When using the Scala DSL, xpath expressions inside when() do not work as expected. As an example:
{code:none}
     ""direct:a"" ==> {
     choice {
        when (xpath(""//hello"")) to (""mock:english"")
        when (xpath(""//hallo"")) {
          to (""mock:dutch"")
          to (""mock:german"")
        } 
        otherwise to (""mock:french"")
      }
    }

// Send messages
""direct:a"" ! (""<hello/>"", ""<hallo/>"", ""<hellos/>"")
{code}

Here we should receive 1 message in each of the mocks. For whatever reason, all 3 messages go to mock:english. Similar routes work as expected with the Java DSL. ","Ubuntu Linux 10.04, java 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Jan/11 05:18;cpmcdaniel;XPathContentBasedRouterTest.scala;https://issues.apache.org/jira/secure/attachment/12468109/XPathContentBasedRouterTest.scala",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14125,,,Sun Apr 24 16:00:04 UTC 2011,,,,,,,,,,,"0|i01vbb:",8842,,,,,,,,,,,,,,,,,,,,"12/Jan/11 05:18;cpmcdaniel;Here is the unit test that exercises this bug. ;;;","13/Jan/11 04:36;cpmcdaniel;From what I can tell so far, the same method is being used for both the splitter and when/filter. The first message hits the //hello XPath expression and returns a NodeList of size 1, the message goes to mock:english. The second and third messages hit the //hello XPath and return a NodeList of size 0. I'm guessing since this is not a Boolean, it is assuming a non-null result is true. I'm not sure yet how to patch this. ;;;","16/Jan/11 15:31;davsclaus;Thanks Craig for looking into this.

We could use some help with the camel-scala component. So if you got the time and energy. For example look for EIPs and options which hasn't been ported to the scala DSL yet.;;;","24/Apr/11 16:00;davsclaus;Yeah I have reproduced the issue as well. The problem is that the xpath is evaluated as an expression and not as a predicate in the filter EIP in Scala DSL.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-atom - Issue with seda consumer,CAMEL-3529,12495280,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jan/11 18:26,25/Oct/11 11:35,14/Jul/23 05:45,12/Jan/11 07:52,,,,,,,,,,,,,2.6.0,,,,camel-atom,,,,0,,,,,,,,,"This test fails
https://hudson.apache.org/hudson/job/Camel.trunk.fulltest/org.apache.camel$camel-atom/109/testReport/org.apache.camel.component.atom/AtomGoodBlogsTest/testFiltering/

There is an issue with camel-atom starting 2 consumers. I have to dig into this, next morning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76232,,,Wed Jan 12 07:52:35 UTC 2011,,,,,,,,,,,"0|i01vav:",8840,,,,,,,,,,,,,,,,,,,,"12/Jan/11 07:52;davsclaus;trunk: 1058013.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HybridSourceDataBinding not thread safe...,CAMEL-3528,12495270,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,11/Jan/11 16:44,25/Oct/11 11:35,14/Jul/23 05:45,11/Jan/11 17:45,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"
The HybridSourceDataBinding in camel-cxf is not thread safe.  The readers/writers in CXF hold state (like schemas and properties) and  must be created when needed.    

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Jan/11 16:45;dkulp;HybridSourceDataBinding.patch;https://issues.apache.org/jira/secure/attachment/12468025/HybridSourceDataBinding.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,14173,,,Tue Jan 11 17:45:53 UTC 2011,,,,,,,Patch Available,,,,"0|i01van:",8839,,,,,,,,,,,,,,,,,,,,"11/Jan/11 17:45;hadrian;Committed in r1057758. Thanks Dan for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SplitterWithXqureyTest refereces Sun JDK specific classes,CAMEL-3526,12495205,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,dkulp,dkulp,11/Jan/11 03:51,25/Oct/11 11:35,14/Jul/23 05:45,11/Jan/11 05:11,,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"
The SplitterWithXqureyTest references com.sun classes that are internal to the Sun JDK.  This makes it not build with an IBM jdk, but also causes errors in Eclipse as eclipse prohibits access to them.

Will attach patch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Jan/11 03:51;dkulp;SplitterWithXqureyTest.patch;https://issues.apache.org/jira/secure/attachment/12467968/SplitterWithXqureyTest.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76233,,,Tue Jan 11 05:11:26 UTC 2011,,,,,,,Patch Available,,,,"0|i01va7:",8837,,,,,,,,,,,,,,,,,,,,"11/Jan/11 05:11;njiang;Applied patch with thanks to Dan Kulp.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with camel-soap - <dataFormats> -  JAXBContext not created,CAMEL-3499,12494703,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,05/Jan/11 10:07,06/Jan/11 10:08,14/Jul/23 05:45,06/Jan/11 10:03,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"I would like to use camel-soap into the following camel route

   <cxf:cxfEndpoint id=""busServicesFinder""
                    address=""http://localhost:8282/cxf/serviceFinder""
                    serviceClass=""fr.client.proxy.Services"">
   </cxf:cxfEndpoint>

   <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

       <dataFormats>
           <soapjaxb id=""soap"" contextPath=""fr.client.proxy""/>
       </dataFormats>

       <route>
           <from uri=""cxf:bean:busServicesFinder?dataFormat=MESSAGE""/>
           <log message=""WebService called"" loggingLevel=""INFO""/>
           <!-- <convertBodyTo type=""String""/> -->
           <unmarshal ref=""soap""/>
           ...

but I get the following error in karaf when CXF extract the content and parse it with JAXB

Additional info

>  * which jaxb bundle is/are deployed ?
[ 200] [Active     ] [            ] [       ] [   60] Apache
ServiceMix :: Bundles :: jaxb-impl (2.1.13.1)

>  * does the system bundle export the sun packages ?
No

200 com.sun.xml.bind.v2
  200 com.sun.xml.bind.v2.model.annotation
  200 com.sun.xml.bind.unmarshaller
  200 com.sun.xml.bind.api.impl
  200 com.sun.xml.bind.v2.schemagen.episode
  200 com.sun.xml.bind.v2.util
  200 com.sun.xml.bind.v2.runtime.unmarshaller
  200 com.sun.xml.bind.marshaller
  200 com.sun.xml.bind.v2.model.runtime
  200 com.sun.xml.bind.v2.runtime.reflect.opt
  200 com.sun.xml.bind.v2.schemagen.xmlschema
  200 com.sun.xml.bind
  200 com.sun.xml.bind.v2.model.core
  200 com.sun.xml.bind.v2.runtime.output
  200 com.sun.xml.bind.v2.bytecode
  200 com.sun.xml.bind.api
  200 com.sun.xml.bind.v2.model.impl
  200 com.sun.xml.bind.v2.model.nav
  200 com.sun.xml.bind.v2.schemagen
  200 com.sun.xml.bind.util
  200 com.sun.xml.bind.v2.runtime.reflect
  200 com.sun.xml.bind.v2.runtime
  200 com.sun.xml.bind.annotation
  200 com.sun.xml.bind.v2.runtime.property

>  * is there a boot delegation on the com.sun.* packages from the jre ?
Yes (karaf - 2.1-SNAPSHOT)

{code}
as thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Unable to create context
       at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:223)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:200)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:113)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[598:org.apache.cxf.bundle:2.2.11]
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_22]
       at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_22]
       at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_22]
       at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:111)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:311)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:275)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)[598:org.apache.cxf.bundle:2.2.11]
       at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.Server.handle(Server.java:326)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
Caused by: java.io.IOException: Unable to create context
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:80)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:72)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:151)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.unmarshal(SoapJaxbDataFormat.java:226)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:51)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:174)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:80)[600:org.apache.camel.camel-cxf:2.5.0]
       ... 23 more
Caused by: javax.xml.bind.JAXBException: Unable to create context
 - with linked exception:
[java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:72)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:77)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:73)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.createContext(SoapJaxbDataFormat.java:286)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.getContext(JaxbDataFormat.java:183)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:126)[602:org.apache.camel.camel-jaxb:2.5.0]
       ... 47 more
Caused by: java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)
       at java.lang.Class.getMethod(Class.java:1605)[:1.6.0_22]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       ... 53 more
{code}",Apache Karaf 2.1-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3505,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76236,,,Thu Jan 06 10:08:48 UTC 2011,,,,,,,,,,,"0|i01v4f:",8811,,,,,,,,,,,,,,,,,,,,"06/Jan/11 03:32;njiang;@ Charles,
As you know, JDK 1.6 also shipped the jaxb impl. If you enable the boot delegation,  there could be more then two jaxb implementation will be located by the jaxb-api.
Can you try to run the test case within JDK 1.5 or don't enable the boot delegation of ""com.sun.xml"" and try again?

BTW, I committed an OSGi unit test with pax exam into camel trunk, it works well.;;;","06/Jan/11 07:53;cmoulliard;I have removed the two bundles providing JAXB support to only use what is provided by JDK 1.6

[  61] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.5.0
[  63] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.13_1

BUT now I'm faced to the following error with camel-soap bundle

It cannot find the following packages

javax.xml.ws;version=""[2.1,3)"",
org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

but javax.xml.ws is well exported by JDK ....;;;","06/Jan/11 08:30;njiang;The jaxax.xml.ws is exported by JDK, the package has no version range, 
if we install other JAXWS API bundle,  I'm not sure the OSGi platform can help us to resolve it.

""org.xmlsoap.schemas.soap.envelope"" is exported by camel-soap bundle, it should not export the package which it exports.;;;","06/Jan/11 08:38;cmoulliard;I propose that we remove the version range of camel-soap to allow to work with packages exported by JDK

{code}
Import-Package = 
	javax.jws;version=""[2.0,3)"",
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws;version=""[2.1,3)"",
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)"",
	org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

{code}

--> should become

{code}
Import-Package = 
	javax.jws,
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws,
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)""
{code};;;","06/Jan/11 10:03;cmoulliard;If we want to support packages exported by JRE/JDK while packages exported by ServiceMix bundles or specs, then we should add as version range like this

ex: javax.jws;version=""[0,3)"",

I have made the change manually into the manifest of camel-soap and being able to deploy my camel route;;;","06/Jan/11 10:08;njiang;committed the patch into Camel trunk repository.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Splitter Component: Setting 'streaming = ""true""' breaks error handling",CAMEL-3498,12494700,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsteppac,rsteppac,05/Jan/11 09:38,25/Oct/11 11:36,14/Jul/23 05:45,06/Jan/11 15:55,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"Setting 'streaming = ""true""' breaks error handling:
If an exception is thrown in a processor, the exception in the subExchange is copied to the original exchange in MulticastProcessor line 554. In Splitter line 140 the original exchange is copied, including the exception that was thrown while processing the previous exchange. This prevents all subsequent exchanges from being processed successfully.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76237,,,Thu Jan 06 15:55:45 UTC 2011,,,,,,,,,,,"0|i01v47:",8810,,,,,,,,,,,,,,,,,,,,"05/Jan/11 10:43;davsclaus;Try with 2.6-SNAPSHOT as said on user forum and if its still an issue (you think) then attach a test case / sample. And pin point what you expect to happen.
;;;","05/Jan/11 10:43;davsclaus;See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html;;;","06/Jan/11 09:29;rsteppac;The problem is still present in the 2.6-SNAPSHOT.

Expectation: 
If in a route like below an exception is raised in the line validation processor, then that exception should be logged once and the message exchange for that particular source line should not be forwarded to the destination. Subsequent source lines that pass validation should be forwarded to the destination.

Actual:
The first source line failing validation/raising an exception prevents all subsequent source lines from being forwarded to the destination. For every subsequent source line the exception of the one failing line is logged again.

<camel:route id=""fileConsumer1"">
	<camel:from uri=""file://c:/tmp/"" />
	<camel:split streaming=""true"">
		<camel:tokenize token=""\r\n"" />
		<camel:process ref=""myValidationProcessorThrowingExceptionsOnFail"" />
		<camel:to uri=""activemq:queue:MY.TOKEN.QUEUE"" />
	</camel:split>
</camel:route>;;;","06/Jan/11 14:00;davsclaus;It doesn't matter if you use streaming or not.
;;;","06/Jan/11 15:55;davsclaus;trunk: 1055913;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Splitter Component: Setting 'streaming=""true"" parallelProcessing=""true""' consumes large amounts > of heap space for big original messages",CAMEL-3497,12494696,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsteppac,rsteppac,05/Jan/11 09:21,25/Oct/11 11:35,14/Jul/23 05:45,08/Jan/11 17:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"Setting 'streaming=""true"" parallelProcessing=""true""' consumes large amounts of heap space for big original messages. E.g. 1024m of heap is not enough to process an 80Mb with 500'000 lines, splitting it line by line.
The problem seems to be the ArrayList in MulticastProcessor line 224. It contains a Future<Exchange> object for every token delivered by the java.util.Scanner. The list is only cleared (going out of scope) after all Future objects have been completed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76238,,,Mon Jan 10 09:59:46 UTC 2011,,,,,,,,,,,"0|i01v3z:",8809,,,,,,,,,,,,,,,,,,,,"05/Jan/11 10:44;davsclaus;See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html;;;","05/Jan/11 12:17;davsclaus;Yeah the tasks list is only used for cancelling tasks which isn't needed to be processed anymore due we are done due timeout or stop on exception. So it should be possible to refactor the code to not use a task list for that. ;;;","05/Jan/11 15:03;davsclaus;The CompletionService holds a reference to the Future so there is no gain really.;;;","05/Jan/11 17:36;davsclaus;The issue is the splitter copies the exchange for each splitted message. And the CompletionService keeps reference to all exchanges, which means we end up with a lot of Exchange at once in memory which eats up memory.

Will have to come up with some way of discarding not needed exchanges during processing. Maybe even using something else than the CompletionService if its the culprint.
I added this to the known issues to Camel 2.5 release notes.;;;","06/Jan/11 09:35;davsclaus;Camel 3.0 will have internal optimization which helps reducing memory footprint used during routing.;;;","07/Jan/11 14:07;davsclaus;trunk on Camel 2.6 in rev 1056325:
Cancelling future tasks is now done using a running boolean instead of a keeping a big array list with the future references.;;;","07/Jan/11 16:43;davsclaus;trunk on Camel 2.6 in rev 1056380:

I have reduced memory consumption used, which should allow it to be a bit better. But the splitter still uses a bit additional memory due the splitting is based on a copy of the input message for each splitted message.

Ralf you are welcome to test again and see if you can process a bit more than previously.;;;","08/Jan/11 10:49;davsclaus;Okay good news. I refactored the logic so Camel now aggregates the parallel tasks on-the-fly.

This makes a tremendous difference. Now I can split a file into 50.000 sub messages and process that in 7 sec, using at most 18mb.
Before I would hit an issue at about 25.000-30.000 message and hit OOME with 130mb.

Since the logic is more complex because there is a separate tasks which aggregates on the fly, while the other task submit new tasks, there is logic to signal between the two tasks. They kinda need to agree when there are no more messages to split, and when it has aggregated all of those.;;;","08/Jan/11 17:27;davsclaus;I ran a test with 1.000.000 rows in a file
{code}
2011-01-08 18:25:44,216 [read #9 - Split] INFO  split                          - Received: 1000000 messages so far. Last group took: 50 millis which is: 20,000 messages per second. average: 17,775.566
2011-01-08 18:25:44,217 [main           ] INFO  SplitterParallelBigFileTest    - Took 57.423 seconds
2011-01-08 18:25:44,218 [://target/split] INFO  route1                         - Done splitting bigfile.txt
{code}

And the memory usage was at most 33mb at peak.;;;","08/Jan/11 17:29;davsclaus;trunk: 1056744.

Now it should run with low memory consumption and you should be able to process very big files.

Ralf fell free to test with latest code on your system.;;;","10/Jan/11 09:59;davsclaus;Fixed rare potential deadlock issue with aggregate task not being given time to run due thread pool overloaded when running in parallel mode on multicast/splitter.

trunk: 1057139.;;;",,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in DefaultCamelContext.removeRouteDefinitions(),CAMEL-3493,12494663,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jn,jn,05/Jan/11 01:09,25/Oct/11 11:35,14/Jul/23 05:45,05/Jan/11 06:39,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"I get the following exception in DefaultCamelContext.removeRouteDefinitions().  We are removing route definitions from multiple threads.  I see synchronization in various other methods, but not this one. 

Caused by: java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at java.util.AbstractCollection.removeAll(AbstractCollection.java:336)
	at org.apache.camel.impl.DefaultCamelContext.removeRouteDefinitions(DefaultCamelContext.java:588)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76239,,,Wed Jan 05 06:39:08 UTC 2011,,,,,,,,,,,"0|i01v33:",8805,,,,,,,,,,,,,,,,,,,,"05/Jan/11 01:14;jn;We are also adding routes from multiple threads.  Although I haven't seen a problem yet, from looking at the source code it looks like the same problem exists with addRouteDefinitions().;;;","05/Jan/11 06:39;davsclaus;trunk: 1055309;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
 BindyCsvDataFormat broken for pipe delimited files,CAMEL-3489,12494633,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,steven.lewis,steven.lewis,04/Jan/11 19:32,25/Oct/11 11:35,14/Jul/23 05:45,05/Jan/11 09:30,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,,,,"Attempting to unmarshall a pipe delimited CSV file into a POJO using Bindy causese the first and last character the the line processed to be dropped.  It appears that the BindyCsvDataFormat class removes the first and the last character from the line read from the CSV if the seperator is > 1 characters in length (see below or line 162-165 in BindyCsvDataFormat).  For pipe delimited files, you need to specify \\| as the seperator, as | is not evaluated correctly as a java regex by the split fuction.  This leads to the first and last character for the line being parsed being dropped.  From the comments it appears a ""fix"" was added to remove the first and last character of the line when the seperator contains quotes or double quotes.  Making this determination using the length of the seperator, rather than evaluating using a regex seems to be a poor solution that breaks other CSV delimiters.

See Attached for an code example.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/11 19:37;steven.lewis;BindyPipeDelimiterBugTest.java;https://issues.apache.org/jira/secure/attachment/12467458/BindyPipeDelimiterBugTest.java","04/Jan/11 19:37;steven.lewis;bug.txt;https://issues.apache.org/jira/secure/attachment/12467457/bug.txt",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76240,,,Wed Jan 05 09:30:51 UTC 2011,,,,,,,,,,,"0|i01v27:",8801,,,,,,,,,,,,,,,,,,,,"04/Jan/11 19:37;steven.lewis;place bug.txt in a directory called bug;;;","05/Jan/11 09:30;davsclaus;trunk: 1055373.

Also fixed issue with using quoted csv records.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-juel fails to validate due to missing import,CAMEL-3487,12494622,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,tjsnell,tjsnell,04/Jan/11 17:49,25/Oct/11 11:36,14/Jul/23 05:45,04/Jan/11 19:32,,,,,,,,,,,,,2.6.0,,,,camel-juel,,,,0,,,,,,,,,Needed servlet-api,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/11 17:52;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467444/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76241,,,Tue Jan 04 19:32:26 UTC 2011,,,,,,,Patch Available,,,,"0|i01v1r:",8799,,,,,,,,,,,,,,,,,,,,"04/Jan/11 19:32;hadrian;Patch applied (r1055149) with thanks to Tracy. Great contribution, keep them coming.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring feature dependency error in features.xml,CAMEL-3484,12494553,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tjsnell,tjsnell,tjsnell,04/Jan/11 01:58,04/Jan/11 02:36,14/Jul/23 05:45,04/Jan/11 02:36,,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,The spring feature won't load because the feature has the dependencies in the wrong order. Looks like it happened at revision 949956.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/11 02:11;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467390/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76242,,,Tue Jan 04 02:36:30 UTC 2011,,,,,,,Patch Available,,,,"0|i01v13:",8796,,,,,,,,,,,,,,,,,,,,"04/Jan/11 02:19;njiang;@Tracy,
Can you also past the stack trace?
The spring feature wasn't changed for a long time, I'm not sure why the bundle dependencies order can cause this kind error.
 ;;;","04/Jan/11 02:36;tjsnell;Haha. Can we delete this issue and pretend it didn't happen. As a simplistic test I did
{code}install -s ....{code}
for each bundle in the feature. Which of course would give and error if the order was incorrect. However, order doesn't matter in features since each bundled is installed then after all are installed they are each started. Stupid shortcut test on my part!

;;;","04/Jan/11 02:36;tjsnell;Let's just pretend this never happened.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
csv unmarshal and maybe other components uses default encoding ,CAMEL-3483,12494540,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,03/Jan/11 22:53,07/Feb/12 15:08,14/Jul/23 05:45,04/Jan/11 21:54,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,See discussion in Nabble: http://camel.465427.n5.nabble.com/csv-unmarshal-uses-default-encoding-td3325474.html,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4989,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76243,,,2011-01-03 22:53:23.0,,,,,,,,,,,"0|i01v0v:",8795,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContinuationServlet - May produce NPE under heavy load,CAMEL-3479,12494486,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Jan/11 13:01,25/Oct/11 11:35,14/Jul/23 05:45,03/Jan/11 13:36,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-jetty,,,,0,,,,,,,,,"CAMEL-2986 fixes some issue with the CamelContinationServlet.

However under extreme load and under some circumstances you can still get a NPE.

The Jetty guides for writing and using continuation at
http://wiki.eclipse.org/Jetty/Feature/Continuations

Shows a different style for suspend/resume than we currently have implemented. 
I think it's best practice that we refactor the code in camel-jetty to be aligned with the Jetty guide.

I will follow the _Suspend Resume Pattern_ style listed on the Jetty guide.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76244,,,Mon Jan 03 13:36:21 UTC 2011,,,,,,,,,,,"0|i01uzz:",8791,,,,,,,,,,,,,,,,,,,,"03/Jan/11 13:36;davsclaus;trunk: 1054613.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
register several cacheEnpoint with different name,CAMEL-3473,12494248,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tjsnell,skydjol,skydjol,29/Dec/10 14:33,25/Oct/11 11:36,14/Jul/23 05:45,04/Jan/11 14:17,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cache,,,,0,,,,,,,,,"When you declare in camel context

<camel:endpoint id=""cache1"" uri=""cache:cache1"" />
<camel:endpoint id=""cache2"" uri=""cache:cache2"" />
<camel:endpoint id=""cache3"" uri=""cache:cache3"" />

CamelCacheProducer produce systematically  in same cache because in CacheComponent, CacheConfiguration is modified by method createEndpoint

{code:title=CamelCacheProducer.java|borderStyle=solid}

public void process(Exchange exchange) throws Exception {
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Cache Name: "" + config.getCacheName());
        }

        if (cacheManager.cacheExists(config.getCacheName())) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Found an existing cache: "" + config.getCacheName());
                LOG.trace(""Cache "" + config.getCacheName() + "" currently contains ""
                        + cacheManager.getCache(config.getCacheName()).getSize() + "" elements"");
            }
            cache = cacheManager.getCache(config.getCacheName());
        } else {
            cache = new Cache(config.getCacheName(),
                    config.getMaxElementsInMemory(),
                    config.getMemoryStoreEvictionPolicy(),
                    config.isOverflowToDisk(),
                    config.getDiskStorePath(),
                    config.isEternal(),
                    config.getTimeToLiveSeconds(),
                    config.getTimeToIdleSeconds(),
                    config.isDiskPersistent(),
                    config.getDiskExpiryThreadIntervalSeconds(),
                    null);
            cacheManager.addCache(cache);
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Added a new cache: "" + cache.getName());
            }
        }

        String key = exchange.getIn().getHeader(CacheConstants.CACHE_KEY, String.class);
        String operation = exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION, String.class);

        if (operation == null) {
            throw new CacheException(""Operation not specified in the message header ["" + CacheConstants.CACHE_KEY + ""]"");
        }
        if ((key == null) && (!operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL))) {
            throw new CacheException(""Cache Key is not specified in message header header or endpoint URL."");
        }

        performCacheOperation(exchange, operation, key);
    }
{code} 

{code:title=CacheComponent.java|borderStyle=solid}

   public class CacheComponent extends DefaultComponent {
    private CacheConfiguration config;
    private CacheManagerFactory cacheManagerFactory = new CacheManagerFactory();
    
    public CacheComponent() {
        config = new CacheConfiguration();
    }

    public CacheComponent(CamelContext context) {
        super(context);
        config = new CacheConfiguration();
    }

    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }

    public CacheManagerFactory getCacheManagerFactory() {
        return cacheManagerFactory;
    }

    public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) {
        this.cacheManagerFactory = cacheManagerFactory;
    }

    @Override
    protected void doStart() throws Exception {
        super.doStart();
        ServiceHelper.startService(cacheManagerFactory);
    }

    @Override
    protected void doStop() throws Exception {
        ServiceHelper.stopService(cacheManagerFactory);
        super.doStop();
    }
}
{code} 

The resolution could be in CacheComponent

{code:title=CacheComponent.java|borderStyle=solid}
    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        CacheConfiguration   config = new CacheConfiguration();
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }
{code} ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/11 14:05;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12467418/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76245,,,Tue Jan 04 14:17:33 UTC 2011,,,,,,,,,,,"0|i01uyn:",8785,,,,,,,,,,,,,,,,,,,,"31/Dec/10 09:00;davsclaus;Can you elaborate a bit more whats the problem?

Can you attach a test case which demonstrates the issue?

And we love contributions, so you are welcome to work on a patch.
http://camel.apache.org/contributing.html;;;","04/Jan/11 00:45;tjsnell;I think I follow his issue, I hit it in camel-aws. If the configuration is per component that assumes that all endpoints share the same configuration. In camel-aws' case this meant that you couldn't have a route that consumed from one aws account and produced to another (among other things). In this case the URI points to the URI of the last endpoint created, for all endpoints. His change would move the config to the endpoint and solve the problem.

I'll be glad to make the code change and test if no one else is.;;;","04/Jan/11 11:30;davsclaus;Ah yeah Tracy that would be the problem. See the camel-mail component where the Configuration instance is defensively copied when creating an endpoint.;;;","04/Jan/11 14:05;tjsnell;Changed to defensively copy the config to each endpoint on creation. Added a simple test to confirm.;;;","04/Jan/11 14:17;davsclaus;Thanks Tracy for the patch.

trunk: 1055051.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Wiki Page for Google App Engine example needs improving,CAMEL-3464,12494043,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,joed,mrjcleaver,mrjcleaver,24/Dec/10 16:53,24/Apr/11 09:57,14/Jul/23 05:45,24/Dec/10 20:22,2.5.0,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,,,,"[11:26am] MartinCleaver: ok, well I did build it against trunk, I used ""svn co http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-gae camel-example-gae""
[11:26am] MartinCleaver: but the pom.xml didn't work for me
[11:27am] MartinCleaver: maybe I installed google app engine incorrectly, the instructions felt vague
[11:27am] joed: You are buidling a snapshot, you don't have any of the parent pom deps, you'll need the whole source tree most likely.
[11:29am] MartinCleaver: ah - is this mentioned on http://camel.apache.org/tutorial-for-camel-on-google-app-engine.html ? I should have checked out google app engine rather than just a ""Install the http://code.google.com/appengine/downloads.html""
[11:31am] MartinCleaver: and, did installing google app engine not install the parent pom deps?
[11:33am] joed: I just tried that too and that also works fine with mvn clean install
[11:33am] MartinCleaver: ok, so I've screwed up somewhere.
[11:33am] tjsnell: you have snapshot in your repo already though
[11:33am] tjsnell: hrmm
[11:33am] joed: True.
[11:34am] joed: One sec.
[11:34am] tjsnell: trying a clean repo?
[11:34am] MartinCleaver: I was surprised I needed to edit the pom.xml file, but perhaps that's just my naivety
[11:35am] joed: Yeah, those instructions won't work.
[11:35am] MartinCleaver: ah!
[11:36am] • MartinCleaver feels a little vindicated, but mostly thankful
[11:36am] tjsnell: heh
[11:36am] joed: MartinCleaver: you are right, since you followed the instructions - the example gets the null: basically because you have the project only and no the parent poms.
[11:36am] joed: not*
[11:36am] tjsnell: can he set the version to a realeased version not snapshot?
[11:37am] tjsnell: should pull the poms then right?
[11:38am] joed: If you were to build against trunk, it'll work fine
[11:38am] joed: tjsnell: Don't think so, since properties/version/parent/etc still is missing.
[11:39am] tjsnell: ahh
[11:39am] tjsnell: yeah
[11:39am] joed: MartinCleaver: the quickest fix is this : svn co http://svn.apache.org/repos/asf/camel/trunk camel ; cd camel/examples/camel-example-gae ; mvn clean install
[11:40am] joed: We need to improve the wiki page though.",Mac OSX 10.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76246,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,,,,,"0|i01uwn:",8776,,,,,,,,,,,,,,,,,,,,"24/Dec/10 20:22;joed;Fixed svn co instructions on Wiki. ;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy should support clipping fields if they exceed maximum length allowed when using fixed length,CAMEL-3458,12493986,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Dec/10 16:19,24/Apr/11 09:57,14/Jul/23 05:45,23/Dec/10 16:24,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,,,,"Adding a new option to bindy annotation

{code}

    /**
     * Indicates to clip data in the field if it exceeds the allowed length when using fixed length.
     */
    boolean clip() default false;
{code}

Then if enabled it will clip the data so it can fit the length.
Also now Camel throws an exception if the data is too long and you have clip set as false.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76247,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,,,,,"0|i01uvb:",8770,,,,,,,,,,,,,,,,,,,,"23/Dec/10 16:19;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Bindy-fixed-length-length-attribute-and-truncate-tp3312636p3312636.html;;;","23/Dec/10 16:24;davsclaus;trunk: 1052312.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Route scoped onException may pick onException from another route if they are the same class type,CAMEL-3448,12493680,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,20/Dec/10 14:56,24/Apr/11 09:57,14/Jul/23 05:45,20/Dec/10 18:48,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"If you have a clash with route scoped onException and have the exact same class, then the key in the map isn't catering for this. And thus a 2nd route could override the 1st route onException definition.

For example:

from X route A
  onException IOException

from Y route B
  onException IOException

The map should contain 2 entries, but unfortunately it only contain 1. This only happens when its an exact type match.
",,lorrin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76248,,,Sun Apr 24 09:57:12 UTC 2011,,,,,,,,,,,"0|i01ut3:",8760,,,,,,,,,,,,,,,,,,,,"20/Dec/10 18:48;davsclaus;trunk: 1051239.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in camel-printer when not setting media size or omitting sides attribute,CAMEL-3446,12493665,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tmielke,tmielke,20/Dec/10 10:50,24/Apr/11 09:57,14/Jul/23 05:45,20/Dec/10 14:13,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"When specifying a camel-printer configuration that does not include config properties for sides or mediaSize, the camel route will fail to start up with a NullPointerException. E.g. this route

{code:java}
from(""file://target/incoming?delete=true"")
	.to(""lpr://localhost/default"");
{code}

will raise an NPE at route startup time.


",component: camel-printer (Could not select it from components list).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Dec/10 10:52;tmielke;PrinterConfiguration.patch;https://issues.apache.org/jira/secure/attachment/12466619/PrinterConfiguration.patch","20/Dec/10 11:32;tmielke;tests.patch;https://issues.apache.org/jira/secure/attachment/12466623/tests.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76249,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,Patch Available,,,,"0|i01usn:",8758,,,,,,,,,,,,,,,,,,,,"20/Dec/10 10:51;tmielke;Proposed patch attached. It assigned default values for sides and mediaSize attributes if they are not specified as part of the endpoint configuration. 
Also, some additional logging statements included.
;;;","20/Dec/10 11:32;tmielke;Attaching additional JUnit test method (see tests.patch) to test for this bug.;;;","20/Dec/10 14:13;davsclaus;trunk: 1051116.

Thanks Torsten for the patch. I polished it a bit.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JBI ClassLoading issue in SMX 4.x in OsgiPackageScanClassResolver,CAMEL-3442,12493603,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Dec/10 18:56,24/Apr/11 09:57,14/Jul/23 05:45,19/Dec/10 09:18,2.5.0,,,,,,,,,,,,2.6.0,,,,osgi,,,,0,,,,,,,,,"CAMEL-3302 introduced a fallback when using JBI in Apache ServiceMix 4.x.

However it may lead to an issue with ConcurrentModificationException when traversing the list of classloaders.

{code}
            for (ClassLoader classLoader : super.getClassLoaders()) {
                if (!isOsgiClassloader(classLoader)) {
                    find(test, packageName, classLoader, classes);
                }
            }  
{code}

The for loop is line 62 which causes the exception.

Issue reported here
http://camel.465427.n5.nabble.com/ServiceMix-4-Fuse-4-3-0-fuse-03-00-Problems-running-JBI-example-examples-camel-td3309088.html

",,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3302,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76250,,,Sun Apr 24 09:57:08 UTC 2011,,,,,,,,,,,"0|i01urr:",8754,,,,,,,,,,,,,,,,,,,,"19/Dec/10 02:23;ffang;Hi Claus,

I just checked the patch which I appended with CAMEL-3302, my original patch about the concern code is like

+           Set<ClassLoader> set = getClassLoaders();
+            for (ClassLoader classLoader : set.toArray(new ClassLoader[set.size()])) {
+                if (!isOsgiClassloader(classLoader)) {
+                    find(test, packageName, classLoader, classes);
+                }
+            }

With this patch, there should be no ConcurrentModificationException on the Iterator.  Willem revised my patch probably for better performance but introduce potential ConcurrentModificationException.

@Willem
Would you please re-check  my patch,  as classloaders set size isn't big, so change it to an array isn't a big deal IMHO, but this can avoid concurrent problem(such as ConcurrentModificationException).
Another solution I can come up with is change getClassLoaders() in DefaultPackageScanClassResolver

use
classLoaders = Collections.synchronizedSet(new HashSet<ClassLoader>()); 

instead of
classLoaders = new HashSet<ClassLoader>();

But this also bring in performance impact, I still prefer the way in my original patch.

Best Regards
Freeman




;;;","19/Dec/10 07:27;davsclaus;Thanks Freeman

I think we should fix this in the core, so it returns a new set when invoking {{getClassLoaders}}, that will fix this issue for other custom package scan resolvers that may encounter similar issue.

Something like this:
{code}
    public Set<ClassLoader> getClassLoaders() {
        // return a new set to avoid any concurrency issues in other runtimes such as OSGi
        return Collections.unmodifiableSet(new LinkedHashSet<ClassLoader>(classLoaders));
    }
{code};;;","19/Dec/10 09:18;davsclaus;trunk: 1050776.;;;","20/Dec/10 08:37;davsclaus;trunk: 1051019.

Fixed unit test failure;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JAXBDataFormatter should using Spring ApplicationContext's classLoader explicitly,CAMEL-3438,12493539,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,ext2xhb,ext2xhb,17/Dec/10 17:35,25/Oct/11 11:35,14/Jul/23 05:45,05/Feb/11 03:50,2.4.0,,,,,,,,,,,,2.7.0,,,,camel-jaxb,,,,1,,,,,,,,,"JAXBDataFormatter now using JAXBContext.newInstance(path) to create JAXBContext,
but this will using Thread's context classLoader.
this may causing un-expected class or resource not found exceptions;",,sharma_arun_se,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3441,,,"17/Dec/10 17:37;ext2xhb;JaxbDataFormat.java;https://issues.apache.org/jira/secure/attachment/12466472/JaxbDataFormat.java","02/Feb/11 00:47;nickheudecker;JaxbDataFormat.patch.diff;https://issues.apache.org/jira/secure/attachment/12470005/JaxbDataFormat.patch.diff",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76251,,,Sat Feb 05 03:50:36 UTC 2011,,,,,,,,,,,"0|i01uqv:",8750,Regression,,,,,,,,,,,,,,,,,,,"17/Dec/10 17:37;ext2xhb;This is a patch for JAXBDataFormatter to explicitly using Spring Application context's class loader;

major changes exists in the JAXBDataFormatter .getContext() method;;;","17/Dec/10 17:59;davsclaus;Sorry but we cannot accept the patch as it's tied to Spring. Its important the camel-core is independent on any other framework.
Also classloading should work with OSGi, J2EE app servers and whatnot, so its not trivial to do.

That said CamelContext has a classResolver which is runtime agnostic. So I suggest to use that.;;;","17/Dec/10 18:54;ext2xhb;Hi ,Clause

I don't think so.  
I aggree the camel-jaxb component should not dependency to spring

But I don't agree ""manageing context classLoader"" is a trivial things in osgi;

J2EE will managed the context class loader carefully. 
 But osgi doesn't. 

 the osgi specification(expect osgi-enterprise) doesn't give any rules about thread's context class loader;
if you check spring-dm 's reference, even spring-dm just give rules of context class loader for osgi-services configured by spring ; and doesn't give any rules for other situation;

 so the thread context  will act as  jdk default behavior, ""inherit parent thread's context class Loader"", so that's to say:

1)  thread context class loader is leaved as unmanaged in standard osgi environment; 
2) it dependency the thread is how created;

So camel should managed context class loader carefully, otherwise, it hardly to use in standard osgi . servicemix 4 is a standard osgi environment too;

;;;","18/Dec/10 04:11;ext2xhb;Hi:

Could the DataFormatter interface add a initialize method? it need's no arguments. just plain init () method;
if so, we could prepare the jaxb context at initializing time, but not at executing time(because at executing time to create jaxb context , will be unexpected)

If camel doesn't accept , it's unfortunally.
 this means I cannot using jaxb databinding in osgi safely. etc: if I using a global OSGI ThreadPoolExecutor service to serve as the threadpool for camel components, then jaxb convert will failed; (because  threads of ThreadPoolExecutor is not always created in the correct bundles); 

if you check the mail-list in the community, you will find such bug is reported by the other user, not only mine; you can find it by the topic ("" Help with Camel JAXB (SMX4 + Camel 2.1.0)""). the mail is sent very earlier; The original mail illustrate two route, one route start by file component, jaxb will work right; while another route started by ""direct"" endpoint, it will failed.
 I think the reason is file component's thread is created in the spring context loading time, so it inherit the spring extender thread's context class loader.  while the direct endpoint's belong to another user created thread, it's context class loader is not correct, so jaxb will failed;
;;;","18/Dec/10 06:11;njiang;@xuhongbo
You can get the Spring Application Context Classloader from the SpringCamelContext.
But I don't think you can get the CamelContext from the JAXBDataFormatter now.

Maybe we can do some improvement in Camel3.0.
;;;","18/Dec/10 09:31;davsclaus;You ought to be able to implement {{Service}} and {{CamelContextAware}} on the data format to have the CamelContext injected and have start/stop methods invoked.
If possible then extend ServiceSupport which has doStart and doStop callbacks and is capable of storing the state whether its started or not.

That ought to work for DataFormat as well, as it does work for Processor.

Could you try that?

;;;","18/Dec/10 14:54;davsclaus;I took a look and DataFormat didn't have the same level as Components in Camel. So I added support for Service and CamelContextAware callbacks on DataFormat as well.
This allows you much easier to do init logic in the start method. And you have access to CamelContext as well.

I made a slight change to camel-jaxb to use the classloader of CamelContext with JAXB.
Maybe you can try this out. It may need some other tweaks to run with OSGi, but it ought to be the same as you's as we grab the classloader which created SpringCamelContext.

trunk: 1050641.;;;","18/Dec/10 18:12;davsclaus;I have modified JaxbDataFormat a bit more to let it leverage the ApplicationContext classloader if it was present.

I also optimized and removed the need for synchronization to initialize various pieces as we can do this in start now.

trunk: 1050688.;;;","18/Dec/10 18:12;davsclaus;This nabble thread should take about some of the issues reported here
http://camel.465427.n5.nabble.com/Help-with-Camel-JAXB-SMX4-Camel-2-1-0-tp470566p470566.html;;;","19/Dec/10 05:14;ext2xhb;Thanks for thequickly patch;
Just as Claus Ibsen has said, there are still other tweaks in OSGI.

The end user must make ensure that the generated JAXB class is visible to the camel route's bundle;  

some times the end-user should manually import the generated JAXB package , if  the generated JAXB class doesn't exists in the same bundle of camel routes; because the maven-bundle-plugin cannot recognize the spring configuration automatically.;;;","19/Dec/10 08:12;sharma_arun_se;Hi,

Thanks ext2 for taking initiative and pointing out the bug and suggesting solution (though spring centric ;) ).  Thanks Claus and Willem for such a quick action and response. 

I am already working with OSGI and will report back, if I faced any issue.


Thanks,

Arun Kumar (sharma_arun_se);;;","20/Dec/10 06:16;davsclaus;Did you guys have any chance to test this patch in your system, and see if it resolves the JAXB issues you may have?

I think we should also offer a setter so you can set a custom ClassLoader on the JaxbDataFormat.;;;","02/Feb/11 00:45;hadrian;Fails for injected jaxb context.;;;","02/Feb/11 00:47;nickheudecker;Attaching a patch to fix JaxbDataFormat when a JAXBContext is passed in instead of a context path.  In the 2.6.0 version, the passed in JAXBContext is clobbered by the created context.  ;;;","05/Feb/11 03:48;hadrian;Updated fix version to 2.7.0. 
A fix was available in 2.6.0 missing just the case where the context is injected.;;;","05/Feb/11 03:50;hadrian;Patch applied in r1067385. Thanks Nick for spotting this and providing the patch.;;;",,,,,,,,,,,,,,
Undefined header results in Nullpointer when expression is evaluated,CAMEL-3433,12493282,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,blob79,blob79,15/Dec/10 09:17,24/Apr/11 09:58,14/Jul/23 05:45,15/Dec/10 16:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"If you define a filter for a header that is not defined like

from(""p:a"").filter(header(""header"").in(""value"")).to(""p:b"");

it results in a NullPointerException:

{code}
2010-12-15 10:07:45,920 [main] ERROR DefaultErrorHandler            - 
Failed delivery for exchangeId: 0215-1237-1292404064936-0-2. 
Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
	at org.apache.camel.builder.ExpressionBuilder$40.evaluate(ExpressionBuilder.java:955)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:54)
	at org.apache.camel.builder.PredicateBuilder$5.matches(PredicateBuilder.java:127)
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:46)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
{code}

This test reproduces the problem:
{code}
public void testExpressionForUndefinedHeader(){
    Expression type = ExpressionBuilder.headerExpression(""header"");
    Expression expression = ExpressionBuilder.constantExpression(""value"");
    Expression convertToExpression = ExpressionBuilder.convertToExpression(expression, type);
    convertToExpression.evaluate(exchange, Object.class);
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76252,,,Sun Apr 24 09:58:13 UTC 2011,,,,,,,,,,,"0|i01upr:",8745,,,,,,,,,,,,,,,,,,,,"15/Dec/10 16:29;davsclaus;trunk: 1049635.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint has issues with interception http endpoints which has multiple parameters,CAMEL-3430,12493273,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Dec/10 08:05,17/Mar/14 21:08,14/Jul/23 05:45,15/Dec/10 08:39,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/interceptSendToEndpoint-with-dynamic-endpoint-tp3301978p3301978.html

The issue is when any endpoints have parameters which may be re-ordered when the endpoint is normalized.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3434,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76253,,,Sun Apr 24 09:58:15 UTC 2011,,,,,,,,,,,"0|i01up3:",8742,,,,,,,,,,,,,,,,,,,,"15/Dec/10 08:39;davsclaus;trunk: 1049455.;;;","15/Dec/10 14:57;davsclaus;This issue is fixed by CAME-3434 as well. As the first fix wasn't sufficient.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"DefaultCamelContext.getEndpoint(String name, Class<T> endpointType) throws Nullpointer for unknown endpoint",CAMEL-3428,12493240,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,blob79,blob79,14/Dec/10 21:05,24/Apr/11 09:58,14/Jul/23 05:45,15/Dec/10 00:05,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"The method getEndpoint throws an NullPointerException when it's called with an unknown endpoint name:

java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:480)
	at org.apache.camel.impl.DefaultCamelContextTest.testGetEndPointByTypeUnknown(DefaultCamelContextTest.java:95)

The patch is attached.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Dec/10 21:06;blob79;camel.patch;https://issues.apache.org/jira/secure/attachment/12466249/camel.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76254,,,Sun Apr 24 09:58:17 UTC 2011,,,,,,,Patch Available,,,,"0|i01uon:",8740,,,,,,,,,,,,,,,,,,,,"15/Dec/10 00:05;hadrian;Patch applied in r1049343. Many thanks for the contribution.;;;","15/Dec/10 05:47;davsclaus;I changed it to throw a NoSuchEndpointException which is more appropriate in rev: 1049435.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfProducer doesn't callback.done when the operation is oneway.,CAMEL-3426,12493187,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Dec/10 14:02,24/Apr/11 09:57,14/Jul/23 05:45,15/Dec/10 07:38,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"There is a mail thread[1] describes the whole story.
[1]http://camel.465427.n5.nabble.com/file-to-oneway-cxf-service-scenario-does-not-work-with-camel-2-5-0-td3303263.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76255,,,Sun Apr 24 09:57:31 UTC 2011,,,,,,,,,,,"0|i01uo7:",8738,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext is started twice when using camel-blueprint,CAMEL-3425,12493164,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,gnodet,davsclaus,davsclaus,14/Dec/10 10:36,24/Apr/11 09:57,14/Jul/23 05:45,17/Dec/10 15:27,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,"For example if you run the {{testRouteWithAllComponents}} test in {{CamelBlueprintTest}} in tests/camel-itest-osgi you will see _a lot_ of logging. But notice
{code}
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) is starting
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 67-camel-2) started in 0.147 seconds
{code}

Then blueprint does something
{code}
[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) is starting
[Blueprint Extender: 3] INFO org.apache.camel.blueprint.BlueprintCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 4-camel-5) started in 0.071 seconds
{code}

And likewise both CamelContext's is shutdown when the test completes. There are logging events for that as well.

Pay attention to the name of the 1st CamelContext {{67-camel-2}}. This is the *correct* name as its based on the bundle id, our end user Camel application is given. This ensures that the CamelContext from his application has a name which is unique and refers to the bundle id as well.

Now if you look at the 2nd CamelContext being started its given another name {{4-camel-5}}. That id is most likely using a shared bundle id with a low number. For example camel-blueprint or camel-core bundle, or something like that. 

In essence camel-blueprint should only create *one* CamelContext and it should use the {{67-camel-2}} as the name of the CamelContext (eg. include the bundle id of the end user application).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76256,,,Sun Apr 24 09:57:25 UTC 2011,,,,,,,,,,,"0|i01unz:",8737,,,,,,,,,,,,,,,,,,,,"14/Dec/10 10:40;davsclaus;If you compare this to a spring-dm test from tests/camel-itest-osgi. For example org.apache.camel.itest.osgi.core.direct.DirectTest 

{code}
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - ********************************************************************************
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - Testing: (org.apache.camel.itest.osgi.core.direct.DirectTest)
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - ********************************************************************************
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.OSGiIntegrationTestSupport - Get the bundleContext is org.eclipse.osgi.framework.internal.core.BundleContextImpl@53dafbaf
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.OSGiIntegrationTestSupport - Application installed as bundle id: 49
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) is starting
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Debugger: DefaultDebugger is enabled on CamelContext: 49-camel-2
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - JMX is disabled. Using DefaultManagementStrategy.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.osgi.Activator - Found 13 @Converter classes to load
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Route: route1 started and consuming from: Endpoint[direct://start]
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Total 1 routes, of which 1 is started.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) started in 0.188 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.component.mock.MockEndpoint - Asserting: Endpoint[mock://result] is satisfied
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.itest.osgi.core.direct.DirectTest - Testing done: org.apache.camel.itest.osgi.core.direct.DirectTest@109ce4a3
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext:49-camel-2) is shutting down
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 suspension deferred.
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 preparing to shutdown complete.
[Camel (49-camel-2) thread #0 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Route: route1 shutdown complete.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.impl.DefaultInflightRepository - Shutting down with no inflight exchanges.
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Uptime: 0.222 seconds
[RMI TCP Connection(1)-10.0.1.2] INFO org.apache.camel.core.osgi.OsgiDefaultCamelContext - Apache Camel 2.6-SNAPSHOT (CamelContext: 49-camel-2) is shutdown in 0.007 seconds
{code}

As you can see from the log above, CamelContext is only started *once*, and it has been given a name using its bundle id. The end user Camel application was given bundle id 49, which is included in the CamelContext name.

edit: I fixed the logger in DefaultCamelContext so its not static anymore, which means you can see the actual classname. So now it shows {{OsgiDefaultCamelContext}} instead of {{DefaultCamelContext}}. ;;;","17/Dec/10 15:27;gnodet;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/AbstractIntegrationTest.java
Committed r1050422
;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
timestamp property in JpaTraceEventMessage does not specify a temporal type,CAMEL-3419,12492825,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcozapletal,marcozapletal,09/Dec/10 12:00,24/Apr/11 09:58,14/Jul/23 05:45,09/Dec/10 13:10,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-jpa,,,,0,,,,,,,,,"The timestamp property in the JpaTraceEventMessage does not specify a temporal type. This results in an exception using EclipseLink 2.1.0 (and maybe using other JPA frameworks, too). 

Using the annotation  @Temporal(TemporalType.TIMESTAMP) on timestamp should solve this issue.",JPA 2.0 / EclipseLink 2.1.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76257,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,,,,,"0|i01umn:",8731,,,,,,,,,,,,,,,,,,,,"09/Dec/10 13:10;davsclaus;Thanks for reporting.

trunk: 1043957.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using java based RouteBuilder reference in blueprint.xml CameContext definition failing,CAMEL-3413,12492759,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,ivanhoe.abrahams,ivanhoe.abrahams,08/Dec/10 19:28,09/Dec/10 17:04,14/Jul/23 05:45,09/Dec/10 17:04,,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,"Hi 

I am trying to get the Java based RouteBuilder to work using the simple ""camel-osgi-example"" project.
I have downloaded and installed karaf 2.1.2
I also downloaded the latest 2.6-SNAPSHOT build of Camel (8 Dec 2010).

I proceeded to unzip the camel download an in Karaf I installed the ""camel-core"" and ""camel-blueprint"" bundles, (I also installed the servicemix jaxb-impl jar)

I then amended the ""camel-osgi-example"" project blueprint.xml file, so that it creates the example RouteBuilder as a bean, and the references the bean from the CamelContext.

Below is the bluerint.xml file contents,

<?xml version=""1.0"" encoding=""UTF-8""?>

<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.0.0""
	xmlns:tx=""http://aries.apache.org/xmlns/transactions/v1.0.0""
	xmlns:camel=""http://camel.apache.org/schema/blueprint""
	default-activation=""eager"" default-availability=""optional"">


	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<camel:routeBuilder ref=""routeBuilder""/>
<!--		<camel:route>-->
<!--			<camel:from uri=""timer://myTimer?fixedRate=true&amp;period=2000"" />-->
<!--			<camel:bean ref=""myTransform"" method=""transform"" />-->
<!--			<camel:to uri=""log:ExampleRouter"" />-->
<!--		</camel:route>-->
	</camelContext>

	<bean id=""myTransform"" class=""org.apache.camel.example.osgi.MyTransform"">
		<property name=""prefix"" value=""SpringDSL"" />
	</bean>

</blueprint>
 

Now when I deploy this bundle in Karaf I encounter the following exception.

org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize camel context factory
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:271)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:479)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:299)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_21]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_21]
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_21]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_21]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Bean[org.apache.camel.example.osgi.MyTransform@7439aca7] <<< in route: Route[[From[timer://myTimer?fixedRate=true&period=2000]] -> ... because of org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:773)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:654)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1559)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1348)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1257)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1235)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:79)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:72)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:269)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	... 11 more
Caused by: org.apache.camel.RuntimeCamelException: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:56)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:115)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanProcessor.<init>(BeanProcessor.java:60)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.BeanDefinition.createProcessor(BeanDefinition.java:170)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:403)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:770)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 22 more
Caused by: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.aries.blueprint.container.DependencyGraph.getSortedRecipes(DependencyGraph.java:51)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:214)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:702)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 28 more


Regards 
Ivanhoe
 ","Camel 2.6-SNAPSHOT, Karaf 2.1.2 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76258,,,Thu Dec 09 17:04:23 UTC 2010,,,,,,,,,,,"0|i01ulb:",8725,,,,,,,,,,,,,,,,,,,,"08/Dec/10 22:08;gnodet;This exception should already been fixed.  Could you try again tomorrow, or building camel yourself ?

FWIW, I'm actively working on the blueprint stuff to bring it on par with the spring support, so let me know if you have any more problems.;;;","08/Dec/10 22:34;gnodet;Btw, I have a unit test case working already in trunk, so I think this problem has been solved already.  Just make sure to use the latest version.;;;","09/Dec/10 17:02;ivanhoe.abrahams;Hi Guillaume

Sorry for taking so long, I can only do the nice OSGI stuff at home, at work people dont seem to see it as an elegant solution to the modularization problems we have. 
 
Yes I downloaded the latest snapshot version -> 2.6-SNAPSHOT,  and now the example works, also with the java-based RouteBuilder referenced from within the  camelcontext . Thanks

I will try to make a more complex example, maybe one with CXF and JMS components, to see if I hit any other issues.

Thanx

Regards
Ivanhoe;;;","09/Dec/10 17:04;ivanhoe.abrahams;Referencing a Java based routeBuilder from within the CamelContext in blueprint now works.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint should check for if stop DSL has been used,CAMEL-3403,12492706,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Dec/10 07:44,24/Apr/11 09:58,14/Jul/23 05:45,08/Dec/10 08:16,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76259,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,,,,,"0|i01uj3:",8715,,,,,,,,,,,,,,,,,,,,"08/Dec/10 08:16;davsclaus;trunk: 1043330.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty component does not work when authentication is enable,CAMEL-3401,12492632,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,07/Dec/10 15:53,28/Oct/11 13:23,14/Jul/23 05:45,16/Dec/10 07:24,2.5.0,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,"I try to use camel-jetty in a camel route usign LDAP authentication. The authentication mechanisms of Jetty works fine as I'm able to authenticate a LDAP user from the web page but the camel route is not called.

Here is the camel route

{code}
    <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

        <route>
            <from uri=""jetty:http://localhost:8080/services?handlers=securityHandler&amp;matchOnUriPrefix=true""/>
            <onException>
                <exception>java.lang.Exception</exception>
                <!-- we can set the redelivery policy here as well -->
                <redeliveryPolicy maximumRedeliveries=""1""/>
                <handled>
                    <constant>true</constant>
                </handled>
                <transform>
                    <simple>Due to something went wrong</simple>
                </transform>
                <setHeader headerName=""Exchange.HTTP_RESPONSE_CODE"">
                    <simple>500</simple>
                </setHeader>
            </onException>

            <bean ref=""responseBean""/>
        </route>
    </camelContext>
{code}

REMARK : the camel route works fine when authentication is disabled

and the error

{code}
14:56:31,587 | WARN  | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | /services: java.lang.NullPointerException
14:56:31,587 | DEBUG | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.NullPointerException
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:489)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.handle(Server.java:347)[67:org.eclipse.jetty.server:7.1.6.v20100715]

{code}",Apache Karaf 2.1-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76260,,,Fri Oct 28 13:23:41 UTC 2011,,,,,,,,,,,"0|i01uin:",8713,,,,,,,,,,,,,,,,,,,,"07/Dec/10 20:37;njiang;@Charles
How did you setup the security handler to make the LDAP works for the webpage?
Camel manages the connector and handlers itself In the camel-jetty component, so you may need to some way to make sure the security handler is configured rightly. ;;;","08/Dec/10 07:42;cmoulliard;@Willem,

Of course that the security is enabled and works !

{code}
    <bean id=""loginService"" class=""org.eclipse.jetty.plus.jaas.JAASLoginService"">
        <property name=""name"" value=""ldap""/>
        <property name=""loginModuleName"" value=""ldap""/>
        <property name=""roleClassNames"">
            <list>
                <value>org.apache.karaf.jaas.modules.RolePrincipal</value>
            </list>
        </property>
    </bean>

    <bean id=""constraint"" class=""org.eclipse.jetty.http.security.Constraint"">
        <property name=""name"" value=""BASIC""/>
        <property name=""roles"" value=""system""/>
        <property name=""authenticate"" value=""true""/>
    </bean>

    <bean id=""constraintMapping"" class=""org.eclipse.jetty.security.ConstraintMapping"">
        <property name=""constraint"" ref=""constraint""/>
        <property name=""pathSpec"" value=""/*""/>
    </bean>

    <bean id=""securityHandler"" class=""org.eclipse.jetty.security.ConstraintSecurityHandler"">
        <property name=""authenticator"">
            <bean class=""org.eclipse.jetty.security.authentication.BasicAuthenticator""/>
        </property>
        <property name=""constraintMappings"">
            <list>
                <ref bean=""constraintMapping""/>
            </list>
        </property>
        <property name=""loginService"" ref=""loginService""/>
        <property name=""strict"" value=""false""/>
    </bean>
{code}

I don t know if this is related or not but during camel starting up, the following WARN is generated I have checked the doc of Jetty and I don t know how to setup IdentityService for JAAS authentication

{code}
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   70 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | STARTED org.eclipse.jetty.plus.jaas.JAASLoginService@2433cf0f
18:38:41,711 | WARN  | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | FAILED ConstraintSecurityHandler@617ce686: java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
	at org.eclipse.jetty.security.authentication.LoginAuthenticator.setConfiguration(LoginAuthenticator.java:37)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:333)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:229)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.doStart(Server.java:242)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:233)[73:org.apache.camel.camel-jetty:2.5.0]
	at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)[60:org.apache.camel.camel-http:2.5.0]
	at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:52)[60:org.apache.camel.camel-http:2.5.0]

{code}
;;;","16/Dec/10 07:24;cmoulliard;Problem solved with last JAAS module of Karaf and workaround exist (adding an IdentityService in the spring xml file);;;","28/Oct/11 13:23;metatech;The line to add is the following : 
<bean id=""identityService"" class=""org.eclipse.jetty.security.DefaultIdentityService""/>
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Automatically imported beans are not taken into account in camel-blueprint (InterceptStrategy, LifecycleStrategy, etc...)",CAMEL-3398,12492550,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,06/Dec/10 22:20,24/Apr/11 09:57,14/Jul/23 05:45,07/Dec/10 14:57,,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76261,,,Sun Apr 24 09:57:47 UTC 2011,,,,,,,,,,,"0|i01uhz:",8710,,,,,,,,,,,,,,,,,,,,"06/Dec/10 23:24;gnodet;This issue seems much more complicated than it seems.
The reason is that in order for the camel blueprint namespace handler to find the dependencies (such as components, etc...) so that the route will wait until components are available, the handler does initialize the CamelContextFactoryBean while the handler is parsing the xml.  The bad effect is that beans that are declared after the camel context won't be available yet in the blueprint metadata registry.

I need to investigate a work around for that.;;;","07/Dec/10 14:57;gnodet;The drawback is that you can't inject an initialized CamelContext into something else, as the initialization is done after all singletons are built.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter - Exchange.CORRELATION_ID should point back to parent Exchange id,CAMEL-3395,12492164,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/10 15:02,24/Apr/11 09:57,14/Jul/23 05:45,06/Dec/10 15:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Splitted-exchange-has-incorrect-correlation-ID-tp3289354p3289354.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76263,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,,,,,"0|i01uhb:",8707,,,,,,,,,,,,,,,,,,,,"06/Dec/10 15:29;davsclaus;trunk: 1042676.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter and Multicast EIP marks exchange as exhausted to early if exception was thrown from an evaluation,CAMEL-3394,12492149,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/10 12:59,23/Nov/12 13:52,14/Jul/23 05:45,06/Dec/10 14:20,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Cannot-handle-Exception-thrown-from-Splitter-Expression-tp3286043p3286043.html",,chris889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76264,,,Fri Nov 23 13:52:30 UTC 2012,,,,,,,,,,,"0|i01uh3:",8706,,,,,,,,,,,,,,,,,,,,"06/Dec/10 14:20;davsclaus;trunk: 1042656.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;","23/Nov/12 13:52;chris889;{code}
Can it be that the issue here is back since version 2.9.4? 

The following route works ok in camel 2.9.3 -> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.

from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();

{code}
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
routeBuilder ref not working in camel 2.5.0,CAMEL-3390,12492093,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,ivanhoe.abrahams,ivanhoe.abrahams,05/Dec/10 09:40,24/Apr/11 09:57,14/Jul/23 05:45,07/Dec/10 16:35,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,," I amended the camel-example-osgi project so as to use the Java RouteBuilder, the MyRouteBuilder class in that project

I changed the blueprint.xml file to the following

	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<routeBuilder ref=""routeBuilder""/>
	</camelContext>
 
However nothing happens, no error message is displayed either.
If I leave the example in its original state, in other words using the xml-based dsl, then it works.
Maybe this is somehow related to the fact that packageScan does not work???

Regards 
Ivanhoe

","Windows, Camel 2.5.0, running in Apache Felix",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76265,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,,,,,"0|i01ug7:",8702,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageHelper - issue with version numbers which contains non decimal,CAMEL-3389,12492091,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/10 09:04,24/Apr/11 09:57,14/Jul/23 05:45,05/Dec/10 10:57,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See more here
http://fusesource.com/forums/thread.jspa?threadID=2447&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76266,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,,,,,"0|i01ufz:",8701,,,,,,,,,,,,,,,,,,,,"05/Dec/10 10:57;davsclaus;trunk: 1042312.;;;","06/Dec/10 16:34;pchandler;Thanks, ;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
@OutHeaders in bean binding issue with InOnly MEP,CAMEL-3388,12492079,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ammulder,ammulder,04/Dec/10 22:32,24/Apr/11 09:57,14/Jul/23 05:45,05/Dec/10 10:46,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"When you invoke a bean with a method signature like this in Camel 2.5.0/HEAD, the in and out message both are null (the ""Hello!"" value just disappears):

{code:java}
    public String doTest(@Body Object body, @Headers Map headers, @OutHeaders Map outHeaders) {
        return ""Hello!"";
    }
{code}

The same thing without the headers works OK:

{code:java}
    public String doTest(@Body Object body) {
        return ""Hello!"";
    }
{code}
See camel-core/src/test/java/org/apache/camel/component/bean/BeanWithHeadersAndBodyInject3Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76267,,,Sun Apr 24 09:57:58 UTC 2011,,,,,,,,,,,"0|i01ufr:",8700,,,,,,,,,,,,,,,,,,,,"04/Dec/10 22:41;ammulder;Seems to happen when @OutHeaders is used?

{code:java}
    public String doTest(@OutHeaders Map headers) {
        return ""Hello!"";
    }
{code}

does not work but this does:

{code:java}
    public String doTest(@Headers Map headers) {
        return ""Hello!"";
    }
{code}
;;;","05/Dec/10 00:11;ammulder;The problem seems to lie in Pipeline.createNextExchange

It looks like if you use @OutHeaders then you force an out message to be created, which means in this pipeline method it will overwrite the in message (containing your bean return value) with the out message (containing only headers).

I'm not sure what the appropriate resolution is.  If it's an InOnly exchange then it probably doesn't make sense to overwrite the in message with the out message.  But just having the out headers you wrote disappear doesn't seem right either.

It seems like if you write to the out headers in a bean method you are trying to control what headers are present in the message after the bean method invocation completes.  Perhaps if it's an InOnly exchange then no out message should be generated by using @OutHeaders, it should just supply a new empty map, and after the invocation has completed, replace the in headers with the new map?

You might say that you shouldn't use @OutHeaders for an InOnly exchange, but in some cases (JMS, or a reusable bean component) you might not know whether it's an InOnly or InOut exchange just based on the route definition, and it doesn't seem like you should need different bean methods and a content based router that looks at the exchange pattern just because you always want to put some headers into the output message.;;;","05/Dec/10 10:46;davsclaus;trunk: 1042310.

@OutHeaders is now only bound if MEP is out capable. If you send an InOnly then it will be null.
The @Body and other parameters is now not affected.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
spring-integration - Should have better configuration validation,CAMEL-3377,12491521,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Nov/10 09:40,24/Apr/11 09:58,14/Jul/23 05:45,29/Nov/10 10:29,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring-integration,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76268,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,,,,,"0|i01udb:",8689,,,,,,,,,,,,,,,,,,,,"29/Nov/10 10:29;davsclaus;trunk: 1040056.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
markRollbackOnlyLast should remove caused exception to avoid it affecting outer transaction,CAMEL-3373,12491485,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Nov/10 13:23,24/Apr/11 09:57,14/Jul/23 05:45,28/Nov/10 13:24,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring,,,,0,,,,,,,,,"The {{markRollbackOnlyLast()}} should remove any caused exception because it should not affect outer transactions.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76269,,,Sun Apr 24 09:57:42 UTC 2011,,,,,,,,,,,"0|i01ucf:",8685,,,,,,,,,,,,,,,,,,,,"28/Nov/10 13:23;davsclaus;Also the transaction manager doesn't log correct that it will do a rollback if markRollbackOnlyLast was used;;;","28/Nov/10 13:24;davsclaus;trunk: 1039880.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer template ignores options in uri for file consumer,CAMEL-3358,12487919,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ngochai,ngochai,24/Nov/10 06:48,24/Apr/11 09:57,14/Jul/23 05:45,24/Nov/10 07:20,2.2.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"I have an OSGi bundle:

My camel-context.xml:
------------
	<osgi:camelContext xmlns=""http://camel.apache.org/schema/spring"">					
		<template id=""producer"" />
		<consumerTemplate id=""consumer"" />
		<routeBuilder ref=""routeBuilder""/>
	</osgi:camelContext>

	<bean id=""routeBuilder"" class=""com.proiam.postmarque.customer.RouteBuilder"">	
	</bean>
	
	<bean id=""customerFilePolling"" class=""com.proiam.postmarque.customer.CustomerFilePolling"">
		<property name=""pullAddress"" value=""${pullAddress}"" />
	</bean>
------------------
RouteBuilder:
------------------
		from(""quartz://customer4pxfilein?cron="" + cronTime)		
		.beanRef(""customer4PXFilePolling"", ""pollFiles"");
-----------------
pollFiles:
-----------------
public class CustomerFilePolling {
	//@AutoWired gives me NPE
	@EndpointInject
	ConsumerTemplate consumer;
	//@AutoWired gives me NPE
	@EndpointInject
	ProducerTemplate producer;

        public void pollFiles() {
		while (true) {
			//System.out.println(""Prepare to comsume"");
			Exchange exchange = consumer.receive(""file:///tmp/test/in?move=../done&readLock=changed"", 2000);
			if (exchange == null) {
				break;
			}
			Exchange result = producer.send(""activemq:queue:CustomerFileInBody"", exchange);
			if (result.isFailed()) {
				System.out.println(""pollFiles processor raised an error!"");
			}
		}
	}
}

--------------
Everything is fine except that after being processed, the files are still there together with their .camelLock ","Debian sid i686
sun jdk 1.6.0_22-b04
apache-servicemix-4.2.0-fuse-02
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76270,,,Sun Apr 24 09:57:25 UTC 2011,,,,,,,,,,,"0|i01u93:",8670,,,,,,,,,,,,,,,,,,,,"24/Nov/10 07:20;davsclaus;You need Camel 2.5 which has this fixed;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hard coded locale in Bindy DatePatternFormat,CAMEL-3356,12487890,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,rkettelerij,rkettelerij,23/Nov/10 20:39,24/Apr/11 09:58,14/Jul/23 05:45,24/Nov/10 05:16,2.6.0,,,,,,,,,,,,2.6.0,,,,camel-bindy,,,,0,,,,,,,,,"As reported by a user from the community (http://camel.465427.n5.nabble.com/Bindy-Dateformat-Parsing-exception-td3276981.html), the locale of SimpeDateFormat in bindy's DatePatternFormat class is hard coded to FRANCE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76271,,,Sun Apr 24 09:58:24 UTC 2011,,,,,,,,,,,"0|i01u8n:",8668,,,,,,,,,,,,,,,,,,,,"24/Nov/10 04:57;hadrian;Sorry Willem, I didn't see that you assigned it to yourself.
Committed fix in r1038476 and improved support for Locale in camel-bindy.
Richard, thanks for taking the time to follow up on this.;;;","24/Nov/10 05:25;njiang;@Hadrian,
It's OK, all I did was removing the hard code of local.;;;","24/Nov/10 08:08;davsclaus;Havent looked into if this is possible.

I suggest that it should be possible to set a locale on the class annotation so all the fields etc. will default and use that locale.
It would be cumbersome to set locale on each field one by one if you just want to use the same locale.

;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"ConcurrentModifictionException on UoW done, when under heavy load",CAMEL-3355,12487915,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Nov/10 09:15,24/Apr/11 09:58,14/Jul/23 05:45,23/Nov/10 12:00,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Errors-when-under-load-tp3276259p3276259.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76272,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,,,,,"0|i01u8f:",8667,,,,,,,,,,,,,,,,,,,,"23/Nov/10 12:00;davsclaus;trunk: 1038075.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsInvoker silently swallows exceptions,CAMEL-3353,12487912,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boristerzic,boristerzic,22/Nov/10 19:25,25/Oct/11 11:36,14/Jul/23 05:45,27/Dec/10 08:59,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"If you have a route with a CXF consuming endpoint in the beginning and any component afterwards that can produce Exceptions that are not RuntimeCamelExceptions or WebApplicationException then the CxfRsInvoker will swallow the exception and return a HTTP 204 (all fine but no content to return) response.

For example in the following route:
{code:java}
 from(""cxfrs://bean://fooServer"")
            .convertBodyTo(Foo.class)
            .to(""bean-validator://x"")
            .to(""jms:queue:foos"").inOnly();
{code}

The bean validator component can throw BeanValidationException when the Foo instance has errors. This exception will be ignored by the CxfRsInvoker.

This causes important exceptions to become invisible by default which seems wrong to me. The docs and Camel in Action additionally talk about how the DefaultErrorHandler has a strategy of returning exceptions to the caller and this is also not happening here.

My local fix is a patched version of camel-cxf that converts any unknown exception (i.e. not CamelRuntimeException or WebApplicationException) to a WebApplicationException with the original exception as a constructor parameter. This is then effectively an HTTP 500 Exception and will be returned as such to the caller.

However my knowledge of camel and camel-cxf is not sufficient to ascertain whether this is the right approach, it seems to me that the CamelRuntimeException should also be treated this way since in the current code that will also be swallowed (as far as I can tell).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76273,,,Mon Jan 03 20:28:47 UTC 2011,,,,,,,,,,,"0|i01u7z:",8665,,,,,,,,,,,,,,,,,,,,"27/Dec/10 08:59;njiang;@Boris
I just committed a fix of this issue, now the exception will be sent back to the client.
Please check out the latest Camel 2.6-SNAPSHOT to verify the fix.;;;","03/Jan/11 20:28;boristerzic;I just tested it with the trunk version of Camel 2.6-SNAPSHOT and it works for me. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast with UseLatestAggregationStrategy fails to propagated exceptions which has been handled by onException,CAMEL-3352,12487906,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Nov/10 13:58,24/Apr/11 09:57,14/Jul/23 05:45,24/Nov/10 14:05,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multicast-Behaviour-with-Exceptions-tp3270272p3270272.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76274,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,,,,,"0|i01u7r:",8664,,,,,,,,,,,,,,,,,,,,"23/Nov/10 14:26;davsclaus;trunk: 1038128

Logic from pipeline is now made reusable as we need this in multicast EIP to fix this issue;;;","24/Nov/10 14:05;davsclaus;trunk: 1038605.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-irc component silently fails on nick collision,CAMEL-3351,12487913,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,tjsnell,tjsnell,21/Nov/10 13:54,24/Apr/11 09:57,14/Jul/23 05:45,08/Dec/10 06:54,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-irc,,,,0,,,,,,,,,When the camel-irc component connects to an irc server and there's a nick collision it silently fails. Also note there is no camel-irc component in Jira.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Dec/10 02:32;tjsnell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12465771/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76275,,,Sun Apr 24 09:57:55 UTC 2011,,,,,,,,,,,"0|i01u7j:",8663,,,,,,,,,,,,,,,,,,,,"21/Nov/10 13:55;tjsnell;This will cause an NPE when the route is actually called but the root cause is hidden.;;;","21/Nov/10 16:10;tjsnell;All irc events are just logged (I missed it in the logs). In this case the collision is logged as well as the server initiated disconnect. However the component code is unaware of the state. In general there are a lot of useful things that could be done with the various IRC events. Specifically though the code needs to be aware of disconnects.;;;","08/Dec/10 02:32;tjsnell;I got carried away and made several changes and fixed a minor bug. Here are my notes:



IrcComponent:

- Removed IrcConfiguration member variable. Didn't make sense. Removed constructor with IrcConfiguration as the param.
- ircLogger moved to method.

IrcProducer:
- Changed doStart to call component.joinChannels instead of doing it in the start method. Ditto for IrcConsumer
  removing dupe code.
- Check to see if we're still connected before sending a message in process. If disconnected throw a RuntimeCamelException.
- Removed unused imports
- Add a listener so we can get error messages
- Change listener type from FilteredIRCEventAdapter to IRCEventAdapter and added getter/setter for easier testing
- doStop didn't remove the listener fixed. Added. This would've caused an NPE if a user was stopping individual routes.


IrcConsumer:
- Changed doStart to call component.joinChannels instead of doing it in the start method. 
- Removed unused imports
- Added check in onKick to see if we got kicked and rejoin if so
- Change listener type from FilteredIRCEventAdapter to IRCEventAdapter and added getter/setter for easier testing


IrcEndpoint:
- Extracted method getExchange. Same 2 lines of code in 9 methods. Slightly cleaner this way.
- Added handleIrcError to handle any IRC errors that the producer or consumer hit
- Added handleNickInUse to handle nick in use errors. On endpoint startup this would cause a failed connection. For the Consumer this would just mean we'd never consume anything. For the Producer sends would throw an NPE (now there's a check for a valid connection and RuntimeCamelException is thrown instead)
- Added method joinChannels
- Added method joinChannel


IrcConfiguration
- Add autoRejoin setting
- Changed key storage to a Dictionary.

Added several new tests using mockito


;;;","08/Dec/10 06:54;njiang;Applied patch with thanks to Tracy.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Race condition found in CxfRsEndpoint while getting the endpoint binding under load and performing sync and async invocation,CAMEL-3349,12487911,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,akarpe,akarpe,akarpe,19/Nov/10 22:32,24/Apr/11 09:57,14/Jul/23 05:45,19/Nov/10 22:57,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"The CxfRsEndpoint's getBinding method is not thread safe. At a customer site, I ran into an issue at startup if 2 threads raced to perform sync and async invocation, the code for getBinding (given below) would react in the following way.
      - Thread 1 would proceed to create a binding object 
      - Thread 2 would mean while still find the  binding to be null and proceed to create a new binding
      - Meanwhile thread one would have its binding and set the Atomic boolean for binding initialized and proceed to set the HeaderStrategy.
      - Thread 2 meanwhile would overwrite the original binding object and find that Atomic boolean already set and would have no way to associate a HeaderFilterStrategy object since the flag is up.
      - In the absence of a HeaderFilterStrategy, copying of ProtocolHeaders etc will throw exceptions on every following request/invocation.

--------------------------------------------------
    public CxfRsBinding getBinding() {
        if (binding == null) {
            binding = new DefaultCxfRsBinding();
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Create default CXF Binding "" + binding);
            }
        } 
        
        if (!bindingInitialized.getAndSet(true) && binding instanceof HeaderFilterStrategyAware) {
            ((HeaderFilterStrategyAware)binding).setHeaderFilterStrategy(getHeaderFilterStrategy());
        }
        
        return binding;
    }
------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Nov/10 22:34;akarpe;camel-cxf-race-condition.patch;https://issues.apache.org/jira/secure/attachment/12463419/camel-cxf-race-condition.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76276,,,Sun Apr 24 09:57:38 UTC 2011,,,,,,,,,,,"0|i01u73:",8661,,,,,,,,,,,,,,,,,,,,"19/Nov/10 22:34;akarpe;Made the getBinding() method synchronized to overcome this issue. The penalty for this is very minimal since, the need for creating a binding is only on the first set of invocations. The binding is then held until the endpoint is in operation.
;;;","19/Nov/10 22:57;akarpe;Applied patch to subversion trunk as revision r1037070;;;","20/Nov/10 07:16;davsclaus;Nice catch.

I wonder if the initialization of the binding can be done in doStart. This is much better as it would avoid the synchronized block on the getter. Which I assume is invoked lazy at runtime on processing a new Exchange.

Generally initialization should be done in doStart because starting it is single threaded and we don't care _so much_ about performance at startup.;;;","20/Nov/10 13:15;akarpe;Hi Claus,

Yes, I completely agree. I was hesitating to do this since I have not studied this camel-cxf component code closely and was worried about side-effects and multiple rounds of testing since it is a heavily used component.

BTW, I found this at a customer site and I have given them an identical patch for camel version 2.2.

I will make this change in the coming weeks.

Cheers,

Ashwin...  ;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
DefaultShutdownStrategy and ShutdownAware (SedaConsumer) losing exchange,CAMEL-3348,12487910,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ddelautre,ddelautre,19/Nov/10 22:02,24/Apr/11 09:57,14/Jul/23 05:45,22/Nov/10 10:39,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"There's a problem when we shutdown the camel context with a seda endpoint.

In the SedaConsumer, the exchange is removed from the queue and then, later, is added to the InflightRepository as shown in the following code (I put comments where it is done):

{code}
public void run() {
        BlockingQueue<Exchange> queue = endpoint.getQueue();
        while (queue != null && isRunAllowed()) {
            final Exchange exchange;
            try {
                exchange = queue.poll(1000, TimeUnit.MILLISECONDS); // The exchange is removed here from the queue
            } catch (InterruptedException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                }
                continue;
            }
            if (exchange != null) {
                if (isRunAllowed()) {
                    try {
                        sendToConsumers(exchange); // Call to sendToConsumers detailed below

                        if (exchange.getException() != null) {
                            getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
                        }
                    } catch (Exception e) {
                        getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                    }
                } else {
                    if (LOG.isWarnEnabled()) {
                        LOG.warn(""This consumer is stopped during polling an exchange, so putting it back on the seda queue: "" + exchange);
                    }
                    try {
                        queue.put(exchange);
                    } catch (InterruptedException e) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                        }
                        continue;
                    }
                }
            }
        }
    }

    protected void sendToConsumers(Exchange exchange) throws Exception {
        int size = endpoint.getConsumers().size();

        if (size > 1) {

            if (LOG.isDebugEnabled()) {
                LOG.debug(""Multicasting to "" + endpoint.getConsumers().size() + "" consumers for Exchange: "" + exchange);
            }
           
            MulticastProcessor mp = endpoint.getConumserMulticastProcessor();

            AsyncProcessorHelper.process(mp, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                }
            });
        } else {
            AsyncProcessorHelper.process(processor, exchange, new AsyncCallback() { // This line will create the UnitOfWork (in UnitOfWorkProcessor) which will put the exchange in the InflightRepository
                public void done(boolean doneSync) {

                }
            });
        }
    }
{code}

If the shutdown occurs between these two actions, the DefaultShutdownStrategy will shutdown the route even if there is a message in progress. And the message will be lost.

Here is the code of ShutdownTask in DefaultShutdownStrategy which cause the shutdown even if there is some messages still in progress. (I put comments in it to show the state of the seda queue and InflightRepository if it is called between the queue.poll() and the InflightRepository.add())

{code}
for (Consumer consumer : order.getInputs()) {
                        int inflight = context.getInflightRepository().size(consumer.getEndpoint()); // check the number of inflight exchanges which is 0 because the UnitOfWork is not created

                        if (consumer instanceof ShutdownAware) {
                            inflight += ((ShutdownAware) consumer).getPendingExchangesSize(); // check the number of exchange in the seda queue which is 0 because the message is already removed
                        }
                        if (inflight > 0) {
                            size += inflight;
                            if (LOG.isDebugEnabled()) {
                                LOG.debug(inflight + "" inflight and pending exchanges for consumer: "" + consumer);
                            }
                        }
                    }
{code}
You can reproduce it by putting a breakpoint in the method {code}protected void sendToConsumers(Exchange exchange){code} in SedaConsumer and calling stop() on the CamelContext while the thread is suspended by the breakpoint.

We caught the problem in a unit test where we were testing the shutdown and when our test server was under heavy load.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76277,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,,,,,"0|i01u6v:",8660,,,,,,,,,,,,,,,,,,,,"20/Nov/10 17:14;davsclaus;Well spotted.

;;;","22/Nov/10 10:39;davsclaus;trunk: 1037666.

Damien could you test the fix on your system if possible?;;;","22/Nov/10 20:23;ddelautre;Thank you for your quick fix! 

So I tested it and if I left my breakpoint where it was (for testing purpose), it works.

But, if I put a breakpoint at the line with tasks.incrementAndGet() in SedaConsumer to simulate that the call to getPendingExchangesSize() is done between the queue.poll and the tasks.incrementAndGet(), I can reproduce the problem:

{code}
public void run() {
        BlockingQueue<Exchange> queue = endpoint.getQueue();
        while (queue != null && isRunAllowed()) {
            Exchange exchange = null;
            try {
                exchange = queue.poll(1000, TimeUnit.MILLISECONDS);
                if (exchange != null) {
                    try {
                        tasks.incrementAndGet();  // if we put a breakpoint here the problem will occur
                        sendToConsumers(exchange);

                        // log exception if an exception occurred and was not handled
                        if (exchange.getException() != null) {
                            getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
                        }
                    } catch (Exception e) {
                        getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                    } finally {
                        tasks.decrementAndGet();
                    }
                }
            } catch (InterruptedException e) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Sleep interrupted, are we stopping? "" + (isStopping() || isStopped()));
                }
                continue;
            } catch (Throwable e) {
                if (exchange != null) {
                    getExceptionHandler().handleException(""Error processing exchange"", exchange, e);
                } else {
                    getExceptionHandler().handleException(e);
                }
            }
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug(""Ending this polling consumer thread, there are still "" + tasks.get() + "" threads left."");
        }
    }
{code}

The odds that it will occur are lower but it can happen if we are really, really unlucky.

I've seen that you fixed this bug for the 2.6.0 version. When will it be released?;;;","23/Nov/10 09:25;davsclaus;Yeah there is maybe this problem but its much less likely to happen.

Let me try to register the task pre emptive before polling. Then we use a bit more logic to figure out if we shutting down and wait until all pending exchanges and tasks has been completed.

The problem with the executor service if you use {{shutdownNow}} is that it will maybe also interrupt and stop currently processed exchanges.
And all we just want to do is to stop the threads which is doing poll. But we can't do that easily, hence we gotta figure this out differently.;;;","23/Nov/10 10:06;davsclaus;trunk: 1038033.

Damien can you test this again :);;;","23/Nov/10 16:11;ddelautre;Everything seems ok. Thanks again!

When will the 2.6.0 version be released?;;;","23/Nov/10 16:23;davsclaus;Great.

Camel 2.6 will be released when its _done_ :)
Ah okay we usually do a release every quarter, or maybe a bit faster. 

But we are hitting x-mas time, so I assume in mid Januar 2011.

But anyone is free to raise their voice in the mailing list when they think its time for a new release.

FuseSource just cut the MR 2.5 release today, but this last fix didn't make it, however the commit from yesterday did.
So you can consider using the MR 2.5.0 release.
http://repo.fusesource.com/nexus/content/repositories/releases/org/apache/camel/apache-camel/2.5.0-fuse-00-00/
;;;","24/Nov/10 19:38;davsclaus;Damien I had to rework the code logic a bit. Can you retest on your system.

trunk: 1038780.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
RedeliveryPolicy does not honor MaximumRedeliveryDelay,CAMEL-3344,12487907,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lorrin,lorrin,18/Nov/10 05:48,24/Apr/11 09:58,14/Jul/23 05:45,18/Nov/10 10:11,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"When using exponential retry back-off with a maximumRedeliveryDelay, the delay is not honored.

The bug is in RedeliveryPolicy.java's calculateRedeliveryDelay method:

        if (maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay) {
            redeliveryDelayResult = maximumRedeliveryDelay;
        }

redeliveryDelay is the initial delay and never increases, so the max is never applied. It needs to compare against redeliveryDelayResult instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Dec/10 02:30;pherrero;RedeliveryPolicyMaxDelayTest.java;https://issues.apache.org/jira/secure/attachment/12467024/RedeliveryPolicyMaxDelayTest.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76278,,,Sun Apr 24 09:58:00 UTC 2011,,,,,,,,,,,"0|i01u5z:",8656,,,,,,,,,,,,,,,,,,,,"18/Nov/10 10:11;davsclaus;trunk: 1036381.

Thanks for reporting.;;;","28/Dec/10 02:30;pherrero;I ran into this issue too (just now, so I searched the JIRA queue to avoid duplicating this report). I'm attaching the unit test I wrote for it.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsInvoker produces NullpointerException when no ContinuationProvider is set in the InMessage,CAMEL-3343,12487905,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boristerzic,boristerzic,17/Nov/10 21:16,25/Oct/11 11:36,14/Jul/23 05:45,18/Nov/10 08:37,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"In my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException, the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel 

Specifically I run into a NullpointerException:

{code:java}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63)
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89)
        ... 33 more
{code}

I was assuming I was misconfiguring something but didn't find any alternative way so I started digging in the camel-cxf source code.

I found that such a ""getContinuation"" method also exists for the {{org.apache.camel.component.cxf.CxfConsumer}} as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null, then null is returned:

{code:java}
return provider == null ? null : provider.getContinuation();
{code}

CxfRsInvoker does not have this guard, but it does have code to deal with a ""null"" Continuation at the calling site (line 52, in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.

My program now seems to work correctly. I assume this is a bug.

For completeness sake, this is what getContinuation now looks like for me:

{code:java}
    private Continuation getContinuation(Exchange cxfExchange) {
        ContinuationProvider provider = 
            (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
        return provider == null ? null : provider.getContinuation();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76279,,,Mon Jan 03 20:30:22 UTC 2011,,,,,,,Patch Available,,,,"0|i01u5r:",8655,,,,,,,,,,,,,,,,,,,,"18/Nov/10 08:36;njiang;Yes, It's a bug of camel-cxfrs, I just committed a quick fix for it  and updated the CxfRsInvoker  to use CXF 2.3.0 continuation API.
Please check out the latest Camel 2.6-SNAPSHOT for verification.
;;;","03/Jan/11 20:30;boristerzic;Confirmed that this works with the current trunk 2.6-SNAPSHOT version of camel-cxf.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProxyHelper and JMS component - need to start producer or fails with NPE,CAMEL-3341,12487904,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,earcam,earcam,17/Nov/10 12:01,24/Apr/11 09:57,14/Jul/23 05:45,18/Nov/10 08:46,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,camel-jms,,,0,,,,,,,,,"

I've a very simple unit test (based on http://camel.apache.org/using-camelproxy.html) that works fine when using endpoint uri ""direct:start"" but fails with the following exception when using ""activemq:somequeue""

java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65)
	at $Proxy7.sayWordTo(Unknown Source)
	at net.earcam.cdosgi.remoteserviceadmin.CamelProxyTest.simpleArgTest(CamelProxyTest.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)



Looks like the problem is simply that the producer isn't started so never creates a UuidGenerator (needed for the JMS Reply-To)

org.apache.camel.component.bean.ProxyHelper - lines 45 - 51, needs to start producer (for JmsProducer)
    /**
     * Creates a Proxy which sends PojoExchange to the endpoint.
     */
    @SuppressWarnings(""unchecked"")
    public static <T> T createProxy(Endpoint endpoint, ClassLoader cl, Class[] interfaces, MethodInfoCache methodCache) throws Exception {
        return (T) createProxyObject(endpoint, endpoint.createProducer(), cl, interfaces, methodCache);
    }


As a workaround, simply create the producer, start it and use the overloaded method createProxy that takes a producer parameter.
","linux (debian) 2.6, maven 2.2.1, pax-exam 1.2.2 (using latest felix and equinox)",earcam,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Nov/10 12:02;earcam;ProxyHelper.diff;https://issues.apache.org/jira/secure/attachment/12463418/ProxyHelper.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76280,,,Sun Apr 24 09:57:21 UTC 2011,,,,,,,Patch Available,,,,"0|i01u5b:",8653,,,,,,,,,,,,,,,,,,,,"17/Nov/10 12:02;earcam;
Can't see any side effects of applying this.;;;","17/Nov/10 17:54;davsclaus;Thanks for reporting and well spotted.

Yes the producer needs to be started beforehand.

The patch looks good.
However we can use ServiceHelper.startService to have it log the event that this service/producer is being started.
;;;","18/Nov/10 08:46;davsclaus;trunk: 1036350.

Thanks for reporting.;;;","18/Nov/10 08:49;earcam;
Thanks Claus.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NPE occurs without @Entity annotation,CAMEL-3335,12487880,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,12/Nov/10 09:12,24/Apr/11 09:58,14/Jul/23 05:45,12/Nov/10 10:07,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-jpa,,,,0,,,,,,,,,"Here is code from the org.apache.camel.component.jpa.JpaConsumer class

protected String getEntityName(Class<?> clazz) {
        
    Entity entity = clazz.getAnnotation(Entity.class);
        
    // Check if the property name has been defined for Entity annotation
    if (!entity.name().equals("""")) { // line 307
        return entity.name();
    } else {
        return null;
    }
 
}

When trying to consume entities from jpa endpoint exception occurs

java.lang.NullPointerException
	at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307)
	at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287)
	at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196)
	at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78)
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)

This is because there is no @Entity annotation and persistence is configured by means of orm.xml.

To fix the problem change line 307 to
if (entity != null && !entity.name().equals(""""))",,szhemzhitsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76281,,,Sun Apr 24 09:58:16 UTC 2011,,,,,,,,,,,"0|i01u3z:",8647,,,,,,,,,,,,,,,,,,,,"12/Nov/10 10:07;davsclaus;Thanks for reporting

trunk: 1034325.;;;","12/Nov/10 10:16;szhemzhitsky;You're welcome;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanShell Expressions Don't Work,CAMEL-3334,12487881,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ammulder,ammulder,12/Nov/10 08:48,23/Nov/12 13:58,14/Jul/23 05:45,12/Nov/10 09:32,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-script,,,,0,,,,,,,,,"BeanShell 2.0b5 has the JSR-223 integration, but it implements Compilable, when in fact it throws an exception if you call compile.

Camel calls compile for any language that implements Compilable, therefore you get an exception every time your route has BeanShell in it.

I notice the BeanShell tests are commented-out in camel-script.

Also, the Camel Wiki page for BeanShell is stupendously vague on actual usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Nov/10 09:01;ammulder;camel-script-beanshell.patch;https://issues.apache.org/jira/secure/attachment/12463414/camel-script-beanshell.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76282,,,Sun Apr 24 09:57:26 UTC 2011,,,,,,,Patch Available,,,,"0|i01u3r:",8646,,,,,,,,,,,,,,,,,,,,"12/Nov/10 09:32;davsclaus;Thanks for the patch and updating the wiki. Keep it up.

trunk: 1034306.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested multicast in splitter EIP and issue with UseOriginalAggregationStrategy,CAMEL-3333,12487887,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Nov/10 08:30,24/Apr/11 09:57,14/Jul/23 05:45,13/Nov/10 13:44,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multicast-inside-splitter-tp3261288p3261288.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76283,,,Sun Apr 24 09:57:20 UTC 2011,,,,,,,,,,,"0|i01u3j:",8645,,,,,,,,,,,,,,,,,,,,"13/Nov/10 13:44;davsclaus;trunk: 1034759.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on Request-Reply InOut (Test attached),CAMEL-3328,12487883,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lkwg,lkwg,11/Nov/10 14:25,24/Apr/11 09:58,14/Jul/23 05:45,11/Nov/10 17:15,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-jms,,,,0,,,,,,,,,"simply request reply with ActiveMQ 5.4.1 using a queue is failing in v2.5 instead is running in v.2.4

{code:java} 
import static org.junit.Assert.assertTrue;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RequestReplyFailureTest
{
	private Endpoint			endpoint;
	private Producer			producer;
	private DefaultCamelContext	camel;

	@Before
	public void before() throws Exception
	{
		String brokerUrl = ""tcp://localhost:61616"";
		camel = new DefaultCamelContext();
		camel.addComponent(""jms"", JmsComponent.jmsComponentAutoAcknowledge(new ActiveMQConnectionFactory(brokerUrl)));

		final String url = ""jms:queue:test"";
		endpoint = camel.getEndpoint(url);

		camel.addRoutes(new RouteBuilder()
		{
			@Override
			public void configure() throws Exception
			{
				from(url).process(new Processor()
				{
					@Override
					public void process(Exchange exchange) throws Exception
					{
						// simply set 'pong' as response
						exchange.getOut().setBody(""pong"");
					}
				});
			}
		});

		System.out.println(camel.getVersion());
		camel.start();

		producer = endpoint.createProducer();
	}

	@After
	public void after() throws Exception
	{
		camel.stop();
	}

	/**
	 * @throws Exception
	 */
	@Test
	public void testInOut() throws Exception
	{
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOut);
		exchange.getIn().setBody(""ping"");
		producer.process(exchange);

		assertTrue(""pong"".equals(exchange.getOut().getBody()));
	}
{code} ","Linux rudi-duo 2.6.32-24-generic-pae #43-Ubuntu SMP Thu Sep 16 15:30:27 UTC 2010 i686 GNU/Linux
java 1.6.0.22",lkwg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76284,,,Sun Apr 24 09:58:20 UTC 2011,,,,,,,,,,,"0|i01u2f:",8640,,,,,,,,,,,,,,,,,,,,"11/Nov/10 14:39;lkwg;formatting;;;","11/Nov/10 15:12;davsclaus;What error do you get? Can you post your stacktrace.

The unit test works fine for me, however I use the Camel Test Kit for the unit test as it will be part of camel-jms unit tests.;;;","11/Nov/10 15:14;davsclaus;See this unit test which works
http://svn.apache.org/viewvc?rev=1033961&view=rev;;;","11/Nov/10 15:17;lkwg;sry, this is my stacktrace

java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at de.lgohlke.services.simulate.RequestReplyFailureTest.testInOut(RequestReplyFailureTest.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

;;;","11/Nov/10 16:16;lkwg;ur posted test runs in both versions,

what is different or wrong?

I dont see the point.;;;","11/Nov/10 16:18;davsclaus;Lars, you need to start your producer before you can use it

{code}
producer = endpoint.createProducer();
producer.start();
{code}

Likewise you should stop it when you are done using it, eg when you test is done;;;","11/Nov/10 17:00;lkwg;ok, this solved my issue;

Maybe you can put a hint beside the NPE that, the producer should be started before using.

thx anyway;;;","11/Nov/10 17:15;davsclaus;trunk: 1034004.

camel-jms now throws an exception if it hasnt been started tell the end user that it must be started before it can be used;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
SmppBinding raises NullPointerException when an SMSC insert the Short Message Data inside the message_payload field,CAMEL-3321,12487864,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,vincenzo.cacurri,vincenzo.cacurri,08/Nov/10 11:29,24/Apr/11 09:58,14/Jul/23 05:45,08/Nov/10 23:29,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-smpp,,,,0,,,,,,,,,"When an SMSC sends the DeliverSm with the short message data inside the message_payload field (in the OptionalParameter) the method
createSmppMessage(DeliverSm deliverSm) in the SmppBinding class raises a nullPointerException at the following line:

else {
            smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(),  
                    
this happen because deliverySm.getShortMessage return null

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Nov/10 11:33;vincenzo.cacurri;SmppBinding_Patch.txt;https://issues.apache.org/jira/secure/attachment/12463377/SmppBinding_Patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76285,,,Sun Apr 24 09:58:15 UTC 2011,,,,,,,Patch Available,,,,"0|i01u0v:",8633,,,,,,,,,,,,,,,,,,,,"08/Nov/10 13:19;davsclaus;Is it possible to create an unit test which demonstrates this bug?;;;","08/Nov/10 18:05;muellerc;Will have a look on it this evening...

Christian;;;","08/Nov/10 23:29;muellerc;Vincenzo, thanks for reporting the issue and providing the patch.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
cxfEndpoint of camel-cxf doesn't support  the shcemaLocation element,CAMEL-3319,12487771,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Nov/10 04:23,24/Apr/11 09:58,14/Jul/23 05:45,08/Nov/10 00:24,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"Here is the mail thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76286,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,,,,,"0|i01u0f:",8631,,,,,,,,,,,,,,,,,,,,"08/Nov/10 00:24;njiang;Applied the patch into trunk in reversion 1032256 ;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property resolve in EIP does not work when in a sub route.,CAMEL-3314,12487858,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ankelee,ankelee,05/Nov/10 13:29,24/Apr/11 09:57,14/Jul/23 05:45,05/Nov/10 14:03,2.5.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"The 2.5 feature: ""The EIP now supports property placeholders in the String based options (a few spots in Java DSL where its not possible). For example: 
<convertBodyTo type=""String"" charset=""{{foo.myCharset}}""/>"" does not work correctly when ie nested in a <choice> tag.

See discussion: http://camel.465427.n5.nabble.com/Camel-2-5-Propertyplaceholders-and-Spring-DSL-still-not-working-td3251608.html#a3251608

Example route:

This works: 
<route> 
        <from uri=""direct:in"" /> 
        <convertBodyTo type=""String"" charset=""{{charset.external}}"" />	
        <log message=""Charset: {{charset.external}}"" /> 
        <to uri=""mock:out"" /> 
</route> 

This fails: 
<route> 
        <from uri=""direct:in"" /> 
        <choice> 
                <when> 
                        <constant>true</constant> 
                        <convertBodyTo type=""String"" charset=""{{charset.external}}"" />	
                </when> 
        </choice> 
        <to uri=""mock:out"" /> 
</route> ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76288,,,Sun Apr 24 09:57:18 UTC 2011,,,,,,,,,,,"0|i01tzb:",8626,,,,,,,,,,,,,,,,,,,,"05/Nov/10 14:03;davsclaus;trunk: 1031566.

Now its fixed. Thanks for reporting.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update camel-soap to use 2.3.0 tooling,CAMEL-3310,12487865,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dkulp,dkulp,04/Nov/10 15:42,24/Apr/11 09:57,14/Jul/23 05:45,09/Nov/10 01:47,,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"
The camel-soap component does not build with the update to CXF 2.3.   patch will be supplied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Nov/10 15:56;dkulp;CAMEL-3310-b.patch;https://issues.apache.org/jira/secure/attachment/12463372/CAMEL-3310-b.patch","04/Nov/10 15:43;dkulp;CAMEL-3310.patch;https://issues.apache.org/jira/secure/attachment/12463369/CAMEL-3310.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76289,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,Patch Available,,,,"0|i01tyf:",8622,,,,,,,,,,,,,,,,,,,,"04/Nov/10 15:50;cschneider;Hi Dan,

you changed from ${cxf-version} to 2.3.0. Shouldn´t we rather update the property to reflect this?
Apart from this the changed artifacts will of course make sense.

Christian;;;","04/Nov/10 15:54;dkulp;
Well, it would involve creating a new property, which is definitely a valid option.

With 2.3.0, the xjc utilities that we have were pulled out into a subproject of CXF that is not likely to be released as part of the fixes and such of the rest of CXF.   Thus, the version for those is separate than for the rest of the cxf dependencies that are used in Camel.

;;;","04/Nov/10 15:56;dkulp;
new patch with new property;;;","04/Nov/10 23:00;cschneider;I was just trying to apply your patch but it looks a bit strange
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml

Do you compare two checkouts there? When I apply this in subversion it does not find any matches. Does this have to do with git?;;;","04/Nov/10 23:06;dkulp;Yea. It's a git diff. Usually a patch -p1 should do it. ;;;","05/Nov/10 06:11;njiang;Applied patch with thanks to DanK.;;;","05/Nov/10 08:42;davsclaus;This cannot compile with JDK 1.5


davsclaus:(svn)camel[trunk:1031468]/components/camel-soap$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_24
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.4"" arch: ""i386"" Family: ""unix""


{code}
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
{code};;;","05/Nov/10 08:43;davsclaus;Compiling with 1.6 works fine.;;;","05/Nov/10 09:14;cschneider;I guess the dependency to the jaxb and jaxws annotations apis are missing. I can not correct this from work but I can take a look from home later today. It would be nice to only add the jars for jdk 1.5 builds. I have seen that we already have a profile for jdk 1.5. ;;;","05/Nov/10 09:18;njiang;When build the camel-soap with JDK 1.5, cxf will try to load the JAXWS 2.2 API instead of JAXWS 2.1 API which will introduce the below issue.;;;","05/Nov/10 15:08;dkulp;

The two new deps need to move to normal scope, not test scope:

diff --git a/components/camel-soap/pom.xml b/components/camel-soap/pom.xml
index e610f4a..a1583f9 100644
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml
@@ -60,18 +60,16 @@
             <artifactId>jaxb-impl</artifactId>
         </dependency>
 
-               <!-- JAXWS api jars -->
-               <dependency>
+       <!-- JAXWS api jars -->
+       <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-ws-metadata_2.0_spec</artifactId>
             <version>1.1.2</version>
-            <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-jaxws_2.2_spec</artifactId>
             <version>1.0</version>
-            <scope>test</scope>
         </dependency>
 
         <!-- for testing -->
;;;","06/Nov/10 03:29;njiang;Just applied the patch that DanK provided, now the camel-soap should be OK now.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,
Transfer-Encoding chunking implementation leaves a loop hole for error,CAMEL-3306,12487897,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,unmarshall,unmarshall,03/Nov/10 16:33,24/Apr/11 09:57,14/Jul/23 05:45,18/Nov/10 08:41,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"The description of this issue is at [1].

[1] http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3248727",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76290,,,Sun Apr 24 09:57:49 UTC 2011,,,,,,,,,,,"0|i01txj:",8618,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf bundle should not export META-INF.cxf which is also exported by cxf-bundle.,CAMEL-3303,12487841,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Nov/10 02:32,24/Apr/11 09:58,14/Jul/23 05:45,03/Nov/10 06:29,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,2.5.0,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"Here is the mailing thread[1] about it.

[1] http://camel.465427.n5.nabble.com/CXF-Startup-issue-with-Camel-in-OSGI-runtime-tp3241913p3247484.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76291,,,Sun Apr 24 09:58:27 UTC 2011,,,,,,,,,,,"0|i01twv:",8615,,,,,,,,,,,,,,,,,,,,"03/Nov/10 03:34;njiang;Exporting the META-INF.cxf.camel instead of META-INF.cxf to avoid the package conflict of cxf-bundle.
Now you should use
{code}
<import resource=""classpath:META-INF/cxf/camel/cxf-extension-camel.xml"" />
{code}

instead of 
{code}
<import resource=""classpath:META-INF/cxf/cxf-extension-camel.xml"" />
{code}
to use the camel transport module in OSGi with spring.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiPackageScanClassResolver should have Non-OSGi classloader check fallback,CAMEL-3302,12487851,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,02/Nov/10 12:02,24/Apr/11 09:57,14/Jul/23 05:45,04/Nov/10 07:50,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-spring,,,,0,,,,,,,,,"This is necessary when use JBI packaging for servicemix-camel ServiceUnit  so that we get chance to use SU classloader to scan packages in the ServiceUnit
",,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3442,,,,,,"02/Nov/10 12:04;ffang;CAMEL-3302.patch;https://issues.apache.org/jira/secure/attachment/12463367/CAMEL-3302.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76292,,,Sun Apr 24 09:57:48 UTC 2011,,,,,,,,,,,"0|i01twn:",8614,,,,,,,,,,,,,,,,,,,,"02/Nov/10 12:04;ffang;append patch to fix this issue;;;","04/Nov/10 07:50;njiang;Applied the patch with thanks to Freeman, I also added an unit test to make sure the fallback is working.;;;","18/Dec/10 19:00;davsclaus;There is an issue with concurrency in this, see CAMEL-3442;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInvocation handling LinkedHashMap cannot be converted to java.util.Map,CAMEL-3299,12487652,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,di_m_an,di_m_an,02/Nov/10 00:12,24/Apr/11 09:57,14/Jul/23 05:45,02/Nov/10 03:18,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"I'm calling a Camel proxy and passing it a single argument of type LinkedHashMap.
On the service side I'm waiting for a java.util.Map, so the converter BeanInvocation -> java.util.Map is called.
Finally it comes to BeanConverter:convertTo with type=java.util.Map and value class=BeanInvocation

then it goes to
            // maybe from is already the type we want
            if (from.isAssignableFrom(type)) {
                return body;
            }
where from=LinkedHashMap
and... the condition is false!

The LinkedHashMap is not assignable from java.util.Map,
but java.util.Map is assignable from LinkedHashMap and, I guess, that is what we want.

Please fix?
- if (from.isAssignableFrom(type)) {
+ if (type.isAssignableFrom(from)) {",,,,,,,,,,,,,,,,,,,,CAMEL-3082,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76293,,,Sun Apr 24 09:57:29 UTC 2011,,,,,,,Patch Available,,,,"0|i01tvz:",8611,,,,,,,,,,,,,,,,,,,,"02/Nov/10 03:18;njiang;This bug was fixed in CAMEL-3082, please check out the latest released Camel 2.5.0 for it.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmppPrivateChatProducer should close the connection when it is stopped.,CAMEL-3298,12487495,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Nov/10 08:38,24/Apr/11 09:58,14/Jul/23 05:45,05/Nov/10 07:32,,,,,,,,,,,,,2.6.0,,,,camel-xmpp,,,,0,,,,,,,,,"Here is a the mail thread[1] which is discussing about it.
http://camel.465427.n5.nabble.com/XMPP-communication-not-closed-and-new-message-rejected-td3236657.html#a3236657 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Nov/10 08:58;njiang;camel-3298.patch;https://issues.apache.org/jira/secure/attachment/12463392/camel-3298.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76294,,,Sun Apr 24 09:58:04 UTC 2011,,,,,,,,,,,"0|i01tvr:",8610,,,,,,,,,,,,,,,,,,,,"05/Nov/10 07:32;njiang;Applied the patch into revision 1031458.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Dependency Injection seems not working,CAMEL-3295,12487647,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnodet,joed,joed,30/Oct/10 05:02,24/Apr/11 09:57,14/Jul/23 05:45,07/Dec/10 14:57,2.5.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,"This is just a placeholder - things like this should work.

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0
            http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">


    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""camelBlueprint"">
        <route>
            <from uri=""jms:queue""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionPool""/>
    </bean>

    <reference id=""jmsConnectionPool"" interface=""javax.jms.ConnectionFactory""/>

</blueprint>
{code}

Currently the jmsConnectionPool is not at all passed to the JmsComponent.
The usage of JmsTemplate as debated on the mailinglists I think is of a (currently) much lesser concern.
Especially comparing a little to the ProducerCode in the servicemix-jms components.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76295,,,Sun Apr 24 09:57:44 UTC 2011,,,,,,,,,,,"0|i01tv3:",8607,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Setting TaskExecutor should support both Spring 2.5 and 3.0,CAMEL-3286,12487616,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/10 04:20,25/Oct/11 11:36,14/Jul/23 05:45,29/Oct/10 07:57,2.4.0,2.5.0,,,,,,,,,,,2.6.0,,,,camel-jms,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-2-4-with-spring-2-5-6-TaskExecutor-issue-tp3237897p3237897.html

We need to use reflection when invoking setTaskExecutor on the spring JMS stuff.
Because at compile time it would be linked to the Spring 3.0 method signature.
And in Spring 2.5 the method signature is different.

Using reflection should allow us to support both cases. And this is only done on startup so no runtime overhead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76297,,,Wed Jan 19 10:12:46 UTC 2011,,,,,,,,,,,"0|i01tt3:",8598,,,,,,,,,,,,,,,,,,,,"29/Oct/10 07:57;davsclaus;We have introduced a new {{taskExecutorSpring2}} option you should use when using Spring 2.x with camel-jms.

trunk: 1028636.;;;","19/Jan/11 10:12;davsclaus;trunk: 1060739.

I spotted another case where it should be configurable.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilder - Let if fail if end user is configuring onException etc after routes,CAMEL-3281,12487609,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/10 06:28,24/Apr/11 09:57,14/Jul/23 05:45,27/Oct/10 11:38,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"All such cross cutting concerns must be defined before routes.

We should throw an exception if end user has configured them after routes, which is currently not supported in the DSL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76298,,,Sun Apr 24 09:57:21 UTC 2011,,,,,,,,,,,"0|i01trz:",8593,,,,,,,,,,,,,,,,,,,,"27/Oct/10 07:46;davsclaus;The issue is that if you do it after the onException is not being used and end user may think it was used. Hence we should fail.;;;","27/Oct/10 11:38;davsclaus;trunk: 1027919.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Threading issue which lets converter loading abort,CAMEL-3277,12487595,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lhein,lhein,25/Oct/10 19:46,23/May/11 22:17,14/Jul/23 05:45,26/Oct/10 06:42,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"The type converter loading is not threadsafe and fails sometimes. That will end up with around 17 type converters loaded only which will probably let your camel routes fail with conversion errors like:

{noformat}
07:04:31,112 | ERROR | qtp25205731-2783 | DefaultErrorHandler | rg.apache.camel.processor.Logger 248 | 68 - org.apache.camel.camel-core - 2.4.0.fuse-00-00 | Failed delivery for exchangeId: 53e23457-5551-4487-9fc4-87dd33687f0b. Exhausted after delivery attempt: 1 caught: java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:116)[:1.6.0_17]
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:98)[:1.6.0_17]
at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:180)[:1.6.0_17]
at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:598)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:570)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:122)[68:org.apache.camel.camel-core:2.4.0.fuse-00-00]
{noformat}

Tracking the issue down showed that several type converter loaders share the same registry object and fail to load all converters every once a while. That can be fixed by making the load method synchronized...see attached patch.
",SMX 4,fracca,lhein,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Oct/10 19:47;lhein;patch.diff;https://issues.apache.org/jira/secure/attachment/12463389/patch.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76299,,,Mon May 23 01:30:50 UTC 2011,,,,,,,Patch Available,,,,"0|i01tr3:",8589,,,,,,,,,,,,,,,,,,,,"25/Oct/10 19:47;lhein;attached patch;;;","26/Oct/10 06:42;davsclaus;trunk: 1027380.

Thanks Lars for the patch.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;","22/May/11 17:03;fracca;Managed to reproduce this issue with Camel 2.7.0

A simple HTTP request followed by an XPath expression in a bean.


public class PricesParser {

    public static void main(String args[]) throws Exception {
        // create CamelContext
        CamelContext context = new DefaultCamelContext();

        // add our route to the CamelContext
        context.addRoutes(new RouteBuilder() {
            public void configure() {

        from(""http://url"").bean(new MyBean()).to(""file:target/prices"");

        // start the route and let it do its work
        context.start();
        Thread.sleep(3000);

        // stop the CamelContext
        context.stop();
}

public static class MyBean {
	public String parse(@XPath(""//div[@id='prices']"") String prices)  {
		return prices;
	}
}

However, all converters seem to have loaded:

.........


[                          main] AnnotationTypeConverterLoader  INFO  Found 4 packages with 15 @Converter classes to load
[                          main] DefaultTypeConverter           INFO  Loaded 157 type converters in 0.515 seconds

main] DefaultCamelContext            INFO  Route: route1 started and consuming from: Endpoint[http://url]
[                          main] DefaultCamelContext            INFO  Total 1 routes, of which 1 is started.
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext: camel-1) started in 1.914 seconds
[url] route1                         INFO  before
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext:camel-1) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[                          main] DefaultExecutorServiceStrategy DEBUG Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@64c5e2cf with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@95d0a50
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG There are 1 routes to shutdown
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG Suspend complete for: Consumer[http://url]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[http://url]


Unit tests that don't read from that http url seem to work fine.

Should i open a new jira for this?;;;","23/May/11 01:30;njiang;@Fernando
Did you send the request to the http://uri ?
I don't find any stack trace in the log file that you showed us.;;;","23/May/11 22:17;fracca;Full details:

import org.apache.camel.Body;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.language.XPath;

public class PreciousMetalPriceExtractor {

    public static void main(String args[]) throws Exception {
        CamelContext context = new DefaultCamelContext();

        context.addRoutes(new RouteBuilder() {
            public void configure() {
//				from(""timer://live-prices?fixedRate=true&delay=0&period=10000"")
//                	.to(""http://live.bullionvault.com/front_page_silver.do"")
				from(""http://live.bullionvault.com/front_page_silver.do"")
					.log(""before"")
					.bean(new PreciousMetalLivePriceParser())
					.log(""after"")
					.to(""file:target/metal-prices"");
            }
        });

        context.start();
        Thread.sleep(3000);
        context.stop();
    }
	public static class PreciousMetalLivePriceParser  {

		public String parse(@XPath(""//div[@id='tab-GBP']"") String prices)  {
			return prices;
		}
	}
}




[                          main] DefaultCamelContext            DEBUG Adding routes from builder: Routes: []
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext: camel-1) is starting
[                          main] DefaultCamelContext            INFO  JMX enabled. Using ManagedManagementStrategy.
[                          main] DefaultManagementAgent         DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@656de49c
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=context,name=""camel-1""
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultTypeConverter(0x2802bd3a)
[                          main] efaultPackageScanClassResolver DEBUG Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.camel.component.http]
[                          main] efaultPackageScanClassResolver DEBUG Found: [class org.apache.camel.component.file.GenericFileConverter, class org.apache.camel.component.bean.BeanConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.TimePatternConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.component.http.HttpConverter, class org.apache.camel.component.http.RequestEntityConverter]
[                          main] AnnotationTypeConverterLoader  INFO  Found 4 packages with 15 @Converter classes to load
[                          main] DefaultTypeConverter           INFO  Loaded 157 type converters in 0.504 seconds
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultExecutorServiceStrategy(0x620a3d3b)
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=SharedProducerServicePool(0xe3a1ec6)
[                          main] SharedProducerServicePool      DEBUG Starting service pool: org.apache.camel.impl.SharedProducerServicePool@e3a1ec6
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultInflightRepository(0x663b1f38)
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultShutdownStrategy(0x337ec9f7)
[                          main] DefaultComponentResolver       DEBUG Found component: http via type: org.apache.camel.component.http.HttpComponent via: META-INF/services/org/apache/camel/component/http
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=components,name=""http""
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[http://live.bullionvault.com/front_page_silver.do], path=[live.bullionvault.com/front_page_silver.do], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG http://live.bullionvault.com/front_page_silver.do converted to endpoint: Endpoint[http://live.bullionvault.com/front_page_silver.do] by component: org.apache.camel.component.http.HttpComponent@19c5466b
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=endpoints,name=""http://live.bullionvault.com/front_page_silver.do""
[                          main] SimpleLanguage                 DEBUG Expression is evaluated as simple (non strict) expression: before
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=tracer,name=Tracer(0x60cf710e)
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
[                          main] XPathBuilder                   DEBUG Creating default XPathFactory
[                          main] SimpleLanguage                 DEBUG Expression is evaluated as simple (non strict) expression: after
[                          main] DefaultComponentResolver       DEBUG Found component: file via type: org.apache.camel.component.file.FileComponent via: META-INF/services/org/apache/camel/component/file
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=components,name=""file""
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[file://target/metal-prices], path=[target/metal-prices], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG file://target/metal-prices converted to endpoint: Endpoint[file://target/metal-prices] by component: org.apache.camel.component.file.FileComponent@644cd580
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=endpoints,name=""file://target/metal-prices""
[                          main] DefaultCamelContext            DEBUG Warming up route id: route1 having autoStartup=true
[                          main] RouteService                   DEBUG Starting services on route: route1
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=threadpools,name=""DefaultScheduledPollConsumer(0x14718242)""
[                          main] DefaultExecutorServiceStrategy DEBUG Created new scheduled thread pool for source: Consumer[http://live.bullionvault.com/front_page_silver.do] with name: http://live.bullionvault.com/front_page_silver.do. [poolSize=1]. -> java.util.concurrent.ScheduledThreadPoolExecutor@281ec58a
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=threadpools,name=""DefaultErrorHandler(0x66bcb23e)""
[                          main] DefaultExecutorServiceStrategy DEBUG Created new scheduled thread pool for source: DefaultErrorHandler[TraceInterceptor[Log[before]]] with name: ErrorHandlerRedeliveryTask. [poolSize=10]. -> java.util.concurrent.ScheduledThreadPoolExecutor@6e5a3923
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=ProducerCache(0x5bd6fbb3)
[                          main] GenericFileProducer            DEBUG Starting producer: Producer[file://target/metal-prices]
[                          main] ProducerCache                  DEBUG Adding to producer cache with key: Endpoint[file://target/metal-prices] for producer: Producer[file://target/metal-prices]
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=processors,name=""bean1""
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=processors,name=""to1""
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=routes,name=""route1""
[                          main] DefaultCamelContext            DEBUG Route: route1 >>> EventDrivenConsumerRoute[Endpoint[http://live.bullionvault.com/front_page_silver.do] -> Instrumentation:route[UnitOfWork(Pipeline[[Channel[Log[before]], Channel[BeanProcessor[pmpe.PreciousMetalPriceExtractor$PreciousMetalLivePriceParser@d02b2b6]], Channel[Log[after]], Channel[sendTo(Endpoint[file://target/metal-prices])]]])]]
[                          main] DefaultCamelContext            DEBUG Starting consumer (order: 1000) on route: route1
[                          main] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=consumers,name=DefaultScheduledPollConsumer(0x14718242)
[                          main] DefaultScheduledPollConsumer   DEBUG Starting consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[                          main] ScheduledPollConsumer          DEBUG Scheduling poll (fixed rate) with initialDelay: 1000, delay: 500 (milliseconds) for: Endpoint[http://live.bullionvault.com/front_page_silver.do]
[                          main] DefaultCamelContext            INFO  Route: route1 started and consuming from: Endpoint[http://live.bullionvault.com/front_page_silver.do]
[                          main] DefaultCamelContext            INFO  Total 1 routes, of which 1 is started.
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext: camel-1) started in 1.596 seconds
[vault.com/front_page_silver.do] route1                         INFO  before
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext:camel-1) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[                          main] DefaultExecutorServiceStrategy DEBUG Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@337ec9f7 with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6b541147
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG There are 1 routes to shutdown
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG Suspend complete for: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 299 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 298 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 297 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 296 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 295 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 294 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 293 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 292 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 291 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 290 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 289 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 288 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 287 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 286 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 285 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 284 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 283 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 282 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 281 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 280 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 279 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 278 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 277 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 276 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 275 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 274 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 273 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 272 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 271 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 270 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 269 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 268 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 267 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 266 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 265 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 264 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 263 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 262 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 261 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 260 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 259 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 258 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 257 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 256 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 255 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 254 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 253 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 252 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 251 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 250 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 249 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 248 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 247 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 246 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 245 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 244 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 243 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 242 seconds.
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG 1 inflight and pending exchanges for consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 241 seconds.
[vault.com/front_page_silver.do] DefaultErrorHandler            DEBUG Failed delivery for exchangeId: ID-ice-home-53806-1306091914404-0-2. On delivery attempt: 0 caught: java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
[vault.com/front_page_silver.do] DefaultErrorHandler            ERROR Failed delivery for exchangeId: ID-ice-home-53806-1306091914404-0-2. Exhausted after delivery attempt: 1 caught: java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
	at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:116)[:1.6.0_24]
	at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:98)[:1.6.0_24]
	at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:180)[:1.6.0_24]
	at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:657)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:629)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:602)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:131)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:356)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:196)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:178)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:150)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.DefaultScheduledPollConsumer.poll(DefaultScheduledPollConsumer.java:66)[camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)[camel-core-2.7.0.jar:2.7.0]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_24]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_24]
	at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]
[vault.com/front_page_silver.do] Pipeline                       DEBUG Message exchange has failed so breaking out of pipeline for exchange: Exchange[Message: [Body is instance of java.io.InputStream]] Exception: java.lang.ClassCastException: org.apache.camel.converter.stream.InputStreamCache cannot be cast to org.w3c.dom.Node
[el-1) thread #1 - ShutdownTask] DefaultScheduledPollConsumer   DEBUG Stopping consumer: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] GenericFileProducer            DEBUG Stopping producer: Producer[file://target/metal-prices]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        DEBUG Shutdown complete for: Consumer[http://live.bullionvault.com/front_page_silver.do]
[el-1) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 shutdown complete.
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 60 seconds
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=routes,name=""route1""
[                          main] RouteService                   DEBUG Stopping services on route: route1
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=consumers,name=DefaultScheduledPollConsumer(0x14718242)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=processors,name=""bean1""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=processors,name=""to1""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=context,name=""camel-1""
[                          main] DefaultExecutorServiceStrategy DEBUG ShutdownNow ExecutorService: java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6b541147
[                          main] DefaultInflightRepository      INFO  Shutting down with no inflight exchanges.
[                          main] SharedProducerServicePool      DEBUG Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@e3a1ec6
[                          main] DefaultExecutorServiceStrategy DEBUG ShutdownNow ExecutorService: java.util.concurrent.ScheduledThreadPoolExecutor@281ec58a
[                          main] DefaultExecutorServiceStrategy DEBUG ShutdownNow ExecutorService: java.util.concurrent.ScheduledThreadPoolExecutor@6e5a3923
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=endpoints,name=""file://target/metal-prices""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=ProducerCache(0x5bd6fbb3)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=threadpools,name=""DefaultErrorHandler(0x66bcb23e)""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultInflightRepository(0x663b1f38)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=threadpools,name=""DefaultScheduledPollConsumer(0x14718242)""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultTypeConverter(0x2802bd3a)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultExecutorServiceStrategy(0x620a3d3b)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=DefaultShutdownStrategy(0x337ec9f7)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=tracer,name=Tracer(0x60cf710e)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=services,name=SharedProducerServicePool(0xe3a1ec6)
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=components,name=""file""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=components,name=""http""
[                          main] DefaultManagementAgent         DEBUG Unregistered MBean with objectname: org.apache.camel:context=ice.home/camel-1,type=endpoints,name=""http://live.bullionvault.com/front_page_silver.do""
[                          main] DefaultCamelContext            INFO  Uptime: 1 minute
[                          main] DefaultCamelContext            INFO  Apache Camel 2.7.0 (CamelContext: camel-1) is shutdown in 1 minute

Process finished with exit code 0
;;;jira-users",,,,,,,,,,,,,,,,,,,,,,,,
Multicast with pipeline may cause wrong aggregated exchange,CAMEL-3276,12487590,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/10 15:05,24/Apr/11 09:57,14/Jul/23 05:45,26/Oct/10 06:35,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-core,,,,0,,,,,,,,,"This is a problem when using 2 set of nested pipeline and doing a transform as the first processor in that pipeline
{code}
                from(""direct:start"").multicast(new SumAggregateBean())
                    .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(""log:foo"").end()
                    .pipeline().transform(bean(IncreaseOne.class)).bean(new IncreaseTwo()).to(""log:bar"").end()
                .end()
                .to(""mock:result"");
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76300,,,Sun Apr 24 09:57:40 UTC 2011,,,,,,,,,,,"0|i01tqv:",8588,,,,,,,,,,,,,,,,,,,,"26/Oct/10 06:35;davsclaus;trunk: 1027378.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
packageScan does not work with camel-blueprint,CAMEL-3271,12487615,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnodet,cathodion,cathodion,24/Oct/10 08:02,24/Apr/11 09:57,14/Jul/23 05:45,06/Dec/10 20:29,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,"Using the following xml code does not activate the Java Camel routes that can be found in the given package;

<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<packageScan>
			<package>eu.schuring.camel.blueprint.route</package>
		</packageScan>
	</camelContext>
</blueprint>

Attached is a usecase that should output messages from both a native blueprint DSL route and a Java DSL route activated by the xml section above. I've attached both the bundle and a source jar.",Fuse servicemix 4.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/10 08:03;cathodion;camel-blueprint-0.0.1-SNAPSHOT-sources.jar;https://issues.apache.org/jira/secure/attachment/12463363/camel-blueprint-0.0.1-SNAPSHOT-sources.jar","24/Oct/10 08:03;cathodion;camel-blueprint-0.0.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463388/camel-blueprint-0.0.1-SNAPSHOT.jar",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76301,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,,,,,"0|i01tpr:",8583,,,,,,,,,,,,,,,,,,,,"24/Oct/10 08:09;davsclaus;Can you try using <package> instead of <packageScan>. 

<package> was the old way before we introduced <packageScan> which has the filters.
;;;","24/Oct/10 10:42;cathodion;I've tried using just <package> without being nested in <packageScan>, but the result is the same: The route is not activated, but blueprint doesn't complain about the given XML either. So I have no idea what exactly is wrong.

@Claus: Do you know of any working example that uses either <package> or <packageScan> in blueprint?;;;","24/Oct/10 11:56;davsclaus;No I dont know of any examples. Blueprint is still in the works in a few spots, so some features may be not working / missing.;;;","28/Oct/10 00:01;joed;Dug around in the code some yesterday, some TLC is needed.
It should be quite easy to map to what the camel-spring stuff does as well as just inspecting the blueprint container.
;;;","06/Dec/10 20:29;gnodet;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
	A	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/PackageScanRouteBuilderFinder.java
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/OSGiBlueprintTestSupport.java
	A	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/TestRouteBuilder.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-4.xml
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-5.xml
Committed r1042780
;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
"CXF CamelTransport and ""Can't find input stream in message""",CAMEL-3269,12487643,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jeremie.brebec,jeremie.brebec,23/Oct/10 16:18,24/Apr/11 09:57,14/Jul/23 05:45,01/Nov/10 05:58,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-cxf,,,,0,,,,,,,,,"When using a JaxWS proxy with camel transport, to a route with only one processor, CXF fail with the message ""Can't find input stream in message"".

CamelConduit call CxfMessageHelper.getCxfInMessage which is looking for an Out part in the exchange. If the processor of the route doesn't use the Out message, or doesn't copy the in part to the out part (like the Pipeline processor), the call to the JaxWS proxy fail with ""Can't find input stream in message""",,jeremie.brebec,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Oct/10 16:20;jeremie.brebec;camel-cxf.patch;https://issues.apache.org/jira/secure/attachment/12463364/camel-cxf.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76302,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,,,,,"0|i01tpb:",8581,,,,,,,,,,,,,,,,,,,,"23/Oct/10 16:20;jeremie.brebec;A simple patch with a JUnit testcase for this issue;;;","01/Nov/10 05:58;njiang;Applied the patch in reversion 1029558 with thanks to Jeremie.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead links to JavaDocs items,CAMEL-3259,12487519,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hasalex,hasalex,20/Oct/10 13:42,24/Apr/11 09:57,14/Jul/23 05:45,20/Oct/10 14:17,,,,,,,,,,,,,2.5.0,,,,website,,,,0,,,,,,,,,"On the http://camel.apache.org/component.html, the link to the CamelContext class JavaDoc point to the old http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html URL, which is a dead link. There some additional dead links to other JavaDoc items.

Same issue on the following pages :
  http://camel.apache.org/camelcontext.html
  http://camel.apache.org/error-handler.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76303,,,Sun Apr 24 09:57:39 UTC 2011,,,,,,,,,,,"0|i01tn3:",8571,,,,,,,,,,,,,,,,,,,,"20/Oct/10 14:17;davsclaus;Thanks for reporting.

If you find additional then fell free to comment or create a new ticket.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE log of the ConsumerTemplate,CAMEL-3252,12487526,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,19/Oct/10 10:56,24/Apr/11 09:58,14/Jul/23 05:45,20/Oct/10 05:34,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"When I try to run the CamelInAction code with Camel 2.5.0, I found this warning message.
{code}

[                          main] DefaultConsumerTemplate        WARN  Exception occurred during done UnitOfWork for Exchange: null. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultConsumerTemplate.doneUoW(DefaultConsumerTemplate.java:229)[camel-core-2.5.0.jar:2.5.0]
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:168)[camel-core-2.5.0.jar:2.5.0]
	at camelinaction.OrderCollectorBean.getOrders(OrderCollectorBean.java:17)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/classes/:]
	at camelinaction.ConsumerTemplateTest.testConsumerTemplate(ConsumerTemplateTest.java:46)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/test-classes/:]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)[junit-4.8.1.jar:]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)[junit-4.8.1.jar:]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)[junit-4.8.1.jar:]
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)[surefire-api-2.5.jar:2.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)[surefire-booter-2.5.jar:2.5]
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)[surefire-booter-2.5.jar:2.5]

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76304,,,Sun Apr 24 09:58:28 UTC 2011,,,,,,,,,,,"0|i01tlj:",8564,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HawtDB file grows indefinitely over time,CAMEL-3249,12487431,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,gim,gim,18/Oct/10 23:19,24/Apr/11 09:57,14/Jul/23 05:45,21/Oct/10 17:52,2.3.0,2.4.0,2.5.0,,,,,,,,,,2.5.0,,,,camel-hawtdb,,,,0,,,,,,,,,"When using an aggregator with the HawtDB persistent store, the file grows indefinitely until it fills the volume on which it's stored. This prevents the persistence from being used in any kind of long-running production deployment.",Using 2.5-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76305,,,Sun Apr 24 09:57:18 UTC 2011,,,,,,,,,,,"0|i01tkv:",8561,,,,,,,,,,,,,,,,,,,,"19/Oct/10 17:48;davsclaus;Can you post how you have setup this?

;;;","19/Oct/10 21:37;gim;Here's how I've used the aggregator:

{code}
from(""activemq:source"")
  .aggregate(header(""some-id""), new MyAggregationStrategy())
  .aggregationRepository(new HawtDBAggregationRepository(""repo"", ""hawtdbfile""))
  .to(""activemq:destination"");
{code}

I've replicated the behaviour with only HawtDB. By opening a new HawtDB file, and only putting in data of a fixed size into the identical key, the file size grows indefinitely, depending on the size of the data. In the following code, the breakpoint appears to be at 489 characters of data. The file size remains constant with 488 character string, but grows indefinitely with a 489-character string. I think this probably has something to do with how the size of the data relates to the page size (set on TxPageFileFactory).

{code}
public class App {
  public static void main (String[] args) {
    String filename = args[0];
    int dataSize = Integer.parseInt(args[1]);

    BTreeIndexFactory<String, String> indexFact =
        new BTreeIndexFactory<String, String>();
    indexFact.setKeyCodec(StringCodec.INSTANCE);
    indexFact.setValueCodec(StringCodec.INSTANCE);
    indexFact.setDeferredEncoding(true);

    TxPageFileFactory pageFact = new TxPageFileFactory();
    pageFact.setFile(new File(filename));
    pageFact.setPageSize((short)512);
    pageFact.setMappingSegementSize(8 * 1024 * 1024);
    pageFact.setSync(true);
    pageFact.open();
    TxPageFile pageFile = pageFact.getTxPageFile();

    Transaction tx = pageFile.tx();
    if (!tx.allocator().isAllocated(0)) {
        SortedIndex<String, String> created = indexFact.create(tx);
    }
    tx.commit();
    pageFile.flush();

    String data = """";
    for (int i = 0; i < dataSize; i++) {
      data += ""0"";
    }

    try {
      while (true) {
        tx = pageFile.tx();
        SortedIndex<String, String> index = indexFact.open(tx);

        index.put(""foo"", data);

        tx.commit();
        pageFile.flush();
      }
    } finally {
      pageFact.close();
    }
  }
}
{code};;;","20/Oct/10 05:31;davsclaus;Ah your problem is that you do not have any completion conditions. So data is never gone be sent out of the aggregator, and hence why the hawtdb file keeps growing.

You need to add 1 .. n completion conditions. See more at
http://camel.apache.org/aggregator2

For example a completionTimeout or completionSize etc.

Also Camel in Action chapter 8 covers the aggregator pattern and how to use it with HawtDB;;;","20/Oct/10 18:28;gim;Sorry, in sanitizing the code, I did leave the completion condition out, but be assured that I do have one. As I detailed in the remainder of my comment, the problem is reproducible with only HawtDB code, and appears to not be dependent on the aggregator component.;;;","20/Oct/10 19:27;davsclaus;Please leave all details its important.

What version of HawtDB are you using?

What JDK are you using?
;;;","20/Oct/10 23:40;gim;We're using HawtDB 1.4 and JDK 1.6. (I don't have the exact version number as I don't have access to the machine I was using for testing right now.);;;","21/Oct/10 07:37;davsclaus;Hiram can you take a look.

It looks like HawtDB doesn't register the old data as free.

I have created an unit test in camel-hawtdb
org.apache.camel.component.hawtdb.HawtDBGrowIssueTest

;;;","21/Oct/10 15:13;davsclaus;Hiram is working on a fix so we should try to get it fixed in Camel 2.5. eg a new release of hawtDB that camel-hawtdb uses.;;;","21/Oct/10 15:20;chirino;Thanks for the test case.  I found an allocation leak in HawtDB.  I've got it fixed in the latest snapshot now and am working on spinning a new release so you guys can pick the fix up.;;;","21/Oct/10 16:32;davsclaus;Also remember to update the release notes and camel-hawtdb that v1.5 is required due the bug in older releases;;;","21/Oct/10 17:52;davsclaus;trunk: 1026081.

Gleen HawtDB 1.5 has been released which has the fix. So you should be able to upgrade and use that version.
Thanks for reporting.

Its already in central maven repo;;;","23/Oct/10 16:18;gim;Thanks for your work on this. I'm currently out if the office for a while, but I'm excited to try it out once I'm back. ;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,
camel-exec not present in the feature,CAMEL-3248,12487953,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jb@nanthrax.net,jb@nanthrax.net,18/Oct/10 12:18,24/Apr/11 09:57,14/Jul/23 05:45,21/Oct/10 18:11,,,,,,,,,,,,,2.5.0,,,,,,,,1,,,,,,,,,"camel-exec component is not present in the feature descriptor.

I'm gonna submit a patch for that component.",,olivier.roger,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Oct/10 12:50;jb@nanthrax.net;CAMEL-3248.patch;https://issues.apache.org/jira/secure/attachment/12463433/CAMEL-3248.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76306,,,Sun Apr 24 09:57:59 UTC 2011,,,,,,,,,,,"0|i01tkn:",8560,,,,,,,,,,,,,,,,,,,,"19/Oct/10 04:40;davsclaus;Thanks for the patch. There is however a features-spring2.xml file as well for end users using Spring 2.5.6 with OSGi.

BTW: We actually need a better way than having 2 separate files. Would be better if the spring2.xml file was auto generated.;;;","19/Oct/10 04:41;davsclaus;And you can add an unit test in tests/camel-itest-karaf
It just tests that the feature can be deployed on karaf.;;;","19/Oct/10 06:28;ldywicki;The generation of the second features.xml may be done by XSLT. What do you think?;;;","19/Oct/10 07:24;jb@nanthrax.net;Thanks a lot Claus for your comment.

I will submit a new patch including both feature updated and itests.;;;","19/Oct/10 09:04;njiang;@Lukasz,
There is a component which is not support by spring 2.2.x.
camel-spring-javaconfig , please filtered it when you are using the XSLT to do the job.;;;","21/Oct/10 07:41;davsclaus;Jean maybe you can attach the patch with the features.xml features-spring2.xml so we can get that into the kit.

Hadrian may very well start creating a new 2.5 RC so better get this fixed. Then we can add the unit tests later.;;;","21/Oct/10 07:45;jb@nanthrax.net;I already have the patch with both features updated.

Anyway, I begun to add camel-itests, camel-itests-karaf and camel-itests-osgi test case.

I speed up the unit test completion and provide the patch.;;;","21/Oct/10 12:50;jb@nanthrax.net;This new patch provides both features descriptor updated and itests.;;;","21/Oct/10 18:11;davsclaus;trunk: 1026089.

Thanks for the patch.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,
XmppEndPoint - setting login to false when creating an account results in no action,CAMEL-3237,12487884,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mdhomem,mdhomem,15/Oct/10 16:01,24/Apr/11 09:57,14/Jul/23 05:45,11/Nov/10 11:58,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-xmpp,,,,0,,,,,,,,,"{code}
XmppEndPoint myXmppEndPoint = new XmppEndPoint();
(...)
myXmppEndPoint.setCreateAccount(true);
myXmppEndPoint .setLogin(false);
(...)
{code}

This will result in ""no action"" in xmpp server, if setLogin true the account is created and the user stays online.

I believe it's because of the logic used in createConnection() method of XmppEndPoint that could be changed to:
{code}
if (!connection.isAuthenticated()) {
            if (user != null) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in to XMPP as user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }
                if (password == null) {
                    LOG.warn(""No password configured for user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }

                if (createAccount) {
                    AccountManager accountManager = new AccountManager(connection);
                    accountManager.createAccount(user, password);
                }
                if(login){
                	if (resource != null) {
                		connection.login(user, password, resource);
                	} else {
                		connection.login(user, password);
                	}
                }
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in anonymously to XMPP on connection: ""  + getConnectionMessage(connection));
                }
                connection.loginAnonymously();
            }
{code}

",,mdhomem,,,,,,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,,,,"17/Oct/10 20:06;jb@nanthrax.net;CAMEL-3237.patch;https://issues.apache.org/jira/secure/attachment/12463431/CAMEL-3237.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76307,,,Sun Apr 24 09:57:59 UTC 2011,,,,,,,,,,,"0|i01ti7:",8549,,,,,,,,,,,,,,,,,,,,"16/Oct/10 13:28;davsclaus;What is it you suggest to be changed in the code?;;;","16/Oct/10 13:28;davsclaus;Added code snippet to easier read the code;;;","17/Oct/10 20:05;jb@nanthrax.net;I reproduce the issue.

createAccount shouldn't be affected by the login attribute.

I submit a patch in that way.;;;","18/Oct/10 14:33;mdhomem;Hi,

Ok Jean the patch resolves the issue.

Claus thanks for the tip about ""code snippet"".;;;","11/Nov/10 11:58;davsclaus;trunk: 1033904.

Thanks for the patch.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
-Psetup.eclipse with Java6 doesn't use proper dependencies or JRE level,CAMEL-3234,12487507,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,14/Oct/10 18:31,24/Apr/11 09:57,14/Jul/23 05:45,15/Oct/10 02:21,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"
If you use -Psetup.eclipse or eclipse:eclipse to setup the projects, it sets the execution environment to J2SE-1.5.  HOWEVER, if using Java6, it doesn't include many of the dependencies that are required for Java 5, like JAXB and activation and such.

I'm attaching a patch that, when you use -Psetup.eclipse, changes the compiler plugin to 1.6 when using 1.6 ONLY for that profile.   This, in effect, sets the execution environment to workspace default (which will likely be 1.6 if using 1.6) and thus things build.   The projects then import correctly and build.

FYI: this was taken from CXF's build system.  :-)",,,,,,,,,,,,,,,,,,,CAMEL-3233,,,,,,,,,,,,,,,"14/Oct/10 18:31;dkulp;camel-eclipse.patch;https://issues.apache.org/jira/secure/attachment/12463335/camel-eclipse.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76308,,,Sun Apr 24 09:57:23 UTC 2011,,,,,,,Patch Available,,,,"0|i01thr:",8547,,,,,,,,,,,,,,,,,,,,"15/Oct/10 02:21;hadrian;Patch applied at rev: 1022811. Thanks again Dan.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eclipse setup targets generate invalid projects,CAMEL-3233,12487502,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,14/Oct/10 17:17,24/Apr/11 09:57,14/Jul/23 05:45,14/Oct/10 18:49,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"
The eclipse setups in the poms generates invalid  projects for camel-blueprint and camel-spring due to refering to source directories outside of the basedir.    ",,,,,,,,,,,,,,,,,,,,CAMEL-3234,,,,,,,,,,,,,,"14/Oct/10 17:18;dkulp;patch.txt;https://issues.apache.org/jira/secure/attachment/12463334/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76309,,,Sun Apr 24 09:57:04 UTC 2011,,,,,,,Patch Available,,,,"0|i01thj:",8546,,,,,,,,,,,,,,,,,,,,"14/Oct/10 17:18;dkulp;
Use antrun to add the extra sources into the sources jar.;;;","14/Oct/10 18:26;hadrian;Patch working with java5 and committed at rev: 1022639. Testing with java6 now.
Dan, thanks for the contribution!;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX MBeans not registered for initiators,CAMEL-3231,12487500,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bglattfelder,bglattfelder,13/Oct/10 14:34,24/Apr/11 09:57,14/Jul/23 05:45,14/Oct/10 19:39,2.5.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"registering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther, but no initiators.",all,,,,,,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,"13/Oct/10 14:36;bglattfelder;QuickfixjEngine.java;https://issues.apache.org/jira/secure/attachment/12463383/QuickfixjEngine.java","13/Oct/10 15:36;bglattfelder;QuickfixjEngineTest.java;https://issues.apache.org/jira/secure/attachment/12463384/QuickfixjEngineTest.java","13/Oct/10 17:44;hadrian;camel-3231.txt;https://issues.apache.org/jira/secure/attachment/12463362/camel-3231.txt",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76310,,,Sun Apr 24 09:57:51 UTC 2011,,,,,,,Patch Available,,,,"0|i01tgv:",8543,,,,,,,,,,,,,,,,,,,,"13/Oct/10 14:36;bglattfelder;Moved the JMX registration to the start() method;;;","13/Oct/10 15:36;bglattfelder;... and the updated unit test;;;","13/Oct/10 17:44;hadrian;Hi Beat,

It is easier to review if you attach just the patch, not the whole file. I edited the files manually and created the patch that reflects your changes (`svn diff > patch.txt` if you use svn).

However I get 2 QFJ mbean not registered errors this patch seems to introduce and I'll have to look into before applying it (unless you beat me to it).

Many thanks for the patch!;;;","14/Oct/10 09:17;bglattfelder;Where do you get the errors, in the unit tests?;;;","14/Oct/10 12:02;hadrian;Yes, 2 of the tests in QuickfixjEngineTest.;;;","14/Oct/10 12:25;bglattfelder;I have patched both ""enableJmx.."" test methods and they both passed;;;","14/Oct/10 19:39;davsclaus;trunk: 1022678.

Thanks Beat for the patch.

Tested it with both JDK 1.5 and 1.6.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
GenericFileProducer.writeFile method creates instance of un-used InputStream,CAMEL-3223,12487504,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,unmarshall,unmarshall,12/Oct/10 14:41,24/Apr/11 09:57,14/Jul/23 05:45,14/Oct/10 20:09,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,1,,,,,,,,,"org.apache.camel.component.file.GenericFileProducer
Method: writeFile

This method has the following statement:
InputStream payload = exchange.getIn().getBody(InputStream.class);

This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. 

In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName, exchange);) also opens an InputStream on the same message.","Not significant, can be reproduced agnostic of any environment",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Oct/10 16:53;mukundha_g;patch.txt;https://issues.apache.org/jira/secure/attachment/12463346/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76311,,,Sun Apr 24 09:57:42 UTC 2011,,,,,,,,,,,"0|i01tf3:",8535,,,,,,,,,,,,,,,,,,,,"12/Oct/10 16:53;mukundha_g;Fix for Issue CAMEL-3223: GenericFileProducer.writeFile method creates instance of un-used InputStream
* src\main\java\org\apache\camel\component\file\GenericFileProducer.java
   writeFile(): Removed the InputStream variable initialization

Patch by: Mukundha Madhavan;;;","13/Oct/10 07:38;njiang;@Claus, 
I'm not sure what's the payload InputStream for, it looks like useless, Can you confirm it?;;;","14/Oct/10 19:42;davsclaus;Yeah its an oversight we didnt remove during the big file/ftp refactoring.
We should remove it.

I am running tests now with it removed.;;;","14/Oct/10 20:09;davsclaus;trunk: 1022687.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Threads - Should allow using 0 in core pool size,CAMEL-3220,12487478,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Oct/10 06:43,24/Apr/11 09:58,14/Jul/23 05:45,12/Oct/10 07:14,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76312,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,,,,,"0|i01tef:",8532,,,,,,,,,,,,,,,,,,,,"12/Oct/10 07:14;davsclaus;trunk: 1021642.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy should not trim separate in case end users use tab separators or the likes,CAMEL-3219,12487487,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Oct/10 05:23,24/Apr/11 09:57,14/Jul/23 05:45,12/Oct/10 05:54,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-bindy,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Big-problem-with-csv-tab-separator-file-and-bindy-data-format-tp3207520p3207520.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76313,,,Sun Apr 24 09:57:40 UTC 2011,,,,,,,,,,,"0|i01te7:",8531,,,,,,,,,,,,,,,,,,,,"12/Oct/10 05:54;davsclaus;trunk: 1021635.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScheduledPollConsumer should avoid runnable thread to die to ensure its kept being scheduled,CAMEL-3216,12487475,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Oct/10 15:25,24/Apr/11 09:57,14/Jul/23 05:45,11/Oct/10 15:57,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"scheduled consumers such as file / ftp uses ScheduledPollConsumer to poll. If a throwable is thrown then the thread may die due it throws that to the JDK.
We should avoid this and ensure to catch all exceptions, otherwise the thread may die, and the JDK will not re-schedule a new thread.

This cause it to stop polling.

See
http://fusesource.com/forums/thread.jspa?threadID=2320&tstart=0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76314,,,Sun Apr 24 09:57:57 UTC 2011,,,,,,,,,,,"0|i01tdj:",8528,,,,,,,,,,,,,,,,,,,,"11/Oct/10 15:57;davsclaus;trunk: 1021396.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quartz routes are not started if quartz component is referenced after context was started,CAMEL-3203,12487457,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,anydoby,anydoby,06/Oct/10 14:48,24/Apr/11 09:57,14/Jul/23 05:45,07/Oct/10 15:17,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,,,,"Quartz routes are not active if added after camel context was already started.

Here is an elaborate description of the problem and a sample project that reproduces it: http://anydoby.com/jblog/en/java/1955
Sorry, no patch this time because I may not know enough about the internals of QuartzComponent, hesitate to offer anything but a boolean flag somewhere.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76315,,,Sun Apr 24 09:57:35 UTC 2011,,,,,,,,,,,"0|i01tan:",8515,,,,,,,,,,,,,,,,,,,,"06/Oct/10 15:07;davsclaus;Settings as minor as there is a workaround;;;","07/Oct/10 15:17;davsclaus;trunk: 1005489.

Thanks for reporting and having a sample application to demonstrate the issue.;;;","08/Oct/10 08:23;anydoby;Thank you Claus, no problem. I have another issue on Quartz coming. I will describe it in the next ticket.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
The CxfConsumer's getContinuation method might throw NPE,CAMEL-3201,12487450,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,alitokmen,alitokmen,06/Oct/10 12:59,24/Apr/11 09:57,14/Jul/23 05:45,07/Oct/10 06:07,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"Hello

When trying the latest CAMEL 2.5.0 SNAPSHOT, I got a NPE:

{noformat}
java.lang.NullPointerException
       at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:129)
       at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:65)
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
       at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
...
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Oct/10 13:19;alitokmen;CAMEL-3201.patch;https://issues.apache.org/jira/secure/attachment/12463344/CAMEL-3201.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76316,,,Sun Apr 24 09:57:11 UTC 2011,,,,,,,Patch Available,,,,"0|i01ta7:",8513,Regression,,,,,,,,,,,,,,,,,,,"06/Oct/10 13:01;alitokmen;Attaching patch;;;","06/Oct/10 13:12;hadrian;Thanks for reporting this and for the patch. If provider is null, what happens?
Did you intend something like below?
{code}
return provider == null ? null : provider.getContinuation();
{code}
;;;","06/Oct/10 13:18;alitokmen;Hello

Yes, indeed I had meant your version :)

The return being null is already checked by the caller, here is a snippet:

{noformat}
                Continuation continuation = getContinuation(cxfExchange);
                if (continuation != null && !endpoint.isSynchronous()) {
                    return asyncInvoke(cxfExchange, continuation);
                } else {
                    return syncInvoke(cxfExchange);
                }
{noformat};;;","06/Oct/10 13:39;hadrian;Thanks Savas, I'll apply the patch, you still get the credit :).;;;","06/Oct/10 15:08;davsclaus;Hadrian get in touch with willem as he knows this CXF continuation stuff and have worked on this.;;;","07/Oct/10 05:27;njiang;@Hadrian

I'm OK with the patch, please apply it.;;;","07/Oct/10 05:29;njiang;If you are using cxf-rt-http-jetty-transport or cxf-rt-jms-transport, there is always a ContinuationProvider, but if you are using other transport, you will get the NPE.
;;;","07/Oct/10 06:07;hadrian;Patch applied with thanks to Savas (rev: 1005334). Keep them coming.;;;","07/Oct/10 07:18;alitokmen;Excellent :)

Indeed, I'm using the HTTP transport without Jetty, hence the NPE as Willem explained

Cheers;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,
"Allow : and , inside quoted names for addresses",CAMEL-3199,12487449,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tjsnell,tjsnell,tjsnell,05/Oct/10 15:57,24/Apr/11 09:58,14/Jul/23 05:45,06/Oct/10 03:55,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,1,,,,,,,,,"""Snell, Tracy"" <tjs@juicelabs.com> breaks with the current address parsing.",,hadrian,karthz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Oct/10 02:45;tjsnell;camel-mail-patch.txt;https://issues.apache.org/jira/secure/attachment/12463331/camel-mail-patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76317,,,Sun Apr 24 09:58:23 UTC 2011,,,,,,,Patch Available,,,,"0|i01t9r:",8511,,,,,,,,,,,,,,,,,,,,"06/Oct/10 00:39;karthz;In MailBinding.java, in the method appendRecipientToMimeMessage(), 

{code} 
replace this line

        String[] lines = recipient.split(""[,;]"");

with 

        String[] lines = recipient.split(""[,;](?=([^\""]*\""[^\""]*\"")*[^\""]*$)"");
{code} 


The regex just does a lookahead to see if every quote has its matching quote till the end.;;;","06/Oct/10 01:05;tjsnell;Heh, that's exactly what I did. Added it to the test, now just testing with an example to do a final confirmation.

Actually this is the regex I used:

{code}
  String[] lines = recipient.split(""[,;]++(?=(?:(?:[^\\\""]*+\\\""){2})*+[^\\\""]*+$)"");
{code};;;","06/Oct/10 02:45;tjsnell;Here's the new regex and a modified test for coverage.;;;","06/Oct/10 02:56;hadrian;I assume the pom.xml change is unintentional.;;;","06/Oct/10 03:06;tjsnell;Fat fingers in my IDE :) Blitz that change.;;;","06/Oct/10 03:55;hadrian;Patch applied (r1004889) with thanks to Tracy Snell. Nice contribution, keep them coming.
;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
 DefaultCamelContext throws NPE in getRoute(String id),CAMEL-3198,12487448,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,stefan_b,stefan_b,05/Oct/10 15:29,24/Apr/11 09:57,14/Jul/23 05:45,07/Oct/10 06:02,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,," DefaultCamelContext throws NPE in getRoute(String id) if no routes are deployed.
This happens because the ""route LinkedHashSet"" is not initialized.

Fix:
 don't do Lazy init of route  or add this to getRoute(String id):
 if (routes == null) {
	routes = new LinkedHashSet<Route>();
 } 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76318,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,Patch Available,,,,"0|i01t9j:",8510,,,,,,,,,,,,,,,,,,,,"06/Oct/10 04:02;hadrian;Stefan, thanks for reporting this and for the proposed fix! The change below does it (similar to your suggestion), but I have to fix a test before I commit it.

{code}
     public Route getRoute(String id) {
-        for (Route route : routes) {
+        for (Route route : getRoutes()) {
             if (route.getId().equals(id)) {
                 return route;
             }

{code};;;","07/Oct/10 06:02;hadrian;Fix applied. Thanks Stefan for reporting and proposed fix.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
request/reply over JMS using temporary queues - if connection lost the temporary queue is not re-created which causes the producer to not work anymore,CAMEL-3193,12487430,12487853,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,04/Oct/10 06:24,05/Oct/10 12:55,14/Jul/23 05:45,05/Oct/10 12:54,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,,,,"To recreate the problem you need a route with a jms inout endpoint that is configured to use a temporary destination for replies. Till now I was only able to show the problem with tibco ems.

- Start broker
- Start the jms consumer that replies to the request
- Start the route 
- Send a request/reoply exchange (should work)
- Stop the broker
- Wait long enough for the client to do a full reconnect (I used connectionFactory.setReconnAttemptCount(1) on the client so I do not have to wait so long)
- Start the broker -> The jms component will do a full new connect
- Send a request/reoply exchange -> Now a InvalidDestination Exception happens

The client route will not work anymore until a restart as it creates the temporary destination only once and it is invalid now.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Oct/10 10:01;davsclaus;CAMEL-3193.patch;https://issues.apache.org/jira/secure/attachment/12463410/CAMEL-3193.patch","04/Oct/10 06:49;cschneider;ClientTest.java;https://issues.apache.org/jira/secure/attachment/12463408/ClientTest.java","04/Oct/10 06:30;cschneider;patch.txt;https://issues.apache.org/jira/secure/attachment/12463407/patch.txt",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76319,,,Tue Oct 05 08:38:06 UTC 2010,,,,,,,,,,,"0|i01t8f:",8505,,,,,,,,,,,,,,,,,,,,"04/Oct/10 06:30;cschneider;Adding a patch that contains a unit test for the problem. Unfortunately the test is not yet working unattended. I was only able to recreate the problem in Tibco EMS. As the EMS server is external it has to be stopped / started by hand.

So my first goal is to recreate the problem in ActiveMQ and make the test run fully unattended.

 Any ideas how to achieve this?
;;;","04/Oct/10 06:46;davsclaus;Chrsitian the title of this ticket is misleading. Could you change it.

Its a problem with failover/re-connection on some brokers such as Tibco EMS which doesn't automatic failover temporary queues.
It ought to be the brokers problem to ensure this works out of the box.

What happens when the _other_ side returns back a reply on that _old_ temporary queue? You can't just create a new temporary queue on re-connection/failover.
Hence I think its more a broker problem than the camel-jms component.;;;","04/Oct/10 06:49;cschneider;Adding a small sample client with pure spring jms (without camel) that shows an attempt how we can fix the problem. 
The idea is to use setExceptionListener for the MessageListenerComntainer. It catches the InvalidDestinationException and then 
recreates the temp queue and the Listener. I think we will need something similar in camel.

listener.setExceptionListener(new ExceptionListener() {

            @Override
            public void onException(JMSException exception) {
                exception.printStackTrace();
                if (exception instanceof InvalidDestinationException) {
                    listener.stop();
                    setupListener(connectionFactory, jmsTemplate);
                }
            }

        });

After looking into the code of camel jms I think the right place is in the TemporaryQueueReplyManager. I will attach a patch shortly.;;;","04/Oct/10 06:50;davsclaus;Maybe you can used a fixed reply to queue instead? Just to see if that works for you with re-connection/failover. Then you have a workaround/solution. 
;;;","04/Oct/10 06:57;cschneider;A fixed reply queue will work but has more adminsitrative overhead. I also never have used fixed reply queues with more than one consumer on them but I guess camel will handle this case.

I will try to work out a patch in any case. If we do not get it into the 2.5.0 then I can still create a small branch for EnBW that contains the fix. But I only do these things as soon as a fix is in trunk so I am sure the next release will contain it. 

Thanks for the fast reply. Btw. What is your estimation for the 2.5.0 release date?
;;;","04/Oct/10 07:06;davsclaus;Yeah fixed queues on brokers which may not be able to automatic create the queues on demand often causes admin overhead :)

I can see one issue if a patch will create a new temporary queue, if there was an exception using the old one. 
In that cause I think you could lose messages which are in-flight (eg replies are expected on the old temporary queue)

However it would fix the issue of new messages as they just use the newly created temporary queue and it ought to just work.
But I bet this is better than _nothing_.

I will try to touch base with some AMQ committers and hear their point of view.

We are talking about Camel 2.5 on the dev forum. We are waiting for scalate 1.3 to be released. But with good luck we may be able to start the release this week or start of next.;;;","04/Oct/10 09:28;davsclaus;Had a chat with the AMQ people. Temporary queues is only associated with a jms connection. So when that connection dies the pending messages on the temporary queue as well.

The best option is to use real queues if you want to be absolute sure that a reply message is not lost.

Anyway I think your idea of using an exception listener and then catch the invalid destination and then restart the listener is a good idea.
;;;","04/Oct/10 10:01;davsclaus;Christian it is maybe something like this patch you need to resolve your problem?

Maybe you can take a look at it and try it out on your system.;;;","04/Oct/10 12:40;cschneider;Hi Claus,

I have to wait till I am at home to be able to test the patch. From what I tested in the morning I think you will also need to do ""setReplyTo(null)"" to let camel forget the old destination.

Thanks for the quick help

Christian
;;;","04/Oct/10 12:43;cschneider;Hi Claus,

did the ActiveMQ folks have any idea how to reproduce the problem in ActiveMQ. I tried to shutdown the broker and restart it but the Temporary queue was still valid. So it almost seems the temp queue outlives a connection in ActiveMQ. It would be great to have a automatic test for this problem to test the fix and document the issue in code. 

Thanks 

Christian
;;;","04/Oct/10 13:17;davsclaus;The AMQ people use a SocketProxy when testing various network issues.

For example:
https://fisheye6.atlassian.com/browse/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/transport/SoWriteTimeoutTest.java?r=HEAD;;;","05/Oct/10 07:29;cschneider;I tested your patch yesterday and found we can solve this even much easier. The current code of TemporaryQueueReplyManager uses SimpleMessageListenerContainer. I just needed to switch to the DefaultMessageListenerContainer to achieve the same effect. I noticed this when I merged your patch with mine and tried to recreate the error. The problem did  not occur anymore even when I switched off your exceptionListener. 

So I looked into DefaultMessageListenerContainer and found that they support reconnections. They even do a fresh resolve of the temporary queue so it is recreated automatically. So I propose we simply go this way.

I just committed this change. Feel free to roll back if you see any problem with this aproach for the 2.5.0 release. I also committed the test but disabled it as it does not run unattended.;;;","05/Oct/10 08:38;davsclaus;Ah that is perfect. Why didn't we consider this before, its after all the spring DMLC that is used to consume the reply messages from the temporary queue.

;;;",,,,,,,,,,,,,,,,,
Completed aggregated exchanges are never confirmed in the AggregationRepository,CAMEL-3189,12487838,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gim,gim,01/Oct/10 23:38,24/Apr/11 09:58,14/Jul/23 05:45,02/Oct/10 07:58,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"Under certain circumstances, the completed exchanges from an aggregator would remain in the AggregationRepository and redeliver after a restart of Camel. These exchanges had already successfully completed their route, so this redelivery is in error.

My guess is that in the AggregationProcessor on line 374, the AggregateOnCompletion gets added to a UnitOfWork that doesn't ever get done() called on it... or something.

I seemed to be able to prevent the problem by changing my AggregationStrategy. The old version looked like this:
{code}
public Exchange aggregate (Exchange oldExchange, Exchange newExchange) {
  String body = """";
  if (oldExchange != null) {
    body = oldExchange.getIn().getBody(String.class);
  }
  body += newExchange.getIn().getBody(String.class);
 newExchange.getIn().setBody(body);
 return newExchange;
}
{code}

You can see that the exchanges are aggregated into the newExchange. I changed it to aggregate into the oldExchange:
{code}
public Exchange aggregate (Exchange oldExchange, Exchange newExchange) {
  String body = """";
  if (oldExchange != null) {
    body = oldExchange.getIn().getBody(String.class);
  } else {
    oldExchange = newExchange;
  }

  body += newExchange.getIn().getBody(String.class);
  oldExchange.getIn().setBody(body);
 return oldExchange;
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76320,,,Sun Apr 24 09:58:11 UTC 2011,,,,,,,,,,,"0|i01t7j:",8501,,,,,,,,,,,,,,,,,,,,"02/Oct/10 07:39;davsclaus;You could paste details about the route you use as well?;;;","02/Oct/10 07:58;davsclaus;trunk: 1003751.

It works fine in 2.5. I actually would assume it works fine in 2.4 as well as we improve the aggregator in that version.
You should upgrade to Camel 2.4 and try with that version.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent consumers on seda endpoint can cause content routing to mismatch,CAMEL-3188,12487844,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bfeaver,bfeaver,01/Oct/10 20:21,24/Apr/11 09:57,14/Jul/23 05:45,02/Oct/10 15:16,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"When consuming concurrently from a seda endpoint, when the route contains a content router based on the header, it will randomly route through the wrong choice.

In my specific case, I was consuming from an activemq queue, which would receive messages with a header that would then determine which route it would follow. It would randomly send messages down the wrong path. When I turned on tracing, it would behave itself. It also behaved itself when I limited it to only a single consumer. I was, however, able to duplicate it with the unit test below. Due to the concurrency issue, the test can occasionally pass, but run it a couple times and it should fail. It'll either receive 2 messages when it should have only gotten 1, or it will get no messages when it should have gotten 1.

{code:title=ConcurrencyTest.java|borderStyle=solid}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.CamelTestSupport;

public class ConcurrencyTest extends CamelTestSupport {

	@EndpointInject(uri = ""mock:result"")
	protected MockEndpoint resultEndpoint;
	
	@EndpointInject(uri = ""mock:otherResult"")
	protected MockEndpoint otherResultEndpoint;

	@Produce(uri = ""seda:start"")
	protected ProducerTemplate template;

	public void testSendMatchingMessage() throws Exception {
		String expectedBody = ""<matched/>"";
		
		resultEndpoint.expectedBodiesReceived(expectedBody);
		otherResultEndpoint.expectedBodiesReceived(expectedBody);

		template.sendBodyAndHeader(expectedBody, ""myDirection"", ""send"");
		template.sendBodyAndHeader(expectedBody, ""myDirection"", ""received"");

		resultEndpoint.assertIsSatisfied();
	}

	@Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""seda:start?concurrentConsumers=10"")
//                from(""seda:start?concurrentConsumers=1"")
                	.choice()
                		.when(header(""myDirection"").isEqualTo(""send"")).to(""mock:result"")
                		.when(header(""myDirection"").isEqualTo(""received"")).to(""mock:otherResult"");
            }
        };
    }
}
{code}","Mac OS X 10.6.4
Java(TM) SE Runtime Environment (build 1.6.0_20-b02-279-10M3065)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76321,,,Sun Apr 24 09:57:06 UTC 2011,,,,,,,,,,,"0|i01t7b:",8500,,,,,,,,,,,,,,,,,,,,"02/Oct/10 10:40;davsclaus;The problem actually seems to be the isEqualTo predicate.

The CBR is okay.;;;","02/Oct/10 11:49;davsclaus;CAMEL-2651 is the culprit.;;;","02/Oct/10 15:16;davsclaus;trunk: 1003810.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
PublishEventNotifier - Should not emit events during startup/shutdown and not spawn new events when processing event,CAMEL-3187,12487834,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/10 12:51,24/Apr/11 09:57,14/Jul/23 05:45,01/Oct/10 13:16,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"When an event is being send to an endpoint using PublishEventNotifier it may create new events, and so forth. This causes a flood of events.

Also further complications occur during start/shutdown of Camel when you send events to routes, which are then being graceful shutdown. Therefore this event notifier should *only* publish if camel is fully started and running.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76322,,,Sun Apr 24 09:57:30 UTC 2011,,,,,,,,,,,"0|i01t73:",8499,,,,,,,,,,,,,,,,,,,,"01/Oct/10 13:16;davsclaus;trunk: 1003527.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
@EndpointInject not working in bean created by blueprint,CAMEL-3186,12487543,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,ariekenb,ariekenb,01/Oct/10 12:42,24/Apr/11 09:58,14/Jul/23 05:45,08/Dec/10 13:28,2.4.0,,,,,,,,,,,,2.6.0,,,,camel-blueprint,,,,0,,,,,,,,,"I am attaching a small test project that uses blueprint to create a camel context and a bean named Producer.  This project builds an OSGi bundle that I am deploying in FUSE ESB 4.3.0-fuse-01-00.  The Producer bean has an @EndpointInject annotation on a ProducerTemplate:

	@EndpointInject(ref = ""testEndpoint"")
	private ProducerTemplate testEndpoint;

The Producer bean's init method sets a timer that tries to call testEndpoint.sendBody() once per second.  This throws a null pointer exception because the testEndpoint did not get injected:

07:35:31,826 | WARN  | Producer         | Producer                         | org.aaron.camel.Producer           51 | 118 - org.aaron.camel - 1.0.0.SNAPSHOT | send exception
java.lang.NullPointerException
        at org.aaron.camel.Producer.timerPop(Producer.java:48)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at org.aaron.camel.Producer.access$000(Producer.java:11)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at org.aaron.camel.Producer$1.run(Producer.java:29)[118:org.aaron.camel:1.0.0.SNAPSHOT]
        at java.util.TimerThread.mainLoop(Timer.java:512)[:1.6.0_21]
        at java.util.TimerThread.run(Timer.java:462)[:1.6.0_21]

This same test works perfectly if I use Spring DM to create the camel context and Producer bean.
","Ubuntu Linux 10.04, Sun JDK 1.6.0_21",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Oct/10 12:42;ariekenb;camel-blueprint-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12463406/camel-blueprint-test.tar.gz",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76323,,,Sun Apr 24 09:58:15 UTC 2011,,,,,,,,,,,"0|i01t6v:",8498,,,,,,,,,,,,,,,,,,,,"01/Oct/10 12:42;ariekenb;Test project.;;;","01/Oct/10 13:06;davsclaus;See
http://fusesource.com/forums/thread.jspa?threadID=2278&tstart=0;;;","03/Oct/10 06:51;davsclaus;Get in touch with gnodet what feature OSGi provides for IoC stuff which you need to hook into. 

You should leverage {{org.apache.camel.impl.CamelPostProcessorHelper}} from camel-core. Just as the spring stuff do in camel-spring.;;;","04/Oct/10 07:02;gnodet;This is one of the few limitations of the blueprint stuff right now, but i think it should be fixed.
You need to uncomment line 99 of the blueprint CamelContextFactoryBean:
{code}
@XmlElement(name = ""beanPostProcessor"", type = CamelBeanPostProcessor.class, required = false),
{code}

So you need to create the appropriate CamelBeanPostProcessor class in the blueprint module.
To define a processor using Aries Blueprint, you need to have the class implement the org.apache.aries.blueprint.BeanProcessor interface and make sure the associated ExtendedBeanMetadata#isProcessor() returns true (this flag needs to be set in the namespace handler).

When that's done, you should be able to intercept bean creation / destruction events from the processor and do what's needed.
;;;","21/Oct/10 13:35;njiang;@Guillaume
I didn't find a way to associate my BeanProcessor with the ExtendedBeanMetadata.
Can you show me some code snippet for it ?;;;","21/Oct/10 14:02;gnodet;Once you have your processor, you need to register the blueprint metadata.
You can find an example in the decorateManagedProperties method  at http://svn.apache.org/repos/asf/incubator/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmNamespaceHandler.java
Note the call to metadata.setProcessor(true);;;;","08/Dec/10 13:28;gnodet;Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	C	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelConsumerTemplateFactoryBean.java => components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelFactoryBean.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintContainerRegistry.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelConsumerTemplateFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelEndpointFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelProducerTemplateFactoryBean.java
	M	components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelThreadPoolFactoryBean.java
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/OSGiBlueprintTestSupport.java
	A	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/TestProducer.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-10.xml
Committed r1043407
;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
restlet producer - Should set status code,CAMEL-3185,12487825,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/10 08:24,24/Apr/11 09:57,14/Jul/23 05:45,01/Oct/10 08:35,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-restlet,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Restlet-HTTP-status-and-message-tp3047023p3047023.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76324,,,Sun Apr 24 09:57:11 UTC 2011,,,,,,,,,,,"0|i01t6n:",8497,,,,,,,,,,,,,,,,,,,,"01/Oct/10 08:35;davsclaus;trunk: 1003431.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Confusing IllegalArgumentException when address attribute isn't specified on CXF endpoint.,CAMEL-3181,12487955,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,adrian.trenaman,adrian.trenaman,30/Sep/10 09:13,24/Apr/11 09:57,14/Jul/23 05:45,30/Sep/10 14:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"If you create CXF endpoint, like this, without the address attribute, 

{code:xml}
	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>
{code} 

... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is 

{code}
Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint 
does not implement createEndpointUri() to create a default value
	at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386)
{code} 

We find that if you explicitly set the address then the problem goes away (see below)

{code:xml} 
	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		address=""http://localhost:9000/GreeterContext/SOAPMessageService""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>
{code} 

On camel-cxf web page, the 'address' attribute is not mentioned anywhere in the table of URI properties, so you might be lead to believe that it's not necessary. ",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76325,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,,,,,"0|i01t5r:",8493,,,,,,,,,,,,,,,,,,,,"30/Sep/10 09:19;njiang;The CXF should pick up the Address information from the WSDL, I will dig the Exception to see how to fix it.;;;","30/Sep/10 09:31;adrian.trenaman;Nice one Willem - much appreciated! ;;;","30/Sep/10 13:57;njiang;Hi Adrian,

I tried the reproduce the error in the camel trunk and I found this issue had been fixed about 2 month ago by CAMEL-2997.
Please try the latest Camel 2.5-SNAPSHOT to verify it.


;;;","30/Sep/10 14:12;njiang;Just one more note, if the wsdl has multiple service or port, you need to specify the service name and endpoint name like this.
{code}
  <cxf:cxfEndpoint id=""routerEndpoint"" address=""http://localhost:8092/PersonService/""
                   serviceClass=""org.apache.camel.wsdl_first.Person""
                   endpointName=""person:soap""
                   serviceName=""person:PersonService""
                   wsdlURL=""person.wsdl""
                   xmlns:person=""http://camel.apache.org/wsdl-first""/>
{code}

;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Change dir before retrieving file,CAMEL-3174,12487792,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Sep/10 06:38,24/Apr/11 09:57,14/Jul/23 05:45,29/Sep/10 09:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-tp2806817p2806817.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76326,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,,,,,"0|i01t47:",8486,,,,,,,,,,,,,,,,,,,,"29/Sep/10 09:45;davsclaus;Already fixed for FTP.

Fixed this for SFTP as well in trunk: 1002541.;;;","29/Sep/10 19:31;davsclaus;changing dir is now done folder at a time, trunk: 1002821.;;;","03/Oct/10 07:57;davsclaus;improved a bit more: 1003927.;;;","06/Oct/10 08:09;davsclaus;Improved to let it work with absolute paths: 1004923.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Setting password and username using UserInfo on uri does not work,CAMEL-3170,12487692,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/10 11:54,24/Apr/11 09:57,14/Jul/23 05:45,28/Sep/10 12:01,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,,,,"You should be able to set ftp endpoint uri as:
{code}
""ftp://scott@localhost:"" + getPort() + ""/deletefile?password=tiger&binary=false&delete=true""
{code}

And when using password and username in the userinfo part of the uri:
{code}
""ftp://tiger:scott@localhost:"" + getPort() + ""/deletefile?binary=false&delete=true""
{code}

The latter didn't work",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76327,,,Sun Apr 24 09:57:48 UTC 2011,,,,,,,,,,,"0|i01t3b:",8482,,,,,,,,,,,,,,,,,,,,"28/Sep/10 12:01;davsclaus;trunk: 1002131.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PollingConsumerSupport.start() do not get called,CAMEL-3158,12487650,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,azarov,azarov,25/Sep/10 12:18,24/Apr/11 09:58,14/Jul/23 05:45,26/Sep/10 06:06,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"I have a subclass of PollingConsumerSupport and create it in a subclass of DefaultPollingEndpoint. The problem is that DefaultPollingEndpoint wraps PollingConsumer into DefaultScheduledPollConsumer and the latter does not call PollingConsumerSupport.start:

DefaultScheduledPollConsumer.java:

    @Override
    protected void doStart() throws Exception {
        pollingConsumer = getEndpoint().createPollingConsumer();
        super.doStart();
    }
",,azarov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76328,,,Sun Apr 24 09:58:20 UTC 2011,,,,,,,,,,,"0|i01t0n:",8470,,,,,,,,,,,,,,,,,,,,"26/Sep/10 06:06;davsclaus;trunk: 1001365.

Thanks for reporting.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CXF Producer if no type converter is available,CAMEL-3151,12487855,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,23/Sep/10 10:57,24/Apr/11 09:57,14/Jul/23 05:45,03/Oct/10 11:07,,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"When I am trying to send the content of a file to an CXF endpoint in PAYLOAD format, I get a NullPointerException in line 603 of the CXFEndpoint class (in the current trunk). The offending coding is:
                CxfPayload<?> payload = (CxfPayload<?>)params[0];
                List<Element> elements = payload.getBody();

The params are set in line 282 of the CxfProducer class:
            params = new Object[1];
            // TODO: maybe it should be mandatory body?
            params[0] = exchange.getIn().getBody(CxfPayload.class);

The fix is most probably trivial (change to getMandatoryBody()) and add a throws InvalidPayloadException to the getParams() method of CxfProducer). After this is fixed (the same for the MESSAGE format two lines lower), the example will still not work, but I get a meaningful error message saying that there is no type converter between GenericFile and CxfPayload.

One could argue, that under some circumstances null payloads may be legal (I just don't see any), but in this case the CxfEndpoint class would have to be modified to avoid the NullPointerException. As the coding is a missing converter or a null payload will trigger NullPointerExceptions for CxfEndpoints unconditionally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76329,,,Sun Apr 24 09:57:33 UTC 2011,,,,,,,,,,,"0|i01sz3:",8463,,,,,,,,,,,,,,,,,,,,"25/Sep/10 11:52;davsclaus;Can you attach a small unit test which demonstrates this?

And what content in the message do you send?;;;","27/Sep/10 10:55;siano;Actually it is an issue in error handling, so I don't really know how to write a unit test for that. 

Maybe it helps explaining what I actually do:
I have a beans.xml that looks like that:

<?xml version=""1.0""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	   xmlns:camel=""http://camel.apache.org/schema/spring""
	   xmlns:cxf=""http://camel.apache.org/schema/cxf""
	   xmlns:http-conf=""http://cxf.apache.org/transports/http/configuration""
	   xmlns:sample=""http://services.samples/xsd""
	   xsi:schemaLocation=""
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
         http://cxf.apache.org/transports/http/configuration
         http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://camel.apache.org/schema/cxf
         http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-http.xml""/>  
     
	<cxf:cxfEndpoint id=""serviceEndpoint""
        		     address=""http://myhost:8080/MockServices/EchoService""
        		     wsdlURL=""EchoService.wsdl""
        		     endpointName=""sample:EchoServicePort"" 
        		     serviceName=""sample:EchoService"">
		<cxf:properties>
			<entry key=""dataFormat"" value=""PAYLOAD"" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""file://c:/temp/camel/poller"" />
			<!-- The wsdl contains multiple operations, so we select one -->
			<camel:setHeader headerName=""operationName"">
				<camel:constant>buyStocksOperation1K</camel:constant>
			</camel:setHeader>	
			<camel:to uri=""cxf:bean:serviceEndpoint"" />
		</camel:route>
	</camel:camelContext>
</beans>

You can use any wsdl for that (even for a webservice that does not exist, because it will not get called). Then put a xml-file matching the request type of the endpoint into the /temp/camel/poller directory. You will encounter a NullPointerException. After the getBody() statements are replaced by getMandatoryBody() statements, the scenario does still not work, but now you get a (IMO much better) TypeConversionException that indicates the reason for the issue.

Mid-term it might be a good idea to have a TypeConverter for CxfPayload type messages. If that is there, the fix will not show up anymore in this scenario (but maybe in other scenarios where no type converter is available).;;;","03/Oct/10 10:31;davsclaus;So the file contains the XML for the SOAP message? You can use the SOAP data format to transform that file into SOAP.

But yes I wonder if the camel-cxf can have a type converter which can do that as well?;;;","03/Oct/10 11:07;davsclaus;trunk: 1003946.

Now uses mandatory body.;;;","04/Oct/10 07:21;siano;The file contains the XML for the Payload of the SOAP message (without the SOAP Envelope). If the file did contain the whole SOAP message (with envelope and all) this would be MESSAGE data format and that works.

Writing a type converter for camel-cxf is pretty easy. The CXFPayload contains two lists, one for headers, that can remain empty for this use case and one for the body, which is a list of DOM elements, so it's actually pretty easy to have a type converter between NodeList, Document or Element and CXFPayload. This can be glued together with other type converters by a default converter.

I have already done so (about 100 lines of code), however before I can provide the code we need to undergo some outbound open source process, which will take some weeks, sorry for that.

Nevertheless, I think this fix here is useful, even if these type converters where there, because there could still be some StrangeMessageWithoutConverters and it is helpful to get the error message that there is no type converter for that instead of a NullPointerException.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp: fileExist=Fail not honored when producer works in FTP root path,CAMEL-3144,12487632,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,raphael@apache.org,raphael@apache.org,21/Sep/10 19:59,24/Apr/11 09:57,14/Jul/23 05:45,22/Sep/10 06:22,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,camel-ftp,,,0,,,,,,,,,"when using a route with ftp producer such as :

 <to uri=""ftp://user@host/?fileExist=Fail&fileName=test&password=mypass"" />

The route will not correctly fail if the fileName already exists.

It will work in any sub-directory:

 <to uri=""ftp://user@host/mydir?fileExist=Fail&fileName=test&password=mypass"" />

The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.
This method returns null when the parameter string is ""/"". It should return ""/"".

The attached patch fixes the issue.
","Camel on Linux; IIS FTP server ",raphael@apache.org,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/10 20:00;raphael@apache.org;FileUtil.patch;https://issues.apache.org/jira/secure/attachment/12463398/FileUtil.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76330,,,Sun Apr 24 09:57:57 UTC 2011,,,,,,,Patch Available,,,,"0|i01sxj:",8456,,,,,,,,,,,,,,,,,,,,"22/Sep/10 06:22;hadrian;Patch applied with minor changes and checkstyle fixes. Thanks Raphael for spotting this.;;;","22/Sep/10 06:26;davsclaus;Hadrian I am adding additional unit test for this in camel-core and camel-ftp;;;","22/Sep/10 06:55;davsclaus;Btw the patch is buggy. It should return null if there is no path, but it returns the name of the file. I have fixed that as well.
Running full tests before committing fixes and additional unit tests.

Hadrian we should take time to add tests for patches when they discover a bug in which we don't have an unit test for.;;;","22/Sep/10 07:11;davsclaus;Okay unit test added and file util fixed as well.;;;","22/Sep/10 07:33;raphael@apache.org;You're right, the patch is buggy. I should have tested it with more use cases than my own before attaching, sorry about this.

Actually, I'm not even sure it is the correct fix because other components may depend on the FileUtil.onlyPath(""/"") == null behavior for correct operation.
I'm unsure of the expected semantics of the operation in root directory on a file system rather than remote file system.

An alternate fix with less potential side effects would be to directly fix FtpOperations to better handle a return null from onlyPath(), something like:

--- FtpOperations.java	2010-09-22 09:16:25.000000000 +0200
+++ FtpOperations.java.patched	2010-09-22 09:18:51.000000000 +0200
@@ -381,7 +381,7 @@
         // check whether a file already exists
         String directory = FileUtil.onlyPath(name);
         if (directory == null) {
-            return false;
+	    directory = ""/"";
         }
 
         String onlyName = FileUtil.stripPath(name);
;;;","22/Sep/10 08:20;davsclaus;Raphael can you test source from trunk as I also modified camel-ftp as well.;;;","23/Sep/10 10:58;raphael@apache.org;I've created a test environment using camel-2.5-SNAPSHOT artefacts and could not reproduce the bug.

A tcpdump trace shows that camel-ftp now correctly tries to list the target directory before attempting to write the file.;;;","23/Sep/10 13:17;davsclaus;Ah this is great news. Thanks for testing Raphael.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
OsgiDefaultCamelContext.getTypeConverterRegistry() returns null ,CAMEL-3143,12487627,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cl4es,cl4es,21/Sep/10 19:40,24/Apr/11 09:58,14/Jul/23 05:45,22/Sep/10 09:40,2.4.0,,,,,,,,,,,,2.5.0,,,,osgi,,,,0,,,,,,,,,"The showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html, whose DozerTypeConverterLoader tries to get the type converter registry using: {{{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}}}

Plausible error:
{code:title=OsgiDefaultCamelContext.java}
   @Override
    protected TypeConverter createTypeConverter() {
        return new OsgiTypeConverter(bundleContext, getInjector());
    }
{code}

{code:title=DefaultCamelContext.java}
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof DefaultTypeConverter) {
                typeConverterRegistry = (DefaultTypeConverter) typeConverter;
            }
        }
        return typeConverterRegistry;
    }
{code}

Error:
getTypeConverter() returns an OsgiTypeConverter 
OsgiTypeConverter does not inherit from DefaultTypeConverter, thus the instanceof returns false
=> null is returned

Solution:
Lots of different ways to do this, and it's getting late here. In this case, maybe it's OsgiDefaultCamelContext's responsibility to also override getTypeConverterRegistry with something along the lines of:
{code}
@Override
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof OsgiDefaultTypeConverter) {
                typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry();
            }
        }
        return typeConverterRegistry;
    }
{code}

We've employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java:
{code:java}
        TypeConverter typeConverter = camelContext.getTypeConverter();
        DefaultTypeConverter registry = null;
        if (typeConverter instanceof DefaultTypeConverter) {
            registry = (DefaultTypeConverter)typeConverter;
        } else if (typeConverter instanceof OsgiTypeConverter) {
            OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter;
            registry = osgiTypeConverter.getRegistry();
        }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76331,,,Sun Apr 24 09:58:02 UTC 2011,,,,,,,,,,,"0|i01sxb:",8455,,,,,,,,,,,,,,,,,,,,"22/Sep/10 06:31;davsclaus;Yeah lets add a dozer test in camel-itest-osgi. Then we can look at a nicer solution to this;;;","22/Sep/10 09:03;davsclaus;Dozer is not OSGi compliant. 

The Dozer team is working on integration out of the box with Apache Camel.;;;","22/Sep/10 09:24;davsclaus;Looking into the source code of Dozer its really not well designed for 3rd party to influence loading of resources, overriding classes or hooking into custom logic.

;;;","22/Sep/10 09:29;davsclaus;See here
http://sourceforge.net/tracker/?func=detail&aid=3022810&group_id=133517&atid=727371

As far as in the current camel-dozer component we cannot make it osgi compliant due {{DozerBeanMapper}} being poorly configurable. So we cannot configure how the mapping files should be loaded, by using a custom loader.

;;;","22/Sep/10 09:31;davsclaus;Also {{MappingProcessor}} which does the actual mapping is also a big heavy weight and not easily customizable.

The {{DozerBeanMapper}} will load the mapping files using thread context classloader which doesnt work in that way in OSGi land.
So we end up with this error

{code}
Caused by: org.dozer.MappingException: Unable to locate dozer mapping file [org/apache/camel/itest/osgi/dozer/dozer-mapping.xml] in the classpath!
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:93)
	at org.dozer.util.MappingValidator.validateURL(MappingValidator.java:61)
	at org.dozer.loader.CustomMappingsLoader.loadFromFiles(CustomMappingsLoader.java:101)
	at org.dozer.loader.CustomMappingsLoader.load(CustomMappingsLoader.java:57)
	at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:153)
	at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:136)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:92)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:46)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:181)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:136)
{code};;;","22/Sep/10 09:40;davsclaus;Fixed the OSGi type converter stuff.

trunk: 999836.

But Dozer is still not working in OSGi when loading the mapping files from classpath. Or can you get it working?;;;","22/Sep/10 09:48;bjornbength;Hello Claus,

I'm a colleague of Claes, 
This ticket (as I assume you understand) is not related directly to Dozer. The same null pointer is encountered for me
when i try to explicitly add type converters and fallback converters using java code in our routebuilders in servicemix 4.3.


About dozer:
I can confirm that Dozer could be simpler to use in OSGi but we currently have it running in a few bundles in camel contexts 
in ServiceMix 4.2 with mapping files. 
An upgrade to ServiceMix 4.3 encountered this problem that Claes did work around . However, as you you know,
the camel and osgi refactoring last time around seems to have hidden a few camel osgi packages as private, which means that, with this workaround we need access to these hidden osgi classes. But thats another story..


;;;","22/Sep/10 09:56;davsclaus;Thanks Bjorn.

I have fixed it so the {{getTypeConverterRegistry}} on {{CamelContext}} returns the osgi aware which is now also a {{TypeConverterRegistry}} so you can add your custom type converters directly to it. So the ugly hack is not needed.

Also I have refined the code in {{DozerTypeConverterLoader}} to not use the Dozer CustomerMappingLoader which doesn't work in OSGi.
Now the mapping files can be correctly loaded in OSGi.

However Dozer bits me later when you use the {{DozerBeanMapper}} because it want's to load the mapping file once again.
And the Dozer API is unfriendly to customize so we can't work around this.;;;","22/Sep/10 12:09;cl4es;Nicely done! 

 We've gotten dozer to work in ServiceMix 4.3 by explicitly importing the resource folder which contains the dozer mapping file, i.e. {{<Export-Package>mappings</Export-Package>}} in the maven felix plugin. 

 We had to get this to work inside ServiceMix 4.3, so we improved the previous temporary workaround some to account for camel-core-osgi being a private package with an even *uglier* hack to account for the mindboggling fact that OSGi can load stuff in different classloaders, making us unable to actually cast to OsgiTypeConverter (as in our previous workaround - test code first, good, yes yes):

{code}

    TypeConverter typeConverter = camelContext.getTypeConverter();
    try { 
        Method method = typeConverter.getClass().getMethod(""getRegistry"");
        registry = (DefaultTypeConverter)method.invoke(typeConverter);
    } catch (Throwable t) {
        registry = (DefaultTypeConverter)typeConverter; 
    }
{code}

Cheers! ;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,
Route autoStartup configurable through Property,CAMEL-3141,12487612,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,21/Sep/10 12:31,24/Apr/11 09:58,14/Jul/23 05:45,21/Sep/10 14:17,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,camel-spring,,,0,,,,,,,,,"Using Camel 2.4 I want to make the usage of a certain route configurable through properties. 


{code}
<camelContext id=""camel"" trace=""true""
	xmlns=""http://camel.apache.org/schema/spring"">
	
	<route id=""configurable_1"" autoStartup=""{{startup_1}}"">
		<from uri=""direct:start_1""/>
		<to uri=""mock:end_1""/>
	</route>
		
	<route id=""configurable_2"" autoStartup=""{{startup_2}}"">
		<from uri=""direct:start_2""/>
		<to uri=""mock:end_2""/>
	</route>

</camelContext>
{code}

But if I do use the PropertyPlaceholder on the CamelContext like below it works. 

{code}
<camelContext id=""camel"" trace=""true"" autoStartup=""{{startup_context}}""
{code}

So is this a bug or should this work this way?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76332,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,,,,,"0|i01swv:",8453,,,,,,,,,,,,,,,,,,,,"21/Sep/10 12:41;davsclaus;Are you saying it only works on <camelContext> level, and not on <route> level?;;;","21/Sep/10 12:45;achim_nierbeck;Exactly, 

here probably the relevant part of the exception: 


{code}
Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '{{startup_1}}' is not a valid value for 'boolean'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
{code};;;","21/Sep/10 12:48;davsclaus;Thanks, the <route> tag should have the attributes define as String types so the properties resolver can kick in there as well, just as the <camelContext> does;;;","21/Sep/10 14:17;davsclaus;trunk: 999428.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ftp login anonymous should send empty string as password instead of null parameter,CAMEL-3137,12487593,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Sep/10 07:01,24/Apr/11 09:57,14/Jul/23 05:45,20/Sep/10 07:21,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/anonymous-FTP-login-fails-tp2846235p2846235.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76333,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,,,,,"0|i01svz:",8449,,,,,,,,,,,,,,,,,,,,"20/Sep/10 07:21;davsclaus;trunk: 998815.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean creates another instance of the class instead of directly using the referenced bean,CAMEL-3136,12487591,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,di_m_an,di_m_an,19/Sep/10 13:18,24/Apr/11 09:57,14/Jul/23 05:45,19/Sep/10 15:47,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"... this makes it impossible to inject properties to the @WebService class

<camelContext>
        <route>
            <from uri=""...."" />
            <to uri=""cxfbean:handler"" />
        </route>
</camelContext>

<bean id=""handler"" class=""a.b.c.Handler"">
        <property name=""prop1"" value=""5"" />
</bean>

when ""handler"" is created by Spring, its 'prop1' is set to '5'

when the cxfbean:handler is triggered, the 'prop1' is null, because CXF created another instance of Handler instead of using the one created by Spring",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76334,,,Sun Apr 24 09:57:08 UTC 2011,,,,,,,,,,,"0|i01svr:",8448,,,,,,,,,,,,,,,,,,,,"19/Sep/10 13:56;davsclaus;Please take more time to write down details when creating tickets.

Just providing a title is not sufficient to go after.
More details and source code helps us to go track down what you mean.

;;;","19/Sep/10 15:09;di_m_an;Done;;;","19/Sep/10 15:13;davsclaus;What version of Spring are you using as Spring 2.5 and 3.0 is different how Spring does IoC internally which somehow could cause an issue, so its great to know which version of Spring you use.;;;","19/Sep/10 15:27;di_m_an;I use Spring 3.0.3

As far as I could understand, for some reason CXF uses SingletonFactory to get (create) the bean, but should use SpringBeanFactory.;;;","19/Sep/10 15:30;davsclaus;I have re-produced the issue in an unit test in camel-cxf.

I think I have it fixed, but running tests to ensure it wont break stuff.;;;","19/Sep/10 15:47;davsclaus;trunk: 998687.

Feel free to test the fix in your system as well.;;;","19/Sep/10 16:32;di_m_an;Great! Tested and it works now, thanks!;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
Camel soap dataformat does not work correctly if a method has no input or no output,CAMEL-3133,12487561,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cschneider,cschneider,cschneider,17/Sep/10 12:49,25/Oct/11 11:35,14/Jul/23 05:45,06/Jan/11 09:24,2.4.0,,,,,,,,,,,,2.6.0,,,,,,,,0,,,,,,,,,"Currently the camel soap dataformat can not handle exachanges for a soap method that has no input or no output. This is a known limitation but we should support this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/11 14:52;cschneider;camel-soap-3133.patch;https://issues.apache.org/jira/secure/attachment/12467423/camel-soap-3133.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76335,,,Wed Jan 05 11:14:39 UTC 2011,,,,,,,,,,,"0|i01sv3:",8445,,,,,,,,,,,,,,,,,,,,"24/Dec/10 10:08;davsclaus;Christian do you have time to work on this in the near future? If not push it for v2.7;;;","24/Dec/10 10:21;cschneider;Depends on when the release is planned. I really should finish this soon as it currently limits where you can use the Soap dataformat quite a lot.

;;;","04/Jan/11 14:52;cschneider;Added patch to show the problem with void returns. The problem is in SoapCXFClientTest.testRoundTripSaveCustomer;;;","04/Jan/11 16:38;hadrian;Camel uses the convention that the next in is the previous out (if any) or previous in otherwise. So the camel way of defining void is really an null output.

However in this case, especially because it is possible to have not only one bean invoked, but many between unmarshall and marshall (and other processors as well), my take would be to add a property on the Exchange during unmarshall that identifies the soap method, so that during marshall you can use it do serialize the bean output (if any) into the right type, and perform an automatic type conversion if necessary (and available) as well.;;;","05/Jan/11 11:14;cschneider;I implemented your proposed solution. On Unmarshall I store the CamelSoapAction on the exchange and retrieve it later for the marshal step. As there already is a constant for the property name I just reused this. I hope this does not cause problems anywehere else.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Ref component causes consumer parameters to be cleared, such as delay and initialDelay",CAMEL-3130,12487557,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Sep/10 16:33,24/Apr/11 09:57,14/Jul/23 05:45,16/Sep/10 17:28,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/The-delay-option-seems-not-to-be-working-in-CAMEL-Java-DSL-mode-tp2840369p2840369.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76336,,,Sun Apr 24 09:57:07 UTC 2011,,,,,,,,,,,"0|i01suf:",8442,,,,,,,,,,,,,,,,,,,,"16/Sep/10 17:28;davsclaus;trunk: 997856.;;;","17/Sep/10 08:54;alitokmen;Thank you, it is perfectly operational now;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Using $ in endpoint uri causes thread name parser to fail,CAMEL-3128,12487520,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Sep/10 13:41,24/Apr/11 09:58,14/Jul/23 05:45,16/Sep/10 14:13,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-specify-route-to-folder-with-in-actual-name-tp2839895p2839895.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76337,,,Sun Apr 24 09:58:24 UTC 2011,,,,,,,,,,,"0|i01stz:",8440,,,,,,,,,,,,,,,,,,,,"16/Sep/10 14:13;davsclaus;trunk: 997755.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
polling of feeds in FeedEntryPollingConsumer is broken.,CAMEL-3124,12487556,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ebunders,ebunders,14/Sep/10 13:59,24/Apr/11 09:57,14/Jul/23 05:45,17/Sep/10 11:27,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-rss,,,,0,,,,,,,,,"The FeedEntryPollingConsumer class implements the poll() method for the 'splitEntries' mode of the RssEndpoint is broken.

You can think of two ways that polling feeds could work:
1) A feed is created, then one item is processed, then the delay, then process another item. This way the feed is kept between calls to poll().
2) A feed is created, then all the items are processed, the feed is cleared, and then the delay.

But the way it presently works:
A feed is created, one items is processed, and the feed is cleared, then the delay, and again the feed is created and the next item is cleared.

This is clearly wrong. Feed entries can be missed, because the index of the next item to process is stored over polls but the list isn't. Also this creates a big network overhead when polling very active feeds such as twitter search...

This is easy to fix. In the below code:
{code}
public void poll() throws Exception {
        Object feed = createFeed();
        populateList(feed);   

        while (hasNextEntry()) {
            Object entry = list.get(entryIndex--);

            boolean valid = true;
            if (entryFilter != null) {
                valid = entryFilter.isValidEntry(endpoint, feed, entry);
            }
            if (valid) {
                Exchange exchange = endpoint.createExchange(feed, entry);
                getProcessor().process(exchange);
                // return and wait for the next poll to continue from last time (this consumer is stateful)
                return;
            }
        }
{code}

The return (at line 56 of org.apache.camel.component.feed.FeedEntryPollingConsumer) should be deleted.","ubuntu 10.4
java 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76339,,,Sun Apr 24 09:57:16 UTC 2011,,,,,,,,,,,"0|i01st3:",8436,,,,,,,,,,,,,,,,,,,,"15/Sep/10 12:13;davsclaus;This is how its designed to work form the very start, its not a bug.;;;","15/Sep/10 12:37;ebunders;Well, not strictly a bug. But it seems very strange behavior to me, If you should choose to process one item at each poll, here seems to be no reason to discard the list, in stead of keeping it over polls until depleted. Unless there is a reason I didn't think of...
Is there?

Also I think it would be nice to make the behavior configurable. We now chose to process all feed items with one poll, because it suites our needs, perhaps other use cases are best served with the one-item-per-poll strategy. 

regards,

Ernst;;;","15/Sep/10 13:01;davsclaus;I agree we can improve this behavior, but however it was designed how it works now.;;;","15/Sep/10 13:04;davsclaus;Lets get this improved for Camel 2.5 as we got time for this, waiting for Karaf 2.1 to be released.;;;","17/Sep/10 11:25;davsclaus;After looking into it some more I agree this is a minor bug as it should keep the feed/list in memory to avoid re-loading the feed when it wasn't necessary.

trunk: 998075.;;;","17/Sep/10 11:26;davsclaus;And you can set {{throttleEntries=false}} to let it parse the entire feed at once, and hence it doesn't keep state in memory between polls.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
protobuf dataformat Spring DSL is not working,CAMEL-3122,12487544,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Sep/10 13:24,24/Apr/11 09:57,14/Jul/23 05:45,14/Sep/10 14:02,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"There is the mail thread talks about it.
[1]http://camel.465427.n5.nabble.com/Problem-with-protobuf-example-Spring-DSL-to-unmarshal-to-protobuf-td2835112.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76340,,,Sun Apr 24 09:57:12 UTC 2011,,,,,,,,,,,"0|i01ssn:",8434,,,,,,,,,,,,,,,,,,,,"14/Sep/10 14:02;njiang;Committed the patch with an unit test into the trunk.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter EIP - The sub exchanges should not contains on completions from original Exchange,CAMEL-3121,12487528,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/10 11:39,24/Apr/11 09:57,14/Jul/23 05:45,14/Sep/10 12:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76341,,,Sun Apr 24 09:57:34 UTC 2011,,,,,,,,,,,"0|i01ssf:",8433,,,,,,,,,,,,,,,,,,,,"14/Sep/10 12:00;davsclaus;Added unit test to trunk: 996857.

Cannot re produce the error on trunk. ;;;","14/Sep/10 12:00;davsclaus;I fixed some stuff on file commit stuff due another ticket, so this bug should be resolved as well.;;;","14/Sep/10 12:09;smcduff@hotmail.com;The following post contains 2 problems :

Issue 1:
Cannot rename the file exception. It was found and fixed there:
https://issues.apache.org/activemq/browse/CAMEL-2897
But  the problem only fix when streaming is used. If streaming isn't used... the problem persist. 
Quick patch: 
Splitter.java 
private Iterable<ProcessorExchangePair> createProcessorExchangePairsList( 
                        Exchange exchange, Object value) { 
                List<ProcessorExchangePair> result; 
                Integer collectionSize = CollectionHelper.size(value); 
                if (collectionSize != null) { 
                        result = new ArrayList<ProcessorExchangePair>(collectionSize); 
                } else { 
                        result = new ArrayList<ProcessorExchangePair>(); 
                } 
                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable( 
                                exchange, value); 
                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable 
                                .iterator(); 
                while (iterator.hasNext()) { 
                        ProcessorExchangePair next = iterator.next(); 
                        result.add(next); 
                } 
                return result; 
        } 


Issue 2:
We found a problem of shutdown in the patch we submitted. Now we do not create a DefaultUNitOfWork we only set it at null.

Quick patch: 
public Object next() { 
        Object part = iterator.next(); 
        Exchange newExchange = exchange.copy(); 
                if (iterator.hasNext()) { 
                        newExchange.setUnitOfWork(null); 
                        }                        if (part instanceof Message) { 
                                                        newExchange.setIn((Message) part); 
                                                } else { 
                                                        Message in = newExchange.getIn(); 
                                                        in.setBody(part); 
                                                } 
                                                return createProcessorExchangePair(index++, 
                                                                getProcessors().iterator().next(), newExchange); 
                                        } 

;;;","14/Sep/10 13:20;smcduff@hotmail.com;Hi Claus,

We are still able to reproduce it with 2.5.0. (both problems)

Did you try it on Windows ?

Issue 1:
{code}
from(""file:e:/test/camel"").split(body().tokenize("","")).process(new Processor() {
        @Override
        public void process(Exchange arg0) throws Exception {
                Thread.sleep(2000);
        }
}); 
{code}

It looks like the testcase you`ve done for FileSplitStreamingWithChoiceTest.java except you need to remove streaming.
Quick patch: Splitter.java

{code}
private Iterable<ProcessorExchangePair> createProcessorExchangePairsList(
                        Exchange exchange, Object value) {
                List<ProcessorExchangePair> result;
                Integer collectionSize = CollectionHelper.size(value);
                if (collectionSize != null) {
                        result = new ArrayList<ProcessorExchangePair>(collectionSize);
                } else {
                        result = new ArrayList<ProcessorExchangePair>();
                }
                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(
                                exchange, value);
                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable
                                .iterator();
                while (iterator.hasNext()) {
                        ProcessorExchangePair next = iterator.next();
                        result.add(next);
                }
                return result;
        } 
{code}

Issue 2
Quick Patch:

{code}
public Object next() {
        Object part = iterator.next();
        Exchange newExchange = exchange.copy();
                if (iterator.hasNext()) {
                        newExchange.setUnitOfWork(null);
                        }                        if (part instanceof Message) {
                                                        newExchange.setIn((Message) part);
                                                } else {
                                                        Message in = newExchange.getIn();
                                                        in.setBody(part);
                                                }
                                                return createProcessorExchangePair(index++,
                                                                getProcessors().iterator().next(), newExchange);
                                        }
:
{code};;;","15/Sep/10 08:01;davsclaus;Thanks Simon, I have fixed the windows issue. trunk: 997217;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
hawtdb - Should work in OSGi,CAMEL-3120,12487547,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/10 08:43,24/Apr/11 09:57,14/Jul/23 05:45,14/Sep/10 15:00,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"The {{decode}} method in {{ObjectCodec}} should wrap the causes stacktrace in the wrapped IOException.

For example OSGi frameworks may be pesky and we want to be able to see whatever stacktrace it may thrown on you.

{code}

    public T decode(DataInput dataIn) throws IOException {
        int size = dataIn.readInt();
        byte[] data = new byte[size];
        dataIn.readFully(data);
        ByteArrayInputStream bytesIn = new ByteArrayInputStream(data);
        ObjectInputStream objectIn = new ObjectInputStream(bytesIn);
        try {
            return (T) objectIn.readObject();
        } catch (ClassNotFoundException e) {
            throw new IOException(e.getMessage());
        }
    }
{code}

For being JDK 1.5 compatible you need to do it like
{code}
    public static IOException createIOException(String message, Throwable cause) {
        IOException answer = new IOException(message);
        answer.initCause(cause);
        return answer;
    }
{code}
",,thomas.demande,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Sep/10 10:23;davsclaus;CAMEL-3120-buf.patch;https://issues.apache.org/jira/secure/attachment/12463395/CAMEL-3120-buf.patch","14/Sep/10 10:23;davsclaus;CAMEL-3120-db.patch;https://issues.apache.org/jira/secure/attachment/12463342/CAMEL-3120-db.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76342,,,Sun Apr 24 09:57:47 UTC 2011,,,,,,,,,,,"0|i01ss7:",8432,,,,,,,,,,,,,,,,,,,,"14/Sep/10 09:32;davsclaus;Also hawtdb may have to change how it loads the class. See for example from AMQ:
http://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java;;;","14/Sep/10 09:38;davsclaus;The stacktrace is now
{code}
Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
	at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:60)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:55)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	... 56 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.impl.DefaultExchangeHolder
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at org.apache.felix.framework.ModuleImpl.searchDynamicImports(ModuleImpl.java:1484)
	at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:695)
	at org.apache.felix.framework.ModuleImpl.access$100(ModuleImpl.java:61)
	at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1656)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:604)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1575)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	... 58 more
{code};;;","14/Sep/10 09:41;davsclaus;And when using equinox

{code}
Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
	at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:60)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:55)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	... 56 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.impl.DefaultExchangeHolder
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:494)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:398)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:159)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:207)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:184)
	at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:604)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1575)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351)
	at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:51)
	... 58 more
{code};;;","14/Sep/10 10:23;davsclaus;Patch for hawtdb-buf;;;","14/Sep/10 10:23;davsclaus;Patch for hawtdb;;;","14/Sep/10 10:24;davsclaus;Hiram can you apply the patches to hawtbuf and hawtdb?

Also we need a new release of hawtdb/buf so we can have it work with Apache ServiceMix and OSGi.;;;","14/Sep/10 15:00;davsclaus;Now it works with hawtdb 1.4 and hawtbuf 1.2;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
camel-spring causes wrong initialization-order of dependent beans,CAMEL-3118,12487536,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mrt1nz,mrt1nz,11/Sep/10 14:51,24/Apr/11 09:57,14/Jul/23 05:45,13/Sep/10 04:30,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-spring,,,,0,,,,,,,,,"Attached is a patch with a test that demonstrates the problem. The test uses a custom RouteBuilder ({{SampleIninitalizingRouteBuilder}}) and another bean ({{SampleIninitalizingBean}}) that both implement {{InitializingBean}}. When the beans' {{afterPropertiesSet()}} methods are called, these beans add their names to a shared list. When the {{SampleIninitalizingRouteBuilder.configure()}} method is called then ""configured"" is added to the shared list.

{code:java}
package  org.apache.camel.spring.issues

// imports omitted ...

public class SampleInitializingBean implements InitializingBean {
    private String name;
    private List<String> entries;

    public void setName(String name) {
        this.name = name;
    }

    public void setEntries(List<String> entries) {
        this.entries = entries;
    }

    public void afterPropertiesSet() {
        entries.add(name);
    }
}

public class SampleInitializingRouteBuilder extends RouteBuilder implements InitializingBean {
    private String name;
    private List<String> entries;

    public void setName(String name) {
        this.name = name;
    }

    public void setEntries(List<String> entries) {
        this.entries = entries;
    }

    public void afterPropertiesSet() {
        entries.add(name);
    }

    @Override
    public void configure() throws Exception {
        entries.add(""configured"");
    }
}
{code}

These beans are wired as follows:

{code:xml}
    <bean id=""entries1"" class=""java.util.ArrayList""/>

    <bean id=""sampleBean1""
          class=""org.apache.camel.spring.issues.SampleInitializingBean"">
        <property name=""name"" value=""test1a""/>
        <property name=""entries"" ref=""entries1""/>
    </bean>

    <bean id=""sampleRouteBuilder1""
          class=""org.apache.camel.spring.issues.SampleInitializingRouteBuilder"" depends-on=""sampleBean1"">
        <property name=""name"" value=""test1b""/>
        <property name=""entries"" ref=""entries1""/>
    </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <routeBuilder ref=""sampleRouteBuilder1""/>
    </camelContext>
{code}

Note the {{depends-on}} attribute on the {{sampleRouteBuilder1}} bean: it should ensure that {{sampleBean1}} is being initialized before {{sampleRouteBuilder1}} and the {{camelContext}}. 

Actual behaviour, however, is that the beans are initialized in the following order:

# {{sampleRouteBuilder1}}
# {{camelContext}}
# {{sampleBean1}}

which is definitely wrong. The shared list contains the entries

# {{test1b}}
# {{configured}}
# {{test1a}}

This differs from the expected order

# {{test1a}}
# {{test1b}}
# {{configured}}

which cannot be observed. After some debugging, it seems the problem is related to the {{CamelBeanPostProcessor.postProcessBeforeInitialization()}} method. It does a lookup of the {{camelContext}} (i.e. {{applicationContext.getBean(camelId))}}) *before* the application context finished initialization of dependent beans. The problem is that this lookup already triggers a {{SampleInitializingRouteBuilder.configure()}} method call.

Even worse, this behaviour depends on the declaration order of the beans in the application context XML file. When the {{camelContext}} bean is moved to the top, the bean initialization are done in the correct order.

To demonstrate that this is not a Spring-related problem, the attached test also contains another bean ({{SampleRouteBuilderContainer}}) that plays the role of the {{camelContext}} but does nothing else than calling {{configure()}} on the injected route builder within ({{afterPropertiesSet()}}). In this case, the bean initialization occur in the expected, correct order.

I didn't find a solution to this problem so far and need to dig in further (hope to find some time next week for that). If any of the committers (who are more familiar with camel-spring than I am) have already an idea how to solve that, I appreciate any hints.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Sep/10 14:51;mrt1nz;camel-spring-test.patch;https://issues.apache.org/jira/secure/attachment/12463354/camel-spring-test.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76343,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,,,,,"0|i01srr:",8430,,,,,,,,,,,,,,,,,,,,"13/Sep/10 04:05;njiang;This issue is related to recent change of CAMEL-3050, I'm working on the patch for it now.;;;","13/Sep/10 04:30;njiang;Applied patch into the trunk.;;;","13/Sep/10 06:54;mrt1nz;Thanks for fixing!;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
url encoding goes wrong in org.apache.camel.component.rss.RssComponent#afterConfiguration,CAMEL-3114,12487579,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ebunders,ebunders,10/Sep/10 10:53,24/Apr/11 09:58,14/Jul/23 05:45,19/Sep/10 07:59,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-rss,,,,0,,,,,,,,,"The method org.apache.camel.component.rss.RssComponent#afterConfiguration creates the Url that will be used to fetch the rss feed. We find that with some url's url encoding goes wrong.

consider this url: http://api.flickr.com/services/feeds/photos_public.gne?id=23353282@N05&tags=lowlands&lang=en-us&format=rss_200

AfterConfiguration() calls org.apache.camel.util.URISupport#createRemainingURI This method first calls org.apache.camel.util.URISupport#createQueryString, which is a method that will iterate over a map of request parameters, escape each param name and value using java.net.URLEncoder#encode, and put them together with all the & and = stuff to form the query string.
Then it calls org.apache.camel.util.URISupport#createURIWithQuery Which is a method that takes a URI (the base url) and the constructed query string, and simply creates a new URI with that, returning the toString() output from that.

So this is what the output of this procedure looks like: http://api.flickr.com/services/feeds/photos_public.gne?format=rss_200&id=23353282%2540N05&lang=en-us&tags=lowlands

1 the @ sign was escaped by org.apache.camel.util.URISupport#createQueryString, creating a query string like: id=23353282%40N05&tags=lowlands&lang=en-us&format=rss_200 (which is good)
2 the URI constructor then finds the % in %40 and escapes that again! creating a url like: http://api.flickr.com/services/feeds/photos_public.gne?format=rss_200&id=23353282%2540N05&lang=en-us&tags=lowlands 

Which predictably fails...

I did some tests with the URI constructor, and it seems it only escapes % chars, everything else is left alone.

I attach a groovy script that demonstrates the problem

regards,

Ernst Bunders","jdk: Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
platform: linux (ubuntu 10.04)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Sep/10 10:54;ebunders;test.groovy;https://issues.apache.org/jira/secure/attachment/12463353/test.groovy",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76344,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,,,,,"0|i01sqv:",8426,,,,,,,,,,,,,,,,,,,,"10/Sep/10 10:54;ebunders;this script demonstrates the problem;;;","15/Sep/10 12:15;davsclaus;Can you create a pure Java unit test which demonstrates this, then it can be included as an unit test in the source;;;","15/Sep/10 12:39;ebunders;I guess I could do that;;;","19/Sep/10 07:59;davsclaus;trunk: 998608.

I found the bug and fixed it. I can now read the feed from flickr.

Thanks for reporting. Feel free to test it on your system as well.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
@QueryParam doesn't work for CxfBeans,CAMEL-3113,12487532,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Sep/10 01:17,24/Apr/11 09:57,14/Jul/23 05:45,10/Sep/10 02:08,2.2.0,2.3.0,2.4.0,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"Charle report an issue[1], after tracing the code I found the DefaultCxfBeanBinding doesn't put the http query string into the cxf message.
So the @QueryParam will not take effect on the resource beans.
[1]http://camel.465427.n5.nabble.com/camel-cxfbean-JAX-Rs-QueryParam-td2827252.html#a2827252",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76345,,,Sun Apr 24 09:57:20 UTC 2011,,,,,,,,,,,"0|i01sqn:",8425,,,,,,,,,,,,,,,,,,,,"10/Sep/10 02:08;njiang;Applied patch into the trunk.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate return body should complete UoW beforehand,CAMEL-3108,12487541,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ankelee,ankelee,07/Sep/10 08:50,24/Apr/11 09:58,14/Jul/23 05:45,14/Sep/10 14:19,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,Issue is discussed here: http://camel.465427.n5.nabble.com/ConsumerTemplate-not-finishing-td2642233.html#a2642233,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76346,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,,,,,"0|i01spj:",8420,,,,,,,,,,,,,,,,,,,,"14/Sep/10 14:19;davsclaus;trunk: 996908.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SmppBinding set the destination address npi instead of the source address npi,CAMEL-3107,12487506,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,06/Sep/10 19:06,24/Apr/11 09:57,14/Jul/23 05:45,06/Sep/10 19:10,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-smpp,,,,0,,,,,,,,,"See discussion on the [user@list|http://camel.465427.n5.nabble.com/SMPP-sourceAddrNpi-bug-td2801906.html#a2801906]",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76347,,,Sun Apr 24 09:57:20 UTC 2011,,,,,,,Patch Available,,,,"0|i01spb:",8419,,,,,,,,,,,,,,,,,,,,"06/Sep/10 19:10;muellerc;Patch applied with thanks to Pavel;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
${file:length} should return 0 instead of null if the file length is 0,CAMEL-3100,12487482,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Sep/10 03:48,24/Apr/11 09:57,14/Jul/23 05:45,02/Sep/10 05:13,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"{code}
--- camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(revision 991781)
+++ camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(working copy)
@@ -122,7 +122,8 @@
             message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
             message.setHeader(Exchange.FILE_PARENT, getParent());
     
-            if (getFileLength() > 0) {
+            if (getFileLength() >= 0) {
                 message.setHeader(""CamelFileLength"", getFileLength());
             }
             if (getLastModified() > 0) {
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76348,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,,,,,"0|i01snr:",8412,,,,,,,,,,,,,,,,,,,,"02/Sep/10 05:13;njiang;Applied patch into camel trunk.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp shoud honor the configured encoding,CAMEL-3093,12487459,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,31/Aug/10 19:35,31/Aug/10 20:48,14/Jul/23 05:45,31/Aug/10 20:47,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-smpp,,,,0,,,,,,,,,Currently camel-smpp doesn't honor the encoding option by creating the consumer/producer.,All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76349,,,Tue Aug 31 20:47:28 UTC 2010,,,,,,,,,,,"0|i01sm7:",8405,,,,,,,,,,,,,,,,,,,,"31/Aug/10 20:47;muellerc;added the new option dataCoding and updated the wiki page;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QuartzEndpoint does not set the job name properly,CAMEL-3091,12487455,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,31/Aug/10 01:58,24/Apr/11 09:57,14/Jul/23 05:45,31/Aug/10 13:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,,,,"Looks like the job.name argument is not se properly on the endpoint and defaults to the uri path.

Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in {{""quartz:<uri>""}} vs {{""quartz://<uri>""}}) and the @cron argument contains '?'. The workaround (arguably) is to start the uri with {{""quartz://...""}}.

See [nabble thread|http://camel.465427.n5.nabble.com/Problem-with-cron-expression-configuration-in-camel-context-with-spring-tt2796958.html#a2796958]. Many thanks to SK for reporting this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76350,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,,,,,"0|i01slr:",8403,,,,,,,,,,,,,,,,,,,,"31/Aug/10 02:36;hadrian;The job name part is resolved in r991060.;;;","31/Aug/10 02:56;hadrian;Added failing test in {{QuartzEndpointConfigureTest}} that shows the problem.;;;","31/Aug/10 13:46;davsclaus;trunk: 991189.

Fixed the parameter parsing bug in camel-core due the ? mark in the cron expression;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - requestTimeout with 0 or negative value should mean no timeout,CAMEL-3084,12487423,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Aug/10 12:11,24/Apr/11 09:57,14/Jul/23 05:45,26/Aug/10 12:20,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,,,,This only affects the refactored camel-jms component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76351,,,Sun Apr 24 09:57:58 UTC 2011,,,,,,,,,,,"0|i01sk7:",8396,,,,,,,,,,,,,,,,,,,,"26/Aug/10 12:20;davsclaus;trunk: 989637.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanConveter didn't try to covert the bean invocation argument rightly,CAMEL-3082,12487421,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Aug/10 07:00,24/Apr/11 09:57,14/Jul/23 05:45,26/Aug/10 12:10,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552",,,,,,,,,,,,,,,,,,,CAMEL-3299,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76352,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,,,,,"0|i01sjr:",8394,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty timeout exception,CAMEL-3081,12487416,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skusma@arccorp.com,skusma@arccorp.com,25/Aug/10 15:45,24/Apr/11 09:57,14/Jul/23 05:45,26/Aug/10 08:03,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-netty,,,,0,,,,,,,,,"eventhough message was received by netty procuder, it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority.

		from(""netty:tcp://localhost:6205?textline=true&sync=true"").process(new Processor() {
		    int i=0;
			public void process(Exchange exchange) throws Exception {
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		       // if(i++%2==1) throw new IOException(""custom exception"");
		    }
		});


		from(""file:///test/test/response"")
		.convertBodyTo(String.class)
		.threads(1)
		.to(ExchangePattern.InOut,""netty:tcp://localhost:6205?textline=true&sync=true"")
		.to(""log:+++ reply++++"");

2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG Total 1 files to consume
2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\hello1.txt]]
2010-08-25 11:33:31,510 [      Camel Thread 6 - Threads] SendProcessor                  DEBUG >>>> Endpoint[tcp://localhost:6205] Exchange[GenericFileMessage with body: hello1]
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Creating connector to address: localhost:6205
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Writing body: hello1

2010-08-25 11:33:31,697 [    New I/O client worker #1-1] NettyProducer                  DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd
2010-08-25 11:33:31,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Incoming message: hello1
2010-08-25 11:33:36,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Writing body: Bye 1hello1

2010-08-25 11:33:36,697 [    New I/O client worker #1-1] ClientChannelHandler           DEBUG Message received: Bye 1hello1
2010-08-25 11:33:36,697 [    New I/O client worker #1-1] SendProcessor                  DEBUG >>>> Endpoint[log://+++ reply++++] Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] +++ reply++++                  INFO  Exchange[ExchangePattern:InOut, BodyType:String, Body:Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\hello1.txt.camelLock with result: true
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\hello1.txt] to: GenericFile[C:\test\test\response\.camel\hello1.txt]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\hello1.txt to: C:\test\test\response\.camel\hello1.txt with result: true
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
",tomcat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76353,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,,,,,"0|i01sjj:",8393,,,,,,,,,,,,,,,,,,,,"25/Aug/10 16:01;davsclaus;See the release notes for Camel 2.4.0
http://camel.apache.org/camel-240-release.html

It explains that you must set the timeout to 0 as it doesnt work in Camel 2.4.

Try using 2.5-SNAPSHOT;;;","25/Aug/10 16:12;skusma@arccorp.com;changing from critical to major becuase it doesn't crash but does trigger false failure alerts.;;;","25/Aug/10 16:24;skusma@arccorp.com;as you are fixing it in next release, I guess this bug can be closed?. sorry, I didn't realise it was in release notes.;;;","25/Aug/10 16:31;skusma@arccorp.com;I tried with timeout as zero, it doesn't generate that exception any more.i hope 2.5 still runs in a async mode fine. I am thinking timeout is applicable only for sync mode?.;;;","26/Aug/10 08:03;davsclaus;trunk: 989516.

Removed the {{timeout}} option as it was flawed.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
job rescheduling and clustering does not work properly ,CAMEL-3079,12484611,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,idueppe,idueppe,25/Aug/10 15:26,24/Apr/11 09:58,14/Jul/23 05:45,25/Aug/10 15:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,,,,"Currently stateful cron jobs are identified by their group name, job name and the cron expression. This prevents an easy rescheduling of cron jobs. For instance, stopping a camel context, rescheduling the cron job by editing the cron expressing and restart will end up in an exception. This will happen because the rescheduled job will be added as an additional job. The already existing job will produce an exception because the corresponding endpoint doesn't exist anymore. The previous solution deleting all triggers on shutdown doesn't work in a cluster scenario. 

I suggest to identify cron jobs only by their group and job name. On startup it will check if a trigger already exists and check if the cron expression has changed. If so it will be rescheduled.

Also the current explicit resuming of stateful jobs will produce an exception during startup, because the scheduler automatically finds and resumes stored triggers. 
",Database cluster scenario,idueppe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Aug/10 15:27;idueppe;camel-quartz.patch;https://issues.apache.org/jira/secure/attachment/12463246/camel-quartz.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76354,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,Patch Available,,,,"0|i01sj3:",8391,,,,,,,,,,,,,,,,,,,,"25/Aug/10 15:27;idueppe;Patch is for the current trunk version of 2.5-SNAPSHOT.;;;","25/Aug/10 15:46;davsclaus;trunk: 989179.

Thanks for the patch.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Cache Component configuration requires MemoryStoreEvictionPolicy instance, will not accept parameter as part of URI",CAMEL-3078,12484613,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,deckerego,deckerego,25/Aug/10 03:29,24/Apr/11 09:58,14/Jul/23 05:45,25/Aug/10 12:10,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"In Spring, if one attempts to specify a cache endpoint as:
<endpoint id=""myCache"" uri=""cache://MyCache?memoryStoreEvictionPolicy=MemoryStoreEvictionPolicy.FIFO""/>
an exception will be thrown that the String ""MemoryStoreEvictionPolicy.FIFO"" was not a proper Java Object and no TypeConverter is available. This can be worked-around by manually creating a type converter that performs:
    String policyName = evictionPolicy.replace(""MemoryStoreEvictionPolicy."", """");
    return MemoryStoreEvictionPolicy.fromString(policyName);

Or one could just try to create a new instance from reflection. Above way is a bit more manageable however, since EhCache is taking care of the conversion for you.

",Camel core and cache component retrieved from Maven repo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76355,,,Sun Apr 24 09:58:22 UTC 2011,,,,,,,,,,,"0|i01siv:",8390,,,,,,,,,,,,,,,,,,,,"25/Aug/10 12:10;davsclaus;trunk: 989045.

Thanks for reporting. You can now just assign the option the value as {{FIFO}}. ;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cache Component needs to check for null values during GET operations,CAMEL-3077,12484607,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,deckerego,deckerego,25/Aug/10 03:22,24/Apr/11 09:57,14/Jul/23 05:45,25/Aug/10 11:52,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"EhCache often has a bit of lag time when invalidating expired cache elements, first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.

The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.",Received 2.4.0 release of Camel and Camel Cache component from Maven repo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Aug/10 03:23;deckerego;CacheProducer.NPE.patch;https://issues.apache.org/jira/secure/attachment/12463241/CacheProducer.NPE.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76356,,,Sun Apr 24 09:57:39 UTC 2011,,,,,,,Patch Available,,,,"0|i01sin:",8389,,,,,,,,,,,,,,,,,,,,"25/Aug/10 03:34;deckerego;If it helps, steps to reproduce:
1) Set timeToLiveSeconds to something like 30 seconds
2) Add an entry in a route
3) Wait 30-ish seconds
4) Attempt to make several GETs around the expiry time. One will likely result in an NPE as the entry is being removed by the EhCache monitor;;;","25/Aug/10 11:52;davsclaus;trunk: 989026.

Thanks for the patch.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX statistics is incomplete for processors,CAMEL-3069,12484612,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Aug/10 15:28,24/Apr/11 09:57,14/Jul/23 05:45,23/Aug/10 17:22,2.4.0,,,,,,,,,,,,2.5.0,,,,jmx,,,,0,,,,,,,,,"The statistics for routes is correct. However for processors the stats is wrong. For example {{ExchangesCompleted}} appears to be doubled.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76357,,,Sun Apr 24 09:57:53 UTC 2011,,,,,,,,,,,"0|i01sgv:",8381,,,,,,,,,,,,,,,,,,,,"23/Aug/10 17:22;davsclaus;trunk: 988215.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - Exception thrown from custom aggregation strategy could cause BatchSender thread to terminate,CAMEL-3064,12484640,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Aug/10 14:03,17/Jan/11 16:50,14/Jul/23 05:45,19/Aug/10 14:46,1.6.3,,,,,,,,,,,,1.6.4,,,,camel-core,,,,0,,,,,,,,,We should use try .. catch to catch custom exceptions being thrown from AggregationStrategy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76358,,,Mon Jan 17 16:50:49 UTC 2011,,,,,,,,,,,"0|i01sfr:",8376,,,,,,,,,,,,,,,,,,,,"19/Aug/10 14:46;davsclaus;trunk: 987166.

This issue only applies for 1.x.;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Out of Heap memory issues with Camel-File processing large files,CAMEL-3060,12484657,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,v_cheruvu@hotmail.com,v_cheruvu@hotmail.com,18/Aug/10 13:52,24/Apr/11 09:57,14/Jul/23 05:45,19/Aug/10 03:47,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"Camel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. 

http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76359,,,Sun Apr 24 09:57:13 UTC 2011,,,,,,,,,,,"0|i01sev:",8372,,,,,,,,,,,,,,,,,,,,"19/Aug/10 03:47;davsclaus;trunk: 987008.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
dummyTrustManager does not work as described,CAMEL-3056,12484954,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,varnerac,varnerac,14/Aug/10 12:49,24/Apr/11 09:57,14/Jul/23 05:45,14/Aug/10 15:49,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,0,,,,,,,,,"The documentation for the Mail component (http://camel.apache.org/mail.html) indicates that the {{dummyTrustManager}} option will allow you to skip over the certificate check. Using that option in a Mail component's URI results in:

{quote}
Caused by: java.io.IOException: Couldn't connect using SSL socket factory class null to host, port: my.email.server.com, -1; Exception: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory
	at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:216)
	at com.sun.mail.iap.Protocol.<init>(Protocol.java:109)
	at com.sun.mail.imap.protocol.IMAPProtocol.<init>(IMAPProtocol.java:104)
	at com.sun.mail.imap.IMAPStore.protocolConnect(IMAPStore.java:585)
	... 13 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory
{quote}

This is because of a decision made in CAMEL-1215 to move it to test. I think the documentation implies that this is a tool you could use (cautiously) in the development phase, and shouldn't be restricted to the unit tests. Either way, the class needs to be moved back into {{camel-mail.jar}} or the documentation needs to remove this option.","Snow Leopard, JDK 1.6, ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76360,,,Sun Apr 24 09:57:17 UTC 2011,,,,,,,,,,,"0|i01sdz:",8368,,,,,,,,,,,,,,,,,,,,"14/Aug/10 15:49;davsclaus;Thanks I have updated the documentation.
https://cwiki.apache.org/confluence/display/CAMEL/Mail;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilderRef should work out of the box with Spring 3 and dependency injection,CAMEL-3050,12484692,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/10 13:30,24/Apr/11 09:57,14/Jul/23 05:45,12/Aug/10 13:51,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-spring,,,,0,,,,,,,,,"Spring 3 changed internally how dependency resolution works. Its now worse as we have to play tricks in the Camel namespace handler to tell Camel the various pieces you can ref, should depend on Camel. Otherwise the dependency resolution in Spring is not working properly.

This used to work like a charm in Spring 2.5.6.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76361,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,,,,,"0|i01scn:",8362,,,,,,,,,,,,,,,,,,,,"12/Aug/10 13:51;davsclaus;trunk: 984775.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using custom global interceptor can cause routes to not entirely warmup,CAMEL-3049,12484678,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/10 11:15,24/Apr/11 09:57,14/Jul/23 05:45,13/Aug/10 09:05,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-4-InterceptStrategy-error-tp2473088p2473088.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76362,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,,,,,"0|i01scf:",8361,,,,,,,,,,,,,,,,,,,,"12/Aug/10 14:06;cmoulliard;The code is coming from Fusesource/forge web site --> project Fuse ESB Audit --> http://fusesource.com/forge/projects/ESBAUDIT/source 

git://forge.fusesource.com/esbaudit.git

look in this directory to chekc the content of the class : org.fusesource.esb.audit.camel\src\main\java\org\fusesource\esb\audit

I have simply modify some pom.xml files + one class to be able to use camel 2.4/Karaf2.0. My code has not been yest committed as I'm not sure that I have the rights to commit something.;;;","13/Aug/10 08:38;davsclaus;The interceptor should extend DelegateAsyncProcessor instead, then it should work. But this requires Camel 2.4 onwards.

{code}
public class AuditInterceptor extends DelegateProcessor
{code}

Should be
{code}
public class AuditInterceptor extends DelegateAsyncProcessor
{code}

And then implement the async process method instead.
I will fix the logic in camel-core to cater for both situations, to ensure child services is started in both situations.;;;","13/Aug/10 09:05;davsclaus;trunk: 985137.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"JettyHttpComponent.doStop() shuts down all servers in the VM, not just those associated with the component",CAMEL-3047,12487534,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,11/Aug/10 22:33,24/Apr/11 09:58,14/Jul/23 05:45,19/Aug/10 09:43,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jetty,,,,0,,,,,,,,,"We are running several bundles in Karaf with separate Camel contexts, each of which uses the camel-jetty component to expose services over HTTP.  Each bundle has an assigned port and may listen on multiple URIs.  We noticed that when we updated or shut down one of these bundles, all of the Jetty servers in the other bundles would stop listening on their respective ports.

The problem is that the map of ConnectorRef objects in JettyHttpComponent is static, and therefore shared across the entire VM.  Changing this from static to an instance variable fixed the issue for us.  ","Java 1.6.0_20, Karaf 1.6.0, OSX 10.6.4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Aug/10 22:00;pegli;CAMEL-3047-refcount.patch;https://issues.apache.org/jira/secure/attachment/12463326/CAMEL-3047-refcount.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76363,,,Sun Apr 24 09:58:02 UTC 2011,,,,,,,Patch Available,,,,"0|i01sbz:",8359,,,,,,,,,,,,,,,,,,,,"11/Aug/10 22:35;pegli;patch against trunk 984599;;;","12/Aug/10 06:47;davsclaus;I don't think changing to not static solves the problem.

What if you want to use the same connector in multiple bundles? eg you want to use port 8080 in bundle A and bundle B.
;;;","12/Aug/10 22:00;pegli;Patch against trunk 984912 which maintains the static connectors map and uses reference counting to determine whether a connector should be shut down completely.;;;","12/Aug/10 22:02;pegli;Claus, this new patch should address the issue of sharing connectors across different bundles (really, across different CamelContexts in the same VM).  I'm pressed for time right now, but will try to get a unit test that exercises the multiple-context case soon.;;;","13/Aug/10 07:59;davsclaus;Thanks Paul for the revised path.

Yeah would be good with an unit test in both camel-jetty and in camel-itest-osgi;;;","13/Aug/10 08:00;davsclaus;Willem do you mind patching this?

And if possible create an unit test in osgi which has 2 bundles using jetty. And then stop one of the bundles. And send in a http request to the 2nd bundle to ensure it still runs.;;;","19/Aug/10 09:43;njiang;Applied the patch with thanks to Paul,  I also fix an issue which could shutdown the server still has one reference.
I also added an OSGi unit test for it.
;;;","19/Aug/10 10:23;davsclaus;Perfect. Great work both guys.;;;","20/Oct/10 09:44;ialex;It is a bit irrelevant, since 2.5 is almost out, but i think the patch has a little problem.

The line : 
if (connectorRef != null && connectorRef.decrement() == 0)
should be 
if (connectorRef != null && connectorRef.refCount == 0)

Otherwise, it gets decremented twice -in disconnect too?-  (in my example i had 2 routes and the problem was still there after a restart of one of them).
In 2.5 it is ok though, just the attached patch has this code.;;;","20/Oct/10 11:49;njiang;@Ioannis,
Yes, the patch has a defect, and I already fixed it before committed the patch :)
You can check the change here https://issues.apache.org/activemq/browse/CAMEL-3047?page=com.atlassian.jira.plugin.ext.subversion%3Asubversion-commits-tabpanel.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,
Flatpack component : unable to set the delimiter parameter in spring config file,CAMEL-3045,12485142,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rsinelle,rsinelle,11/Aug/10 12:38,24/Apr/11 09:58,14/Jul/23 05:45,11/Aug/10 14:28,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-flatpack,,,,0,,,,,,,,,"It's not possible to set the delimiter parameter in spring configuration file or I don't find the way to do it !
For example : 
<route id=""routeA"">
   <from uri=""file:src/test/resources/csv?move=done/&amp;fileName=testfileRouteA.csv"" />
   <to uri=""flatpack:delim:META-INF/Delimited.pzmap.xml?delimiter=;"" />
</route>

I get the following error :
Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route routeA at: >>> To[flatpack:delim:META-INF/Delimited.pzmap.xml?ignoreFirstRecord=false&splitRows=true&delimiter=;] <<< in route: Route[[From[file:src/test/resources/csv?move=done/&fileName=... because of Failed to resolve endpoint: flatpack://delim:META-INF/Delimited.pzmap.xml?delimiter=%3B&ignoreFirstRecord=false&splitRows=true due to: Could not find a suitable setter for property: delimiter as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: char with value ;
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:231)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:219)
	at org.apache.camel.spring.Main.doStart(Main.java:173)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:114)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:291)
	at org.apache.camel.spring.Main.main(Main.java:97)

If it's a bug, to solve it, it's just necessary to change the class org.apache.camel.component.flatpack.DelimitedEndpoint as below :
- change the flied definition like this (and getter/setter to):
    private String delimiter = "","";
    private String textQualifier = ""\"""";

- and the the method createParser like this :
    public Parser createParser(Exchange exchange) throws InvalidPayloadException, IOException {
        Reader bodyReader = ExchangeHelper.getMandatoryInBody(exchange, Reader.class);
        Resource resource = getResource();
        if (delimiter == null || delimiter.equals(""""))
        	delimiter = "","";        
        if (textQualifier == null || textQualifier.equals(""""))
        	textQualifier = ""\"""";
        if (resource == null) {
            return getParserFactory().newDelimitedParser(bodyReader, delimiter.charAt(0), textQualifier.charAt(0));
        } else {
            return getParserFactory().newDelimitedParser(new InputStreamReader(resource.getInputStream()), bodyReader, delimiter.charAt(0), textQualifier.charAt(0), ignoreFirstRecord);
        }
    }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76364,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,,,,,"0|i01sbj:",8357,,,,,,,,,,,,,,,,,,,,"11/Aug/10 13:21;davsclaus;Ah we just need a String -> char type converter and we are all set.;;;","11/Aug/10 14:28;davsclaus;trunk: 984420.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingErrorHandler interfere with onException,CAMEL-3044,12484779,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Aug/10 11:52,24/Apr/11 09:57,14/Jul/23 05:45,11/Aug/10 12:28,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"Looks like if you have an onException to catch and handle an exception, the logging error handler may interfere and cause the message to be logged as well, which causes the onException to kick in due the logging action is also a route process. (possible endless loop)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76365,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,,,,,"0|i01sbb:",8356,,,,,,,,,,,,,,,,,,,,"11/Aug/10 12:28;davsclaus;trunk: 984390.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
The OSGiIntegrationSpringTest's setup method is called twice,CAMEL-3040,12484712,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Aug/10 03:33,24/Apr/11 09:57,14/Jul/23 05:45,11/Aug/10 14:18,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"After checking the @Before annotation's java doc, you will find that the methods which are annotated with @Before will be called even it's in the superclasses.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76366,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,,,,,"0|i01saf:",8352,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel archetype complains about Java.lang.ClassNotFoundException: com.sun.xml.bind.v2.ContextFactory in JDK 1.5,CAMEL-3037,12484682,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Aug/10 11:57,24/Apr/11 09:57,14/Jul/23 05:45,12/Aug/10 08:24,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Camel-2-4-0-NoClassDefFoundError-org-springframework-context-SmartLifecycle-appears-in-camel-in-acti-td2268328.html#a2268328",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76367,,,Sun Apr 24 09:57:43 UTC 2011,,,,,,,,,,,"0|i01s9r:",8349,,,,,,,,,,,,,,,,,,,,"12/Aug/10 08:24;davsclaus;Willem have committed a fix for this;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-web seems a bit borked viewing an endpoint in tomcat,CAMEL-3036,12485044,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,09/Aug/10 10:23,24/Apr/11 09:57,14/Jul/23 05:45,09/Aug/10 11:42,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"e.g. try ""mvn tomcat:run"" then try navigate to an endpoint to try send a message to it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3035,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76368,,,Sun Apr 24 09:57:28 UTC 2011,,,,,,,,,,,"0|i01s9j:",8348,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Auto assigned CamelContext id should be unique in the JVM,CAMEL-3031,12484839,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Aug/10 05:42,24/Apr/11 09:58,14/Jul/23 05:45,07/Aug/10 10:20,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/multiple-camel-contexts-as-viewed-from-JMX-tp2265902p2265902.html

Route ids are being unique, so we should be able to do that for CamelContext id as well. And we should reject starting an application if an existing CamelContext exists with the same id. This applies to JMX.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76369,,,Sun Apr 24 09:58:08 UTC 2011,,,,,,,,,,,"0|i01s8f:",8343,,,,,,,,,,,,,,,,,,,,"06/Aug/10 08:40;davsclaus;I will implement a check which will fail starting a CamelContext if another context has been registered in JMX with the same ObjectName;;;","06/Aug/10 19:05;akarpe;Hi Claus,

This is a rather serious issue. I also verified that direct endpoints for camel contexts with the same context id in 2 different bundles cannot see each other. However they can indeed see each other using VM endpoints.

It seems Camel creates 2 separate camel contexts ignoring the fact that they have the same context id. i would have thought Spring would not allow this to happen and would use an existing bean and not instantiate a fresh one if the id was the same. 

In JMX, however, Camel seems to lists both contexts against the same context id.

Not sure whether the fix should be that the route should not be instantiated if a context already exists under the same name. I would hae thought Spring beahvior would be to automatically use the existing bean of the given id instead of failing. Also is a bundle the determinant for failure...?
Would this not be a problem then for applications that use Spring but not OSGi and do want to re-use the camel context...

Is it not better to see if a context already exists and re-use it... ?

Regards,

Ashwin... ;;;","06/Aug/10 19:56;akarpe;Hi Claus,

Ben and I are working on the same customer project where we ran into this issue. The version of Camel that the customer is using is Camel version 2.2. The deployment is on a FUSE OSGi container version 4.2.0

Hope this helps.

Cheers,

Ashwin...
 ;;;","07/Aug/10 07:05;davsclaus;When you define a <camelContext/> in a XML file, you have 2 choices
a) the id can be explicit given
b) no id given

In the former case Camel will use this id as the bean id in Spring ApplicationContext and as well for JMX.
In the latter Camel will auto assign an unique id to be used in Spring ApplicationContext and as well for JMX.

There are 2 problems with the current code

1)
When registering a CamelContext in JMX, Camel would ignore if an existing CamelContext with the same id was already registered. This means that you would end up with 2 different CamelContext's merged into the same. This means you cannot manage the 2nd CamelContext, for example to stop it etc as it would not be enlisted. Also when the 1st is unregistered, you would leave mbeans _hanging_ in there for the 2nd which doensn't have a CamelContext etc.  Also there are problems with clashes of endpoint uris, error handlers, tracers etc.

Bottom line we end up with mixed data. 

2)
In OSGi the auto assigned unique name is *not* unique because OSGi causes the atomic counter to be multiple instances so you end up with Camel ids' all being {{camel-1}}. This works in non OSGi environments such as WARs etc.


All these problems can of course be resolved by explicit assigning an unique id for you <camelContext>'s.


We will also try to enhance the auto assigned unique name in OSGi to include bundle id etc. so it brings more value for you. So if you bundle has given id 147, then the auto assigned id should be {{camel-147}} etc.

;;;","07/Aug/10 07:08;davsclaus;{quote}
Is it not better to see if a context already exists and re-use it... ?
{quote}

No a CamelContext should really be isolated and live by itself. And this should also be reflected in JMX.
;;;","07/Aug/10 10:20;davsclaus;trunk: 983197.;;;","11/Aug/10 02:57;njiang;@Claus,

I just didn't some test about camelContext name within the OSGi container,  I don't find the issue of static atomic counter which causes all the camel id end up with camel-1.
But I agree to add the bundle id in to the camelContext which will help user to find their camel context easily.

;;;","11/Aug/10 03:22;njiang;I just found there are something wrong with the CamelContextFactoryBean's createCamelContext.
It will set the camelcontext id with id name which could be an implicit one, and it will override the OsgiCamelContextNameStratgy which an ExplicitCamelContextNameStratgy.

So I made some change in the trunk: 984294;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
camel-cxf consumer should support take the fault message,CAMEL-3022,12485423,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Aug/10 13:52,24/Apr/11 09:57,14/Jul/23 05:45,03/Aug/10 14:12,2.0.0,2.1.0,2.2.0,2.3.0,2.4.0,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"CxfConsumer will try to cast the fault message body to a Throwable, if  the fault message body is any other message, it will cause some trouble like this.
{code}
java.lang.ClassCastException: javax.xml.transform.dom.DOMSource cannot be cast to java.lang.Throwable
at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:99)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76370,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,,,,,"0|i01s6f:",8334,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Building not possible with maven3,CAMEL-3018,12487429,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,norman,norman,02/Aug/10 11:49,24/Apr/11 09:57,14/Jul/23 05:45,02/Aug/10 12:55,,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"maven3 is a way stricter with duplicated specified dependencies, so its not possible to compile camel with it. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Aug/10 11:50;norman;camel-pom.diff;https://issues.apache.org/jira/secure/attachment/12463321/camel-pom.diff","27/Aug/10 11:39;danielbevenius;pom.patch;https://issues.apache.org/jira/secure/attachment/12463317/pom.patch","26/Aug/10 11:32;danielbevenius;pom.patch;https://issues.apache.org/jira/secure/attachment/12463316/pom.patch",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76371,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,Patch Available,,,,"0|i01s5j:",8330,,,,,,,,,,,,,,,,,,,,"02/Aug/10 11:50;norman;This patch fix it;;;","02/Aug/10 12:55;davsclaus;trunk: 981492.

Thanks Norman for the patch. I have applied it to trunk.;;;","26/Aug/10 09:58;danielbevenius;I'm having issues when using maven3 as well. I get the following;

c-dc9ee055:camel-web danbev$ mvn clean install
[INFO] Scanning for projects...
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[ERROR] The build could not read 1 project -> [Help 1]
[ERROR]   The project org.apache.camel:camel-web:2.5-SNAPSHOT (/Users/danbev/work/apache/camel/trunk/components/camel-web/pom.xml) has 1 error
[ERROR]     'repositories.repository.id' must be unique: glassfish-repo-archive -> http://maven.glassfish.org/content/groups/glassfish vs http://maven.glassfish.org/content/groups/glassfish
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException

There is indeed a duplicate in components/web/pom.xml (pom.patch attached). 

Using the patch I'm able to build but I get failures during the test phase which I'm looking into at the moment. 


;;;","26/Aug/10 10:01;danielbevenius;patch for components/camel-web/pom.xml;;;","26/Aug/10 11:26;davsclaus;Daniel you have to attached the file with copyright assigned to Apache. eg there must be this apache feather logo on the attached file.;;;","26/Aug/10 11:32;danielbevenius;Checked the wrong box when attaching previously.;;;","26/Aug/10 11:42;davsclaus;Thanks Daniel. I have applied the patch to trunk: 989608.;;;","27/Aug/10 11:39;danielbevenius;Sorry about adding comments this jira but I found another issue...
Problem
=======
Running 'mvn eclipse:eclipse' using maven3 causes the following build failure:
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.220s
[INFO] Finished at: Fri Aug 27 12:25:55 CEST 2010
[INFO] Final Memory: 59M/117M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-eclipse-plugin:2.9-SNAPSHOT:eclipse (default-cli) on project camel-core: Unable to resolve resource location: /camel-eclipse-checkstyle -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-core


When running with maven2 these are the dependencies for the maven-eclipse-plugin:
[DEBUG] Plugin dependencies for:

org.apache.maven.plugins:maven-eclipse-plugin:2.5.1

are:

org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile
org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7:runtime
org.apache.maven:maven-project:jar:2.0.8:runtime
org.apache.maven:maven-plugin-api:jar:2.0.8:runtime
org.apache.maven:maven-model:jar:2.0.8:runtime
org.apache.maven:maven-artifact-manager:jar:2.0.8:runtime
org.apache.maven:maven-artifact:jar:2.0.8:runtime
org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime
org.codehaus.plexus:plexus-interactivity-jline:jar:1.0-alpha-5:runtime
org.apache.maven:maven-archiver:jar:2.2:runtime
org.codehaus.plexus:plexus-resources:jar:1.0-alpha-4:runtime
biz.aQute:bndlib:jar:0.0.145:runtime
org.apache.maven.shared:maven-osgi:jar:0.2.0:runtime
org.eclipse.core:resources:jar:3.3.0-v20070604:runtime

Notice how 'org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile' in the list above. This the jar that camel-eclipse-checkstyle is in but when running with maven3 it is not. 
I've added 'camel-buildtools' as a dependency to the eclipse-maven-plugin in parent/pom.xml (attached pom.patch) and this then worked for both maven2 and maven3.
;;;","27/Aug/10 11:39;danielbevenius;Patch for parent/pom.xml;;;","27/Aug/10 11:46;davsclaus;why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse? Would make more sense as maintaining the eclipse stuff is done by Eclipse itself and not from eg Camel.

;;;","27/Aug/10 11:58;njiang;@Claus,
The eclipse plugin needs to set up the checkstyle configure on the eclipse project, and the checkstyle file is part of camel-buildtools.
I think it make sense to add this module dependency on the parent pom.
;;;","27/Aug/10 12:00;danielbevenius;> why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse?
Old habit :) I'll try that instead. Thanks;;;","27/Aug/10 12:16;davsclaus;Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file. 

I will apply the patch. But first I give it a run on my maven 2.2.1.
;;;","27/Aug/10 12:33;danielbevenius;>Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file.
Worked like a charm. Thanks!;;;","27/Aug/10 13:10;davsclaus;Applied patch to trunk: 990132;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,
MailConsumer - Use OnCompletion for commit/rollback,CAMEL-3015,12485318,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jul/10 09:21,24/Apr/11 09:57,14/Jul/23 05:45,30/Jul/10 09:46,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-mail,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Mail-component-velocity-and-NullpointerException-td2256742.html#a2259340

This ensure the mail message is kept and we can do commit/rollback without impact of mail message being lost during the routing",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76372,,,Sun Apr 24 09:57:41 UTC 2011,,,,,,,,,,,"0|i01s4v:",8327,,,,,,,,,,,,,,,,,,,,"30/Jul/10 09:46;davsclaus;trunk: 980707.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using multiple CamelContext with quartz scheduler so keep track of the individual camel contexts,CAMEL-3011,12485406,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 10:03,24/Apr/11 09:58,14/Jul/23 05:45,29/Jul/10 10:10,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-quartz,,,,0,,,,,,,,,"The default will by default only register the first CamelContext. Which is used in non statefull jobs to lookup endpoints etc.

Instead the camel-quartz component should keep track of all the different camel contexts and use the id of the context on the job so it can lookup the context.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76373,,,Sun Apr 24 09:58:25 UTC 2011,,,,,,,,,,,"0|i01s3z:",8323,,,,,,,,,,,,,,,,,,,,"29/Jul/10 10:10;davsclaus;trunk: 980386.

Also fixed potential issue with restarting/resuming a route which adds a job premature and causing the job to fire before the route has been fully started. Now adding jobs is deferred.;;;","29/Jul/10 10:11;davsclaus;For example you could have multiple camel contexts running and suspend one of them, this means the scheduler is still started and active for the other camel context. Now resuming the first context will re-add the job to the scheduler. Which must be deferred so the route is fully started, so when the job is triggered it has a fully started route to process.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Starting CamelContext with autoStartup=false should startup JMX connector,CAMEL-3008,12485437,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 04:03,24/Apr/11 09:58,14/Jul/23 05:45,30/Jul/10 15:11,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"I recall some user saying something about JMX appears to not be loaded if he has autoStartup=false on the CamelContext.
It should only be the routes which are not started. The other stuff should start.

You may need to use JMX to start the routes there after :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76374,,,Sun Apr 24 09:58:26 UTC 2011,,,,,,,,,,,"0|i01s3b:",8320,,,,,,,,,,,,,,,,,,,,"30/Jul/10 15:11;davsclaus;trunk: 980821.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding route from XML should honor its autoStartup flag,CAMEL-3007,12485225,12485205,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/10 04:01,24/Apr/11 09:57,14/Jul/23 05:45,04/Aug/10 12:29,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"If a route is adding after CamelContext has been started, then it's autoStartup flag should be honored. In case the flag is autoStartup=false, the route should not be auto started.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76375,,,Sun Apr 24 09:57:57 UTC 2011,,,,,,,,,,,"0|i01s33:",8319,,,,,,,,,,,,,,,,,,,,"29/Jul/10 04:01;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Auto-Start-up-issue-when-adding-RouteDefintions-tp2256671p2256671.html;;;","29/Jul/10 04:04;davsclaus;Also routes loaded form XML stream may have to have it prepared before it can be added as a route. e.g. setting parent, onException etc. like we do for camel-spring.;;;","04/Aug/10 12:11;davsclaus;trunk: 982228.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoints are recreated instead or restarted,CAMEL-3001,12485530,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wtam,wtam,27/Jul/10 15:46,24/Apr/11 09:57,14/Jul/23 05:45,29/Jul/10 10:54,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"The change (r979549) made by CAMEL-2991 causes every single endpoint to be recreated instead of restarted which takes Camel a (quite big) step back.  It is bad for the following reasons:

1) recreating services associated could be expensive (the design should not assume recreating the services is cheap).
2) states (if any) in Endpoint/Service could not be preserved (stop does not mean destroy after all).   
3) it is unnecessary to recreate to the whole shebank and it is an unexpected behavior for the users.  (Users think stop but it is gone.)

In the code (DefaultCamelContext.doStartCamel()), one can clearly see the original intent of the author (who even bothered to put in a nice comment) is to avoid re-initialization the route definition after stopping the camel context.  (Well, things may change but not necessarily for the better.)

{code}
       // To avoid initiating the routeDefinitions after stopping the camel context
        if (!routeDefinitionInitiated) {
            startRouteDefinitions(routeDefinitions);
            routeDefinitionInitiated = true;
        }
{code}

But, the change simply reset the routeDefinitionInitiated flag in doStop() which is the exact opposite of the original intention and routeDefinitionInitiated is unless pretty much.  :-( 
",,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2991,,,,,,,CAMEL-3012,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76376,,,Sun Apr 24 09:57:37 UTC 2011,,,,,,,,,,,"0|i01s1r:",8313,,,,,,,,,,,,,,,,,,,,"27/Jul/10 16:05;davsclaus;Thanks for being so cheerful.

Stopping a CamelContext means shutting it down. It's primary intent is to shutdown in a reliable and graceful manner!

A CamelContext is *not* meant to be pause and resumed on-the-fly at your will.

You can do that on the consumers, if you want to pause activity in Camel.
And some consumer is specialized for that as they are {{SuspendableService}}

;;;","28/Jul/10 14:05;davsclaus;I am working on adding a
- {{suspend}}
- {{resume}}

methods to {{CamelContext}}. This allows you to suspend Camel, which suspends/stops all the active routes. This ensure the other stuff is still _warm_ which makes resuming {{CamelContext}} faster as its a matter of resuming/starting the previously suspended routes.

The implication is as with graceful shutdown, the ordering of how this is done between the routes matter. So the logic need to cater for this.;;;","29/Jul/10 09:12;davsclaus;trunk: 980370.

Committed suspend/resume to CamelContext to be used for hot restarts.;;;","29/Jul/10 10:54;davsclaus;Created a new ticket to better name the intend.

Just from a single test I did with the CxfBeanTest
- cold restart = 1.2 sec
- warm restart = 0.2 sec;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"charset parser should cater for quotes, both single and double quotes",CAMEL-2995,12485476,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,26/Jul/10 14:21,24/Apr/11 09:58,14/Jul/23 05:45,29/Jul/10 09:59,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-http,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/issue-with-encoding-when-using-HTTP-component-td2227887.html#a2227887

I bet many systems may report charset in different ways such as
{code}
Content-Type:text/xml;charset=""utf-8"" 
Content-Type:text/xml;charset='utf-8' 
Content-Type:text/xml;charset=utf-8 
{code}

We should ensure that we support all ways of setting this. And there may also be spaces between so we should trim and whatnot.

The code in 2.4 may have been improved. Just creating a ticket to be sure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76377,,,Sun Apr 24 09:58:12 UTC 2011,,,,,,,,,,,"0|i01s0f:",8307,,,,,,,,,,,,,,,,,,,,"27/Jul/10 06:26;davsclaus;Maybe camel-mail also have such an issue?

If possible create a util method in camel-core so it can be used in other components.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - CxfClientCallback is invoked twice when only one was expected,CAMEL-2994,12485607,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,26/Jul/10 11:21,24/Apr/11 09:57,14/Jul/23 05:45,26/Jul/10 13:29,2.5.0,,,,,,,,,,,,2.5.0,,,,camel-cxf,,,,0,,,,,,,,,"Run the test CXFWsdlOnlyTest

Because CXF invokes the CxfClientCallback 2 times there is a race condition with 2 threads wanting to complete routing the Exchange.

You can then end up with errors such as
{code}
>>>>>>>>>
2010-07-26 13:22:13,305 [default-workqueue-1                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-1"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
2010-07-26 13:22:13,305 [default-workqueue-2                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-2"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
{code}

CXF should only invoke the {{org.apache.cxf.endpoint.ClientCallback}} one time as we have only registered this once.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76378,,,Sun Apr 24 09:57:55 UTC 2011,,,,,,,,,,,"0|i01s07:",8306,,,,,,,,,,,,,,,,,,,,"26/Jul/10 11:22;davsclaus;In the log above there is race with 2 threads
- ""default-workqueue-1""
- ""default-workqueue-2""
;;;","26/Jul/10 13:29;njiang;
RawMessageContentRedirectInterceptor should not close the OutputStream as it will be closed by the interceptor chain.
I just committed a patch for it.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Restart CamelContext won't restart services on CxfBeanEndpoint,CAMEL-2991,12485562,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wtam,wtam,25/Jul/10 03:02,24/Apr/11 09:58,14/Jul/23 05:45,27/Jul/10 06:23,,,,,,,,,,,,,2.5.0,,,,camel-core,camel-cxf,,,0,,,,,,,,,"A route that sends to a CxfBean destination is unusable after the CamelContext has been stopped and re-started.  The following is an example of a route that demonstrates the problem.

{code}
	<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
		<route>
			<from uri=""jetty:http://localhost:9000?matchOnUriPrefix=true"" />
			<to uri=""cxfbean:customerServiceBean"" />
		</route>
	</camelContext>

	<util:list id=""customerServiceBean"">
		<bean class=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />
	</util:list>
{code}

The follow issues have been identified.

1) SendProcessor should implement the Navigate interface so that its children (if they are Services) can be managed by the lifecycle methods.  This will address any destination endpoint that requires services to be re-started.

2) CxfBeanEndpoint should be a Service itself.  The reason why the start() on CxfBeanEndpoint gets called during the first start is because CxfBeanComponent.start() gets invoked during route definition initialization.   The problem is that re-starting doesn't trigger the CxfBeanComponent.start() method.  Therefore, putting the hook in CxfBeanComponent to start/stop CxfBeanEndpoint was a bug.

3) The default type converter which is a Service won't get ""re-started' as the (lazy-instantiation) getTypeConverter() method won't perform addService() on a created but ""stopped' typeConverter.  We need to discuss the correct remedy since I am not sure how to fix it.  It is kind of strange that the type converter is a service (which has the start/stop semantics) and yet it can be used even the CamelContext is stopped (or never started).  In the patch, I just set the type converter to null in DefaultCamelContext doStop() for now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3001,,,,,,"26/Jul/10 15:46;wtam;CAMEL-2991-test-case.txt;https://issues.apache.org/jira/secure/attachment/12463309/CAMEL-2991-test-case.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76379,,,Sun Apr 24 09:58:12 UTC 2011,,,,,,,,,,,"0|i01rzj:",8303,,,,,,,,,,,,,,,,,,,,"25/Jul/10 06:50;davsclaus;Which runtime are you using? OSGi or something else?;;;","25/Jul/10 06:53;davsclaus;BTW Doing a stop/start of CamelContext is not 100% safe to be totally possible to restart.
The mantra is to create a new context instead. ;;;","25/Jul/10 07:28;davsclaus;trunk: 978994.

I have fixed the issue in CamelContext to re-initialize type converter registry on restart;;;","26/Jul/10 06:02;davsclaus;trunk: 979164.

a)
Endpoint is now a Service which means (#2) CxfBeanEndpoint is now also a Service.

b)
TypeConverter now check state that it's started when being used.;;;","26/Jul/10 07:31;davsclaus;Hmm the logic in {{CxfBeanDestination}} is a bit peculiar

The {{active}} method is invoked when {{org.apache.cxf.endpoint.Server}} is started from {{CxfBeanEndpoint}} in the {{createServer}} method.
Then the {{active}} method will lookup a shared {{CxfBeanEndpoint}} which is stored on {{CxfBeanComponent}}.

The problem is that this shared endpoint instance will have the {{setProcessor}} invoked, which then *overrides* a previously set processor.

I don't know a good solution to this at this point. Maybe there is a bit impedance mismatch between the CXF API lifecycle and Camel's lifecycle API.;;;","26/Jul/10 07:44;davsclaus;I found a problem in {{CamelDestination}} as it just creates a new {{DefaultCamelContext}}

{code}
    public CamelContext getCamelContext() {
        if (camelContext == null) {
            getLogger().log(Level.INFO, ""No CamelContext injected, create a default one"");
            camelContext = new DefaultCamelContext();
        }
        return camelContext;
    }
{code}

This is a big no no. And I have fixed the issue as the CamelContext can be obtained from the {{CxfBeanComponent}} which has the context injected.

Also there was an issue when creating a CxfConsumer and if that failed with an Exception it was just logged. Instead a FailedToCreateConsumerException should be thrown. We should fail fast in such cases.


Fixed the above issue and polished the code and javadoc

trunk: 979188.;;;","26/Jul/10 15:50;wtam;@claus  I tried your fixes but my route is still unusable after CamelContext is restarted.  I attached the test case and assign to you.  Thanks for looking at it.;;;","27/Jul/10 06:23;davsclaus;trunk: 979549.

I found an issue in camel-core and the test now works.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
IllegalStateException in CamelContinuationServlet under heavy load,CAMEL-2986,12485716,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mrt1nz,mrt1nz,mrt1nz,22/Jul/10 19:19,24/Apr/11 09:58,14/Jul/23 05:45,22/Jul/10 19:27,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jetty,,,,0,,,,,,,,,"Reason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:

{noformat}
java.lang.IllegalStateException: DISPATCHED,initial
    at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364)
    at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769)
    at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104)
    at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
    at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
{noformat}

This is the case when an async completion callback is faster than the thread that is concurrently executing the {{if (continuation.isInitial())}} block. 

I'll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76380,,,Sun Apr 24 09:58:10 UTC 2011,,,,,,,,,,,"0|i01ryf:",8298,,,,,,,,,,,,,,,,,,,,"22/Jul/10 19:27;mrt1nz;Fixed with revision 966815;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa doesn't use EntityManager.merge(entity) in the right way,CAMEL-2980,12485488,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,21/Jul/10 14:55,24/Apr/11 09:57,14/Jul/23 05:45,05/Aug/10 12:35,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jpa,,,,0,,,,,,,,,"The EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).
I running into this problem, because after saving an entity in the database, the id field was still null. So, we don't know, which entity in the database is the corresponding to this entity... :-(

Have a look in the process method of [JpaProducer|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaProducer.java?view=markup] and the Java doc from the [EntityManager|http://download.oracle.com/docs/cd/E17477_01/javaee/5/api/javax/persistence/EntityManager.html#merge%28T%29].

Christian",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76381,,,Sun Apr 24 09:57:46 UTC 2011,,,,,,,,,,,"0|i01rx3:",8292,,,,,,,,,,,,,,,,,,,,"21/Jul/10 22:30;muellerc;I modified in my workspace the [JpaTest.java|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java?view=markup].

old:
{code}
        template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
{code}

new:
{code}
        Exchange returnedExchange = template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
        
        SendEmail sendEmail = returnedExchange.getIn().getBody(SendEmail.class);
        assertEquals(""address property"", ""foo@bar.com"", sendEmail.getAddress());
        assertNotNull(""id property should set"", sendEmail.getId());
{code}

This fails with:
{code}
java.lang.AssertionError: id property should set
	at org.junit.Assert.fail(Assert.java:91)
	...
{code}

After switching from EntityManager.merge(entity) to EntityManager.persist(entity), the test succeed.

Because of this and [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982], my question is: ""Should we in general switch from EntityManager.merge(entity) to EntityManager.persist(entity)?"" Is there a reason to use EntityManager.merge(entity)?

Christian;;;","22/Jul/10 21:30;muellerc;The following two posts explains, why we need the EntityManager.merge(entity) method. In short, we need it (only) for updates:
- http://openjpa.apache.org/builds/1.2.2/apache-openjpa-1.2.2/docs/manual/jpa_overview_em_lifecycle.html
- http://openjpa.208410.n2.nabble.com/persisting-an-entity-and-JPA-behaviour-with-referenced-entities-td210469.html

I'm wondering, if EntityManager.persist(entity) is a better default than EntityManager.merge(entity)? I could imagine, that most of the user insert a new entity in the database instead of updating an existing entity.
- Pro: EntityManager.persist(entity) do not execute a select query for each entity which should be stored.
- Con: EntityManager.persist(entity) doesn't work for detached entities (executing an UPDATE instead of an INSERT).

Christian;;;","23/Jul/10 04:48;davsclaus;Christian I think we should add an option so end users can choose if they want to use {{merge}} or {{persist}}. The default value could be the current one.;;;","25/Jul/10 12:23;davsclaus;Christian I think you have fixed this with the new option? If so close this ticket;;;","26/Jul/10 21:28;muellerc;Unfortunately not. I have fixed [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982] with the new 'usePersist' option. What I have to change for this issue is something like this:

is:
{code}
entityManager.merge(entity); 
{code}

shall:
{code}
Object managedEntity = entityManager.merge(entity);
exchange.getIn().setBody(managedEntity);
{code}

But this is not so trivial, because the input could be not only an annotated entity, it could also be a list, map, ... and in the current implementation we iterate over a collection (which may be only have one entry):

{code}
public void process(Exchange exchange) {
  exchange.getIn().setHeader(JpaConstants.JPA_TEMPLATE, endpoint.getTemplate());
  final Object values = expression.evaluate(exchange, Object.class);
  if (values != null) {
    template.execute(new JpaCallback() {
      public Object doInJpa(EntityManager entityManager) throws PersistenceException {
        Iterator iter = ObjectHelper.createIterator(values);
          Object value = iter.next();
          if (endpoint.isUsePersist()) {
            entityManager.persist(value);
          } else {
            entityManager.merge(value);
          }
        }
        if (endpoint.isFlushOnSend()) {
          entityManager.flush();
        }
        return null;
      }
    });
  }
  exchange.getIn().removeHeader(JpaConstants.JPA_TEMPLATE);
} 
{code}

Christian;;;","26/Jul/10 21:52;muellerc;The Camel JPA [wiki page|http://camel.apache.org/jpa.html] explains, that: ""_The body of the In message is assumed to be an entity bean (that is, a POJO with an @Entity annotation on it)._""
I wonder, whether the wiki page is outdated (because the code looks like that we support also collections, ... as body). To be sure, first I will write some unit tests for this...

Christian;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
FtpComponent: If login fails and disconnect=true another connection is opened.,CAMEL-2979,12485630,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ankelee,ankelee,21/Jul/10 09:07,24/Apr/11 09:57,14/Jul/23 05:45,22/Jul/10 15:00,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,,,,"In a route such as below a second connection to the ftp server is opened if the login fails.

<route> 
        <from uri=""ftp:localhost/inbox/?username=usr&password=pwd&disconnect=true&consumer.delay=60s&maximumReconnectAttempts=0"" /> 
        <to uri=""file:test_data"" /> 
</route> 

Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76382,,,Sun Apr 24 09:57:22 UTC 2011,,,,,,,,,,,"0|i01rwv:",8291,,,,,,,,,,,,,,,,,,,,"22/Jul/10 14:32;davsclaus;Ah yeah Camel will re-connect if the first connection fails. I am fixing this so it will not do this if {{maximumReconnectAttempts=0}} as you have configured.

So when you configure {{maximumReconnectAttempts=0}} then Camel should never try to re-connect.;;;","22/Jul/10 15:00;davsclaus;trunk: 966699, 966700.

;;;","22/Jul/10 15:39;davsclaus;Andreas if you want to test this you need to update both camel-core and camel-ftp to 2.5-SNAPSHOT versions.

Apache should build and upload SNAPSHOTs nighly on their maven server. You can see details here
http://camel.apache.org/download.html

Otherwise I can attach the .jars to this ticket.;;;","23/Jul/10 11:45;ankelee;Hi I've tested this and it works.

When logging in with incorrect user/pass it only polls once and skips, which is nice.
However could it be possible for the component to throw an exception as I would like to catch this exception and make sure that no further polls are done to the ftp (ie shut down the route/application).;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java.net.SocketException: Too many open files with Apache Camel(Netty TCP) 2.4.0.,CAMEL-2978,12485603,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,seanparsons,seanparsons,20/Jul/10 22:46,24/Apr/11 09:57,14/Jul/23 05:45,26/Jul/10 13:33,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-netty,,,,0,,,,,,,,,"I've got a unit test that works fine with Apache Camel 2.3.0, but as soon as I upgraded to 2.4.0 it consistently started to fail.

It performs a number of concurrent requests using this url:
netty:tcp://localhost:2048?sync=true
In both the client and server side of the unit test.

There's also a sister test which does the same thing with Netty directly and that works in isolation, so it would appear something has been broken in the transition to 2.4.0.  Previously this code was also using a beta version of Netty, but even updating that specific dependency has made no difference.","Linux laptop 2.6.32-24-generic #38-Ubuntu SMP Mon Jul 5 09:20:59 UTC 2010 x86_64 GNU/Linux
java version ""1.6.0_20""
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Jul/10 19:11;seanparsons;Camel2978Test.java;https://issues.apache.org/jira/secure/attachment/12463299/Camel2978Test.java","21/Jul/10 20:27;seanparsons;CamelBreakingTest.groovy;https://issues.apache.org/jira/secure/attachment/12463271/CamelBreakingTest.groovy","25/Jul/10 13:21;seanparsons;CamelBreakingTest2.groovy;https://issues.apache.org/jira/secure/attachment/12463298/CamelBreakingTest2.groovy",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76383,,,Sun Apr 24 09:57:29 UTC 2011,,,,,,,,,,,"0|i01rwn:",8290,,,,,,,,,,,,,,,,,,,,"20/Jul/10 23:07;hadrian;Sean, could you attach the unit test so that we take a look?;;;","21/Jul/10 07:33;davsclaus;Camel 2.4 uses the latest release of Netty which is 3.2.1. Camel 2.3 used an older release.;;;","21/Jul/10 20:27;seanparsons;This Groovy file manifests the issue, the @Grab annotation for camel-netty can be changed between 2.3.0 and 2.4.0 with the latter throwing the exceptions.  This also uses the latest version of Netty in both cases.;;;","25/Jul/10 12:14;davsclaus;You should *not* create a new instance of producer template when sending
{code}
 def producerTemplate = context.createProducerTemplate();
{code}

See this FAQ
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html;;;","25/Jul/10 13:21;seanparsons;Updated script to not create the ProducerTemplate on each send.;;;","25/Jul/10 13:22;seanparsons;The issue still occurs even if the ProducerTemplate isn't being created on each send.;;;","25/Jul/10 18:14;davsclaus;Can you create an example in pure java. For example as a JUnit test. Then we can use that as a test in camel-netty and much easier to use to lookup into the issue.;;;","25/Jul/10 19:11;seanparsons;One Java based unit test that causes the same issue.;;;","26/Jul/10 13:14;davsclaus;Sean

Thanks for the test. I am looking into it right now and appears to have a fix.

Can you try with Camel 2.4.0 to disable timeout. You do this to set {{timeout=0}} in the endpoint uri.
The bug seems to be a timeout timer from Jetty which should have been shared and not prototype scoped :);;;","26/Jul/10 13:33;davsclaus;trunk: 979276.

Sean fell free to also test with latest code from trunk.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,
onException not working correctly when using routeContext,CAMEL-2972,12485541,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ankelee,ankelee,20/Jul/10 11:46,24/Apr/11 09:57,14/Jul/23 05:45,27/Jul/10 16:09,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"When using a routeContext, the last (in the xml-file) defined route-scoped <onException> configuration is shared by the other routes in the context.

http://camel.465427.n5.nabble.com/possible-onException-bug-when-using-routeContext-td1616244.html#a1616244",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Jul/10 05:55;spohl;CAMEL-2972.patch;https://issues.apache.org/jira/secure/attachment/12463300/CAMEL-2972.patch","20/Jul/10 11:50;ankelee;PerRouteOnExceptionTest.zip;https://issues.apache.org/jira/secure/attachment/12463314/PerRouteOnExceptionTest.zip",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76384,,,Sun Apr 24 09:57:54 UTC 2011,,,,,,,,,,,"0|i01rvb:",8284,,,,,,,,,,,,,,,,,,,,"20/Jul/10 11:50;ankelee;Sample demonstrating the issue.;;;","26/Jul/10 05:55;spohl;here is the bug fix;;;","27/Jul/10 12:54;davsclaus;Silvio thanks for the patch.

However the fix requires a bit more work as the {{exchange.getFromRouteId()}} is the starting route id, and you could have the Exchange routed in multiple routes and one of them have a route scoped onException which should trigger.

I got it fixed but it revealed an issue when you perform RecipientList EIP pattern in parallel mode. So the bonus is that we fix an issue in there as well.;;;","27/Jul/10 16:09;davsclaus;trunk: 979762.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel feature of spring2.5 is deployed with wrong name ,CAMEL-2968,12485690,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Jul/10 08:33,24/Apr/11 09:57,14/Jul/23 05:45,20/Jul/10 08:34,2.4.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"Camel 2.4.0 karaf feature with spring 2.5 is deployed with spring3 name.
http://repo2.maven.org/maven2/org/apache/camel/karaf/apache-camel/2.4.0/apache-camel-2.4.0-features-spring3.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76385,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,,,,,"0|i01ruf:",8280,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dead letter channel - Should enforce the MEP to be InOnly,CAMEL-2963,12485733,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jul/10 08:40,24/Apr/11 09:57,14/Jul/23 05:45,19/Jul/10 10:19,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"When a message is moved into DLQ the MEP should be enforced to be InOnly as we should not expect a reply. For example if using a JMS queue as DLQ. To avoid JmsProducer will expect a reply and wait for it, which never comes and then timeout after 20 sec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76386,,,Sun Apr 24 09:57:56 UTC 2011,,,,,,,,,,,"0|i01rtb:",8275,,,,,,,,,,,,,,,,,,,,"19/Jul/10 10:19;davsclaus;trunk: 965414.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - disableReplyTo is not used in JmsProducer,CAMEL-2962,12485649,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jul/10 08:32,24/Apr/11 09:57,14/Jul/23 05:45,19/Jul/10 09:12,2.4.0,,,,,,,,,,,,2.5.0,,,,camel-jms,,,,0,,,,,,,,,The JmsProducer does not check the {{disableReplyTo}} option when sending the message.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76387,,,Sun Apr 24 09:57:11 UTC 2011,,,,,,,,,,,"0|i01rt3:",8274,,,,,,,,,,,,,,,,,,,,"19/Jul/10 09:12;davsclaus;trunk: 965392.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.ConcurrentModificationException in Method org.apache.camel.util.CaseInsensitiveMap.putAll(),CAMEL-2958,12485769,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mouch,mouch,16/Jul/10 10:25,24/Apr/11 09:58,14/Jul/23 05:45,17/Jul/10 12:16,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"Every now and then I'm facing the ConcurrentModificationException. It very hard to reproduce. This is my stack trace:

Failed delivery for exchangeId: ba969718-9044-4261-bc57-ca10aafb0a03. Exhausted after delivery attempt: 1 caught: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException: null
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) [na:1.6.0_20]
        at java.util.HashMap$KeyIterator.next(HashMap.java:828) [na:1.6.0_20]
        at org.apache.camel.util.CaseInsensitiveMap.putAll(CaseInsensitiveMap.java:86) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.impl.MessageSupport.copyFrom(MessageSupport.java:142) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.impl.DefaultMessage.copyFrom(DefaultMessage.java:52) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.util.ExchangeHelper.copyResults(ExchangeHelper.java:199) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:114) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:75) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) [camel-core-2.3.0.jar:2.3.0]
        at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:71) [camel-http-2.3.0.jar:2.3.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) [javaee.jar:9.1]
...


Looks like CaseInsensitiveMap isn't enough thread save. But I have no idea what other thread is modifies the map. Most of the time everything is ok.","Ubuntu Linux 10.04 i386
Sun JDK 1.6.0_20-b02
Glassfish 2.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jul/10 12:23;mouch;CaseInsensitiveMap.java;https://issues.apache.org/jira/secure/attachment/12463311/CaseInsensitiveMap.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76388,,,Sun Apr 24 09:58:03 UTC 2011,,,,,,,,,,,"0|i01rs7:",8270,,,,,,,,,,,,,,,,,,,,"16/Jul/10 12:23;mouch;Suggestion for the fix;;;","17/Jul/10 10:05;davsclaus;Thanks for reporting.

The stacktrace looks as if the entry / map is empty. I wonder if that may have been the cause?

And the double lock idiom is not thread safe either (see eg Brian Goetz book, Java concurrency in practice).

I have modified the implementation a bit to be synchronized when using _write_ operations on the map.;;;","17/Jul/10 12:16;davsclaus;trunk: 965065.

Christian you are welcome to try out source from trunk to see if you have any luck reproducing the issue on your system.;;;","20/Jul/10 09:13;mouch;Hi Claus, thank's a lot for fixing this issue. I just built a ""private"" JAR from tags/2.3.0 with your changes for using with our project. I'm trying to find the code position that causes this problem.;;;","20/Jul/10 09:25;davsclaus;Yeah cool Christian.

Give the ""fix"" a throughly test on your system. And report back. Would be great to know if the bug has been eliminated.;;;","20/Jul/10 14:20;mouch;Got it!
I found the bug.

Has something to do with splitter & aggregator. In my route I receive from servlet do some splitting with xpath performing business methods from a bean and holding the aggregated responses (e.g. a List) in a claim check. Key is the original message-id before splitting. Outside the split the claim check is read again and is set as response for the servlet. (Without that tricky stuff I only got the last split element.)

I don't understand what modifies the map.entrySet (CaseInsensitiveMap:90 [trunk]) out of the aggregation thread. Anyway with your synchronizes it works well.

BTW. I read that volatile can fix the broken double check idiom: http://jeremymanson.blogspot.com/2008/05/double-checked-locking.html;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Support polling from MVS file system,CAMEL-2952,12485594,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Jul/10 13:19,24/Apr/11 09:58,14/Jul/23 05:45,17/Jul/10 09:46,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-ftp,,,,0,,,,,,,,,"The MVS file system requires to change directory to starting path and use CD to traverse file path instead of using listFile(path) as currently done in camel-ftp.

This means we should walk the path using code like:
0. remember path
1. cd path
2. list files()
3. loop files
4. if dir then goto 1
5. if file add file
6. when done cd back to ""remember path""

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jul/10 11:53;davsclaus;camel-ftp-2.5-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463279/camel-ftp-2.5-SNAPSHOT.jar",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76389,,,Sun Apr 24 09:58:14 UTC 2011,,,,,,,,,,,"0|i01rqv:",8264,,,,,,,,,,,,,,,,,,,,"15/Jul/10 13:20;davsclaus;See nabble
http://camel.465427.n5.nabble.com/FTP-on-MVS-filesystem-tp1092836p1092836.html;;;","17/Jul/10 09:46;davsclaus;trunk: 965043.;;;","17/Jul/10 09:47;davsclaus;jar with the fix;;;","22/Jul/10 14:08;davsclaus;trunk: 966667.;;;","22/Jul/10 14:09;davsclaus;new jar with patch;;;","23/Jul/10 12:43;davsclaus;trunk: 967074.

Now works :);;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
"Attachment DataHander.getName() returns the name of the temporary storage file, not the MIME part name",CAMEL-2949,12485832,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,14/Jul/10 17:43,24/Apr/11 09:58,14/Jul/23 05:45,15/Jul/10 03:03,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-http,camel-jetty,,,0,,,,,,,,,"When multipart file uploads are converted to message attachments in the DefaultHttpBinding class, the DataHandler that is created for the attachment returns the name of the temporary file created by Jetty, not the value of the name from the Content-Disposition header.  It would be useful to have the actual attachment name instead of the temporary filename in the DataHandler object for easier downstream processing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Jul/10 17:45;pegli;CAMEL-2949.patch;https://issues.apache.org/jira/secure/attachment/12463310/CAMEL-2949.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76390,,,Sun Apr 24 09:58:20 UTC 2011,,,,,,,Patch Available,,,,"0|i01rq7:",8261,,,,,,,,,,,,,,,,,,,,"14/Jul/10 17:45;pegli;Patch for CamelFileDataSource which exposes the attachment name instead of the temporary file name.  Includes update to camel-jetty MultiPartFormTest unit test class to verify change.;;;","15/Jul/10 03:02;njiang;Applied patch with thanks to Paul, also merge this change into camel-http4.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
CachedOutputStream supports not to close itself when the exchange is completed,CAMEL-2947,12485934,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jul/10 10:06,24/Apr/11 09:57,14/Jul/23 05:45,14/Jul/10 12:03,,,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"The patch of CAMEL-2944 just introduced a regression issue of CAMEL-2776.
We just need to find a way to avoid the CachedOutputStream close itself when the exchange is completed, as the input stream which is get from the CachedOutputStream will be used after that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76391,,,Sun Apr 24 09:57:14 UTC 2011,,,,,,,,,,,"0|i01rpr:",8259,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache - File spooled stream cache does not work well on Windows due not closing file resource,CAMEL-2944,12485941,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jul/10 07:03,24/Apr/11 09:57,14/Jul/23 05:45,14/Jul/10 08:35,2.3.0,2.4.0,,,,,,,,,,,2.5.0,,,,camel-core,,,,0,,,,,,,,,"Windows is pesky about deleting files which may have an open stream hanging. While other OS is capable of that.

SplitterStreamCacheTest fails on windows due this issue.

The logic in CachedOutputStream should better leverage the Synchronization to be able to close the streams at the end.

Also various DOM converters will automatic closes input streams when converting to DOM. The only reliable mechanism is Camels synchronization which is invoked when the Exchange is done. And thus the time where we can cleanup.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76392,,,Sun Apr 24 09:57:15 UTC 2011,,,,,,,,,,,"0|i01rp3:",8256,,,,,,,,,,,,,,,,,,,,"14/Jul/10 08:35;davsclaus;trunk: 963966;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelHttpTransportServlet.destroy causes java.lang.IllegalArgumentException: Cannot find the deployed servlet,CAMEL-2942,12485961,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bstiles@bstiles.net,bstiles@bstiles.net,13/Jul/10 17:18,24/Apr/11 09:57,14/Jul/23 05:45,14/Jul/10 01:41,2.3.0,,,,,,,,,,,,2.5.0,,,,camel-servlet,,,,0,,,,,,,,,"CamelHttpTransportServlet.destroy removes the servlet from a static map named CAMEL_SERVLET_MAP prior to stopping its associated Spring application context.  If that context defines a route using a servletEndpoint, the route is shutdown AFTER the servlet is removed from the map.  The shutdown code then looks for the servlet in the map by calling CamelHttpTransportServlet.getCamelServlet.  The servlet can't be found, and the ensuing exception is logged (copied below).

It seems to me that CamelHttpTransportServlet.destroy should be defined like this:
    
    public void destroy() {
        // Removal was here
        if (applicationContext != null) {
            applicationContext.stop();
        }
        // Moved the removal to here
        CAMEL_SERVLET_MAP.remove(servletName);
    }

so that the servlet is removed from the map after the context is stopped.

I know for sure that removal of the servlet from the map before the context is stopped causes this problem when my route is shutdown.  I DON'T know for sure that my overall configuration is correct, though I think it is valid.

If the above change is not obviously correct, or if there are further questions, please let me know, and I'll work up a sample that demonstrates the problem to help answer any questions.

--

2010-07-13 09:06:23,918 [Camel Thread 0 - ShutdownTask] WARN  org.apache.camel.impl.DefaultShutdownStrategy at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:219)
         Error occurred while shutting down route: Consumer[/relay]. This exception will be ignored.
java.lang.IllegalArgumentException: Cannot find the deployed servlet, please configure the ServletComponent or configure a org.apache.camel.component.servlet.CamelHttpTransportServlet servlet in web.xml 
	at org.apache.camel.component.servlet.ServletComponent.getCamelServlet(ServletComponent.java:55)
	at org.apache.camel.component.servlet.ServletComponent.disconnect(ServletComponent.java:116)
	at org.apache.camel.component.http.HttpEndpoint.disconnect(HttpEndpoint.java:152)
	at org.apache.camel.component.http.HttpConsumer.doStop(HttpConsumer.java:56)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:86)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:107)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:100)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:217)
	at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:413)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76393,,,Sun Apr 24 09:57:05 UTC 2011,,,,,,,,,,,"0|i01ron:",8254,,,,,,,,,,,,,,,,,,,,"14/Jul/10 01:31;njiang;Yeah, we need to remove the the ServletMap after the application context is stopped.
Thanks for pointing that out, I will commit the fix shortly.
;;;","14/Jul/10 01:40;bstiles@bstiles.net;Fantastic.  Thanks for the quick response!;;;","14/Jul/10 01:41;njiang;Committed the patch with thanks to Brian.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.test package is imported in camel-spring component - generates error on OSGI platform,CAMEL-2940,12485952,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,12/Jul/10 15:12,24/Apr/11 09:57,14/Jul/23 05:45,13/Jul/10 13:28,2.5.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"{code}
[  86] [Installed  ] [            ] [   60] camel-spring (2.5.0.SNAPSHOT)
karaf@root> start 86
Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&(package=org.ap
ache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1))) - [86.0] package; (&(package=org.apache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1)))
karaf@root> headers 86

camel-spring (86)
-----------------
Bnd-LastModified = 1278946400750
Build-Jdk = 1.6.0_20
Built-By = Charlesm
Bundle-Activator = org.apache.camel.osgi.Activator
Bundle-Description = Camel Spring support
Bundle-DocURL = http://www.apache.org/
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2
Bundle-Name = camel-spring
Bundle-SymbolicName = org.apache.camel.camel-spring
Bundle-Vendor = The Apache Software Foundation
Bundle-Version = 2.5.0.SNAPSHOT
Created-By = Apache Maven Bundle Plugin
Export-Package = org.apache.camel.spring.spi;uses:=""org.springframework.context,org.apache.camel.spi,org.springframework.beans.factory,org.apache.camel,org.springframewor
k.beans.factory.config,org.apache.camel.builder,org.springframework.transaction,org.apache.commons.logging,org.apache.camel.processor.exceptionpolicy,org.apache.camel.pro
cessor,org.apache.camel.util,org.apache.camel.model,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.util;uses:=""org.apache.camel
,org.springframework.context,org.apache.camel.util,org.apache.commons.logging,org.springframework.beans.factory,org.springframework.util"";version=""2.5.0.SNAPSHOT"",org.apa
che.camel.spring.remoting;uses:=""org.apache.camel.util,org.springframework.remoting.support,org.apache.camel.component.bean,org.apache.camel,org.springframework.beans,org
.springframework.context,org.apache.camel.spi,org.apache.camel.spring.util,org.springframework.beans.factory"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring;uses:=""org.
apache.camel.impl,org.apache.camel.util,org.apache.commons.logging,org.apache.camel,org.springframework.beans,org.springframework.context,org.springframework.util,org.spr
ingframework.beans.factory.config,org.apache.camel.spring.util,javax.xml.bind.annotation,org.springframework.beans.factory,org.apache.camel.builder,org.apache.camel.model
.dataformat,org.springframework.context.event,org.apache.camel.model.config,org.apache.camel.model,org.apache.camel.spi,org.apache.camel.spring.spi,org.apache.camel.view,
org.springframework.context.support,org.apache.camel.spring.handler,javax.xml.bind,org.apache.camel.component.bean,org.apache.camel.component.event,org.springframework.tr
ansaction,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.handler;uses:=""org.springframework.beans.factory.support,org.springfra
mework.core,org.springframework.util,org.springframework.beans.factory.xml,org.w3c.dom,org.springframework.beans,org.springframework.beans.factory.config,org.springframew
ork.beans.factory.parsing,org.apache.camel.model.dataformat,org.apache.camel.model.config,org.apache.camel.util,org.apache.camel.model,org.apache.camel.spring,javax.xml.b
ind,org.springframework.beans.factory,org.apache.camel.view,org.apache.commons.logging,org.apache.camel.model.loadbalancer,org.apache.camel.builder.xml,org.apache.camel.s
pring.remoting,org.apache.camel.spi,org.apache.camel,org.apache.camel.model.language,org.apache.camel.processor"";version=""2.5.0.SNAPSHOT"",org.apache.camel.osgi;uses:=""org
.osgi.framework,org.apache.camel.impl,org.springframework.osgi.context,org.apache.commons.logging,javax.xml.bind.annotation,org.springframework.context,org.apache.camel.s
pring,org.apache.camel.model,org.apache.camel.model.loadbalancer,org.apache.camel,org.apache.camel.model.language,org.springframework.beans.factory.xml,org.apache.camel.m
odel.dataformat,org.apache.camel.spring.handler,org.apache.camel.model.config,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component;uses:=""org.apache.
camel.impl,org.apache.commons.logging,org.springframework.core.io,org.apache.camel,org.apache.camel.converter,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.ca
mel.component.event;uses:=""org.apache.camel,org.springframework.context,org.apache.camel.impl,org.springframework.beans,org.apache.camel.util,org.apache.camel.processor.l
oadbalancer"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.test;uses:=""org.apache.camel.impl,org.apache.camel.util,org.apache.camel,org.apache.commons.logging,org.a
pache.camel.component.mock"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.validator;uses:=""javax.xml.transform,org.springframework.core.io,javax.xml.transform.strea
m,org.apache.camel.processor.validation,org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel"";version=""2.5.0.SNAPSHOT"",org.apache.
camel.component.xslt;uses:=""org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel,org.springframework.core.io,org.apache.camel.buil
der.xml,org.apache.camel.util,javax.xml.transform,org.apache.camel.converter.jaxp,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT""
Ignore-Package = org.apache.camel.spring.remoting,org.apache.camel.component,org.apache.camel.component.validator,org.apache.camel.component.xslt,org.apache.camel.spring.
spi,org.apache.camel.spring,org.apache.camel.osgi,org.apache.camel.spring.handler,org.apache.camel.component.event,org.apache.camel.spring.util
Implementation-Title = Camel :: Spring
Implementation-Vendor = The Apache Software Foundation
Implementation-Vendor-Id = org.apache.camel
Implementation-Version = 2.5-SNAPSHOT
Import-Package = javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.transform,javax.xml.transform.stream,org.apache.camel;version=""[2.5
.0,2.5.1)"",org.apache.camel.builder;version=""[2.5.0,2.5.1)"",org.apache.camel.builder.xml;version=""[2.5.0,2.5.1)"",org.apache.camel.component.bean;version=""[2.5.0,2.5.1)"",o
rg.apache.camel.component.mock;version=""[2.5.0,2.5.1)"",org.apache.camel.component.properties;version=""[2.5.0,2.5.1)"",org.apache.camel.component.test;version=""[2.5.0,2.5.1
)"",org.apache.camel.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.converter.jaxp;version=""[2.5.0,2.5.1)"",org.apache.camel.impl;version=""[2.5.0,2.5.1)"",org.apache.cam
el.impl.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.management;version=""[2.5.0,2.5.1)"",org.apache.camel.model;version=""[2.5.0,2.5.1)"",org.apache.camel.model.config
;version=""[2.5.0,2.5.1)"",org.apache.camel.model.dataformat;version=""[2.5.0,2.5.1)"",org.apache.camel.model.language;version=""[2.5.0,2.5.1)"",org.apache.camel.model.loadbala
ncer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.exceptionpolicy;version=""[2.5.0,2.5.1)"",org.apache.camel.proces
sor.interceptor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.loadbalancer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.validation;version=""[2.5.0,2.5.1)"",org.
apache.camel.spi;version=""[2.5.0,2.5.1)"",org.apache.camel.util;version=""[2.5.0,2.5.1)"",org.apache.camel.view;version=""[2.5.0,2.5.1)"",org.apache.commons.logging,org.osgi.f
ramework;version=""[1.3,2)"",org.osgi.util.tracker;version=""[1.3,2)"",org.springframework.beans;version=""[2.5,4)"",org.springframework.beans.factory;version=""[2.5,4)"",org.spr
ingframework.beans.factory.config;version=""[2.5,4)"",org.springframework.beans.factory.parsing;version=""[2.5,4)"",org.springframework.beans.factory.support;version=""[2.5,4)
"",org.springframework.beans.factory.xml;version=""[2.5,4)"",org.springframework.context;version=""[2.5,4)"",org.springframework.context.event;version=""[2.5,4)"",org.springfram
ework.context.support;version=""[2.5,4)"",org.springframework.core;version=""[2.5,4)"",org.springframework.core.io;version=""[2.5,4)"",org.springframework.osgi.context;version=
""[1.2,2)"",org.springframework.remoting.support;version=""[2.5,4)"",org.springframework.transaction;version=""[2.5,4)"",org.springframework.transaction.support;version=""[2.5,4
)"",org.springframework.util;version=""[2.5,4)"",org.w3c.dom
Manifest-Version = 1.0
Specification-Title = Camel :: Spring
Specification-Vendor = The Apache Software Foundation
Specification-Version = 2.5-SNAPSHOT
Tool = Bnd-0.0.357
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76394,,,Sun Apr 24 09:57:35 UTC 2011,,,,,,,,,,,"0|i01ro7:",8252,,,,,,,,,,,,,,,,,,,,"13/Jul/10 13:28;cmoulliard;code committed;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamProducer does not close stream in camel-stream,CAMEL-2937,12486010,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,11/Jul/10 16:26,02/May/13 02:30,14/Jul/23 05:45,11/Jul/10 16:36,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"Since the stream could be System.out or System.err, the producer does not close the stream ever. It should close all streams with the noted exceptions.",,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6152,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76395,,,Sun Apr 24 09:58:01 UTC 2011,,,,,,,,,,,"0|i01rnj:",8249,,,,,,,,,,,,,,,,,,,,"11/Jul/10 16:36;hadrian;r963105;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken failure reporting via DefaultProucerTemplate.asyncCallback and Synchronization.onFailure,CAMEL-2935,12486038,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mrt1nz,mrt1nz,10/Jul/10 10:01,24/Apr/11 09:57,14/Jul/23 05:45,10/Jul/10 20:56,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"The recent change in {{ProducerCache.send}}

{code:java|title=ProducerCache.java}
    public void send(Endpoint endpoint, Exchange exchange) {
        try {
            sendExchange(endpoint, null, null, exchange);
            // RECENT CHANGE HERE:
            // ensure that CamelExecutionException is always thrown
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
        } catch (Exception e) {
            throw wrapCamelExecutionException(exchange, e);
        }
    }
{code}

that throws a {{CamelExecutionException}} if {{exchange.getException}} is not null, makes it impossible for {{DefaultProducerTemplate.asyncCallback}} to report failures (other than fault messages) asynchronously via {{Synchronization.onFailure}}

{code:java|title=DefaultProducerTemplate.java}
    public Future<Exchange> asyncCallback(final Endpoint endpoint, final Exchange exchange, final Synchronization onCompletion) {
        Callable<Exchange> task = new Callable<Exchange>() {
            public Exchange call() throws Exception {

                // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3
                Exchange answer = send(endpoint, exchange);

                if (answer.isFailed()) {
                    onCompletion.onFailure(answer);
                } else {
                    // ...
                }
                return answer;
            }
        };
        // ...
    }
{code}

This was working in Camel 2.3 (but unfortunately there wasn't any test case for it). I attached a patch for {{DefaultProducerTemplateAsyncTest}} that demonstrates the problem. I didn't commit a fix yet because I'm unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I'd like to hear other opinions before I continue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Jul/10 11:35;mrt1nz;on-failure.patch;https://issues.apache.org/jira/secure/attachment/12463308/on-failure.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76396,,,Sun Apr 24 09:57:26 UTC 2011,,,,,,,,,,,"0|i01rn3:",8247,,,,,,,,,,,,,,,,,,,,"10/Jul/10 10:18;davsclaus;Ah well spotted. We should definitely have an unit test for this so callbacks *always* can handle the reply.

I would suggest to change the internals of producer template to have a *send* method to be used for the sync cases (the one we got now, so no changes needed for the sync cases).

However for the async we should introduce a new {{sendAsync}} variation that the various {{asyncCallback}} methods leverage.
Then that method is used in the {{call}} method as shown above.;;;","10/Jul/10 10:24;mrt1nz;Thanks for your feedback Claus. Sounds good to me, I'll try that.;;;","10/Jul/10 10:37;davsclaus;In fact you may want to ensure sendAsync never throws exception, but instead always set the thrown exception on the Exchange. This ensure that in the {{call}} method we can invoke the {{onFailure}} method on the {{onCompletion}} callback.;;;","10/Jul/10 11:35;mrt1nz;Claus, I'd like to first suggest a solution as implemented by {{on-failure.patch}}. This is a solution that fixes the problem with only minimal changes (i.e. without introducing new {{sendAsync}} methods). In this patch I simply moved

{code:java}
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
{code} 

from {{ProducerCache.send(Endpoint, Exchange)}} to {{ProducerTemplate.send(Endpoint, Exchange)}} because it is the *only* user of  {{ProducerCache.send(Endpoint, Exchange)}}. In {{ProducerCache.asyncCallback(Endpoint, Exchange, Synchronization)}} the {{ProducerCache.send(Endpoint, Exchange)}} is now used directly (and this again re-introduces the same behaviour as in Camel 2.3). All the camel-core tests run through locally (except SplitterStreamCache test but it also fails without the changes ... so it must be something else).

Although, I see this issue as resolved with this patch, I still don't understand why the if-statement above was introduced only for {{ProducerCache.send(Endpoint, Exchange)}} and not for the other {{ProducerCache.send}} methods as well. This looks somehow inconsistent to me. Maybe I just miss something obvious. 

If you are fine with the provided patch, please let me know and I'll commit the changes.;;;","10/Jul/10 12:51;davsclaus;Okay I had a look at the patch and have been fixed the issue.

The problem was that {{ProducerTemplate}} interface has been tighten up a bit to ensure that all methods will thrown a {{CamelExecutionException}} if any of the {{send}} or {{request}} methods is invoked. This ensures its consistent. Before there where a few methods which didn't do this. This causes the end user to be a bit confused and they would then have to double check with try .. catch and the Exchange as well.

Unfortunately the fix was done at {{ProoducerCache}} instead on {{DefaultProducerTemplate}} itself. So I have fixed this. Running full test before committing.

;;;","10/Jul/10 13:10;mrt1nz;Great, thanks!;;;","10/Jul/10 13:15;davsclaus;In fact I am tighten up a bit on the {{ProducerCache}} as well and ensuring the javadoc states the contract. 

Now exceptions is not thrown but stored on the returned Exchange which ensures a friendly API which caters for both the synchronous and asynchronous routing engine in Camel.
;;;","10/Jul/10 14:26;davsclaus;I have to fix some unit tests which was relying on the old behavior of {{template.send(Exchange)}} and {{template.request(Exchange)}} not throwing an exception, which wasn't entirely covered by the first fix. Now with all the template methods fixed they surface some tests which now fails due to the tighten contract.
;;;","10/Jul/10 16:21;davsclaus;I have cleared the confusing of the {{ProducerTemplate}} and {{ProducerCache}} API.

I had made a minor mistake before which causes several tests to fail. I have corrected this and the problem is in fact just the async behavior Martin reported.

Running full tests now, before committing.;;;","10/Jul/10 20:56;davsclaus;trunk: 962915.;;;","11/Jul/10 08:39;mrt1nz;Just upgraded Akka to the latest Camel 2.4-SNAPSHOT and all tests are now running through. Thanks again!;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,
httpClient.soTimeout property is not returned when getting HTTP endpoint URI,CAMEL-2924,12485790,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,08/Jul/10 15:04,24/Apr/11 09:57,14/Jul/23 05:45,16/Jul/10 10:12,2.3.0,,,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"getting the endpoint URI of an HTTP EndPoint with httpClient.soTimeout property set won't return the property

i.e: ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"" is returned as ""http://crive.optadev.com/valde/utils/posttest.php""

* I have noticed this using ExchangeHelper.resolveEndpoint:
String uri = ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"";
uri = ExchangeHelper.resolveEndpoint(exchange, uri.trim()).getEndpointUri();
//uri is now missing httpClient.soTimeout=5000

* it is also happening reading @Header(Exchange.TO_ENDPOINT)

this is not happening when using the soTimeout option in FTP component.


I think this is a major issue as recipientList is making use of ExchangeHelper and therefore the option will be ingored.

",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2945,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76397,,,Sun Apr 24 09:57:32 UTC 2011,,,,,,,,,,,"0|i01rkn:",8236,,,,,,,,,,,,,,,,,,,,"08/Jul/10 15:07;crive;please ignore my last sentence about recipientList;;;","09/Jul/10 06:16;davsclaus;What's your problem?
;;;","09/Jul/10 07:42;crive;calling

uriCamel = ExchangeHelper.resolveEndpoint(exchange, ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"").getEndpointUri();

will result in uriCamel = ""http://crive.optadev.com/valde/utils/posttest.php""

so without the ""httpClient.soTimeout=5000""

I've noticed the same behaviour using a retryUntil bean getting the header Exchange.TO_ENDPOINT: @Header(Exchange.TO_ENDPOINT) String target

target variable will be set to: ""http://crive.optadev.com/valde/utils/posttest.php"";;;","09/Jul/10 07:57;davsclaus;But what do you use the resolveEndpoint for?

The getEndpointUri is important for Camel to use a consistent uri so it can lookup endpoints in its registry.

The http endpoint has lenient parameters, which means that you want to use the *same* http endpoint but being able to send different parameters to the http server

{code}
http://foo.com?a=foo
http://foo.com?a=bar
http://foo.com?a=foo&beer=yes
{code}
Should all use the same http endpoint, and thus get endpoint uri returns the same for all 3 instances.
This is by design.

The httpClient parameters is passed to the underlying HTTPClient instance which does the actual HTTP work.
;;;","09/Jul/10 08:11;crive;I am using a recipientList, in order to get additional parameters needed in my process (each for every endpoint)
I make use of resolveEndpoint to get the URI Camel is using internally to identify the endpoint (using a map with the URI as the key).

I thought this was a bug, as this is by design I will change the way I am currently creating the recipientList (by fist getting URI out of resolveEndpoint).


I've got a side question about this ""lenient parameters"":
would it be possible to have them in FTP component as well?
we are currently facing the problem that delivering several files (different file names) to a given FTP is creating a new FTP endpoint (and therefore connection) each time;
I know we can set the option to disconnect after every delivery but I think it would improve performances if we do not connect/disconnect on each file (we are sending a huge amount of data).
I can create a new ticket for this if you think it is sensible.

Thank you for the reply I really appreciate the responses I receive each time.

;;;","09/Jul/10 08:22;davsclaus;The FTP component supports providing the file name as a header. Use {{Exchange.FILE_NAME}} then you can reuse the same FTP endpoint and thus the same connection.;;;","09/Jul/10 08:34;crive;Thank you.;;;","16/Jul/10 10:12;njiang;I think we can close this issue, as it is fixed by CAMEL-2924.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
XMPPConsumer does not remove the message which causes OOME with XMPP,CAMEL-2922,12485960,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jul/10 05:13,24/Apr/11 09:57,14/Jul/23 05:45,14/Jul/10 04:36,2.1.0,2.2.0,2.3.0,,,,,,,,,,2.5.0,,,,camel-xmpp,,,,0,,,,,,,,,,,mark.ford,,,,,,,,,,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76398,,,Sun Apr 24 09:57:31 UTC 2011,,,,,,,,,,,"0|i01rk7:",8234,,,,,,,,,,,,,,,,,,,,"08/Jul/10 05:14;davsclaus;See CAMEL-1476

{quote}
The patch for this bug was removed in revision 779121. The result is that the XMPPConsumer does not remove the message from the MultiUserChat and the possibility for an OutOfMemoryException still exists.
The OOM occurs because the org.jivesoftware.smackx.muc.RoomListenerMultiplexor is a packet listener that contains a collector that stores all of the messages received up to a hard coded limit of 65k messages. These messages are not removed unless muc.pollMessage() or muc.nextMessage() is called. I'm not sure the reason behind storing these messages in a collector.

I have tested this in 2.1.0 and 2.3.0 and reviewed the code in 2.4-SNAPSHOT. I can supply a test case if needed.
{quote};;;","14/Jul/10 03:27;mark.ford;I haven't had a chance to look at integrating my test into the integration tests for this component. 

However, the snippet below is almost the same as what was originally applied and mistakenly overwritten. My only change is to call the non-blocking pollMessage() instead of nextMessage(). The non-blocking call seems safer in case the packet listener that's doing the collecting hasn't been called yet.

The diff below is from the 2.1.0 base. The method (public void processMessage(Chat chat, Message message)) is the same in the 2.4-SNAPSHOT version.

Index: XmppConsumer.java
===================================================================
--- XmppConsumer.java	(revision 960908)
+++ XmppConsumer.java	(working copy)
@@ -130,5 +130,9 @@
         } catch (Exception e) {
             exchange.setException(e);
         }
+        
+        if (muc != null) {
+            muc.pollMessage();
+        }
     }
 }
;;;","14/Jul/10 04:36;davsclaus;Thanks Mark for pointing this out. I have committed a fix and polished the logging a bit.

trunk: 963946.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP throws ResolveEndpointFailedException when ""ftpClient.connectionTimeout"" option is provided",CAMEL-2912,12486171,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matsev,matsev,06/Jul/10 13:32,24/Apr/11 09:57,14/Jul/23 05:45,06/Jul/10 15:27,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,,,,"Currently, SFTP throws an ResolveEndpointFailed exception if the option ""ftpClient.connectionTimeout"" is provided as a part of the URI. This could be fixed by calling the Session.connect(int timeout) method of JSCH. Some investigation reveals that this method eventually calls Socket.setSoTimeout(int timeout), which implies that the time unit of the timeout is milliseconds.

http://grepcode.com/file/repo1.maven.org/maven2/com.jcraft/jsch/0.1.42/com/jcraft/jsch/Session.java#Session.connect%28int%29


Example:

sftp://user@host/dir?password=secret&ftpClient.connectionTimeout=30000&disconnect=true&passiveMode=true

ResolveEndpointFailedException:
[...]
There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{ftpClient.connectionTimeout=30000}] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76399,,,Sun Apr 24 09:57:36 UTC 2011,,,,,,,,,,,"0|i01rhz:",8224,,,,,,,,,,,,,,,,,,,,"06/Jul/10 15:27;davsclaus;I have introduced new timeout options in the FTP endpoint uri so its easier to configure.

See wiki page
https://cwiki.apache.org/confluence/display/CAMEL/FTP2
;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Oracle AQ does not support the JMSReplyTo property and therefore throws a ""JMS-102: Feature not supported"" exception when the JMS provider tries to get it.",CAMEL-2909,12486039,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mmatveev,mmatveev,05/Jul/10 14:11,09/Jul/10 08:29,14/Jul/23 05:45,06/Jul/10 09:01,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jms,,,,0,,,,,,,,,"Oracle AQ does not support the JMSReplyTo property and therefore throws a ""JMS-102: Feature not supported"" exception when the JMS provider tries to get it.",,mmatveev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76400,,,Fri Jul 09 08:29:17 UTC 2010,,,,,,,,,,,"0|i01rhb:",8221,,,,,,,,,,,,,,,,,,,,"05/Jul/10 14:34;davsclaus;Could you add information such as:
- What version of the Oracle AQ are you using?
- What OS are you using
- The stacktrace
- For example related Camel configuration

And what do you mean by JMS provider? Where does the exception happen precisely? 

Link to Oracle AQ documentation about the lack of support for the JMSReplyTo would be great as well.;;;","05/Jul/10 14:55;mmatveev;I'm using Oracle AQ 10.2.0.2, reproduced this error on Windows XP and RHEL 5 linux.

This exception will appear in few different places, namel everywhere where jmsMessage.getReplyTo() is called. For example in public Map extractHeadersFromJms(Message, Exchange) method in JmsBinding class (line number 174 in 2.3.0 version):
       map.put(""JMSReplyTo"", jmsMessage.getJMSReplyTo());

Stacktrace is the following:
org.apache.camel.RuntimeCamelException: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:181)
	at org.apache.camel.component.jms.JmsMessage.populateInitialHeaders(JmsMessage.java:191)
	at org.apache.camel.impl.DefaultMessage.createHeaders(DefaultMessage.java:178)
	at org.apache.camel.component.jms.JmsMessage.ensureInitialHeaders(JmsMessage.java:176)
	at org.apache.camel.component.jms.JmsMessage.setHeader(JmsMessage.java:152)
	at org.apache.camel.processor.RedeliveryErrorHandler.incrementRedeliveryCounter(RedeliveryErrorHandler.java:524)
	at org.apache.camel.processor.RedeliveryErrorHandler.handleException(RedeliveryErrorHandler.java:294)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:101)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at oracle.jms.AQjmsError.throwEx(AQjmsError.java:288)
	at oracle.jms.AQjmsAdtMessage.getJMSReplyTo(AQjmsAdtMessage.java:145)
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:174)
	... 24 more

I meant Camel JMS Component, not Provider, sorry.

For your reference: similar bug was in Mule framework: http://www.mulesoft.org/jira/browse/MULE-489 and it was fixed by ignoring this exception for Oracle AQ.

Related config is:
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""jms:topic:TOPIC_NAME""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""aqConfiguration"" class=""com.example.aqsupport.AqJmsConfiguration"">
        <property name=""connectionFactory"" ref=""aqConnectionFactory""/>
        <property name=""destinationResolver"" ref=""aqDestinationResolver""/>
        <property name=""durableSubscriptionName"" value=""SUBSCRIPTION_NAME""/>
        <property name=""subscriptionDurable"" value=""true""/>
    </bean>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""configuration"" ref=""aqConfiguration""/>
    </bean>

    <bean id=""aqDestinationResolver"" class=""com.example.aqsupport.AqDestinationResolver"">
        <property name=""ownerName"" value=""OWNER""/>
    </bean>

    <bean id=""oracleAqJdbcDataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""oracle.jdbc.driver.OracleDriver""/>
        <property name=""url"" value=""jdbc:oracle:thin:host:port:schema""/>
        <property name=""username"" value=""USERNAME""/>
        <property name=""password"" value=""PASSWORD""/>
    </bean>

    <bean id=""aqConnectionFactory"" class=""oracle.jms.AQjmsFactory"" factory-method=""getQueueConnectionFactory"">
        <constructor-arg index=""0"" ref=""oracleAqJdbcDataSource""/>
    </bean>

AqDestinationResolver is DestinationResolver thaht supports AQ's Owner property, actually there is 1 line of code there:
public class AqDestinationResolver implements DestinationResolver {
    private String ownerName;
    public void setOwnerName(String ownerName) {
        this.ownerName = ownerName;
    }
    public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {
        return ((AQjmsSession) session).getTopic(ownerName, destinationName);
    }
}
AqJmsConfiguration class extends camel' JmsConfiguration class by adding support for custom MessageListenerContainer, it is needed to support Oracle AQ Payload Factory
public class AqJmsConfiguration extends JmsConfiguration {
    @Override
    public AbstractMessageListenerContainer createMessageListenerContainer(JmsEndpoint endpoint) {
        AbstractMessageListenerContainer messageListenerContainer = new AqMessageListenerContainer();
        configureMessageListenerContainer(messageListenerContainer, endpoint);
        return messageListenerContainer;
    }
}
and AqMessageListenerContainer is 
public class AqMessageListenerContainer extends DefaultMessageListenerContainer {
    @Override
    protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {
        TopicSubscriber consumer = ((AQjmsSession) session).getDurableSubscriber((Topic) destination,
                getDurableSubscriptionName(), new ExamplePayloadFactory());
        return consumer;
    }
}

Sorry, cannot find related Oracle docs.;;;","06/Jul/10 08:51;mmatveev;Small addition: The ""JMSType"" property is not supported as well for Oracle AQ messages with ADT type payload.;;;","06/Jul/10 09:01;davsclaus;trunk: 960845.

Will now ignore this exception and log a message at TRACE level in case you want to see the thrown exception.;;;","06/Jul/10 09:17;mmatveev;Sorry for bothering Claus, but same fix should be applied for ""JMSType"" property in JmsBinding class (two lines below the ""JMSReplyTo"")
Thanks.;;;","08/Jul/10 17:51;davsclaus;Max sorry I missed your update on this ticket.

I actually stumbled across this ticket
http://jira.springframework.org/browse/INT-1229

Which indicated that the 2nd field needed to be fixed, so I was just about to comment here about the fix.;;;","08/Jul/10 17:53;davsclaus;trunk: 961847.

Max feel free to test with latest source code.;;;","09/Jul/10 08:29;mmatveev;Everything is working, thanks;;;",,,,,,,,,,,,,,,,,,,,,,
<proxy> doesn't support setting camelContextId,CAMEL-2904,12485873,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Jul/10 09:20,24/Apr/11 09:57,14/Jul/23 05:45,03/Jul/10 09:37,,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"Here is the mail thread which discusses about it.
http://camel.465427.n5.nabble.com/proxy-export-don-t-support-setting-camel-context-tp547161p547161.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76401,,,Sun Apr 24 09:57:19 UTC 2011,,,,,,,,,,,"0|i01rgf:",8217,,,,,,,,,,,,,,,,,,,,"24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade to HawtDB 1.1,CAMEL-2901,12486249,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,chirino,chirino,02/Jul/10 13:12,24/Apr/11 10:01,14/Jul/23 05:45,02/Jul/10 13:13,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-hawtdb,,,,0,,,,,,,,,"HawtDB 1.1 has been released.  Change log at: http://github.com/chirino/hawtdb/blob/master/changelog.md
We should upgrade to pick up the listed bug fixes:
{quote}
    * Fixing BTree node next linking.. It was possible that a next link would not properly get set in some conditions during a node removal.
    * You can add get callbacks when a commit gets flushed to disk.
    * Changed the way the journal was handling callback based write completed notifications. They are now delivered in batch form to a single JournalListener. This reduces thread contention and increases throughput.
    * Moved the built in predicate implementations into a Predicates class.
    * Added close method to the Transaction interface. Implementation now asserts it is no longer used after a close.
    * Making the appender's max write batch size configurable.
    * Revamped how Update and DefferedUpdates track shadow pages. A little easier to follow now. - changed the interface to PagedAccessor so that instead of removing the linked pages, it just needs to report what the linked pages are.
    * Got rid of the WriteKey wrapper class, updated logging.
    * Better looking printStrucuture BTree method
    * Added a few Logging classes to reduce the number of places we need to update if in case we decided to switch logging APIs.
    * Fixing free page allocation bug when using deferred updates.
    * Javadoc improvements
    * Expose a config property to control the read cache size.
    * Reworked how snapshot tracking was being done. Fixes errors that occurred during heavy concurrent access.
    * Added a non-blocking flush method to the TxPageFile
    * Read cache was not getting updated when a update batch was performed. Cached entries that were updated and flushed to disk continued returning stale data.
    * Fixed an recovery edge cases
    * Don't start the thread from the thread factory. that causes illegal state exceptions
    * Fixed journal bug where getting next location could return a the current location
    * Renamed EncoderDecoder to PagedAccessor
    * The util.buffer package has moved into it's own project at http://github.com/chirino/hawtbuf
    * Fixes #4 : Errors occur when you re-open an empty data file.
    * Extracted a SortedIndex interface from the Index interface to non sorted indexes having to deal with that leaky abstraction.
    * added a free() method to the Paged for symmetry with the alloc() method.
    * Improved website documentation
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76402,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,,,,,"0|i01rfr:",8214,,,,,,,,,,,,,,,,,,,,"02/Jul/10 13:13;chirino;upgraded trunk.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
out of heap space if remote FTP site has too many files to pick up,CAMEL-2899,12486190,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karlp,karlp,02/Jul/10 11:49,24/Apr/11 09:57,14/Jul/23 05:45,06/Jul/10 08:22,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,,,,"2010-07-02 11:38:07,439 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 10]   - <Consumer Consumer[my_ftp_URI_here caused by: Java heap space>
java.lang.OutOfMemoryError: Java heap space

My remote FTP server has ~60k 100 byte files, and the camel endpoint consumer falls over and doesn't start again.  I can use JMX to stop/start the consumer, (it still has status ""started"") and it will log in to the remote server again, but then fall over with the out of heap space.

I can work around this by increasing the heap, or by moving some of the files aside,  but I don't think camel should care how many files there are, or at least, I think it should deal with it more gracefully.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76403,,,Sun Apr 24 09:57:21 UTC 2011,,,,,,,,,,,"0|i01rfb:",8212,,,,,,,,,,,,,,,,,,,,"02/Jul/10 11:59;gertvanthienen;I think you can already configure that with the *{{maxMessagesPerPoll}}* URI parameter to limit the number of files being processing in a single poll (cfr. http://camel.apache.org/file2.html) - could you give that a try to see if it solves your problem?;;;","02/Jul/10 17:07;karlp;Seemed very reasonable, but unfortunately, it doesn't help....

2010-07-02 17:02:42,327 FATAL Consumer Consumer[ftp://sms02@localhost:2121/autre
q/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.process
ed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localho
st:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&
move=.processed&passiveMode=true&password=sms02 caused by: Java heap space
java.lang.OutOfMemoryError: Java heap space

I tried again without file filter, (just an ant pattern name matcher) in case that was causing any problems, but it still fails.;;;","02/Jul/10 18:45;karlp;Some stack traces...

This is without having a file name pattern match filter


 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:613)
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:652)
	at org.apache.camel.impl.DefaultExchange.getProperties(DefaultExchange.java:168)
	at org.apache.camel.impl.DefaultExchange.setProperty(DefaultExchange.java:153)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:96)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



The two below here were when I had an ant pattern match filter.  From the debug logs, it filtered _every_ file, regardless of the max messages per poll

FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619);;;","03/Jul/10 08:26;davsclaus;We could either

a)
Use lightweight record structure for the 160K list of files instead of turning them into Exchange objects which carries extra load

b)
Alter so the maxMessagesPerPoll will be effective earlier. Currently it loads the entire list, then you can filter, sort etc. And after all this it will cut down the list.
If we apply the maxMessagesPerPoll earlier we can't really be able to sort the entire list etc. And the filter could also cut out some from the max list.
Or in other words we will have to re-add files until we hit that limit if there are more files.

In your case I don't think you care about sorting/filtering etc. You just want to poll X number of files per go to avoid excessive memory overhead. So I think we could add an option in the uri for solution b.

Anyone got a good name for such an option?

Any thoughts?;;;","06/Jul/10 08:22;davsclaus;The {{maxMessagesPerPoll}} option is now applied earlier for the file/ftp components so we avoid creating so many Exchange objects which are then afterwards discarded.

trunk: 960839.

Notice there is no limit in the java.io.File or FTP API to tell it to only list at most X number of files.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
Splitting file using tokenizer should close the Scanner to avoid files not being able to be moved thereafter,CAMEL-2897,12485908,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Jul/10 08:22,24/Apr/11 10:00,14/Jul/23 05:45,02/Jul/10 08:26,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jul/10 08:28;davsclaus;camel-core-2.4-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463301/camel-core-2.4-SNAPSHOT.jar","02/Jul/10 08:29;davsclaus;camel-spring-2.4-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463302/camel-spring-2.4-SNAPSHOT.jar",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76404,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,,,,,"0|i01rev:",8210,,,,,,,,,,,,,,,,,,,,"02/Jul/10 08:22;davsclaus;This problem occurs on Windows which has a lock on the file.
Unix and Mac works fine.

See nabble
http://camel.465427.n5.nabble.com/File-can-t-be-moved-or-deleted-on-Windows-tp512484p512484.html;;;","02/Jul/10 08:26;davsclaus;trunk: 959916.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiPackageScanClassResolver can't find the class after refactoring,CAMEL-2895,12486160,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Jul/10 06:54,24/Apr/11 10:00,14/Jul/23 05:45,02/Jul/10 07:03,,,,,,,,,,,,,2.4.0,,,,osgi,,,,0,,,,,,,,,"After I applied the patch of CAMEL-2894, I can't get let camel load the router with package scan option.

As the Bundle.getResources(String name), can't work as the ClassLoader.getResources(String name).
So we have to use Bundle.findEntries() to check the package's resource.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76405,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,,,,,"0|i01ref:",8208,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPackageScanClassResolver.addClassLoader should check the UnsupportedOperationException,CAMEL-2894,12486234,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Jul/10 06:47,24/Apr/11 10:00,14/Jul/23 05:45,02/Jul/10 07:03,,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"When I was running some OSGi tests with Camel 2.4-SNAPSHOT, I got this UnsupportedOperationExcpetion,
This is stack trace
{code}
Caused by: java.lang.UnsupportedOperationException
	at java.util.AbstractCollection.add(AbstractCollection.java:221)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.addClassLoader(DefaultPackageScanClassResolver.java:58)
	at org.apache.camel.spring.PackageScanRouteBuilderFinder.<init>(PackageScanRouteBuilderFinder.java:52)
	at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuildersByPackageScan(CamelContextFactoryBean.java:183)

{code}

After digging the code , I found current OsgiPackageScanClassResolver only supports to turn the bundle classloader, so we need to check this kind of error.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76406,,,Sun Apr 24 10:00:39 UTC 2011,,,,,,,,,,,"0|i01re7:",8207,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(FromDefintion|ToDefinition).getUriOrRef tend to return null when they should return a URI",CAMEL-2893,12486052,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,01/Jul/10 17:24,24/Apr/11 10:00,14/Jul/23 05:45,01/Jul/10 17:27,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,looks like a simple logic bug to me. Have a fix locally - just checking it works...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76407,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,,,,,"0|i01rdz:",8206,,,,,,,,,,,,,,,,,,,,"01/Jul/10 17:24;jstrachan;this only tends to affect graph drawing tools btw :);;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms consumer should handle markRollbackOnly,CAMEL-2881,12486287,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Jun/10 09:40,24/Apr/11 10:01,14/Jul/23 05:45,30/Jun/10 10:00,2.2.0,2.3.0,,,,,,,,,,,2.4.0,,,,camel-jms,,,,0,,,,,,,,,If using markRollbackOnly to dente the route should rollback the Spring DMLC does not rollback despite its status has been told so. We are forced to thrown runtime exceptions.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76408,,,Sun Apr 24 10:01:37 UTC 2011,,,,,,,,,,,"0|i01rbb:",8194,,,,,,,,,,,,,,,,,,,,"30/Jun/10 10:00;davsclaus;trunk: 959252.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
convertBodyTo should handle null bodies,CAMEL-2867,12486303,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Jun/10 07:03,24/Apr/11 10:01,14/Jul/23 05:46,28/Jun/10 07:04,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,If the body is {{null}} and you use {{convertBodyTo}} you will get a no type converter exception due body is null. Instead it should accept the null body and continue routing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76409,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,,,,,"0|i01r7z:",8179,,,,,,,,,,,,,,,,,,,,"28/Jun/10 07:04;davsclaus;trunk: 958475.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-ftp - Should use absolute paths, eg the leading / should always be included",CAMEL-2860,12486260,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jun/10 11:53,24/Apr/11 10:00,14/Jul/23 05:46,01/Jul/10 08:07,2.0.0,2.1.0,2.2.0,2.3.0,,,,,,,,,2.4.0,,,,camel-ftp,,,,2,,,,,,,,,"FTP Servers expect clients to use absolute paths, so camel-ftp clients should not clip any leading /

We could consider adding a flag to preserve the old behavior to have people if they rely on the old behavior be able to switch that flag on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76410,,,Sun Apr 24 10:00:37 UTC 2011,,,,,,,,,,,"0|i01r6f:",8172,,,,,,,,,,,,,,,,,,,,"25/Jun/10 12:04;davisond;I think it's worth pointing out that this must have changed recently as camel-1.6 doesn't exhibit this problem, so the ""old"" behaviour is the correct behaviour that we should revert to.  

Most FTP clients send absolute paths to the server.  It is the server's responsibility to decide what absolute means (usually a protected FTP root dir is configured in the server and FTP clients cannot escape this regardless of paths used).  If the server allows full f/s access via FTP then that's either up to the server admin or a fault in the FTP server software.  Either way, it should *not* be down to camel-ftp to make unilateral, non-overridable, backwards-incompatible decisions about potential server software configuration.

Personally, I vote for this to be fixed and backported to current production versions.;;;","26/Jun/10 08:28;davsclaus;Looking into camel 1.6 I cannot see it send absolute paths.

It just change dir to current dir at first. And current dir is from the start /. 
And then cd into the starting directory (configured from the endpoint uri). 
So that together makes it appear as it works absolute.


Camel 2.x will not change into current dir at first.
But list files without changing current directory

;;;","26/Jun/10 09:54;davsclaus;trunk: 958207.

You can now specify absolute paths on the endpoint uri, by using double / slashes. Since the first is part of the URI

{{ftp:admin:secret@someserver//foo}}

Notice how we use {{//}} in the uri above to denote an absolute starting path.;;;","01/Jul/10 08:07;davsclaus;Use // slashes in the endpoint uri to denote an absolute starting path.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"useOriginalBody() still appears in fluent API; should be useOriginalMessage()",CAMEL-2858,12486216,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fbolton,fbolton,25/Jun/10 11:06,24/Apr/11 10:01,14/Jul/23 05:46,30/Jun/10 15:18,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"The {{org.apache.camel.model.OnExceptionDefinition}} class defines {{useOriginalBody()}} in the fluent API. This should actually be {{useOriginalMessage()}}, in accordance with CAMEL-1820.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,41613,,,Sun Apr 24 10:01:29 UTC 2011,,,,,,,,,,,"0|i01r5z:",8170,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"No consumers available on ""direct://xyz"" endpoint",CAMEL-2854,12486289,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,24/Jun/10 23:47,24/Apr/11 10:01,14/Jul/23 05:46,29/Jun/10 09:20,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"The following warning in log4j log shows up with no predictable reason:

2010-06-24 14:07:01,090  WARN [DefaultMessageListenerContainer-7:DirectProducer.java:42] No consumers available on endpoint: Endpoint[direct://UserCancelJobRequest] to process: Exchange[JmsMessage: RunnerBase{locationToRunId='DV02YcABTE43HTRPATEGCBFk0m0', jobrun_id=1234, requestOrigId='null', secretKey='null', replyToQueueOrTopic='null', corrolationId='null', requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}]

The endpoint [direct://UserCancelJobRequest] could be a number of different endpoints in our application and all of them are of ""direct:"" type.  When this happens, all messages that run through that endpoint will fail, and it will never recover unless the application is restarted.

Also, if I restart the application and use that route immediately, that warning will not occur and the request will finish successfully.  It seems to happen to routes that have not been used for a while after startup.

When this happens, I can find the exact Camel endpoint/route/processor in JConsole, and nothing seems to be wrong.  How can a ""direct:"" endpoint runs out of consumer?  Isn't the thread that product this warning THE thread to process the message?

We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!

--Michael",ActiveMQ 5.3.2 / Camel 2.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2873,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76411,,,Sun Apr 24 10:01:25 UTC 2011,,,,,,,,,,,"0|i01r53:",8166,,,,,,,,,,,,,,,,,,,,"25/Jun/10 09:37;njiang;What's your route looks like ?
Did you do some thing to start or stop the route which has the direct endpoints ?;;;","25/Jun/10 17:03;mwc_tonesoft;No, we never explicitly start or stop any endpoint. We only rely on the route-builder to setup the routes during startup.

We do have some cases where the endpoint is ""obtained"" during run-time and added to the route-slip. Still we never start or stop any endpoint.

My colleague discovered that in one instance, we hold on to the reference of an endpoint and got the same warning. It turns out Camel context has a little LRUCache that discards older endpoint instances. We fixed that one place, but it still does not explain all other instances of this problem.;;;","25/Jun/10 21:05;hadrian;Michael, if there is a problem, we'll fix it, but it's not clear what you're doing.

If you have a route that starts with;
{code}
from(""direct:UserCancelJobRequest"").[...]
{code}
then you will have a consumer for that direct endpoint. So it looks to me that you don't have such a route and hence no such consumer, yet you try to send messages to such an endpoint from another route using something like:
{code}
from(some-endpoint-probably-jms).[...].to(""direct:UserCancelJobRequest"")[...];
{code}

My guess though is that you are actually using camel embedded in activemq and your activemq upgrade from 5.2.0 to 5.3.2 caused an upgrade of camel from 1.5.0 to 2.2.0. There are slight changes in camel 2.x, including the dsl syntax, that you should take a look at. I am fairly certain that your route syntax is not totally right with camel 2.2.0. 

I hope this helps. Showing us your route or posting a unit test will allow us understand what's going on and help you better. If you have concerns about posting things that may be proprietary to your organization you could also ask for help on the [#camel irc channel|http://camel.apache.org/irc-room.html].

;;;","28/Jun/10 15:48;mwc_tonesoft;As I said before, the route DOES WORK -- most of the time. Therefore, there is no issue of spelling or Camel syntax.

If I can reliably reproduce this problem with a simple unit-test, then I can debug into the Camel code and tell you exactly what this bug is.

Unfortunately, the ""most of the time"" part makes it difficult to reproduce. Also, as I mentioned before, when it does NOT work, I can find and confirm that the route DOES exist and DOES have a consumer in JConsole, even though the warning says otherwise.

Have you look into what I said about Camel's LRUcache? I hope a second look from folks familiar with the code can come up with some educated guess.

Thanks

--Michael;;;","29/Jun/10 06:49;davsclaus;Michael

Do you send messages to a lot of different Camel endpoints? For example do you use any of the dynamic EIP patterns such as recipient list or routing slip.
And when the issue happens, is that after a long period without sending messages to that given endpoint?

Do you have other direct endpoints at the same time working?

How many routes do you have in your application? And can you see a lot of endpoints listed in JConsole?;;;","29/Jun/10 06:57;davsclaus;And can you attach the route which fails?;;;","29/Jun/10 07:01;davsclaus;And can you attach the route which consumes as well?

And this route is not stopped in any way? The code will when its stopped, remove itself as consumer on the endpoint, and the reason why the producer then says there are no consumers.;;;","29/Jun/10 07:10;davsclaus;Okay I have reproduced a litte unit test;;;","29/Jun/10 09:20;davsclaus;Fixed the issue.

trunk: 958893.

A workaround for you would be to use multiple CamelContext's if possible to reduce the chance of hitting this issue in Camel 2.2.;;;","29/Jun/10 16:31;mwc_tonesoft;

Yes, we have pervasive use of dynamically constructed routing slip.




Yes, it seems so. As I mentioned before, if you restart the app and run the
same route immediately, the problem does NOT occur as before.



Yes, most of them works, including the ones that have problems most of the
time.



We have close to 140 endpoints.

I see that you created a unit test. May I have that unit test?  Would you
please also explain the bug in more detail?

Thank you

--Michael
;;;","29/Jun/10 16:37;davsclaus;I have put the rev number in the comment so you can find the commit log and the unit test etc.;;;","29/Jun/10 16:37;davsclaus;See source here
http://svn.apache.org/viewvc/camel/trunk/;;;","29/Jun/10 16:38;davsclaus;Ah and the Fisheye tab in JIRA also works, just click it to see the code changes.;;;","29/Jun/10 16:40;davsclaus;The issue was how Camel kept the list of active direct consumers on the endpoint, and not on the component.
Then if that endpoint was evicted from the LRUCache (due not used in long time) that link to the consumer would be lost.
And then you hit that {{No consumers ...}} warning.

By keeping it around all the time on the component we can always lookup the active consumers.

And the warning have been changed into thrown an exception so your app logic can catch it, eg rollback etc.;;;","29/Jun/10 16:44;mwc_tonesoft;Claus,

This is not a fix. How did a ""direct:"" route lose its consumer in the first
place?  It's like a Java program cannot call a method it has previously
called successfully.  The fix should be on that issue. Otherwise, it is
still a fatal run-time error.

BTW, I found the unit test in source control.

--Michael



;;;","29/Jun/10 16:48;mwc_tonesoft;Claus,

Revision 958852 you submitted only contains the throwing exception change. I don't see the ""By keeping it around all the time on the component we can always lookup the active consumers"" part in the fix.  Do you mean user code has to do that?

Thanks

--Michael;;;","29/Jun/10 17:02;davsclaus;You may not know Camel that well to question the fix.

The Java compiler will link method invocations at compile time, so its hardcoded in the byte code.

There is no Camel compiler, so Camel will link the routes at runtime. After all you define the endpoints using String (eg uris).
So it have to figure out this at runtime. And thus its *not hardcoded in the bytecode* and it can in fact loose the _link_.

And I would suggest that you take the time to look into the fix, apply the patches on your system and test it before ranting.;;;","29/Jun/10 17:04;davsclaus;Lowering the priority to critical as
- the app can run, it *unfortunately* have to be restarted to fix the issue on his end.
- and by not using a lot of dynamic endpoints you wont hit this issue.

A blocker is something that you can't work around at all.;;;","29/Jun/10 17:28;mwc_tonesoft;I have no disrespect towards you.

Your fix does not prevent the ""No consumer..."" condition from happening. Agree? You also said,

  ""By keeping it around all the time on the component we can always lookup the active consumers.""

How do I accomplish that without applying major changes like using multiple Camel context?

If there is a limit on the total number of endpoints, then it should be documented. If this is related to the LRCcache, then can I increase the cache size?

Thanks

--Michael;;;","29/Jun/10 21:07;mwc_tonesoft;Here how the route is built:

    from(""direct:UserCancelJobRequest"").process(new Processor() {
            public void process(Exchange exchange) throws Exception {
                ....
            }
        }).
        to(""direct:JobRunInstanceUpdate""). ...

We use dynamically constructed routing slip or template to send messages to the ""direct:UserCancelJobRequest"" endpoint.

There should always be consumers for this. Otherwise Camel would be to unpredictable to use. That is the real bug that needs to be fixed.

Thanks

--Michael;;;","30/Jun/10 04:03;davsclaus;Yes it fixes the issue.

See the source code
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/component/direct/
;;;","30/Jun/10 04:08;davsclaus;The LRUCache cannot be changed.
The endpoints should be safe to re-create again. And the cache keeps preventing having Camel hooking up memory when end users uses many different endpoints.
So it keep the last 1000 endpoints around in the cache.

Its just the direct component which had an issue, storing state on the endpoint. Which should have been stored on the component instead.
The seda component works this way btw.

;;;","30/Jun/10 06:14;davsclaus;The unit test is here
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/direct/SendingToAlotOfDifferentDirectEndpointTest.java

You can run it on 2.2 and see it should fail. And then on trunk to see it pass.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,
typo: ManagedBrowsableEndpoint qeue should be queue,CAMEL-2851,12486317,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,karlp,karlp,24/Jun/10 14:23,24/Apr/11 10:00,14/Jul/23 05:46,25/Jun/10 09:07,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"{code}
    @ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long qeueSize() {
        return endpoint.getExchanges().size();
    }
{code}

Should be 

{code}
    @ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long queueSize() {
        return endpoint.getExchanges().size();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76412,,,Sun Apr 24 10:00:46 UTC 2011,,,,,,,,,,,"0|i01r4f:",8163,,,,,,,,,,,,,,,,,,,,"25/Jun/10 09:07;davsclaus;trunk: 957856.

Thanks Karl for reporting.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-groovy - setting header causes exchange to lose message details,CAMEL-2843,12486123,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/10 11:25,24/Apr/11 09:57,14/Jul/23 05:46,23/Jun/10 11:33,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-groovy,,,,0,,,,,,,,,"See SMX4-417

This is the ticket to fix this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SMX4-417,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76413,,,Sun Apr 24 09:57:53 UTC 2011,,,,,,,,,,,"0|i01r2n:",8155,,,,,,,,,,,,,,,,,,,,"23/Jun/10 11:33;davsclaus;trunk: 957165.;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Unconnected sockets not implemented"" exception in camel-ftp when using ftps",CAMEL-2829,12486381,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rodehav,rodehav,18/Jun/10 12:41,24/Apr/11 10:00,14/Jul/23 05:46,22/Jun/10 04:36,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,,,,"When using ftps with a secure data channel, camel-ftp cannot recover from a lost connection. This is due to a bug/flaw in the SFTPClient class in commons-net. Once a secure data channel has been established, SFTPClient replaces the connection factory with one that does not provide support for creating ""unconnected sockets"".

While waiting for a fix from the commons-net team (should they chosse to create one), a work-around in camel-ftp is to always create a new instance of SFTPClient for every connect attempt.

Attached are patches containing an attempt to implement the mentioned work-around. The classes, FtpsOperations, FtpsEndpoint and FtpOperations are involved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Jun/10 12:43;rodehav;FtpOperations.diff;https://issues.apache.org/jira/secure/attachment/12463292/FtpOperations.diff","18/Jun/10 12:42;rodehav;FtpOperations.java;https://issues.apache.org/jira/secure/attachment/12463290/FtpOperations.java","18/Jun/10 12:43;rodehav;FtpsEndpoint.diff;https://issues.apache.org/jira/secure/attachment/12463293/FtpsEndpoint.diff","18/Jun/10 12:42;rodehav;FtpsEndpoint.java;https://issues.apache.org/jira/secure/attachment/12463289/FtpsEndpoint.java","18/Jun/10 12:43;rodehav;FtpsOperations.diff;https://issues.apache.org/jira/secure/attachment/12463291/FtpsOperations.diff","18/Jun/10 12:42;rodehav;FtpsOperations.java;https://issues.apache.org/jira/secure/attachment/12463288/FtpsOperations.java",,,6.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76414,,,Sun Apr 24 10:00:58 UTC 2011,,,,,,,Patch Available,,,,"0|i01qzj:",8141,,,,,,,,,,,,,,,,,,,,"18/Jun/10 12:43;rodehav;Diff files relative to revision 955969.;;;","21/Jun/10 09:13;davsclaus;trunk: 956507.

Bengt I have committed a fix for better re-connect logic in camel-ftp. Could you test it on your system?;;;","21/Jun/10 09:14;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Unconnected-sockets-not-implemented-exception-in-camel-ftp-when-using-ftps-tp509695p509695.html;;;","21/Jun/10 09:14;davsclaus;Link to created ticket at Apache Commons Net
https://issues.apache.org/jira/browse/NET-327;;;","21/Jun/10 19:38;rodehav;Claus, I've tested your new re-connect logic and it works fine. So far I've only tested the producer side. Will try to test the consumer side as well.;;;","21/Jun/10 20:07;rodehav;I've now tested the consumer side as well. Seems to work as well. If I poll via ftps and then stop the ftps server (Filezilla) then I can see the ""unconnected sockets"" in the log. When I start Filezilla again, camel manages to recover and re-connect.;;;","22/Jun/10 04:36;davsclaus;Yeah thanks a lot Bengt for reporting and helping with resolving this issue. Great work digging into the source and identify the root cause and testing it with live systems.

Community works!;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
Message content redelivered asynchronously by DLC is not re-readable,CAMEL-2826,12486438,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,rgavlin,rgavlin,17/Jun/10 08:56,17/Jan/11 16:50,14/Jul/23 05:46,18/Jun/10 05:06,1.6.3,,,,,,,,,,,,1.6.4,,,,camel-core,,,,0,,,,,,,,,"When a route contains an exception handler clause, a stream based message being redelivered asynchronously after an error is not readable. The cached streams must be reset before redelivery so that they can be read again by the target endpoint. See CAMEL-1834 for a similar problem.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jun/10 11:22;rgavlin;camel-2826-1.x.patch;https://issues.apache.org/jira/secure/attachment/12463286/camel-2826-1.x.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76415,,,Mon Jan 17 16:50:48 UTC 2011,,,,,,,Patch Available,,,,"0|i01qyv:",8138,,,,,,,,,,,,,,,,,,,,"17/Jun/10 08:58;rgavlin;I plan to submit a patch shortly for this issue.;;;","17/Jun/10 11:22;rgavlin;DeadLetterChannel patch for 1.x branch.;;;","18/Jun/10 04:59;davsclaus;Thanks for the patch Ron. Willem have committed it to 1.x so it will be part of the 1.6.4 release.;;;","18/Jun/10 05:06;davsclaus;1.x: 955817;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,
onException - continued should not log exhausted just as handled does neither,CAMEL-2825,12486443,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/10 07:16,24/Apr/11 10:01,14/Jul/23 05:46,17/Jun/10 07:42,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,Continued is in fact just like handled by will not break out but continue routing as if the exception didnt occur. So we should not log the exception by default.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76416,,,Sun Apr 24 10:01:37 UTC 2011,,,,,,,,,,,"0|i01qyn:",8137,,,,,,,,,,,,,,,,,,,,"17/Jun/10 07:42;davsclaus;trunk: 955499.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in org.apache.camel.util.DefaultTimeoutMap,CAMEL-2824,12486417,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,16/Jun/10 19:43,24/Apr/11 10:01,14/Jul/23 05:46,18/Jun/10 05:36,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"After running a camel route with a camel Aggregator for a while, I get a deadlock in  org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.

I have also tried to recreate this as failing testcase, but without any luck so far. ","Centos 4, Java HotSpot(TM) Server VM (11.0-b15 mixed mode)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jun/10 20:11;tarjei@scanmine.com;DeadlockTestCase.java;https://issues.apache.org/jira/secure/attachment/12463284/DeadlockTestCase.java","16/Jun/10 20:18;tarjei@scanmine.com;camel-base-context.xml;https://issues.apache.org/jira/secure/attachment/12463285/camel-base-context.xml","16/Jun/10 19:44;tarjei@scanmine.com;deadlock.log;https://issues.apache.org/jira/secure/attachment/12463283/deadlock.log",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76417,,,Sun Apr 24 10:01:07 UTC 2011,,,,,,,,,,,"0|i01qyf:",8136,,,,,,,,,,,,,,,,,,,,"16/Jun/10 19:44;tarjei@scanmine.com;The attached processdump shows the deadlock as well as the running threads. ;;;","16/Jun/10 20:11;tarjei@scanmine.com;I have managed to recreate the deadlock using the testcase above on a different computer, linux kernel and JVM. 

Found one Java-level deadlock:
=============================
""Camel Thread 0 - AggregateTimeoutChecker"":
  waiting for ownable synchronizer 0xb0ff7060, (a java.util.concurrent.locks.ReentrantLock$FairSync),
  which is held by ""main""
""main"":
  waiting for ownable synchronizer 0xb0ffef28, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
  which is held by ""Camel Thread 0 - AggregateTimeoutChecker""

Java stack information for the threads listed above:
===================================================
""Camel Thread 0 - AggregateTimeoutChecker"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ff7060> (a java.util.concurrent.locks.ReentrantLock$FairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$FairSync.lock(ReentrantLock.java:201)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:575)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:548)
	at org.apache.camel.util.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:166)
	at org.apache.camel.util.DefaultTimeoutMap.run(DefaultTimeoutMap.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
""main"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ffef28> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:78)
	at org.apache.camel.processor.aggregate.AggregateProcessor.isCompleted(AggregateProcessor.java:318)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:235)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)


	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:230)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:209)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:208)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:118)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:104)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:344)
	at org.apache.camel.core.DeadlockTestCase.sendMsg(DeadlockTestCase.java:82)
	at org.apache.camel.core.DeadlockTestCase.testDeadlock(DeadlockTestCase.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
	at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
	at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.run(SurefireBooter.java:241)
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:537)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

Found 1 deadlock.
;;;","16/Jun/10 20:18;tarjei@scanmine.com;This is the basic contextfile I use to run the deadlock testcase.;;;","18/Jun/10 05:36;davsclaus;trunk: 955841.

Tarjei thanks for the dump and reporting this issue.

I have committed a fix. Can you test it on your system with the fix?;;;","18/Jun/10 05:41;davsclaus;This dead lock only occurs when using timeout as completion condition and Camel is currently aggregating while a timeout condition occurs and there is an Exchange to be evicted.;;;","18/Jun/10 09:58;tarjei@scanmine.com;I can confirm that the deadlock test I created does not fail in multiple runs. The change has been implemented to the system so we'll see if it works. ;;;","22/Jun/10 07:39;davsclaus;trunk: 956800.

Tarjei I have improved the locking logic so there is only 1 lock in use which should prevent any dead locks. Feel free to give it a test in your system.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
camel-ftp - SFTP in fileExists should handle exception being thrown with id code stating no such file,CAMEL-2821,12486700,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Jun/10 04:14,24/Apr/11 10:01,14/Jul/23 05:46,16/Jun/10 04:17,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76418,,,Sun Apr 24 10:01:32 UTC 2011,,,,,,,,,,,"0|i01qxr:",8133,,,,,,,,,,,,,,,,,,,,"16/Jun/10 04:17;davsclaus;trunk: 955123;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
renames (to .processed) are sometimes done even if the download failed.,CAMEL-2817,12486703,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karlp,karlp,15/Jun/10 22:17,24/Apr/11 10:00,14/Jul/23 05:46,16/Jun/10 04:49,2.1.0,,,,,,,,,,,,2.4.0,,,,camel-ftp,,,,0,,,,,,,,,"I have an ftp consumer endpoint URI like: 
{{ftp://conaxTest@localhost:2121/autreq/ok?passiveMode=true&amp;password=conaxTest&move=.processed&delay=5000}}

From my ftp server logs, I can see files being downloaded, and then renamed...
{quote}
[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006331.emm>
[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006332.emm>
[org.apache.ftpserver.impl.DefaultFtpHandler:pool-2-thread-57] - <Session idle, closing>
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-56] - <File rename from ""/autreq/ok/vp006331.emm"" to ""/autreq/ok/.processed/vp006331.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006332.emm"" to ""/autreq/ok/.processed/vp006332.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006333.emm"" to ""/autreq/ok/.processed/vp006333.emm"">
{quote}

Note, that vp006333.emm is renamed, but was never downloaded.  There's no other mention of the file in my logs.  On the camel ftp consumer side, I see that camel attempted to download the file, but ended up with a null...

{quote}
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006331.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006331 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006332.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006332 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006333.emm]>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <Requested parse of an empty file!>
{quote}

The ""requested parse of an empty file"" is logged when {{ex.getIn().getBody(String.class)}} is empty or blank for the file object.

I had a look through the bugs fixed for 2.3.0, but I don't see anything that would be related to this at all.
","linux, apache ftp server.",karlp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76419,,,Sun Apr 24 10:00:55 UTC 2011,,,,,,,,,,,"0|i01qwv:",8129,,,,,,,,,,,,,,,,,,,,"16/Jun/10 04:36;davsclaus;Karl how often can you reproduce this issue?;;;","16/Jun/10 04:49;davsclaus;trunk: 955126.

I found an issue and have fixed this. You are welcome to test with 2.4-SNAPSHOT jars on your system.
The fix is in camel-core so you need to upgrade all Camel JARs to 2.4-SNAPSHOT;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-castor relies on specific, out of date version of Castor",CAMEL-2815,12486707,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davisond,davisond,15/Jun/10 10:32,24/Apr/11 10:01,14/Jul/23 05:46,15/Jun/10 11:42,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"camel-castor specifies a non-flexible version dependency on Castor 1.2.0.  Ideally should be changed to [1.2.0,2.0) to allow later versions of Castor to be deployed.  Castor 1.2 was released in Feb 2008, 1.3 was first released in Feb 2009",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76420,,,Sun Apr 24 10:01:05 UTC 2011,,,,,,,,,,,"0|i01qwf:",8127,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContexts seems to not correctly create their own instance of an imported routeContext.,CAMEL-2811,12486705,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ankelee,ankelee,14/Jun/10 15:28,24/Apr/11 10:01,14/Jul/23 05:46,15/Jun/10 11:50,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"Issue: http://old.nabble.com/Direct-route-not-shared-across-contexts--td28766143.html

When two CamelContexts import the same routeContext they should instantiate their own route based on the definition in the routeContext. But something is not working correctly. One example is having a directqueue of the same name in each route-instance. Camel crashed with the exception:

org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Endpoint direct://foo only allows 1 active consumer but you attempted to start a 2nd consumer.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1126)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) ...

This is demonstrated in the sample file attached to this issue.

Obviously this makes other things than the direct-endpoints malfunction. But this should be enough to show the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Jun/10 15:29;ankelee;RouteContextInstanceError.zip;https://issues.apache.org/jira/secure/attachment/12463282/RouteContextInstanceError.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76421,,,Sun Apr 24 10:01:44 UTC 2011,,,,,,,,,,,"0|i01qvj:",8123,,,,,,,,,,,,,,,,,,,,"14/Jun/10 15:29;ankelee;Sample case showing the error.;;;","15/Jun/10 11:48;njiang;This issue is caused by the FromDefinition and SendDefinition remember the endpoint that they resolved from the uri within the first camel context.
I just committed a patch to let these two Definition don't remember the endpoint, in this way we can make route definitions independent with the camel context.;;;","15/Jun/10 11:49;njiang;@Andreas
Please check out the latest camel trunk and verify the fix :);;;","15/Jun/10 14:21;ankelee;Hi Willem

I tried getting the camel-core jar but I get some XML exceptions. I suppose some dependencies has changed.;;;","16/Jun/10 08:17;njiang;Yes, you need to build the camel trunk from scratch. ;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz component dosen't support to start with a new camelContext after the scheduler is shutdown ,CAMEL-2810,12486454,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jun/10 08:01,24/Apr/11 10:00,14/Jul/23 05:46,16/Jun/10 08:18,,,,,,,,,,,,,2.4.0,,,,camel-quartz,,,,0,,,,,,,,,"You will get the below error if you want to create a new camel context after the scheduler is shutdown.
 
{code}
org.quartz.SchedulerException: The Scheduler has been shutdown.
	at org.quartz.core.QuartzScheduler.validateState(QuartzScheduler.java:637)
	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:688)
	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:265)
	at org.apache.camel.component.quartz.QuartzComponent.addJob(QuartzComponent.java:150)
	at org.apache.camel.component.quartz.QuartzEndpoint.addTrigger(QuartzEndpoint.java:77)
	at org.apache.camel.component.quartz.QuartzEndpoint.consumerStarted(QuartzEndpoint.java:190)
	at org.apache.camel.component.quartz.QuartzConsumer.doStart(QuartzConsumer.java:39)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:53)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1015)
	at org.apache.camel.component.quartz.QuartzTwoCamelContextTest.setUp(QuartzTwoCamelContextTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.junit.internal.runners.MethodRoadie.runBefores(MethodRoadie.java:122)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:86)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76422,,,Sun Apr 24 10:00:48 UTC 2011,,,,,,,,,,,"0|i01qvb:",8122,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiFactoryFinder should be able to go through the bundle entry to check the META-INF of the Factory,CAMEL-2809,12486641,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Jun/10 03:34,24/Apr/11 10:00,14/Jul/23 05:46,14/Jun/10 05:55,,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"The refactor of OSGi CAMEL-2693 let the OSGiFactoryFinder just find the factory information based on the camel application context.
As camel core doesn't exports the its META-INF/...  package, we'd better to revert the change, and let OSGiFactoryFinder be able to find the factory class as usual.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76423,,,Sun Apr 24 10:00:57 UTC 2011,,,,,,,,,,,"0|i01qv3:",8121,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty  can't config the temp directory for the multi part form support rightly,CAMEL-2806,12486512,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Jun/10 05:39,24/Apr/11 10:01,14/Jul/23 05:46,12/Jun/10 05:42,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jetty,,,,0,,,,,,,,,You will get a ClassCastException if you try to set the temp directory from the camel property.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76424,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,,,,,"0|i01quf:",8118,,,,,,,,,,,,,,,,,,,,"12/Jun/10 15:56;davsclaus;Willem could you add documentation on the Jetty wiki page how to set this temp directory with Jetty?;;;","13/Jun/10 07:45;njiang;@Claus,

I added a example with comments in the unit test, and it's already a part of the wiki page.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
It is impossible to put # sign in SQL statement in camel-sql,CAMEL-2805,12486729,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,10/Jun/10 14:19,16/Jun/10 08:45,14/Jul/23 05:46,16/Jun/10 08:45,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,{{SqlProducer}} implementation turns all {{#}} characters into {{?}} making it impossible to have {{#}} in the SQL statement.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76425,,,Wed Jun 16 08:45:24 UTC 2010,,,,,,,,,,,"0|i01qu7:",8117,,,,,,,,,,,,,,,,,,,,"16/Jun/10 08:45;romkal;Change introducing {{placeholder}} parameter commited in r955155 and documentation updated.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel OSGi language resolver can't work rightly,CAMEL-2804,12486735,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Jun/10 08:54,24/Apr/11 10:00,14/Jul/23 05:46,10/Jun/10 09:06,,,,,,,,,,,,,2.4.0,,,,osgi,,,,0,,,,,,,,,"The OSGiResolver doesn't work rightly in OSGi platform.
Here is the mail [thread|http://old.nabble.com/camel-ftp-problems-with-ftps-implicit-mode-ts28777705.html#a28839339] to show it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76426,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,,,,,"0|i01qtz:",8116,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf does not properly populate MessageContentList for PAYLOAD mode,CAMEL-2802,12486734,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/Jun/10 18:38,24/Apr/11 10:01,14/Jul/23 05:46,09/Jun/10 19:25,,,,,,,,,,,,,2.4.0,,,,camel-cxf,,,,0,,,,,,,,,"Currently, CxfEndpoint.CamelCxfClientImpl does not leave place holder for SOAP header in MessageContentList.  It could be a problem when CXF tries to retrieve the values in the MessageContentList.  Without the placeholder in place, SOAP body part can be mistakenly retrieved as SOAP header.  This patch should fix the problem.  Note: The fix depends on CXF-2837 (Add null pointer check in SoapOutInterceptor) which will be delivered in CXF 2.2.10.

{code}
Index: src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
===================================================================
--- src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java	(revision 43)
+++ src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java	(working copy)
@@ -513,8 +513,9 @@
                 MessageContentsList content = new MessageContentsList();
                 int i = 0;
                 
-                for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) {
-                    if (elements.size() > i) {
+                for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) {                 
+                    if (elements.size() > i && partInfo.getConcreteName().getLocalPart()
+                        .equals(elements.get(i).getLocalName())) {
                         content.put(partInfo, elements.get(i++));
                     }
                 }

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76427,,,Sun Apr 24 10:01:33 UTC 2011,,,,,,,,,,,"0|i01qtj:",8114,,,,,,,,,,,,,,,,,,,,"09/Jun/10 19:25;wtam;Committed revision 953122.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregation raises NullPointerException if last file in batch is not to be aggregated.,CAMEL-2798,12486739,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,ankelee,ankelee,08/Jun/10 08:33,24/Apr/11 10:00,14/Jul/23 05:46,09/Jun/10 11:09,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"When trying to aggregate files from a directory, it seems that camel-core raises a NullPointerException if the last file of the batch is a single file. That is it doesn't match the correlationExpression with any other files and therefore should just pass through. If such a file is the first file or in the middle of the files (alphabetically) this issue is not present.

See:
http://old.nabble.com/Aggregator-problem-with-files-(Camel-2.3)-td28778641.html#a28780522",Windows 7. NTFS.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Jun/10 08:41;ankelee;aggregator_npe.zip;https://issues.apache.org/jira/secure/attachment/12463280/aggregator_npe.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76428,,,Sun Apr 24 10:00:39 UTC 2011,,,,,,,,,,,"0|i01qsn:",8110,,,,,,,,,,,,,,,,,,,,"08/Jun/10 08:35;ankelee;AggregationStrategy + a route using it + data for it.

Run in Spring.;;;","09/Jun/10 10:47;njiang;Hi Andreas,

I can reproduce the issue with your test case, I will committed a quick fix for it today.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Docs for camel-spring-security not clear on where the Authentication object should be placed,CAMEL-2793,12486722,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pegli,pegli,04/Jun/10 22:23,24/Apr/11 10:01,14/Jul/23 05:46,07/Jun/10 02:56,2.3.0,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,"The docs for the new camel-spring-security component (http://camel.apache.org/spring-security.html) do not specify where the Authentication object should be placed in order to use a secured route.  Initially, I thought that the Authentication object should be a property on the exchange since the constant for authentication is on the Exchange class, but after looking at the code, I found that the component only checks the in message headers.  It would be nice to specify this in the docs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76429,,,Sun Apr 24 10:01:28 UTC 2011,,,,,,,,,,,"0|i01qrj:",8105,,,,,,,,,,,,,,,,,,,,"07/Jun/10 02:56;njiang;update the wiki doc for it.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Escaped characters in http4 URLs do not work,CAMEL-2778,12487011,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrutinizer,scrutinizer,02/Jun/10 00:42,24/Apr/11 10:01,14/Jul/23 05:46,02/Jun/10 08:36,2.3.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,There is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jun/10 00:43;scrutinizer;HttpProducer.patch;https://issues.apache.org/jira/secure/attachment/12463272/HttpProducer.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76430,,,Sun Apr 24 10:01:09 UTC 2011,,,,,,,Patch Available,,,,"0|i01qo7:",8090,,,,,,,,,,,,,,,,,,,,"02/Jun/10 01:01;njiang;Hi Roland,

Thanks for your patch. Can you also add a unit test for it?
;;;","02/Jun/10 01:25;scrutinizer;Can't compile the tests due to missing handler package (don't have time to
investigate why). Assuming the request sets the HTTP_PATH header (big
assumption on my part - I am not that familiar with this code), the code
below should work:

HttpPathTest
    @Test
    public void httpEscapedPath() throws Exception {
        Exchange exchange = template.request(""http4://"" + getHostName() +
"":"" + getPort() + ""/search%20more"", new Processor() {
            public void process(Exchange exchange) throws Exception {
            }
        });

        assertExchange(exchange);

 assert(""/search%20more"".equals(exchange.getIn().getHeader(Exchange.HTTP_PATH));
    }


If this code works, the same needs to be done for HTTP_QUERY.

Also, note that I have only fixed these two cases in http4. There may be
more cases in http4 and http.




;;;","02/Jun/10 08:33;njiang;@Roland
I just committed a patch into camel-http4 and also merged the changed into camel-http.
Please feel free to try the Camel 2.4-SNAPSHOT to verify the fix.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Cached stream file deletion causing file not found errors,CAMEL-2776,12486762,12486755,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrutinizer,scrutinizer,01/Jun/10 20:17,24/Apr/11 10:00,14/Jul/23 05:46,07/Jun/10 01:44,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"Cached streams larger than the threshold (64K by default) are almost impossible to work with since when a cached stream is closed, the cached file is deleted. This occurs as a side effect of converting the associated body to string which can occur frequently if tracing is turned on. The net result is file not found errors shown below. The only workaround is to increase the threshold to a large value to keep the body in memory.

It seems that if stream caching is to be useful, the cached files should be kept in a map and cleaned up and the end of the route, rather than upon close.


Work around (set threshold to 10M):
    camelContext.getProperties().put(CachedOutputStream.THRESHOLD, ""10000000"");


Error without work around:

16:09:49.278 [main] ERROR o.a.c.c.t.TimerConsumer - Error processing exchange. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: [org.apache.camel.RuntimeCamelException - java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)]
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:65)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:106)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:344)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:111)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:80)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:106)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:103)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:87)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:173)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:102)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
Caused by: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:63)
	... 36 common frames omitted
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76431,,,Sun Apr 24 10:00:41 UTC 2011,,,,,,,,,,,"0|i01qnr:",8088,,,,,,,,,,,,,,,,,,,,"02/Jun/10 04:05;davsclaus;The stream cache should be changed to use HawtDB or the likes for a better cache store and leverage Exchange OnCompletion to cleanup the cache. This will ensure the ""file"" is not deleted pre mature.

;;;","02/Jun/10 08:52;njiang;We can't just delete the cached file on Exchange OnCompletion, as we may still need to access the CachedInputStream after that. 
You can see it from https://issues.apache.org/activemq/browse/CAMEL-2636.
I think we can mark the CachedInputStream can delete the file when the exchange onCompletion is called, and then the CachedInputStream is closed we can delete the file.
We don't delete the file before the onCompletion even the CachedInputStream is closed.

When we change to using HawtDB, we can do the same thing.;;;","02/Jun/10 09:32;davsclaus;@Willem

Yeah that is right. I kinda thought of that too this morning.

So if the OnCompletion will _enrich_ the stream with a DeleteFileOnCloseStream then the Camel component can use the stream to send back the reply and when it closes it, the file will be deleted as well.

The only concern would be what if that stream is *not* closed or used after the on completion? Then the file is not deleted and kept on file system to take up space.

;;;","04/Jun/10 09:24;njiang;@Claus,
I think user has the responsibility to close the stream that he don't want to use.
Maybe we can address this issue by using HawtDB.
;;;","07/Jun/10 01:44;njiang;Committed a patch in revision 951337 and created a JIRA CAMEL-2794 for using the HawtDB to store the cached file.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
Bindy - No @Section causes a null key being generated which causes a NumberFormatException,CAMEL-2773,12486511,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,davsclaus,davsclaus,01/Jun/10 06:33,24/Apr/11 10:00,14/Jul/23 05:46,11/Jun/10 15:02,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-bindy,,,,0,,,,,,,,,"See nabble
http://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76432,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,,,,,"0|i01qn3:",8085,,,,,,,,,,,,,,,,,,,,"11/Jun/10 15:00;cmoulliard;I have committed the fix;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty can't deal with multiform data rightly,CAMEL-2772,12485929,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Jun/10 00:55,24/Apr/11 09:57,14/Jul/23 05:46,02/Jun/10 10:10,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-jetty,,,,0,,,,,,,,,"You can't get the inputStream from the attachment when camel-jetty handle the request of MultiPartForm.
Here is the mail thread[1] which discusses about it.

[1] http://old.nabble.com/Unsupported-data-type-exception-with-Jetty-component-tp28730373p28731758.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76433,,,Sun Apr 24 09:57:50 UTC 2011,,,,,,,,,,,"0|i01qmv:",8084,,,,,,,,,,,,,,,,,,,,"14/Jul/10 17:48;pegli;In case anyone finds this bug and need direction, here's the workaround that I use when processing attachments.  Note that I set the Exchange.FILE_NAME header to the attachment name prior to calling this code, as dh.getName() always seems to return null in Camel 2.3.0:

{code}
DataHandler dh  = exchange.getIn().getAttachment(""myfile.txt"");
if (dh.getContent() instanceof DataSource) {
    InputStream in = ((DataSource) dh.getContent()).getInputStream();
    String name = dh.getName() != null ? dh.getName() : exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);
    String contentType = dh.getContentType();
}
{code};;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailBinding can't handle the subject header with NO_ASCII code rightly.,CAMEL-2763,12487243,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/May/10 03:40,17/Jan/11 16:50,14/Jul/23 05:46,28/May/10 08:16,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,2.3.0,1.6.3,2.4.0,,,camel-mail,,,,0,,,,,,,,,"Here is the [mail thread|http://old.nabble.com/Camel-Mail%3A-Subject-cannot-handle-unicode-chars--tp28700124p28700124.html] which discusses about it.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76434,,,Mon Jan 17 16:50:47 UTC 2011,,,,,,,,,,,"0|i01qkv:",8075,,,,,,,,,,,,,,,,,,,,"28/May/10 08:16;njiang;Committed the patch in camel trunk and camel-1.x branch.;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default Tracer configuration eats Mina ByteBuffer responses,CAMEL-2762,12487945,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cott@internetstaff.com,cott@internetstaff.com,27/May/10 16:07,21/Mar/19 20:10,14/Jul/23 05:46,28/May/10 07:39,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-mina,,,,0,,,,,,,,,"It appears that the only way to get UDP responses out of Camel Mina without binary ( > 7 bit) getting garbled by internal conversions is to reply with a Mina ByteBuffer.

Unfortunately, if you have Trace on, the DefaultTraceFormatter ends up calling MinaConverter.toByteArray, which ""consumes"" the ByteBuffer, setting it to empty, which means no reply goes out. :)
{code}
27/05/10 07:02:41:DEBUG:org.apache.camel.component.mina.MinaConsumer:Writing body: DirectBuffer[pos=11 lim=11 cap=16: empty]
{code}
I'm not sure how to fix this one cleanly, so I don't have a patch.  I might also be doing something wrong, if so I'm all ears. :)

Here's a trace:
{code}
	  at org.apache.camel.component.mina.MinaConverter.toByteArray(MinaConverter.java:44)
	  at org.apache.camel.component.mina.MinaConverter.toString(MinaConverter.java:49)
	  at sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source:-1)
	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	  at java.lang.reflect.Method.invoke(Method.java:597)
	  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:736)
	  at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:50)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:159)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:85)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:74)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:48)
	  at org.apache.camel.util.MessageHelper.extractBodyAsString(MessageHelper.java:63)
	  at org.apache.camel.processor.interceptor.DefaultTraceFormatter.format(DefaultTraceFormatter.java:75)
	  at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:231)
{code}

Thanks!
",,shuston,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76435,,,Thu Mar 21 20:10:17 UTC 2019,,,,,,,,,,,"0|i01qkn:",8074,,,,,,,,,,,,,,,,,,,,"28/May/10 07:39;davsclaus;trunk: 949124.

Cott can you test with latest code on your system?;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;","21/Mar/19 20:10;shuston;I notice that this problem exists in Camel 2.19.1.

I can try it on 2.22 sometime soon, but if you already know it didn't change between 2.19 and 2.22 that wold be helpful.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
@Consume should run in an unit of work,CAMEL-2760,12485785,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/May/10 13:19,24/Apr/11 10:01,14/Jul/23 05:46,27/May/10 13:31,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76436,,,Sun Apr 24 10:01:35 UTC 2011,,,,,,,,,,,"0|i01qk7:",8072,,,,,,,,,,,,,,,,,,,,"27/May/10 13:31;davsclaus;trunk: 948830.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnCompletion - Should use pipes and filters to ensure IN is OUT from last step,CAMEL-2758,12487245,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/May/10 05:23,24/Apr/11 10:00,14/Jul/23 05:46,27/May/10 06:09,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"OnCompletion will route the Exchange directly as is which means if you have set an OUT the first step in the onCompletion route may not use this OUT but the IN instead.

And also add option {{useOriginalBody}} so you can do work based on the original input instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76437,,,Sun Apr 24 10:00:59 UTC 2011,,,,,,,,,,,"0|i01qjr:",8070,,,,,,,,,,,,,,,,,,,,"27/May/10 06:09;davsclaus;trunk: 948683.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM endpoints with same name do not communicate if args don't match,CAMEL-2755,12487241,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ndjensen,ndjensen,26/May/10 21:59,24/Apr/11 10:01,14/Jul/23 05:46,27/May/10 06:26,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"If you send to a VM endpoint from one route and consume from the same endpoint in another route, but include an argument on only one of the routes, Camel sees them as two different routes.  Therefore, the messages are never consumed.  For example:

<camelContext id=""sendNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">

      <route id=""sendToNotify"">
            <from uri=""..."" />
            ....
            *<to uri=""vm:myNotify"" />*
      </route>
</camelContext>

<camelContext id=""receiveNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">

      <route id=""receiveNotify"">
            *<from uri=""vm:myNotify?size=2500"" />*
            ....
            <to uri=""..."" />
      </route>
</camelContext>


The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500, so the messages build up and are never received.",JDK 1.6 using Spring 2.5.6 to start camel contexts,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76438,,,Sun Apr 24 10:01:26 UTC 2011,,,,,,,,,,,"0|i01qj3:",8067,,,,,,,,,,,,,,,,,,,,"27/May/10 06:26;davsclaus;trunk: 948686.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer Component is not Restartable,CAMEL-2751,12487258,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,scranton,scranton,25/May/10 18:58,24/Apr/11 10:00,14/Jul/23 05:46,26/May/10 02:21,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"When the TimerComponent is stopped, it cancels all of the Timer instances it has created, which is good. However, TimerEndpoint keeps a local reference to the Timer instance, so if the TimerComponent is restarted, the TimerEndpoint will throw an exception as its timer is no longer usable as it has been canceled.

This patch provides a unit test, TimerRestartTest, and an update to TimerComponent that fixes this issue. The TimerComponent fix is to keep a list of all TimerEndpoints that have a reference to a Timer instance created by the TimerComponent. When TimerComponent.doStop is called, those TimerEndpoint references to the now canceled Timer instances are cleared.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/May/10 18:59;scranton;TimerComponentRestart.patch;https://issues.apache.org/jira/secure/attachment/12463266/TimerComponentRestart.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76439,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,Patch Available,,,,"0|i01qi7:",8063,,,,,,,,,,,,,,,,,,,,"26/May/10 02:21;hadrian;Scott, thanks for the patch. I modified it a bit. One thing was to get rid of the tabs to make checkstyle happy. Another change was that instead of using and navigating the list in the TimerComponent, I thought it's easier to just have the TimerEndpoint implement Service and then reset the timer to null on stop().

Good catch. Thanks.;;;","26/May/10 02:21;hadrian;Patch applied with thanks to Scott.
r948293;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.bean.BeanInfo not working properly with mocked Interfaces,CAMEL-2750,12487250,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgsoft,dgsoft,25/May/10 14:26,24/Apr/11 10:01,14/Jul/23 05:46,26/May/10 09:16,2.2.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"The BeanInfo-Class shows the same behaviour as ClassUtils-Class from Spring 3.0.x (see Spring Issue 7066, https://jira.springsource.org/browse/SPR-7066).
When working with mock objects created by mockito using an interface the getSuperclass()-Method returns java.lang.Object and the method to called on the mock can't be found. 

While looking around for a solution I found the path applied in Spring (see https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java?content-type=text/vnd.viewcvs-markup&r1=3227&r2=3228).

In method 
public static Class<?> getUserClass(Class<?> clazz) 

the code

return (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR) ?  clazz.getSuperclass() : clazz);

is replaced by 

if (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
    Class<?> superClass = clazz.getSuperclass();
    if (superClass != null && !Object.class.equals(superClass)) {
         return superClass;
    }
}
return clazz;

While waiting for a fix in BeanInfo class a workaround is to mock the concrete class not the interface, but this makes the test code more complicated if several classes implement the same interface.

A Wor","Windows XP, JDK 1.6.0.17, Eclipse Ganymed, Maven 2.2.1, ActiveMQ 5.3.1, Apache Camel 2.2 ",dgsoft,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76440,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,,,,,"0|i01qhz:",8062,,,,,,,,,,,,,,,,,,,,"26/May/10 09:16;davsclaus;trunk: 948371.

Thanks for reporting and providing the solution.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf feature doesn't include all cxf needs bundles,CAMEL-2748,12487274,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/May/10 07:06,24/Apr/11 10:01,14/Jul/23 05:46,24/May/10 07:12,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"Current camel-cxf features doesn't include wss4j, saaj-imple, opensaml, fastinfoset bundle.
We need to add these bundle into camel-cxf features.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76442,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,,,,,"0|i01qhj:",8060,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExpressionDefinition toString  print the expression and expression value at the same time,CAMEL-2745,12487278,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,21/May/10 06:59,24/Apr/11 10:01,14/Jul/23 05:46,21/May/10 07:26,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"When I running the test which need to call the ExpressionDefinition toString method, I found the expression is
{code}
    simple{bodyAs(java.lang.String.class)bodyAs[java.lang.String]}
{code}
We need to avoid adding the expression when the ExpressionDefinition has the expression value.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76443,,,Sun Apr 24 10:01:15 UTC 2011,,,,,,,,,,,"0|i01qgv:",8057,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AggregationStrategy returning null causes NPE,CAMEL-2744,12487257,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gim,gim,20/May/10 16:37,24/Apr/11 10:00,14/Jul/23 05:46,21/May/10 05:58,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"When the AggregationStrategy's aggregate method returns null, the AggregateProcessor throws an NPE. While this is a result of user error, I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:
{noformat}
ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.NullPointerException
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	... 9 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76444,,,Sun Apr 24 10:00:36 UTC 2011,,,,,,,,,,,"0|i01qgn:",8056,,,,,,,,,,,,,,,,,,,,"21/May/10 05:58;davsclaus;trunk: 946886;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer should not sending the Http headers with low case,CAMEL-2743,12487605,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/May/10 13:46,24/Apr/11 09:57,14/Jul/23 05:46,22/Sep/10 08:33,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.5.0,,,,,,,,0,,,,,,,,,"Here is the mail thread which discusses about it.
http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html",,vadimos,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76445,,,Sun Apr 24 09:57:10 UTC 2011,,,,,,,,,,,"0|i01qgf:",8055,Regression,,,,,,,,,,,,,,,,,,,"20/May/10 14:22;njiang;submit a patch with a test into camel trunk.;;;","21/Sep/10 13:29;pino_otto;I am using Camel 2.4.0 and still having this problem.

The HTTP headers are all in lower case.

;;;","21/Sep/10 13:30;pino_otto;This bug is present in Camel 2.4.0;;;","21/Sep/10 13:48;njiang;Hi giovanni

How did you get the header from the message?
Did you have an chance to check out the unit test[1] of the patch?

[1]http://svn.apache.org/viewvc/camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpHeaderTest.java?view=markup&pathrev=946640

Willem;;;","21/Sep/10 14:25;davsclaus;I can reproduce it. Will work on it.;;;","21/Sep/10 14:48;davsclaus;trunk: 999444.

Its now fixed. And there is now a better unit test to catch and ensure headers returned is in the expected case.;;;","21/Sep/10 17:06;pino_otto;That fix did not solve my problem.

Is it possible that a similar issue is present also on org.apache.camel.component.http.DefaultHttpBinding

 protected void popluateRequestParameters(HttpServletRequest request, HttpMessage message) {
        //we populate the http request parameters without checking the request method
-->  Map<String, Object> headers = message.getHeaders();  <<<------- here
        Enumeration names = request.getParameterNames();
        while (names.hasMoreElements()) {
            String name = (String)names.nextElement();
            Object value = request.getParameter(name);
            if (headerFilterStrategy != null
                && !headerFilterStrategy.applyFilterToExternalHeaders(name, value, message.getExchange())) {
                headers.put(name, value);
            }
        }

Also the method name could be refactored to ""populate..."" instead of ""popluate.....""

;;;","21/Sep/10 18:02;davsclaus;Please try again and make sure you use the source code.

The code above is when Camel receives a HttpRequest.
It copies the headers from HttpRequest to Camel Message.

The bug is in the opposite. When Camel sends back the response by populating the HttpResponse.

Can you create a small zip file with a Camel project that demonstrates the problem you have.
And maybe use a network sniffer tool to check what data is send in the packages.

There are http proxy tools which can sniff the data.;;;","22/Sep/10 08:32;pino_otto;Hi Claus, I apologize.

It was my mistake, because yesterday I applied the new source code which fixes the bug to the wrong class in the source code of Camel 2.4.

Today I realized the mistake and applied the bug fix to the correct class (DefaultHttpBinding) and it WORKS!

Thanks again and sorry for making confusion.

;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,
camel-jms - Sending to WebSphereMQ must use specific setBooleanProperty methods to set JMS properties,CAMEL-2742,12487276,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/May/10 12:52,24/Apr/11 10:01,14/Jul/23 05:46,21/May/10 14:19,2.2.0,2.3.0,,,,,,,,,,,2.3.0,,,,camel-jms,,,,0,,,,,,,,,"This code in JMSBinding
{code}
                // must encode to safe JMS header name before setting property on jmsMessage
                String key = jmsKeyFormatStrategy.encodeKey(headerName);
                jmsMessage.setObjectProperty(key, value);
{code}

Should detect the value type and use the jmsMessage.setBooleanProperty() and so on. Otherwise IBM thrown an exception.

See nabble
http://old.nabble.com/jmsbinding-problem-ts28620489.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76446,,,Sun Apr 24 10:01:42 UTC 2011,,,,,,,,,,,"0|i01qg7:",8054,,,,,,,,,,,,,,,,,,,,"21/May/10 14:19;davsclaus;trunk: 947018.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
GZIP/ZIP marshal/unmarshal leaves input file open,CAMEL-2741,12487281,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,scrutinizer,scrutinizer,20/May/10 02:31,24/Apr/11 10:01,14/Jul/23 05:46,21/May/10 06:16,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Gzip/zip marshal/unmarshal leaves input files open, relying on the garbage collector to close the file. The cause sporadic file deletion exceptions in the following route:
          from(""file:incoming?delete=true"")
            .marshal().gzip()
            .to(""file:outgoing?fileName=${file:name}.gz"");

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/May/10 02:32;scrutinizer;zipfix.patch;https://issues.apache.org/jira/secure/attachment/12463260/zipfix.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76447,,,Sun Apr 24 10:01:45 UTC 2011,,,,,,,Patch Available,,,,"0|i01qfz:",8053,,,,,,,,,,,,,,,,,,,,"21/May/10 05:30;davsclaus;There is a helper method to close the streams. I will polish the code a bit and move the close method to IOHelper where it belongs.;;;","21/May/10 06:16;davsclaus;trunk: 946891.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Using static queue as a reply queue in InOut pattern causes memory leak,CAMEL-2740,12484698,,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,qingyi,qingyi,19/May/10 18:22,09/Nov/11 17:29,14/Jul/23 05:46,09/Nov/11 14:36,2.2.0,,,,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-jms,,,,0,,,,,,,,,"I am running JBoss, ActiveMQ and Camel for my application.   In the InOut pattern,  I am using a predefined static queue as a reply queue.   After running for a while,  the memory usage of JBoss keeps growing and growing until it hits outOfMemory error and app server is totally hung.   I monitor the thread in jconsole,  I can see the jms connection/session keeps growing and growing.   

But once I switch to use temp queue for InOut pattern,  this problem goes away.

",Originally reported on Windows 2003 server and recently confirmed on OSX in a stand alone unit test.,davaleri,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Nov/11 22:36;davaleri;ASF.LICENSE.NOT.GRANTED--CAMEL-2740 Memory Usage.jpg;https://issues.apache.org/jira/secure/attachment/12502976/ASF.LICENSE.NOT.GRANTED--CAMEL-2740+Memory+Usage.jpg","08/Nov/11 22:55;davaleri;CAMEL-2740.tar.gz;https://issues.apache.org/jira/secure/attachment/12502981/CAMEL-2740.tar.gz",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76448,,,Wed Nov 09 17:29:27 UTC 2011,,,,,,,,,,,"0|i01qfr:",8052,,,,,,,,,,,,,,,,,,,,"21/May/10 14:40;davsclaus;Could you post more details, eg what Camel route do you use?

And how have you setup ActiveMQ?;;;","21/May/10 14:40;davsclaus;And what versions of the various software are you using? eg JBoss, AMQ, JDK etc.;;;","21/May/10 20:30;qingyi;Here is the version of software.

JBoss 4.2.2
AMQ 5.3.1
JDK  1.5.0_22
Camel 2.2.0;;;","21/May/10 20:59;qingyi;Here are some more details.

AMQ:  I have two activemq and there is one network connector between them.  See config below.

<networkConnector name=""server1"" uri=""static://(https://localhost:61617?proxyHost=server1&proxyPort=80)"" duplex=""true"">
     <!-- limit store and forward to specific queues -->
     <dynamicallyIncludedDestinations>
         <queue physicalName=""TO_SERVER1.>""/>
         <queue physicalName=""TO_SCA.>""/>
     </dynamicallyIncludedDestinations>
     <staticallyIncludedDestinations>
		<queue physicalName=""TO_SERVER1.SYNC_RESP""/>
		<queue physicalName=""TO_SCA.SSO.SYNC_REQ""/>
     </staticallyIncludedDestinations>
  </networkConnector>

Camel Route on consumer side:
		from(""jms:queue:TO_SCA.SSO.SYNC_REQ?concurrentConsumers=25"")
			.choice()
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE1""))
					.beanRef(""service1"")
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE2""))
					.beanRef(""service2"")
				.otherwise()
					.beanRef(""unknownService"")
			.end();

On producer side:

	        HashMap<String, Object> reqHeaders = new HashMap<String, Object>();
	        reqHeaders.put(""JMSType"", ""TYPE1"");
			
			
		 // Options
	        StringBuffer options = new StringBuffer();
	        options.append(""?"");
	        options.append(""replyTo"");
	        options.append(""="");
	        options.append(""TO_EC.SERVER1.SYNC_RESP"");

	        
	        // Send Message
	        String outMsg = (String)camelTemplate.sendBodyAndHeaders(""jms:queue:TO_SCA.SSO.SYNC_REQ""+options.toString(), 
	        														 ExchangePattern.InOut, 
	        														 inMsg, 
	        														 reqHeaders);			


;;;","27/May/10 13:55;davsclaus;Can you crete a small project and attach a zip file with it? Then its easier to use to look into this.;;;","25/Jul/10 12:22;davsclaus;See this FAQ about the correct way of using templates
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html

And also try Camel 2.5 because the request-reply logic over JMS have been refactored a bit to cater for async routing engine.;;;","12/Aug/10 08:21;davsclaus;User doesn't respond;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;","08/Nov/11 23:10;davaleri;I have attached a screen shot showing memory usage for the attached test case.  The attached test case uses a simple JUnit test to throw a bunch of small messages at JMS with the InOut MEP.  The test case uses the asynch capabilities of the ProducerTemplate to easily ramp up the traffic.  It doesn't wait for the generated Futures so it isn't really usable for correctness testing, it is just intended to reproduce the issue.  Also note that killing the build will likely not terminate the forked JVM.

It takes less than 8K messages to consume the available memory.  The test crawls along for a bit after this point and eventually runs out of memory and crashes somewhere in the low 8K message range.  It only takes a couple minutes to reach this point.  Based on real world observation, it would appear that the issue is not driven by message frequency but by message numbers.  That is, it can take a minute or a week to encounter enough messages, but eventually you run out of memory.

The heap is occupied mostly by character arrays that appear to contain message IDs / correlation IDs.  I did not traverse the object graph in the heap, but it would appear that there is some sort of issue with JMS filters or connections not getting cleaned up.  I did not attach the heap dump as it is trivial to generate from the attached test code.

Removing the replyTo URI parameter and using a temp destination for replies resolves the issue.  Memory usage stays in an acceptable range and message throughput is relatively constant, although does appear to slow slightly over time for a currently unknown reason.;;;","08/Nov/11 23:29;davaleri;Also, the attached test uses 2.9-RC1.  The steady slowdown with a temporary reply destination was due to Eclipse's console window slowing down the logging activities when running the test in Eclipse.  Once Eclipse was out of the mix, using a temporary reply destination performed flawlessly in a 30 minute test run.;;;","09/Nov/11 09:45;davsclaus;David please create a new ticket instead of opening old tickets. We prefer this way. You may link the new ticket to the old ticket.;;;","09/Nov/11 11:42;davsclaus;Okay I can reproduce the issue (at about 8000 msgs) and have a patch which improves this, but I hit a OOME at 100000 msg now.
;;;","09/Nov/11 12:32;davsclaus;Okay I was using the default maven surefire memory settings which of course is low. 

So I increased the memory setting and have the test be able to run all 1000000 messages

{code}

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Xmx1024m -XX:MaxPermSize=512m</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>
{code};;;","09/Nov/11 14:36;davsclaus;Thanks for the sample project to reproduce the issue.;;;","09/Nov/11 17:29;davsclaus;Well the sample project from David itself also causes high memory occupation as it creates 1.000.000 tasks on the executor service pool, which is stored in memory. For example using a sample with for example 50.000 tasks does not take up so much memory.
;;;",,,,,,,,,,,,,,,
Problem with Spring NamespaceHandler class org.apache.camel.spring.handler.CamelNamespaceHandler ,CAMEL-2739,12487283,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tejash_p_shah,tejash_p_shah,19/May/10 13:05,24/Apr/11 10:01,14/Jul/23 05:46,21/May/10 07:13,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,,,,"I contributed spring Namespace Handler from my custom eclipse plug-in as follows:
<extension point=""org.springframework.ide.eclipse.beans.core.namespaces"">
		<namespace name=""Camel Spring Namespace Handler extension""
			namespaceHandler=""org.apache.camel.spring.handler.CamelNamespaceHandler""
			uri=""http://camel.apache.org/schema/spring"">
		</namespace>
</extension>

After this, I create spring.xml file using some camel elements and I validated using spring validator . Now whenever I edit the spring.xml file and save it I am getting following error message in error log.

org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:/workspace locations/New Folder (10)/config/spring.xml]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$2.loadBeanDefinitions(BeansConfig.java:326)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:358)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:1)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
at java.lang.Thread.run(Thread.java:595)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.ide.eclipse.beans.core.DefaultBeanDefinitionRegistry.removeBeanDefinition(DefaultBeanDefinitionRegistry.java:189)
at org.apache.camel.spring.handler.CamelNamespaceHandler.autoRegisterBeanDefinition(CamelNamespaceHandler.java:411)
at org.apache.camel.spring.handler.CamelNamespaceHandler.registerTemplates(CamelNamespaceHandler.java:364)
at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:272)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.apache.camel.component.cxf.transport.spring.AbstractCamelContextBeanDefinitionParser.doParse(AbstractCamelContextBeanDefinitionParser.java:55)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)



There seems to problem with NamespaceHandler class. 
","Windows, JDK 1.5
Camel with Spring and CXF",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76449,,,Sun Apr 24 10:01:45 UTC 2011,,,,,,,,,,,"0|i01qfj:",8051,,,,,,,,,,,,,,,,,,,,"19/May/10 13:35;njiang;I just check the code of CamelNamespaceHandler, current template can be defined out side of camelContext.
Can you try out the camel 2.2.0 or latest Camel 2.3-SNAPSHOT for it ?;;;","20/May/10 07:35;tejash_p_shah;Thanks for quick response on this issue.

Let me give more clarification on this issue. I created spring.xml file with few spring <bean> elements and one <camel:camelContext> element with multiple <camel:route> definitions within it.
I did not define any bean with name 'template' in my spring.xml configuration file but still I am getting exception mentioned in the defect description. 

I also tested this with camel-2.2.0 still getting same error.

You mentioned about current template in your comment, which I had not created. Do I need to create it ? 

Additionally, I am able to deploy this spring.xml configuration successfully without any errors, I just get errors within eclipse IDE when I validate spring.xml file with spring validator.  ;;;","21/May/10 06:02;davsclaus;This is a bug in Spring Tools and not in Camel.
You need to report this at Spring.

Looks like the Spring tools throws an exception on purpose staring {{Not Implemented}}.
{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
{code}

Can uses the method {{isBeanNameInUse}} to determine if there is a bean registered in the Spring XML file with the id {{template}}.;;;","21/May/10 06:03;davsclaus;If you report this at Spring you are welcome to post a comment with a link to the reported issue;;;","21/May/10 06:10;davsclaus;Let me add a workaround in Camel to cater for that thrown exception. Then you should be able to continue editing Camel with the Spring tooling;;;","21/May/10 06:13;davsclaus;Will add a workaround in Camel;;;","21/May/10 07:13;davsclaus;trunk: 946915.

Tejash can you try with latest source code or wait for Camel 2.3 to be released and try it.;;;","21/May/10 07:51;tejash_p_shah;Thanks for adding workaround.
 I will try out with latest source build and once 2.3 gets release I will use that;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
SMPP component should set the final status header for delivery notifications,CAMEL-2732,12487294,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jacovt,jacovt,18/May/10 15:12,24/Apr/11 10:01,14/Jul/23 05:46,19/May/10 01:02,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-smpp,,,,0,,,,,,,,,"The camel-smpp comonent should set the final status that is provided by the delivery receipt from the SMSC.

Currently the status header is not set, but can easily be added by making a call to smscDeliveryReceipt.getFinalStatus() and setting the header CamelSmppStatus on the camel message (as documented on the site [http://camel.apache.org/smpp.html].

Patch provided. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/May/10 15:13;jacovt;camel-smpp-delivery-notification-status-patch.diff;https://issues.apache.org/jira/secure/attachment/12463256/camel-smpp-delivery-notification-status-patch.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76450,,,Sun Apr 24 10:01:10 UTC 2011,,,,,,,Patch Available,,,,"0|i01qdz:",8044,,,,,,,,,,,,,,,,,,,,"18/May/10 15:13;jacovt;Patch for adding header for final status on delivery notifications.;;;","19/May/10 01:02;njiang;Applied the patch with thanks to Jacov.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
String to Source type converter is not found in TypeConverterRegistry,CAMEL-2725,12487309,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/May/10 08:05,24/Apr/11 10:00,14/Jul/23 05:46,15/May/10 08:58,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"This causes a problem when you need to convert a {{String}} payload to a {{javax.xml.transformation.Source}} such as when using the XSTL component.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76451,,,Sun Apr 24 10:00:51 UTC 2011,,,,,,,,,,,"0|i01qcf:",8037,,,,,,,,,,,,,,,,,,,,"15/May/10 08:58;davsclaus;trunk: 944597.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedRoute should be unregister when the RouteDefinition is removed,CAMEL-2722,12487313,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/May/10 02:23,24/Apr/11 10:01,14/Jul/23 05:46,15/May/10 00:22,2.1.0,2.2.0,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Here is the mailing thread which discusses about it.
http://old.nabble.com/Dynamically-removing-routes-tp28548051p28548051.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76452,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,,,,,"0|i01qbr:",8034,,,,,,,,,,,,,,,,,,,,"15/May/10 00:21;njiang;Now the ManagedRoute will be unregistered when CamelContext shutdown the route.
And we don't unregister the ManagedRoute when route is stopped to let ManagedRoute start itself from JMX console.;;;","15/May/10 08:57;davsclaus;Willem, good idea to use the shutdown to unregister the mbeans.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlConverter omits XML declaration,CAMEL-2720,12487314,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dragisak,dragisak,13/May/10 19:23,24/Apr/11 10:01,14/Jul/23 05:46,14/May/10 07:00,,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"org.apache.camel.converter.jaxp.XmlConverter is hardcoded to omit XML declaration when converting DOM document to string. Character encoding information is lost that way.

Ideally there should be a way to override default output properties. 

See:
http://fisheye6.atlassian.com/browse/camel/trunk/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java?r=HEAD",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76453,,,Sun Apr 24 10:01:30 UTC 2011,,,,,,,,,,,"0|i01qbb:",8032,,,,,,,,,,,,,,,,,,,,"14/May/10 02:18;njiang;I can let XmlConverter check the camelContext property before it decide to omit XML declaration by default :);;;","14/May/10 06:45;njiang;Now you can override the default output properties by setting the CamelContext properties like this

Java DSL
{code}
 camelContext.getProperties().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.ENCODING, ""US_ASCII"");
 camelContext.getProperties().put(XmlConverter.OUTPUT_PROPERTIES_PREFIX + OutputKeys.STANDALONE, ""yes"");
{code}

or  with Spring configuration

{code}
  <camelContext>
       <properties>
           <property key=""org.apache.camel.xmlconverter.output.encoding"" value=""US_ASCII""/>
           <property key=""org.apache.camel.xmlconverter.output.standalone"" value=""yes""/>
      </properties>
     ....
   </camelContext>
{code};;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Incomplete cleanup of jmx mbeans after context stop,CAMEL-2716,12486121,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,12/May/10 19:14,24/Apr/11 09:58,14/Jul/23 05:46,08/Jul/10 15:22,2.2.0,,,,,,,,,,,,2.4.0,,,,,,,,0,,,,,,,,,"There is a fair amount of cleanup on context stop, but it is incomplete. Most of it has to do with JMX and if one creates and starts a new CamelContext she may end up with managed objects pointing nowhere or have duplicates or other minor side-effects. One of the nasty side effects is that we are pretty much forced to use ""<forkMode>pertest</forkMode>"" in our surefire plugin configuration, ensuring a clean slate for every test.

For long running apps in which you may have multiple CamelContext running at various times during the lifetime of the application we must properly cleanup when stopping the context. I have a series of patches fixing that which I hope to finish before 2.3. Once we're comfortable and tested with multiple jdk implementations and versions, I'd change the forkMode to ""once"". In my local copy this reduces the test time in core from 40+ mins to under 15 mins. Since interactions between tests is still possible and might lead us on a wild-goose we could add another profile that uses the safer yet time consuming ""pertest"" forkMode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76454,,,Sun Apr 24 09:58:09 UTC 2011,,,,,,,,,,,"0|i01qaf:",8028,,,,,,,,,,,,,,,,,,,,"12/May/10 19:35;hadrian;r943644 - first cut. 

Also added a way to reset the counters to have predictable ObjectNames during tests. DefaultNodeIdFactory.resetAllCounters() could lead to name conflicts if used without care, reason why I made it protected, so it cannot be invoked directly.;;;","28/May/10 08:06;davsclaus;Hadrian I se no more bug in there, in the cleanup. I think your commit fixed that.

So I think we should resolve this ticket. And if you need a ticket for _speeding up unit tests_ then just create a new ticket.

;;;","28/May/10 19:25;hadrian;@Claus, there is one more issue I am working on. This should stay open. My previous commit was done in time for 2.3.0, where things are already better, but still not fully fixed.;;;","08/Jul/10 06:34;hadrian;With the last commit at r961588 camel-core is done. I changed the forkMode to ""once"" in the surefire plugin which saves me about 45 mins of testing just in camel-core.;;;","24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
DefaultRestletBinding should not treat all the post request as a Web from,CAMEL-2711,12487323,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/May/10 01:54,24/Apr/11 10:01,14/Jul/23 05:46,12/May/10 02:14,,,,,,,,,,,,,2.3.0,,,,camel-restlet,,,,0,,,,,,,,,"We got a user bug report from the [Fuse Forums|http://fusesource.com/forums/thread.jspa?threadID=1862&tstart=0].
After digging the code, I found the DefaultRestletBinding treat the all the request as a web form .  
It should check the request entity's MediaType to decide if the request entity is a web from.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76455,,,Sun Apr 24 10:01:20 UTC 2011,,,,,,,,,,,"0|i01q9b:",8023,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File name lost when it starts with the same characters as the relative directory on the endpoint,CAMEL-2708,12487322,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,11/May/10 05:55,24/Apr/11 10:01,14/Jul/23 05:46,11/May/10 09:17,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"When polling file from a directory using a relative file URI, the file name gets lost when it starts with the same characters as the directory name.

E.g. a directory 'orders' containing 'orders-1719.xml' and 'orders-1819.xml'

{code}
from(""file:orders"").process(new Processor() {
  public void process(Exchange exchange) {
    // there's no file name on the message here (exchange.getIn().getHeader(Exchange.FILE_NAME) returns null)
  }
});
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/May/10 06:36;gertvanthienen;CAMEL-2708.diff;https://issues.apache.org/jira/secure/attachment/12463251/CAMEL-2708.diff",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76456,,,Sun Apr 24 10:01:34 UTC 2011,,,,,,,,,,,"0|i01q8n:",8020,,,,,,,,,,,,,,,,,,,,"11/May/10 06:36;gertvanthienen;Attaching the patch because svn down at the moment;;;","11/May/10 09:17;davsclaus;Thanks Gert for the patch.

trunk: 943060.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean component should ignore the wsdlLocation in the POJO,CAMEL-2700,12487336,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,06/May/10 13:29,24/Apr/11 10:01,14/Jul/23 05:46,06/May/10 13:47,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,,,,"cxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service, which of course wasn't up yet and I got the exception below. Fix for this coming soon.

For Googlers out there, this ticket *may* fix this error message you may be getting:
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service.
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
    at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
    at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115)
    at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63)
    at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57)
    at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87)
    at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286)
    at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114)
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640)
    ... 32 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:93)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271)
    at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177)
    at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
    at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105)
    at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48)
    at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416)
    ... 42 more
Caused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179)
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:91)
    ... 54 more
Caused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217)
    ... 56 more 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76458,,,Sun Apr 24 10:01:10 UTC 2011,,,,,,,,,,,"0|i01q6v:",8012,,,,,,,,,,,,,,,,,,,,"06/May/10 13:46;janstey;Fixed in rev http://svn.apache.org/viewvc?rev=941723&view=rev;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - NettyProducer should detect write failures as its async operation,CAMEL-2698,12487333,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/May/10 09:07,24/Apr/11 10:00,14/Jul/23 05:46,06/May/10 09:18,2.3.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"It should do as MinaHelper

See nabble
http://old.nabble.com/Recovery-From-Netty-Connection-Drop-ts28467631.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76459,,,Sun Apr 24 10:00:41 UTC 2011,,,,,,,,,,,"0|i01q6f:",8010,,,,,,,,,,,,,,,,,,,,"06/May/10 09:18;davsclaus;trunk: 941620.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpEntityConverter should not create a InputStreamEntity by using the GZIPHelper.toGZIPInputStream(),CAMEL-2694,12487329,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/May/10 13:06,17/Jan/11 16:50,14/Jul/23 05:46,07/May/10 07:15,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,,,,1.6.3,2.3.0,,,,,,,0,,,,,,,,,"GZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76460,,,Mon Jan 17 16:50:43 UTC 2011,,,,,,,,,,,"0|i01q5j:",8006,,,,,,,,,,,,,,,,,,,,"17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multithreading bug: getBody sporadically returns null,CAMEL-2692,12487318,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,scrutinizer,scrutinizer,05/May/10 04:57,17/Jan/11 16:50,14/Jul/23 05:46,12/May/10 07:02,1.6.2,2.3.0,,,,,,,,,,,1.6.3,2.3.0,,,camel-core,,,,0,,,,,,,,,"Note that the only workaround for this bug is to remove the parallelProcessing() call in the builder.

I have a simple route that processes a file by splitting on a tag and processing the DOM of each split message. The problem is that getBody is randomly returning null but ONLY when using the parallelProcessing feature of split. For some runs of the same XML file, the error does not occur at all (the file is about 2MB of data), others it will happen once or twice. I am currently using the latest 2.3-SNAPSHOT. 

Also note, that after detecting the null, I tried calling getBody(String.class) - this also may return null. Sometimes it does return the proper XML. 

Route configuration that reproduces the problem (my input XML is about 2MB with about 500 article tags): 

        public void configure() throws Exception { 
          from(""file:D:/inbox"") 
            .split(new XPathBuilder(""//article"")) 
              .parallelProcessing()                     // remove this line getBody below never returns null 
              .process(new Processor() { 
                public void process(Exchange exchange) throws Exception { 
                  Message inMessage = exchange.getIn(); 
                  org.w3c.dom.Document domDocument = inMessage.getBody(org.w3c.dom.Document.class); 
                  if (domDocument == null) { 
                    log(""Null body""); 
                  } else { 
                    // process DOM here 
                  } 
                } 
              }) 
            .end() 
        } 
      }); 
","Windows 7 64 bit, JDK 1.6.0_20",scrutinizer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/May/10 13:26;scrutinizer;news_20100502000001.zip;https://issues.apache.org/jira/secure/attachment/12463250/news_20100502000001.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76461,,,Mon Jan 17 16:50:42 UTC 2011,,,,,,,,,,,"0|i01q53:",8004,,,,,,,,,,,,,,,,,,,,"05/May/10 05:01;davsclaus;Can you attach a sample XML file?;;;","05/May/10 05:01;davsclaus;And what OS are you using?
And can you report the JDK version number as well?;;;","05/May/10 13:24;scrutinizer;Updated OS and exact JDK version
Claus, I can't attach the XML here, but I can email to you directly (please delete when finished with the file).;;;","05/May/10 13:26;scrutinizer;XML sample file attached.;;;jira-users","05/May/10 13:30;scrutinizer;Sample XML attached with JIRA user only visibility. If possible, remove this file once this issue is closed.;;;","06/May/10 07:00;davsclaus;And you do not use any 3rd party XML parser? eg you use the parser which is included in the JDK core?;;;","06/May/10 07:19;davsclaus;I cannot reproduce the problem you may have
{code}
public class SplitXPathParallelBigFileIssueTest extends ContextTestSupport {

    public void testSplitXPathParallelBigFileIssue() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(144);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file:news/?noop=true"")
                        .split(new XPathBuilder(""//article""))
                            .parallelProcessing()
                            .process(new Processor() {
                                public void process(Exchange exchange) throws Exception {
                                    Document doc = exchange.getIn().getBody(Document.class);
                                    assertNotNull(doc);

                                    String id = doc.getFirstChild().getAttributes().getNamedItem(""id"").getTextContent();
                                    System.out.println(id);
                                    //String txt = exchange.getContext().getTypeConverter().convertTo(String.class, doc.getFirstChild());
                                }
                            }).to(""mock:result"")
                        .end();
            }
        };
    }

}
{code}

I can always read the 144 articles from the xml file.
{code}

2010-05-06 09:17:44,748 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is starting
2010-05-06 09:17:44,749 [main           ] INFO  DefaultCamelContext            - JMX is disabled. Using DefaultManagementStrategy.
2010-05-06 09:17:45,112 [main           ] INFO  FileEndpoint                   - Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2010-05-06 09:17:45,113 [main           ] INFO  FileEndpoint                   - Using default memory based idempotent repository with cache max size: 1000
2010-05-06 09:17:45,116 [main           ] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:45,117 [main           ] INFO  DefaultCamelContext            - Started 1 routes
2010-05-06 09:17:45,118 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 371 millis
2010-05-06 09:17:45,121 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
_2744977482
_2744977610
_2744977541
_2744977483
_2744977566
_2744977496
_2744977557
_2744977581
_2744977585
_2744977661
_2744977576
_2744977632
_2744977675
_2744977612
_2744977682
_2744977685
_2744977833
_2744977734
_2744977760
_2744977707
_2744977798
_2744977791
_2744977840
_2744977677
_2744977887
_2744977842
_2744977906
_2744977913
_2744977737
_2744977876
_2744977930
_2744977901
_2744977869
_2744977681
_2744977938
_2744977962
_2744977986
_2744977987
_2744977895
_2744977977
_2744977997
_2744978016
_2744978026
_2744978048
_2744978065
_2744978057
_2744978064
_2744978076
_2744978068
_2744978088
_2744978084
_2744978090
_2744978097
_2744978091
_2744978103
_2744978112
_2744978114
_2744978122
_2744978130
_2744978131
_2744978160
_2744978161
_2744978170
_2744978172
_2744978139
_2744978196
_2744978211
_2744978205
_2744978222
_2744978195
_2744978245
_2744978326
_2744978318
_2744978340
_2744978223
_2744978335
_2744978355
_2744978368
_2744978369
_2744978384
_2744978401
_2744978382
_2744978408
_2744978411
_2744978415
_2744978452
_2744978458
_2744978462
_2744978440
_2744978471
_2744978439
_2744978460
_2744978485
_2744978497
_2744978510
_2744978511
_2744978512
_2744978536
_2744978517
_2744978552
_2744978569
_2744978577
_2744978579
_2744978583
_2744978592
_2744978635
_2744978609
_2744978642
_2744978611
_2744978621
_2744978598
_2744978606
_2744978647
_2744978694
_2744978679
_2744978692
_2744978719
_2744978732
_2744978759
_2744978730
_2744978763
_2744978886
_2744978838
_2744978895
_2744978900
_2744978903
_2744978911
_2744978918
_2744978810
_2744978800
_2744978963
_2744978968
_2744978972
_2744978765
_2744978982
_2744978948
_2744978997
_2744978883
_2744978801
_2744978782
_2744978821
_2744978989
_2744978950
_2744978985
2010-05-06 09:17:47,316 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2010-05-06 09:17:47,317 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete.
2010-05-06 09:17:47,321 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 0 seconds
2010-05-06 09:17:47,321 [main           ] INFO  DefaultInflightRepository      - Shutting down with no inflight exchanges.
2010-05-06 09:17:47,322 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is shutdown in 6 millis
{code}
;;;","06/May/10 08:42;davsclaus;Roland is it possible for you to create a anonym and public XML file we can use and add as an unit test to camel-core ?

Then we will have it tested throughly on CI servers which tests it on all kind of OS and JDK levels.;;;","06/May/10 08:57;davsclaus;I have tested it on both Mac OS and Windows
{code}
C:\workspace\camel\camel-core>mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.6.0_18
Java home: C:\jdk1.6.0_18\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1"" arch: ""x86"" Family: ""windows""
{code}

And I cannot reproduce it. I do not have a Windows 7 machine with 64bit JDK.;;;","06/May/10 13:07;scrutinizer;Yes, I am using the stock JDK 6 XML parser.

Turning debugging on reveals the underlying problem. It appears that Camel is calling Document.importNode from multiple threads on the same Document causing an ArrayIndexOutOfBounds error. This occurs in the converter and results in a null value. The stack trace for this error is below:

Thread [Camel Thread 9 - Split] (Suspended (exception ArrayIndexOutOfBoundsException))	
	Vector<E>.elementAt(int) line: 427	
	DeferredDocumentImpl.getNodeValueString(int, boolean) line: 1167	
	DeferredDocumentImpl.getNodeValueString(int) line: 1120	
	DeferredTextImpl.synchronizeData() line: 93 [local variables unavailable]	
	DeferredTextImpl(CharacterDataImpl).getNodeValue() line: 88	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1629	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean) line: 1498	
	XmlConverter.toDOMDocument(Node) line: 572	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	ObjectHelper.invokeMethod(Method, Object, Object...) line: 772	
	InstanceMethodTypeConverter.convertTo(Class<T>, Exchange, Object) line: 69	
	DefaultTypeConverter.doConvertTo(Class, Exchange, Object) line: 165	
	DefaultTypeConverter.convertTo(Class<T>, Exchange, Object) line: 91	
	DefaultMessage(MessageSupport).getBody(Class<T>, Object) line: 74	
	DefaultMessage(MessageSupport).getBody(Class<T>) line: 48	
	MoreoverTest$1$1.process(Exchange) line: 25	
	InstrumentationProcessor.process(Exchange) line: 67	
	TraceInterceptor(DelegateProcessor).processNext(Exchange) line: 53	
	TraceInterceptor(DelegateProcessor).proceed(Exchange) line: 82	
	TraceInterceptor.process(Exchange) line: 97	
	InstrumentationProcessor.process(Exchange) line: 67	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	DefaultChannel.process(Exchange) line: 228	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	Splitter(MulticastProcessor).doProcess(Processor, Processor, Exchange) line: 278	
	MulticastProcessor.access$000(MulticastProcessor, Processor, Processor, Exchange) line: 62	
	MulticastProcessor$1.call() line: 199	
	MulticastProcessor$1.call() line: 193	
	FutureTask$Sync.innerRun() line: 303	
	SubmitOrderedCompletionService$SubmitOrderFutureTask(FutureTask<V>).run() line: 138	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	Thread.run() line: 619	


Inspection of the JDK getNodeValueString shows that this error can only occur if this function is called in parallel from two threads:
                for (int i = chunkCount - 1; i >= 0; i--) {                                                               
                    fBufferStr.append((String)fStrChunks.elementAt(i));
                }
                
                value = fBufferStr.toString();
                fStrChunks.removeAllElements();

One thread is looping over fStrChunks, while the other thread clear it via removeAllElements.
;;;","11/May/10 06:03;davsclaus;Thanks Roland. Yeah unfortunately the XML API in the JDK is pretty well terrible.

Let me look into what we can do in Camel;;;","11/May/10 06:32;davsclaus;Got a fix ready which is being tested now;;;","11/May/10 07:14;davsclaus;trunk: 943024.;;;","11/May/10 08:07;davsclaus;1.x: 943033.;;;","11/May/10 08:07;davsclaus;Roland feel free to test with latest code on your system;;;","11/May/10 22:42;scrutinizer;Claus, the synchronize you added didn't fix the problem. Seems that importNode requires the Document to be synchronized (yuck). Changing your fix in XmlConverter.toDOMDocument to:
                Document doc = createDocument();
                // import node must no occur concurrent on the same node
                // so we need to synchronize on it
                synchronized (node.getOwnerDocument()) {
                    doc.appendChild(doc.importNode(node, true));
                }
fixed the problem.

I agree about the JDK XML API. It is horrible. I wrote a converter for DOM4J and always convert the body to a DOM4J Document before any DOM manipulation.
;;;","12/May/10 07:02;davsclaus;Hi Roland

Thanks for spotting this again.

trunk: 943394.
1.x: 943395.;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,
exec component fails after receiving empty output,CAMEL-2687,12487331,12487337,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chuck,chuck,30/Apr/10 15:54,24/Apr/11 10:00,14/Jul/23 05:46,06/May/10 15:29,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"I have a simple route here:

{quote}
public void configure() {
    from(""timer://foo?period=5000"")
    .to(""C:/apps/putty/PLINK.EXE?args=cadams@labmachine  -i C:/apps/putty/priv/chuck.ppk \""ls /tmp/foo\"""")
    .to(""log:experiments.cameltest"");
}
{quote}

This just runs a dummy command on a remote machine every five seconds.  Normally it has no problems as long as /tmp/foo has contents.  For example, I create 'bar' and 'baz' files, and the log reflects this:

{quote}
[                          main] DefaultCamelContext            INFO  Apache Camel 2.3-SNAPSHOT (CamelContext: camelContext) started in 734 millis
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]
{quote}



And so on....  But if I delete both files, this is what happens:


{quote}
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] ExecResultConverter            WARN  Received null stdout of the ExecResult for conversion!
[                           foo] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.exec.ExecResultConverter.convertToString(org.apache.camel.component.exec.ExecResult,org.apache.camel.Exchange) throws java.io.FileNotFoundException to: org.apache.camel.impl.converter.ToStringTypeConverter@1e3d24a
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@d767dc]
{quote}


And from that point on, even if I add files to the directory again, I get nothing back, just the following log section over and over.  It seems that the behavior of suddenly switching the converter to ToStringTypeConverter had the effect of suppressing all output for good.  

{quote}
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@3aacb4]
{quote}

This behavior is certainly unexpected and undesireable.  I've been working around this by making my remote script always produce some dummy output when they otherwise have nothing to return, but any workaround I could use on the Camel side pending a more permanent fix would be very much appreciated.
","windows XP, jdk 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76462,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,,,,,"0|i01q3z:",7999,,,,,,,,,,,,,,,,,,,,"30/Apr/10 15:56;chuck;I see JIRA ate my source code.   Here's the relevant body of the .configure() method

{quote}
		from(""timer://foo?period=5000"")
		.to(""exec:C:/apps/putty/PLINK.EXE?args=cadams@labmachine -i C:/apps/putty/priv/chuck.ppk ""\""ls /tmp/foo\"""")
		.to(""log:bizint.cameltest"");
{quote}


;;;","30/Apr/10 16:04;chuck;It's always the way with me that I only see my own error after reporting it as a bug... I can see now that the converter returned an ExecResult as the body instead of converting it to a string, and that I should therefore be expecting an ExecResult instead of a string.  

Still, the fact that it actually changes the converter for further messages doesn't strike me as entirely right: I would simply have expected empty output to yield an empty string instead of a null that magically changes the behavior of the component going forward.

;;;","01/May/10 07:42;davsclaus;Yeah the problem is that type camel-exec type converter returns a null which eventually a ToString fallback type converter can convert as value.

I am improving camel-core to let only certain fallback type converters be able to kick in and be promoted.
This should fix your issue.;;;","01/May/10 08:44;davsclaus;Chuck can you test it again on your system. I have commited a fix to trunk.;;;","05/May/10 17:16;chuck;That appears to have done the trick -- thanks for the quick turnaround.  I'm finding the exec component to be one of the handiest pieces of camel.  I'm able to replace shell scripts with Camel routes and add honest-to-goodness logging and testing to them now, making Camel useful for programming in the small, not just ""enterprisey"" integrations.  
;;;","06/May/10 15:29;davsclaus;Thanks Chuck for reporting and testing.

Yeah the goal of Camel is being very flexible and useable in any kind of business. 
And the lovely is that the community is kicking ass and adding components to Camel.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
Removing entries from FileIdempotentRepository don't get persisted,CAMEL-2678,12487360,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fdehghani,fdehghani,27/Apr/10 09:36,24/Apr/11 10:01,14/Jul/23 05:46,28/Apr/10 09:08,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Removing an entry (file name) programatically from a file idempotent repository has only effect on the cache and does not get persisted on the file repository. 
There are some situations in which one may need to rerun a file through a workflow and it makes neccessary to remove the file from the idempotent repository. A specific problem arises when upon a server restart, the file is not picked up by the workflow because the remove was not persisted/spooled on the disk.",JDK 1.5 & 1.6 / JBoss 4.2 / Camel 2.1.0 & 2.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76464,,,Sun Apr 24 10:01:00 UTC 2011,,,,,,,,,,,"0|i01q1z:",7990,,,,,,,,,,,,,,,,,,,,"28/Apr/10 09:08;davsclaus;trunk: 938828.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-guicy-jms GuiceTest failed,CAMEL-2675,12487371,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Apr/10 09:34,24/Apr/11 10:01,14/Jul/23 05:46,26/Apr/10 09:45,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"Here is the stack trace 
{code}
[//target/routeOutput?noop=true] GenericFileOnCompletion        ERROR Caused by: [org.apache.camel.CamelExecutionException - Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]]
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1107)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:625)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:264)
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:131)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:167)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:127)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:269)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:137)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:103)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:146)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:170)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
	at java.lang.Thread.run(Thread.java:613)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: GenericFile[message2.xml] of type: org.apache.camel.component.file.GenericFile on: GenericFileMessage with file: GenericFile[message2.xml]. Caused by: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]. Exchange[GenericFileMessage with file: GenericFile[message2.xml]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:103)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:623)
	... 31 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:124)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)
	... 32 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76465,,,Sun Apr 24 10:01:17 UTC 2011,,,,,,,,,,,"0|i01q1b:",7987,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Policy should handle lifecycle of wrapped processor, otherwise it will not be automatic started on startup",CAMEL-2665,12487311,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Apr/10 06:50,24/Apr/11 10:00,14/Jul/23 05:46,22/Apr/10 14:30,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"If you use policy to wrap a Processor, then the wrapped Processor is not automatic started/stopped as lifecycle cannot see this wrapped processor.

And to prevent end users from remembering to do this themselves we should let a WrapProcessor handle this for us.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76466,,,Sun Apr 24 10:00:52 UTC 2011,,,,,,,,,,,"0|i01pz3:",7977,,,,,,,,,,,,,,,,,,,,"22/Apr/10 14:30;davsclaus;trunk: 936869.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPackageScanClassResolver can't read entries in an eclipse rcp app because it can't handle bundleresource - protocol,CAMEL-2663,12487328,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cdittberner,cdittberner,21/Apr/10 10:21,24/Apr/11 10:01,14/Jul/23 05:46,07/May/10 07:18,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"scenario:

I have an eclipse rcp based app and use the apache camel libs within my plugin, i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.

CamelContext context = new DefaultCamelContext();
context.addRoutes(new RouteBuilder() {
    public void configure()	{
        from(""imaps://mailserver?username=user&password=password&consumer.delay=5000&delete=false&unseen=true"")
            .to(""log: new mail"");
   }});
   context.start();

When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can't find one.

I debugged  deeper into the camel code and it seems that the DefaultPackageScanClassResolver can't load from urls starting with bundleresource like ""bundleresource://109.fwk32380043:4/org/apache/camel/component/file/""

using camel-osgi didn't worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn't worked but thats another problem/bug)

 
LOG Messages:

2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.camel.component.mail, org.apache.camel.component.spring.integration.converter]
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff  is used to load the class
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder
2010-04-21 11:15:39,954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff
2010-04-21 11:16:44,970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
2010-04-21 11:17:01,642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource
2010-04-21 11:23:59,814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false
2010-04-21 11:24:00,470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in [/org/apache/camel/component/file/] matching criteria: annotated with @Converter
2010-04-21 11:24:16,079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/
2010-04-21 11:24:26,626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/
	at java.net.URL.<init>(URL.java:567)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63)
	at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644)
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691)
	at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68)
","Windows, Eclipse 3.5.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Apr/10 08:53;cdittberner;EclipsePackageScanClassResolver.java;https://issues.apache.org/jira/secure/attachment/12463237/EclipsePackageScanClassResolver.java",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76467,,,Sun Apr 24 10:01:04 UTC 2011,,,,,,,,,,,"0|i01pyn:",7975,,,,,,,,,,,,,,,,,,,,"22/Apr/10 08:49;cdittberner;Finally I got it working :)

URLs starting with protocol ""bundleresource"" have to be converted into a real url using org.eclipse.core.runtime.FileLocator.resolve(url). 

So I made my own EclispePackageScanClassResolver adding the converter-call in find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes).

see attached file;;;","22/Apr/10 08:52;davsclaus;Hi Christoph

That is great

See about pluggable class resolvers here
http://camel.apache.org/pluggable-class-resolvers.html

What we may can do is to add a new camel-eclipsercp component which provides this class resolver.
What .jar / jars do you need to use?

And I assume those jars has an open source license, such as Apache or Eclipse based?
If so we can have it included out of the box at Apache. If not (as in JBoss case) is has to be hosted elsewhere such as camel-extra
http://code.google.com/p/camel-extra/

Or at github etc.;;;","22/Apr/10 08:53;cdittberner;Attach this on the DefaultcamelContext like

DefaultCamelContext camelContext = new DefaultCamelContext();
camelContext.setPackageScanClassResolver(new EclipsePackageScanClassResolver());

and apache-camel can be used within an eclipse-plugin.;;;","22/Apr/10 09:03;davsclaus;Its based on EPL license, which is in B category
http://www.apache.org/legal/3party.html

However the source code where its being used will be minimal and with really very very low change some end user will derive this work without knowing the license implications by Eclipse.

And the jar is 
http://repo1.maven.org/maven2/org/eclipse/equinox/common/3.3.0-v20070426/common-3.3.0-v20070426.pom

Which is in central maven repo, so it may be doable.;;;","22/Apr/10 09:04;cdittberner;A camel-eclipse package sounds very well.

My plugin depends on 
 org.eclipse.osgi,
 org.eclipse.equinox.app,

To use the FileLocator.convert-method I had to depend on  org.eclipse.equinox.common,

These are the libs I included in my plugin:
camel-core-2.2.0.jar
camel-spring-2.2.0.jar
camel-spring-integration-2.2.0.jar
commons-management-1.0.jar
camel-mail-2.2.0.jar
mail.jar
spring.jar

spring.jar is the complete spring-framework-2.5.6 package.

;;;","22/Apr/10 09:08;davsclaus;We should just use the common jar. And have it defined as *provided* in the pom.xml.

As its expected the runtime have all the needed jars already. So all you add to is this camel-eclipse jar;;;","22/Apr/10 09:11;davsclaus;And I think we may need to just add a little strategy method on the DefaultPackageScanClassResolver so you can reuse as much code from it.
As all you do is that if its that bundlelocator type then you use the FileLocator. All the rest looks like its 100% the same.

Otherwise we end up having to have them in sync, and that will never work. ;;;","22/Apr/10 09:33;njiang;+1 as Claus said. 
We already have lots of PackageScanClassResolvers, it's time to clean up the duplicate codes :)
;;;","07/May/10 07:18;njiang;Created a camel-eclipse component for this resolver.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,
ftp - exception thrown from begin should remove the file from in progress so the file can be polled on subsequent calls,CAMEL-2662,12487357,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/10 05:11,24/Apr/11 10:01,14/Jul/23 05:46,21/Apr/10 06:09,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-ftp,,,,0,,,,,,,,,"The SFTP component can throw an exception in its begin logic, which causes Camel to not remove the file from its internal in progress cache.

See nabble
http://old.nabble.com/SFTP-rename-problems-ts28254146.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76468,,,Sun Apr 24 10:01:35 UTC 2011,,,,,,,,,,,"0|i01pyf:",7974,,,,,,,,,,,,,,,,,,,,"21/Apr/10 06:09;davsclaus;trunk: 936165;;;","27/Apr/10 10:32;watcher;Problem fixed after upgrading to camel-2.3-SHAPSHOT

Thanks;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Route with only an endpoint defined causes app failure with only a vague stack trace,CAMEL-2653,12487950,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cott@internetstaff.com,cott@internetstaff.com,16/Apr/10 16:44,24/Apr/11 10:00,14/Jul/23 05:46,17/Apr/10 08:20,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"I recently upgraded an application from Camel 2.0 to Camel 2.2 and was greeted with this stack trace:

{code}
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:939)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:197)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 12 more
Caused by: java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:923)
	... 14 more
{code}

I attached a debugger and walked through DefaultCamelContext to locate the (admittedly useless) route that caused the problem, commented it out, and was on my way. However, it seems like this could be trapped and reported better to the user and save the next poor guy some time. 

I also noticed that there's no useful TRACE or DEBUG output in here that would have allowed anyone to easily debug it.

{code:title=Example}
<route>
    <from uri=""activemq:queue:somequeue"" />
</route>
{code}

I believe this issue is related to CAMEL-2635.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76469,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,,,,,"0|i01pwf:",7965,,,,,,,,,,,,,,,,,,,,"17/Apr/10 08:20;davsclaus;Its fixed in 2.3 where you get a better error message on startup about this

{code}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> From[direct://start] <<< in route: Route[[From[direct://start]] -> []] because of Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:725)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:140)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:638)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1296)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1198)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1128)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1003)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:134)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:90)
	at org.apache.camel.impl.RouteNoOutputTest.setUp(RouteNoOutputTest.java:31)
	at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:108)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:60)
Caused by: java.lang.IllegalArgumentException: Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:723)
	... 23 more
{code};;;","17/Apr/10 12:23;cott@internetstaff.com;Thanks, Claus.
;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
FactoryBeans for ProducerTemplate and ConsumerTemplate should be singleton to avoid,CAMEL-2649,12487405,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Apr/10 10:58,24/Apr/11 10:00,14/Jul/23 05:46,15/Apr/10 11:47,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,,,,"You want the {{ProducerTemplate}} with the assigned id to be a singleton scoped instance, so its shared.

Currently it creates a new instance which it should not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76470,,,Sun Apr 24 10:00:53 UTC 2011,,,,,,,,,,,"0|i01pvj:",7961,,,,,,,,,,,,,,,,,,,,"15/Apr/10 11:18;davsclaus;Also only singleton beans should be added to the CamelContext servicesToClose when using @Produce / @Consume;;;","15/Apr/10 11:47;davsclaus;trunk: 934375, 934376.

This was not a problem in 1.x;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistency between IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty(),CAMEL-2642,12486758,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,14/Apr/10 09:26,24/Apr/11 10:01,14/Jul/23 05:46,07/Jun/10 11:39,2.3.0,,,,,,,,,,,,2.4.0,,,,camel-core,,,,0,,,,,,,,,"IntrospectionSupport.getProperties() and IntrospectionSupport.getProperty() work in an inconsistency way:

{code}
ExampleBean bean = new ExampleBean();
Date date = new Date(0);
bean.setDate(date);

assertSame(date, IntrospectionSupport.getProperty(bean, ""date"")); // succeed

Map<String, Object> map = new HashMap<String, Object>();
IntrospectionSupport.getProperties(bean, map, null);
assertSame(date, map.get(""date"")); // fails
{code}",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Apr/10 09:30;muellerc;ASF.LICENSE.NOT.GRANTED--camel-core-unit-test.patch;https://issues.apache.org/jira/secure/attachment/12463225/ASF.LICENSE.NOT.GRANTED--camel-core-unit-test.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76471,,,Sun Apr 24 10:01:21 UTC 2011,,,,,,,,,,,"0|i01ptz:",7954,,,,,,,,,,,,,,,,,,,,"14/Apr/10 09:30;muellerc;I attached the unit tests which shows the issue.;;;","15/Apr/10 07:14;davsclaus;Thats the initial code of IntrospectionSupport which requires the properties type to be convertable to String.
The code is > 3 years old.
;;;","07/Jun/10 09:56;davsclaus;trunk: 952173.

Work in progress;;;","07/Jun/10 11:39;davsclaus;trunk: 952190.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
file component - Fix recursive and noop not picking up files with similar name in sibling folders,CAMEL-2640,12487373,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/10 15:15,24/Apr/11 10:01,14/Jul/23 05:46,14/Apr/10 08:22,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://old.nabble.com/File-consumer-with-noop%3Dtrue-recursive%3Dtrue-ts28229501.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76472,,,Sun Apr 24 10:01:42 UTC 2011,,,,,,,,,,,"0|i01ptj:",7952,,,,,,,,,,,,,,,,,,,,"14/Apr/10 08:22;davsclaus;trunk: 933877.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some examples does not run with ANT,CAMEL-2639,12487348,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/10 06:21,24/Apr/11 10:01,14/Jul/23 05:46,29/Apr/10 11:55,2.2.0,,,,,,,,,,,,2.3.0,,,,examples,,,,0,,,,,,,,,"See nabble
http://old.nabble.com/camel-example-etl-and-ant-won%27t-run-ts28213644.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76473,,,Sun Apr 24 10:01:06 UTC 2011,,,,,,,,,,,"0|i01ptb:",7951,,,,,,,,,,,,,,,,,,,,"26/Apr/10 14:02;davsclaus;I fixed some of the examples for Camel 2.3

trunk: 938051.;;;","29/Apr/10 11:55;davsclaus;Most of them should run again.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet component is URL encoding the POST message body.  It should encode it based on content-type request header.,CAMEL-2638,12487386,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,richbolen,richbolen,12/Apr/10 19:26,24/Apr/11 10:01,14/Jul/23 05:46,21/Apr/10 01:53,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-restlet,,,,0,,,,,,,,,"I attempted to POST a JSON document to couchdb via restlet.  The post fails with and ""Invalid JSON format"" error from couchdb.  This is because the POST data was being URL encoded which substitutes %XX sequences for all the curly braces.  I believe the encoding should be done based on the content-type header, or possibly not at all for POST requests.  ",Windows XP,,,,,,,216000,216000,,0%,216000,216000,,,,,,,,,,,,,,,,,,,,,"20/Apr/10 19:25;richbolen;camel-restlet-CAMEL-2638.patch;https://issues.apache.org/jira/secure/attachment/12463234/camel-restlet-CAMEL-2638.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76474,,,Sun Apr 24 10:01:41 UTC 2011,,,,,,,,,,,"0|i01pt3:",7950,,,,,,,,,,,,,,,,,,,,"21/Apr/10 01:53;wtam@iona.com;Patch applied with thanks to Rich Bolen.
Committed revision 936136.
;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ErrorHandler - errorHandlerRef should use mandatory lookup to fail if id is not found in Registry,CAMEL-2637,12486167,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/10 17:25,24/Apr/11 10:01,14/Jul/23 05:46,13/Apr/10 11:11,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-spring,,,,0,,,,,,,,,To fail if end user have mistyped an id,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76475,,,Sun Apr 24 10:01:13 UTC 2011,,,,,,,,,,,"0|i01psv:",7949,,,,,,,,,,,,,,,,,,,,"13/Apr/10 06:30;davsclaus;trunk: 933490.

Also the new <errorHandler> has a flaw here as well I need to dig in before this ticket can be closed;;;","13/Apr/10 11:11;davsclaus;trunk: 933551.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IOException: Bad file descriptor and FileNotFoundException,CAMEL-2636,12487289,12486755,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rdomingo,rdomingo,12/Apr/10 15:17,24/Apr/11 10:01,14/Jul/23 05:46,21/May/10 06:30,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"When I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptor
The pdf isn't recieved succesfully by reciever (0kb)

This seems to be caused by a bug in java (on linux systems), closing inputstream twice causes problems. It seemed to me this is exactly what is happening, see also link:
http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtml

I fixed this by (checking out apache camel-core and camel-http 2.2.0):
In FileInputStreamCache.java:
In method close() wrapped getInputStream().close() in if:
if (stream != null && stream instanceof FileInputStream && ((FileInputStream) stream).getChannel().isOpen()) {
getInputStream().close() ;
}

In method reset() also:
if (stream != null && stream instanceof FileInputStream && ((FileInputStream) stream).getChannel().isOpen()) {
getInputStream().close() ;
}


Second I needed to fix a filenotfoundexception, the tempfile created by camel was deleted to early.
I changed CachedOutputStream.java
- Reimplemented constructor:
public CachedOutputStream(Exchange exchange) {
        String hold = exchange.getContext().getProperties().get(THRESHOLD);
        String dir = exchange.getContext().getProperties().get(TEMP_DIR);
        if (hold != null) {
            this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class, hold);
        }
        if (dir != null) {
            this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class, dir);
        }

        // add on completion so we can cleanup after the exchange is done such
        // as deleting temporary files
        exchange.addOnCompletion(new SynchronizationAdapter() {
            @Override
            public void onDone(Exchange exchange) {
                try {
                    // close the stream and FileInputStreamCache
                    // close();
                    // for (FileInputStreamCache cache : fileInputStreamCaches)
                    // {
                    // cache.close();
                    // }
                    // cleanup temporary file
                    if (tempFile != null) {
                        System.err.println(""####################################################"");
                        System.err.println(""DISABLED tempFile.delete:89"");
                        System.err.println(""####################################################"");
                        // boolean deleted = tempFile.delete();
                        // if (!deleted) {
                        // LOG.warn(""Cannot delete temporary cache file: "" +
                        // tempFile);
                        // } else if (LOG.isTraceEnabled()) {
                        // LOG.trace(""Deleted temporary cache file: "" +
                        // tempFile);
                        // }
                        tempFile = null;
                    }
                } catch (Exception e) {
                    LOG.warn(""Error deleting temporary cache file: "" + tempFile, e);
                }
            }

            @Override
            public String toString() {
                return ""OnCompletion[CachedOutputStream]"";
            }
        });
    }

Reimplemented close():
public void close() throws IOException {
        System.err.println(""####################################################"");
        System.err.println(""outputStream.close:119 -> delete tempFile"");
        System.err.println(""####################################################"");
        new Exception().printStackTrace();
        currentStream.close();
        boolean deleted = tempFile.delete();
        if (!deleted) {
            LOG.warn(""Cannot delete temporary cache file: "" + tempFile);
        } else if (LOG.isTraceEnabled()) {
            LOG.trace(""Deleted temporary cache file: "" + tempFile);
        }
    }
","Related to topic, I will post possible solution to this problem:
http://old.nabble.com/bridging-binary-files-over-http-ts28178639.html

Other useful links:
http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtml

My environment:

apache 2.2.0

java version ""1.6.0_19""
Java(TM) SE Runtime Environment (build 1.6.0_19-b04)
Java HotSpot(TM) 64-Bit Server VM (build 16.2-b04, mixed mode)

no container, using:
mvn camel:run

java.io.IOException: Bad file descriptor
        at java.io.FileInputStream.available(Native Method)
        at org.apache.camel.converter.stream.FileInputStreamCache.available(FileInputStreamCache.java:70)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:85)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:81)
        at org.apache.camel.component.http.DefaultHttpBinding.doWriteDirectResponse(DefaultHttpBinding.java:183)
        at org.apache.camel.component.http.DefaultHttpBinding.doWriteResponse(DefaultHttpBinding.java:169)
        at org.apache.camel.component.http.DefaultHttpBinding.writeResponse(DefaultHttpBinding.java:116)
        at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:61)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) 

Config:
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans:beans xmlns:beans=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns=""http://camel.apache.org/schema/spring"" xmlns:cxf=""http://camel.apache.org/schema/cxf""
    xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
    <camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" autoStartup=""true"">
        <!-- clipboard download producer -->
        <route>
            <from uri=""jetty:http://0.0.0.0:8201/clipboard/download?chunked=true&amp;matchOnUriPrefix=true"" />
            <to uri=""http://0.0.0.0:9101?bridgeEndpoint=true"" async=""false"" />
        </route>
    </camelContext>
</beans:beans>


",rdomingo,rkettelerij,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76476,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,,,,,"0|i01psn:",7948,,,,,,,,,,,,,,,,,,,,"13/Apr/10 07:32;davsclaus;Note in the future we should switch to use HawtDB for temporary file based cache as its much faster and better than java.io.File based.
;;;","16/Apr/10 06:57;njiang;Hi Raymond 

I reviewed the change, and found your don't delete the file unless the CachedOutputStream is closed. 
If the CachedOutputStream is not closed after the exchange is processed, there could be lots of temp file. 
Can I see the route that you get the filenotfoundexception?;;;","16/Apr/10 08:38;njiang;Hi Raymond, 

Now I can reproduce Bad file descriptor error with the route that you showed, and found the Exchange.done() is not helping us to clean up the temp file.
As CameServlet still need to access the InputStream from exchange after the process(exchange) is called.
I did some change and make sure the FileInputStream.close will help us to clean up the temp file and will commit the change after running the tests (it will take nearly 3 hours on my box).


;;;","16/Apr/10 12:48;njiang;I committed the patch on base of Raymond's patch, and also added a unit test for it.
Now camel will delete the temp file when the CachedOutputStream is closed or the FileInputStream is closed.

@Raymond
Please check out the latest camel code or the snapshot release to verification it;;;","19/Apr/10 14:55;raymond@domingo.nl;
   [[ Old comment, sent by email on Fri, 16 Apr 2010 15:03:20 +0200 ]]

I will check it first thing next week.

Did you also prevent the input stream from being closed twice ??
To prevent the bad file discriptor java bug ?




;;;","19/Apr/10 14:55;raymond@domingo.nl;
   [[ Old comment, sent by email on Fri, 16 Apr 2010 11:43:10 +0200 ]]

Nice work !!!!

ps: It's my day off today. Next week I will look in to the details !





;;;","20/Apr/10 07:51;raymond@domingo.nl;I couldn't verify it using 2.3.0 BETA... when using this version my camel 'bus connector' didn't seem to work anymore....
Should it already be stable ?? (I don't really have time to look in to details right now)

I copied your new files to 2.2.0 (I checked out from svn) and rebuilded camel-core, files:
- CachedOutputStream.java
- FileInputStreamCache.java

And all is working correct now !;;;","20/Apr/10 12:11;njiang;Hi Raymond,

Thanks for your verification.
We are heading to Camel 2.3.0 release at end of this month, can you do some investigation on the ""bus connector"" issue when you have time?
Please feel free to log a JIRA for it.
;;;","20/May/10 04:34;scrutinizer;Removing the output temp file causes subsequent calls to FileInputStreamCache.reset() to fail since the file no longer exists. This will happen with a simple route such as:
        from(...).process(...).to(..)
This route will fail if the ""process"" step simply converts the body to string (exchange.getIn().getBody(String.class)). The ""to"" step then fails with a file not found error in FileInputStreamCache.reset.

Can deletion of the temp file be easily deferred to the end of the route?

;;;","20/May/10 05:29;njiang;Hi Roland,
We fix this issue of camel jetty and http component by not letting camel remove the temp file at the end of the route,
If you call the ""exchange.getIn().getBody(String.class)"" in your processor, the cached input stream will be closed, and temp file will be removed.
As you consumed the inputStream, you'd better reset the body with the String that your get.
;;;","21/May/10 06:17;davsclaus;Willem did you fix this for the 2.3 release which is in vote now?;;;","21/May/10 06:29;njiang;yes, this issue has been fixed month ago.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,
Combining .delay() and .backOffMultiplier() in an errorhandler gives error that is ,CAMEL-2635,12487393,12487396,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,12/Apr/10 09:11,24/Apr/11 10:00,14/Jul/23 05:46,17/Apr/10 16:21,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"
When doing the following in a route:

	.onException(HaltOperationsError.class)
	
			.maximumRedeliveries(10)
			.backOffMultiplier(10) // 1 s base	
			
			.handled(true)
			.delay(10)			
			.log(""Halting operations for some time"")
			//.process(new RouteStoppingProccesor(""PostProcessorRoute""))
			.end()

I get the following stacktrace:
ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1075)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:652)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)
	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
	at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:224)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
	at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
	at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1044)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 49 more
Caused by: java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1028)
	... 51 more


I think this is a minor error, but it would be nice to know if something could be done with it so that the errormessage is easier to understand.",version 2.3-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76477,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,,,,,"0|i01psf:",7947,,,,,,,,,,,,,,,,,,,,"13/Apr/10 07:34;davsclaus;You should use {{redeliveryDelay}} instead of {{delay}}

But yeah we should maybe add some check in camel-core so end users avoid picking the wrong delay :);;;","13/Apr/10 08:09;tarjei@scanmine.com;Note also that for some reason Eclipse reports that redeliveryDelay is depreciated when I use Camel 2.3-SNAPSHOT. 

I'm reducing the priority, this is not a major issue :)

;;;","17/Apr/10 08:15;davsclaus;There was a spelling mistake so there is
- {{redeliverDelay}} = @deprecated
- {{redeliveryDelay}} = added in 2.3 which is the fixed spelling;;;","17/Apr/10 08:28;davsclaus;Well you actually have to end the delay as well.

Notice how I use 2 end to end both delay and onException

{code}
                from(""direct:start"")
                    .onException(Exception.class)
                        .maximumRedeliveries(2)
                        .backOffMultiplier(1.5)
                        .handled(true)
                        .delay(1000)
                            .log(""Halting for some time"")
                            .to(""mock:halt"")
                        .end()
                    .end()
                    .to(""mock:result"");
{code};;;","17/Apr/10 16:21;davsclaus;trunk: 935198.

Added better startup route error validation;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-http - Endpoint options should not change the http component configured options,CAMEL-2633,12487350,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/10 07:11,24/Apr/11 10:00,14/Jul/23 05:46,12/Apr/10 13:44,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,,,,"If a http endpoint is using {{httpBindingRef}} option to use a special binding, then it would change the binding on the http component, which means than any new http endpoints created thereafter will use what binding that aforementioned endpoint was using.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76478,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,,,,,"0|i01prz:",7945,,,,,,,,,,,,,,,,,,,,"12/Apr/10 13:44;davsclaus;trunk: 933235.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator - Completion by batch consumer should trigger completion for the batch group if multiple correlation keys was used,CAMEL-2629,12487347,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/10 07:09,24/Apr/11 10:00,14/Jul/23 05:46,11/Apr/10 07:10,2.3.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Yeah its really an odd use case if you use multiple correlation keys for the same batch consumer, but its still possible to do.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76479,,,Sun Apr 24 10:00:43 UTC 2011,,,,,,,,,,,"0|i01pr3:",7941,,,,,,,,,,,,,,,,,,,,"11/Apr/10 07:10;davsclaus;trunk: 932842;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invocation of hasNext() on org.apache.camel.util.ObjectHelper.createIterator(...).new Iterator<Node>() {...} return different results,CAMEL-2622,12487130,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,anydoby,anydoby,07/Apr/10 09:45,24/Apr/11 10:01,14/Jul/23 05:46,07/Apr/10 10:40,2.2.0,2.3.0,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"{code}
                    public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return ++idx == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
                        return s;
                    }
{code}

This is incorrect. Should be:

{code}
                    public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return idx+1 == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
						idx++;
                        return s;
                    }
{code}
",,anydoby,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Apr/10 09:45;anydoby;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12463200/patchfile.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76480,,,Sun Apr 24 10:01:16 UTC 2011,,,,,,,Patch Available,,,,"0|i01ppj:",7934,,,,,,,,,,,,,,,,,,,,"07/Apr/10 09:45;anydoby;patch;;;","07/Apr/10 10:40;davsclaus;trunk: 931494.

Thanks for the patch.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Polling from network share on Windows may regard files as not a file,CAMEL-2621,12487050,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Apr/10 08:45,24/Apr/11 10:01,14/Jul/23 05:46,07/Apr/10 08:47,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"{code}
file.isFile()
{code}

May return {{false}} on Windows if consuming from a network share etc. So we should just regard anything that is *not* a directory as a file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76481,,,Sun Apr 24 10:01:43 UTC 2011,,,,,,,,,,,"0|i01ppb:",7933,,,,,,,,,,,,,,,,,,,,"07/Apr/10 08:47;davsclaus;trunk: 931466;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Karaf features.xml camel-juel can't work well within ServiceMix ,CAMEL-2615,12487182,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Apr/10 04:00,24/Apr/11 10:01,14/Jul/23 05:46,06/Apr/10 04:43,2.2.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"As servicemix install the Pax-web jsp support, which exports the javax.el package with the version 2.1.0, and camel-juel imports the javax.el with version [1.0,2), so the camel-juel feature can't be installed in ServiceMix 4.2.0.
Because javax.el is introduced with the jsp 2.1, so we need to update the camel-juel jaxax.el imports version at the same time.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76482,,,Sun Apr 24 10:01:20 UTC 2011,,,,,,,,,,,"0|i01pnz:",7927,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf can't handle multi part message in PAYLOAD mode,CAMEL-2614,12487332,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,05/Apr/10 21:16,24/Apr/11 10:01,14/Jul/23 05:46,06/May/10 18:12,,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,,,,"If I have a multi part (bare) message defined in WSDL (such as follow), camel-cxf component cannot parse the incoming message in PAYLOAD mode.

{code}
	<wsdl:message name=""MultiPartStringIntRequest"">
		<wsdl:part name=""StringDefaultInput"" element=""MultiPartStringInt:StringDefaultInputElem"" />
		<wsdl:part name=""IntParamIn"" element=""MultiPartStringInt:IntParamInElem"" />
	</wsdl:message>
{code}

I get a stack trace similar to this.

Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor createDOMMessage
INFO: AbstractMessageInInterceptor Converting Stax Stream to DOM
Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor handleMessage
INFO: AbstractRoutingMessageInInterceptor Infer BindingOperationInfo.
Mar 12, 2010 7:15:48 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not read request. Operation {urn:MultiPart/resources/wsdl/MultiPartStringInt/MultiPartStringInt/types}StringDefaultInputElem is unknown.
                at org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor.handleMessage(AbstractMessageInInterceptor.java:103)
                at org.apache.camel.component.cxf.interceptors.DOMInInterceptor.handleMessage(DOMInInterceptor.java:43)
                at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
                at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
                at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
                at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
                at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
                at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
                at org.mortbay.jetty.Server.handle(Server.java:326)
                at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:536)
                at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:930)
                at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
                at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
                at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:405)
                at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
                at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2696,"05/Apr/10 21:57;wtam;CAMEL-2614.patch;https://issues.apache.org/jira/secure/attachment/12463174/CAMEL-2614.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76483,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,,,,,"0|i01pnr:",7926,,,,,,,,,,,,,,,,,,,,"05/Apr/10 21:55;wtam;Fix depends on: 
https://issues.apache.org/jira/browse/CXF-2732
https://issues.apache.org/jira/browse/CXF-2753
;;;","06/Apr/10 13:43;davsclaus;Great work.

I wonder why you have commented out the last line in the patch
{code}
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
{code}

Maybe if not needed, then delete all together.;;;","06/Apr/10 14:02;wtam;@clause

The commented line should have been removed.   I'll clean it up.  (Thanks for pointing it out).   The retrieving of ""boi"" have been performed in the previous lines.   The idea is to make sure the ""boi"" is remained as wrapped in PAYLOAD mode, so that CXF will not put a wrapper element again when it marshals the request.  I'll add some comment in the code, too.


{code}
                 // create a Camel exchange
                 org.apache.camel.Exchange camelExchange = endpoint.createExchange();
+                DataFormat dataFormat = endpoint.getDataFormat();
+
+                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
+                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
+                    boi = boi.getWrappedOperation();
+                    cxfExchange.put(BindingOperationInfo.class, boi);
+                }
                 
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
                 if (boi != null) {
                     camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);
                     if (LOG.isTraceEnabled()) {
{code}
;;;","06/May/10 09:51;njiang;Committed the patch into Camel trunk  in reversion 941623.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Asynchronous processing in DLC endpoint breaks message handling,CAMEL-2605,12487286,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,31/Mar/10 12:59,17/Jan/11 16:50,14/Jul/23 05:46,31/Mar/10 13:46,1.6.2,,,,,,,,,,,,1.6.3,,,,camel-core,,,,0,,,,,,,,,"When using an asynchronous processor to handle the message in a deadletterchannel, the async message handling is broken (not all AsyncCallbacks get invoked correctly), causing the exchange never to be terminated correctly - e.g. the call to sendBody will never return.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76484,,,Mon Jan 17 16:50:42 UTC 2011,,,,,,,,,,,"0|i01plr:",7917,,,,,,,,,,,,,,,,,,,,"31/Mar/10 13:46;gertvanthienen;Fixed in http://svn.apache.org/viewvc?view=revision&revision=929537;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stream documentation contains invalid sample,CAMEL-2601,12486987,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,grahamrb,grahamrb,30/Mar/10 04:58,24/Apr/11 10:01,14/Jul/23 05:46,30/Mar/10 06:49,2.2.0,,,,,,,,,,,,2.3.0,,,,documentation,,,,0,,,,,,,,,"On the following page: http://camel.apache.org/stream.html

In last example relating to monitoring an open file (like tail) the line is incorrect...
from(""stream:file?fileName=/server/logs/server.log?scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");

should be
from(""stream:file?fileName=/server/logs/server.log&scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");

There is a question mark after the filename field whereas this should actually be an ampersand. Unfortunately I don't have edit rights on the page to update it myself.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76485,,,Sun Apr 24 10:01:15 UTC 2011,,,,,,,,,,,"0|i01pkv:",7913,,,,,,,,,,,,,,,,,,,,"30/Mar/10 06:49;njiang;Hi Graham, 
Thanks for reporting this, I updated the wiki doc.
Please feel free to send a kara request to dev at camel.apache.org, I'm sure Claus will grant you the right shortly.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
doTry .. doCatch should disabled nested child error handlers,CAMEL-2577,12487252,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Mar/10 07:10,24/Apr/11 10:01,14/Jul/23 05:46,29/Mar/10 10:38,,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Follow route use a default-error-handler for the route, and also defined  a
custom exception handle logic using try-catch-pattern.

But if the ""myProcessRaiseError"" raised exception the catch-clause cannot be
invoked; Why? Is it camel's bug?

{code:xml}

<route>
     <from uri=""ws:... ""/>
        <bean ...>
       <doTry>
        <filter>
               <simple>${body} == 'firstChoice'</simple>
                     <bean ref=""myProcess"" />
                     <bean ref=""myProcessRaiseError""/>
             </filter>
               <doCatch>
                       ..some error handler...
               </doCatch>
       </doTry>
    <process ...>
</route>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76487,,,Sun Apr 24 10:01:31 UTC 2011,,,,,,,,,,,"0|i01pfj:",7889,,,,,,,,,,,,,,,,,,,,"29/Mar/10 10:38;davsclaus;trunk: 928696.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS Routing in 2.2.0 does not behave like in 2.0.0,CAMEL-2575,12486943,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jejmaster,jejmaster,26/Mar/10 03:00,24/Apr/11 10:01,14/Jul/23 05:46,29/Mar/10 03:00,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,,,,"CXFRS Routing in Camel 2.0.0 works  well with these endPoints:

<cxf:rsServer id=""restRouter"" address=""/restRouter/""	
      serviceClass=""com.project.service.impl.ServiceManagerImpl""   />
      
     <cxf:rsClient id=""restEndpoint"" address=""http://localhost:8080/services/rest""
      serviceClass=""com.project.service.impl.ServiceManagerImpl"" />

In Camel 2.2.0, Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is 'http://localhost:8080/services/rest/restRouter/Path'.

The address of cxf:rsClient is being appended by the cxf:rsServer's address",Spring,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76488,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,,,,,"0|i01pf3:",7887,,,,,,,,,,,,,,,,,,,,"26/Mar/10 03:36;jejmaster;Follow up. It uses CXF 2.2.6;;;","29/Mar/10 02:59;njiang;Here is [the mail thread|http://old.nabble.com/CXFRS-Routing-in-2.2.0-does-not-behave-like-in-2.0.0-ts28038017.html] which is discussing about this issue. ;;;","29/Mar/10 03:00;njiang;I just committed a quick fix for this issue,  it relates to the message header of Exchange.HTTP_PATH.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http component should set Transfer-Encoding as chunked header for response message when checkChunked is true,CAMEL-2566,12487068,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ffang,ffang,22/Mar/10 08:58,24/Apr/11 10:00,14/Jul/23 05:46,22/Mar/10 12:22,2.2.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"so that the client side which send request will know this is a chunked message.
It's important when the response http headers is more than 4096 and we want to use chunked response message
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/10 09:29;ffang;CAMEL-2566-with-testcase.patch;https://issues.apache.org/jira/secure/attachment/12463120/CAMEL-2566-with-testcase.patch","22/Mar/10 09:00;ffang;CAMEL-2566.patch;https://issues.apache.org/jira/secure/attachment/12463172/CAMEL-2566.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76490,,,Sun Apr 24 10:00:37 UTC 2011,,,,,,,,,,,"0|i01pd3:",7878,,,,,,,,,,,,,,,,,,,,"22/Mar/10 09:29;ffang;attachment patch with testcase;;;","22/Mar/10 12:22;davsclaus;Thanks Freeman for the patch.

trunk: 926047.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpComponent only checks the registry for an HttpClientConfigurer, setHttpClientConfigurer no longer works.",CAMEL-2559,12487072,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,slewis,slewis,18/Mar/10 15:04,24/Apr/11 10:01,14/Jul/23 05:46,21/Mar/10 12:29,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,,,,"Basically you can't currently do this:

{code}
            public void configure() {

                ProxyHttpClientConfigurer configurer = new ProxyHttpClientConfigurer(
                        ""proxyhost"",
                        80,
                        ""user"",
                        ""password"",
                        null,
                        null);

                getContext().getComponent(""http"", HttpComponent.class).setHttpClientConfigurer(configurer);

                from(""direct:start"")
                    .to(""http://www.google.com/search"");
            }
{code}

HttpComponent only looks in the registry for an HttpClientConfigurer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Mar/10 08:07;davsclaus;CAMEL-2559.patch;https://issues.apache.org/jira/secure/attachment/12463161/CAMEL-2559.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76491,,,Sun Apr 24 10:01:31 UTC 2011,,,,,,,,,,,"0|i01pbr:",7872,Regression,,,,,,,,,,,,,,,,,,,"18/Mar/10 15:08;slewis;Sending        src/main/java/org/apache/camel/component/http/HttpComponent.java
Adding         src/test/java/org/apache/camel/component/http/HttpClientConfigurerTest.java
Transmitting file data ..
Committed revision 924849.
;;;","20/Mar/10 15:59;davsclaus;This commit caused problems. 

The test {{JettyHttpBindingRefTest}} now fails;;;","20/Mar/10 16:14;davsclaus;The problem is really HttpComponent allows endpoints to override the component configured options which is wrong.

In fact endpoints should
- use endpoint configured options over component configured
- not mess with the component configured

;;;","20/Mar/10 17:38;davsclaus;I think I got it covered now, will do more testing.

But I have reworked camel-http and camel-jetty a little big to
- use endpoint configured options over component configured
- not mess with the component configured
- using a single shared {{clientConnectionManager}} as that is whats meant
- properly registering http/https with correct port number on SchemeRegistry on {{clientConnectionManager}}
;;;","21/Mar/10 08:07;davsclaus;The patch which fixes the issues listed above;;;","21/Mar/10 12:29;davsclaus;trunk: 925759.

Committed patch. 100% test with entire Camel.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException occur in UnsafeUriCharactersEncoder.class,CAMEL-2554,12487069,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Mar/10 15:58,17/Jan/11 16:50,14/Jul/23 05:46,19/Mar/10 03:11,1.3.0,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,1.6.3,2.3.0,,,,,,,0,,,,,,,,,"Here is the [mail thread|http://old.nabble.com/IndexOutOfBoundsException-occur-in-UnsafeUriCharactersEncoder.class-tp27919179p27919179.html] for the detail discussion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76492,,,Mon Jan 17 16:50:40 UTC 2011,,,,,,,,,,,"0|i01pan:",7867,,,,,,,,,,,,,,,,,,,,"17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component does not correctly handle PipedInputStream in message body.,CAMEL-2551,12487124,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,anydoby,anydoby,15/Mar/10 11:17,24/Apr/11 10:01,14/Jul/23 05:46,16/Mar/10 12:06,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Streams that do not have their contents length at immediate disposal, like PipedInputStream, are not processed correctly by the file component.

\\

{code}
    private void writeFileByStream(InputStream in, File target) throws IOException {
        FileChannel out = null;
        try {
            out = prepareOutputFileChannel(target, out);

            if (LOG.isTraceEnabled()) {
                LOG.trace(""Using InputStream to transfer from: "" + in + "" to: "" + out);
            }
            int size = endpoint.getBufferSize();
            byte[] buffer = new byte[size];
            ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
            while (true) {
                int count = in.read(buffer);
                if (count <= 0) {
                    break;
                } else if (count < size) {
                    byteBuffer = ByteBuffer.wrap(buffer, 0, count);
                    out.write(byteBuffer);
                    break;
                } else {
                    out.write(byteBuffer);
                    byteBuffer.clear();
                }
            }
        } finally {
            ObjectHelper.close(in, target.getName(), LOG);
            ObjectHelper.close(out, target.getName(), LOG);
        }
    }

{code}

The code 

{code}
                } else if (count < size) {
                    byteBuffer = ByteBuffer.wrap(buffer, 0, count);
                    out.write(byteBuffer);
                    break;
                } else {
{code}

does not take into account that bytes read can be less than the size of the buffer passed into the InputStream.read method and stream can still have more content. The only indication that EOF was reached is -1 returned from the read method according to Java API.",does not matter,anydoby,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Mar/10 11:18;anydoby;patch.txt;https://issues.apache.org/jira/secure/attachment/12463194/patch.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76493,,,Sun Apr 24 10:01:36 UTC 2011,,,,,,,Patch Available,,,,"0|i01p9z:",7864,,,,,,,,,,,,,,,,,,,,"15/Mar/10 11:18;anydoby;This is the patch which works ok for our project.;;;","15/Mar/10 11:21;anydoby;Current workaround we have to use is the following:

\\

{code}

        InputStream is = ....

        final InputStream camelBugWorkaround = new InputStream()
        {

            @Override
            public int read(final byte[] b, int off, int len) throws IOException
            {
                final int expectedMaxBytes = len;
                int read = 0;
                int totalRead = 0;
                while ((read = is.read(b, off, len)) != -1)
                {
                    if (read < len)
                    {
                        off += read;
                        len -= read;
                    }
                    totalRead += read;
                    if (totalRead == expectedMaxBytes)
                    {
                        break;
                    }
                }
                return totalRead == 0 ? -1 : totalRead;
            }

            @Override
            public int read() throws IOException
            {
                return is.read();
            }

            @Override
            public void close() throws IOException
            {
                is.close();
            }

            @Override
            public int available() throws IOException
            {
                return is.available();
            }

            @Override
            public long skip(final long n) throws IOException
            {
                return is.skip(n);
            }

        };

        exchange.getOut().setBody(camelBugWorkaround);

{code}

Where _is_ is the PipedInputStream.;;;","16/Mar/10 05:03;davsclaus;Sergey well spotted.

Btw which use case do you use a PipedInputStream with?;;;","16/Mar/10 12:01;anydoby;Hi Claus

We use Camel for a downstream distribution product and one of the requirements is streaming of large amounts of data. The use case is bulk output of data - I put a db cursor into an Iterable, forward to a home made velocity component (out of the box velocity component writes to a String, which is not acceptable for us) - and it puts PipedInputStream as message body. A separate thread feeds the PipedOutputStream to velocity engine. Then when this stream is passed on to file component we get InputStream closed exception, because of the bug mentioned. For now I have to wrap PipedInputStream with a buffering stream, but if you include the fix, we will remove the workaround.;;;","16/Mar/10 12:06;davsclaus;Sergey

Thanks for taking the time to explain the use case. I was just wondering where the PipedInputStream came into the picture.
But its nice with some many different use cases people use Camel with.

Willem have already committed your patch this morning:

http://svn.apache.org/viewvc?rev=923583&view=rev;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel-Mail: Alternative body part does not handle charset,CAMEL-2545,12486721,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tide08,tide08,12/Mar/10 22:51,24/Apr/11 10:01,14/Jul/23 05:46,19/Mar/10 06:54,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-mail,,,,0,,,,,,,,,Mail component does not set charset for alternative body part. See - http://old.nabble.com/Camel-Mail:-Alternative-part-does-not-handle-charset--td27882178.html for more information.,All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Mar/10 05:42;tide08;MailBinding.java;https://issues.apache.org/jira/secure/attachment/12463072/MailBinding.java","16/Mar/10 05:39;tide08;MimeMultipartAlternativeWithContentTypeTest.java;https://issues.apache.org/jira/secure/attachment/12463196/MimeMultipartAlternativeWithContentTypeTest.java","19/Mar/10 05:42;tide08;bindingpatch.txt;https://issues.apache.org/jira/secure/attachment/12463083/bindingpatch.txt",,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76494,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,Patch Available,,,,"0|i01p8n:",7858,,,,,,,,,,,,,,,,,,,,"12/Mar/10 22:53;tide08;patch to set charset for alternative part. ;;;","16/Mar/10 05:39;tide08;TestCase for content-type fix.;;;","16/Mar/10 06:34;njiang;@slad,
Can you create a patch based on the trunk code? As there is some change (CAMEL-2467) in the MailBinding.java.
 ;;;","19/Mar/10 02:07;tide08;Applied patch to trunk version;;;","19/Mar/10 03:00;njiang;@slad,
Can you use diff to create the patch?
I copy the patched MailBinding.java into current trunk, there are some compile errors in the file.
So I doubt you've tested it.

If you want me to apply the patch quickly, please send the diff file, so I can easily tell which part change that you made. ;;;","19/Mar/10 05:43;tide08;@willem

Sorry, I was using different logger, which was causing compilation issue. I have updated the source and also submitted the diff as you had requested.



Test Result:
----
Running org.apache.camel.component.mail.MimeMultipartAlternativeWithContentTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.198 sec;;;","19/Mar/10 06:54;njiang;Applied patch with thanks to slad.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,
Application SOAP 12 fault support in camel-cxf PAYLOAD mode,CAMEL-2544,12486478,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,12/Mar/10 19:22,24/Apr/11 10:00,14/Jul/23 05:46,12/Mar/10 20:36,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,This issue is related to https://issues.apache.org/activemq/browse/CAMEL-2495.  We need to make sure SOAP 1.2 Fault works.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76495,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,,,,,"0|i01p8f:",7857,,,,,,,,,,,,,,,,,,,,"12/Mar/10 20:36;wtam;Committed revision 922420.
;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
async route not working with Mina,CAMEL-2540,12486602,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skusma@arccorp.com,skusma@arccorp.com,11/Mar/10 15:33,24/Apr/11 10:01,14/Jul/23 05:46,22/Mar/10 09:28,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,camel-mina,,,0,,,,,,,,,"here is my route:

		from(""mina:tcp://localhost:6202?textline=true&sync=true"").process(new Processor() {
		    public void process(Exchange exchange) throws Exception {
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		    }
		});
		
		from(""file:///test/test/response"")
		.convertBodyTo(String.class)//.threads(1)
		.toAsync(""mina:tcp://localhost:6202?sync=true&textline=true"",10)
		.to(""log:+++ reply++++""); 

here is the output, you can see all reply logs have a same message body and async process is releasing all threads at the first response, this is probably Mina component bug in the context of aync route.


2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG Total 3 files to consume
2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt]]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=MinaProducer(0x2e6c66)
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] MinaProducer                   DEBUG Starting producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] ProducerCache                  DEBUG Adding to producer service pool with key: Endpoint[mina://tcp://localhost:6202?sync=true&textline=true] for producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt]]
2010-03-11 10:21:16,467 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,467 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\New Text Document (3).txt]]
2010-03-11 10:21:16,467 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3362
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3363
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 22: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3363
2010-03-11 10:21:16,514 [amel thread 24: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3362
2010-03-11 10:21:16,514 [amel thread 23: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello2
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello3
2010-03-11 10:21:16,514 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:16,514 [amel thread 25: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello1
2010-03-11 10:21:16,514 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello2
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello2
2010-03-11 10:21:21,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello2
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello3
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=Producer(0x16321e6)
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProcessorEndpoint$1            DEBUG Starting producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProducerCache                  DEBUG Adding to producer cache with key: Endpoint[log://+++ reply++++] for producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy (2) of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy (2) of New Text Document (3).txt to: C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy of New Text Document (3).txt to: C:\test\test\response\.camel\Copy of New Text Document (3).txt with result: true
2010-03-11 10:21:21,577 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\New Text Document (3).txt to: C:\test\test\response\.camel\New Text Document (3).txt with result: true
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello1
2010-03-11 10:21:26,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello1
2010-03-11 10:21:31,531 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello1
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
",tomcat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76496,,,Sun Apr 24 10:01:30 UTC 2011,,,,,,,,,,,"0|i01p7j:",7853,,,,,,,,,,,,,,,,,,,,"22/Mar/10 09:28;davsclaus;trunk: 926008.

Thanks for reporting. You are welcome to try this fix on your system.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate don't support the jms uri with selector,CAMEL-2529,12487201,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Mar/10 10:18,24/Apr/11 10:00,14/Jul/23 05:46,08/Mar/10 13:35,2.0.0,2.1.0,2.2.0,,,,,,,,,,2.3.0,,,,camel-jms,,,,0,,,,,,,,,"This unit test can shows the issue that selector option don't work for ConsumerTemplate
{code}
@Test
    public void testConsumerTemplate() throws Exception {
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message1"", ""SIZE_NUMBER"", 1505);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message3"", ""SIZE_NUMBER"", 1300);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message2"", ""SIZE_NUMBER"", 1600);

        // process every exchange which is ready. If no exchange is left break
        // the loop
        while (true) {
            Exchange ex = consumer.receiveNoWait(""activemq:queue:consumer?selector=SIZE_NUMBER<1500"");
            if (ex != null) {
                Message message = ex.getIn();
                int size = message.getHeader(""SIZE_NUMBER"", int.class);
                assertTrue(""The message header SIZE_NUMBER should be less than 1500"", size < 1500);
                assertEquals(""The message body is wrong"", ""Message3"", message.getBody());
            } else {
                break;
            }
        }

    }

{code}

And here is [mail thread|http://old.nabble.com/activemq-component-and-selector-ts27813752.html] which discusses about it.",,norman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76497,,,Sun Apr 24 10:00:46 UTC 2011,,,,,,,,,,,"0|i01p53:",7842,,,,,,,,,,,,,,,,,,,,"08/Mar/10 13:35;njiang;committed patch for it.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
should use servicemix jaxws 2.1 spec bundle but not the geronimo one,CAMEL-2528,12484736,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,08/Mar/10 03:36,24/Apr/11 10:01,14/Jul/23 05:46,10/Mar/10 10:02,2.2.0,,,,,,,,,,,,2.3.0,,,,karaf,,,,0,,,,,,,,,"otherwise will see the exception like 
javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not found
at javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)
at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)
at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)
at javax.xml.ws.spi.Provider.provider(Provider.java:39)
at javax.xml.ws.Service.<init>(Service.java:36)",,nsaboy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Mar/10 03:37;ffang;CAMEL-2528.patch;https://issues.apache.org/jira/secure/attachment/12463182/CAMEL-2528.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76498,,,Sun Apr 24 10:01:26 UTC 2011,,,,,,,,,,,"0|i01p4v:",7841,,,,,,,,,,,,,,,,,,,,"08/Mar/10 03:37;ffang;patch provided;;;","08/Mar/10 10:12;njiang;Applied the patch with thank to Freeman, and I also updated the jaxws API bundle which camel-soap is using.
;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
karaf features.xml  should use servicemix commons-pool bundle ,CAMEL-2514,12486446,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,02/Mar/10 07:37,17/Jan/11 16:50,14/Jul/23 05:46,02/Mar/10 08:44,1.6.2,2.0.0,2.0-M2,2.0-M3,2.1.0,2.2.0,,,,,,,1.6.3,2.3.0,,,karaf,,,,0,,,,,,,,,"as commons-pool/commons-pool/1.5.4 osgi manifest header isn't correct, which shouldn't import org.apache.commons.pool package.
SMX4-491[1] create servicemix wrapper bundle to fix this issue, so the karaf features.xml should use servicemix wrapper bundle
[1]https://issues.apache.org/activemq/browse/SMX4-491",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Mar/10 07:38;ffang;CAMEL-2514.patch;https://issues.apache.org/jira/secure/attachment/12463158/CAMEL-2514.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76500,,,Mon Jan 17 16:50:40 UTC 2011,,,,,,,,,,,"0|i01p1r:",7827,,,,,,,,,,,,,,,,,,,,"02/Mar/10 07:38;ffang;append patch to address this issue;;;","02/Mar/10 08:44;njiang;Applied patch with thank to Freeman.  I didn't change the parent/pom.xml part, as we just need to update the feature.xml part.;;;","17/Jan/11 16:50;davsclaus;Closing all 1.x tickets;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-soap jar does not contain the generated classes,CAMEL-2512,12484995,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cschneider,cschneider,01/Mar/10 23:03,18/Mar/10 19:12,14/Jul/23 05:46,03/Mar/10 02:38,,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"Seems I forgot to add the generated soap package to the exported packages. So these classes are not packed into the jar.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Mar/10 23:04;cschneider;camel-soap-2010-03-01.patch;https://issues.apache.org/jira/secure/attachment/12463157/camel-soap-2010-03-01.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76501,,,Wed Mar 03 02:38:05 UTC 2010,,,,,,,Patch Available,,,,"0|i01p1b:",7825,,,,,,,,,,,,,,,,,,,,"01/Mar/10 23:04;cschneider;Added patch for this issue. It also contains some improvement to the tests I found when doing the wiki documentation.;;;","03/Mar/10 02:38;njiang;Applied patch with thanks to Christian.
http://svn.apache.org/viewvc?rev=917889&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mixing jetty/http in a route screws up the URI used by HttpClient,CAMEL-2510,12484711,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Mar/10 13:45,24/Apr/11 10:00,14/Jul/23 05:46,10/Mar/10 10:01,2.1.0,2.2.0,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"Below test shows the Http producer can't build up right HttpRequest URI as a bridgeEndpoint.

{code}
   public class JettyHttpTest extends CamelTestSupport {

    private String targetProducerUri = ""http://localhost:8542/someservice?bridgeEndpoint=true&throwExceptionOnFailure=false"";
    private String targetConsumerUri = ""jetty:http://localhost:8542/someservice?matchOnUriPrefix=true"";
    private String sourceUri = ""jetty:http://localhost:6323/myservice?matchOnUriPrefix=true"";
    private String sourceProducerUri = ""http://localhost:6323/myservice"";

    @Test
    public void testGetRootPath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice"");

        template.sendBody(""direct:root"", """");

        assertMockEndpointsSatisfied();
    }
    
    @Test
    public void testGetWithRelativePath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice/relative"");
        
        template.sendBody(""direct:relative"", """");
        assertMockEndpointsSatisfied();
        
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                from(targetConsumerUri)
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
                            exchange.getOut().setBody(""Hi! "" + path);
                        }   
                    });

                from(sourceUri)
                    .to(targetProducerUri);

                from(""direct:root"")
                    .to(sourceProducerUri)
                    .to(""mock:result"");
                
                from(""direct:relative"")
                    .to(sourceProducerUri + ""/relative"")
                    .to(""mock:result"");

            }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76502,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,,,,,"0|i01p0v:",7823,,,,,,,,,,,,,,,,,,,,"02/Mar/10 12:06;romkal;Should we really have such assertion in {{testGetWithRelativePath()}} test?

I believe we should have {{""Hi! /someservice""}} returned, not {{""Hi! /someservice/relative""}} and no {{matchOnUriPrefix}} should be required on {{targetConsumerUri}}.

In other words I believe, that by default we shouldn't propagate HTTP_PATH or HTTP_URI at all from one endpoint to the other, because by default it is not what people would expect. I would propose having two different header names for overriding path for producer, and informative headers for requests received.from consumers.;;;","03/Mar/10 01:42;njiang;Hi Roma,

The change that I made is trying to support the http bridge out of box.

If you want to route the all the request which URI is start with ""http://localhost:1234/route"" to ""http://localhost:4567/service"",  camel need to lookup the request's HTTP_PATH to figure out the relative path and apply it to http producer to send the request.
The original code supports  this kind of route ""http://localhost:1234"" to ""http://host:4567/service"" , but doesn't supports the upper route.

For the header of HTTP_PATH and HTTP_URI, cxfbean is using it to support the JAXRS resource location.
  ;;;","03/Mar/10 14:08;romkal;I believe I was misunderstood :)

I'm not saying that we shouldn't send HTTP_PATH or HTTP_URI headers at all. I believe they are needed definitely (as you wrote earlier). I just believe that by default some other headers should be used to override the URI used at HttpProducer.

Assuming we have a route like
{code:java}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:/output"");
{code}

When someone sends a POST to {{http://localhost/input/some/path}} the payload should be sent to {{http://localhost/output}} not to {{http://localhost/output/some/path}};;;","04/Mar/10 07:44;davsclaus;I to think there is something wrong with this commit.

The changed code in HttpProducerHelper makes other situations fail now. 
And why do you have this relative check?

The 2 urls should IMHO always be considered absolute when bridging.

I do think we need to find a new solution for this and revert the current change.;;;","04/Mar/10 08:07;davsclaus;After digging a bit more I think we have an issue in Camel when you combine Jetty with Http, since Jetty will populate the Exchange with HTTP_* headers. And these headers influence when you invoke other http endpoints later in the route, as if you should *overrule* the endpoint uri.

We got a catch-22 situation since those HTTP_* headers should have been _informative_ and should not impact the routing.

Currently I cannot se an easy solution without breaking backwards comparability, but I also recon that not many Camel end users will use those HTTP_* headers in their routes.
So maybe we can change camel-jetty, to use other header keys, that dont clash.

Or the opposite that you must use HTTP_CUSTOM_* header to overrule. However this is a bigger change as Camel end users then must change their code.
;;;","04/Mar/10 08:10;njiang;@Claus,

I need to make my change more clear, lets take the REST service as an example, the relative path could be used for URI template.
If we use the jetty and http component to build a bridge, my change will support it out of box.
{code}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code}

For the HttpProducer, our police is the message header of HTTP_PATH and HTTP_URI can override the http endpoint configuration, and we introduce the bridgeEndpoint option to ignore the message header of HTTP_URI.    
If you want to this route implement Roman's requirement, current solution could be 
{code}
rom(""jetty:http://localhost/input?matchOnUriPrefix=true"").removeHeader(Exchange.HTTP_PATH).to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code};;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
[jboss-camel]  Cannot find class 'WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class' in any classloaders,CAMEL-2509,12486416,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gribo,gribo,01/Mar/10 12:35,24/Apr/11 10:01,14/Jul/23 05:46,01/Mar/10 16:01,2.2.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"Using jboss-extra class JBossPackageScanClassResolver, i could not get the converter loaded.

I was using camel 2.2.0 and JBoss 5.1

The error was :
Cannot find class 'WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class' in any classloaders: [BaseClassLoader@107e733{vfszip:/D:/JBoss/jboss-5.1.0.GA/server/testWS/deploy/router-component-02-0.0.2-SNAPSHOT.war/}, org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader@1ea6b44]

Looking at the JBossPackageScanClassResolver source class, i changed :

public void visit(VirtualFile file) {

  if (file.getName().endsWith("".class"")) {
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(""/"") + 1), classes);
  }
}
with :

public void visit(VirtualFile file) {

  if (file.getName().endsWith("".class"")) {
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(fqn.indexOf(""jar/"") + 4), classes);
  }
}

as the fqn was /WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class instead of /org/apache/camel/component/bean/ParameterMappingStrategy.class
It's probably different from different version of JBoss ?
Hope this help sombody...",JBoss,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76503,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,,,,,"0|i01p0n:",7822,,,,,,,,,,,,,,,,,,,,"01/Mar/10 13:03;davsclaus;Thanks for reporting.

Yeah classloading in JBoss is a bit tricky :);;;","01/Mar/10 16:01;davsclaus;Thanks a lot.

I have committed a fix to camel-extra.
Fell free to try the fix on your system.

trunk: 292.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsitent definition of resequencer DSL,CAMEL-2498,12487082,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,mrt1nz,mrt1nz,mrt1nz,25/Feb/10 05:48,24/Apr/11 10:00,14/Jul/23 05:46,25/Feb/10 06:05,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,One of the {{ProcessorDefinition}} methods is still has the old {{resequencer}} name from Camel 1.x. Should be renamed to {{resequence}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76504,,,Sun Apr 24 10:00:49 UTC 2011,,,,,,,,,,,"0|i01oy7:",7811,,,,,,,,,,,,,,,,,,,,"24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache/Splitter race condition,CAMEL-2496,12486755,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,slewis,slewis,24/Feb/10 15:38,24/Apr/11 10:00,14/Jul/23 05:46,07/Jun/10 01:45,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,2.3.0,,,,2.4.0,,,,,,,,0,,,,,,,,,"Attached patch introduces a test that shows the following symptom:

org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/-Tmp-/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/-Tmp-/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:52)
	at org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache.reset(StreamCacheConverter.java:126)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:105)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:548)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:428)
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:118)
	at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:155)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:189)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:133)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:87)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:72)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)

I believe it must be a race condition when several threads are passing through the splitter, in the above case I'm using a seda queue with 5 threads.  Am logging this now as I'm not sure what time I'll have to investigate further this week.",,,,,,,,,,,,3600,3600,,,,,,,,,,,,,,,,,,,,,"24/Feb/10 15:39;slewis;test-case.txt;https://issues.apache.org/jira/secure/attachment/12463152/test-case.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76505,,,Sun Apr 24 10:00:53 UTC 2011,,,,,,,,,,,"0|i01oxr:",7809,,,,,,,,,,,,,,,,,,,,"24/Feb/10 15:39;slewis;unit test for 1.x branch, still need to check if 2.x trunk shows a similar problem.;;;","01/Mar/10 16:03;davsclaus;I think we should use the new HawtDB as file based stream cache in the future. 

It got all the bells and whistles to be fast and leverages NIO and memory mapped IO and whatnot.
But that can be done when we overhaul stream caching in 2.x, once we get the time for that :);;;","21/Apr/10 07:38;njiang;After digging the code, I found the FileInputStreamCache is closed when the XPathBuilder.getDocument() is called, and the temp file is deleted, so you get the FileNotFoundException when the XPathBuilder wants to reset the InputStream.
I can also reproduce this issue in Camel 2.x.

To work around this issue, we should not use the FileInputStreamCache as it can't be reset after it is closed, set the camel property CachedOutputStream.THRESHOLD to be ""-1"" can disable the FileInputStreamCache.
{code}
getContext().getProperties().put(CachedOutputStream.THRESHOLD, ""-1"") ;
{code}
;;;","21/Apr/10 08:18;njiang;Committed the test case into camel trunk, will revisit it when we have time to rewrite the StreamCache.;;;","01/Jun/10 20:21;scrutinizer;This looks like the issue I just reported in CAMEL-2776. It may not be a race condition but a side effect of the cached stream file removal upon close().;;;","07/Jun/10 01:42;njiang;Now the cached file will not be deleted before the exchange's routing is finished, so you will not got this kind of error anymore.
The file will be deleted when the CachedFileInputStream which is built on this file is close and routing is finished.

You can find more information in CAMEL-2776.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,
Application SOAP fault support in camel-cxf PAYLOAD mode,CAMEL-2495,12487219,12486478,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,23/Feb/10 18:54,24/Apr/11 10:01,14/Jul/23 05:46,01/Mar/10 14:31,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-cxf,,,,0,,,,,,,,,Camel-cxf component does not seem to support application SOAP fault in PAYLOAD mode.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76506,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,,,,,"0|i01oxj:",7808,,,,,,,,,,,,,,,,,,,,"23/Feb/10 21:59;wtam;It seems to be a problem only when no servcieClass (i.e. WSDL only) is specified in the endpoint.  I added the test in CXFWsdlOnlyTest and showed the issue (see stacktrace).

{code}
 @Test
    public void testSoapFaultRoutes() {
        URL wsdlURL = getClass().getClassLoader().getResource(""person.wsdl"");
        PersonService ss = new PersonService(wsdlURL, new QName(""http://camel.apache.org/wsdl-first"",
                                                                ""PersonService""));
        
        // test POJO mode
        Person client = ss.getSoap();
        Holder<String> personId = new Holder<String>();
        personId.value = """";
        Holder<String> ssn = new Holder<String>();
        Holder<String> name = new Holder<String>();
        Throwable t = null;
        try {
            client.getPerson(personId, ssn, name);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
        
        // test PAYLOAD mode
        Person client2 = ss.getSoap2();
        Holder<String> personId2 = new Holder<String>();
        personId2.value = """";
        Holder<String> ssn2 = new Holder<String>();
        Holder<String> name2 = new Holder<String>();
        try {
            client2.getPerson(personId2, ssn2, name2);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
    }
{code}

javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy70.getPerson(Unknown Source)
	at org.apache.camel.component.cxf.CXFWsdlOnlyTest.testSoapFaultRoutes(CXFWsdlOnlyTest.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:686)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)
	at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:122)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:672)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2210)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2087)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1985)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:640)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:484)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:310)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:262)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 24 more

;;;","01/Mar/10 14:31;wtam;Committed revision 917539.
;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot deploy camel-core in OSGI-runtime using Spring 3.0,CAMEL-2491,12487217,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,michiel.eggermont@gmail.com,michiel.eggermont@gmail.com,22/Feb/10 10:48,24/Apr/11 10:01,14/Jul/23 05:46,22/Feb/10 12:54,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"It is not possible to start a bundle with a camelContext in dm-server 2.0 while using camel-core version 2.2.0, because camel-core requires Spring packages of version below 3.0. This seems like an issue to me, since the release notes of version 2.2.0 suggest that it works with version 3.0 of Spring. 
 
Environment: Spring dm-server 2.0 (comes pre-packaged with Spring 3.0.0.RELEASE)
Steps to reproduce the problem:
- start dm-server
- install bundle camel-core-2.2.0.jar
- install a bundle containing any kind of camelContext
Error: 
Caused by: com.springsource.kernel.osgi.framework.ExtendedClassNotFoundException: org.springframework.jmx.export.metadata.JmxAttributeSource in KernelBundleClassLoader: [bundle=org.apache.camel.camel-core_2.2.0]
(full details of stack trace have been attached)

Cause: 
The version range for the JMX spring packages in the MANIFEST.MF:
org.springframework.jmx.export.annotation;resolution:=optional;version=""[2.5,3)""
,org.springframework.jmx.export.assembler;resolution:=optional;version=""[2.5,3)""
,org.springframework.jmx.export.metadata;resolution:=optional;version=""[2.5,3)"" 

As a workaround I disabled the jmxAgent in my camel-context and changed the 
version range to [2.5,4) in the MANIFEST.MF file in my camel-core-2.2.0.jar.
I redeployed the camel-core bundle. After that my bundle started without any problems. 

Proposed solution:
Change the version range for Spring packages in camel-core from [2.5,3) to [2.5,4)",DM Server 2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Feb/10 10:52;michiel.eggermont@gmail.com;dm-server-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12463150/dm-server-stacktrace.txt",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76507,,,Sun Apr 24 10:01:02 UTC 2011,,,,,,,,,,,"0|i01own:",7804,,,,,,,,,,,,,,,,,,,,"22/Feb/10 10:52;michiel.eggermont@gmail.com;DM server log of the stack trace;;;","22/Feb/10 11:04;davsclaus;Willem OSGi is your table :);;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultCamelContext throws NPE in start() for route with no destination,CAMEL-2486,12487085,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mbmather,mbmather,18/Feb/10 20:37,24/Apr/11 10:01,14/Jul/23 05:46,19/Feb/10 10:45,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"Not easy to track down when you have a lot of routes.  This might be new with the introduction of StartupRouteHolder (I think that was introduced in 2.1, right?)

{code}
public class TriggerNPETest extends CamelTestSupport {
	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
            	// This will generate an NPE on DefaultCamelContext.start() (line 973)
            	// If this is an invalid route a proper message should be given far before 
            	// this and/or NPE should be tested on line 973
            	from(""direct:psd.nowhere"");
            }
        };
	}
	@Test
	public void testme() throws Exception {
		Thread.sleep(10000);
	}
}
{code}

java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:973)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:145)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:98)

{code}
            // now start the inputs for all the route services as we have prepared Camel
            // yeah open the floods so messages can start flow into Camel
            for (Map.Entry<Integer, StartupRouteHolder> entry : inputs.entrySet()) {
                Integer order = entry.getKey();
                Route route = entry.getValue().getRoute();  //  <<<-------  Right here.
{code}","Camel 2.2, Linux, Java 6",mbmather,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76508,,,Sun Apr 24 10:01:25 UTC 2011,,,,,,,,,,,"0|i01ovj:",7799,,,,,,,,,,,,,,,,,,,,"19/Feb/10 10:45;davsclaus;Thanks for reporting.

trunk: 911778;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina - Using close session could potentially cause memory to be not released,CAMEL-2484,12486727,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,davsclaus,davsclaus,18/Feb/10 09:21,24/Apr/11 10:01,14/Jul/23 05:46,23/Feb/10 10:17,2.1.0,2.2.0,,,,,,,,,,,2.3.0,,,,camel-mina,,,,1,,,,,,,,,"See nabble
http://old.nabble.com/SocketSessionImpl-in-Mina-component-retained-in-memory-indefinitely-ts27624487.html",,johanhaleby,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Feb/10 09:33;johanhaleby;camel-mina-outofmemory-example.zip;https://issues.apache.org/jira/secure/attachment/12463144/camel-mina-outofmemory-example.zip","18/Feb/10 13:29;johanhaleby;java_pid26327.hprof.tar.gz;https://issues.apache.org/jira/secure/attachment/12463145/java_pid26327.hprof.tar.gz",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76509,,,Sun Apr 24 10:01:33 UTC 2011,,,,,,,,,,,"0|i01ov3:",7797,,,,,,,,,,,,,,,,,,,,"18/Feb/10 09:33;johanhaleby;Small example that demonstrates the out of memory issue. You should lower the heap to see the result faster.;;;","18/Feb/10 13:18;slewis;Hey Johan, you mentioned in the thread you've got a heapdump that you can attach, would you mind attaching it?  I wouldn't mind starting with that here to track this down.;;;","18/Feb/10 13:32;johanhaleby;Done.;;;","18/Feb/10 20:15;slewis;So the problem is thanks to the RecipientList.  It obtains a producer from the ProducerCache directly, in this case the ProducerCache doesn't actually cache the producer, it just creates a new producer and adds it to DefaultCamelContext.servicesToClose, which winds up holding thousands of MinaProducer objects.  It looks like really the RecipientList is better off just calling Endpoint.createProducer() and avoiding the producer cache altogether, *or* the RecipientList could ensure that each producer is removed from the CamelContext (am testing this now just to be sure it fixes the OOM) *or* the RecipientList could use a bit of a re-factoring so that it uses the ProducerCache properly.;;;","19/Feb/10 08:46;davsclaus;Well spotted. Yeah we should ensure the cache is properly used. Some producers are expensive to create such as FTP, JMS etc. And very often the recipient list is sending to the same endpoints over and over again, and thus the cache idea is good.

BTW the routing slip could very well have the same issue.;;;","19/Feb/10 13:34;slewis;@Claus, thanks!  I'll look into getting the RecipientList working properly with the cache, did a long-running test last night with Johan's test case just to verify that's the issue, and I didn't get any OOMs, but creating/destroying the producers with each exchange is definitely expensive and can cause other problems.

@Johan, in case you need something running right away you should be able to avoid this problem for now by replacing the RecipientList with a simple processor that looks at the header and uses a producer template to send on the message, the producer template uses the cache properly.  I'll of course update the ticket when I get this fixed...;;;","19/Feb/10 14:08;davsclaus;I wonder if the servicesToClose should be a LRUCache which we then can stop the service then an item is evicted. That will prevent similar issues in the future.

Maybe I should go check the source code of DefaultCamelContext :);;;","19/Feb/10 14:13;slewis;I was thinking that yesterday and had even added a ""removeService()"" method to CamelContext and implemented it so that when you remove a service it's then stopped etc.  Guess you could have a thread that keeps an eye on this list and let it periodically garbage collect LRU services.  It'd be another thing to tune though, in a case like this you could hit an OOM before the list is checked for old services.;;;","19/Feb/10 14:30;davsclaus;We got a LRUCache that is map based. I recon we can create some bounded List and have a callback when its full so it can auto remove the oldest which it then will close the service.

Then there is no need for a background thread.

;;;","19/Feb/10 14:37;slewis;That sounds like an excellent fit, I can look into that as part of tidying up the RecipientList...;;;","19/Feb/10 17:49;davsclaus;Stan I just realized that {{servicesToClose}} contains some mandatory services which *must* be running and only stopped when CamelContext stops. Its things like the registry, type converter, inflight registry and whatnot.

So we should look to put those into a *mandatory* List and the others in a *limited* list for reusing purpose.;;;","20/Feb/10 07:18;davsclaus;Had a look this morning. I can now see how the recipient list *doesnt* used pooled producers and thus it recreates a new producer every time.

And at the same time the old producer is added as a service which allows Camel to manage it, but that should not happen as the producer if not pooled is a short lived service.;;;","20/Feb/10 07:45;davsclaus;Ah the MinaProducer is non singleton and {{ServicePoolAware}} which the {{receipientList}} does not take into account. 

It should be able to acquire and release the producers it uses. I will add such a feature. Then that will speedup using mina as it can pool and reuse the MinaProducers.;;;","20/Feb/10 07:46;davsclaus;And by *not* adding it as a {{service}} in the {{servicesToClose}} we avoid Camel holding on the producers forever :)
That just means we loose a little JMX capabilities as you cant manage those created producers then;;;","20/Feb/10 07:48;davsclaus;This bug is only a problem when using
- recipinentList
- non singleton producers which there are only a few ones such as: FTP and MINA

The other components should be safe to use with recipientList;;;","20/Feb/10 11:37;slewis;Hey Claus, makes sense to me.  I've been toying with a tentative set of ""borrowProducer""/""returnProducer"" methods here on the producerCache so that the recipient list gets it from the pool but for some reason the test case appears to lock up.  Haven't had a chance to see why that is, I'd be interested if you get the same results.

Also I think the test case may expose a couple other leaks, though this was from earlier testing where I just ensured servicesToClose wasn't getting filled with MinaProducers.  If you come up with a fix though before I get a chance to work on this further I'd be happy to give the test case a long run just to see if any other issues crop up.;;;","20/Feb/10 11:59;davsclaus;Stan maybe I had better luck than you with the acquire / release thingy.

I have just committed a patch.

ProducerCache will no longer add created producers for management (with does not make too much sense as JMX can then grow too much).
Also I fixed an issue with stopping cached resources if they where cached using a LRUCache.
Now Camel should properly stop cached producers when being stopped.

Please give it a test on your system as well. For example the long running example.

trunk: 912103 + 912105;;;","21/Feb/10 01:50;slewis;figured you'd beat me to it :-).  I'll give it a good long test on Monday and have a look at what you changed...;;;","22/Feb/10 13:43;slewis;@Claus, ah, okay your fix also changes the behavior of the test also, but I like your fix better anyway.  I've modified the test case so that new messages are pumped into the route every second so it keeps running, will let this run for awhile and see if anything happens.;;;","22/Feb/10 14:18;slewis;Seems to be a leak in either maven or log4j that this test exposes, if I set the root logger to DEBUG it gets an OOM pretty quickly, have changed the log4j.properties to log to a file instead, that seems to have taken care of that problem, now just waiting to see if there's any other issues.;;;","22/Feb/10 18:02;slewis;Let a test run all morning here with the above changes and Claus's fix, no OOMs and memory usage remained in a stable pattern, so this should be all set.;;;","23/Feb/10 10:17;davsclaus;Stan that is great.

Yeah it was a bad move by Claus to enlist Producer's for management ;). Wonder how we slipped this for 2 releases?

I actually think we should just enlist producers only if CamelContext is in state of starting. Then we get the starting Producers enlisted which are the ones in your routes (eg in the to(xxx)).;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,
Camel Stringtemplate : lose all fields properties,CAMEL-2478,12487021,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:09,24/Apr/11 10:01,14/Jul/23 05:46,17/Feb/10 16:02,2.1.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,the component Camel-stringtemplate loses all fields properties after the generation of Result.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Feb/10 13:29;muellerc;camel-string-template-test.patch;https://issues.apache.org/jira/secure/attachment/12463141/camel-string-template-test.patch","17/Feb/10 13:31;muellerc;camel-string-template.patch;https://issues.apache.org/jira/secure/attachment/12463142/camel-string-template.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76510,,,Sun Apr 24 10:01:43 UTC 2011,,,,,,,,,,,"0|i01otr:",7791,,,,,,,,,,,,,,,,,,,,"17/Feb/10 13:24;muellerc;Provide the unit test which reports the bug.;;;","17/Feb/10 13:31;muellerc;Provide the patch. All camel-string-template unit tests succeed with this patch.;;;","17/Feb/10 16:02;davsclaus;Applied patch with thanks

trunk: 911034.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Freemarker: change the case of all fields properties Header,CAMEL-2477,12486978,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:04,24/Apr/11 10:01,14/Jul/23 05:46,17/Feb/10 16:06,2.1.0,,,,,,,,,,,,2.3.0,,,,,,,,0,,,,,,,,,"Using the Freemarker component doesn't respect the case matching of all fields of the header.

For example: the exchange of properties CorrelationID change the case matching, after using Freemarker component, it puts the property in lowercase correlationid.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Feb/10 12:50;muellerc;camel-freemaker-test.patch;https://issues.apache.org/jira/secure/attachment/12463139/camel-freemaker-test.patch","17/Feb/10 12:54;muellerc;camel-freemaker.patch;https://issues.apache.org/jira/secure/attachment/12463140/camel-freemaker.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76511,,,Sun Apr 24 10:01:41 UTC 2011,,,,,,,,,,,"0|i01otj:",7790,,,,,,,,,,,,,,,,,,,,"17/Feb/10 12:50;muellerc;Provide the unit test which reports the bug.;;;","17/Feb/10 12:54;muellerc;Provide the patch. All camel-freemaker unit tests succeed with this patch.;;;","17/Feb/10 15:52;abdellatif;I just did a test patch, it works well;;;","17/Feb/10 16:06;davsclaus;Applied patch with thanks to Christian for fixing all these 3 tickets

trunk: 911036.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel Velocity: change the case of all fields properties Header,CAMEL-2476,12487014,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:01,24/Apr/11 10:00,14/Jul/23 05:46,17/Feb/10 15:55,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-velocity,,,,0,,,,,,,,,"Using the velocity component doesn't respect the case matching of all fields of the header.

For example: the exchange of properties CorrelationID change the case matching, after using velocity component, it puts the property in lowercase correlationid.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Feb/10 12:25;muellerc;camel-velocity-test.patch;https://issues.apache.org/jira/secure/attachment/12463136/camel-velocity-test.patch","17/Feb/10 12:38;muellerc;camel-velocity.patch;https://issues.apache.org/jira/secure/attachment/12463138/camel-velocity.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76512,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,,,,,"0|i01otb:",7789,,,,,,,,,,,,,,,,,,,,"17/Feb/10 12:25;muellerc;I attached a unit test which reports the bug.;;;","17/Feb/10 12:38;muellerc;Provide the patch. All camel-velocity tests succeed with this patch.;;;","17/Feb/10 15:52;abdellatif;I just did a test patch, it works well;;;","17/Feb/10 15:55;davsclaus;Applied patch with thanks

trunk: 911028.;;;","24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HTTP (Stream) to File only writes part of InputStream to File,CAMEL-2475,12487238,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,toelen,toelen,16/Feb/10 21:44,24/Apr/11 10:01,14/Jul/23 05:46,24/Mar/10 07:21,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,,,,"The follwoing route only writes part of the http input stream to the file output (always
in chunks of 1,2,4 or 8KB).:

               <route id=""RestToTempDir"">
                       <from uri=""jetty:http://0.0.0.0:8162/muyrl"" />
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
                       <to
                               uri=""file://c:/temp/?fileName=${date:now:yyyyMMdd}/asm-${id}.xml"" />
                       <setBody>
                               <header>CamelFileExchangeFile</header>
                       </setBody>
               </route>

There are workarounds, but I would change streams to always read until EOF (if possible)

Possible workaround 1:
<convertBodyTo type=""java.lang.String""/> to force it to convert the stream to string before writing.

Possible workaround 2 is to write to a queue first

               <route id=""RestToTempDir"">
                       <from uri=""jetty:http://0.0.0.0:8162/myurl"" />
                       <inOnly uri=""activemq:topic=TempTopic"" />
                       <setBody>
                               <header>message.id</header>
                       </setBody>
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
               </route>
               <route id=""TempAssemblyToTempArchiveDirectory"">
                       <from uri=""activemq:topic:TempTopic"" />
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
                       <to
                               uri=""file://c:/xmlarchive_noxslt/?fileName=${date:now:yyyyMMdd}/asm-${id}.xml""/>
               </route>",,toelen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76513,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,,,,,"0|i01ot3:",7788,,,,,,,,,,,,,,,,,,,,"19/Mar/10 03:21;njiang;Hi Leen,

Can you try out the latest Camel 2.3.0 snapshot to see if the bug still there?
As we just applied a patch of CAMEL-2551 into the Came trunk. I think it could also fix the issue that you meet.


;;;","24/Mar/10 07:20;njiang;Hi Leen,

I just added [an unit test|http://svn.apache.org/viewvc?rev=926956&view=rev] to reproduce the bug that you showed, it looks CAMEL-2551 already fix the issue that you found.
So please try out the latest Camel 2.3.0 snapshot for it.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmpp not sends message if camel-application deployed to Felix Karaf,CAMEL-2464,12487303,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,pilgr,pilgr,11/Feb/10 13:37,24/Apr/11 09:57,14/Jul/23 05:46,15/May/10 17:58,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-xmpp,,,,0,,,,,,,,,"Through camel-xmpp my message sended succesfully in standalone camel application, but message not sends if application as a bundle deployed to Felix Karaf.

My route:
from(""timer://foo?fixedRate=true&period=10000&delay=10000"").setBody(constant(""Hello, i am message"")). 
  to(""xmpp://"" + XMPP_FROM_NAME + ""/masny@websphere"" + ""?password="" + XMPP_FROM_PASS); 

""camel:run"" command runs this route and succesfully sends message. 
But if i create a bundle and deploy it to Felix Karaf, my route not sends message, in DEBUG log i see :

DEBUG | xtenderThread-42 | DefaultCamelContext              | e.camel.impl.DefaultCamelContext  994 | ... Routes started 
 INFO  | xtenderThread-42 | DefaultCamelContext              | e.camel.impl.DefaultCamelContext  997 | Apache Camel 2.1.0 (CamelContext:camelContext) started 
 INFO  | xtenderThread-42 | OsgiBundleXmlApplicationContext  | ractOsgiBundleApplicationContext  327 | Publishing application context as OSGi service with properties {org.springframework.context.service.name=try-xmpp, Bundle-SymbolicName=try-xmpp, Bundle-Version=0.1.0} 
 DEBUG | xtenderThread-42 | OsgiBundleXmlApplicationContext  | ractOsgiBundleApplicationContext  341 | Publishing service under classes {org.springframework.osgi.context.DelegatedExecutionOsgiBundleApplicationContext, org.springframework.osgi.context.ConfigurableOsgiBundleApplicationContext, org.springframework.context.ConfigurableApplicationContext, org.springframework.context.ApplicationContext, org.springframework.context.Lifecycle, org.springframework.beans.factory.ListableBeanFactory, org.springframework.beans.factory.HierarchicalBeanFactory, org.springframework.context.MessageSource, org.springframework.context.ApplicationEventPublisher, org.springframework.core.io.support.ResourcePatternResolver, org.springframework.beans.factory.BeanFactory, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.DisposableBean} 
 DEBUG | xtenderThread-42 | try-xmpp                         | ?                                   ? | ServiceEvent REGISTERED 
 DEBUG | xtenderThread-42 | BlueprintListener                | actory$SpringApplicationListener  140 | Spring app state changed to Started for bundle 93 
 DEBUG | xtenderThread-42 | BlueprintListener                | actory$SpringApplicationListener  140 | Spring app state changed to Started for bundle 93 
 INFO  | xtenderThread-42 | ContextLoaderListener            | BundleApplicationContextListener   45 | Application context successfully refreshed (OsgiBundleXmlApplicationContext(bundle=try-xmpp, config=osgibundle:/META-INF/spring/*.xml)) 
 INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 8f812d3e-15cc-4ca3-b6c0-4077beef75bc >>> (route30) from(timer://foo?delay=10000&fixedRate=true&period=10000) --> setBody[Hello, i am message] <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 12:18:13 EET 2010}, BodyType:null, Body:null 
 INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 8f812d3e-15cc-4ca3-b6c0-4077beef75bc >>> (route30) setBody[Hello, i am message] --> xmpp://wsbise@websphere/masny@websphere?password=123456789 <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 12:18:13 EET 2010}, BodyType:String, Body:Hello, i am message 
 DEBUG | foo              | XmppPrivateChatProducer          | ent.xmpp.XmppPrivateChatProducer   46 | Creating XmppPrivateChatProducer to participant masny@websphere 
 DEBUG | foo              | CachedIntrospectionResults       | beans.CachedIntrospectionResults  151 | Not strongly caching class [org.apache.camel.management.mbean.ManagedProducer] because it is not cache-safe 
 DEBUG | foo              | DefaultManagementAgent           | anagement.DefaultManagementAgent  304 | Registered MBean with objectname: org.apache.camel:context=masny/camelContext,type=producers,name=XmppPrivateChatProducer(0x11c0dc6) 
 DEBUG | foo              | XmppPrivateChatProducer          | pache.camel.impl.DefaultProducer   66 | Starting producer: Producer[xmpp://wsbise@websphere/masny@websphere?password=123456789] 
 DEBUG | foo              | ProducerCache                    | .apache.camel.impl.ProducerCache  211 | Adding to producer cache with key: Endpoint[xmpp://wsbise@websphere/masny@websphere?password=123456789] for producer: Producer[xmpp://wsbise@websphere/masny@websphere?password=123456789] 
 DEBUG | foo              | DefaultErrorHandler              | rg.apache.camel.processor.Logger  197 | Failed delivery for exchangeId: 8f812d3e-15cc-4ca3-b6c0-4077beef75bc. On delivery attempt: 0 caught: java.lang.NullPointerException 
 DEBUG | foo              | DefaultErrorHandler              | processor.RedeliveryErrorHandler  411 | This exchange is not handled so its marked as failed: Exchange[Message: Hello, i am message] 
 DEBUG | foo              | Pipeline                         | .apache.camel.processor.Pipeline   99 | Message exchange has failed so breaking out of pipeline: Exchange[Message: Hello, i am message] Exception: java.lang.NullPointerException 
 ERROR | foo              | TimerConsumer                    | rg.apache.camel.processor.Logger  248 | 
java.lang.NullPointerException 
        at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84) 
        at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:887) 
        at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:834) 
        at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1276) 
        at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140) 
        at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:52) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95) 
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) 
        at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) 
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) 
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) 
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:103) 
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:50) 
        at java.util.TimerThread.mainLoop(Timer.java:512) 
        at java.util.TimerThread.run(Timer.java:462) 

On Felix installed all requirement bundles (camel-osgi, camel-xmpp, etc).

Full project attached in topic
http://old.nabble.com/camel-xmpp-not-sends-message-in-Felix-Karaf-td27544316.html","Java 1.5
Apache Felix Karaf 1.2
org.apache.felix.framework - 2.0.1
Windows 2003 version 5.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SMX4-484,"12/Feb/10 10:09;pilgr;smack-3.1.0-bundle.jar;https://issues.apache.org/jira/secure/attachment/12463130/smack-3.1.0-bundle.jar","11/Feb/10 13:38;pilgr;try-xmpp-project.jar;https://issues.apache.org/jira/secure/attachment/12463127/try-xmpp-project.jar",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76514,,,Sun Apr 24 09:57:34 UTC 2011,,,,,,,,,,,"0|i01oqv:",7778,,,,,,,,,,,,,,,,,,,,"11/Feb/10 13:38;pilgr;my eclipse project;;;","11/Feb/10 14:33;slewis;Hey Aleksey, will have to try this, I had successfully used the xmpp component in an older version of SMX4 but things may have changed since then.  What are you using for an XMPP server BTW?  Can you see if specifying the port and serviceName argument changes the behavior while I'm looking into this?;;;","11/Feb/10 14:52;pilgr;I use local Openfire server.
Port and service name not changing. Endpoint configured by string ""xmpp://wsbise@websphere/masny@websphere?password=123456789]"", as see in log.

I tried to send a message from my custom bean (by Smack API), not using camel-xmpp. And received the same error.

16:32:29,653 | INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 936982fe-f449-40ce-a426-0e3d9724126b >>> (route33) from(timer://foo?fixedRate=true&period=10000) --> setBody[Hello, i am message] <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 16:32:29 EET 2010}, BodyType:null, Body:null
16:32:29,653 | INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 936982fe-f449-40ce-a426-0e3d9724126b >>> (route33) setBody[Hello, i am message] --> bean://helper?method=notifyJabberClient <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 16:32:29 EET 2010}, BodyType:String, Body:Hello, i am message
16:32:29,653 | DEBUG | foo              | DefaultListableBeanFactory       | tory.support.AbstractBeanFactory  214 | Returning cached instance of singleton bean 'helper'
16:32:30,215 | DEBUG | foo              | DefaultErrorHandler              | rg.apache.camel.processor.Logger  197 | Failed delivery for exchangeId: 936982fe-f449-40ce-a426-0e3d9724126b. On delivery attempt: 0 caught: java.lang.NullPointerException
16:32:30,215 | DEBUG | foo              | DefaultErrorHandler              | processor.RedeliveryErrorHandler  411 | This exchange is not handled so its marked as failed: Exchange[Message: Hello, i am message]
16:32:30,215 | DEBUG | foo              | Pipeline                         | .apache.camel.processor.Pipeline   99 | Message exchange has failed so breaking out of pipeline: Exchange[Message: Hello, i am message] Exception: java.lang.NullPointerException
16:32:30,215 | ERROR | foo              | TimerConsumer                    | rg.apache.camel.processor.Logger  248 | 
java.lang.NullPointerException
	at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)
	at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:887)
	at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:834)
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1276)
	at mti.try_xmpp.Helper.notifyJabberClient(Helper.java:15)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:195)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:115)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:117)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:95)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:103)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:50)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)


May be it is a bug in Smack-bundle or Felix?;;;","11/Feb/10 15:06;slewis;Could be, we're using 3.0.4 in Camel.  The thing to do probably is to write a simple bundle that just uses smack/smackx and see if that shows the same problem, then try 3.1.0.  I can work on bumping the version of smack up to 3.1.0 in camel also.;;;","12/Feb/10 10:09;pilgr;I tried replace Smack from 3.0.4 to 3.1.0 and camel-xmpp properly work now. And successfully sending messages! :) 

To do this, I made:
1. feature:install camel-xmpp 2.1.0
2. osgi:uninstall two smack-bundle v.3.0.4
3. osgi:install my custom bundle, which include two smack library v.3.1.0 and manually created MANIFEST.MF
4. refresh camel-xmpp for refresh import dependencies 
5. osgi:start my try-xmpp bundle

My custom bundle is attached.;;;","12/Feb/10 11:33;njiang;We need to upgrade the smack bundle in servicemix bundle module, in this way we can support it out of box.
Stan , you can take [this pom |https://svn.apache.org/repos/asf/servicemix/smx4/bundles/trunk/smack-3.0.4/pom.xml] as an example.
And we also need to update apache-camel features file for this upgrading. 
BTW,
I fixed the issue of maven failed to resolve the smack 3.1.0 by adding the smack maven repository to camel-xmpp pom.
 ;;;","12/Feb/10 13:11;slewis;Okay Willem, will try and get this done today.;;;","12/Feb/10 14:49;slewis;Hey Willem, have created SMX4-484 with a patch.  Do I need to wait for this patch to be committed before updating the camel features file?;;;","12/Feb/10 15:28;njiang;@Stan,  Yes, we need to wait for the servicemix patch to be applied.;;;","16/Feb/10 14:39;slewis;@Willem, Jean-Baptiste applied my patch there, just curious should I wait until that bundle is released or is it okay to reference a snapshot version from the features file?  I'm guessing this needs to wait until the updated smack bundle is actually released, just wanted to double-check.;;;","10/Apr/10 14:34;davsclaus;Stan any update on this one, has the bundle been released?;;;","12/Apr/10 11:37;slewis;No, doesn't look like my bundle's been released yet, the latest one on repo1.maven.org is 3.0.4_2;;;","15/May/10 17:56;davsclaus;Stan Smack 3.1 osgi bundle is now avail in central maven repo
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.smack/3.1.0_1/

I think its just a matter of updating the features.xml to use this version;;;","15/May/10 17:57;davsclaus;Has been updated in features.xml
<smack-bundle-version>3.1.0_1</smack-bundle-version>;;;","24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,
HttpHeaderFilterStrategy should filter the HTTP 'Date' header when applyFilterToCamelHeaders is called,CAMEL-2458,12486474,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,muellerc,muellerc,10/Feb/10 17:39,24/Apr/11 10:01,14/Jul/23 05:46,11/Feb/10 05:39,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,,,,"See [rfc2616|http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5].",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Feb/10 21:49;muellerc;HttpHeaderFilterStrategyTest_20100210.patch;https://issues.apache.org/jira/secure/attachment/12463113/HttpHeaderFilterStrategyTest_20100210.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76516,,,Sun Apr 24 10:01:24 UTC 2011,,,,,,,,,,,"0|i01opj:",7772,,,,,,,,,,,,,,,,,,,,"10/Feb/10 21:49;muellerc;Provided the patch;;;","11/Feb/10 05:39;njiang;Applied patch with thank to Christian.
http://svn.apache.org/viewvc?rev=908736&view=rev;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"WARNING log of JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint don't have the ManagedResource annotation",CAMEL-2456,12487228,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,10/Feb/10 02:13,24/Apr/11 10:01,14/Jul/23 05:46,12/Feb/10 07:09,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-jms,,,,0,,,,,,,,,"Here is the mail thread which discusses about this issue.
http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate%3A-InvalidMetadataException-tp27520096p27520096.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76517,,,Sun Apr 24 10:01:11 UTC 2011,,,,,,,,,,,"0|i01op3:",7770,,,,,,,,,,,,,,,,,,,,"10/Feb/10 06:21;davsclaus;I do NOT think we should enlist temporary JMS queues in JMX
management, the overhead is way to high for that.
Since those queues are temporary they live for a short time and
management is more about long lived resources to manage.

Can we do a -1 on this and implement logic to skip trying to register
those kind of endpoints for management.;;;","10/Feb/10 06:42;njiang;Hi Claus

I think we should provide the management for the temporary Queue, as these endpoints are exiting in the camel context.
Client may want to ask managed information about these endpoint.
If we shutdown the camel context , all the camel managed resources are gone, and it will not introduce any further burden. ;;;","10/Feb/10 06:53;davsclaus;Willem *yes* it will

JMX puts *considerable* overhead on endpoint registration. And temporary endpoints should *newer* be registered in JMX.
The temporary endpoint uses unique uri's and therefore you will keep adding managed endpoints to JMX which end the end will downgrade your system.
All together it impacts performance unnecessary.

We have had such issues in the past where people over days will accumulate millions of endpoints in JMX and cause high memory usage.
In the end causing people to have to shutdown and restart their system.

So please do a -1.;;;","10/Feb/10 07:28;njiang;Hi Claus,

I checked the code of  JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint and they are singleton endpoint,
and we hit the JMX exception as current Camel only register the singleton endpoint into JMX agent to avoid the situation that you described.

It could be easy to let camel skip these endpoint by checking the ManagedResource annotation, but I still want to know if the singleton endpoint still have the potential JMX issue that you mentioned.
;;;","10/Feb/10 12:44;davsclaus;This issue is when the end user is sending using ProducerTemplate the reply manually.

If using Camel request/reply out of the box, Camel will not enlist temporary queues as endpoints. This is good as the overhead is thus only when end user does it manually.;;;","10/Feb/10 14:18;davsclaus;The only problem I see is if the end user uses a lot of different temporary JMS queues with different names as they will then be enlisted in JMX to no avail.;;;","12/Feb/10 07:08;njiang;Hi Claus,

I agree if the user use the ExchangeID as the temporary queue and use that to implement request/reply message exchange pattern, register these kind of temporary queues to JMX agent will be a big issue.

So I reverted my last commit of this issue and find better new way to fix this WARNING log issue.
And now these JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint will not be registered to JMX agent.

;;;","12/Feb/10 07:23;davsclaus;Willem

You current solutions is great. Good work.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,,,,,,,
"HttpHeaderFilterStrategy dosn't filters out 'Cache-Control', 'Connection', 'Pragma', 'Trailer', 'Transfer-Encoding', 'Upgrade', 'Via' and 'Warning' in method applyFilterToCamelHeaders",CAMEL-2452,12487843,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,06/Feb/10 13:56,03/Nov/10 22:04,14/Jul/23 05:46,03/Nov/10 22:04,2.1.0,,,,,,,,,,,,2.3.0,,,,camel-http,,,,0,,,,,,,,,HttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. 'Transfer-Encoding' instead of 'transfer-encoding').,All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Feb/10 16:37;muellerc;HttpHeaderFilterStrategy.patch;https://issues.apache.org/jira/secure/attachment/12463122/HttpHeaderFilterStrategy.patch","06/Feb/10 16:37;muellerc;HttpHeaderFilterStrategyTest.patch;https://issues.apache.org/jira/secure/attachment/12463101/HttpHeaderFilterStrategyTest.patch",,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76518,,,Wed Nov 03 22:04:04 UTC 2010,,,,,,,,,,,"0|i01oo7:",7766,,,,,,,,,,,,,,,,,,,,"06/Feb/10 15:03;davsclaus;http headers are case *insensitive* so you can spell them how you like;;;","06/Feb/10 16:23;davsclaus;I have moved this to 2.3 as I do not want Hadrian to hold up building the 2.2 release if he things this ticket must be fixed first.

Christian can you describe a bit more what you think is the problem?
Doesn't the filter ignore case when filtering? If not you can add that into the reg exp to tell it to ignore case.;;;","06/Feb/10 16:37;muellerc;Hey Claus,
you are too fast for me... :-)

I attached a unit test to show what the problem is (in my opinion).
You are right, the http header are case intensive, but the HttpHeaderFilterStrategy (extends DefaultHeaderFilterStrategy) expect the filter keys in lower case, if the 'lowerCase' attribute is set to true (which is the case for HttpHeaderFilterStrategy). If the filter keys are defined in upper case or camel case, the filter will never applied.

{code}
        if (filter != null) {
            if (isLowerCase()) {
                if (filter.contains(headerName.toLowerCase())) {
                    return true;
                }
            } else {
                if (filter.contains(headerName)) {
                    return true;
                }
            }
        }
{code}

Regards,
Christian;;;","10/Feb/10 09:21;muellerc;Claus,
could you please have a look on this issue and patch. [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] depends on this and I planed to deliver the patch for [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] in the next tree days.

The ""problem"" is, that HttpClient 4.0.1 checks the request header of the presents of some header which must not in, e.g. Transfer-Encoding. This header (and the other headers list in the issue name) should be filtered by the HttpHeaderFilterStrategy:

{code:title=HttpHeaderFilterStrategy.java}
public class HttpHeaderFilterStrategy extends DefaultHeaderFilterStrategy {

    public HttpHeaderFilterStrategy() {
        initialize();
    }

    protected void initialize() {
        getOutFilter().add(""content-length"");
        getOutFilter().add(""content-type"");
        // Add the filter for the Generic Message header
        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5
        getOutFilter().add(""Cache-Control"");
        getOutFilter().add(""Connection"");
        getOutFilter().add(""Pragma"");
        getOutFilter().add(""Trailer"");
        getOutFilter().add(""Transfer-Encoding"");
        getOutFilter().add(""Upgrade"");
        getOutFilter().add(""Via"");
        getOutFilter().add(""Warning"");

    setLowerCase(true);

        // filter headers begin with ""Camel"" or ""org.apache.camel""
        // must ignore case for Http based transports
        setOutFilterPattern(""(?i)(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*"");
        }
}
{code}

But DefaultHeaderFilterStrategy compares the lower case strings, if lowerCase is set to true (which is the case for HttpHeaderFilterStrategy)

{code:title=DefaultHeaderFilterStrategy .java}
if (filter != null) {
    if (isLowerCase()) {
        if (filter.contains(headerName.toLowerCase())) {
            return true;
        }
    } else {
        if (filter.contains(headerName)) {
            return true;
        }
    }
}
{code}

This imply, that 'Transfer-Encoding' is comparing with 'transfer-encoding' what never match and this header will be never filtered out.

Tanks,
Christian;;;","10/Feb/10 14:19;davsclaus;Okay let me look at the patches;;;","10/Feb/10 14:25;davsclaus;What about {{Date}} header?
http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5;;;","10/Feb/10 14:29;davsclaus;trunk: 908517.

Thanks for the patch Christian.;;;","02/Nov/10 20:54;unmarshall;Hi,

In Camel 2.5 HttpHeaderFilterStrategy still contains:
getOutFilter().add(""transfer-encoding"");
As per the issue the case should be camel case and not all lower case.

Can we expect a patch for 2.5 version?

Regards,
Madhav;;;","02/Nov/10 22:23;muellerc;I don't see any problems with this code. The patch changed the camel case headers to lower case headers because HttpHeaderFilterStrategy set lower case to true and compares the lower case String of ""Transfer-Encoding"" which is ""transfer-encoding"" with the filter entry which is also ""transfer-encoding"". What is your problem in concrete?

Cheers,
Christian;;;","03/Nov/10 06:48;unmarshall;Hi Christian,

Please refer to the issue posted @ http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3247495
I initially felt that this was causing the problem but then after seeing your comment it seems that this is not the problem.

Unless you feel otherwise, please close the issue.

regards,
madhav;;;","03/Nov/10 22:04;muellerc;Madhav opened [CAMEL-3306|https://issues.apache.org/activemq/browse/CAMEL-3306] to track his issue.;;;",,,,,,,,,,,,,,,,,,,
HL7MLLPDecoder fails if message length is exactly 1022,CAMEL-2451,12487176,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mrt1nz,mrt1nz,mrt1nz,05/Feb/10 08:56,03/Nov/10 05:13,14/Jul/23 05:46,05/Feb/10 09:14,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-hl7,,,,0,,,,,,,,,When an HL7 message length is exactly 1022 then the two end control charcters are not read from the same packet/buffer. This causes HL7MLLPDecoder.scan() method to fail.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76519,,,Fri Feb 05 09:10:38 UTC 2010,,,,,,,,,,,"0|i01onz:",7765,,,,,,,,,,,,,,,,,,,,"05/Feb/10 09:02;mrt1nz;Although a bit late, I'd like to checkin a fix for the upcoming 2.2 release. If there are any objections please let me know.;;;","05/Feb/10 09:09;davsclaus;Go ahead. You got until Hadrian wakes up :);;;","05/Feb/10 09:10;mrt1nz;I love time zones :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-osgi module should include the META-INF/services/... file from camel-spring,CAMEL-2450,12487842,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Feb/10 12:42,03/Nov/10 05:13,14/Jul/23 05:46,04/Feb/10 13:14,2.1.0,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"The shade plugin doesn't include the files in META-INF/services from camel-spring bundle, we should fix it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76520,,,Thu Feb 04 13:14:11 UTC 2010,,,,,,,,,,,"0|i01onr:",7764,,,,,,,,,,,,,,,,,,,,"04/Feb/10 13:14;njiang;trunk 
http://svn.apache.org/viewvc?rev=906473&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean should  propagate CONTENT_TYPE for other camel component to use,CAMEL-2447,12487836,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Feb/10 02:45,03/Nov/10 05:13,14/Jul/23 05:46,04/Feb/10 03:38,2.0.0,2.0-M3,2.1.0,,,,,,,,,,2.2.0,,,,camel-cxf,,,,0,,,,,,,,,"There is no ""content-type"" header return from the below route
{code}
 <route>

      <from uri=""jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true""/>

      <to uri=""cxfbean:EmployeesPOJO""/>

  </route>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76522,,,Thu Feb 04 03:38:16 UTC 2010,,,,,,,,,,,"0|i01on3:",7761,,,,,,,,,,,,,,,,,,,,"04/Feb/10 03:38;njiang;trunk
http://svn.apache.org/viewvc?rev=906331&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BatchProcesser.processExchange needs to catch Throwable,CAMEL-2445,12487837,12487839,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,slewis,slewis,03/Feb/10 21:57,03/Nov/10 05:13,14/Jul/23 05:46,04/Feb/10 07:09,1.6.2,2.1.0,,,,,,,,,,,1.6.3,2.2.0,,,camel-core,,,,0,,,,,,,,,"If an aggregator sends an exchange to a processor that throws an Error this causes the thread started by BatchProcessor to exit, exchanges will then accumulate in the aggregator until an OutOfMemoryError occurs.

This patch sorts that out and adds a unit test, however there's another problem that I'm still looking into, namely that BatchProcessor just uses an instance of LoggingErrorHandler as it's exception handler, so any exceptions/errors caught by this processor will just get logged and not follow the normal Camel error handling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Feb/10 00:21;jgenender;1.x.patch;https://issues.apache.org/jira/secure/attachment/12463089/1.x.patch","04/Feb/10 00:21;jgenender;2.x.patch;https://issues.apache.org/jira/secure/attachment/12463088/2.x.patch","03/Feb/10 22:10;slewis;patch-1.x.txt;https://issues.apache.org/jira/secure/attachment/12463086/patch-1.x.txt","03/Feb/10 22:15;slewis;patch-2.x.txt;https://issues.apache.org/jira/secure/attachment/12463129/patch-2.x.txt",,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76523,,,Thu Feb 04 07:09:26 UTC 2010,,,,,,,Patch Available,,,,"0|i01omn:",7759,,,,,,,,,,,,,,,,,,,,"04/Feb/10 00:01;jgenender;This is caused by the the trapping of Exception in the BatchSender but wont fire for Throwable (i.e. NoSuchMethodError/LingageError, etc).  Thus when the exceptions fire, it continues on about its way, filling the LinkedList and thus a memory leak ensues.  The patch really should be at where it is already looking for errors.  Patches for 1.x and 2.x. are attached.;;;","04/Feb/10 06:16;davsclaus;I will change Camel 2.x to catch all kind of exceptions in CAMEL-2448. Then the regular camel error handler will also handle this NoSuchMethodException which will at minimum be logged, so there is a trace in the log now.

In 1.x we will patch it with your patches so BatchProcessor will log the exceptions.

I have adjusted your patch a bit as you need to catch the exception in the loop so Camel will process the next exchange to drain the aggregated exceptions. Otherwise they will be kept in the memory and it will only process 1 exchange at every trigger. And thus it can lead to consume more memory if your fill in more messages than it can drain.;;;","04/Feb/10 06:25;davsclaus;Merged to 1.x: 906376.;;;","04/Feb/10 07:09;davsclaus;Willem applied patch to trunk: 906342

And I refined the patch a bit: 906381;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Log Component documentation for ""showAll"" option is misleading",CAMEL-2444,12487835,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,mbmather,mbmather,03/Feb/10 20:27,03/Nov/10 05:13,14/Jul/23 05:46,04/Feb/10 06:13,2.1.0,,,,,,,,,,,,2.2.0,,,,documentation,,,,0,,,,,,,,,"Log Component documentation for ""showAll"" option is misleading or the option does not work as expected.

""showAll 	 false 	 Quick option for turning all options on.""

There appear to be several options that are not turned as expected such as ""multiline"" and ""showStackTrace"", etc..  

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76524,,,Thu Feb 04 06:13:51 UTC 2010,,,,,,,,,,,"0|i01omf:",7758,,,,,,,,,,,,,,,,,,,,"04/Feb/10 06:13;davsclaus;Thanks for reporting. I have updated the wiki and fixed an issue in the code in terms of showStrackTrace with showAll

trunk: 906375;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Explicit version ranges on javax.* imports in camel-cxf bundle manifest cause a problem when running on equinox via pax-runner,CAMEL-2442,12487827,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eglynn,eglynn,03/Feb/10 10:50,03/Nov/10 05:13,14/Jul/23 05:46,03/Feb/10 12:23,2.1.0,,,,,,,,,,,,1.6.3,2.2.0,,,camel-cxf,,,,0,,,,,,,,,"There's a mismatch between the explicit version constraints on the javax.activation, javax.annotation, javax.jws, javax.xml.ws etc. packages in the camel-cxf manifest and the actual version assigned to these packages by Equinox when pulled in via the system packages from the Java6 rt.jar.

This causes bundle resolution failures such as the following:

{code}
org.osgi.framework.BundleException: The bundle could not be resolved. Reason: Package uses conflict: Import-Package: org.apache.camel; version=""2.2.something""
{code}

Normally this issue could be suppressed by configuring the Equinox system packages to exclude the problematic javax.* packages. However, we don't have enough control over this in pax-runner 1.3 (which unilaterally adds these packages in the generated config.ini).

The solution is to loosen the version constraints on these imports in the camel-cxf bundle manifest.","$ java -version
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) Server VM (build 14.2-b01, mixed mode)
$ uname -a
Linux geodesic 2.6.28-17-generic #58-Ubuntu SMP Tue Dec 1 18:57:07 UTC 2009 i686 GNU/Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/10 10:53;eglynn;camel-2442.patch;https://issues.apache.org/jira/secure/attachment/12463085/camel-2442.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76525,,,Wed Feb 03 12:23:56 UTC 2010,,,,,,,Patch Available,,,,"0|i01olz:",7756,,,,,,,,,,,,,,,,,,,,"03/Feb/10 10:53;eglynn;Please review and apply attached patch is considered OK.;;;","03/Feb/10 11:10;davsclaus;Willem will you take care of this ASAP;;;","03/Feb/10 11:14;njiang;Claus: yeah, I'm working on it now.
;;;","03/Feb/10 12:23;njiang;Hi Eoghan,

I just changed you patch a little bit and used * to avoid specify to reduce the package number of import section.
I also merged the patch into camel 1.x branch.

BTW, I checked other camel module such as camel-jaxb, camel-jms, etc, they don't have the issue that you meet. 

;;;","03/Feb/10 12:23;njiang;camel trunk
http://svn.apache.org/viewvc?rev=906013&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=906019&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Consuming from absolute paths can cause issue on Windows when moving file when done,CAMEL-2439,12487831,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Feb/10 16:59,03/Nov/10 05:13,14/Jul/23 05:46,02/Feb/10 17:26,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"When using a file consumer with an absolute path, eg {{from(""file:/data"")}} then when the process is done and it wants to move the file to {{.camel}} sub dir of {{/data}} it may not do that correctly on Windows.

The issue is the logic in Camel is based upon that a path starting with \ is considered absolute, as it is on Unix OS and other platforms. Where as on Windows {{java.io.File}} returns {{false}} for such files. The other return {{true}}. So we need to cater for this and make Windows return {{true}} as well so the logic is consistent across OS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76526,,,Tue Feb 02 17:26:43 UTC 2010,,,,,,,,,,,"0|i01olb:",7753,,,,,,,,,,,,,,,,,,,,"02/Feb/10 17:26;davsclaus;trunk: 905715.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanProcessor - Should differentiate between void and method returning null values,CAMEL-2436,12487774,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Feb/10 09:14,26/Aug/11 06:41,14/Jul/23 05:46,02/Feb/10 11:59,2.0.0,2.1.0,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"When invoking a bean method it should better detect whether the bean is a *void* or has a return type.
And if it returns {{null}} it should be regarded as a valid response and set as body.

See nabble
http://old.nabble.com/filtering-messages-ts27403559.html",,,,,,,,,,,,,,,,,,,,,,CAMEL-3354,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,63660,,,Tue Feb 02 11:59:10 UTC 2010,,,,,,,,,,,"0|i01okn:",7750,,,,,,,,,,,,,,,,,,,,"02/Feb/10 11:59;davsclaus;trunk: 905594.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident throwing exception,CAMEL-2430,12487829,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chrislovecnm,chrislovecnm,31/Jan/10 22:11,03/Nov/10 05:13,14/Jul/23 05:46,01/Feb/10 02:17,,,,,,,,,,,,,2.2.0,,,,examples,,,,0,,,,,,,,,"When I execute mvn jetty:run the following exception is thrown:

{code}WARNING: Could not find endpoint/port for {http://reportincident.example.camel.apache.org}ReportIncidentEndpointPort in wsdl. Using {http://reportincident.example.camel.apache.org}ReportIncidentService.
2010-01-31 15:07:35,342 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)

2010-01-31 15:07:35.347::WARN:  Failed startup of context org.mortbay.jetty.plugin.Jetty6PluginWebAppContext@5952e9a8{/camel-example-reportincident,/data/workspace/examples_orig/camel-example-reportincident/src/main/webapp}
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593

Caused by: java.net.MalformedURLException: no protocol: /incident
        at java.net.URL.<init>(URL.java:567)
        at java.net.URL.<init>(URL.java:464)
        at java.net.URL.<init>(URL.java:413)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.<init>(JettyHTTPDestination.java:96)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:116)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
        at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
        at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:106){code}

I have edited the exception to make it shorter.","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
jetty-6.1.19
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76528,,,Mon Feb 01 02:17:48 UTC 2010,,,,,,,,,,,"0|i01ojb:",7744,,,,,,,,,,,,,,,,,,,,"01/Feb/10 02:17;njiang;camel trunk
http://svn.apache.org/viewvc?rev=905170&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In camel-cache ""diskStorePath"" property not efficient",CAMEL-2428,12487826,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,skydjol,skydjol,29/Jan/10 11:39,03/Nov/10 05:13,14/Jul/23 05:46,29/Jan/10 11:52,2.1.0,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"If you want to change path to persisent cache with ""diskStorePath"", it has no effect  because cacheManager erase this value.

In ""addCacheNoCheck"" method, ""setDiskStorePath"" call with ""diskStorePath"" CacheManager property value.

{code:title=CacheManager.java|borderStyle=solid}

    public void addCache(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        checkStatus();
        if (cache == null) {
            return;
        }
        addCacheNoCheck(cache);
    }

    private void addCacheNoCheck(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        if (ehcaches.get(cache.getName()) != null) {
            throw new ObjectExistsException(""Cache "" + cache.getName() + "" already exists"");
        }
        cache.setCacheManager(this);
        cache.setDiskStorePath(diskStorePath);
        cache.initialise();
        try {
            cache.bootstrap();
        } catch (CacheException e) {
            LOG.log(Level.WARNING, ""Cache "" + cache.getName() + ""requested bootstrap but a CacheException occured. "" + e.getMessage(), e);
        }
        ehcaches.put(cache.getName(), cache);
        if (cache instanceof Cache) {
            caches.put(cache.getName(), cache);
        }

        //Don't notify initial config. The init method of each listener should take care of this.
        if (status.equals(Status.STATUS_ALIVE)) {
            cacheManagerEventListenerRegistry.notifyCacheAdded(cache.getName());
        }
    }
{code} 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76529,,,Fri Jan 29 11:52:26 UTC 2010,,,,,,,,,,,"0|i01oiv:",7742,,,,,,,,,,,,,,,,,,,,"29/Jan/10 11:50;davsclaus;That code is in EHCache and *not* in Camel.

You need to enable disk overflow by {{overflowToDisk=true}} before Camel will use the diskStorePath option.;;;","29/Jan/10 11:52;davsclaus;I have made it possible to set the option regardless or not overflowToDisk was set or not

trunk: 904473.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXF Header ""ResponseContext"" cannot be filtered by HeaderFilterStrategy",CAMEL-2426,12487554,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,29/Jan/10 02:41,03/Nov/10 05:13,14/Jul/23 05:46,29/Jan/10 21:38,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-cxf,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76530,,,Fri Jan 29 21:38:08 UTC 2010,,,,,,,,,,,"0|i01oif:",7740,,,,,,,,,,,,,,,,,,,,"29/Jan/10 21:38;wtam;Committed revision 904624.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failed of CxfMtomRouterPayloadModeTest,CAMEL-2425,12487828,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,njiang,njiang,29/Jan/10 02:39,03/Nov/10 05:13,14/Jul/23 05:46,31/Jan/10 04:36,,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"After upgraded the CXF version to 2.2.6, we got a random test error of CxfMtomRouterPayloadModeTest,testInvokingServiceFromCXFClient() on TeamCity
Here is the stack trace:
{code}
javax.xml.ws.soap.SOAPFaultException: Unmarshalling Error: null
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
at $Proxy72.detail(Unknown Source)
at org.apache.camel.component.cxf.mtom.CxfMtomRouterPayloadModeTest.testInvokingServiceFromCXFClient(CxfMtomRouterPayloadModeTest.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:339)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:749)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:623)
at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:128)
at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:671)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2205)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2084)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1982)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:637)
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:483)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:309)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:261)
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
... 29 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:671)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:667)
at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.handleParseConversionException(Loader.java:267)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:65)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.text(UnmarshallingContext.java:494)
at com.sun.xml.bind.v2.runtime.unmarshaller.MTOMDecorator.startElement(MTOMDecorator.java:103)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
... 48 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
... 58 more
Caused by: java.lang.NullPointerException
at org.apache.cxf.attachment.LazyDataSource.getInputStream(LazyDataSource.java:67)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.get(Base64Data.java:188)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.getExact(Base64Data.java:154)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.decodeBase64(RuntimeBuiltinLeafInfoImpl.java:827)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.access$100(RuntimeBuiltinLeafInfoImpl.java:111)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:652)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:655)
at com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$CompositeTransducedAccessorImpl.parse(TransducedAccessor.java:241)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:61)
... 53 more 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76531,,,Sat Feb 06 02:38:13 UTC 2010,,,,,,,,,,,"0|i01oi7:",7739,,,,,,,,,,,,,,,,,,,,"31/Jan/10 04:36;wtam;New Revision: 904978;;;","05/Feb/10 21:53;alitokmen;I have the impression this also sometimes happens with CAMEL 2.0.0, CXF 2.2.2. We use Tomcat 6.0.20 as HTTP server via OSGi (it therefore isn't even a problem that's Jetty-specific as mentioned in the revision's comment);;;","05/Feb/10 21:58;alitokmen;PS: I only managed to replicate this issue on CAMEL 2.0.0 and CXF 2.2.2 on a Mac. Doesn't happen on Linux or Windows.;;;","06/Feb/10 02:38;njiang;Hi Savas, 
Can you try out the latest Camel 2.2-SNAPSHOT ?
I think William already fixed that issue.
 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"In camel-cache CacheConfiguration ""diskExpiryThreadIntervalSeconds"" not set correctly",CAMEL-2420,12487822,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skydjol,skydjol,28/Jan/10 16:42,03/Nov/10 05:13,14/Jul/23 05:46,29/Jan/10 09:19,2.1.0,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"See CacheConfiguration.java

{code:title=CacheConfiguration.java|borderStyle=solid}

 if (cacheSettings.containsKey(""diskExpiryThreadIntervalSeconds"")) {
	setTimeToLiveSeconds(Long.valueOf((String) cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue());
} 

{code} ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76532,,,Fri Jan 29 09:19:39 UTC 2010,,,,,,,,,,,"0|i01oh3:",7734,,,,,,,,,,,,,,,,,,,,"29/Jan/10 08:22;davsclaus;What do you mean? I cannot see a problem. Can you point out what you see as a problem;;;","29/Jan/10 08:51;skydjol;You have made a call to ""setTimeToLiveSeconds"" method instead of ""setDiskExpiryThreadIntervalSeconds"" method.

;;;","29/Jan/10 09:19;davsclaus;Thanks now I can see the problem :)

trunk: 904430.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build http://camel.apache.org/spring-example.html,CAMEL-2410,12487814,12487813,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mondraymond,mondraymond,27/Jan/10 10:58,03/Nov/10 05:13,14/Jul/23 05:46,28/Jan/10 03:22,,,,,,,,,,,,,2.2.0,,,,examples,,,,0,,,,,,,,,"Problem with the checksum on the JARS in the repo? [ I can turn that off, but wanted to let you know ]

""C:\Program Files\Java\jdk1.6.0_14\bin\java"" -Xmx1024m -Dclassworlds.conf=C:\apache-maven-2.2.1\bin\m2.conf -Dmaven.home=C:\apache-maven-2.2.1 -Didea.launcher.port=7536 ""-Didea.launcher.bin.path=C:\Program Files\JetBrains\IntelliJ IDEA 9.0.1\bin"" -Dfile.encoding=windows-1252 -classpath ""C:\apache-maven-2.2.1\boot\classworlds-1.1.jar;C:\Program Files\JetBrains\IntelliJ IDEA 9.0.1\lib\idea_rt.jar"" com.intellij.rt.execution.application.AppMain org.codehaus.classworlds.Launcher --no-plugin-registry --fail-fast --no-plugin-updates --strict-checksums --update-snapshots -f C:\apache-camel-2.1.0\examples\camel-example-spring\pom.xml compile
+ Enabling strict checksum verification on all artifact downloads.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring
[INFO]    task-segment: [compile]
[INFO] ------------------------------------------------------------------------
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
4/818K
...
818/818K
818K downloaded  (jaxb-impl-2.1.5-dev.jar)
[WARNING] Unable to get resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' from repository open.iona.m2 (http://repo.open.iona.com/maven2): Error retrieving checksum file for com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
4/2984K
...
2984/2984K
2984K downloaded  (jaxb-xjc-2.1.5-dev.jar)
[WARNING] Unable to get resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' from repository open.iona.m2 (http://repo.open.iona.com/maven2): Error retrieving checksum file for com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-impl -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-impl -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2
  	2) com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev

2) com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-xjc -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-xjc -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2
  	2) com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev

----------
2 required artifacts are missing.

for artifact: 
  org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2

from the specified remote repositories:
  apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository),
  apache.snapshots (http://repository.apache.org/snapshots),
  central (http://repo1.maven.org/maven2),
  onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo),
  open.iona.m2 (http://repo.open.iona.com/maven2)



[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 19 seconds
[INFO] Finished at: Wed Jan 27 11:49:28 CET 2010
[INFO] Final Memory: 14M/26M
[INFO] ------------------------------------------------------------------------

Process finished with exit code 1
",True version not in list == 2.2.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76533,,,Thu Jan 28 03:22:35 UTC 2010,,,,,,,,,,,"0|i01oev:",7724,,,,,,,,,,,,,,,,,,,,"27/Jan/10 13:12;njiang;As the jaxb implement 2.1.5-dev is not published to maven central repository, 
you may face this kind issue.

I'm planing to upgrade the ant-run plugin(which is used for schema generation) to use the latest jaxb version, so we can work around this issue. ;;;","28/Jan/10 03:22;davsclaus;Should work now;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf producer should copy the inMessage headers to the outMessage,CAMEL-2397,12487772,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Jan/10 02:33,03/Nov/10 05:13,14/Jul/23 05:46,25/Jan/10 05:40,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,,,1.6.3,2.2.0,,,,,,,0,,,,,,,,,"If we try to chain some different endponit together in the camel route, we need to make sure the in message header be copied to the out message. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76534,,,Mon Jan 25 05:40:51 UTC 2010,,,,,,,,,,,"0|i01obz:",7711,,,,,,,,,,,,,,,,,,,,"25/Jan/10 05:40;njiang;trunk
http://svn.apache.org/viewvc?rev=902688&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=902698&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file component - Using fileName option should better detect constant vs dynamic name,CAMEL-2395,12487770,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jan/10 13:38,03/Nov/10 05:13,14/Jul/23 05:46,24/Jan/10 16:23,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"eg using fileName=header.txt makes Camel think its header with the name txt you want to use.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76535,,,Sun Jan 24 16:23:26 UTC 2010,,,,,,,,,,,"0|i01obj:",7709,,,,,,,,,,,,,,,,,,,,"24/Jan/10 16:23;davsclaus;trunk: 902594.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Renamer failing to rename 'From' File when using multiple endpoints via Multicast,CAMEL-2394,12487773,12487831,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andy bourke,andy bourke,22/Jan/10 15:26,03/Nov/10 05:13,14/Jul/23 05:46,05/Feb/10 12:07,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"[Original Issue at Nabble|http://old.nabble.com/Renamer-failing-to-rename-%27From%27-File-when-using-multiple-endpoints-via-Multicast-td27272407s22882.html]


I have a route that looks for a file in a directory => unmarshals the file using <CSV> => transforms the output from the unmarshal (which is List<List<String>>) to a List of data objects => passes the List of data objects to a processor which does the intelligent mapping of the input data to the output which is a List of Objects => passes the List of Objects to a <multicast> pipeline who's endpoints traverse the List of Objects and extract the data, that they are interested in, formatting the output in to a List of Map objects so that the <CSV> marshaller can marshal to a named file. 

This is the route: 

{code}
        <route id=""iq""> 
            <from uri=""file:/data/iq/inbound/""/> 
            <unmarshal> 
                <csv id=""pipeCsvDataFormat""/> 
            </unmarshal> 
            <bean ref=""iqTransform"" method=""doTransform""/> 
            <to uri=""bean:iqProcessor?method=process""/> 
            <multicast parallelProcessing=""true""> 
                <pipeline> 
                    <to uri=""bean:formatOutput?method=formatHeader""/> 
                    <marshal> 
                        <csv /> 
                    </marshal> 
                    <to uri=""file:/data/iq/outbound/?fileName=Txn_Header.txt""/> 
                </pipeline> 
                <pipeline> 
                    <to uri=""bean:formatOutput?method=formatLineHeader""/> 
                    <marshal> 
                        <csv /> 
                    </marshal> 
                    <to uri=""file:/data/iq/outbound/?fileName=Line_Header.txt""/> 
                </pipeline> 
            </multicast> 
        </route> 

{code}

As expected, I get a correctly formatted file named Txn_Header.txt and a file named Line_Header.txt in the /outbound directory. So the routing seems to have worked fine. 

The problem is that the original file does not get renamed in to the .camel subdirectory and so the file gets processed again and again. 

If I remove the second endpoint in the multicast so that only the Txn_Header.txt file is produced then the original file does get renamed and the route ends successfully. ","Windows Vista Business Service Pack 2, 32-bit",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/10 11:43;andy bourke;claus.zip;https://issues.apache.org/jira/secure/attachment/12463087/claus.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76536,,,Fri Feb 05 12:07:25 UTC 2010,,,,,,,,,,,"0|i01obb:",7708,,,,,,,,,,,,,,,,,,,,"24/Jan/10 16:32;davsclaus;Andy

I have created an unit test which resembles what you do
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FromFileMulticastToFilesTest.java

Can you try running it at your end on your windows system?

On my end it works with all 3 files being written and moved as expected.
I am using Mac OSX;;;","24/Jan/10 16:35;davsclaus;Andy btw I also fixed a related bug CAMEL-2395 which could have had an issue on your windows OS.

If possible try using the latest 2.2-SNAPSHOT version and test using that.

Details at download page
http://camel.apache.org/download.html;;;","25/Jan/10 11:01;andy bourke;Hi claus,

I have run the unit test and it fails.

The reason is that the out directory ends up with 2 files; one called footer.txt but the other is called b07dca17-9a03-4711-a283-f1497a53713c instead of header.txt.

foo.txt does end up in the .camel directory.

I'll try the 2.2-SNAPSHOT next.;;;","25/Jan/10 12:14;andy bourke;Hi Claus,

I have now tried 2.2-SNAPSHOT but I get the same result.

I'm going to try another OS.;;;","25/Jan/10 13:30;davsclaus;Andy yeah the file that got named with the UID thing was a bug in Camel which is fixed in CAMEL-2395. So you can work around this in 2.1 by using another file name which does not start with header. For example you could just name the files a.txt and b.txt.;;;","25/Jan/10 13:32;davsclaus;Andy

So in your test if the only problem was the header file being written as a GUID name, then that means the original file will be moved to the .camel sub directory.
And the file is not processed again.

Is this correct?

If so I suspect it could be an issue with the CSV marshaller. ;;;","25/Jan/10 15:14;andy bourke;Claus,

Yes, You are correct.;;;","28/Jan/10 15:32;andy bourke;Hi Claus,

Firstly, I still have not managed to work around or solve the problem - getting a bit desperate now...

I believe that I know where the problem is occurring:

In Pipline.process there is a call to: ExchangeHelper.copyResults(exchange, nextExchange), where 'exchange' is the original Exchange.

This call replaces the 'in' object in 'exchange' with the one in 'nextExchange'. As 'nextExchange' has no headers (they are not copied when nextExchange is created) 'exchange' has no headers and the 'GenericFileRenameProcessStrategy' tries to use 'CamelFileParent'  and 'CamelFileNameOnly' (or 'CamelFileName') to construct the rename filename. Therefore it tries to rename the original file to .\camel.

Does this make sense to you?;;;","02/Feb/10 16:43;davsclaus;Andy are you using absolute paths? It appears so sine {{\data}} would indicates its from the {{<root>\data}} folder.

I am looking into an issue with Windows not being able to detect that {{\data}} is an absolute path. ;;;","02/Feb/10 16:56;andy bourke;Yes, the paths are absolute. 

I could try using relative paths if you think that might help?;;;","02/Feb/10 17:01;davsclaus;Yeah try with relative paths until I get CAMEL-2439 comitted. Running full test now on XP;;;","02/Feb/10 17:07;davsclaus;btw you can also try with windows absolute path, eg use {{file:c:\data}} , e.g. adding the C drive or what drive you run from.;;;","02/Feb/10 17:27;davsclaus;Andy you are welcome to test with latest code from trunk as I have committed a fix for Windows;;;","03/Feb/10 10:38;andy bourke;Hi Claus,

Relative path does not work and neither does absolute windows path using c:\ etc.

I have tried it on Linux also and have the same problem although the symptoms are naturally different on Linux because directories are files.

Do you not believe that the problem lies with the exchange header?;;;","03/Feb/10 11:12;davsclaus;Andy can you create a sample of your problem and attach as zip. Can be used to look into the issue.

Its either the CSV data format or something you may do in your beans. The file to be moved in the end is store as a on completion on the Exchange should thus not be affected by headers. But I may give it a 2nd look in 2.3 as there is another issue when you consume from file and then use a pollEnrich to poll in a 2nd file.;;;","03/Feb/10 11:43;andy bourke;I have stripped the route down to the minimum that doesn't work. It turns out that I can make it fail without multicast or anything complex.

If I take out the iqProcessor stage then it works.;;;","05/Feb/10 06:55;davsclaus;Ah in your bean you should copy the headers from IN to OUT.

eg doing getOut() creates a totally new independent message. 
Its generally better just to mutate IN.

Otherwise you should add something like this to your code
{code}
exchange.getOut().setHeaders(exchange.getIn().getHeaders());
{code}


;;;","05/Feb/10 06:57;davsclaus;PS: The behavior of getOut() has been debated a lot. 

We may very well improve that in Camel 2.5/3.0 with an API change that allows us to take hand of this problem for you under the covers.;;;","05/Feb/10 11:01;andy bourke;That's done the trick, many thanks Claus.

I did expect camel to do this for me, in fact it never occurred to me that I would have to do it myself. I do hope that the debate goes in favour of camel taking care of this - perhaps in the meantime something could be added to the documentation.

;;;","05/Feb/10 12:07;davsclaus;Glad it works for you.
;;;",,,,,,,,,,
GenericFileConverter should honor charset from Exchange,CAMEL-2387,12487800,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Jan/10 11:04,03/Nov/10 05:13,14/Jul/23 05:46,21/Jan/10 11:44,2.0.0,2.1.0,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"GenericFileConverter should pass in Exchange as parameter to converter so it can leverage any CHARSET set on the Exchange such as from a {{.convertBodyTo(String.class, ""UTF-8"");}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76537,,,Thu Jan 21 11:44:50 UTC 2010,,,,,,,,,,,"0|i01o9r:",7701,,,,,,,,,,,,,,,,,,,,"21/Jan/10 11:44;davsclaus;trunk: 901661.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BindingOperationInfos that are stored in exchange are inconsistent between CxfProducer and CxfConsumer,CAMEL-2385,12487797,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,20/Jan/10 20:49,03/Nov/10 05:13,14/Jul/23 05:46,20/Jan/10 21:42,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-cxf,,,,0,,,,,,,,,"CxfProducer could store a unwrapped version of the BindingOperationInfo in the exchange which is inconsistent with CxfConsumer and it puts burden on the application to revert back to the wrapped version.  CxfProducer should store the original version before calling.

{code}
                boi = boi.getUnwrappedOperation();
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76538,,,Wed Jan 20 21:42:27 UTC 2010,,,,,,,,,,,"0|i01o9b:",7699,,,,,,,,,,,,,,,,,,,,"20/Jan/10 21:42;wtam;Committed revision 901388.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven build not installing camel-spring-2.2-SNAPSHOT-tests,CAMEL-2378,12487786,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,chrislovecnm,chrislovecnm,18/Jan/10 18:59,03/Nov/10 05:13,14/Jul/23 05:46,19/Jan/10 01:31,2.2.0,,,,,,,,,,,,2.2.0,,,,camel-spring,,,,0,,,,,,,,,"I am running mvn install -Dmaven.test.skip=true and I am getting the following error

Missing:
----------
1) org.apache.camel:camel-spring:test-jar:tests:2.2-SNAPSHOT

The pom for camel-spring has a plug-in section for creating the test jar, but it is not getting installed.

I am getting the following output running mvn -e

Interesting part:
 [INFO] Skipping packaging of the test-jar


Full output
--------------------------------
+ Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
[INFO] [antrun:run {execution: create-prop}]
[INFO] Executing tasks
     [echo] Maven version: 2.2-SNAPSHOT
     [echo] OSGi version: 2.2.0.SNAPSHOT
[INFO] Executed tasks
[INFO] [properties:read-project-properties {execution: default}]
[INFO] [antrun:run {execution: process-sources}]
[INFO] Executing tasks
     [echo] Copying to code together for the XSD generation
     [echo] Generating XSD schema
[schemagen] Generating schema from 142 source files
     [copy] Copying 1 file to /data/workspace/camel/components/camel-spring/target/schema
[INFO] Executed tasks
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [remote-resources:process {execution: default}]
[INFO] [resources:resources {execution: default-resources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 10 resources
[INFO] Copying 3 resources
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 290 resources
[INFO] Copying 3 resources
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Not compiling test sources
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [bundle:bundle {execution: default-bundle}]
[INFO] [antrun:run {execution: package}]
[INFO] Executing tasks
     [echo] Deleting unwanted resources from the test-jar
   [delete] Deleting: /data/workspace/camel/components/camel-spring/target/test-classes/log4j.properties
[INFO] Executed tasks
[INFO] [jar:test-jar {execution: default}]
[INFO] Skipping packaging of the test-jar
[INFO] [build-helper:attach-artifact {execution: attach-artifacts}]
[INFO] [ianal:verify-legal-files {execution: default}]
[INFO] Checking legal files in: camel-spring-2.2-SNAPSHOT.jar
[INFO] [install:install {execution: default-install}]
[INFO] Installing /data/workspace/camel/components/camel-spring/target/camel-spring-2.2-SNAPSHOT.jar to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Installing /data/workspace/camel/components/camel-spring/target/schema/camel-spring.xsd to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.xsd
[INFO] [bundle:install {execution: default-install}]
[INFO] Parsing file:/home/clove/.m2/repository/repository.xml
[INFO] Installing org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 57 seconds
[INFO] Finished at: Mon Jan 18 11:57:54 MST 2010
[INFO] Final Memory: 57M/186M
[INFO] ------------------------------------------------------------------------

","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76539,,,Tue Jan 19 01:31:17 UTC 2010,,,,,,,,,,,"0|i01o7r:",7692,,,,,,,,,,,,,,,,,,,,"18/Jan/10 19:15;chrislovecnm;Another note.  I tried to run mvn install w/o skipping tests, and I am getting multiple compilation missing symbol errors:


[INFO] Compilation failure

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[20,33] cannot find symbol
symbol  : class LogProcessorTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[24,44] cannot find symbol
symbol: class LogProcessorTest
public class SpringLogProcessorTest extends LogProcessorTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class PublishEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[27,52] cannot find symbol
symbol: class PublishEventNotifierTest
public class SpringPublishEventNotifierTest extends PublishEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[27,56] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringDualLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[20,38] cannot find symbol
symbol  : class FileConsumerPreMoveIssueTest
location: package org.apache.camel.component.file

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[27,56] cannot find symbol
symbol: class FileConsumerPreMoveIssueTest
public class SpringFileConsumerPreMoveIssueTest extends FileConsumerPreMoveIssueTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[27,52] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteAllTasksTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[27,56] cannot find symbol
symbol: class ShutdownCompleteAllTasksTest
public class SpringShutdownCompleteAllTasksTest extends ShutdownCompleteAllTasksTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownNotDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[27,48] cannot find symbol
symbol: class ShutdownNotDeferTest
public class SpringShutdownNotDeferTest extends ShutdownNotDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteCurrentTaskOnlyTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[27,63] cannot find symbol
symbol: class ShutdownCompleteCurrentTaskOnlyTest
public class SpringShutdownCompleteCurrentTaskOnlyTest extends ShutdownCompleteCurrentTaskOnlyTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[27,45] cannot find symbol
symbol: class ShutdownDeferTest
public class SpringShutdownDeferTest extends ShutdownDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[27,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LogProcessorTest cannot be applied to (org.apache.camel.spring.processor.SpringLogProcessorTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in PublishEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringPublishEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringDualLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in FileConsumerPreMoveIssueTest cannot be applied to (org.apache.camel.spring.file.SpringFileConsumerPreMoveIssueTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteAllTasksTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteAllTasksTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownNotDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownNotDeferTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteCurrentTaskOnlyTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteCurrentTaskOnlyTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownDeferTest,java.lang.String)



;;;","18/Jan/10 19:18;janstey;The compile error should be fixed by recompiling camel-core maybe?

To skip tests use the following command (this will create the -test jar that the rest of the build needs):
{code}
 mvn clean install -DskipTests
{code};;;","18/Jan/10 19:29;chrislovecnm;Still getting the same compilation errors w/ the latest camel-core installed. Running -DskipTests did not work because it still tried to compile the test classes.;;;","18/Jan/10 19:38;janstey;Weird... I just built it fine on trunk rev 900515. Env is similar to yours too

Apache Maven 2.2.1 (r801777; 2009-08-06 16:46:01-0230)
Java version: 1.6.0_07
Java home: /opt/jdk1.6.0_07/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"" version: ""2.6.24-24-generic"" arch: ""i386"" Family: ""unix"";;;","18/Jan/10 22:51;chrislovecnm;So running mvn clean install -DskipTests from the top level worked.

Someone might want to add this nugget to Readme.txt and   http://camel.apache.org/building.html
;;;","19/Jan/10 01:31;janstey;Great! Glad it works now for you. I'll update the wiki page with that command.;;;",,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.impl.DefaultProducerTemplateAsyncTest failing on build on trunk,CAMEL-2377,12487787,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chrislovecnm,chrislovecnm,18/Jan/10 18:19,03/Nov/10 05:13,14/Jul/23 05:46,19/Jan/10 06:33,2.2.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"Unit test failing on mvn install on latest head from trunk.

mvn -e output
------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.impl.DefaultProducerTemplateAsyncTest
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.012 sec <<< FAILURE!

Results :

Failed tests: 
  testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)

Tests run: 22, Failures: 3, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire Output

-------------------------------------------------------------------------------
Test set: org.apache.camel.impl.DefaultProducerTemplateAsyncTest
-------------------------------------------------------------------------------
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.013 sec <<< FAILURE!
testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.431 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackExchangeInOut(DefaultProducerTemplateAsyncTest.java:357)

testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.206 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOut(DefaultProducerTemplateAsyncTest.java:451)

testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.176 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOutGetResult(DefaultProducerTemplateAsyncTest.java:492)

","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76540,,,Tue Jan 19 23:50:43 UTC 2010,,,,,,,,,,,"0|i01o7j:",7691,Unit Test Broken,,,,,,,,,,,,,,,,,,,"19/Jan/10 06:33;davsclaus;Only fails on some boxes.
;;;","19/Jan/10 06:33;davsclaus;trunk: 900669.;;;","19/Jan/10 23:50;chrislovecnm;verified fixed!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest failing on build on trunk,CAMEL-2376,12487788,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chrislovecnm,chrislovecnm,18/Jan/10 18:07,03/Nov/10 05:13,14/Jul/23 05:46,19/Jan/10 06:05,2.2.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"Unit test failing on mvn install on latest head from trunk.

mvn -e output
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.866 sec <<< FAILURE!

Results :

Failed tests: 
  testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)

Tests run: 7, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire output
-------------------------------
-------------------------------------------------------------------------------
Test set: org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.217 sec <<< FAILURE!
testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)  Time elapsed: 3.729 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<3> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at junit.framework.Assert.assertEquals(Assert.java:204)
	at org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest.testRetryUntilRecipientListOkAndFail(RetryRouteScopedUntilRecipientListParallelIssueTest.java:38)


","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76541,,,Tue Jan 19 23:48:15 UTC 2010,,,,,,,,,,,"0|i01o7b:",7690,Unit Test Broken,,,,,,,,,,,,,,,,,,,"19/Jan/10 06:05;davsclaus;trunk: 900663.;;;","19/Jan/10 23:48;chrislovecnm;verified fixed.  Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove sample caches from Camel Cache component,CAMEL-2363,12487776,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,akarpe,akarpe,14/Jan/10 18:42,03/Nov/10 05:13,14/Jul/23 05:46,15/Jan/10 05:06,2.1.0,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"Camel Cache has sample caches created by the component via its ehCache settings.

These should not be created in order to avoid unnecessary taking up of ports by the sample caches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Jan/10 18:43;akarpe;camel-cache-20100114.patch;https://issues.apache.org/jira/secure/attachment/12463056/camel-cache-20100114.patch",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76542,,,Fri Jan 15 05:06:52 UTC 2010,,,,,,,Patch Available,,,,"0|i01o4n:",7678,,,,,,,,,,,,,,,,,,,,"14/Jan/10 18:43;akarpe;Please find attached fix that prevents the sample caches from being created.;;;","15/Jan/10 05:06;davsclaus;Applied patch with thanks.

trunk: 899527.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP assumes that directory name do not have dot ,CAMEL-2362,12487777,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,smcduff@hotmail.com,smcduff@hotmail.com,14/Jan/10 11:54,03/Nov/10 05:13,14/Jul/23 05:46,15/Jan/10 08:25,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-ftp,,,,0,,,,,,,,,"
See http://old.nabble.com/FTP-assume-directory-do-not-have-dot-td27153817.html#a27160086
(COpy paste)
>
> I have the following error:
>
> Caused by: java.lang.IllegalArgumentException: Only directory is supported.
> Endpoint must be configured with a valid directory: ftp.test
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:68)
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:31)
>        at
> org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:60)
>        at
> org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
>        at org.apache.camel.impl.RouteService.doStart(RouteService.java:123)
>        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:55)
>        at
> org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:906)
>        ... 1 more
>
> By looking at the source code I saw the following :
>        // we assume its a file if the name has a dot in it (eg foo.txt)
>        if (configuration.getDirectory().contains(""."")) {
>            throw new IllegalArgumentException(""Only directory is supported.
> Endpoint must be configured with a valid directory: ""
>                    + configuration.getDirectory());
>        }
>
> I remove that code and my code is working!! :-)
>
> I think the above code should not assume that.....
> What do you think ?
>
... [show rest of quote]

Its really a bad habit having a dot in a directory name.
On windows will that not often be considered a file?.

And since its a remote path we cannot on startup determine if its a
path or file.

The check was made in the transition from 1.x to 2.x where in 1.x you
could define a starting file or directory.
In 2.x you must specify a directory only.

We could relax the check but then people may still enter a filename
and think Camel will pickup that file.

[SIMON]
Windows directory can contains a dot... a good example is in your eclipse installation... example:
Directory name=org.eclipse.emf.teneo.jpox_1.0.1.v200902271808

Also I think that check is useless because you can still enter something without a dot and it is in fact a file... so the endpoint should verify that after the connection.

Simon 

Yeah good call

Do you mind creating a ticket in JIRA about this?
http://issues.apache.org/activemq/browse/CAMEL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76543,,,Fri Jan 15 08:25:18 UTC 2010,,,,,,,,,,,"0|i01o4f:",7677,,,,,,,,,,,,,,,,,,,,"15/Jan/10 08:25;davsclaus;trunk: 899559.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
recipientList retryUntil not working,CAMEL-2360,12487225,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,14/Jan/10 10:14,24/Apr/11 10:01,14/Jul/23 05:46,09/Feb/10 08:24,2.2.0,,,,,,,,,,,,2.3.0,,,,camel-core,,,,0,,,,,,,,,"summary:
the bean gets intialized but it looks like the method retryUntil is never called, could it be an error of implementation? am I doing something wrong?

using following route:
{code}
from(""jms-test:queue:queue.delivery.notification.test"") 
.process(processor) 
.onException(Exception.class).retryUntil(bean(""myRetryBean"")).end() 
.recipientList(header(""recipientListHeader"").tokenize("","")) 
.parallelProcessing().executorService(customThreadPoolExecutor) 
.aggregationStrategy(new RecipientAggregationStrategy()) 
.to(""direct:chunk.completed""); 
{code}

bean is registered in such way: 
{code}
JndiRegistry jndi = new JndiRegistry(new JndiContext()); 
jndi.bind(""myRetryBean"", new RetryBean()); 
{code}

bean class is: 
{code}
public class RetryBean { 

        private int _invoked; 
        private Logger _logger; 
        
    public RetryBean() { 
    this._logger = Logger.getLogger(RetryBean.class); 
    this._invoked = 0; 
    _logger.debug(""BEAN INITIALIZED "" + _invoked); 
    } 
        
    // using bean binding we can bind the information from the exchange to the types we have in our method signature 
    public boolean retryUntil(@Header(Exchange.REDELIVERY_COUNTER) Integer counter, @Body String body, @ExchangeException Exception causedBy) { 
        // NOTE: counter is the redelivery attempt, will start from 1 
    _invoked++; 
    
    
    _logger.debug(""invoked"" + _invoked); 
    _logger.debug(""counter"" + counter); 
    _logger.debug(""result"" + (counter < 2)); 
    
        // we can of course do what ever we want to determine the result but this is a unit test so we end after 3 attempts 
        return counter < 7; 
    } 
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Jan/10 12:49;crive;Recipientlist-Retryuntil.zip;https://issues.apache.org/jira/secure/attachment/12463059/Recipientlist-Retryuntil.zip",,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76544,,,Sun Apr 24 10:01:24 UTC 2011,,,,,,,,,,,"0|i01o3z:",7675,,,,,,,,,,,,,,,,,,,,"15/Jan/10 10:28;davsclaus;Context scoped error handling works
{code}
                onException(Exception.class).retryUntil(bean(""myRetryBean"")).end();
                
                from(""seda:start"")
                    .recipientList(header(""recipientListHeader""))
                    .to(""mock:result"");

                from(""direct:foo"").to(""log:foo"").to(""mock:foo"");
{code};;;","15/Jan/10 10:39;davsclaus;Can you post which endpoints you use in the recipientListHeader and if its to another Camel route can you post these also.;;;","15/Jan/10 10:42;crive;I am using FTP endpoints;;;","15/Jan/10 12:16;davsclaus;Okay found an issue but that is related to when using more routes.

Do you also have Camel routes for those FTP endpoints? eg do you have also {{from(""ftp:..."")}} in a Camel route somewhere?;;;","15/Jan/10 13:43;davsclaus;Marco can you try with latest code from trunk?
I have committed a fix.

trunk: 899628.;;;","15/Jan/10 15:00;crive;I am not able to compile latest trunk my systems runs out of memory...;;;","15/Jan/10 15:08;davsclaus;See this link how to increase memory to maven
http://camel.apache.org/building.html;;;","15/Jan/10 16:51;crive;I don't see it working even by using a Context scoped error handler;;;","15/Jan/10 16:57;davsclaus;Create a small project which does not work at your end and attach it as a zip file.;;;","19/Jan/10 12:49;crive;Attached a sample file which shows retryUntil method of RetryBean is never called.;;;","09/Feb/10 08:24;davsclaus;Should work in 2.2 release;;;","09/Feb/10 13:43;davsclaus;Okay for a timing issue when using {{parallel}} recipient list.

I will commit a fix for that in 2.3 later today;;;","09/Feb/10 15:33;davsclaus;trunk: 908073.;;;","09/Feb/10 15:34;davsclaus;Marco you are welcome to try with latest code from trunk on your system.;;;","24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older;;;",,,,,,,,,,,,,,,
Examples running with ANT need commons-managment on the classpath,CAMEL-2354,12487762,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/10 05:53,03/Nov/10 05:13,14/Jul/23 05:46,13/Jan/10 05:55,2.1.0,,,,,,,,,,,,2.2.0,,,,examples,,,,0,,,,,,,,,"See nabble
http://old.nabble.com/pojo-example-fails-to-build-with-ant-ts27137019.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76546,,,Wed Jan 13 05:55:07 UTC 2010,,,,,,,,,,,"0|i01o2n:",7669,,,,,,,,,,,,,,,,,,,,"13/Jan/10 05:55;davsclaus;trunk: 898654;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language - Parsing complex date patterns fails if they contain additional colons,CAMEL-2353,12487760,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/10 05:38,03/Nov/10 05:13,14/Jul/23 05:46,13/Jan/10 06:16,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"See nabble
http://old.nabble.com/Camel-%3A-Date-Pattern-ts27131137.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76547,,,Wed Jan 13 06:16:01 UTC 2010,,,,,,,,,,,"0|i01o2f:",7668,,,,,,,,,,,,,,,,,,,,"13/Jan/10 06:16;davsclaus;trunk: 898656.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
One should not have to explicitly provide the service/port for cxf is there's only one,CAMEL-2345,12487755,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hadrian,hadrian,08/Jan/10 15:23,03/Nov/10 05:13,14/Jul/23 05:46,14/Jan/10 10:24,2.1.0,,,,,,,,,,,,2.2.0,,,,camel-cxf,,,,0,,,,,,,,,"This is due to the following code in {{Client createClient()}} in {{CxfEnpoint}}

{code}
        } else {
            ObjectHelper.notNull(portName, ""Please provide endpoint/port name"");
            ObjectHelper.notNull(serviceName, ""Please provide service name"");
            ClientFactoryBean factoryBean = createClientFactoryBean();
{code}

When there's only one service/port, we should just use it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76548,,,Thu Jan 14 10:24:19 UTC 2010,,,,,,,,,,,"0|i01o0v:",7661,,,,,,,,,,,,,,,,,,,,"08/Jan/10 15:41;alitokmen;Hello

Can you please post a route sample? Is this only for the WS caller?

Cheers;;;","08/Jan/10 15:57;hadrian;I think this causes a problem only for the client now, but in general, the cxf endpoint url should not have to specify the service/port if there's only one in the wsdl. I suspect it already works like that for the server side.;;;","13/Jan/10 08:46;davsclaus;Hadrian do you get in touch with Willem about this one?;;;","13/Jan/10 09:09;njiang;Hi Hadrain,

Yes, CXF client and server side share the same code (ReflectionServiceFactoryBean) to create the ServiceModel.

If we don't specify the server name and port name, CXF will try to find a one for using, but if there are more than one service or one port, it will make us get into trouble of connecting a wrong endpoint. I think that is why William Tam added these checking.

How about we warning the user that don't set the service or the port name instead of using a NP checker?

Willem;;;","13/Jan/10 14:51;wtam;Yea, it looks like we can relax this requirement for client but NOT for the server as ServerFactoryBean fails to initialize without serviceName and portName (if serviceClass is not specified. i.e. wsdl only).   I think it is a best practice to provide serviceName and portName for wsdl only use case but I agree that they are not required on the client (producer).  We probably should update CXFWsdlOnlyPayloadModeNoSpringTest and CXFWsdlOnlyMessageModeNoSpringTest if we do change it.  And update the notes in the serviceClass option about this requirement in the http://cwiki.apache.org/confluence/display/CAMEL/CXF.  Let me know if you want me to handle it.  thx.


;;;","14/Jan/10 10:24;njiang;i changed the NullPoint check to log warning message.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-web - Using Sun marshal resolver not possible on non SUN JDK platforms,CAMEL-2341,12487752,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Jan/10 08:35,03/Nov/10 05:13,14/Jul/23 05:46,08/Jan/10 08:00,2.2.0,,,,,,,,,,,,2.2.0,,,,,,,,0,,,,,,,,,"For example on RH 5.2 64bit JDK 1.6
{code}
Compilation failure 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[25,34] package com.sun.xml.bind.marshaller does not exist 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,12] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,56] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 
{code}

I assume AIX, HP-UX and others do have this issue as well.

James maybe we need to revert that change you made?",,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2301,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76549,,,Fri Jan 08 08:00:44 UTC 2010,,,,,,,,,,,"0|i01nzz:",7657,,,,,,,,,,,,,,,,,,,,"07/Jan/10 09:48;davsclaus;Author: jstrachan
Date: Thu Dec 17 14:50:48 2009
New Revision: 891737

URL: http://svn.apache.org/viewvc?rev=891737&view=rev
Log:
fix for CAMEL-2301 to switch to jackson for JSON marshalling

Added:
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyReader
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyWriter
Modified:
   camel/trunk/components/camel-web/pom.xml
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/CamelContextResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/Constants.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/EndpointsResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RoutesResource.java;;;","08/Jan/10 08:00;davsclaus;Reverting fix
{code}
davsclaus:(svn)camel[trunk:897121]/components/camel-web$ svn merge -c -891737 .
--- Reverse-merging r891737 into '.':
U    src/main/java/org/apache/camel/web/resources/RouteResource.java
U    src/main/java/org/apache/camel/web/resources/RoutesResource.java
U    src/main/java/org/apache/camel/web/resources/EndpointsResource.java
U    src/main/java/org/apache/camel/web/resources/Constants.java
U    src/main/java/org/apache/camel/web/resources/CamelContextResource.java
D    src/main/resources/META-INF/services
U    pom.xml
{code}

trunk: 897126.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring DSL - Some route scoped concerns such as onException etc. can vanish in some edge cases,CAMEL-2336,12487748,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,05/Jan/10 16:07,03/Nov/10 05:13,14/Jul/23 05:46,05/Jan/10 19:22,2.0.0,2.1.0,,,,,,,,,,,2.2.0,,,,camel-spring,,,,0,,,,,,,,,"The JAXB creates the Spring DSL model in a bit wacky way so we need to work on it a bit before Camel can create the runtime routes.

In some cases some of the cross functions such as onCompletion, onException could potentially vanish. 
The problem is really that we should have divided the route into a upper / lower section where upper is the cross functions and the lower the actual route.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-2059,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76550,,,Wed Jan 06 08:57:02 UTC 2010,,,,,,,,,,,"0|i01nyv:",7652,,,,,,,,,,,,,,,,,,,,"05/Jan/10 19:22;davsclaus;trunk: 896185.

This bug was only when using <transacted/> that you could potentially loose route scoped <onException> or <onCompletion>. The Java DSL does not have this bug.;;;","06/Jan/10 08:57;davsclaus;trunk: 896355.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
The NP check of the remote service is wrong in CamelServiceExporter ,CAMEL-2327,12487740,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,02/Jan/10 04:59,03/Nov/10 05:13,14/Jul/23 05:46,02/Jan/10 05:13,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,,,1.6.3,2.2.0,,,,,,,0,,,,,,,,,"We should check the export service instead of the camelContext.
--- components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(revision 895109)
+++ components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(working copy)
@@ -83,7 +83,7 @@
         }
 
         Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext, uri);
-        notNull(camelContext, ""service"");
+        notNull(getService(), ""service"");
         Object proxy = getProxyForService();
 
         consumer = endpoint.createConsumer(new BeanProcessor(proxy, camelContext));
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76551,,,Sat Jan 02 05:13:25 UTC 2010,,,,,,,,,,,"0|i01nwv:",7643,,,,,,,,,,,,,,,,,,,,"02/Jan/10 05:13;njiang;trunk
http://svn.apache.org/viewvc?rev=895119&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=895120&view=rev;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Produce - Causes BeanInvocation to be kept as Body which causes problem with subsequent bean invocations,CAMEL-2325,12487738,,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Jan/10 17:08,03/Nov/10 05:13,14/Jul/23 05:46,03/Jan/10 17:53,2.0.0,2.1.0,,,,,,,,,,,2.2.0,,,,camel-core,,,,0,,,,,,,,,"The route
{code}
    <camelContext id=""camel"" trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start""/>
            <to uri=""log:foo""/>
            <split>
                <method bean=""cool"" method=""split""/>
                <transform><simple>Hello ${body}</simple></transform>
                <to uri=""mock:split""/>
            </split>
        </route>
    </camelContext>
{code}

Is caused problem when a @Produce bean is used to send a message to the route.
2010-01-01 18:07:43,720 [main           ] ERROR DefaultErrorHandler            - Failed delivery for exchangeId: b7098680-4a16-4289-bdf4-3197b0b37aea. Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: split on cool due to: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: object is not an instance of declaring class
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,76552,,,Sun Jan 03 17:53:53 UTC 2010,,,,,,,,,,,"0|i01nwf:",7641,,,,,,,,,,,,,,,,,,,,"03/Jan/10 17:53;davsclaus;trunk: 895452.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
