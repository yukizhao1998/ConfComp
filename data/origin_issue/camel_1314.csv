Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocked),Outward issue link (Blocked),Inward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Container),Inward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Incorporates),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Regression),Inward issue link (Required),Inward issue link (Supercedes),Outward issue link (Supercedes),Inward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Race condition in JmsProducer for request/response messaging causing nondeterministic setting body to null.,CAMEL-8200,12764201,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kmackowiak,kmackowiak,30/Dec/14 13:58,04/Jan/15 07:07,14/Jul/23 05:48,04/Jan/15 07:07,2.14.0,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-jms,,,,,,0,race-condition,,,,,,"In my team we have noticed that there is a race condition problem in JmsProducer class for request/response messaging. It causes that sometimes (nondeterministically) body of a response message is changed to null. It can happen when JMS response is received very fast (we use in-memory ActiveMQ with VM transport and no persistence) under heavy load.

It looks that there is a problem in JmsProducer class in processInOut(exchange, callback) method.

{code}
    protected boolean processInOut(final Exchange exchange, final AsyncCallback callback) {
        …
        doSend(true, destinationName, destination, messageCreator, messageSentCallback);
        // after sending then set the OUT message id to the JMSMessageID so its identical
        setMessageId(exchange);
        // continue routing asynchronously (reply will be processed async when its received)
        return false;
    }

...
    protected void setMessageId(Exchange exchange) {
        if (exchange.hasOut()) {
            JmsMessage out = exchange.getOut(JmsMessage.class);
            try {
                if (out != null && out.getJmsMessage() != null) {
                    out.setMessageId(out.getJmsMessage().getJMSMessageID());
                }
            } catch (JMSException e) {
                LOG.warn(""Unable to retrieve JMSMessageID from outgoing JMS Message and set it into Camel's MessageId"", e);
            }
        }
    }
{code}

The problem is caused by invoking setMessageId(...) method after doSend(...). Method doSend(...) is sending JMS request message and causes that another thread is used to handle JMS reply message. This leads to a situation that 2 different threads can operate on the same exchange (which is not synchronized at all) at the same time:
1) original thread in which processInOut(...) method was called,
2) separate thread from JMS component for handling JMS response.

In our case there it was happening sometimes that setMessageId(...) was invoked at the same time as PipelineHelper.createNextMessage(exchange) method:
{code}
    public static Exchange createNextExchange(Exchange previousExchange) {
        Exchange answer = previousExchange;
        // now lets set the input of the next exchange to the output of the
        // previous message if it is not null
        if (answer.hasOut()) {
            answer.setIn(answer.getOut());
            answer.setOut(null);
        }
        return answer;
    }
{code}
It caused that body of response message was lost (set to null).


It looks for me that calling setMessageId(...) at the end of processInOut(...) method is redundant and this logic should be executed when JMS reply message is handled.

I've attached a patch where invokation of setMessageId(...) is removed.
I've checked that it doesn't break any test for camel-jms component.",,kmackowiak,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Dec/14 13:59;kmackowiak;Race_condition_in_JmsProducer_fixed_.patch;https://issues.apache.org/jira/secure/attachment/12689501/Race_condition_in_JmsProducer_fixed_.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 04 07:07:22 UTC 2015,,,,,,,Patch Available,,,,"0|i23ukv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Dec/14 13:59;kmackowiak;Patch;;;","04/Jan/15 03:34;njiang;Hi Krzysztof,

I just checked the code history, the code that you removed was introduced since CAMEL-1689, and I found the out message message id is set in the ReplyManagerSupport.processReply() method which relates to CAMEL-6218.

It should be safe to remove the code to avoid the race condition (if the response message comes later, the removed the code does nothing as the out message is not set yet.)

;;;","04/Jan/15 07:07;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Krzystof.;;;",,,,,,,,,,,,,,,,,,,,,
Elasticsearch component fails in an OSGi environment due to missing names.txt,CAMEL-8194,12764138,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,slush,slush,30/Dec/14 06:29,29/May/15 03:14,14/Jul/23 05:49,04/Jan/15 07:04,2.14.1,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-elasticsearch,,,,,,0,,,,,,,"{code}
2014-12-29 22:25:12,667 | ERROR | FelixStartLevel  | BlueprintCamelContext            | 8 - org.apache.camel.camel-blueprint - 2.14.0 | Error occurred during starting Camel: CamelContext(elasticSearchProducerCamelContext) due Failed to create route log-event-sink-elasticsearch at: >>> Aggregate[true -> [To[log:xxx?level=INFO&groupInterval=2000], To[elasticsearch://elasticsearch?ip=127.0.0.1&port=9300]]] <<< in route: Route(log-event-sink-elasticsearch)[[From[vm:log-event-elast... because of Failed to resolve endpoint: elasticsearch://elasticsearch?ip=127.0.0.1&port=9300 due to: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
org.apache.camel.FailedToCreateRouteException: Failed to create route log-event-sink-elasticsearch at: >>> Aggregate[true -> [To[log:xxx?level=INFO&groupInterval=2000], To[elasticsearch://elasticsearch?ip=127.0.0.1&port=9300]]] <<< in route: Route(log-event-sink-elasticsearch)[[From[vm:log-event-elast... because of Failed to resolve endpoint: elasticsearch://elasticsearch?ip=127.0.0.1&port=9300 due to: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
   at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:945)
   at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
...
Caused by: org.elasticsearch.env.FailedToResolveConfigException: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
   at org.elasticsearch.env.Environment.resolveConfig(Environment.java:213)
   at org.elasticsearch.node.internal.InternalSettingsPreparer.prepareSettings(InternalSettingsPreparer.java:119)
...
{code}

This can be fixed by adding a one-liner to explicitly set the classloader on the elasticsearch Settings class to the classloader of Settings.class:

{code}
            Settings settings = ImmutableSettings.settingsBuilder()
                ...
                .classLoader(Settings.class.getClassLoader());
                ...
{code}",,davsclaus,githubbot,njiang,slush,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8816,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 10 18:23:39 UTC 2015,,,,,,,,,,,"0|i23u6v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Dec/14 07:19;davsclaus;Thanks for reporting. You are welcome to work on a patch.;;;","02/Jan/15 18:25;githubbot;GitHub user dabdine-r7 opened a pull request:

    https://github.com/apache/camel/pull/365

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.15.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dabdine-r7/camel camel-8194-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/365.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #365
    
----
commit d38d76d7d91e68c73678f88c353ee65a43095361
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2015-01-02T18:01:11Z

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.15.x

----
;;;","02/Jan/15 18:28;githubbot;GitHub user dabdine-r7 opened a pull request:

    https://github.com/apache/camel/pull/366

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - backport to 2.14.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dabdine-r7/camel camel-8194-2.14.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/366.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #366
    
----
commit 543c7ee58e558ecf1e2d7f3fc82e8d5d7e11802e
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2015-01-02T18:26:11Z

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.14.x

----
;;;","02/Jan/15 18:30;slush;I've submitted two patches via github: one for 2.15.x (master) and one for 2.14.x. Thank you!;;;","04/Jan/15 07:04;njiang;Merged the patch into master, camel-2.14.x and camel-2.13.x branches with thanks to Derek.;;;","10/Jan/15 18:19;githubbot;Github user dabdine-r7 closed the pull request at:

    https://github.com/apache/camel/pull/365
;;;","10/Jan/15 18:23;githubbot;Github user dabdine-r7 closed the pull request at:

    https://github.com/apache/camel/pull/366
;;;",,,,,,,,,,,,,,,,,
Frequent BlockingOperationExceptions under load,CAMEL-8193,12764135,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mmindenhall,mmindenhall,30/Dec/14 06:19,14/Jan/15 10:53,14/Jul/23 05:49,14/Jan/15 10:53,2.14.1,,,,,,,,2.14.2,2.15.0,,,camel-netty,camel-netty4,,,,,0,,,,,,,"I have a class that combines a netty4 consumer with a kafka producer, pulling messages off of a TCP socket and sticking them into kafka for further processing.  While doing some load testing, I started seeing a lot of stack traces like the following:

{noformat}
2014-12-29 19:55:57,517 - [WARN] - from io.netty.util.concurrent.DefaultPromise in Camel Thread #23 - NettyServerTCPWorker
An exception was thrown by org.apache.camel.component.netty4.handlers.ServerResponseFutureListener.operationComplete()
io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@4e2727d0(uncancellable)
	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:390) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.checkDeadLock(DefaultChannelPromise.java:157) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.DefaultPromise.awaitUninterruptibly(DefaultPromise.java:283) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:135) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:28) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.DefaultPromise.syncUninterruptibly(DefaultPromise.java:225) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.syncUninterruptibly(DefaultChannelPromise.java:123) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.syncUninterruptibly(DefaultChannelPromise.java:28) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at org.apache.camel.component.netty4.NettyHelper.close(NettyHelper.java:121) ~[camel-netty4-2.14.1.jar:2.14.1]
	at org.apache.camel.component.netty4.handlers.ServerResponseFutureListener.operationComplete(ServerResponseFutureListener.java:80) ~[camel-netty4-2.14.1.jar:2.14.1]
	at org.apache.camel.component.netty4.handlers.ServerResponseFutureListener.operationComplete(ServerResponseFutureListener.java:36) ~[camel-netty4-2.14.1.jar:2.14.1]
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:567) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:406) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelOutboundBuffer.safeSuccess(ChannelOutboundBuffer.java:523) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelOutboundBuffer.remove(ChannelOutboundBuffer.java:247) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer.java:322) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:301) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:745) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:315) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:713) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1159) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelHandlerInvokerUtil.invokeFlushNow(ChannelHandlerInvokerUtil.java:165) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelHandlerInvoker.invokeFlush(DefaultChannelHandlerInvoker.java:355) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:297) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.ChannelHandlerInvokerUtil.invokeFlushNow(ChannelHandlerInvokerUtil.java:165) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.DefaultChannelHandlerInvoker$16.run(DefaultChannelHandlerInvoker.java:363) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:343) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:834) [netty-all-4.1.0.Beta3.jar:4.1.0.Beta3]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_20]
{noformat}

The documentation for [ChannelFuture|http://netty.io/4.1/api/io/netty/channel/ChannelFuture.html] says ""Do not call {{await()}} inside {{ChannelHandler}}"", due to a possible deadlock.  Per the documentation, this results in an {{IllegalStateException}} (netty3) or a {{BlockingOperationException}} (netty4+).

The javadoc for {{[NettyHelper.close|http://camel.apache.org/maven/camel-2.14.0/camel-netty/apidocs/org/apache/camel/component/netty/NettyHelper.html#close%28org.jboss.netty.channel.Channel%29]}} claims to close the channel asynchronously, but that method calls {{channel.close().syncUninterruptibly()}}, which blocks waiting for the channel to close and results in the exception under certain conditions. 

The attached patch resolves this issue for both the camel-netty and camel-netty4 components.","Ubuntu 14.04, JDK 1.8.0_25",mmindenhall,njiang,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7909,,,,,,,,,,,"30/Dec/14 06:30;mmindenhall;CAMEL-8193.patch;https://issues.apache.org/jira/secure/attachment/12689443/CAMEL-8193.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 14 10:53:35 UTC 2015,,,,,,,Patch Available,,,,"0|i23u67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Dec/14 06:30;mmindenhall;Passes existing unit tests for camel-netty.  The camel-netty4 tests are failing for me with or without the patch (same failures).;;;","30/Dec/14 08:06;njiang;Hi Mark,
What are the unit tests that you ran? Are they part of performance tests?;;;","30/Dec/14 16:57;mmindenhall;No, I wasn't aware of any performance tests.  I just ran ""mvn clean install"" from the camel-netty and camel-netty4 component folders.  Everything passed for camel-netty with my changes, but I had test failures for camel-netty4 with or without my changes.  I suspect it had something to do with my local configuration, or needing to run the tests in a different way.;;;","04/Jan/15 01:37;njiang;The sync close wait was introduced in CAMEL-7909.;;;","14/Jan/15 10:53;njiang;Applied the patch into camel master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,
"Kafka producer: partition key is optional, not required by kafka client api",CAMEL-8190,12764051,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vasilievip,vasilievip,29/Dec/14 17:22,06/Feb/15 13:24,14/Jul/23 05:49,06/Feb/15 13:24,2.14.1,,,,,,,,2.14.2,2.15.0,,,camel-kafka,,,,,,0,,,,,,,"In order to send to kafka, one need to construct KeyedMessage. 
{code} 
    public KeyedMessage(String topic, K key, Object partKey, V message) {
        this.topic = topic;
        this.key = key;
        this.partKey = partKey;
        this.message = message;
        class.$init$(this);
        if(topic == null) {
            throw new IllegalArgumentException(""Topic cannot be null."");
        }
    }

    public KeyedMessage(String topic, V message) {
        Object var10002 = null;
        Object var10003 = null;
        this(topic, (Object)null, (Object)null, message);
    }

    public KeyedMessage(String topic, K key, V message) {
{code}

Looks like only topic is required parameter, but partition key is optional. Also, if key is provided by the user I think is makes sense to propagate it.",,davsclaus,vasilievip,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Dec/14 17:23;vasilievip;kafka_producer__partition_key_is_optional.patch;https://issues.apache.org/jira/secure/attachment/12689353/kafka_producer__partition_key_is_optional.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 06 13:24:21 UTC 2015,,,,,,,Patch Available,,,,"0|i23to7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Feb/15 13:24;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-scr-archetype produces invalid package structure,CAMEL-8189,12763965,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sabre1041,sabre1041,29/Dec/14 04:37,31/Dec/14 07:13,14/Jul/23 05:49,31/Dec/14 07:13,2.15.0,,,,,,,,2.15.0,,,,camel-scr,,,,,,0,archetype,scr,,,,,"When generating a project using the camel-archetype-scr archetype, the resulting project produces an invalid packaging structure which cannot be compiled.

This can occur due to differences between the groupId and package parameters",,sabre1041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,2014-12-29 04:37:24.0,,,,,,,,,,,"0|i23t5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-scr - IllegalArgumentException: argument type mismatch,CAMEL-8185,12763810,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,26/Dec/14 10:18,04/Jan/15 13:25,14/Jul/23 05:49,04/Jan/15 07:24,2.15.0,,,,,,,,2.15.0,,,,camel-scr,,,,,,0,,,,,,,"When camel-scr (2.15-SNAPSHOT) is deployed and used with Apache Karaf - 2.3.0.redhat-611412

The following errors are generated when SCR got the CamelComponent or lost the Component
{code}
2014-12-26 11:13:49,453 | ERROR | r-1.0.0-thread-2 | osgi-camel-scr                   | ?                                   ? | 255 - com.redhat.gpe.training.osgi-camel-scr - 1.0.0 | [com.redhat.gpe.training.osgi.camel.BootStrap(52)] The gotCamelComponent method has thrown an exception
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_51]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_51]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_51]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_51]
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:231)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:39)[82:org.apache.felix.scr:1.8.0.redhat-611412]
{code}

{code}
2014-12-26 11:22:50,355 | ERROR | l Console Thread | osgi-camel-scr                   | ?                                   ? | 255 - com.redhat.gpe.training.osgi-camel-scr - 1.0.0 | [com.redhat.gpe.training.osgi.camel.BootStrap(52)] The lostCamelComponent method has thrown an exception
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_51]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_51]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_51]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_51]
	at org.apache.felix.scr.impl.helper.BaseMethod.invokeMethod(BaseMethod.java:231)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.helper.BaseMethod.access$500(BaseMethod.java:39)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.helper.BaseMethod$Resolved.invoke(BaseMethod.java:624)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.helper.BaseMethod.invoke(BaseMethod.java:508)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.helper.BindMethod.invoke(BindMethod.java:37)[82:org.apache.felix.scr:1.8.0.redhat-611412]
	at org.apache.felix.scr.impl.manager.DependencyManager.invokeUnbindMethod(DependencyManager.java:1711)[82:org.apache.felix.scr:1.8.0.redhat-611412]
{code}

Here is the code used as example :

{code}
import org.apache.camel.CamelContext;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.scr.AbstractCamelRunner;
import org.apache.camel.spi.ComponentResolver;
import org.apache.felix.scr.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

@Component(label = BootStrap.COMPONENT_LABEL, description = BootStrap.COMPONENT_DESCRIPTION)
@Properties({
        @Property(name = ""camelContextId"", value = ""camel-scr-exercise""),
        @Property(name = ""active"", value = ""true"")
})
@References({
        @Reference(name = ""camelComponent"",referenceInterface = ComponentResolver.class,
                cardinality = ReferenceCardinality.MANDATORY_MULTIPLE, policy = ReferencePolicy.DYNAMIC,
                policyOption = ReferencePolicyOption.GREEDY, bind = ""gotCamelComponent"", unbind = ""lostCamelComponent"")
})
public class BootStrap extends AbstractCamelRunner {

    public static final String COMPONENT_LABEL = ""bootstrap.CamelScrExercise"";
    public static final String COMPONENT_DESCRIPTION = ""This is the description for camel-scr-exercise."";

    public static final Logger LOGGER = LoggerFactory.getLogger(BootStrap.class);

    @Override
    protected List<RoutesBuilder> getRouteBuilders() {
        LOGGER.info(""Load Camel Routes definition"");
        List<RoutesBuilder> routesBuilders = new ArrayList<>();
        routesBuilders.add(new GreeterRoute());
        return routesBuilders;
    }
}

{code}",,cmoulliard,githubbot,njiang,sabre1041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 04 13:25:46 UTC 2015,,,,,,,,,,,"0|i23s87:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Dec/14 21:47;sabre1041;Tested using both Karaf 2.4 and Fuse 6.1.1 (redhat-611412) using the camel-archetype-scr with a similar configuration as described in this issue. Successfully deployed to Karaf but threw identical exception in Fuse. 

Diagnosed issue to be a potential class loading issue with SCR using bind methods from an abstract class. When overriding methods in subclass and calling super, context deployed successfully on both Fuse and Karaf without error.;;;","02/Jan/15 03:29;githubbot;GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/364

    CAMEL-8185: Changed parameter of scr reference event methods

    Modified the default bind/unbind scr reference method parameter from a ComponentResolver to a ServiceReference to avoid the possibility of an argument type mismatch exception. This can occur if multiple versions of Camel are installed (such as JBoss Fuse 6.1) and have registered their own versions of services within the OSGi ServiceRegistry. 
    
    Since these methods do not utilize the ComponentResolver themselves, moving to a ServiceReference does not change the functionality of the component and the end user can define bind/unbind methods of their own.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8185

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/364.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #364
    
----
commit 1615d666854403e42d283f966bbeb767977ce7a7
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-01-02T02:29:59Z

    CAMEL-8185: Changed parameter of scr reference event methods from service interface to service reference to handle multiple service versions

----
;;;","04/Jan/15 07:24;njiang;The patch has been merged into camel master branch.;;;","04/Jan/15 13:25;githubbot;Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/364
;;;",,,,,,,,,,,,,,,,,,,,
Camel Jetty/Http4 producers should respect Content-Length/Transfer-Encoding:Chunked headers,CAMEL-8169,12763146,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Dec/14 00:52,11/Feb/15 11:57,14/Jul/23 05:49,29/Dec/14 06:19,2.13.3,2.14.1,,,,,,,2.13.4,2.14.2,2.15.0,,camel-http4,camel-jetty,,,,,0,,,,,,,"If Camel is used the HTTP proxy, users expect that Content-Length and Transfer-Encoding: Chunked headers should be respected when incoming request is redirected using HTTP4 or Jetty producers.
If example if I send request to the following route...
{code}
from(""servlet://0.0.0.0:8080"").to(""http4://foo.com""); 
{code}
...and this request contains Content-Length header (and doesn't contain Transfer-Encoding: Chunked header) then request forwarded to foo.com should not be chunked. In Fuse 6.1 Camel will chunk frowarded request.
In general client sending request to the Camel proxy gateway, should be sure that by default Camel will keep the same chunking/nonchunking behavior as specified in the original request.",,njiang,vkasala,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 11 11:57:59 UTC 2015,,,,,,,,,,,"0|i23o7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Dec/14 00:53;njiang;We need to pass the Content-Length header to the Jetty/Http4 producers when the message body is Stream.
Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;","11/Feb/15 11:57;vkasala;Hi Willem,

I saw in your commits [1], that in ""HttpRouteContentLengthTest"" test you use ""invokeMethod"", which does not use the second parameter. You have 2 different test methods, that use those method with ""true/false"" values, however this value is not set.

Can you check your unit test, please?

thanks a lot,
Viliam Kasala

[1] https://fisheye6.atlassian.com/changelog/camel-git/tests/camel-itest/src/test/java/org/apache/camel/itest/http/HttpRouteContentLengthTest.java;;;",,,,,,,,,,,,,,,,,,,,,,
Mina Does Not Unbind From Listening Port,CAMEL-8168,12763145,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Dec/14 00:47,20/Oct/15 13:44,14/Jul/23 05:49,24/Dec/14 04:22,2.13.3,2.14.1,,,,,,,2.13.4,2.14.2,2.15.0,,camel-mina2,,,,,,0,,,,,,,"If a bundle includes a mina consumer as the one below, when you stop the bundle, the port is not released. Therefore, when restarting the bundle, you'll get a port already in use bind exception.
{code}
<from uri=""mina2:tcp://0.0.0.0:12345?sync=true""/>
{code}
Note that the problem does not exist if you're using an IP address other than 0.0.0.0. For example:
{code}
<from uri=""mina2:tcp://{{host.name}}:12345?sync=true""/>
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 24 04:22:12 UTC 2014,,,,,,,,,,,"0|i23o7b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Dec/14 04:22;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
socketFactory must also be set in MailConfiguration when STARTTLS is used,CAMEL-8163,12762557,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,laeubi,laeubi,18/Dec/14 12:46,25/Feb/16 07:13,14/Jul/23 05:49,25/Feb/16 07:13,2.14.0,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-mail,,,,,,0,,,,,,,"When using STARTTLS with custom sslContextParameters it fails since the factory setup is only done for smtps/imaps/pops, same problem applies to the ""dummyTrustManager.",,davsclaus,githubbot,laeubi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 24 13:50:19 UTC 2016,,,,,,,,,,,"0|i23km7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 08:47;davsclaus;People is welcome to work on a patch;;;","24/Feb/16 12:16;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/863

    CAMEL-8163 - socketFactory must also be set in MailConfiguration when STARTTLS is used

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-8163

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/863.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #863
    
----
commit fc0c886d6ca02274870538d53be9266bd4b94852
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-24T12:15:35Z

    CAMEL-8163 - socketFactory must also be set in MailConfiguration when STARTTLS is used

----
;;;","24/Feb/16 13:36;laeubi;Great to see progress on this issue keep up the good work (y);;;","24/Feb/16 13:50;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/863
;;;",,,,,,,,,,,,,,,,,,,,
Generic methods used as endpoints fail in Java 8,CAMEL-8160,12762332,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,andrewcelerity,andrewcelerity,17/Dec/14 16:49,21/Dec/14 13:10,14/Jul/23 05:49,21/Dec/14 13:10,2.14.0,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,0,,,,,,,"In Java 8 annotations are duplicated to generics' bridge methods.  Camel, rightly, does not support bridge methods as endpoints.  However, because of this change in the language annotations such as @Consume will end up on them after compilation leaving Camel in an invalid state.

I will attach a sample project.

This ticket is from this discussion thread: http://camel.465427.n5.nabble.com/Changes-in-Java-8-generics-breaking-Camel-td5760638.html","mac, java 8",andrewcelerity,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Dec/14 16:54;andrewcelerity;cameljava8.zip;https://issues.apache.org/jira/secure/attachment/12687762/cameljava8.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 17 16:54:06 UTC 2014,,,,,,,,,,,"0|i23j8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Dec/14 16:54;andrewcelerity;Sample maven project with spring boot, camel 2.14.0.  Executes successfully with JDK 7.  Fails on JDK 8.  Using maven to set the source/target version to 1.7 while using the 1.8 compiler also fails.

This was built on Mac OS Yosemite with JDK 1.8.0_25 from Oracle.;;;",,,,,,,,,,,,,,,,,,,,,,,
Provide way to specify fields to patch in google drive endpoints,CAMEL-8158,12762090,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,16/Dec/14 20:03,16/Dec/14 20:06,14/Jul/23 05:49,16/Dec/14 20:06,,,,,,,,,2.14.2,2.15.0,,,,,,,,,0,,,,,,,,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 16 20:06:32 UTC 2014,,,,,,,,,,,"0|i23hrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Dec/14 20:06;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/52b7b945;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http - NPE after recent changes,CAMEL-8157,12762025,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,16/Dec/14 15:15,18/Dec/14 07:21,14/Jul/23 05:49,18/Dec/14 07:21,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-http,,,,,,0,,,,,,,"I suspect its due a recent bugfix for something about deleting temp files.

To reproduce then set <camelContext streamCache=""true""> in the camel-example-servlet-tomcat, and deploy the WAR to Tomcat and run it.

You get a NPE then
{code}
java.lang.NullPointerException
	at org.apache.camel.component.http.HttpMessage.getEndpoint(HttpMessage.java:73)
	at org.apache.camel.component.http.HttpMessage.createBody(HttpMessage.java:66)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:758)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:728)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:240)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:888)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:364)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:144)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:136)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:526)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:655)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:744)
{code}",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 18 07:21:14 UTC 2014,,,,,,,,,,,"0|i23hdb:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"18/Dec/14 06:27;njiang;It was caused by the recent fix of CAMEL-8086, i just updated the CamelInternalProcessor to reset the out message body if the exchange has the out message.;;;","18/Dec/14 07:21;njiang;Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
SNSClient should setup endpoint before creating the topic,CAMEL-8156,12762007,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Dec/14 13:02,20/Oct/15 13:42,14/Jul/23 05:49,17/Dec/14 05:02,2.13.3,2.14.1,,,,,,,2.13.4,2.14.2,2.15.0,,camel-aws,,,,,,0,,,,,,,"When using camel-aws-sns endpoint, it always create the topic on the default endpoint.

Here is the mailing thread about [it|http://camel.465427.n5.nabble.com/missing-region-property-in-aws-sns-component-tp4303687p5760674.html] ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 17 05:02:05 UTC 2014,,,,,,,,,,,"0|i23h9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Dec/14 05:02;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix potential connection leak in StreamList mode,CAMEL-8153,12761718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,k.salikhov,k.salikhov,15/Dec/14 10:34,17/Dec/14 07:06,14/Jul/23 05:49,17/Dec/14 07:06,2.14.0,,,,,,,,2.14.2,2.15.0,,,camel-jdbc,,,,,,0,,,,,,,"When using camel-jdbc component with newly introduced StreamList mode I've faced a 100% reproducible connection leak issue.

My investigation leads me to Tomcat connection pool implementation - it has problem with returing current connection from Statement object - instead of returning pool specific proxy it returns actual JDBC connection.

There is `statement.getConnection()` line in `org.apache.camel.component.jdbc.ResultSetIterator` so in my particular scenario things work like this:
1) Camel borrows connection from Tomcat pool
2) Camel leaves JDBC connection and ResultSet intact as we use StreamList mode of camel-jdbc component
3) Route processes resultset in streaming mode and completes successfully
4) Camel tries to close connection, but due to connection pool implementation issue it closes actual JDBC connection instead of returing it to the pool
5) Actual JDBC connection is closed an connection pool is unaware of this fact thinking it's still open and in use by application

It would be more error prone to pass proper connection object to ResultSetIterator along with result set and not rely on statement.getConnection() call.
","Linux, Apache Tomcat 7.0.41",davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Dec/14 10:34;k.salikhov;leakPatch.diff;https://issues.apache.org/jira/secure/attachment/12687217/leakPatch.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 17 07:06:12 UTC 2014,,,,,,,Patch Available,,,,"0|i23fif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Dec/14 10:34;k.salikhov;Possible fix patch;;;","17/Dec/14 07:06;davsclaus;Thanks for the detailed report and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,
Avoid possible NPE in Camel Box component on exceptions during initial login,CAMEL-8148,12761191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dhirajsb,dhirajsb,dhirajsb,11/Dec/14 23:42,12/Dec/14 00:09,14/Jul/23 05:49,12/Dec/14 00:09,2.14.0,2.15.0,,,,,,,2.14.2,2.15.0,,,,,,,,,0,camel-box,oauth2,,,,,There is a possible NPE that can happen on exceptions during the initial OAuth flow in Camel Box component. This is due to a listener attribute in LoginAuthFlowUI which is never set by Box.com SDK. ,,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 12 00:09:53 UTC 2014,,,,,,,,,,,"0|i23ccv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Dec/14 00:00;dhirajsb;Also, box java SDK version can now be upgraded to 3.1.7, which fixes a previous issue with updating collaborations. ;;;","12/Dec/14 00:09;dhirajsb;Fixed with commit https://github.com/apache/camel/commit/646e7106ee24b511b48b9d7258c30b99f5d7b7fc on branches camel-2.14.x and master;;;",,,,,,,,,,,,,,,,,,,,,,
Starting and stopping routes leak threads,CAMEL-8146,12761060,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bjorn.ellingsen,bjorn.ellingsen,11/Dec/14 13:14,18/Dec/14 12:21,14/Jul/23 05:49,18/Dec/14 12:21,2.14.0,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,0,,,,,,,"Seems to be identical consequence as with previous issue CAMEL-5677, but perhaps due to a different cause.

Having a file or SFTP based route, trying something like:
{code}
for (int i = 0; i < 50; i++) {
    camelContext.startRoute(routeId);
    camelContext.stopRoute(routeId);
}
{code}
results in 50 orphan threads of this type:

{code}
""Camel (camel) thread #231 - sftp://user@host/path"" #10170 daemon prio=5 os_prio=0 tid=0x00007fa4b46a5800 nid=0x10fc waiting on condition [0x00007fa452934000]
   java.lang.Thread.State: TIMED_WAITING (parking)
      at sun.misc.Unsafe.park(Native Method)
      - parking to wait for  <0x00000000b83dc900> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
      at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
      at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
      at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
      at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
      at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
      at java.lang.Thread.run(Thread.java:745)
{code}

Switching to suspend/resume solves the problem, however I guess the start/stop issue should be addressed.
",,bjorn.ellingsen,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 18 12:21:48 UTC 2014,,,,,,,,,,,"0|i23bbb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Dec/14 12:21;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
Simple language does not resolve overloaded method calls,CAMEL-8137,12760488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jmark,jmark,09/Dec/14 17:30,16/Mar/15 09:24,14/Jul/23 05:49,10/Dec/14 16:32,2.14.0,,,,,,,,2.15.0,,,,camel-core,,,,,,0,,,,,,,"I am having an issue with the Simple language. I have a property named {{myFile}} with a value of a {{java.nio.file.Path}} object. When I try to use the following expression {noformat} ${property.file.getFileName} {noformat} in order to invoke the getFileName() method I get an exception saying:
{noformat}
Ambiguous method invocations possible: [public sun.nio.fs.UnixPath.getFileName(), public abstract java.nio.file.Path java.nio.file.Path.getFileName()]
{noformat}

I am able to use SpEL if I do
{noformat}
#{properties[myFile].getFileName()}
{noformat}

It would be nice if Simple supported this as well so I wouldn't have to go through hoops in order to use SpEL since I can't use SpEL to specify parameters in a uri.",,davsclaus,jmark,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8492,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 10 12:04:46 UTC 2014,,,,,,,,,,,"0|i238h3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Dec/14 08:45;davsclaus;Yeah the override method check was too stringent, checking that the types must be same. But we should relax that and check for type isAssignableFrom which is the situation with the java nio Path, where as getFileName is from the interface using the Path api, and the impl class uses the unix class types.;;;","10/Dec/14 12:04;davsclaus;This fix needs a bit more changes to BeanInfo in camel-core that I would like to introduce in a patch fix, so moving this to 2.15 release. ;;;",,,,,,,,,,,,,,,,,,,,,,
We should not add synchronisation if the CachedOutputStream closedOnCompletion option is false,CAMEL-8134,12760371,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Dec/14 07:22,09/Dec/14 19:25,14/Jul/23 05:49,09/Dec/14 19:25,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"CachedOutputStream adds synchronization into exchange even the closedOnCompletion option is false, it could cause OOM error with the HttpProducer endpoint does ""unlimited/limited"" redelivery. 

Here is the [discussion|http://camel.465427.n5.nabble.com/HttpProducer-endpoint-with-unlimited-limited-redelivery-memory-leak-tp5760285.html] about this issue. ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7055,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-12-09 07:22:38.0,,,,,,,,,,,"0|i237rb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyInject does nothing for setter method,CAMEL-8126,12759661,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,daniel.pocock,daniel.pocock,05/Dec/14 12:44,08/Dec/14 11:19,14/Jul/23 05:49,08/Dec/14 11:19,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"Using the annotation @PropertyInject on a setter method of the RouteBuilder class doesn't appear to set the value.

public class RouteBuilder extends SpringRouteBuilder {

        private String fooBar;	

	@PropertyInject(""foo.bar"")
        private void setFooBar(String fooBar) {
               this.fooBar = fooBar;
        }

        @Override
        public void configure() throws Exception {
		
		logger.info(""foo.bar = {}"", fooBar);
        }
        ...
}


The log output says ""fooBar = null""

Using the {{ }} notation in endpoint URIs is working though.

	


","Linux, JDK1.7, standalone Camel/Spring J2SE process running in Eclipse",daniel.pocock,davsclaus,,,,,,,,,,,,,,,,,,,CAMEL-8125,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 08 11:19:22 UTC 2014,,,,,,,,,,,"0|i233gn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Dec/14 13:38;daniel.pocock;I tried putting a breakpoint in the setter method.  The method is never called (as opposed to the possibility that it was being invoked with a null argument)
;;;","08/Dec/14 08:51;davsclaus;Can you provide more details how you run this application? Maybe a sample project / unit test.

Also how do you create that class RouteBuilder? eg it must be created by Spring to trigger the dependency injection. If you use new RouteBuilder() then it wont trigger.;;;","08/Dec/14 09:38;daniel.pocock;I run the application by using the main class org.apache.camel.spring.Main

In camelContext.xml I have:

        <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
                <!-- Load our routes defined in the Java DSL -->
                <camel:package>org.example.myapp</camel:package>
        </camel:camelContext>

and the RouteBuilder class is in package org.example.myapp

Is using org.apache.camel.spring.Main sufficient for property injection to work?

;;;","08/Dec/14 11:19;davsclaus;This ticket is because of the NPE from CAMEL-8125 that the code doesnt call the setter.;;;",,,,,,,,,,,,,,,,,,,,
PropertyInject gives NullPointerException,CAMEL-8125,12759660,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,daniel.pocock,daniel.pocock,05/Dec/14 12:43,09/Feb/15 15:05,14/Jul/23 05:49,08/Dec/14 11:18,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"Using the annotation @PropertyInject on a field of the RouteBuilder class gives a NullPointerException

public class RouteBuilder extends SpringRouteBuilder {
	
	@PropertyInject(""foo.bar"")
	private String fooBar;
        ...
}

Using the {{ }} notation in endpoint URIs is working though.

	


","Linux, JDK1.7, standalone Camel/Spring J2SE process running in Eclipse",daniel.pocock,davsclaus,,,,,,,,,,,,,,,,,,CAMEL-8126,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 09 14:57:37 UTC 2015,,,,,,,,,,,"0|i233gf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Dec/14 08:52;davsclaus;Please paste the stacktrace when you report a NPE exception.;;;","08/Dec/14 09:40;daniel.pocock;I had posted the stack on the mailing list:

http://mail-archives.apache.org/mod_mbox/camel-users/201412.mbox/%3C5481A68F.9090709%40pocock.pro%3E

Here it is in full:


Exception in thread ""main"" org.apache.camel.RuntimeCamelException:
org.springframework.beans.factory.BeanCreationException: Error creating
bean with name 'org.example.RouteBuilder': Initialization of bean
failed; nested exception is
org.apache.camel.spring.GenericBeansException: Error post processing
bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1364)
    at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:323)
    at
org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
    at
org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
    at
org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)
    at
org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
    at
org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
    at
org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
    at
org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:217)
    at org.apache.camel.spring.Main.doStart(Main.java:157)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
    at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
    at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
    at org.apache.camel.spring.Main.main(Main.java:90)
Caused by: org.springframework.beans.factory.BeanCreationException:
Error creating bean with name 'org.example.RouteBuilder': Initialization
of bean failed; nested exception is
org.apache.camel.spring.GenericBeansException: Error post processing
bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:336)
    at
org.apache.camel.spring.spi.SpringInjector.newInstance(SpringInjector.java:39)
    at
org.apache.camel.spring.PackageScanRouteBuilderFinder.instantiateBuilder(PackageScanRouteBuilderFinder.java:113)
    at
org.apache.camel.spring.PackageScanRouteBuilderFinder.appendBuilders(PackageScanRouteBuilderFinder.java:76)
    at
org.apache.camel.spring.CamelContextFactoryBean.findRouteBuildersByPackageScan(CamelContextFactoryBean.java:224)
    at
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.findRouteBuilders(AbstractCamelContextFactoryBean.java:847)
    at
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.setupRoutes(AbstractCamelContextFactoryBean.java:329)
    at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:321)
    ... 12 more
Caused by: org.apache.camel.spring.GenericBeansException: Error post
processing bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:396)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1507)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
    ... 21 more
Caused by: org.apache.camel.RuntimeCamelException:
java.lang.NullPointerException
    at
org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1364)
    at
org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:253)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFieldProperty(DefaultCamelBeanPostProcessor.java:206)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor$1.doWith(DefaultCamelBeanPostProcessor.java:172)
    at
org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:73)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:168)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:82)
    at
org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
    ... 24 more
Caused by: java.lang.NullPointerException
    at java.lang.String.contains(String.java:2076)
    at
org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:232)
    ... 30 more
12:38:25.268 [Thread-1] INFO 
org.apache.camel.main.MainSupport$HangupInterceptor - Received hang up -
stopping the main instance.
;;;","08/Dec/14 10:18;davsclaus;The workaround is to setup a properties component, eg property placeholder, then you avoid the NPE
http://camel.apache.org/using-propertyplaceholder.html;;;","08/Dec/14 10:28;daniel.pocock;
I already have that, these are in camelContext.xml too:

        <context:property-placeholder location=""file://${app.home}/config/app.properties"" />

        <bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
                <property name=""location"" value=""file://${app.home}/config/app.properties""/>
        </bean>

The properties are working in the camelContext.xml using ${spring} notation and in the URIs in RouteBuilder.java using {{camel}} notication.

Only the injection is not working.;;;","09/Feb/15 14:57;daniel.pocock;Just another observation on this for Camel 2.13 users and a workaround:

- if I instantiate the PropertiesComponent as a spring bean like this:

    <bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
        <property name=""location"" 
       value=""file:${project.home}/properties""/>
    </bean>

then I have the NullPointerException problem and can't inject properties into my RouteBuilder.

If I instantiate the PropertiesComponent this way:

    <camelContext id=""camel"" ... >
        <propertyPlaceholder id=""properties"" 
            location=""file:${project.home}/properties""/>
        ....

then I can use the PropertyInject annotation without the NullPointerException.

I tried manually instantiating the RouteBuilder as a Spring bean and then putting a reference to it in my <camelContext/> but that didn't help resolve the issue.  I'm currently using the <package>org.example.project</package> element without <camelContext/> to automatically find and instantiate my RouteBuilder and as long as I set <propertyPlaceholder/> it seems OK.
;;;",,,,,,,,,,,,,,,,,,,
Mina2 SSL initiates handshake backwards,CAMEL-8123,12759427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,justincozzens,justincozzens,04/Dec/14 14:15,23/Dec/14 16:56,14/Jul/23 05:49,05/Dec/14 06:15,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-mina2,,,,,,1,,,,,,,"The Mina2Consumer and Mina2Producer are configured backwards for SSL handshake initiation. The consumer is trying to initiate the handshake rather than the producer. You can see this by setting up a SSL enabled consuming route and telnet to the port, you will immediately get some data sent from the server to the client rather than the server waiting on the client to initiate the handshake.
The issue is Mina2Consumer:160, it is setting UseClientMode to true, it should be false. Mina2Producer line 313 needs to also change to the following:
            SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());
filter.setUseClientMode(true);
connector.getFilterChain().addFirst(""sslFilter"", filter);

As far as I can tell this has been a bug since this component was introduced.",,githubbot,justincozzens,njiang,pberkman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 23 16:56:26 UTC 2014,,,,,,,,,,,"0|i2321j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Dec/14 20:37;githubbot;GitHub user peterberkman opened a pull request:

    https://github.com/apache/camel/pull/349

    Camel 2.13.x Correct TLS Handshake

    fixes: https://issues.apache.org/jira/browse/CAMEL-8123

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/peterberkman/camel camel-2.13.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/349.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #349
    
----
commit 0fe18488bc237ce1d03b92dc50c0a8e62b6ebdc9
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:29:45Z

    Fixes #CAMEL-8123: Consumer should NOT use ClientMode for TLS

commit e446b90315534ca9a6ed8a6a76e5bd3af748f012
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:33:02Z

    Fixes #CAMEL-8123: Producer SHOULD use ClientMode for TLS

----
;;;","04/Dec/14 20:39;githubbot;GitHub user peterberkman opened a pull request:

    https://github.com/apache/camel/pull/350

    Correctly set client mode for TLS handshakes

    Fixes CAMEL-8123 - https://issues.apache.org/jira/browse/CAMEL-8123

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/peterberkman/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/350.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #350
    
----
commit aaf8b632a7ef0e068ebea8a0e98e947e21f1d57e
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:35:40Z

    Fixes #CAMEL-8123: Producer SHOULD use ClientMode for TLS

commit cf7e22b4592e310901443f5ce9e2cc14a4ebbbcc
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:36:51Z

    Fixes #CAMEL-8123: Consumer should NOT use ClientMode for TLS

----
;;;","04/Dec/14 22:05;pberkman;there was a copy/paste mistake in the above pull requests.   Please see comment on the pull request...  basically, on the Producer, change ""acceptor"" to ""connector"".;;;","05/Dec/14 06:15;njiang;Merged the patch into master, camel-2.13.x and camel-2.14.x branches with thanks to Justin.;;;","23/Dec/14 16:42;githubbot;Github user peterberkman closed the pull request at:

    https://github.com/apache/camel/pull/349
;;;","23/Dec/14 16:56;githubbot;Github user peterberkman closed the pull request at:

    https://github.com/apache/camel/pull/350
;;;",,,,,,,,,,,,,,,,,,
camel:run using <useBlueprint> option does not launch camel example project,CAMEL-8122,12759387,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,04/Dec/14 08:56,20/May/16 14:35,14/Jul/23 05:49,05/Dec/14 08:02,2.15.0,,,,,,,,,,,,examples,,,,,,0,,,,,,,"When we launch the maven camel:run goal with the camel-example-sql-blueprint, the camel project is not started and this OSGI Service error is reported.

I suspect that some bundles are missing and not loaded by the PoJoSr classloader when the project is started/launched by the camel-maven-plugin 

See line of code 

{code}
package org.apache.camel.maven;
...
public class RunMojo extends AbstractExecMojo {
...

        } else if (usingBlueprintMain) {
            mainClass = ""org.apache.camel.test.blueprint.Main"";
            // must include plugin dependencies for blueprint
            extraPluginDependencyArtifactId = ""camel-test-blueprint"";
{code}

Error reported on the console

{code}

Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)


[INFO] --- camel-maven-plugin:2.15-SNAPSHOT:run (default-cli) @ camel-example-sql-blueprint ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.15-SNAPSHOT starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [2], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [19], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [28], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [28], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [2], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-sql [6], symbolicName: org.apache.camel.camel-sql
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1417682923424
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************
{code}",,cmoulliard,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9313,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 08:02:44 UTC 2014,,,,,,,,,,,"0|i231sn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Dec/14 03:17;njiang;Hi Charles, 

I just run the mvn camel:run inside of camel-example-sql-blueprint, I cannot reproduce the error that you hit.
Can you run  ""mvn clean install -Dtest=false"" to build the Camel-2.15-SNAPSHOT first?

Regards,

Willem;;;","05/Dec/14 08:02;cmoulliard;Issue not longer there after doing a mvn clean install of camel-2.15-SNAPSHOT project;;;",,,,,,,,,,,,,,,,,,,,,,
Infinite Loop Within Camel if the temp file directory is not writable,CAMEL-8121,12759339,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Dec/14 02:33,05/Dec/14 06:14,14/Jul/23 05:49,05/Dec/14 06:14,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"If the target 'tmp' directory (specified by java.io.tmpdir) used by Camel, does not have proper privileges, then Camel enters infinite loop. The offending code is found in org.apache.camel.util.FileUtil.createNewTempDir().

We need to check the if the temp file is writable.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 06:14:59 UTC 2014,,,,,,,,,,,"0|i231hz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Dec/14 06:14;njiang;Applied the patch into camel master ,camel-2.13.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
BigDecimalPatternFormat overwrites Locale setting,CAMEL-8118,12759166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,TomSO,TomSO,03/Dec/14 13:15,04/Dec/14 07:21,14/Jul/23 05:49,04/Dec/14 07:21,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-bindy,,,,,,0,,,,,,,"Because of this change request (https://issues.apache.org/jira/browse/CAMEL-7742) was a new feature implemented that allows pattern annotations for BigDecimal fields in CSV model classes for the Camel Bindy component.

The problem with that is, that the usage of this feature overwrites the current Locale setting of the environment. For example, if the current Locale was set to ""German"" and the provided pattern for the BigDecimal field requires ""US"" to unmarshal the numbers in the CSV file, then the method BigDecimalPatternFormat#parse(String) overwrites the Locale, but doesn't restore the former setting. This can cause problems for other software components that depends on the Locale setting.

The cause of the problem can be found here on line 21: [Source of BigDecimalPatternFormat|https://fisheye6.atlassian.com/browse/camel-git/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/format/BigDecimalPatternFormat.java?r=2854e18ff985ffb9abaca305038801f6c508f0c4]

A possible workaround would be storing the current locale temporarily, overwrite that setting, perform the formatting task and then restore the former locale setting.
Like in this code example:
{code}
if (getNumberFormat() != null) {
    final Locale currentLocale = Locale.getDefault();
    Locale.setDefault(super.getLocale());
    DecimalFormat df = (DecimalFormat)getNumberFormat();
    df.setParseBigDecimal(true);
    BigDecimal bd = (BigDecimal)df.parse(string.trim());
    if(super.getPrecision() != -1) {
        bd = bd.setScale(super.getPrecision(), RoundingMode.valueOf(super.getRounding()));
    }
    Locale.getDefault(); // what is the purpose of this line?
    Locale.setDefault(currentLocale); // restore the Locale setting
    return bd;
}
{code}",,TomSO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,2014-12-03 13:15:56.0,,,,,,,,,,,"0|i230g7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML parsing error is ignored by xtoknize XML tokenizer,CAMEL-8106,12758923,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,02/Dec/14 15:50,02/Dec/14 15:57,14/Jul/23 05:49,02/Dec/14 15:57,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"XML parsing exceptions are ignored by xtokenize XML tokenizer and this is leading to the same token extracted repeated times.
",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-12-02 15:50:44.0,,,,,,,,,,,"0|i22yx3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Collection should be optional for getDbStats,CAMEL-8100,12758736,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,padewitte,padewitte,01/Dec/14 20:08,02/Dec/14 14:30,14/Jul/23 05:49,02/Dec/14 14:30,2.13.0,2.13.2,2.14.0,,,,,,2.15.0,,,,camel-mongodb,,,,,,0,easyfix,,,,,,Collection should be optional for getDbStats on route description,,njiang,padewitte,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 02 14:29:51 UTC 2014,,,,,,,,,,,"0|i22xrz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/14 20:37;padewitte;Github pullrequest #346 is fixing MongoDB component on 2.15-SNAPSHOT;;;","02/Dec/14 14:29;njiang;Applied the patch into camel master branch with thanks to Pierre.;;;",,,,,,,,,,,,,,,,,,,,,,
CxfEndpoint schema should support to publishEndpointUrl from the element attribute,CAMEL-8096,12758551,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,01/Dec/14 02:24,04/Dec/14 02:03,14/Jul/23 05:49,04/Dec/14 02:03,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-cxf,,,,,,0,,,,,,,"We need to update the schema definition as camel-cxf already support to setup the publishEndpointUrl option out of box.
The work around is define the publishEndpointUrl from the endpoint properties just like this.
{code}
<cxf:cxfEndpoint id=""routerEndpoint"" address=""http://localhost:9090/CxfGreeterConverterRouterTest/CamelContext/RouterPort""
    		serviceClass=""org.apache.hello_world_soap_http.Greeter"" 
    		endpointName=""s:SoapPort""
    		serviceName=""s:SOAPService""
    	    xmlns:s=""http://apache.org/hello_world_soap_http"">
    	    <cxf:properties>
    	       <entry key=""publishedEndpointUrl"" value=""http://www.simple.com/services/test"" />
    	    </cxf:properties>
    	    
   </cxf:cxfEndpoint>

{code} ",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 04 02:03:26 UTC 2014,,,,,,,,,,,"0|i22wn3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Dec/14 19:15;davsclaus;Willem should this be backported and if so can you do this asap.;;;","04/Dec/14 02:03;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty: Do not use org.jboss.netty.util.internal.ExecutorUtil as it breaks the camel-netty Karaf feature,CAMEL-8094,12758471,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,29/Nov/14 22:49,30/Nov/14 11:13,14/Jul/23 05:49,30/Nov/14 11:13,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-netty,,,,,,0,,,,,,,,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8030,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 30 11:01:22 UTC 2014,,,,,,,,,,,"0|i22w5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Nov/14 10:59;bvahdat;Notice the keyword {{internal}} given by the class name {{org.jboss.netty.util.internal.ExecutorUtil}} which has got a special meaning in OSGi.;;;","30/Nov/14 11:01;bvahdat;Instead of extending the Netty's pool classes:

{{NioWorkerPool}}
{{NioServerBossPool}}
{{NioClientBossPool}}

We could better invoke the _*right*_ API methods of them. That’s {{releaseExternalResources()}} instead of {{shutdown()}}, which beforehand would invoke {{shutdown()}} internally as well.;;;",,,,,,,,,,,,,,,,,,,,,,
cxf:producer Matrix Params are missing,CAMEL-8092,12758385,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mail2dkumaran@gmail.com,mail2dkumaran@gmail.com,28/Nov/14 18:50,08/Dec/14 22:09,14/Jul/23 05:49,05/Dec/14 06:13,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-cxf,,,,,,0,,,,,,,"In cxfrs component the producer strips away the matrix param.

Steps to reproduce:

Web service proxying configuration (camel-proxy-example). 

<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
<route>
<from uri=""cxfrs://bean://rsServer?bindingStyle=SimpleConsumer""/>  
<to uri=""cxfrs://bean://rsClient""/>  
</route>  
</camelContext>
 
But we can see that the Matrix Parameters are completely stripped away in CxfRsProducer.  The SimpleConsumer as the binding style the matrix param will be sent as header params.  But shouldn't the matrix params part of the URL. 



ID: 15 
Address: http://localhost:8001/test/services/proxyServer/boxing;state=Current
Http-Method: GET 
Content-Type: 
Headers: {Accept=[application/xml], accept-encoding=[gzip, deflate], accept-language=[en-us], Authorization=[xxxx], connection=[keep-alive], Content-Length=[0], Content-Type=[null], host=[localhost:8001]} 
-------------------------------------- 

--------------------------- 
ID: 16 
Address: http://localhost:29090/MyServer/boxing
Http-Method: GET 
Content-Type: */* 
Headers: {Accept=[application/xml], state=[Current],  user-agent=[xxxxxx], accept-encoding=[gzip, deflate], Content-Length=[0], Authorization=[xxxxx], org.apache.cxf.request.uri=[/services/proxyServer/boxing;state=Current], host=[localhost:8001], connection=[keep-alive], accept-language=[en-us], org.apache.cxf.message.Message.PATH_INFO=[/boxing], org.apache.cxf.request.method=[GET], Content-Type=[*/*]} 
    
I have came across similar issue posted in the past.  CAMEL-5405 CXF Transport loses HTTP Matrix parameters  But we are using camel 2.14.0 version. 
","JDK 8.  Spring,",mail2dkumaran@gmail.com,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Nov/14 18:52;mail2dkumaran@gmail.com;CxfRsProducer.java;https://issues.apache.org/jira/secure/attachment/12684210/CxfRsProducer.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 08 22:09:56 UTC 2014,,,,,,,,,,,"0|i22vn3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Nov/14 18:52;mail2dkumaran@gmail.com;Fixed the issue in CxfRsProducer  with the new methods like setupClientMatrix,getMatrixParametersFromMatrixString, Please validate.
;;;","05/Dec/14 06:13;njiang;Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Kumarann.;;;","08/Dec/14 22:09;mail2dkumaran@gmail.com;Thanks Willem for porting the fix the camel master . Looking forward for 2.14.x release;;;",,,,,,,,,,,,,,,,,,,,,
FTP can wait indefinitely when connection timeout occurs during connect,CAMEL-8088,12758268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ukcrpb6,ukcrpb6,27/Nov/14 17:48,15/Feb/15 11:23,14/Jul/23 05:49,15/Feb/15 11:23,2.13.3,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-ftp,,,,,,0,,,,,,,"In our production system we have seen cases where the FTP thread is waiting for a response indefinitely despite having set _soTimeout_ on the connection. On investigation this is due to a condition that can occur where a socket is able to connect yet a firewall or the ilk then blocks further traffic.

This can be over come by setting the property _ftpClient.defaultTimeout_ to a non-zero value.

It should be the case where if upon initial socket connection no response occurs that the socket should be deemed dead, however this is not the case.

When the following exception is thrown during initial connect to an FTP server, after the socket has connected but whilst awaiting the inital reply it can leave the RemoteFileProducer in a state where it is connected but not logged in and no attempt reconnect is attempted, if the soTimeout as set by _ftpClient.defaultTimeout_ is set to zero then it can cause a subsequent command will wait for a reply indefinitely.

{noformat}
Caused by: java.io.IOException: Timed out waiting for initial connect reply
	at org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:389) ~[commons-net-3.1.jar:3.1]
	at org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:796) ~[commons-net-3.1.jar:3.1]
	at org.apache.commons.net.SocketClient.connect(SocketClient.java:172) ~[commons-net-3.1.jar:3.1]
	at org.apache.commons.net.SocketClient.connect(SocketClient.java:192) ~[commons-net-3.1.jar:3.1]
	at org.apache.camel.component.file.remote.FtpOperations.connect(FtpOperations.java:95) ~[camel-ftp-2.13.1.jar:2.13.1]
{noformat}

The RemoteFileProducer will enter this block as the loggedIn state has not yet been reached, however the existing broken socket is reused.

{code}
        // recover by re-creating operations which should most likely be able to recover
        if (!loggedIn) {
            log.debug(""Trying to recover connection to: {} with a fresh client."", getEndpoint());
            setOperations(getEndpoint().createRemoteFileOperations());
            connectIfNecessary();
        }
{code}

Yet the _connectIfNecessary()_ method will return immediately since the check condition is based on socket connection and takes no account of whether login was achieved so the 'dead' socket is reused.

{code}
    protected void connectIfNecessary() throws GenericFileOperationFailedException {
        // This will be skipped when loggedIn = false and the socket is connected
        if (!getOperations().isConnected()) {
            log.debug(""Not already connected/logged in. Connecting to: {}"", getEndpoint());
            RemoteFileConfiguration config = getEndpoint().getConfiguration();
            loggedIn = getOperations().connect(config);
            if (!loggedIn) {
                return;
            }
            log.info(""Connected and logged in to: "" + getEndpoint());
        }
    }
{code}

A dirty test that blocks of this blocking condition:

{code}
package ftp;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.apache.commons.net.ftp.FTPClient;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockftpserver.fake.FakeFtpServer;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.net.SocketFactory;

import static org.mockito.Matchers.anyInt;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class FtpInitialConnectTimeoutTest extends CamelTestSupport {

  private static final int CONNECT_TIMEOUT = 11223;

  /**
   * Create the answer for the socket factory that causes a SocketTimeoutException to occur in connect.
   */
  private static class SocketAnswer implements Answer<Socket> {
    @Override
    public Socket answer(InvocationOnMock invocation) throws Throwable {
      final Socket socket = Mockito.spy(new Socket());
      final AtomicBoolean timeout = new AtomicBoolean();

      try {
        doAnswer(new Answer<InputStream>() {
          @Override
          public InputStream answer(InvocationOnMock invocation) throws Throwable {
            final InputStream stream = (InputStream) invocation.callRealMethod();

            InputStream inputStream = new InputStream() {
              @Override
              public int read() throws IOException {
                if (timeout.get()) {
                  // emulate a timeout occuring in _getReply()
                  throw new SocketTimeoutException();
                }
                return stream.read();
              }
            };

            return inputStream;
          }
        }).when(socket).getInputStream();
      } catch (IOException ignored) {
      }

      try {
        doAnswer(new Answer() {
          @Override
          public Object answer(InvocationOnMock invocation) throws Throwable {
            if ((Integer) invocation.getArguments()[0] == CONNECT_TIMEOUT) {
              // setting of connect timeout
              timeout.set(true);
            } else {
              // non-connect timeout
              timeout.set(false);
            }
            return invocation.callRealMethod();
          }
        }).when(socket).setSoTimeout(anyInt());
      } catch (SocketException e) {
        throw new RuntimeException(e);
      }
      return socket;
    }
  }

  private FakeFtpServer fakeFtpServer;

  @Override
  @Before
  public void setUp() throws Exception {
    fakeFtpServer = new FakeFtpServer();
    fakeFtpServer.setServerControlPort(0);
    fakeFtpServer.start();

    super.setUp();
  }

  @Override
  @After
  public void tearDown() throws Exception {
    super.tearDown();
    if (fakeFtpServer != null) {
      fakeFtpServer.stop();
    }
  }

  @Test
  public void testName() throws Exception {
    sendBody(""direct:start"", ""test"");
  }

  private FTPClient mockedClient() throws IOException {
    FTPClient client = new FTPClient();
    client.setSocketFactory(createSocketFactory());
    return client;
  }

  private SocketFactory createSocketFactory() throws IOException {
    SocketFactory socketFactory = mock(SocketFactory.class);
    when(socketFactory.createSocket()).thenAnswer(new SocketAnswer());
    return socketFactory;
  }

  @Override
  protected JndiRegistry createRegistry() throws Exception {
    JndiRegistry registry = super.createRegistry();
    registry.bind(""mocked"", mockedClient());
    return registry;
  }

  @Override
  protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        from(""direct:start"")
            .to(""ftp://localhost:"" + fakeFtpServer.getServerControlPort()
                + ""?ftpClient=#mocked""
                + ""&soTimeout=1234&""
                + ""connectTimeout="" + CONNECT_TIMEOUT);
      }
    };
  }
}
{code}",,davsclaus,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 11:23:38 UTC 2015,,,,,,,,,,,"0|i22uxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 11:09;davsclaus;I got a solution to this;;;","15/Feb/15 11:23;davsclaus;Thanks for reporting and with that unit test - lovely.;;;",,,,,,,,,,,,,,,,,,,,,,
"missing dependency for ""camel-example-restlet-jdbc"" example",CAMEL-8087,12758262,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,Sandy Meier,Sandy Meier,27/Nov/14 16:39,28/Nov/14 10:50,14/Jul/23 05:49,28/Nov/14 10:50,2.14.0,,,,,,,,2.14.1,2.15.0,,,examples,,,,,,0,,,,,,,"after ""mvn clean install & mvn jetty:run"" following exception appears and REST services doesn't work.
{code}
on completed in 2405 ms
2014-11-27 17:24:03.534:WARN:oejs.Holder:
java.lang.ClassNotFoundException: org.restlet.ext.spring.SpringServerServlet
        at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:244)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:230)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:430)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:383)
        at org.eclipse.jetty.util.Loader.loadClass(Loader.java:100)
        at org.eclipse.jetty.util.Loader.loadClass(Loader.java:79)
        at org.eclipse.jetty.servlet.Holder.doStart(Holder.java:107)
        at org.eclipse.jetty.servlet.ServletHolder.doStart(ServletHolder.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:791)
        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)
        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1242)
        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:717)
        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)
        at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
        at org.eclipse.jetty.server.Server.doStart(Server.java:282)
        at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365)
        at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:523)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2014-11-27 17:24:03.536:WARN:/:unavailable
javax.servlet.UnavailableException: org.restlet.ext.spring.SpringServerServlet
        at org.eclipse.jetty.servlet.Holder.doStart(Holder.java:114)
        at org.eclipse.jetty.servlet.ServletHolder.doStart(ServletHolder.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:791)
        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)
        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1242)
        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:717)
        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)
        at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
        at org.eclipse.jetty.server.Server.doStart(Server.java:282)
        at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365)
        at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:523)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2014-11-27 17:24:03.538:WARN:oejuc.AbstractLifeCycle:FAILED RestletServlet: javax.servlet.UnavailableException: org.restlet.ext.spring.SpringServerServlet
javax.servlet.UnavailableException: org.restlet.ext.spring.SpringServerServlet
        at org.eclipse.jetty.servlet.Holder.doStart(Holder.java:114)
        at org.eclipse.jetty.servlet.ServletHolder.doStart(ServletHolder.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:791)
        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)
        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1242)
        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:717)
        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)
        at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
        at org.eclipse.jetty.server.Server.doStart(Server.java:282)
        at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365)
        at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:523)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2014-11-27 17:24:03.539:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/home/sm/Downloads/apache-camel-2.14.0/examples/camel-example-restlet-jdbc/src/main/webapp/},file:/home/sm/Downloads/apache-camel-2.14.0/examples/camel-example-restlet-jdbc/src/main/webapp/
javax.servlet.UnavailableException: org.restlet.ext.spring.SpringServerServlet
        at org.eclipse.jetty.servlet.Holder.doStart(Holder.java:114)
        at org.eclipse.jetty.servlet.ServletHolder.doStart(ServletHolder.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:791)
        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)
        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1242)
        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:717)
        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)
        at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:298)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
        at org.eclipse.jetty.server.Server.doStart(Server.java:282)
        at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365)
        at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:523)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2014-11-27 17:24:03.541:WARN:oejsh.RequestLogHandler:!RequestLog

{code}

*Fix*
add 
{Code}
<dependency>
          <groupId>org.restlet.jee</groupId>
          <artifactId>org.restlet.ext.spring</artifactId>
          <version>${restlet-version}</version>
</dependency>
{Code}

to the pom.xml","xubuntu 12.04, maven 3.0.3",njiang,Sandy Meier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 28 10:50:28 UTC 2014,,,,,,,,,,,"0|i22uwf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Nov/14 10:14;njiang;Just got a NPE when ran the  example with Camel 2.15-SNAPSHOT.
{code}
java.lang.NullPointerException
	at org.apache.camel.component.restlet.RestletComponent.addServerIfNecessary(RestletComponent.java:320)
	at org.apache.camel.component.restlet.RestletComponent.connect(RestletComponent.java:171)
	at org.apache.camel.component.restlet.RestletEndpoint.connect(RestletEndpoint.java:105)
	at org.apache.camel.component.restlet.RestletConsumer.doStart(RestletConsumer.java:76)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2372)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2666)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2602)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2532)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2305)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2164)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1990)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1958)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:327)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:782)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:424)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:774)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:249)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1242)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:717)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:298)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:282)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:520)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:365)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:523)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
{code};;;","28/Nov/14 10:50;njiang;Applied the patch into camel master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
Possible memoryleak when convertBodyTo is used in a dynamicRouter,CAMEL-8086,12758236,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bjorn.hilstad,bjorn.hilstad,27/Nov/14 15:12,03/Dec/14 16:40,14/Jul/23 05:49,03/Dec/14 16:40,2.13.2,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"We have implemented a while loop using a dynamicRouter.
The dynamicRouter looks like this:
<dynamicRouter>
  <header>someheadername</header>
</dynamicRouter>
where someheadername refers to another route using direct:routename

The route that handles direct:routename looks like this:
<bean ref=""someref""/>
<convertBodyTo type=""java.lang.String""/>

The someref-bean just puts some data in the body and header and would also be responsible to set the value of someheadername=null to exit the dynamicRouter.
During execution of these routes we see that heapusage increases until OOM if the dynamicRouter does not exit before OOM. The number of instances of DefaultMessage also keeps increasing.

If we remove the <convertBodyTo> from the route we do not get OOM and the number of instances of DefaultMessage is stable and low.
The same also happens if we replace <convertBodyTo> with a <transform>.",,bjorn.hilstad,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Dec/14 12:44;bjorn.hilstad;SomeProcessor.java;https://issues.apache.org/jira/secure/attachment/12684635/SomeProcessor.java","02/Dec/14 12:44;bjorn.hilstad;applicationContext.xml;https://issues.apache.org/jira/secure/attachment/12684634/applicationContext.xml",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 03 16:40:58 UTC 2014,,,,,,,,,,,"0|i22uqn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Nov/14 16:29;davsclaus;You should likely use recipient list instead. That only runs one time. The dynamic router repeats itself until the expression returns null. 
;;;","27/Nov/14 20:37;bjorn.hilstad;I'm not quite sure that we could use a recipient list in this case.
What we are trying to do is to make a while-loop, where we in the bean get one message from an external service and process that. If there are no more messages the bean will return null to exit from the dynamic router.;;;","27/Nov/14 20:43;davsclaus;You are doing it wrong as the expression in the dynamic router is a header, not a method call expression.

Please use the mailing list for help this is not a Camel bug;;;","02/Dec/14 12:44;bjorn.hilstad;I have tried implementing it the way you suggested but the issue is the same. As long as the convertBodyTo is in the route we get the OOM, if I remove it the while loop can run indefinitely without OOM.
I am attaching a route (in a spring context) and a simple processor implementation to illustrate this. I can also upload a working application (or maven projects you can build yourself) if required.;;;","02/Dec/14 12:44;bjorn.hilstad;Spring context and Processor;;;","03/Dec/14 13:32;davsclaus;> The same also happens if we replace <convertBodyTo> with a <transform>.

What do you mean by this? That using transform also causes a OOME issue for you?


;;;","03/Dec/14 14:09;davsclaus;I found the issue, the problem is that the old message that the covertBodyTo creates a new message to replace the old message, and the old message has a reference to the live exchange, so it cannot be GC (even its no longer in use). So we need to de-referrence that, and it works.;;;","03/Dec/14 14:18;davsclaus;I also found an optimization we can do in convertBodyTo/transform/setBody to avoid the message copy if its not a specialized message, as in those case we can just set the replace body directly.;;;","03/Dec/14 16:40;davsclaus;Thanks for the test case.;;;",,,,,,,,,,,,,,,
CxfRs producer should close the connection if MEP is InOnly,CAMEL-8082,12758127,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Nov/14 04:00,03/Dec/14 19:14,14/Jul/23 05:49,03/Dec/14 19:14,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-cxf,,,,,,0,,,,,,,"When using cxfRs to send a rest message in InOnly mode, Camel do not close
the javax.ws.rs.core.Response object. As we are InOnly, the reponse object is not passed through the exchange, so the caller can not close it either.

Here is [the mail thread|http://camel.465427.n5.nabble.com/CxfRs-producer-connection-not-closed-td5759664.html] which talks about it.
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-27 04:00:45.0,,,,,,,,,,,"0|i22u33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast Aggregator should keep processing other exchange which is not timeout,CAMEL-8081,12758126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Nov/14 03:54,03/Dec/14 19:05,14/Jul/23 05:49,03/Dec/14 19:05,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"It makes sense the multicast aggregator keep processing the exchange even some exchange are timeout. 
Here is [a thread|http://camel.465427.n5.nabble.com/Multicast-with-multiple-timeouts-tp5759576p5759646.html] in the camel user mailing list talks about it.",,antoine.dessaigne,gquintana,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-27 03:54:02.0,,,,,,,,,,,"0|i22u2v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in getRouteDefinition before context is started,CAMEL-8077,12757321,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,camelguy,camelguy,24/Nov/14 02:58,01/Dec/14 21:20,14/Jul/23 05:49,30/Nov/14 16:02,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"Not sure if this occurs in 2.14.0. Does not occur in 2.13.3.

I am extending CamelSpringTestSupport with:

@Override
public boolean isUseAdviceWith() {
    return true;
}

In a @Before method I call context.getRouteDefintion(""some.id"")

It throws a NullPointerException:

org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1464)

If I put context.start() at the top of the @Before method, it works.

",,camelguy,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 01 21:19:11 UTC 2014,,,,,,,,,,,"0|i22p8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Nov/14 03:19;njiang;Are you using Camel 2.14.1-SNAPSHOT?
Can you show us the whole test case?;;;","24/Nov/14 18:30;camelguy;Yes, I am using 2.14.1-SNAPSHOT.

route.getId() returns null when the context has not started.

{noformat}
public synchronized RouteDefinition getRouteDefinition(String id) {
    for (RouteDefinition route : routeDefinitions) {
        if (route.getId().equals(id)) {
            return route;
        }
    }
    return null;
}
{noformat}

There was a time when I could get one route via getRouteDefinition by id successfully but not another. getRouteDefinition(A) = successful but getRouteDefinition(B) = exception. The difference is that route B is declared in camel-context.xml after route A.

However, after adding <import> and <routeContextRef>, getRouteDefinition(A) failed too. The route I'm trying to grab is in the main context file, not in the imported one.

It appears that camel-context.xml is loaded in a background thread and has a race condition with my methods. I have the same problem with @Test methods. I tried sleeping for, say, a minute in @Begin but that doesn't fix the problem. I also moved the @Begin code to the @Test method and put a sleep there. That doesn't work either. The only fix is to call context.start().

In camel-context.xml most routes do not specify an id attribute.

Here's my test.java

{noformat}
package my.test;

import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.model.ModelCamelContext;
import org.apache.camel.model.RouteDefinition;
import org.apache.camel.test.spring.CamelSpringTestSupport;
import org.springframework.context.support.AbstractXmlApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.junit.Before;
import org.junit.Test;

public final class OneJDBCErrorTest extends CamelSpringTestSupport {
	protected AbstractXmlApplicationContext createApplicationContext() {
		return new ClassPathXmlApplicationContext(""META-INF/spring/camel-context.xml"");
	}

	@EndpointInject(uri=""direct:Start"")
	private ProducerTemplate start;

	@EndpointInject(uri=""mock:Test:JDBC:TotalExceptions"")
	private MockEndpoint mockTotalExceptions;

	@EndpointInject(uri=""mock:Test:JDBC:Failed"")
	private MockEndpoint mockJdbcFailed;

	@Override
	public boolean isUseAdviceWith() {
	    return true;
	}

	@Before
	final public void jdbcError() throws Exception {
		context.start(); // bug in 2.14 - this is needed
		
		ModelCamelContext model = (ModelCamelContext) context;

		RouteDefinition jdbc = model.getRouteDefinition(""SQL:JDBC"");
		
		jdbc.adviceWith(context, new AdviceWithRouteBuilder() {
	        @Override
	        public void configure() throws Exception {
	        	weaveById(""test:SQL:JDBC:NextError"").before().to(""mock:Test:JDBC:TotalExceptions"");
	        }
	    }
		);
	}
	
	@Test
	final public void oneFailure() throws Exception {
		mockTotalExceptions.expectedMessageCount(4);
		mockJdbcFailed.expectedMessageCount(0);
		
		context.start();
		start.sendBody("""");

		mockTotalExceptions.assertIsSatisfied();
		mockJdbcFailed.assertIsSatisfied();

		context.stop();
	}
}
{noformat}
;;;","30/Nov/14 15:18;davsclaus;You need to set the id of the route;;;","30/Nov/14 15:51;camelguy;For all routes? This exception doesn't occur in 2.13. The route with the id it's looking for exists. Code works as-is if I call context.start() (or downgrade to 2.13 but I need the CamelFreemarkerDataModel feature).;;;","01/Dec/14 11:58;davsclaus;Yeah for all routes needed until the NPE is gone, or use the other api on CamelContext that returns a List and find the route yourself.;;;","01/Dec/14 21:19;camelguy;You or someone else fixed the problem on 2.14.1-SNAPSHOT, which I confirmed. Thank you!;;;",,,,,,,,,,,,,,,,,,
Camel may clear attachments during routing,CAMEL-8073,12756989,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Nov/14 14:59,21/Nov/14 15:03,14/Jul/23 05:49,21/Nov/14 15:03,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-cleans-attachments-if-error-is-thrown-during-routing-tp5759410.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-21 14:59:58.0,,,,,,,,,,,"0|i22nkv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel won't build on windows (camel-box and camel-api-component-maven-plugin),CAMEL-8065,12756698,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,paulmcculloch,paulmcculloch,20/Nov/14 13:42,20/Nov/14 16:27,14/Jul/23 05:49,20/Nov/14 16:19,2.15.0,,,,,,,,2.14.1,2.15.0,,,build system,,,,,,0,,,,,,,"Building camel fails on windows with the error: 

Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.15-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-box: Error generating source for com.box.boxjavalibv2.resourcemanagers.IBoxCollaborationsManager: String index out of range: 1

This is due to the plugin not escaping the windows file separator before using it in a regex. 

Patch/pull request to follow
","Windows 7 x64; JDK 1.7.0_60; Maven 3.1.0",davsclaus,githubbot,paulmcculloch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 20 16:27:26 UTC 2014,,,,,,,Patch Available,,,,"0|i22lsn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/14 13:52;githubbot;GitHub user paul-mcculloch opened a pull request:

    https://github.com/apache/camel/pull/337

    Fix CAMEL-8065

    Fix building on Windows (with backslash file seperator) by following the advice in https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#replaceAll(java.lang.String,%20java.lang.String)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paul-mcculloch/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #337
    
----
commit d0917f2399c20464f6140582fdea49dfa827833f
Author: Paul McCulloch <paul.mcculloch@axiossystems.com>
Date:   2014-11-20T13:43:52Z

    Fix CAMEL-8065

----
;;;","20/Nov/14 16:19;davsclaus;Thanks for the PR. Do you mind closing it?;;;","20/Nov/14 16:27;githubbot;Github user paul-mcculloch closed the pull request at:

    https://github.com/apache/camel/pull/337
;;;",,,,,,,,,,,,,,,,,,,,,
Persistent tail tracking picks random tail tracker from mongoDB collection,CAMEL-8063,12756385,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jpeschke,jpeschke,19/Nov/14 12:28,13/Oct/17 12:24,14/Jul/23 05:49,20/Nov/14 09:05,2.13.1,,,,,,,,2.15.0,,,,camel-mongodb,,,,,,0,,,,,,,"There is a bug the method ""initialize"" in ""MongoDbTailTrackingManager.java"": 

...
 if (trackingObj == null) {
            dbCol.insert(filter, WriteConcern.SAFE);
            trackingObj = dbCol.findOne();
 }
...

If no tail tracking object exists in the database, a new one will be inserted (that's okay), but the query ""dbCol.findOne()"" fetches ANY tail tracking object from the database (and not the one we've just inserted). 

In my oppinition, this is a bug and should be corrected like this: 
...
DBObject filter = new BasicDBObject(""persistentId"", config.persistentId);
trackingObj = dbCol.findOne(filter);
 if (trackingObj == null) {
            dbCol.insert(filter, WriteConcern.SAFE);
            trackingObj = dbCol.findOne(filter);
 }

(not tested).

A workaround can be implemented by putting each persistent tail tracker in it's own collection, so I marked this issue as ""minor"".

More details: http://camel.465427.n5.nabble.com/MongoDB-Persistent-tail-tracking-with-concurrent-tailable-consumers-td5759131.html

Best regards,
Joerg Peschke",,Igorko,jpeschke,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 13 12:23:33 UTC 2017,,,,,,,,,,,"0|i22jyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/14 09:05;njiang;Applied the patch into camel master branch.;;;","13/Oct/17 12:23;Igorko;Hello. This was fixed in initialize() but still present in persistToStore() function

        Bson updateObj = Updates.set(config.field, lastVal);
        dbCol.updateOne(trackingObj, updateObj);
        trackingObj = dbCol.find().first();

If more then one tracker is present in one collection, after storing lastVal, each trackingObj will replaced by first one from collection. Should be

        trackingObj = dbCol.find(filter).first();

Issue present in version 2.20 in both mongodb and mongodb3 component.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-rx - EndpointSubscriber does not call unsubscribe to stop the consumer,CAMEL-8062,12756325,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Nov/14 07:01,19/Nov/14 07:03,14/Jul/23 05:49,19/Nov/14 07:03,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-rx,,,,,,0,,,,,,,When rx is done with the subscription it does not trigger the unsubscribe callback so we can stop the consumer.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-19 07:01:29.0,,,,,,,,,,,"0|i22jl3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when adding/removing a lot of routes,CAMEL-8053,12755595,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,graben,graben,15/Nov/14 09:01,21/Nov/14 02:05,14/Jul/23 05:49,21/Nov/14 02:05,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"Dynamically adding/removing routes to camel causes registrations in org.apache.camel.builder.ErrorHandlerBuilderRef.handlers (Map<RouteContext, ErrorHandlerBuilder>) for RouteContext instances. Those never get removed and can cause leaks if memory consuming objects are attached in the RouteContext for example constant definitions.",,graben,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Nov/14 16:51;graben;testcase.zip;https://issues.apache.org/jira/secure/attachment/12682435/testcase.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 21 02:05:02 UTC 2014,,,,,,,,,,,"0|i22f6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Nov/14 07:07;njiang;I just have a quick look at the ErrorHandlerBuilderRef.addErrorHandlers() call reference, as the ErrorhandlerBuilderRef is referenced by RouteDefintion, if the reference to RouteDefintion is not used by other object, the ErrorHanlderBuilderRef will be collected.
Do you have other evidence to show the leak? ;;;","17/Nov/14 08:14;graben;As far as I can remember there was a reference up to the BlueprintCamelContext in the heapDump. I can look back into it after I returned from holidays.;;;","18/Nov/14 17:00;graben;Testcase to reproduce leaking error;;;","21/Nov/14 02:05;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,
feature camel-core does not install in karaf 4,CAMEL-8051,12755402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,14/Nov/14 16:11,14/Nov/14 16:15,14/Jul/23 05:49,14/Nov/14 16:15,2.14.0,,,,,,,,2.15.0,,,,camel-core,osgi,,,,,0,,,,,,,"feature:repo-add camel 2.15-SNAPSHOT
feature:install -v camel-core

Karaf then tries to install the karaf shell console from karaf 2.4.0 which of course fails.

I first removed the reference to the karaf spring feature repo which transitively imported the karaf standard feature.

After that change it could not resolve the package:
(org.apache.felix.service.command)(version>=0.14.0)(!(version>=1.0.0)

The problem here was that we forgot status=provisional in the import.",,cschneider,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-14 16:11:59.0,,,,,,,,,,,"0|i22e07:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultRestletBinding can not deal with multi-valued HTTP request parameters,CAMEL-8049,12755355,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kaqqao,kaqqao,14/Nov/14 12:34,19/Nov/14 07:36,14/Jul/23 05:49,19/Nov/14 07:36,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-restlet,,,,,,0,,,,,,,"Multi-valued HTTP request parameters are a common practice yet, with the provided binding, Camel Restlet component can not deal with them.
In DefaultRestletBinding, we can see the following problematic code:
{code}
public void populateRestletRequestFromExchange(Request request, Exchange exchange) {
...
     form.add(key, value.toString());
...
}
{code}

where the value is always treated as a String, even though it can be a Collection.

And similarly:

{code}
public void populateExchangeFromRestletRequest(Request request, Response response, Exchange exchange) throws Exception {
...
     for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {
          ...
     }
...
}
{code}
where getValuesMap() effectively disregards all duplicate key names.",,kaqqao,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Nov/14 12:40;kaqqao;DefaultRestletBinding.patch;https://issues.apache.org/jira/secure/attachment/12681534/DefaultRestletBinding.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 19 07:36:13 UTC 2014,,,,,,,Patch Available,,,,"0|i22dpz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Nov/14 12:40;kaqqao;Supplying a naive patch;;;","19/Nov/14 07:36;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
Not possible to load a public key from a a PrivateKeyEntry in a keystore,CAMEL-8045,12755037,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,coheigea,coheigea,coheigea,13/Nov/14 11:15,13/Nov/14 11:28,14/Jul/23 05:49,13/Nov/14 11:28,,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-xmlsecurity,,,,,,0,,,,,,,"
It's not possible to retrieve a certificate/public-key for encryption in the camel-xmlsecurity component, if the certificate in question is stored in a PrivateKeyEntry in the keystore. This is because the truststore password is incorrectly used (instead of the keyPassword) to retrieve the key. ",,coheigea,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-13 11:15:35.0,,,,,,,,,,,"0|i22bt3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JettyComponent should not setup the security handler more than once,CAMEL-8036,12754666,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Nov/14 04:33,20/Oct/15 13:43,14/Jul/23 05:49,20/Nov/14 09:14,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-jetty,,,,,,0,,,,,,,"As we create multiple consumer for the rest component, it could introduce an issue that camel could add security handler more than once if user setup the security handler on the rest endpoint.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 20 09:14:44 UTC 2014,,,,,,,,,,,"0|i229kv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/14 09:14;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
"CXFRS consumer should set Exchange's charset name, if content type provides one",CAMEL-8035,12754511,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,petereaston,petereaston,11/Nov/14 17:05,13/Nov/14 01:21,14/Jul/23 05:49,13/Nov/14 01:21,2.10.7,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-cxf,,,,,,0,,,,,,,"This is the JAXRS counterpart to https://issues.apache.org/jira/browse/CAMEL-6188
",,njiang,petereaston,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 13 01:21:29 UTC 2014,,,,,,,,,,,"0|i228on:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Nov/14 01:21;njiang;Applied patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Exchange Leak Caused By pollEnrich,CAMEL-8033,12754433,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Nov/14 10:24,11/Nov/14 10:55,14/Jul/23 05:49,11/Nov/14 10:55,2.13.3,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,eip,,,,,0,,,,,,,"There can be a potential issue in PollEnricher as it should use a try .. catch to deal with any runtime exceptions that may be thrown from the polling consumer api.

This is mandated by the async routine engine.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-11 10:24:39.0,,,,,,,,,,,"0|i22893:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUtil leaks FileInputStream when renameFile fails due to permission issue,CAMEL-8032,12754432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,joeluo,joeluo,11/Nov/14 10:24,11/Nov/14 13:13,14/Jul/23 05:49,11/Nov/14 13:13,2.12.3,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"I have a simple camel route:
{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route>
        <from uri=""file:C:/tmp/data/in?include=.*$&amp;move=C:/tmp/data/done/${file:onlyname}-${exchangeId}"" />
        <setHeader headerName=""CamelFileName"">
            <simple>${file:onlyname}-${exchangeId}</simple>
        </setHeader>
        <to uri=""file:C:/tmp/data/out"" />
    </route>
</camelContext>
{code}
If the destination folder ""C:/tmp/data/done/"" for the move operation does not allow writing, then the file dropped to the ""C:/tmp/data/in/"" folder will be repeatedly polled, processed and rolled back due to ""Access is denied"" exception.

Even if we fix the permission issue on the folder ""C:/tmp/data/done/"" to allow writing, the problem still persists and above endless cycle continues. However the reason for the issue will be a bit different now. It is caused by deletion failure to the file from ""C:/tmp/data/in/"" folder after successful FileUtil.renameFile() operation due to fact that something is still holding the file handle. 

The root cause is in the function FileUtil.copyFile():
{code}
public static void copyFile(File from, File to) throws IOException {
        FileChannel in = new FileInputStream(from).getChannel();
        FileChannel out = new FileOutputStream(to).getChannel();
        try {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Using FileChannel to copy from: "" + in + "" to: "" + out);
            }

            long size = in.size();
            long position = 0;
            while (position < size) {
                position += in.transferTo(position, BUFFER_SIZE, out);
            }
        } finally {
            IOHelper.close(in, from.getName(), LOG);
            IOHelper.close(out, to.getName(), LOG);
        }
    }
{code}
If the destination folder ""C:/tmp/data/done/"" for move operation is not allowed for writing, the creation of the FileOutputStream will throw an exception straight away. However, because both FileInputStream and FileOutputStream are created outside the try{}...finally{} block, the FileInputStream is never closed. It still holds handle to the file and caused FileSystem unable to delete it. Therefore caused the whole route to fail. 

The solution is quite simple, we just need to create the Input/Output streams inside try{}...finally{} loop to make sure that the Input/Output streams get closed if something happens during creating of these objects.",,davsclaus,joeluo,sepe81,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Nov/14 10:25;joeluo;patch.txt;https://issues.apache.org/jira/secure/attachment/12680775/patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 11 13:13:04 UTC 2014,,,,,,,Patch Available,,,,"0|i2288v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Nov/14 13:13;davsclaus;Thanks for the detailed report and the patch Joe.

Applied that to the branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty maximumPoolSize option is ignored,CAMEL-8031,12754417,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Nov/14 09:26,14/Jan/16 02:21,14/Jul/23 05:49,14/Nov/14 12:18,,,,,,,,,2.14.1,2.15.0,,,camel-netty,,,,,,0,,,,,,,"maximumPoolSize endpoint option of the Netty component is effectively ignored. We keep OrderedMemoryAwareThreadPoolExecutor in the NettyComponent#executorService field - it means that we keep, configure and start the executor on the component, not the endpoint level.
Netty component is started before the endpoint is created, so NettyComponent#executorService will be always created with the default size (before endpoint will set the pool size on the configuration object).
There is a workaround for this issue (changing configuration on the component level), but if we provide maximumPoolSize on the endpoint, then we should respect it.
IMHO it is impossible to configure maximumPoolSize at the endpoint level and cache executor instance in the component at the same time. Maybe we should just remove that option from the documentation of the endpoint options as maximumPoolSize should be configured only on the component level?",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 14 02:21:35 UTC 2016,,,,,,,,,,,"0|i2285j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Nov/14 12:18;njiang;Applied the patch into camel master and camel-2.14.x branch.;;;","14/Jan/16 02:21;njiang;Got the same issue in the camel-netty4 component, we need to move the maximumPoolSize option to the netty4 component as while.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty need to release the thread pool when shutdown,CAMEL-8030,12754401,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Nov/14 08:11,20/Oct/15 13:43,14/Jul/23 05:49,11/Nov/14 08:49,2.13.3,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-netty,,,,,,0,,,,,,,"CAMEL-7915 introduced a side effect that doesn't shutdown the thread pool when the netty producer is shutdown.
We need to clean up these thread when shutting down the Netty endpoint.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8094,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 11 08:49:21 UTC 2014,,,,,,,,,,,"0|i2281z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Nov/14 08:49;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
MyBatis consumer ignores maxMessagesPerPoll option,CAMEL-8011,12753693,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,07/Nov/14 13:31,07/Nov/14 13:33,14/Jul/23 05:49,07/Nov/14 13:33,,,,,,,,,2.15.0,,,,camel-mybatis,,,,,,0,,,,,,,MyBatis consumer ignores {{maxMessagesPerPoll}} option because it contains private field {{maxMessagesPerPoll}} shadowing {{ScheduledBatchPollingConsumer#maxMessagesPerPoll}} field.,,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 07 13:33:45 UTC 2014,,,,,,,,,,,"0|i223u7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Nov/14 13:33;hekonsek;Fixed in d4671fda12136fbf75e9031ab1c110ce4f51619a.;;;",,,,,,,,,,,,,,,,,,,,,,,
Race condition in AggregatorProcessor recovery sometimes causes duplicates (still),CAMEL-8010,12753687,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,drekbour,drekbour,07/Nov/14 12:52,24/Aug/17 22:01,14/Jul/23 05:49,24/Aug/17 09:38,2.14.0,,,,,,,,2.20.0,,,,camel-core,,,,,,1,,,,,,,"CAMEL-6097 Patched a pretty clear race condition between the completion thread (CT) and recovery thread (RT) but leaves several holes when exercised with a Jdbc repository and a separate aggregation thread (AT).

#1 is relevant to all repository backends.
#2 only affects fully transactional backends

I'm currently taking a look into this bug as its a show-stopper that _persistent_ repositories actually *decreases* reliability. (Untested) workaround is to add an in-memory idemptotentconsumer immediately after the aggregation.

Here AT starts and completes an aggregation between defensive copy and when RT repo scanning starts. CT then confirms it (in memory (*)) before repo scanning ends.

|| AT || RT || CT ||
| | inProg COPY to inProgCopy | |
| repo START x | |  |
| | | repo REMOVE x |
| | | <commit> |
|  | | inProg ADD x |
| | repo SCAN (sees x) | |
| | | {color:red}process x{color} |
| | | repo CONFIRM x |
| | | inProg REMOVE x | 
| | | <commit> |
| | x not inProg or inProgCopy | |
| | {color:red}process x{color} | |
| | repo CONFIRM x | | Fails silently as this is doInTransactionWithoutResult 
| | <commit> | |

{noformat}SQLWarning ignored: SQL state '02000', error code '10000', message [No row was found for FETCH, UPDATE or DELETE; or the result of a query is an empty table.]{noformat}

(*) Side note: inProgressExchanges is updated by a {{Synchronisation}} inside the UOW so is immediately visible although any DB change may not be visible for ages (in threading terms) as the entire transaction must commit first.",,bendherville,drekbour,githubbot,rajithapl,westerg,,,,,,,,,,,,,,,,,,,,,CAMEL-6097,CAMEL-4271,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 24 22:01:43 UTC 2017,,,,,,,,,,,"0|i223sv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Aug/17 18:49;rajithapl;I am still having issues due to this with version 2.14. There is a race condition when exchanges are completed by both AggregateTimeOutChecker and AggregateRecoverChecker. On RecoverTask can we check inProgressCompleteExchanges one more time before calling onSubmitCompletion? Any update on the release plan please?;;;","16/Aug/17 18:12;githubbot;GitHub user rajithapl opened a pull request:

    https://github.com/apache/camel/pull/1894

    CAMEL-8010:Locking the critical section to avoid race condition if Ag…

    …gregateTimeOutChecker also completes at the same time as Recover task

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rajithapl/camel CAMEL-8010_RaceCondition

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1894.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1894
    
----
commit 3f13fb36727cf488d3c5afeac1c84ef877514925
Author: Rajithamol <rlakshmanan@mediaocean.com>
Date:   2017-08-16T18:10:30Z

    CAMEL-8010:Locking the critical section to avoid race condition if AggregateTimeOutChecker also completes at the same time as Recover task

----
;;;","24/Aug/17 22:01;githubbot;Github user rajithapl closed the pull request at:

    https://github.com/apache/camel/pull/1894
;;;",,,,,,,,,,,,,,,,,,,,,
SubmitMulti and DataSm not checking CamelSmppAlphabet header,CAMEL-8008,12753652,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,daniel.pocock,daniel.pocock,07/Nov/14 08:26,03/Dec/14 18:31,14/Jul/23 05:49,03/Dec/14 18:31,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-smpp,,,,,,0,,,,,,,"According to the documentation, the CamelSmppAlphabet header is used for SubmitSm, SubmitMulti and DataSm message types

Looking at the code, I noticed it was only used for SubmitSm and not the other two.",n/a,daniel.pocock,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 03 18:31:55 UTC 2014,,,,,,,Patch Available,,,,"0|i223l3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Nov/14 08:28;githubbot;GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/321

    CAMEL-8008: SubmitMulti and DataSm must check CamelSmppAlphabet header

    https://issues.apache.org/jira/browse/CAMEL-8008

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-smpp-multi-alphabet

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/321.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #321
    
----
commit 8ff5f8c84573deb4f7f7b51b00a7915c78e06f73
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-07T08:27:04Z

    CAMEL-8008: SubmitMulti and DataSm must check CamelSmppAlphabet header

----
;;;","03/Dec/14 08:26;davsclaus;Willem do you mind looking into all those PRs for camel-smpp we recently have from github.;;;","03/Dec/14 18:31;davsclaus;Merged PR to branches;;;",,,,,,,,,,,,,,,,,,,,,
Camel should not be hardcoded to one specific Karaf release,CAMEL-8007,12753631,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,,davsclaus,davsclaus,07/Nov/14 06:44,03/Dec/14 19:44,14/Jul/23 05:49,03/Dec/14 19:44,2.15.0,,,,,,,,2.15.0,,,,karaf,,,,,,0,,,,,,,"Something happened so the features.xml now has a hardcoded karaf version

This is from the generated source code:
{code}
<features xmlns=""http://karaf.apache.org/xmlns/features/v1.0.0"" name='camel-2.15-SNAPSHOT'>
  <repository>mvn:org.apache.karaf.assemblies.features/spring/2.4.0/xml/features</repository>
{code}

Notice how it says karaf 2.4.0. 

I suspect it was some spring stuff that was changed. We need to either revert or find some way for Camel to support Karaf 2.x and 3.x at the same time.
",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 03 19:42:47 UTC 2014,,,,,,,,,,,"0|i223gf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Nov/14 20:50;muellerc;What's about having different feature files for Karaf 2.x and 3.x?
If I remember right, we already something like this in the past.;;;","03/Dec/14 19:42;davsclaus;Ups that was CXF. Its gone now. So we are not tied to one karaf release.;;;",,,,,,,,,,,,,,,,,,,,,,
SmppUtils.isGsm0338Encodeable() called with arbitrary data,CAMEL-8001,12753414,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,daniel.pocock,daniel.pocock,06/Nov/14 15:01,05/Dec/14 03:28,14/Jul/23 05:49,05/Dec/14 03:28,2.12.2,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-smpp,,,,,,0,patch,,,,,,"
The method SmppUtils.isGsm0338Encodeable(byte[]) expects the input data to be Latin1 encoded (or a subset of Latin1, such as ASCII)

The method SmppSmCommand.determineAlphabet(Message) prepares an argument by calling String.getBytes(charset) without checking the charset is Latin1 or compatible.

",n/a,daniel.pocock,githubbot,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Nov/14 15:04;daniel.pocock;determineAlphabet_fix.patch;https://issues.apache.org/jira/secure/attachment/12679852/determineAlphabet_fix.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 03:28:01 UTC 2014,,,,,,,Patch Available,,,,"0|i2226v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Nov/14 15:04;daniel.pocock;This patch checks the charset is Latin1 (or compatible) and if not does not try to check the text is GSM 3.38 suitable.;;;","10/Nov/14 21:25;muellerc;This patch cannot be merged into the Camel master branch.
Daniel, could you please check and reattach the corrected patch!?;;;","24/Nov/14 18:14;githubbot;GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/339

    Dpocock bug 8001

    See https://issues.apache.org/jira/browse/CAMEL-8001

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-bug-8001

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/339.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #339
    
----
commit c72c327cad45e79416ef5f524eba0bb4c95f07f2
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-24T18:11:31Z

    CAMEL-8001: Add javadoc comments about the expectation that the argument is ISO-8859-1 encoded

commit 1945bde0e522b50da626bf9d1650bedee074f1d9
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-24T18:12:34Z

    CAMEL-8001: only try to use SmppUtils.isGsm0338Encodeable for content that can already be ISO-8859-1 encoded

----
;;;","24/Nov/14 18:14;daniel.pocock;I've submitted as a pull request

https://github.com/apache/camel/pull/339;;;","05/Dec/14 03:28;njiang;Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Daniel.;;;",,,,,,,,,,,,,,,,,,,
OID of created object should be stored in the message header,CAMEL-7996,12753024,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,05/Nov/14 12:00,05/Nov/14 12:04,14/Jul/23 05:49,05/Nov/14 12:04,,,,,,,,,2.15.0,,,,camel-mongodb,,,,,,0,,,,,,,"After new {{DbObject}} is persisted, the user can't retrieve the OID of the stored record. We should store the OID in the header so this construct should be possible:

{code}
from(""direct:..."").
  to(""mongodb:...operation=insert"").setBody().header(MongoDbConstants.OID);
{code}
",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 05 12:04:12 UTC 2014,,,,,,,,,,,"0|i21ztz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/14 12:04;hekonsek;Resolved in 1a6f5c394830a713dfe65221a39a57beb60f9504.;;;",,,,,,,,,,,,,,,,,,,,,,,
SJMSComponent effectively ignores setConnectionCount(),CAMEL-7994,12752533,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,aaronjwhiteside,aaronjwhiteside,03/Nov/14 21:32,04/Nov/14 03:06,14/Jul/23 05:49,04/Nov/14 03:06,2.14.0,,,,,,,,2.15.0,,,,camel-sjms,,,,,,0,,,,,,,"SJMSComponent effectively ignores setConnectionCount()

This is because the JmsProducer, by default, pre-populates sessions+producers on Producer.doStart(), which is called by the CamelContext in a single thread and the way the ConnectionFactoryResource is configured, it returns the most recently idle connection (So really it always returns the first connection opened). So all sessions being pre-populated by all SJMS endpoints always use the same single connection.

This patch attached makes the ConnectionFactoryResource effectively return connections in a round-robbin manor. Unit test is included.

This is important because TCP has a certain overhead per socket which makes it impossible to achieve much more than 6k~ messages a second, regardless of the CPU and IO resources available to a broker. To fully utilize a broker multiple connections must be opened.

This is also important if your ConnectionFactory represent a cluster (Like in the case of HornetQ), where subsequent connections from the factory are balanced across nodes in the cluster.",,aaronjwhiteside,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Nov/14 21:50;aaronjwhiteside;round-robbin.patch;https://issues.apache.org/jira/secure/attachment/12679040/round-robbin.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 04 03:06:23 UTC 2014,,,,,,,Patch Available,,,,"0|i21wuf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/14 03:06;njiang;Applied the patch into camel master branch with thanks to Aaron.;;;",,,,,,,,,,,,,,,,,,,,,,,
Container lifecycle event method invoked outside of extension observer method invocation,CAMEL-7992,12752427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tdiesler,tdiesler,03/Nov/14 13:43,05/Nov/14 12:16,14/Jul/23 05:49,05/Nov/14 12:16,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-cdi,,,,,,0,,,,,,,"camel-cdi does no longer work on wildfly-9.0

{code}
org.jboss.weld.exceptions.IllegalStateException: WELD-000143: Container lifecycle event method invoked outside of extension observer method invocation.
	at org.jboss.weld.bootstrap.events.ContainerEvent.checkWithinObserverNotification(ContainerEvent.java:61)
	at org.jboss.weld.bootstrap.events.ProcessAnnotatedTypeImpl.getAnnotatedType(ProcessAnnotatedTypeImpl.java:56)
	at org.apache.camel.cdi.internal.CamelContextConfig.configure(CamelContextConfig.java:47)
	at org.apache.camel.cdi.internal.CamelContextBean.configureCamelContext(CamelContextBean.java:131)
	at org.apache.camel.cdi.internal.CamelExtension.startConsumeBeans(CamelExtension.java:231)
{code}

To reproduce, build: https://github.com/tdiesler/wildfly-camel/tree/2.0

Cross Issue: https://issues.jboss.org/browse/WFLY-4046",,njiang,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 05 12:16:08 UTC 2014,,,,,,,,,,,"0|i21w7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/14 12:16;njiang;Applied the patch into camel master ,camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
IdempotentConsumer - If no messageId should allow Camel error handler to react,CAMEL-7990,12752183,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Nov/14 14:27,01/Nov/14 14:56,14/Jul/23 05:49,01/Nov/14 14:56,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,eip,,,,,0,,,,,,,"See SO
http://stackoverflow.com/questions/26453348/camel-onexception-doesnt-catch-nomessageidexception-of-idempotentconsumer

The idempotent consumer should set the exchange on the exchange and invoke the callback, that is an internal routing engine bug in the implementation of that eip.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-01 14:27:44.0,,,,,,,,,,,"0|i21uqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileIdempotentRepository should create the file store on startup,CAMEL-7989,12752169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,01/Nov/14 08:06,01/Nov/14 10:19,14/Jul/23 05:49,01/Nov/14 10:19,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problems-configuring-FileIdempotentRepository-tp5758212.html

The file store should be created on startup so the file store is always available.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-01 08:06:34.0,,,,,,,,,,,"0|i21unj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file consumer - Should call abort in case read lock cannot be acquired if exception was thrown,CAMEL-7988,12752168,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Nov/14 08:02,01/Nov/14 10:19,14/Jul/23 05:49,01/Nov/14 10:19,2.13.3,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Possible-issue-with-FileLockExclusiveReadLockStrategy-leaves-orphaned-camelLock-file-tp5758142.html


This could cause a .camelLock orphaned file to be there causing the file to not be eligible for consuming on next poll.",,davsclaus,vseibt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-11-01 08:02:50.0,,,,,,,,,,,"0|i21unb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Route disappears with routeId set to ""route1""",CAMEL-7986,12751974,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Peter Keller,Peter Keller,31/Oct/14 14:26,01/Nov/14 14:57,14/Jul/23 05:49,01/Nov/14 14:57,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"With below route configuration with {{routeId}} defined as {{route1}}, {{route2}} and intentionally omitted {{routeId}} for the 3rd route, Camel will auto-generate a {{routeId}} with format as {{route}} + count for you if you didn't define it. This seems to cause some routes to be missed.

Route definitions:
{code}
 from(""direct:start1"")
     .routeId(""route1"")
     .log(""route1: ${body}"");

 from(""direct:start2"")
      .routeId(""route2"")
      .log(""route2: ${body}"");

 from(""direct:start3"") // no route id!
      .log(""route3: ${body}"");
{code}

Testing:
{code}
 ProducerTemplate template = context.createProducerTemplate();
 template.sendBody(""direct:start1"", ""World!"");
 template.sendBody(""direct:start2"", ""World!"");
{code}

This leads to following exception:
{quote}
    Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: Endpoint[direct://start1]
{quote}

If the {{direct:start3}} route is deleted or the ID {{""route1""}} is renamed, then everything works as expected. 

See http://stackoverflow.com/questions/26646881/route-is-not-detected-when-route-id-is-not-assigned-does-camelcontext-loses-the/26673144#26673144",,Peter Keller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-10-31 14:26:28.0,,,,,,,,,,,"0|i21thb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX - Routes with transacted does not enlist processor mbeans,CAMEL-7981,12751320,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Oct/14 06:51,29/Oct/14 08:14,14/Jul/23 05:49,29/Oct/14 08:14,2.13.2,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,jmx,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Not-all-processors-are-listed-in-JMX-preventing-detailed-route-statistics-profiling-tp5757634p5758257.html

Routes with < transacted > does not enlist mbeans under processor, but you have mbeans in routes / consumers etc.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-10-29 06:51:17.0,,,,,,,,,,,"0|i21phz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QuartzEndpoint should share the same camel context name when it working in cluster mode,CAMEL-7978,12751025,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Oct/14 08:24,22/Apr/15 14:18,14/Jul/23 05:49,22/Apr/15 14:18,2.13.2,2.14.0,,,,,,,2.15.0,,,,camel-quartz,camel-quartz2,,,,,1,,,,,,,"It could cause [some trouble|http://camel.465427.n5.nabble.com/Quartz-job-data-deletion-in-clustered-quartz2-tp5757508.html] when camel-quartz endpoints is  share different camel context name.

We can add an option in the QuartzEndpoint to use CamelContext Name instead of management name.
",,antoine.dessaigne,lakshmi.prashant,njiang,steffen.ryll,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 10 07:57:48 UTC 2014,,,,,,,,,,,"0|i21nq7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Nov/14 07:57;lakshmi.prashant;Hi,

  Can you also fix another issue with clustered quartz - when the quartz2 endpoints from 2 nodes try to create the job detail in DB, an ObjectAlreadyExists exception is thrown - leading to misfires. Can we handle the above exception as below:
{code}
private void addJobInScheduler() throws Exception {
        // Add or use existing trigger to/from scheduler
        Scheduler scheduler = getComponent().getScheduler();
        JobDetail jobDetail;
        Trigger trigger = scheduler.getTrigger(triggerKey);
        if (trigger == null) {
            jobDetail = createJobDetail();
            trigger = createTrigger(jobDetail);

            updateJobDataMap(jobDetail);

            // Schedule it now. Remember that scheduler might not be started it, but we can schedule now.
            try{
	            Date nextFireDate = scheduler.scheduleJob(jobDetail, trigger);
	            if (LOG.isInfoEnabled()) {
	                LOG.info(""Job {} (triggerType={}, jobClass={}) is scheduled. Next fire date is {}"",
	                         new Object[] {trigger.getKey(), trigger.getClass().getSimpleName(),
	                                       jobDetail.getJobClass().getSimpleName(), nextFireDate});
	            }
            }
            catch(ObjectAlreadyExistsException e){
            	//some other VM might may have stored the job & trigger in DB in clustered mode, in the mean time
            	if(!(getComponent().isClustered())){            		
            		throw e;
            	}
             }
        } else {
            ensureNoDupTriggerKey();
        }

        // Increase camel job count for this endpoint
        AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);
        if (number != null) {
            number.incrementAndGet();
        }

        jobAdded.set(true);
    }

{code}

Thanks,
Lakshmi;;;",,,,,,,,,,,,,,,,,,,,,,,
sftp compression option is not set rightly,CAMEL-7977,12751014,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Oct/14 07:41,31/Oct/14 09:28,14/Jul/23 05:49,31/Oct/14 09:28,2.13.2,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-sftp,,,,,,0,,,,,,,"The setting of sftp compression should skip the space, [according to the user report|http://camel.465427.n5.nabble.com/Jsch-issue-with-compression-algorithm-tp5757784p5758187.html].

{code}
session.setConfig(""compression.s2c"", ""zlib@openssh.com, zlib, none"");
session.setConfig(""compression.c2s"", ""zlib@openssh.com, zlib, none"");
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 31 09:28:28 UTC 2014,,,,,,,,,,,"0|i21nnr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Oct/14 09:28;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
CircuitBreakerLoadBalancer fails on async processors,CAMEL-7973,12750785,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,Matteo Pavesi,Matteo Pavesi,27/Oct/14 15:02,30/Oct/14 10:52,14/Jul/23 05:49,30/Oct/14 09:09,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"The CircuitBreakerLoadBalancer works fine on direct synchronous processor, but it seems to not behave as expected in case of async processor.

To reproduce the error, it's enough to add a .threads(1) before the mock processor in the CircuitBreakerLoadBalancerTest routeBuilder configuration.

This misbehaviour seems to be related to the use of the AsyncProcessorConverterHelper to force any processor to behave like asynchronous. 

I'm going to propose a patch with the failing test and a proposal of solution.

EDIT:

the patch contains the fix also to other unexpected behaviour of the CircuitBreaker.

The second problem addressed is that, after the opening of the circuit, the RejectedExecutionException raised by the circuit breaker is set in the Exchange, but it doesn't return. This cause the processor will receive the Exchange even if the circuit is open. In this case also, if the CircuitBreaker is instructed to react only to specific Exception, it will close the circuit after the following request, because the raised exception would be a RejectedExecutionException instead of the one specified in the configuration.",,davsclaus,Matteo Pavesi,njiang,,,,,,,,,,,,,,,,,,,,,,CAMEL-5539,,,,,,,,,,,,"27/Oct/14 16:10;Matteo Pavesi;0001-CAMEL-7973-added-failing-test-for-circuit-breaker-wi.patch;https://issues.apache.org/jira/secure/attachment/12677323/0001-CAMEL-7973-added-failing-test-for-circuit-breaker-wi.patch","27/Oct/14 16:10;Matteo Pavesi;0002-CAMEL-7973-fix-circuit-breaker-with-async-processors.patch;https://issues.apache.org/jira/secure/attachment/12677324/0002-CAMEL-7973-fix-circuit-breaker-with-async-processors.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 30 10:52:06 UTC 2014,,,,,,,,,,,"0|i21m9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Oct/14 16:10;Matteo Pavesi;Added patches (based on branch 2.14.x) containing failing test and proposed solution.;;;","30/Oct/14 07:24;davsclaus;Willem the patch is partly correct, eg the stuff about the exception etc. But calling the processor should be the async with the callback, eg the last part of the patch is not correct. That may need a bit more logic to implement correctly, as you may need to add logic in the callback to do after work in the circuit breaker. I have not yet taken a closer look, but just beware more work is likely needed to fix this properly.;;;","30/Oct/14 08:15;njiang;Hi,Claus.  
Yes, we cannot just call the process method there. I'm working on it to add the async processing code :)
;;;","30/Oct/14 09:09;njiang;Applied the patch into camel master ,camel 2.14.x with thanks to Matteo. I also changed the patch by adding callback to check the failed exchange.;;;","30/Oct/14 10:52;Matteo Pavesi;Thanks for the interest in this issue and for the quick change. I've also learned something from the fix to my patch :)
;;;",,,,,,,,,,,,,,,,,,,
Setting bean reference in <restConfiguration> fails with IllegalFormatWidthException,CAMEL-7971,12750745,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ralfsteppacher,ralfsteppacher,27/Oct/14 13:19,28/Oct/14 04:35,14/Jul/23 05:49,28/Oct/14 04:35,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,camel-netty4-http,,,,,0,,,,,,,"I am trying to set a custom HTTP binding on the netty4-http endpoint created for the REST-DSL routes. The '#' in the bean ref, URL encoded as %23, makes the endpoint generation fail because it is interpreted by the string formatter.

{code:xml}
<restConfiguration component=""netty4-http"" scheme=""http"" host=""{{rest.host}}"" port=""{{rest.port}}"" bindingMode=""json"">
	<endpointProperty key=""nettyHttpBinding"" value=""#noStackTraceHTTPBinding""/>
</restConfiguration>

<rest path=""/base"" produces=""application/json"">
	<get uri=""/path"">
		<to uri=""direct:myroute"" />
	</get>
</rest>
{code}

This configuration results in the following template string (NettyHttpComponent.java line 279):

{{netty4-http:%s://%s:%s/%s?httpMethodRestrict=%s?nettyHttpBinding=%23noStackTraceHTTPBinding}}

The main problem is the hash mark encoded as ""%23"" and interpreted by the string formatter. Also, the second '?' in the URL probably should be a '&'.

Full stacktrace:

{code}
java.util.IllegalFormatWidthException: 23
	at java.util.Formatter$FormatSpecifier.checkText(Formatter.java:2996)[:1.7.0_60]
	at java.util.Formatter$FormatSpecifier.<init>(Formatter.java:2688)[:1.7.0_60]
	at java.util.Formatter.parse(Formatter.java:2528)[:1.7.0_60]
	at java.util.Formatter.format(Formatter.java:2469)[:1.7.0_60]
	at java.util.Formatter.format(Formatter.java:2423)[:1.7.0_60]
	at java.lang.String.format(String.java:2790)[:1.7.0_60]
	at org.apache.camel.component.netty4.http.NettyHttpComponent.createConsumer(NettyHttpComponent.java:279)
	at org.apache.camel.component.rest.RestEndpoint.createConsumer(RestEndpoint.java:167)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:134)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2379)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2309)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2091)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1951)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:452)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:387)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:477)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:435)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:375)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:364)
	at Proxy486edb88_52c2_40bf_8539_fb7a444aafe1.installFeature(Unknown Source)
	at org.apache.karaf.features.command.InstallFeatureCommand.doExecute(InstallFeatureCommand.java:67)
	at org.apache.karaf.features.command.FeaturesCommandSupport.doExecute(FeaturesCommandSupport.java:38)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)[25:org.apache.karaf.shell.console:3.0.2]
	at Proxy4496acc0_5450_4cc1_881a_14668e65e5a7.execute(Unknown Source)[:]
	at Proxy4496acc0_5450_4cc1_881a_14668e65e5a7.execute(Unknown Source)[:]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:203)
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:115)
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_60]
	at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)[26:org.apache.karaf.jaas.modules:3.0.2]
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:108)[25:org.apache.karaf.shell.console:3.0.2]
{code}",,njiang,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 28 04:35:20 UTC 2014,,,,,,,,,,,"0|i21m0f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Oct/14 04:35;njiang;Applied the patch into camel master, camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Container has undefined concurrency behaviour,CAMEL-7968,12750721,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,27/Oct/14 10:38,06/Nov/14 13:53,14/Jul/23 05:49,02/Nov/14 08:41,2.14.0,,,,,,,,2.15.0,,,,,,,,,,0,,,,,,,"The implementation of Container.Instance is not ThreadSafe. It is also not defined what happens when multiple Containers race on the singleton.

Instead of using a Container singleton approach. It might be better to have a singleton ContainerRegistry that can handle concurrent/multiple Containers",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8000,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 03 07:41:00 UTC 2014,,,,,,,,,,,"0|i21lv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/14 08:41;davsclaus;Added more details in the javadoc that Container is not thread-safe, which has never been the intention either.;;;","03/Nov/14 07:41;tdiesler;Documenting that a shared resource is not thread safe is just as wrong as not taking greater care about possible concurrent access in the first place. A client cannot possibly synchronise concurrent access because it may not even be aware of other clients.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq logging exceptions as debug,CAMEL-7967,12750705,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,crive,crive,27/Oct/14 09:03,30/Oct/14 02:25,14/Jul/23 05:49,30/Oct/14 02:25,2.14.0,,,,,,,,,,,,camel-rabbitmq,,,,,,0,,,,,,,"Connecting to RabbitMQ using camel-rabbitmq I've noticed that no ERROR is logged if the component cannot connect, the exceptions are handled and logged as DEBUG. 
This is a bit inconvenient as logging all DEBUG messages for the component fills up our logs, in production we usually set INFO as threshold. ",,crive,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 30 02:25:37 UTC 2014,,,,,,,,,,,"0|i21lrj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Oct/14 02:25;njiang;Applied the patch into master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Doesn't set the blank or empty string to the mail recipients,CAMEL-7966,12750704,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Oct/14 09:02,27/Oct/14 09:11,14/Jul/23 05:49,27/Oct/14 09:10,2.13.2,2.14.0,,,,,,,2.13.3,2.14.1,2.15.0,,camel-mail,,,,,,0,,,,,,,"Here is [the user complain|http://camel.465427.n5.nabble.com/Camel-Mail-CC-and-BCC-headers-tp5757943p5757950.html] in the mailing list.
{code}
I recently had a production issue where there was an exception thrown when 
the CC or the BCC headers were set to """": 

com.sun.mail.smtp.SMTPAddressFailedException: 554 5.1.1 Invalid recipient address 
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 27 09:11:01 UTC 2014,,,,,,,,,,,"0|i21lrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Oct/14 09:11;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jetty should support Post Redirect Get WebDesign pattern,CAMEL-7964,12750663,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Oct/14 03:33,27/Oct/14 08:12,14/Jul/23 05:49,27/Oct/14 08:12,,,,,,,,,2.15.0,,,,camel-jetty,,,,,,0,,,,,,,"The HTTP 303 response in response to a POST indicates that the POST was successful. Currently, Camel Jetty will throw an exception by default for a 303. There is a work around for this, but it involves setting throwExceptionOnFailure=true, which then ignores legitimate errors. For reference on how 303 responses should work, please see the following: http://en.wikipedia.org/wiki/Post/Redirect/Get

For camel-jetty, we can add CamelRedirectListener to do this kind of thing.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 27 08:12:40 UTC 2014,,,,,,,,,,,"0|i21lif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Oct/14 03:42;njiang;I just ran some tests, camel-http4 support this pattern out of box, camel-http doesn't support it as HttpClient 3 wants user handler the redirection from application level[1].
For camel-netty-http, camel-netty4-http, we don't support auto redirect yet.

[1] http://hc.apache.org/httpclient-3.x/redirects.html;;;","27/Oct/14 08:12;njiang;Applied patch into camel master branch.;;;",,,,,,,,,,,,,,,,,,,,,,
Hazelcast seda documentation is misleading about pollInterval,CAMEL-7953,12750378,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,graben,graben,24/Oct/14 15:51,30/Nov/14 14:08,14/Jul/23 05:49,30/Nov/14 14:08,2.14.0,,,,,,,,2.15.0,,,,camel-hazelcast,,,,,,0,,,,,,,"Actual documentation says about property pollInterval used by hazelcast seda consumer: ""How frequent to poll from the SEDA queue"". Unfortunately this is wrong since pollInterval is used as blocking timeout while polling a Java BlockingQueue (http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingQueue.html#poll%28long,%20java.util.concurrent.TimeUnit%29) which might lead to wrong usage. Property might considered to be renamed to e.g. blockingTimeout. ",,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 30 14:08:11 UTC 2014,,,,,,,,,,,"0|i21js7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Nov/14 14:08;davsclaus;Thanks for spotting this.;;;",,,,,,,,,,,,,,,,,,,,,,,
"Crypto won't decrypt message with multiple encrypted parts if ""our"" key isn't the first part",CAMEL-7938,12749543,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,yarddog,yarddog,21/Oct/14 16:53,22/Jun/15 16:36,14/Jul/23 05:49,20/Nov/14 11:42,2.11.1,,,,,,,,2.13.0,,,, camel-crypto,,,,,,0,,,,,,,"If a message has multiple PGPPublicKeyEncryptedData (meaning, multiple recipients), PGPDataFormat fails to decrypt the message (unless our key is the first PGPPublicKeyEncryptedData element).

Said differently, if a message is encrypted for recipient A and B (and the encrypted parts are in that order) and we are recipient B, the message fails to decrypt.

This definitely affected version 2.11.1.  Looking at the latest version of the same files, this is most likely still an issue.  The fix in the patch that will be supplied is currently being used in our application, but unfortunately I do not have a test case available.

I will create a pull-request on Github shortly.",,githubbot,njiang,yarddog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 22 16:36:23 UTC 2015,,,,,,,Patch Available,,,,"0|i21epj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Oct/14 17:52;githubbot;GitHub user steveardis opened a pull request:

    https://github.com/apache/camel/pull/305

    CAMEL-7938 - Crypto won't decrypt message with multiple encrypted parts if ""our"" key isn't the first part

    CAMEL-7938 patch.  Note that this patch was made off the last commit in 2.11.x, based on when I actually made the fix.  I'd like to see this fix move into the next possible release, so I wasn't sure which commit to actually make it against.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/steveardis/camel crypto_multiple_encrypted_parts

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/305.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #305
    
----
commit 041b4591f41bef5bed9c3ff32f09973230aee5a3
Author: Steve Ardis <steve.ardis@cypresscare.com>
Date:   2013-08-19T19:19:09Z

    CAMEL-7938 - Fixed issue with camel-crypto not iterating through encrypted parts and finding the one that goes with our private key; for example - if the payload was encrypted for recipients A and B (in that order), and ""our key"" is B, the private key lookup fails

commit fa4b061d23dd470abcfa8849be97ba32271c4c99
Author: Steve Ardis <steve.ardis@cypresscare.com>
Date:   2014-10-21T17:46:33Z

    CAMEL-7938 - Removed changes to pom.xml

----
;;;","21/Oct/14 17:54;yarddog;A pull request (#305) has been created.;;;","20/Nov/14 11:41;njiang;It looks this issue is addressed by CAMEL-7052 and  CAMEL-7192.
[~yarddog] Could you try to run some test with Camel 2.13.2 or Camel 2.14.0 to verify the fix?;;;","08/May/15 20:43;yarddog;Sorry for taking so long to reply.  Based on my testing, this appears to have been fixed in 2.12.3.

Thank you!;;;","22/Jun/15 16:36;githubbot;Github user steveardis closed the pull request at:

    https://github.com/apache/camel/pull/305
;;;",,,,,,,,,,,,,,,,,,,
camel-example-cdi fails on wildfly,CAMEL-7937,12749481,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,21/Oct/14 10:15,09/Jul/15 11:23,14/Jul/23 05:49,09/Jul/15 11:23,2.14.0,,,,,,,,2.16.0,,,,camel-cdi,examples,,,,,0,,,,,,,"[.. camel-example-cdi]$ mvn clean install -Parquillian-jbossas-managed

{code}
Caused by: java.lang.IllegalArgumentException: Packaging type jdocbook is not supported.
	at org.jboss.shrinkwrap.resolver.api.maven.PackagingType.fromPackagingType(PackagingType.java:65)
	at org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.fromDependency(MavenConverter.java:149)
	at org.jboss.shrinkwrap.resolver.impl.maven.convert.MavenConverter.fromDependencies(MavenConverter.java:163)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomEquippedResolveStageBaseImpl.<init>(PomEquippedResolveStageBaseImpl.java:68)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomEquippedResolveStageImpl.<init>(PomEquippedResolveStageImpl.java:38)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl.createNewPomEquippedResolveStage(PomlessResolveStageImpl.java:55)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageImpl.createNewPomEquippedResolveStage(PomlessResolveStageImpl.java:30)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageBaseImpl.loadPomFromFile(PomlessResolveStageBaseImpl.java:77)
	at org.jboss.shrinkwrap.resolver.impl.maven.PomlessResolveStageBaseImpl.loadPomFromFile(PomlessResolveStageBaseImpl.java:99)
	at org.jboss.shrinkwrap.resolver.impl.maven.MavenResolverSystemBaseImpl.loadPomFromFile(MavenResolverSystemBaseImpl.java:157)
	at org.apache.camel.example.cdi.ArchiveUtil.createWarArchive(ArchiveUtil.java:61)
	at org.apache.camel.example.cdi.one.DeploymentFactory.createArchive(DeploymentFactory.java:48)
{code}

{code}
Tests in error: 
  IntegrationTest.org.apache.camel.example.cdi.one.IntegrationTest » Runtime Cou...
  SeparateRouteBuilderIntegrationTest.org.apache.camel.example.cdi.two.SeparateRouteBuilderIntegrationTest » Runtime
{code}",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 09 11:23:39 UTC 2015,,,,,,,,,,,"0|i21ebr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Oct/14 12:18;davsclaus;Have you tried without arquillian and just deploy the example in an existing running wildfly server?

Also we have no clue what that jdocbook error means? I suspect its not a Camel issue?;;;","09/Jul/15 11:23;davsclaus;camel-cdi works better now;;;",,,,,,,,,,,,,,,,,,,,,,
JcloudsPayloadConverter.toPayload(InputStream) cannot deal with FileInputStreamCache,CAMEL-7935,12749439,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,21/Oct/14 06:36,27/Oct/14 09:03,14/Jul/23 05:49,27/Oct/14 09:03,2.13.2,2.14.0,,,,,,,2.13.3,2.14.1,2.15.0,,camel-jclouds,,,,,,0,,,,,,,"StackOverflowError if body is FileInputStreamCache.
http://camel.465427.n5.nabble.com/camel-jclouds-StackOverflowError-if-body-is-FileInputStreamCache-tp5757810.html ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 27 09:03:33 UTC 2014,,,,,,,,,,,"0|i21e2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Oct/14 09:03;njiang;Applied patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
JCR need to support multi-valued property,CAMEL-7931,12749171,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Oct/14 07:06,20/Oct/14 08:35,14/Jul/23 05:49,20/Oct/14 08:35,2.13.2,2.14.0,,,,,,,2.14.1,2.15.0,,,camel-jcr,,,,,,0,,,,,,,Regarding to the issue at Camel User Forum as [[camel-jcr] The trouble about the JCR multi-valued property when using JCR_GET_BY_ID](http://camel.465427.n5.nabble.com/camel-jcr-The-trouble-about-the-JCR-multi-valued-property-when-using-JCR-GET-BY-ID-td5757029.html).  Here is the fix from https://github.com/apache/camel/pull/287.patch  from  charlee. ,,charlee.ch,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 20 08:35:51 UTC 2014,,,,,,,,,,,"0|i21cef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/14 08:35;njiang;Merged the patch into camel master, camel-2.14.x branches with thanks to Charlee.;;;",,,,,,,,,,,,,,,,,,,,,,,
groovy and osgi - Could not initialize class script1413536396719697720774,CAMEL-7925,12748853,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,cmoulliard,cmoulliard,17/Oct/14 09:15,05/Dec/14 11:41,14/Jul/23 05:49,04/Dec/14 10:57,,,,,,,,,,,,,camel-groovy,,,,,,0,,,,,,,"When a camel route is deployed on apache Karaf using a groovy expression to be evaluated we get this error 

https://gist.github.com/cmoulliard/7294122c47e9c18df399

Route

{code}
		from(""direct:launch"").routeId(""request-token"")
		
		.onException(HttpOperationFailedException.class)
		    .handled(true)
			.log(""An error occurred"")
		    .to(""direct:interface-status"")
		    .end()
		
		.setHeader(Exchange.HTTP_URI, constant(wayneUriGetSession))
		.setHeader(Exchange.HTTP_QUERY, constant(""User="" + UserName + ""&"" + ""Pass="" + Password))
		.setHeader(Exchange.HTTP_METHOD, constant(""GET""))
		
		.to(""https4://token-service"")
		.convertBodyTo(String.class)
		.setHeader(""token"").groovy(""body.replaceAll('\""','')"")
{code}

{code}
Caused by: java.lang.NoClassDefFoundError: Could not initialize class script1413536396719697720774
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_51]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_51]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_51]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_51]
	at java.lang.Class.newInstance(Class.java:374)[:1.7.0_51]
	at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:71)
{code}
",Apache Karaf 2.2.x,antoine.dessaigne,cmoulliard,davsclaus,xfournet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 05 11:41:04 UTC 2014,,,,,,,,,,,"0|i21ag7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Oct/14 12:25;davsclaus;What version of Camel do you use? Also karaf 2.2.x is old. Use a newer release.;;;","27/Oct/14 07:23;cmoulliard;- Version of camel used : 2.12
- The version of Karaf does not affect this issue which is a classloading problem;;;","03/Dec/14 19:46;davsclaus;Try a newer version of Camel. 2.12.x is EOL.;;;","04/Dec/14 09:05;cmoulliard;I have redeployed my project on Apache Karaf 3.0.2 using Apache Camel 2.14.0 with Groovy 2.3.6 and another classloading issue is reported even if the class ""groovy.lang.Script"" is well packaged with the bundle ""Groovy Runtime"" 

Error 

{code}
Caused by: java.lang.ClassNotFoundException: groovy.lang.Script
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:655)
	at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:408)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:765)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:753)
	... 31 more

1 error

	at org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:309)[122:groovy-all:2.3.6]
	at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:1067)[122:groovy-all:2.3.6]
	at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:583)[122:groovy-all:2.3.6]
	at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:561)[122:groovy-all:2.3.6]
	at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:538)[122:groovy-all:2.3.6]
	at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:286)[122:groovy-all:2.3.6]
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:259)[122:groovy-all:2.3.6]
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:245)[122:groovy-all:2.3.6]
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:203)[122:groovy-all:2.3.6]
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:213)[122:groovy-all:2.3.6]
	at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:65)[123:org.apache.camel.camel-groovy:2.14.0]
	at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:50)[123:org.apache.camel.camel-groovy:2.14.0]
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:157)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:68)[92:org.apache.camel.camel-core:2.14.0]
	at java.util.TimerThread.mainLoop(Timer.java:555)[:1.7.0_51]
	at java.util.TimerThread.run(Timer.java:505)[:1.7.0_51]
{code}

What is deployed on Karaf 

{code}
 92 | Active   |  50 | 2.14.0         | mvn:org.apache.camel/camel-core/2.14.0
 93 | Active   |  50 | 2.14.0         | mvn:org.apache.camel.karaf/camel-karaf-commands/2.14.0
108 | Active   |  50 | 1.1.1          | mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
109 | Active   |  50 | 2.14.0         | mvn:org.apache.camel/camel-spring/2.14.0
110 | Active   |  50 | 2.14.0         | mvn:org.apache.camel/camel-blueprint/2.14.0
120 | Active   |  50 | 1.7.0.6        | mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.ant/1.7.0_6
121 | Active   |  50 | 2.2.0          | mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/2.2.0
122 | Active   |  50 | 2.3.6          | mvn:org.codehaus.groovy/groovy-all/2.3.6
123 | Active   |  50 | 2.14.0         | mvn:org.apache.camel/camel-groovy/2.14.0
{code}

Class of the bundle ""122"" = Groovy Runtime

{code}
karaf@root()> classes 122 | grep groovy.lang.Script
groovy/lang/Script.class
{code};;;","04/Dec/14 09:18;cmoulliard;Example is available here :https://github.com/cmoulliard/use-cases/blob/master/camel-osgi-groovy/README.md;;;","04/Dec/14 10:27;cmoulliard;If I add ""dynamic-import"" package to the demo example, the classloading issue with ""groovy.lang.script"" is gone and I get a similar error :

{code}
2014-12-04 11:22:36,696 | WARN  | - timer://groovy | TimerConsumer                    | 92 - org.apache.camel.camel-core - 2.14.0 | Error processing exchange. Exchange[Message: This is a message containing double quotes. Example --> ""Hello"".]. Caused by: [java.lang.ClassCastException - script1417688554694697720774 cannot be cast to groovy.lang.Script]
java.lang.ClassCastException: script1417688554694697720774 cannot be cast to groovy.lang.Script
	at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:71)[123:org.apache.camel.camel-groovy:2.14.0]
	at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:50)[123:org.apache.camel.camel-groovy:2.14.0]
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:157)[92:org.apache.camel.camel-core:2.14.0]
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:68)[92:org.apache.camel.camel-core:2.14.0]
	at java.util.TimerThread.mainLoop(Timer.java:555)[:1.7.0_51]
	at java.util.TimerThread.run(Timer.java:505)[:1.7.0_51]
{code};;;","04/Dec/14 10:29;cmoulliard;It seems that the problem reported is related to Felix issue - https://issues.apache.org/jira/browse/CAMEL-5493;;;","04/Dec/14 10:57;cmoulliard;Problem resolved using <DynamicImport-Package>*</DynamicImport-Package> & features camel-script, camel-script-groovy;;;","04/Dec/14 10:57;cmoulliard;See last comment;;;","05/Dec/14 09:33;antoine.dessaigne;Hi,

By any chance, do you have the Felix issue number ?;;;","05/Dec/14 10:23;cmoulliard;Unfortunately no. I'm not even sure that a ticket has been logged.;;;","05/Dec/14 11:00;antoine.dessaigne;I fear that {{<DynamicImport-Package>*</DynamicImport-Package>}} will allow groovy script to use any class and services of the platform. With explicit imports you're sure that you won't access something you don't want to.

What if you use instead
{code:language=xml}
<DynamicImport-Package>groovy.*, org.codehaus.groovy, org.codehaus.groovy.*</DynamicImport-Package>
{code}
That way you limit to groovy;;;","05/Dec/14 11:41;cmoulliard;You will solve a part of the problem if you restrict the packages to be imported (as you propose). But as Groovy will generate class dynamically under the name script123456789, they will not be loaded and a classloading exception will take place for these classes. This is why until now, the trick to import dynamically everything. For sure, this is not a good thing as it breaks the OSGI modularity.;;;",,,,,,,,,,,
java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.callsite.CallSiteArray,CAMEL-7924,12748823,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,17/Oct/14 07:40,20/Oct/14 06:18,14/Jul/23 05:49,20/Oct/14 06:18,2.12.3,2.13.2,2.14.0,,,,,,2.13.3,2.14.1,2.15.0,,camel-groovy,,,,,,0,,,,,,,"When a camelRoute using the camel-groovy component is deployed on Karaf, we get this class not found exception. Apparently, the class is not imported and the package is not declared in the MANIFEST file of the component.

{code}
Caused by: java.lang.NoClassDefFoundError: org/codehaus/groovy/runtime/callsite/CallSiteArray
	at script1413531356181697720774.$createCallSiteArray(script1413531356181697720774.groovy)
	at script1413531356181697720774.$getCallSiteArray(script1413531356181697720774.groovy)
	at script1413531356181697720774.__$swapInit(script1413531356181697720774.groovy)
	at script1413531356181697720774.<clinit>(script1413531356181697720774.groovy)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_51]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_51]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_51]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_51]
	at java.lang.Class.newInstance(Class.java:374)[:1.7.0_51]
	at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:71)
	at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:50)
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	... 89 more
Caused by: java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.callsite.CallSiteArray
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_51]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_51]
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_51]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_51]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)[:1.7.0_51]
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:648)
	at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:401)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:758)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:746)
	... 102 more
{code}",,antoine.dessaigne,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-10-17 07:40:33.0,,,,,,,,,,,"0|i21a9j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT endpoint misses QoS > 0 messages due to startup timing issue,CAMEL-7922,12748703,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davydewaele,davydewaele,16/Oct/14 20:37,20/Nov/14 09:11,14/Jul/23 05:49,20/Nov/14 09:11,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-mqtt,,,,,,0,,,,,,,"When the MQTT Endpoint is started the MQTT connection is immediately established, causing an immediate influx of persisted messages (put on the topic when the client was not available). 

Issue is that at this point, most likely no consumers are available yet to process these messages.


*Receiving a PUBLISH message*

Publish message are received without any consumers. Result : msg with QoS > 0 that were put on the topic while the client was not connected are never processed.

{noformat}
Daemon Thread [hawtdispatch-DEFAULT-3] (Suspended (breakpoint at line 815 in CallbackConnection))	
	CallbackConnection.toReceiver(PUBLISH) line: 815	
	CallbackConnection.processFrame(MQTTFrame) line: 732	
	CallbackConnection.access$1500(CallbackConnection, MQTTFrame) line: 51	
	CallbackConnection$6.onTransportCommand(Object) line: 392	
	TcpTransport.drainInbound() line: 709	
	TcpTransport$6.run() line: 588	
	NioDispatchSource$3.run() line: 209	
	SerialDispatchQueue.run() line: 100	
	SimpleThread.run() line: 77	
{noformat}

*No consumers registered yet*

Only when this finishes will Camel be able to process the messages.

{noformat}
Daemon Thread [localhost-startStop-1] (Suspended (breakpoint at line 164 in MQTTEndpoint))	
	owns: SpringCamelContext  (id=92)	
	owns: Object  (id=143)	
	owns: StandardContext  (id=144)	
	MQTTEndpoint.addConsumer(MQTTConsumer) line: 164	
	MQTTConsumer.doStart() line: 35	
	MQTTConsumer(ServiceSupport).start() line: 61	
	SpringCamelContext(DefaultCamelContext).startService(Service) line: 2158	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRouteConsumers(Map<Integer,DefaultRouteStartupOrder>, boolean, boolean) line: 2452	
	SpringCamelContext(DefaultCamelContext).doStartRouteConsumers(Map<Integer,DefaultRouteStartupOrder>, boolean) line: 2388	
	SpringCamelContext(DefaultCamelContext).safelyStartRouteServices(boolean, boolean, boolean, boolean, Collection<RouteService>) line: 2318	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRoutes(Map<String,RouteService>, boolean, boolean, boolean, boolean) line: 2091	
	SpringCamelContext(DefaultCamelContext).doStartCamel() line: 1951	
	SpringCamelContext(DefaultCamelContext).doStart() line: 1777	
{noformat}

These messages will never be picked up.

Perhaps it's more the responsibility of the consumer / producer to start a connection when they get attached to the endpoint ? 
",,davydewaele,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 20 09:11:42 UTC 2014,,,,,,,,,,,"0|i219jz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/14 09:11;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
The soapAction HTTP header is not correctly set when running the CXF client in POJO mode using Camel,CAMEL-7921,12748569,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,tonswieb,tonswieb,16/Oct/14 11:30,09/Sep/15 14:33,14/Jul/23 05:49,09/Sep/15 05:26,2.12.3,2.12.4,2.13.2,2.14.0,,,,,2.14.4,2.15.4,2.16.0,,camel-cxf,,,,,,0,,,,,,,"The soapAction HTTP header is not correctly set when running the CXF client in POJO mode using Camel.

The root cause seems to be that the service name from the generated service class differs from the service name in the WSDL.

For me it is unclear if this should be an issue with the cxf-codegen-plugin or with the Camel CXF component. When running the CXF client without Camel then the soapAction HTTP header is correctly set and the issue does not occur. So that's why I first report the bug with Camel.

Possible workarounds I found are:
1) Explicitly specifying the correct serviceName as CXF endpoint attribute.
2) Explicitly setting the soapAction header in the Camel route prior to calling the CXF endpoint.

Both workarounds are not desirable, because they are easily forgotten and CXF does not throw an exception when you do. According to the basic profile v1.0 the soapAction HTTP header must match the value in the WSDL and receiving SOAP servers may throw a SOAP Fault if it doesn't. Some SOAP servers do throw an exception when the soapAction HTTP header is invalid. Resulting in communication failures between some SOAP client/server combinations.

I created a test project to verify the above behaviour with the following tests:
1) CXF in PAYLOAD with Camel. => OK
2) CXF in POJO mode without Camel => OK
3) CXF in POJO mode with Camel => *NOT OK*
4) CXF in POJO mode with service name set => OK
5) CXF in POJO mode with soapAction set => OK

I run the test project with multiple combinations of Camel and CXF. The following combinations I have tried:
1) Camel 2.12.3 and CXF 2.7.10 (Apache Servicemix 5.0.0 setup)
2) Camel 2.12.4 and CXF 2.7.11 (Apache Servicemix 5.0.5 setup)
3) Camel 2.13.2 and CXF 2.7.11 (Apache Servicemix 5.1.3 and 5.3.0 setup)
4) Camel 2.14.0 and CXF 3.0.1

In the example project the mismatch occurs between an annotation in the generated service class:
{code}
@WebService(targetNamespace = ""http://finalist.nl/ai/"", name = ""ICamelCxfTestService"")
{code}

and the definition of the service name in the WSDL:

{code}
<wsdl:service name=""CamelCxfTestService"">
{code}
",,ay,davsclaus,ffang,jansenj,tonswieb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Oct/14 11:33;tonswieb;soapActionTest.zip;https://issues.apache.org/jira/secure/attachment/12675261/soapActionTest.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 09 14:33:37 UTC 2015,,,,,,,,,,,"0|i218s7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Oct/14 20:08;tonswieb;It looks like the parameter wsdlURL is causing the problem.

When using the parameter wsdlURL in the CXF endpoint URI the soapAction is not set:
cxf:http://localhost:8080?&serviceClass=nl.finalist.ai.ICamelCxfTestService&wsdlURL=CamelCxfTestService.wsdl

When leaving it out the soapAction is correctly set:
cxf:http://localhost:8080?&serviceClass=nl.finalist.ai.ICamelCxfTestService;;;","10/Jul/15 07:00;davsclaus;I wonder if its when using wsdlURL the SoapAction is inside that wsdl file and that would require logic to parse it and find it to set it.

And any chance to try with latest code, its been a long time since this was reported?;;;","18/Aug/15 13:20;tonswieb;I tried with latest code (Camel 2.15.2 and CXF 3.0.4) and bug still exists.
Can be easily reproduced by changing the Camel en CXF version in the POM of the attached ZIP and run it. One test case will fail.;;;","19/Aug/15 13:13;ay;This has likely nothing to do with the mode itself (i.e. PAYLOAD or POJO) but rather has something do with the way in which the endpoint is configured. Somehow, when the endpoint is configured over its URL with both WSDL and SEI set as in your POJO case, the action value is not correctly extracted. So, you will get the same problem when you add WSDL in your PAYLOAD case and you won't get the problem when you remove either WSDL or SEI from your POJO case.

Does someone have a quick idea?
;;;","06/Sep/15 11:13;ffang;The code in the generated SEI 
{code}
@WebService(targetNamespace = ""http://finalist.nl/ai/"", name = ""ICamelCxfTestService"")
{code}
is expected behavior, the @WebService annotation has another attribute serviceName which should be equal with wsdl:service@name, the attribute serviceName normally should be in the impl class.

However for the cxf:producer endpoint the serviceClass specified must be an interface so that there's no serviceName attribute in the @WebService annotation at all.  And the current logic is that if can't find the serviceName, use the convention that the SEI classname + ""Service"", as the SEI classname is same as the wsdl:portType@name from the wsdl, so in your wsdl the wsdl:service name should be wsdl:portType name + ""Service"". Otherwise you really need specify the serviceName in the cxf:producer endpoint URI.

;;;","08/Sep/15 11:51;tonswieb;Hi [~ffang],

Thanks for looking into this.

Beside from any WSDL conventions I believe the WSDL is valid and is WS-I compliant. When using a valid WSDL I would expect one of the following:
* A valid SOAP implementation is generated.
* An excpetion is thrown stating that a SOAP implementation cannot be generated due to missing properties.

Generating a SOAP implementation which is relying on naming conventions in the WSDL does not sounds like a very good plan to me. It would require me to either always set the servicename attribute explicitly to be on the safe side or modify the WSDL to adhere to the naming convention. In case of a missing servicename I think it would be better for the Camel Producer to fail fast instead of trying to make the best of it.;;;","09/Sep/15 05:18;ffang;if not specify the service name and if the wsdlUrl is available, we can parse the wsdl to see if there is only one service in it, if so we can set the only service to avoid such ambiguity
;;;","09/Sep/15 05:26;ffang;commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/843ef83f for camel-2.14.x branch
http://git-wip-us.apache.org/repos/asf/camel/commit/63234bd1 for camel-2.15.x branch
http://git-wip-us.apache.org/repos/asf/camel/commit/8c36915e for master;;;","09/Sep/15 14:33;tonswieb;Hi [~ffang],

Thanks for fixing this.;;;",,,,,,,,,,,,,,,
Refresh of the camel-jaxb bundle results a strange behaviour,CAMEL-7920,12748546,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,joeluo,joeluo,16/Oct/14 09:17,17/Oct/14 12:09,14/Jul/23 05:49,17/Oct/14 12:09,,,,,,,,,2.13.3,2.14.1,2.15.0,,,,,,,,0,,,,,,,"I have a simple test case to demonstrate this issue. Here is the camel route:
{code}
<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
  <route id=""testServiceRoute"">
      <from uri=""cxf:bean:testServiceEndpoint""/>
      <log message=""Incoming Body:  ${body}""/>
      <to uri=""language:constant:classpath:OKResponse.xml""/>
      <log message=""Response Body before convert:  ${body}""/>
      <convertBodyTo type=""com.test.testservice.TestMessageResponse""/>
      <log message=""Response Body after convert:  ${body}""/>
  </route>
</camelContext>
{code} 

And the camel-cxf consumer endpoint:
{code}
<cxf:cxfEndpoint id=""testServiceEndpoint""
                 address=""/TestService/v1""
                 wsdlURL=""wsdl/TestService.wsdl""
                 serviceName=""s:TestServiceInterface""
                 endpointName=""s:TestServicePort""
                 xmlns:s=""http://test.com/TestService"">
        <cxf:properties>
          <entry key=""dataFormat"" value=""PAYLOAD""/>
        </cxf:properties>
</cxf:cxfEndpoint>
{code}
I have explicitly set ""dataFormat"" to default PAYLOAD just for clarity purpose.

In this simple camel route, I try to change the entire body to a String XML message. As a result, the client will get an empty response back (I mean an empty soap envelope). The reason is due to following method:
org.apache.camel.component.cxf.DefaultCxfBinding.getBodyFromCamel:
{code}
public static Object getBodyFromCamel(org.apache.camel.Message out,
            DataFormat dataFormat) {
        Object answer = null;
        
        if (dataFormat == DataFormat.POJO) {
            answer = out.getBody();
        } else if (dataFormat == DataFormat.PAYLOAD) {
            answer = out.getBody(CxfPayload.class);
        } else if (dataFormat.dealias() == DataFormat.RAW) {
            answer = out.getBody(InputStream.class);
        } else if (dataFormat.dealias() == DataFormat.CXF_MESSAGE) {
            answer = out.getBody();
        }
        return answer;
    }
{code}
Obviously it will return a null object back because it tries to get a body of CxfPayload type. And I also know that above camel route will work fine if I use MESSAGE dataFormat instead.

However, the strange behaviour aries if I refresh camel-jaxb bundle in Karaf container. The client will get a non-empty response from OKResponse.xml file and everything works fine now. It looks like that when I refreshed camel-jaxb bundle, camel-core's FallbackConverter kicked in and it helped CXF consumer to convert the payload object into POJO.

If I refreshed camel-core bundle, then above test case would stop working and client would get an empty response (empty soap envelope) back, again. So it looks like that when camel-core bundle's was refreshed, it's new activator was not able to load converters from camel-jaxb bundle since the bundle was already there. So only refreshing of the camel-jaxb bundle would enable camel-core to load the FallbackConverter again, thus helps the test route to work. 

I also tried to change ""start-level"" of the camel-jaxb bundle to a value much higher than '50', say '80', then it would work the most times. ",,joeluo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 17 12:09:19 UTC 2014,,,,,,,,,,,"0|i218n3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Oct/14 09:20;joeluo;The test case can be downloaded from this JIRA:
https://issues.jboss.org/browse/ENTESB-2094;;;","16/Oct/14 13:42;njiang;It's caused by the JAXB FallbackTypeConverter need to be the first fallbackTypeConverter, but as camel loading the fallbackTypeConverter from a kind of OSGi Servers which is returned in different order. 
Now I'm thinking to introduce a ordered list which can help us to decide which fallbackTypeConverter need to the first one the list.
;;;","17/Oct/14 12:09;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x.;;;",,,,,,,,,,,,,,,,,,,,,
Add tests for camel-jira component,CAMEL-7919,12748534,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,kearls,kearls,16/Oct/14 08:34,14/Jan/15 18:22,14/Jul/23 05:49,27/Oct/14 08:13,,,,,,,,,2.15.0,,,,,,,,,,0,,,,,,,"The new camel-jira component needs tests
",,githubbot,kearls,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 14 18:22:58 UTC 2015,,,,,,,,,,,"0|i218kf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Oct/14 08:41;githubbot;GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/310

    CAMEL-7919 New tests for the camel-jira component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7919A

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/310.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #310
    
----
commit 9906985763e32a01f0b2dd1caa3d3f727e55660d
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-10-23T08:40:03Z

    CAMEL-7919 New tests for the camel-jira component

----
;;;","27/Oct/14 08:13;njiang;Applied patch into master branch with thanks to Kevin.;;;","14/Jan/15 18:22;githubbot;Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/310
;;;",,,,,,,,,,,,,,,,,,,,,
camel-jsch unit tests are failing,CAMEL-7917,12748354,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,15/Oct/14 17:49,15/Oct/14 20:36,14/Jul/23 05:49,15/Oct/14 20:01,2.12.4,,,,,,,,2.12.5,,,,camel-jsch,,,,,,0,,,,,,,"A known issue in jsch 0.1.50:
{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Bye World]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:622)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:463)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:165)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:159)
	at org.apache.camel.component.jsch.ScpSimpleProduceTest.testScpSimpleSubPathProduce(ScpSimpleProduceTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at com.jcraft.jsch.Session.checkHost(Session.java:802)
	at com.jcraft.jsch.Session.connect(Session.java:342)
	at org.apache.camel.component.jsch.ScpOperations.createSession(ScpOperations.java:249)
	at org.apache.camel.component.jsch.ScpOperations.connect(ScpOperations.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.connectIfNecessary(RemoteFileProducer.java:189)
	at org.apache.camel.component.file.remote.RemoteFileProducer.recoverableConnectIfNecessary(RemoteFileProducer.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.preWriteCheck(RemoteFileProducer.java:113)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:114)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:163)
	... 31 more

{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-10-15 17:49:34.0,,,,,,,,,,,"0|i217hr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiServiceRegistry forces name property,CAMEL-7916,12748253,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,graben,graben,15/Oct/14 11:19,24/Oct/14 14:40,14/Jul/23 05:49,17/Oct/14 12:12,2.14.0,,,,,,,,2.13.3,2.14.1,2.15.0,,osgi,,,,,,0,,,,,,,"Several components does search the registry by calling findByTypeWithName. This method needs in OsgiServiceRegistry that every service has a name property which is not forced by spec and therefor optional. Maybe add a different ""name"" in those cases.",,antoine.dessaigne,graben,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 24 14:40:48 UTC 2014,,,,,,,,,,,"0|i216w7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Oct/14 06:06;njiang;I got your point, the name is used as index key, we can generate a unique name for it.;;;","17/Oct/14 12:12;njiang;Applied the patch camel master, camel-2.14.x and camel-2.13.x branch.;;;","19/Oct/14 08:38;antoine.dessaigne;I was wondering, should the name be resilient among the calls of findByTypeWithName ? If you add or remove something that implements what you looking for then the names will change. Thus maybe you can use System.identityHashCode for the suffix of the service.;;;","24/Oct/14 14:13;njiang;I don't think we need to use System.identityHashCode for it as the map is created per invocation. ;;;","24/Oct/14 14:40;antoine.dessaigne;The issue is not with the map but rather whether or not a service should always have the same name no matter how many times you're calling the method. If the name should always be the same then the counter approach won't work. (or there's something I didn't saw);;;",,,,,,,,,,,,,,,,,,,
MQTT Endpoint disconnects on failure. Does not reconnect,CAMEL-7914,12748108,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davydewaele,davydewaele,14/Oct/14 18:53,15/Feb/15 10:33,14/Jul/23 05:49,15/Feb/15 10:33,2.14.0,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-mqtt,,,,,,0,,,,,,,"When an error occurs in the Camel MQTT endpoint, the CallbackConnection onFailure callback simply disconnects the connection.

At that point there doesn't seem to be any mechanism to reconnect to the broker.

{noformat}
            public void onFailure(Throwable value) {
                connection.disconnect(new Callback<Void>() {
                    public void onSuccess(Void value) {
                    }

                    public void onFailure(Throwable e) {
                        LOG.debug(""Failed to disconnect from "" + configuration.getHost() + "". This exception is ignored."", e);
                    }
                });
            }
{noformat}",,davsclaus,davydewaele,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 10:33:40 UTC 2015,,,,,,,,,,,"0|i21613:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Oct/14 11:57;davydewaele;See discussion here : http://camel.465427.n5.nabble.com/Camel-MQTT-Endpoint-reconnect-on-transport-failure-td5757564.html

""The camel mqtt component does not implement the ""ReconnectAttempts"" 
parameters of the mqtt-client ( 
https://github.com/fusesource/mqtt-client#controlling-connection-reconnects). ""

;;;","30/Nov/14 14:12;davsclaus;You can configure the max reconnect attempts on the configuration / endpoint. Have you tried that?;;;","15/Feb/15 10:33;davsclaus;Thanks for reporting. 
;;;",,,,,,,,,,,,,,,,,,,,,
"Netty {Client|Server}ChannelHandler need to pass the close and open event around",CAMEL-7910,12747911,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Oct/14 02:19,02/Nov/14 11:43,14/Jul/23 05:49,20/Oct/14 02:15,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-netty,,,,,,0,,,,,,,"If add other handler interesting about close and open event and they are set behind the netty  {Client|Server}ChannelHandler, they cannot not get the event as current netty  {Client|Server}ChannelHandler  doesn't pass these event around.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 20 02:15:36 UTC 2014,,,,,,,,,,,"0|i214tr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/14 02:15;njiang;Applied the patch into camel master, camel-2.14.x, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http consumer need to close the connection if the response connection header is close,CAMEL-7909,12747907,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Oct/14 01:43,04/Jan/15 01:37,14/Jul/23 05:49,20/Oct/14 02:14,2.13.2,2.14.0,,,,,,,2.13.3,2.14.1,2.15.0,,camel-netty-http,camel-netty4-http,,,,,0,,,,,,,"Current Netty Http Consumer decided if it need to close connection by checking the request connection header. But if the response connection header is 'close',  the netty http consumer need to close the connection at the same time.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8193,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 20 02:14:47 UTC 2014,,,,,,,,,,,"0|i214t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/14 02:14;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
hdfs2 - chunkSize not honored,CAMEL-7900,12746978,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,paolo.antinori,paolo.antinori,09/Oct/14 09:46,11/Oct/14 06:21,14/Jul/23 05:49,11/Oct/14 06:21,2.14.0,,,,,,,,2.13.3,2.14.1,2.15.0,,camel-hdfs,,,,,,0,,,,,,,"{{camel-hdfs2}} component exposes {{chunkSize}} param, but that value is not correctly used in 

https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsFileType.java#L79

and the constant value:
{code}
public static final int DEFAULT_BUFFERSIZE = 4096;
{code}

always overrides it.",,njiang,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 11 06:21:28 UTC 2014,,,,,,,,,,,"0|i20za7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Oct/14 09:14;njiang;I just checked the code camel-hdfs, it has the same issue.;;;","11/Oct/14 06:21;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-jetty should support to define multiple http method for the rest service,CAMEL-7899,12746898,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Oct/14 01:50,24/Oct/14 07:18,14/Jul/23 05:49,09/Oct/14 08:19,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-jetty,camel-netty-http,camel-netty4-http,,,,0,,,,,,,"Camel complains Failed to start route route3 because of Multiple consumers for the same endpoint is not allowed, when define the rest service on the same path.
{code}
 restConfiguration()
                .component(""jetty"")
                .host(""localhost"").port(8080)
                .contextPath(""rest"")
                .bindingMode(RestBindingMode.auto)
                .dataFormatProperty(""prettyPrint"", ""true"");
        rest(""/say"")
                .get(""/hello"").to(""direct:hello"")
                .get(""/bye"").consumes(""application/json"").to(""direct:bye"")
                .post(""/bye"").to(""direct:bye"");

        from(""direct:hello"")
                .transform().constant(""Hello World"");
        from(""direct:bye"")
                .transform().constant(""Bye World"");
{code}

Here is [the discussion|http://camel.465427.n5.nabble.com/Rest-DSL-with-Jetty-tp5757418.html] in the nabble.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7952,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 09 08:19:00 UTC 2014,,,,,,,,,,,"0|i20ysf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/14 07:34;njiang;camel-servlet has the same issue as camel-jetty.
camel-netty-http and camel-netty4-http doesn't throw the exception, but the get dsl doesn't work out of box.;;;","09/Oct/14 08:19;njiang;Applied the patch into camel master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty-http producer should close the channel when the connection header is not keep alive,CAMEL-7896,12746717,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Oct/14 13:31,09/Oct/14 02:35,14/Jul/23 05:49,09/Oct/14 02:35,2.13.2,2.14.0,,,,,,,2.13.3,2.14.1,2.15.0,,camel-netty-http,camel-netty4-http,,,,,0,,,,,,,"If the http request connection header is ""keep alive"", camel http producer will not close the channel. It can cause some trouble if the response connection header is ""close"".  We need to close the channel if the response connection header is ""close"". ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 09 02:35:59 UTC 2014,,,,,,,,,,,"0|i20xp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/14 02:35;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Encoder exception after sending a message with null body,CAMEL-7894,12746616,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,elyrank,elyrank,08/Oct/14 04:39,09/Oct/14 02:38,14/Jul/23 05:49,09/Oct/14 02:38,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-netty4-http,,,,,,0,,,,,,,"when sending a request with a null body ( it was GET request in my case)
I got the following exception.

after investigating the issue I found that because the body is null - the request is created with type DefaultHttpRequest and not DefaultFullHttpRequest which is created when there is a body

this causes the HttpObjectEncoder to stay in a wrong state after the request is sent, because of this code:

 if (msg instanceof LastHttpContent) {
      state = ST_INIT;
}

so the next request will fail with the exception.
the workaround is simple - use an empty string as body

also - this did not happen in camel-netty-http

the exception:
Caused by: io.netty.handler.codec.EncoderException: java.lang.IllegalStateException: unexpected message type: DefaultFullHttpRequest at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:107) at io.netty.channel.CombinedChannelDuplexHandler.write(CombinedChannelDuplexHandler.java:192) at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:658) at io.netty.channel.AbstractChannelHandlerContext.access$2000(AbstractChannelHandlerContext.java:32) at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.write(AbstractChannelHandlerContext.java:939) at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:991) at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:924) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:380) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:357) at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: unexpected message type: DefaultFullHttpRequest at io.netty.handler.codec.http.HttpObjectEncoder.encode(HttpObjectEncoder.java:63) at io.netty.handler.codec.http.HttpClientCodec$Encoder.encode(HttpClientCodec.java:106) at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:89) ... 10 more
",,elyrank,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 09 02:38:04 UTC 2014,,,,,,,,,,,"0|i20x33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/14 02:38;njiang;Applied the patch into camel master, camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Unable to perform a restlet DELETE with no entity,CAMEL-7892,12746418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,aldo,aldo,07/Oct/14 14:59,09/Oct/14 02:40,14/Jul/23 05:49,09/Oct/14 02:40,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-restlet,,,,,,0,,,,,,,"The Restlet class
org.restlet.ext.httpclient.internal.HttpMethodCall.java
logs a warning in case a DELETE method call is performed with an entity, indicating that ""The current DELETE request provides an entity that may be not supported by the Apache HTTP Client library. If you face such issues, you can still move to another HTTP client connector.""

Unfortunately it seems impossible to force the Camel Restlet module to prepare a DELETE Restlet Request with no entity. In fact the class
org.apache.camel.component.restlet.DefaultRestletBinding in its method populateRestletRequestFromExchange always creates an entity. Instead it should set a null entity in case exchange.getIn().getBody() is null.

",,aldo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 09 02:40:32 UTC 2014,,,,,,,,,,,"0|i20vvz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/14 02:40;njiang;Applied the patch into camel master, camel-2.14.x, camel-2.13.x  and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
XmlConverter.toSAXSourceFromStream does not set setNamespaceAware,CAMEL-7890,12746156,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,matihost,matihost,06/Oct/14 14:32,11/Oct/14 05:59,14/Jul/23 05:49,11/Oct/14 05:59,2.14.0,,,,,,,,2.13.3,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"XmlConverter.toSAXSourceFromStream does not set
{code}
sfactory.setNamespaceAware(true);
{code}
",,matihost,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 11 05:59:15 UTC 2014,,,,,,,,,,,"0|i20ub3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Oct/14 05:59;njiang;Enable the setting in camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
HL7Decoder leaks memory,CAMEL-7888,12746103,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,christian.ohr,christian.ohr,06/Oct/14 10:59,10/Dec/14 13:06,14/Jul/23 05:49,11/Oct/14 07:08,2.12.0,2.13.0,2.14.0,,,,,,2.14.1,2.15.0,,,camel-hl7,,,,,,0,,,,,,,"Under constant load (i.e. Mina session never idles out), the HL7Decoder leaks memory. In fact, all received messages are appended to Mina's IOBuffer, which leads to OOME after some time.",,christian.ohr,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Oct/14 12:58;christian.ohr;CAMEL-7888.patch;https://issues.apache.org/jira/secure/attachment/12673083/CAMEL-7888.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 11 07:08:24 UTC 2014,,,,,,,Patch Available,,,,"0|i20tzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Oct/14 12:58;christian.ohr;Attached Patch. 
A new test verifies that the MINA buffer does not grow out of bounds.

Two more changes:
* I updated MINA to 2.0.8.
* The HL7MLLPEncoder now also accepts plain byte arrays (without re-converting them into a String and back into a byte array). This works better with marshal(hl7), which emits a byte array anyway.

The patch should work for both trunk and 2.14 branch.


;;;","11/Oct/14 07:08;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks Christian.;;;",,,,,,,,,,,,,,,,,,,,,,
Charset not correctly set from content-type,CAMEL-7886,12745439,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,benjamin.habegger,benjamin.habegger,02/Oct/14 08:25,09/Oct/14 08:16,14/Jul/23 05:49,09/Oct/14 08:16,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-http4,,,,,,0,,,,,,,"When a ""Content-Type"" header is explicitely set with charset attached before invoking the camel http4 component, the charset is not taken into account.

This is because ContentType.create is invoked with the complete Content-Type when in fact it expects a mediaType.

(see lines 414-416: camel-http4 version 2.14.0)
   if (contentTypeString != null) {
      contentType = ContentType.create(contentTypeString);
   }

For example, if header is set to ""application/json; charset=UTF-8"" the contentType returned by ContentType.create(contentTypeString) is null.

And therefore, further down (line 444)  charset is not extracted even though it has been specified.

",,benjamin.habegger,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 09 08:16:46 UTC 2014,,,,,,,,,,,"0|i20pv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/14 08:16;njiang;Applied the patch into master, camel-2.14.x , camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Timer - Restarting a timer endpoint may not trigger at expected time the first time,CAMEL-7885,12745191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/14 07:40,01/Oct/14 09:19,14/Jul/23 05:49,01/Oct/14 09:19,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-core,,,,,,0,,,,,,,"If you stop a timer route, and that route has an inflight exchange causing the stop route to force stop due timeout. Then that timer task is still running in the background.

And if you restart the timer route, then it will reuse the old timer instance, which may be still running, and therefore the first trigger time may not happen at the time you would expect.

For example from timer:foo?period=2s to trigger every 2s.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-10-01 07:40:08.0,,,,,,,,,,,"0|i20obb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty4-http does not work for HTTP POST requests on routingSlip,CAMEL-7884,12745174,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yaronab,yaronab,01/Oct/14 06:29,03/May/16 12:29,14/Jul/23 05:49,03/May/16 12:29,2.14.0,,,,,,,,2.17.2,2.18.0,,,camel-netty4-http,,,,,,1,,,,,,,"I tried to add the camel-netty4-http component to a proper working project that uses camel-netty-http.
HTTP GET requests are working properly but POST requests are not working.
It might be an issue in Netty but I could not find a solution to get it to work.
Here is the exception I see:
2014-10-01 09:12:18,012 DEBUG [042ase_1412143933559.data] [n.s.ehcache.store.disk.Segment]     fault removed 0 from heap
2014-10-01 09:12:18,012 DEBUG [042ase_1412143933559.data] [n.s.ehcache.store.disk.Segment]     fault added 0 on disk
2014-10-01 09:12:18,012 TRACE [pool-1-thread-1          ] [o.a.c.i.c.DefaultTypeConverter]     Converting io.netty.util.IllegalReferenceCountException -> java.lang.Throwable with value: {}
io.netty.util.IllegalReferenceCountException: refCnt: 0
	at io.netty.buffer.AbstractByteBuf.ensureAccessible(AbstractByteBuf.java:1187) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.AbstractByteBuf.checkReadableBytes(AbstractByteBuf.java:1170) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:676) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1461) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:40) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at org.apache.camel.component.netty4.http.NettyChannelBufferStreamCache.read(NettyChannelBufferStreamCache.java:69) ~[camel-netty4-http-2.14.0.jar:2.14.0]
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284) ~[na:1.8.0]
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326) ~[na:1.8.0]
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178) ~[na:1.8.0]
	at java.io.InputStreamReader.read(InputStreamReader.java:184) ~[na:1.8.0]
	at java.io.BufferedReader.fill(BufferedReader.java:161) ~[na:1.8.0]
	at java.io.BufferedReader.read1(BufferedReader.java:212) ~[na:1.8.0]
	at java.io.BufferedReader.read(BufferedReader.java:286) ~[na:1.8.0]
	at java.io.Reader.read(Reader.java:140) ~[na:1.8.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:304) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:290) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:351) ~[camel-core-2.14.0.jar:2.14.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1002) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:165) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.builder.ExpressionBuilder$41.evaluate(ExpressionBuilder.java:1011) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterBinding(MethodInfo.java:595) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:485) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:240) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:280) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:149) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:251) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:410) [camel-core-2.14.0.jar:2.14.0]",,amitr,antoine.dessaigne,davsclaus,njiang,yaronab,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Dec/14 12:57;amitr;Reproduce2.zip.001;https://issues.apache.org/jira/secure/attachment/12684638/Reproduce2.zip.001","02/Dec/14 12:57;amitr;Reproduce2.zip.002;https://issues.apache.org/jira/secure/attachment/12684639/Reproduce2.zip.002","18/Nov/14 18:11;amitr;bug-reproduce.zip;https://issues.apache.org/jira/secure/attachment/12682209/bug-reproduce.zip",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 03 12:29:17 UTC 2016,,,,,,,,,,,"0|i20o7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Oct/14 06:40;davsclaus;Can you tell more about your HTTP POST. Maybe you can provide the details how that request ""looks like"" eg its HTTP headers and body etc. We do have unit tests that works with HTTP POST so it works in general.;;;","01/Oct/14 07:14;yaronab;I got this exception on every POST request I issued using several HTTP clients (browser, Spring's RestTemplate) and also Camel's ProducerTemplate.
I'm using netty-http both as the HTTP server and also as a HTTP client (my app is a proxy service) and the exception is being thrown after the HTTP client response is received.
Please guide me if the original POST request is what you need or the request that camel-netty4-http issues?

thx;;;","01/Oct/14 07:53;yaronab;After further digging on the issue, I've now realized that it happens only when I use RoutingSlip.
I've just tried to change my route to use ""to()"" instead of ""routingSlip()"" and everything is properly working.
I updated the title of the bug to be more specific with these findings.;;;","02/Oct/14 13:52;yaronab;My latest finding is that the issue is not related to the RoutingSlip either but to the use of AsyncProcessor in my route.
I still could not figure how it is related but the same code worked properly with camel-netty-http.
Once I changed my code to be sync with a regular processor, everything got back to work.;;;","02/Oct/14 14:27;davsclaus;If you are able to zip together a small application or unit test that reproduces your bug, then you are welcome to attach that to this JIRA so we can use that to track down the bug.;;;","18/Nov/14 18:13;amitr;Hi Claus - 
I'm Yarons coworker, we've created a small app with a unit test that reproduces this issue, 
attached to this comment.

Thx,
Amit.;;;","19/Nov/14 04:09;njiang;I just ran the tests with camel-2.14.1-SNAPSHOT and camel-2.15-SNAPSHOT, all the tests are passed. After checking the change log, I think it may relate to the Fix of CAMEL-7894.;;;","19/Nov/14 11:15;amitr;Hi,
I've rerun the UT with the latest 2.14.1-SNAPSHOT version and it's not passing - issue persists...
I'm running with the following snapshots:
camel-netty4-2.14.1-20141119.032555-64
camel-netty4-http-2.14.1-20141119.032558-64

Thx,
Amit.
;;;","19/Nov/14 11:16;yaronab;see Amit last comment;;;","19/Nov/14 11:37;njiang;It looks like a spring version miss match.
When I changed the spring version to 4.0.7.release, the unit test passed even with Camel Netty 2.14.0.;;;","19/Nov/14 13:09;amitr;Yes, the problem was with spring version - once changed to 4.0.7-Release - the issue seems to be resolved.
Thx!;;;","02/Dec/14 12:53;yaronab;please see the following Amit's comment;;;","02/Dec/14 12:57;amitr;Hi, 
As previously reported - the problem was indeed resolved when running the unit test with spring 4.0.7-RELEASE - but unfortunately when trying to run it ""live"" with tomcat server I still got the same exception.

I'm attaching a zip (""Reproduce2.zip"") that includes a jar that can be executed from command-line, and contains another zip with the sources.
When running the jar it will load the camel route using spring boot.
in order to simulate the issue you need to send any POST message to http://localhost:8080 on your machine after executing command line.

Thx,
Amit.;;;","31/Dec/14 09:39;amitr;MIght be related to issue Camel-8187: 
https://issues.apache.org/jira/browse/CAMEL-8187;;;","03/May/16 12:13;davsclaus;Okay so the issue is that when you use async processor then netty will complete the http server request and deallocate its buffer, which you cannot read from afterwards when your thread wake up.

So either you need to convert the content to byte[] / string etc to not use netty's buffer anymore. Or we have to add some logic in NettyChannelBufferStreamCache to detect hand over the lifecycle of the buffer, or do a copy of the buffer (a copy will cause 2x memory usage);;;","03/May/16 12:29;davsclaus;Thanks for the test case. It works now with latest code.;;;",,,,,,,,
XSD decoding bad guess in Validator,CAMEL-7883,12745099,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bbonnet,bbonnet,30/Sep/14 22:34,21/Oct/14 08:40,14/Jul/23 05:49,20/Oct/14 02:45,2.13.2,2.14.0,,,,,,,2.13.3,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"Validator component does not take imported XSD encoding into account when validating XML. That may lead to validation errors if an imported XSD is ISO-8859-1 encoded and containing non ASCII caracters, even though that XSD declares its encoding correctly in its XML prolog.
",,bbonnet,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 21 08:40:03 UTC 2014,,,,,,,,,,,"0|i20nrj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Sep/14 22:47;githubbot;GitHub user bonnetb opened a pull request:

    https://github.com/apache/camel/pull/291

    CAMEL-7883 : Validator XSD decoding issue with non UTF-8 imported XSD

    Let SAX do a good guess for XSD encoding (it uses XSD prolog) instead of using a converter that may not fit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bonnetb/camel xsdBadDecoding

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/291.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #291
    
----
commit cd5ae15b21762513f8242429f734113c301b08f8
Author: Benjamin BONNET <benjamin.bonnet@m4x.org>
Date:   2014-09-30T22:36:43Z

    fix for CAMEL-7883

----
;;;","30/Sep/14 22:55;bbonnet;Hi,
when an imported XSD is decoded, Camel uses a converter defined in context. That converter involves a reader that will not take into account the XSD XML prolog. If that reader does not use the same encoding as one of the imported XSD, you may get into trouble while validating XML files.
Instead of providing the content of XSD as char stream, I think it is more appropriate to provide it as a binary stream and let Sax make a good guess about the XSD encoding.
I made a pull request on github with a unit test and a fix : see https://github.com/apache/camel/pull/291
Regards;;;","20/Oct/14 02:45;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Benjamin.;;;","21/Oct/14 08:38;githubbot;Github user bonnetb closed the pull request at:

    https://github.com/apache/camel/pull/291
;;;","21/Oct/14 08:40;bbonnet;Thank you Willem;;;",,,,,,,,,,,,,,,,,,,
camel-syslog's CamelSyslogTimestamp header is suddenly a GregorianCalendar,CAMEL-7882,12744919,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jhberges,jhberges,30/Sep/14 11:16,30/Nov/14 15:30,14/Jul/23 05:49,30/Nov/14 15:30,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-syslog,,,,,,0,,,,,,,"This is mostly to help others facing the same issue, as we just spent 4x3 hours figuring this out.

An app, that consumes syslog entries and forwards JMS (over OpenMQ), was upgraded from camel 2.13.0 to 2.14.0.
Afterwards many things broke upstream, which was masked by poor logging in some Glassfish servers (truncating stacktraces).

Turns out that the {{CamelSyslogTimestamp}} header was silently discarded, being a {{java.util.GregorianCalendar}} instance.
Forcing it into a {{java.util.Date}} before routing to the JMS endpoint restored service throughout the valuechain.

As I wrote; this is mostly a FYI to others :-).
But perhaps the documentation might reflect the lack of guaranteed conversion?","RHEL 2.6.32-431.20.3.el6.x86_64
Java 8",davsclaus,jhberges,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 30 15:30:32 UTC 2014,,,,,,,,,,,"0|i20mnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Nov/14 15:30;davsclaus;Ah yeah lets keep it as before, I changed it back to a java.util.Date;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-resetlet feature should include httpclient4 bundle,CAMEL-7881,12744853,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Sep/14 02:22,02/Jun/20 07:23,14/Jul/23 05:49,30/Sep/14 02:38,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,,,,,,,,0,,,,,,,"{code}
2014-09-29 16:26:41,670 | INFO  | FelixStartLevel  | restlet                          | org.restlet.engine.Engine         900 | 75 - org.restlet - 2.2.1.v20140506-1533 | Unable to register the helper org.restlet.ext.httpclient.HttpClientHelper
java.lang.NoClassDefFoundError: org/apache/http/params/HttpParams
	at java.lang.Class.getDeclaredConstructors0(Native Method)[:1.7.0_45]
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2493)[:1.7.0_45]
	at java.lang.Class.getConstructor0(Class.java:2803)[:1.7.0_45]
	at java.lang.Class.getConstructor(Class.java:1718)[:1.7.0_45]
	at org.restlet.engine.Engine.registerHelper(Engine.java:896)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.Engine.registerHelpers(Engine.java:928)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelper(Activator.java:96)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelper(Activator.java:78)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelpers(Activator.java:117)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.start(Activator.java:143)[75:org.restlet:2.2.1.v20140506-1533]
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:1977)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1895)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)[org.apache.felix.framework-4.0.3.jar:]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.ClassNotFoundException: org.apache.http.params.HttpParams not found by org.restlet.ext.httpclient [76]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1460)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)[:1.7.0_45]
	... 16 more
{code}",,acosentino,lucamaf,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 02 07:23:15 UTC 2020,,,,,,,,,,,"0|i20m9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Sep/14 02:38;njiang;Applied the patch into camel master,camel-2.14.x, camel-2.13.x and camel-2.12.x branches.;;;","02/Jun/20 06:43;lucamaf;I still see this issue:
{code:java}
19:29:52.001 [main] INFO org.restlet - Unable to register the helper org.restlet.ext.httpclient.HttpClientHelper
java.lang.NoClassDefFoundError: org/apache/http/conn/ClientConnectionManager{code}
when using camel-restlet with version 2.21.0.fuse-760027-redhat-00001;;;","02/Jun/20 07:23;acosentino;The error you posted is from a fuse build. Report to Red Hat. We don't release 2.21 anymore;;;",,,,,,,,,,,,,,,,,,,,,
Cannot use custom DataFormats in REST DSL,CAMEL-7880,12744774,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sohrab,sohrab,29/Sep/14 20:30,22/Feb/15 07:22,14/Jul/23 05:49,04/Dec/14 08:11,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,0,,,,,,,"See: http://camel.465427.n5.nabble.com/RestBindingProcessor-JSON-Data-Format-Config-td5757103.html

When using custom JSON data format in REST DSL, the service incorrectly rejects messages with request structure and accepts messages with response structure.

This is due to {{org.apache.camel.model.rest.RestBindingDefinition.createProcessor(RouteContext)}} looking up and configuring the same DataFormat object twice:

{code:java}
DataFormat json = context.resolveDataFormat(name); 
DataFormat outJson = context.resolveDataFormat(name); 
{code}",,davsclaus,jjathman,sohrab,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8389,,,,,,,,,"29/Sep/14 20:32;sohrab;camel-rest-dataformat-test.groovy;https://issues.apache.org/jira/secure/attachment/12671864/camel-rest-dataformat-test.groovy",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 22 07:22:55 UTC 2015,,,,,,,,,,,"0|i20lrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Sep/14 20:32;sohrab;Attached an integration test demonstrating the issue.;;;","03/Dec/14 20:01;davsclaus;Okay got a fix which is a little hack. I think we may need to introduce custom data formats must be configured in pairs, one for input and another for output.

But with the hack it works
>>> Status: HTTP/1.1 200 OK
>>> Body: [output:something];;;","04/Dec/14 08:08;davsclaus;Okay so the intention is that setting a custom data format refers only to its name, not to a pre configured instance from the registry. So I am adding that as a validation to fail if so.;;;","10/Dec/14 18:46;sohrab;Thanks for the fix, Claus.

http://camel.apache.org/custom-dataformat.html only mentions how to use custom data formats as a bean in the registry. I myself am not sure how this is going to work now that this validation has been added but is it worth adding the approach to documentation?;;;","19/Feb/15 00:24;jjathman;[~davsclaus] I'm still a little confused as to how to use a custom data format. Is it not possible to create a Spring bean customized data format and have that be used? Could you point me to any examples or documentation about how this works with the REST DSL? Thank you.;;;","19/Feb/15 11:11;davsclaus;You can configure data formats, using the dataFormatProperty in XML also

For example
{code}
  <restConfiguration component=""servlet"" bindingMode=""json"" contextPath=""/camel-example-servlet-rest-blueprint/rest""
                       port=""8181"">
      <dataFormatProperty key=""prettyPrint"" value=""true""/>
    </restConfiguration>
{code}

You can have as many dataFormatProperty you want. And you can prefix with json.in xml.in etc, as in the documentation to have different config.

The rest-dsl requires to instantiate and handle the lifecycle of the used data format, hence not intended to use an existing instance.;;;","19/Feb/15 15:23;jjathman;Thank you that is helpful. I'm trying to set the {{FAIL_ON_UNKNOWN_PROPERTIES}} of the ObjectMapper instance contained within the JacksonDataFormat. I'm not quite sure how to use the dataFormatProperty, could you point me to how this could be done? In code I would do something like this:

{code:java}
JacksonDataFormat dataFormat = new JacksonDataFormat();
dataFormat.getObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
{code}

Would I do something like {{json.in.objectMapper.deserializationFeature}} ?;;;","22/Feb/15 07:22;davsclaus;Logged CAMEL-8389 to make this easier to configure, which would make it possible for rest-dsl as well.;;;","22/Feb/15 07:22;davsclaus;Yeah Joseph, we should make this better. I have logged that ticket.;;;",,,,,,,,,,,,,,,
interceptFrom doesn't work when using rest dsl,CAMEL-7879,12744603,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,litom,litom,29/Sep/14 07:47,30/Nov/14 14:08,14/Jul/23 05:49,30/Nov/14 14:08,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-restlet,,,,,,4,,,,,,,"I'm using rest dsl definition with netty-http component.
I defined interceptFrom with/without url, and the code doesn't seems to run at all.
The same interceptFrom  works just fine with ""from"" rout definition.",,litom,yaronab,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-29 07:47:54.0,,,,,,,,,,,"0|i20kqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GroupIterator should respect the exchange's CHARSET_NAME property.,CAMEL-7876,12744493,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,tellisnz,tellisnz,27/Sep/14 16:24,28/Sep/14 09:08,14/Jul/23 05:49,28/Sep/14 03:32,2.14.0,,,,,,,,2.15.0,,,,camel-core,,,,,,0,,,,,,,"Line 141 of GroupIterator calls toString on it's ByteArrayOutputStream, thereby utilising the default encoding set for the JVM.

This can cause issues when say splitting an exchange's body using token/groups with a different encoding from that of the JVM's default.",,githubbot,njiang,tellisnz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 28 09:08:02 UTC 2014,,,,,,,Patch Available,,,,"0|i20k2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/14 16:34;githubbot;GitHub user tellisnz opened a pull request:

    https://github.com/apache/camel/pull/286

    CAMEL-7876 ensure GroupIterator uses the exchange's CHARSET_NAME property

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tellisnz/camel CAMEL-7876

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/286.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #286
    
----
commit 0986833fa6966c2e85b25be80aa3097409e18dfa
Author: Tom Ellis <tellisnz@gmail.com>
Date:   2014-09-27T16:27:33Z

    CAMEL-7876 ensure GroupIterator uses the exchange's CHARSET_NAME property

----
;;;","28/Sep/14 03:32;njiang;Merged the patch into camel master branch, I also add the old construction method back for backward compatibility. ;;;","28/Sep/14 09:08;githubbot;Github user tellisnz closed the pull request at:

    https://github.com/apache/camel/pull/286
;;;",,,,,,,,,,,,,,,,,,,,,
json DataFormat: The prettyPrint option does not work as expected,CAMEL-7874,12744488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,davidkarlsen@gmail.com,davidkarlsen@gmail.com,27/Sep/14 15:38,27/Sep/14 20:32,14/Jul/23 05:49,27/Sep/14 20:20,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-jackson,,,,,,0,jackson,json,prettyprint,,,,See http://camel.465427.n5.nabble.com/Problems-prettyPrinting-JSON-after-camel-2-14-0-upgrade-td5756738.html#a5757104 for a background.,,bvahdat,davidkarlsen@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7877,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 27 20:20:39 UTC 2014,,,,,,,,,,,"0|i20k1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/14 20:20;bvahdat;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
[camel-barcode] failed to create AZTEC barcode ,CAMEL-7871,12744472,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ssogabe,ssogabe,27/Sep/14 10:59,29/Sep/14 05:53,14/Jul/23 05:49,27/Sep/14 12:16,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-barcode,,,,,,0,barcode,,,,,,"I'm testing camel-barcode  to create AZTEC barcode format with the following spring xml.

{code:xml}
    <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

        <dataFormats>
            <barcode id=""AZTEC"" width=""200"" height=""200"" imageType=""JPG"" barcodeFormat=""AZTEC""/>
        </dataFormats>

        <route>
            <from uri=""direct:AZTEC""/>
            <marshal ref=""AZTEC""/>
            <to uri=""file:target/out?fileName=aztec.jpg""/>
        </route>
    </camelContext>
{code}

But I get the following stack trace.

{code}
Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.lang.ClassCastException: com.google.zxing.qrcode.decoder.ErrorCorrectionLevel cannot be cast to java.lang.Number
	at com.google.zxing.aztec.AztecWriter.encode(AztecWriter.java:41)
	at com.google.zxing.MultiFormatWriter.encode(MultiFormatWriter.java:94)
	at org.apache.camel.dataformat.barcode.BarcodeDataFormat.printImage(BarcodeDataFormat.java:231)
	at org.apache.camel.dataformat.barcode.BarcodeDataFormat.marshal(BarcodeDataFormat.java:162)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:81)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:74)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at org.apache.camel.dataformat.barcode.BarcodeFormatTest.tesAZTEC(BarcodeFormatTest.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:72)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:81)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:254)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:149)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}","Spring
camel-barcode",davsclaus,githubbot,ssogabe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 29 05:53:10 UTC 2014,,,,,,,,,,,"0|i20jxz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/14 11:19;davsclaus;Do this get fixed by one of your PRs already which has been merged?;;;","27/Sep/14 11:40;githubbot;GitHub user ssogabe opened a pull request:

    https://github.com/apache/camel/pull/285

    CAMEL-7871 configure ERROR_CORRECTION only if barcode format is QR code

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssogabe/camel CAMEL-7871

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/285.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #285
    
----
commit 29d87acb693e2545bb9ec0791880b5a5a168880d
Author: Seiji Sogabe <s.sogabe@gmail.com>
Date:   2014-09-27T20:36:48Z

    CAMEL-7871 configure ERROR_CORRECTION only if barcode format is QR code

----
;;;","27/Sep/14 11:46;ssogabe;No, new PR will fix this problem.
AZTEC accepts only integer as an error correction, not  ErrorCorrectionLevel object.   ;;;","27/Sep/14 12:16;davsclaus;Thanks;;;","27/Sep/14 12:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/285
;;;","29/Sep/14 02:43;githubbot;GitHub user ssogabe opened a pull request:

    https://github.com/apache/camel/pull/288

    CAMEL-7871 fixed test error.

    previous my commit broke  junit test.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssogabe/camel CAMEL-7871

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/288.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #288
    
----
commit 6556116b9955d5d057a60693173e00599cb35651
Author: Seiji Sogabe <s.sogabe@gmail.com>
Date:   2014-09-29T02:41:01Z

    CAMEL-7871 fixed test error.
    
      - fixed testOptimizeHintsForDataMatrix and testReOptimizeHints methods.

----
;;;","29/Sep/14 05:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/288
;;;",,,,,,,,,,,,,,,,,
[camel-barcode] Writer/Reader hints should be re-optimized when setBarcodeFormat method called.,CAMEL-7870,12744468,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ssogabe,ssogabe,27/Sep/14 10:07,27/Sep/14 11:19,14/Jul/23 05:49,27/Sep/14 11:17,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-barcode,,,,,,0,barcode,,,,,,"BarcodeDataFormat#setBarcodeDataFormat() should optimize writer/reader hints such like setBarcodeImageType().

see https://github.com/apache/camel/pull/284",camel-barcode,davsclaus,githubbot,ssogabe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 27 11:17:55 UTC 2014,,,,,,,Patch Available,,,,"0|i20jx3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/14 10:16;githubbot;GitHub user ssogabe opened a pull request:

    https://github.com/apache/camel/pull/284

    CAMEL-7870 re-optimize hints when setBarcodeFormat called

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssogabe/camel CAMEL-7870

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/284.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #284
    
----
commit 3ac01178d181cc9cde0ef4b8d5ddae4e2678845e
Author: Seiji Sogabe <s.sogabe@gmail.com>
Date:   2014-09-27T19:13:28Z

    CAMEL-7870 re-optimize hints when setBarcodeFormat called

----
;;;","27/Sep/14 11:15;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/284
;;;","27/Sep/14 11:17;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,
endpointProperty does not work (restConfiguration - jetty),CAMEL-7869,12744464,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kuro,kuro,27/Sep/14 08:35,27/Sep/14 11:20,14/Jul/23 05:49,27/Sep/14 11:20,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-jetty,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/bug-restConfiguration-jetty-endpointProperty-td5757065.html,,davidkarlsen@gmail.com,kuro,,,,,,,,,,,,,,,,,,,,,,CAMEL-7868,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-27 08:35:14.0,,,,,,,,,,,"0|i20jw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong concatenation of parameters in JettyHttpComponent,CAMEL-7868,12744463,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davidkarlsen@gmail.com,davidkarlsen@gmail.com,27/Sep/14 08:29,27/Sep/14 11:18,14/Jul/23 05:49,27/Sep/14 11:18,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-jetty,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/bug-restConfiguration-jetty-endpointProperty-td5757065.html for details.,,davidkarlsen@gmail.com,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,CAMEL-7869,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 27 11:18:31 UTC 2014,,,,,,,Patch Available,,,,"0|i20jvz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Sep/14 08:31;githubbot;GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/283

    CAMEL-7868: Fix concatenation of params to url

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7868

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/283.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #283
    
----
commit 0aaa3ee2a57093588b42c1abd0151e77608c2115
Author: david <david@davidkarlsen.com>
Date:   2014-09-27T08:30:49Z

    CAMEL-7868: Fix concatenation of params to url

----
;;;","27/Sep/14 11:15;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/283
;;;","27/Sep/14 11:18;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,
NullPointerException when using CXF endpoint to enrich,CAMEL-7867,12744325,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhudlow,dhudlow,26/Sep/14 16:17,09/Oct/14 02:27,14/Jul/23 05:49,09/Oct/14 02:27,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-cxf,,,,,,0,,,,,,,"When using Spring application context file to enrich a CXF message with another CXF endpoint, I get a NullPointerException whenever a message comes in. If I route with a <to> instead of <enrich>, it works fine.

    <cxf:cxfEndpoint id=""producerEndpoint""
                     address=""/Request/""
                     serviceClass=""com.service.ClassName""
                     wsdlURL=""/Service.wsdl"" >
    </cxf:cxfEndpoint>

    <cxf:cxfEndpoint id=""enrichEndpoint""
                     address=""http://localhost:8082/Request/""
                     serviceClass=""com.service.ClassName""
                     wsdlURL=""/Service.wsdl"">
    </cxf:cxfEndpoint>

...

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from ref=""producerEndpoint"" />
            <enrich ref=""enrichEndpoint"" />
            <to ref=""finalEndpoint"" />
        </route>
    </camelContext>

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.prepareRequest(CxfProducer.java:190)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:107)
	at org.apache.camel.processor.Enricher.process(Enricher.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:136)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:243)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:197)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:149)
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:171)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:206)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:696)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1568)
	at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:164)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1539)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:524)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:568)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1110)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:453)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1044)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:199)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:109)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:459)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:279)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229)
	at org.eclipse.jetty.io.AbstractConnection$1.run(AbstractConnection.java:505)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:594)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:525)
	at java.lang.Thread.run(Thread.java:745)
[              qtp1470360717-16] PhaseInterceptorChain          WARN  Application {http://gl.services.csw}CswPortService#{http://gl.services.csw}getRecords has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: NullPointerException
	at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:230)
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:208)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:142)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:77)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:243)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:197)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:149)
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:171)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:206)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:696)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1568)
	at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:164)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1539)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:524)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:568)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1110)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:453)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1044)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:199)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:109)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:459)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:279)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229)
	at org.eclipse.jetty.io.AbstractConnection$1.run(AbstractConnection.java:505)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:594)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:525)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.prepareRequest(CxfProducer.java:190)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:107)
	at org.apache.camel.processor.Enricher.process(Enricher.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:136)
	... 41 more",Maven project on RHEL,dhudlow,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 29 01:27:58 UTC 2014,,,,,,,,,,,"0|i20j1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Sep/14 01:27;njiang;The issue is caused when you use enrich reference a endpoint, the endpoint may not be started as using the uri.The work around is using uri=""cxf:bean:enrichEndpoint"" instead of ref=enrichEndpoint.
{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
<route>
<from ref=""producerEndpoint"" />
<enrich uri=""cxf:bean:enrichEndpoint"" />
<to ref=""finalEndpoint"" />
</route>
</camelContext>
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
barcodeFormat is always QR CODE,CAMEL-7866,12744318,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ssogabe,ssogabe,26/Sep/14 15:30,27/Sep/14 11:20,14/Jul/23 05:49,26/Sep/14 15:53,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-barcode,,,,,,0,barcode,,,,,,"I'm testing the camel-barcode component with the following Spring XML.

{code:xml}
    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <dataFormats>
            <barcode id=""QR_CODE"" width=""200"" height=""200"" imageType=""JPG"" barcodeFormat=""QR_CODE""/>
            <barcode id=""PDF_417"" width=""200"" height=""200"" imageType=""JPG"" barcodeFormat=""PDF_417""/>
        </dataFormats>

        <route>
            <from uri=""direct:QR_CODE""/>
            <marshal ref=""QR_CODE""/>
            <to uri=""file:target/out?fileName=qr_code.jpg""/>
        </route>
    
        <route>
            <from uri=""direct:PDF_417""/>
            <marshal ref=""PDF_417""/>
            <to uri=""file:target/out?fileName=pdf_417.jpg""/>
        </route>    
    </camelContext>
{code}


But pdf_417.jpg seems to be QR CODE, not PDF 417.",Spring XML,davsclaus,ssogabe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Sep/14 15:31;ssogabe;pdf_417.jpg;https://issues.apache.org/jira/secure/attachment/12671468/pdf_417.jpg","26/Sep/14 15:31;ssogabe;qr_code.jpg;https://issues.apache.org/jira/secure/attachment/12671469/qr_code.jpg",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 26 15:53:18 UTC 2014,,,,,,,Patch Available,,,,"0|i20j07:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Sep/14 15:43;ssogabe;See https://github.com/apache/camel/pull/282;;;","26/Sep/14 15:53;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,
camel-cxf producer HttpAPI should not send the message body when using DELETE method,CAMEL-7856,12743708,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Sep/14 05:41,10/Apr/15 12:51,14/Jul/23 05:49,24/Sep/14 05:45,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-cxf,,,,,,0,,,,,,,"Here is the [discussion|http://stackoverflow.com/questions/299628/is-an-entity-body-allowed-for-an-http-delete-request] in stackoverflow.

",,amarkevich,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 10 12:51:20 UTC 2015,,,,,,,,,,,"0|i20fbz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Sep/14 05:45;njiang;Applied the patch into camel master, camel-2.14.x, camel-2.13.x and  camel-2.12.x.;;;","10/Apr/15 12:51;amarkevich;Camel 2.13.4
{noformat}
.setBody().constant(""123"")
.setHeader(org.apache.camel.Exchange.HTTP_PATH, simple(""${header.newCustomer}""))
.setHeader(org.apache.camel.Exchange.HTTP_METHOD, constant(""DELETE""))
.inOut(""cxfrs://bean://cCXFRS_4"")
{noformat}
cause
{noformat}
org.apache.cxf.interceptor.Fault: .Problem with writing the request message, class : class java.lang.String, ContentType : application/xml.
	at org.apache.cxf.jaxrs.client.WebClient$BodyWriter.doWriteBody(WebClient.java:1197)
	at org.apache.cxf.jaxrs.client.AbstractClient$AbstractBodyWriter.handleMessage(AbstractClient.java:1058)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)
	at org.apache.cxf.jaxrs.client.AbstractClient.doRunInterceptorChain(AbstractClient.java:635)
	at org.apache.cxf.jaxrs.client.WebClient.doChainedInvocation(WebClient.java:1067)
	at org.apache.cxf.jaxrs.client.WebClient.doInvoke(WebClient.java:878)
	at org.apache.cxf.jaxrs.client.WebClient.doInvoke(WebClient.java:852)
	at org.apache.cxf.jaxrs.client.WebClient.invoke(WebClient.java:410)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(CxfRsProducer.java:220)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:92)
...
Caused by: java.net.ProtocolException: HTTP method DELETE doesn't support output
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1082)
	at org.apache.cxf.transport.http.URLConnectionHTTPConduit$URLConnectionWrappedOutputStream.setupWrappedStream(URLConnectionHTTPConduit.java:174)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleHeadersTrustCaching(HTTPConduit.java:1289)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.onFirstWrite(HTTPConduit.java:1245)
	at org.apache.cxf.transport.http.URLConnectionHTTPConduit$URLConnectionWrappedOutputStream.onFirstWrite(URLConnectionHTTPConduit.java:201)
	at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:47)
	at org.apache.cxf.io.AbstractThresholdOutputStream.write(AbstractThresholdOutputStream.java:69)
	at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:60)
	at org.apache.cxf.io.CacheAndWriteOutputStream.write(CacheAndWriteOutputStream.java:89)
	at org.apache.cxf.jaxrs.provider.PrimitiveTextProvider.writeTo(PrimitiveTextProvider.java:77)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.writeMessageBody(JAXRSUtils.java:1299)
	at org.apache.cxf.jaxrs.client.AbstractClient.writeBody(AbstractClient.java:436)
	... 27 more
{noformat};;;",,,,,,,,,,,,,,,,,,,,,,
"If you suspend a JMS route that is stopped, calling resume on it does not work and reports no error",CAMEL-7855,12743636,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mahoney,mahoney,23/Sep/14 22:04,27/Sep/14 13:29,14/Jul/23 05:49,27/Sep/14 12:16,2.14.0,,,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-jms,,,,,,0,,,,,,,"If a route that consumes from JMS is in state Stopped, and first Suspend and then Resume are called upon it, the route reports itself as being in state Started. However, it is not actually consuming anything from the endpoint.",All,davsclaus,mahoney,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Sep/14 22:08;mahoney;RouteLifecycleTest.java;https://issues.apache.org/jira/secure/attachment/12670825/RouteLifecycleTest.java","23/Sep/14 22:08;mahoney;pom.xml;https://issues.apache.org/jira/secure/attachment/12670826/pom.xml",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 27 13:29:57 UTC 2014,,,,,,,,,,,"0|i20evr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Sep/14 22:08;mahoney;Failing JUnit Test case & associated pom - requires Awaitlity & Assertj.;;;","23/Sep/14 22:13;mahoney;I can see two fairly simple solutions:

* Throw an exception if a user tries to suspend a Stopped route
* Do nothing if a user tries to suspend a Stopped route - leave it in state Stopped

The second seems more consistent with current behaviour.;;;","27/Sep/14 11:54;davsclaus;Thanks for reporting, the issue is that you should start it first, but I am fixing this so the component handles this as well.

Its not really the suspension that is the problem, is the resume. And only in that combination you have

- route auto start = false
- call suspend first
- call resume

;;;","27/Sep/14 13:29;mahoney;Understood and thanks - my view would be that if that if the path
* route auto start = false
* call suspend first
* call resume
is illegal then an exception should be thrown to enforce the invariant.

I'm a bit concerned that the fix is purely aimed at the JMS component. ServiceSupport still allows a SuspendableService to go from Stopped -> suspend() -> Suspended -> resume() -> Started without ever calling doStart(), which means the logic ""if never started, initialise"" has to be done in every subclass of ServiceSupport - so any knew component may have the same bug.;;;",,,,,,,,,,,,,,,,,,,,
camel-msv component cannot be resolved in OSGi,CAMEL-7852,12743492,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Sep/14 10:19,23/Sep/14 12:39,14/Jul/23 05:49,23/Sep/14 12:39,2.12.4,2.13.2,2.14.0,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-msv,,,,,,0,,,,,,,"{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: msv://META-INF/relexng/address-book.rng due to: No component found with scheme: msv
at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:537)
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 23 12:39:47 UTC 2014,,,,,,,,,,,"0|i20dzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Sep/14 12:39;njiang;Applied the patch into camel master, camel-2.14.x, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Decrypting properties via Jasypt outside of <camelContext>,CAMEL-7849,12743265,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,camelguy,camelguy,22/Sep/14 17:43,11/Apr/15 20:08,14/Jul/23 05:49,10/Apr/15 02:14,2.13.2,2.14.0,,,,,,,2.14.3,2.15.2,2.16.0,,,,,,,,0,,,,,,,"{noformat}
File default.properties contains an entry like: key=ENC(..)

The following Camel Spring DSL snippet decrypts the 
property value inside <camelContext> via {{key}} but does 
not decrypt it outside of the <camelContext> via ${key}:

<bean id=""jasypt"" class=""org.apache.camel.component.jasypt.JasyptPropertiesParser"">
    <property name=""password"" value=""sysenv:PROPERTIES_KEY""/>
</bean>

<bean id=""bridgePropertyPlaceholder"" class=
  ""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
  <property name=""locations"" >
  <list>
    <value>classpath:default.properties</value>
  </list></property>
  <property name='parser' ref='jasypt'/>
</bean>

In order to get ${} to decrypt, first I remove all of the above. 
Then I add jasypt dependencies to pom.xml:

<dependency>
  <groupId>org.jasypt</groupId>
  <artifactId>jasypt</artifactId>
  <classifier>lite</classifier>
  <version>1.9.2</version>
</dependency>

 <dependency>
  <groupId>org.jasypt</groupId>
  <artifactId>jasypt-spring3</artifactId>
  <version>1.9.2</version>
 </dependency> 

And add the following to Camel Spring DSL:

<bean id=""environmentVariablesConfiguration""
     class=""org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig"">
   <property name=""algorithm"" value=""PBEWithMD5AndDES"" />
   <property name=""passwordEnvName"" value=""PROPERTIES_KEY"" />
 </bean>
 <bean id=""configurationEncryptor""
     class=""org.jasypt.encryption.pbe.StandardPBEStringEncryptor"">
   <property name=""config"" ref=""environmentVariablesConfiguration"" />
</bean>
<bean id=""propertyConfigurer"" class=
  'org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer'>
 <constructor-arg ref=""configurationEncryptor""/>
   <property name=""locations"" >
  <list>
    <value>classpath:default.properties</value>
  </list></property>
</bean>
<bean id=""jasypt"" class=
  ""org.apache.camel.component.jasypt.JasyptPropertiesParser"">
    <property name=""password"" value=""sysenv:PROPERTIES_KEY""/>
</bean>

<!-- And inside the camelContext... -->

<camelContext xmlns=""http://camel.apache.org/schema/spring"">

<propertyPlaceholder id=""properties""
 propertiesParserRef=""jasypt"" 
 location=""classpath:default.properties""/> 

This is the only solution that I could discover. Using BridgePropertyPlaceholder 
didn't work. <propertyPlaceholder> must be used inside <camelContext>.
{noformat}",,camelguy,njiang,wesssel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 10 02:14:42 UTC 2015,,,,,,,,,,,"0|i20ck7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Sep/14 02:18;njiang;As the Spring doesn't  provide the nice parser API for camel to use, we end up to implement our own property component to handle the same use case as we meet in spring. BridgePropertyPlaceholderConfigurer just work as the org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer, they are just injected into Spring as a customer configure parser.  Because they don't know each other, it is not surprise me that they cannot work together.
;;;","23/Sep/14 02:48;camelguy;The Camel documentation for Jasypt reads like the examples work for both ${} and {}. It took me about 24 solid working hours to figure this out. This could just be a documentation problem. However, the downside is the additional CPU/memory overhead caused by loading the same .properties files twice. In my code, I load two properties files. Not a huge problem. The real problem is that this isn't as easy as it could be.

My use case involves restlet realms. I want to encrypt user passwords. I also want to encrypt JDBC passwords. Therefore, I very much need ${} to work.;;;","10/Dec/14 16:52;wesssel;Did you also run this Camel route inside an osgi container? I'm trying to run it in JBoss Fuse 6.1.0 but am getting the following error:

Error creating bean with name 'propertyConfigurer' defined in URL [bundle://325.0:0/META-INF/spring/camel-context-dev.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.jasypt.encryption.StringEncryptor]: Could not convert constructor argument value of type [org.jasypt.encryption.pbe.StandardPBEStringEncryptor] to required type [org.jasypt.encryption.StringEncryptor]: Failed to convert value of type 'org.jasypt.encryption.pbe.StandardPBEStringEncryptor' to required type 'org.jasypt.encryption.StringEncryptor'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.jasypt.encryption.pbe.StandardPBEStringEncryptor] to required type [org.jasypt.encryption.StringEncryptor]: no matching editors or conversion strategy found
Related cause: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'propertyConfigurer' defined in URL [bundle://325.0:0/META-INF/spring/camel-context-dev.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.jasypt.util.text.TextEncryptor]: Could not convert constructor argument value of type [org.jasypt.encryption.pbe.StandardPBEStringEncryptor] to required type [org.jasypt.util.text.TextEncryptor]: Failed to convert value of type 'org.jasypt.encryption.pbe.StandardPBEStringEncryptor' to required type 'org.jasypt.util.text.TextEncryptor'; nested exception is java.lang.IllegalStateException: Cannot convert value of type [org.jasypt.encryption.pbe.StandardPBEStringEncryptor] to required type [org.jasypt.util.text.TextEncryptor]: no matching editors or conversion strategy found


If so, do you know how to fix this?

Works fine when running mvn camel:run from the commandline. Using Camel version 2.12.0-redhat and jasypt-spring31 version 1.9.2;;;","11/Dec/14 02:56;camelguy;Was not using OSGI container.;;;","09/Apr/15 13:33;njiang;After writing a simple test case, I found I made a mistake that BridgePropertyPlaceholderConfigurer doesn't know anything about the palceholder outside of the camel context. It turns out the BridgePropertyPlaceholderConfigurer doesn't override the method of String resolvePlaceholder(String placeholder, Properties props) to apply the parser setting of the BridgePropertyPlaceholderConfigurer. 

I will commit a quick fix of it shortly.
;;;","09/Apr/15 13:59;wesssel;This is the same behavior I am seeing. Camel 2.12.0;;;","09/Apr/15 17:38;camelguy;That's great news. How long until 2.15.2 is released?;;;","10/Apr/15 02:14;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,
Avoid using InputStreamEntity for byte[] input,CAMEL-7842,12742952,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,graben,graben,20/Sep/14 14:02,22/Sep/14 08:23,14/Jul/23 05:49,22/Sep/14 08:23,2.14.0,,,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-http4,,,,,,0,,,,,,,"Sending byte[] input via http in some circumstances causes ugly NonRepeatableEntityException because of the internal usage of InputStreamEntity in the HttpEntityConverter which is not repeatable. The usage of ByteArrayEntity seems more resonable for this input.

A workaround is to explicitly convertbodyto string but this is taken with care because of encoding when creating string and StringEntity later on!",,graben,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 22 08:23:45 UTC 2014,,,,,,,,,,,"0|i20ao7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Sep/14 08:23;njiang;Applied the patch into master, camel-2.14.x, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Xpath is not namespace aware in choice,CAMEL-7839,12742694,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,OHolzma,OHolzma,19/Sep/14 10:21,22/Sep/14 08:02,14/Jul/23 05:49,22/Sep/14 08:02,2.14.0,,,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-core,,,,,,0,,,,,,,"I have a route (XML definition) containing a choice based on xpath expressions. The xpath expressions are using custom namespaces. After migration from camel 2.13.2 to camel 2.14.0 the namespaces are not registered to the XpathExpression and XPathBuilder anymore.

XPath in ""setProperty"" definitions referencing the same namespaces still work fine.",,davsclaus,njiang,OHolzma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/14 16:38;OHolzma;test.zip;https://issues.apache.org/jira/secure/attachment/12670299/test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 22 08:02:59 UTC 2014,,,,,,,,,,,"0|i2090f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Sep/14 09:19;davsclaus;Can you tell more about your app, and maybe provided a sample project that demonstrates this. Are you using spring or blueprint etc.;;;","21/Sep/14 16:38;OHolzma;The test in the attached project works with camel 2.13.2, but it fails with 2.14.0.

It is based on spring and uses an imported route context like my real project is also doing. When the route context is included in the camel-context xml file (like in /camel/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/xpathFilterWithNamespaceOnRouteContext.xml) the namespaces are registered correct and the test succeeds. ;;;","22/Sep/14 04:06;njiang;It looks like the error is cause by the recent change of  CAMEL-7562.
It cause the route context clone doesn't pick up the right ExpressionNode for copying the namespaces.
I will commit a quick fix for it shortly.
;;;","22/Sep/14 08:02;njiang;Apply the patch into camel master, camel-2.14.x, camel-2.13.x and camel-2.12.x.;;;",,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException when creating dynamic routes,CAMEL-7836,12742483,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mattnathan,mattnathan,18/Sep/14 15:37,21/Apr/15 11:36,14/Jul/23 05:49,21/Sep/14 09:24,2.13.1,,,,,,,,2.13.3,2.14.1,2.15.0,,camel-core,,,,,,0,,,,,,,"There is a (small) chance of ConcurrentModificationException when creating routes dynamically.

{noformat}
java.util.ConcurrentModificationException
  at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373)
  at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:384)
  at java.util.AbstractCollection.toArray(AbstractCollection.java:124)
  at java.util.ArrayList.&lt;init&gt;(ArrayList.java:131)
  at org.apache.camel.impl.DefaultCamelContext.getRoutes(DefaultCamelContext.java:650)
  at org.apache.camel.impl.DefaultCamelContext.getRoute(DefaultCamelContext.java:655)
{noformat}

The cause is that if you happen to be calling {{getRoute}} at the same time you are creating a new route then the internals of {{new ArrayList}} call {{collection.toArray}} which throws the error.",,mattnathan,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8673,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-18 15:37:13.0,,,,,,,,,,,"0|i207qf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RestLetHeaderFilterStrategy should filter the header of ""Transfer-Encoding""",CAMEL-7830,12742027,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/14 02:48,17/Sep/14 05:10,14/Jul/23 05:49,17/Sep/14 05:10,2.13.2,,,,,,,,2.13.3,2.14.1,2.15.0,,camel-restlet,,,,,,0,,,,,,,"As we don't set the transfer_encoding protocol header for the restlet service, we need to remove the transfer_encoding header which could let the client wait forever.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 17 05:10:06 UTC 2014,,,,,,,,,,,"0|i20507:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Sep/14 05:10;njiang;Applied the patch into master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Olingo2 component should handle 200 OK responses from OData servers for PUT method,CAMEL-7829,12741902,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Sep/14 19:45,16/Sep/14 20:50,14/Jul/23 05:49,16/Sep/14 20:50,2.14.0,,,,,,,,2.14.1,2.15.0,,,,,,,,,0,camel-olingo2,odata2,olgino2,,,,"Some OData servers, like the JBoss Data Virtualization server based on OData4J library respond with HTTP 200 OK instead of 204 No Content for PUT methods. 
The component needs to be able to handle this scenario. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 16 20:50:43 UTC 2014,,,,,,,,,,,"0|i2049b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Sep/14 20:50;dhirajsb;Also add support for handling updated resources for properties, property values, complex properties, and single and multiple links for PATCH and MERGE requests. Some OData servers may respond with an updated resource value for these operations. Some servers may also respond with an updated value for properties for PUT requests. ;;;","16/Sep/14 20:50;dhirajsb;Commit pushed to master and camel-2.14.x

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=3bafd8bfe1efabeb9b44513b26446cd7236c02b6;;;",,,,,,,,,,,,,,,,,,,,,,
"Olingo2 component sets incorrect value for ""id"" element in create entry endpoint",CAMEL-7826,12741663,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Sep/14 03:29,16/Sep/14 04:56,14/Jul/23 05:49,16/Sep/14 03:39,2.14.0,,,,,,,,2.14.1,2.15.0,,,,,,,,,0,camel-olingo2,odata,odata2,olingo2,,,"The serviceRoot property is not set correctly to the OData base URI when creating the EntityProviderWriteProperties, which causes the generated links in body to be incorrect. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 16 03:39:23 UTC 2014,,,,,,,,,,,"0|i202sn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Sep/14 03:39;dhirajsb;Fix pushed to master and merged into camel-2.14.x

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=0d94bfe0c92a93d0a097fc77967385f2afea60a4;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel manual throws some errors by opening in Safari or Firefox,CAMEL-7824,12741502,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,15/Sep/14 15:04,19/Sep/14 11:32,14/Jul/23 05:49,19/Sep/14 11:32,2.14.0,,,,,,,,2.14.1,2.15.0,,,website,,,,,,0,,,,,,,"In Safari and Firefox, I got some errors by opening the Camel manual: ""SyntaxHighlighter: Can't find brush for: py""",,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 19 11:32:11 UTC 2014,,,,,,,,,,,"0|i201uf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Sep/14 11:45;njiang;I just updated the [page|https://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages+Context] to remove the py brush.  ;;;","19/Sep/14 11:32;njiang;I just checked the generated html file, the error is gone.;;;",,,,,,,,,,,,,,,,,,,,,,
Feature camel-spring-redis is failing,CAMEL-7823,12741495,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,muellerc,muellerc,15/Sep/14 14:45,23/Sep/14 20:31,14/Jul/23 05:49,23/Sep/14 20:31,2.14.0,,,,,,,,2.15.0,,,,camel-spring-redis,,,,,,0,,,,,,,"Installing feature camel-spring-redis is failing:
{noformat}
features:install camel-spring-redis
Error executing command: Could not start bundle mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE in feature(s) camel-spring-redis-2.14.0: Unresolved constraint in bundle org.springframework.data.redis [171]: Unable to resolve 171.0: missing requirement [171.0] osgi.wiring.package; (&(osgi.wiring.package=org.springframework.aop.framework)(version>=3.2.9)(!(version>=4.0.5)))
{noformat}

Spring AOP is in the spring-aspects feature. However, the import range is [3.2.4,4.0.5) and will not be satisfied in Karaf 2.3.7:
{noformat}
karaf@root> features:list | grep spring-aspects
[uninstalled] [3.0.7.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.0.x AOP support
[uninstalled] [3.1.4.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.1.x AOP support
[uninstalled] [3.2.4.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.2.x AOP support
[uninstalled] [4.0.5.RELEASE_1] spring-aspects                          karaf-2.3.7             Spring 4.0.x AOP support
{noformat}",,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 23 20:30:49 UTC 2014,,,,,,,,,,,"0|i201sv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Sep/14 00:54;njiang;I already sent a [PR|https://github.com/spring-projects/spring-data-redis/pull/103] to spring data redis. ;;;","23/Sep/14 20:30;muellerc;It's now working with Karaf 2.4.0 and Camel 2.15-SNAPSHOT:
{noformat}
christians-mbp:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.4.0)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.15-SNAPSHOT
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.15-SNAPSHOT/xml/features
karaf@root> features:install camel-spring-redis
karaf@root>
{noformat};;;",,,,,,,,,,,,,,,,,,,,,,
BridgePropertyPlaceholderConfigurer fails to use custom PropertiesParser,CAMEL-7821,12741483,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mkhl1,mkhl1,15/Sep/14 13:50,15/Feb/15 15:20,14/Jul/23 05:49,15/Feb/15 15:20,2.13.2,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-spring,,,,,,0,,,,,,,"A {{BridgePropertyPlaceholderConfigurer}} configured to use a custom {{PropertiesParser}} like this:
{code:}
  <bean id=""bridgePropertyPlaceholder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer""
      p:location=""classpath:application.properties""
      p:parser-ref=""jasyptParser"" />
{code}

fails to actually use the parser to parse properties.

It seems that {{org.apache.camel.spring.CamelContextFactoryBean#initPropertyPlaceholder}}, which is called from {{afterPropertiesSet}}, overwrites the custom parser with the default parser from the properties component (on line 279).",,davsclaus,mkhl1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 15:20:15 UTC 2015,,,,,,,,,,,"0|i201q7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/14 13:52;mkhl1;Reproduction repository at https://github.com/ewerk/bug-report_camel-bridge-property-placeholder-parser

Run {{gradle test}} to reproduce, switch to branch ""split"" to see the workaround of using distinct property placeholders for Spring and Camel.;;;","15/Feb/15 15:20;davsclaus;Thanks for reporting and the sample;;;",,,,,,,,,,,,,,,,,,,,,,
Interceptors not working for Rest DSL,CAMEL-7820,12741470,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,espentj,espentj,15/Sep/14 13:26,30/Nov/14 14:27,14/Jul/23 05:49,30/Nov/14 14:27,2.14.0,,,,,,,,2.14.1,2.15.0,,,camel-core,,,,,,3,,,,,,,"My project only has one Rest DSL route. 

If I add interceptFrom().stop() in the beginning of a my RouteDefinition file, no stop of that route occurs. In addition, if I add the interceptFrom().stop() after my rest dsl route is defined, no exception is thrown (as it should be). 

However, if I add another regular DSL, like: 

from(""timer://foo?fixedRate=true&period=10s"").log(""Hello world"") 

The interceptor is fired (and Exception is thrown if I move the interceptor below the route). 

Here is a snippet of the code (I have removed some details inside it, like just piping the rest call over to log hello, and removed the details for the servlet config part).

{code}
@Component 
@DependsOn(""camelConfig"") 
public class IncomingRestCalls extends RouteBuilder { 

    interceptFrom().id(""Logging interceptor"").bean(NISAccessLog.class); 

   restConfiguration()<more code here>......; 

        rest(NISConfig.API_VERSION_1 + ""/holdings"").description(""Holdings service "" +   NISConfig.API_VERSION_1) 
                .consumes(""application/json"").produces(""application/json"") 

                .get(""/{ID}"").description(""List the customers holdings for the given ID."").outTypeList( 
                InsuranceDTO.class).to(""log:hello""); 
}
{code}",,espentj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-15 13:26:10.0,,,,,,,,,,,"0|i201nb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo2 component doesn't support entity container names for batch requests,CAMEL-7806,12740851,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,11/Sep/14 19:53,13/Sep/14 05:46,14/Jul/23 05:49,11/Sep/14 21:02,,,,,,,,,2.14.0,,,,,,,,,,0,,,,,,,"Olingo2 component had an underlying assumption that all entity sets for an OData service would be in its default entity container. But designating containers as default is optional in OData. 
So the component needs to account for fully qualified resource paths like entity-container.entity-set",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 11 21:02:04 UTC 2014,,,,,,,Patch Available,,,,"0|i1zxtz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/14 21:02;dhirajsb;Fix committed to master branch

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=56615ec332f51899eb6fc17e47dae4c67c6a887f;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel Olingo2 doesn't set HTTP headers correctly,CAMEL-7805,12740846,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,11/Sep/14 19:10,13/Sep/14 05:46,14/Jul/23 05:49,11/Sep/14 21:01,,,,,,,,,2.14.0,,,,,,,,,,0,,,,,,,"Olingo2 component doesn't set HttpHeaders property from configuration on its API proxy, which ignores any custom HTTP headers altogether. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 11 21:01:21 UTC 2014,,,,,,,,,,,"0|i1zxsv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/14 21:01;dhirajsb;Fix committed to master branch
https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=6984401aad894c4cd4bbfbaddd263e920a9ee3ae;;;",,,,,,,,,,,,,,,,,,,,,,,
DefaultJdbcPrepareStatementStrategy Iterator fails on null value inserts,CAMEL-7803,12740774,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nathanwray,nathanwray,11/Sep/14 12:53,11/Nov/14 01:29,14/Jul/23 05:49,16/Sep/14 13:09,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.1,2.15.0,camel-jdbc,,,,,,0,,,,,,,"The iterator returned by createPopulateIterator in DefaultJdbcPrepareStatementStrategy incorrectly uses a next value of ""null"" to identify when it has run out of parameters.  This fails when the parameter map intentionally contains a name with a null value, which is the case when some columns in an insert should be set to null.  The attached pull request adds an explicit preFetch flag and relies on the done flag, avoiding the incorrect overloading of (next==null) to indicate completion.

The iterator reports ""hasNext() == false"" when it encounters a map value of null.  This happens when using the map header JDBC_PARAMETERS = ""CamelJdbcParameters"" to insert null values with a prepared statement.  The Iterator ends prematurely when it reaches a parameter name with a null value.  

For example, passing in a map where the 3rd parameter of 19 has a value of null causes the following exception to be thrown:

java.sql.SQLException: Number of parameters mismatch. Expected: 19, was:2
        at org.apache.camel.component.jdbc.DefaultJdbcPrepareStatementStrategy.populateStatement(DefaultJdbcPrepareStatementStrategy.java:137)
        at org.apache.camel.component.jdbc.JdbcProducer.doCreateAndExecuteSqlStatementWithHeaders(JdbcProducer.java:133)
        at org.apache.camel.component.jdbc.JdbcProducer.createAndExecuteSqlStatement(JdbcProducer.java:116)
        at org.apache.camel.component.jdbc.JdbcProducer.processingSqlBySettingAutoCommit(JdbcProducer.java:85)



",,camelguy,githubbot,nathanwray,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Sep/14 13:17;nathanwray;7803-patch.txt;https://issues.apache.org/jira/secure/attachment/12668070/7803-patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 11 01:29:33 UTC 2014,,,,,,,Patch Available,,,,"0|i1zxdj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/14 13:17;nathanwray;Patch added new boolean flag ""preFetched"" that replaces the (next==null) test.  this allows names with null values to succeed.;;;","11/Sep/14 15:57;githubbot;GitHub user nathanwray opened a pull request:

    https://github.com/apache/camel/pull/265

    CAMEL-7803

     Patch added new boolean flag ""preFetched"" to allow inserts with parameters that have null values

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nathanwray/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #265
    
----
commit 693fea2b3cee7be931b4bcfd92726e75f782adf9
Author: nathanwray <nathanwray@users.noreply.github.com>
Date:   2014-09-11T15:57:09Z

    CAMEL-7803
    
     Patch added new boolean flag ""preFetched"" to allow inserts with parameters that have null values

----
;;;","11/Sep/14 15:59;nathanwray;Created pull request https://github.com/apache/camel/pull/265
;;;","16/Sep/14 13:09;njiang;Applied the patch into master, camel-2.14.x, camel-2.13.x and camel-2.12.x with thanks to Nathan.;;;","16/Sep/14 13:22;githubbot;Github user nathanwray closed the pull request at:

    https://github.com/apache/camel/pull/265
;;;","10/Nov/14 21:27;camelguy;I appreciate that this is fixed. I spent the past 48 hours trying to figure this out. Eventually I found this JIRA and switched to 2.14.1-SNAPSHOT. When will 2.14.1 be released? I'm OK but I thought I would add my two cents about the severity of this problem especially for newbies. This was a killer as the error message implies that it's user error.;;;","11/Nov/14 01:29;njiang;As we target Camel 2.14.1 release at the end of this year, I suggest you to use the Camel 2.13.3 if you are not using any new Camel components of 2.14.0.;;;",,,,,,,,,,,,,,,,,
Exchange formatter configured on Log Component may lead to incoherent results,CAMEL-7798,12740195,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,09/Sep/14 17:17,10/Sep/14 13:43,14/Jul/23 05:49,10/Sep/14 13:43,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"Currently configuring a custom ExchangeFormatter at the Log Component level may lead to incoherent results if there are multiple Log endpoints in the context, with different log options (e.g. showBody=true, showBody=false).

This is because the component looks up the ExchangeFormatter in the registry, sets its properties and then *remembers* the result for the subsequent endpoint initialisations. This is incorrect.

The correct procedure is:
# Look up the ExchangeFormatter each time, obtaining a new fresh copy each time. This can be ensured by using @scope=prototype in Spring/Blueprint in the bean definition.
# Set its properties, according to the current endpoint's properties.
# Use the resulting ExchangeFormatter for that endpoint only.
# Subsequent endpoint initialisations must repeat the same procedure.
",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-09 17:17:34.0,,,,,,,,,,,"0|i1zufj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default CXFRS Binding: Using the wrong header filter strategy directionality,CAMEL-7797,12740189,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,09/Sep/14 16:57,09/Sep/14 16:58,14/Jul/23 05:49,09/Sep/14 16:58,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,"(i) *Code already pushed. Creating this ticket for change tracking purposes – so that it appears on release notes.*

{{DefaultCxfRsBinding}} is using the wrong directionality when applying the header filter strategy. The method copyProtocolHeaders is used when turning an incoming CXF payload into a Camel exchange/message. 

However, it was calling the Header Filter Strategy's applyFilterToCamelHeaders instead of applyFilterToExternalHeaders.",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 09 16:58:31 UTC 2014,,,,,,,,,,,"0|i1zue7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Sep/14 16:58;raulvk;Fixed in commits:

* 2.14.x (current master branch) => c047e25.
* 2.13.x => 5a05109.
* 2.12.x => bef79b5.;;;",,,,,,,,,,,,,,,,,,,,,,,
Regression: MDC may lose values after when Async Routing Engine is used,CAMEL-7795,12740126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,09/Sep/14 12:50,09/Sep/14 13:08,14/Jul/23 05:49,09/Sep/14 13:07,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"CAMEL-6377 introduced some optimisations in the MDC Logging mechanism which make it lose MDC values when the async routing engine is used.

If we are using an async component such as CXF, the response or done() callback will be issued from a thread NOT managed by Camel. Therefore, we need the MDCCallback to reset *ALL* MDC values, not just the routeId (as was intended by the commits that caused the regression).

The situation may be salvaged by the fact that underlying MDC implementations use an InheritableThreadLocal, so the first requests after system initialisation may see correct behaviour, because the MDC values from the requesting thread is propagated to the newly initialised threads in the underlying stack's ThreadPool, as the coreThreads are being initialised within the context of the original threads which act like parent threads.

But after those first attempts, odd behaviour is seen and all responses from the async endpoint come back without an MDC.",,antoine.dessaigne,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6377,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-09 12:50:12.0,,,,,,,,,,,"0|i1zu0f:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq - Consumer should not ack if an exception was thrown,CAMEL-7793,12740055,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/14 05:44,09/Sep/14 05:45,14/Jul/23 05:49,09/Sep/14 05:45,,,,,,,,,2.14.0,,,,camel-rabbitmq,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-RabbitMQ-acknowledges-event-though-autoAck-is-set-to-false-and-there-is-an-exception-in-the-roe-tp5756207.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-09 05:44:55.0,,,,,,,,,,,"0|i1ztkn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
setUnitOfWork in DefaultExchange throws NPE when called from Splitter.java,CAMEL-7785,12739517,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dye357,dye357,05/Sep/14 16:31,30/Nov/14 15:51,14/Jul/23 05:49,30/Nov/14 15:51,2.12.2,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-core,,,,,,0,easyfix,,,,,,"setUnitOfWork in DefaultExchange throws NPE when called from Splitter.java, 

Line 226 of Splitter.java is: exchange.setUnitOfWork(null);

Line 372 of DefaultExchange.java checks if onCompletions !=null, in this case because Splitter.java initialized unitOfWork to null on line 376 unitOfWork.addSynchronization(onCompletion) will throw an NPE since unitOfWork is still null.

Recommendation:

Line 372 of defaultExchange.java should include a check if unitOfWork is not null:

if(onCompletions !=null && unitOfWork != null)

Steps to reproduce:

1. Include a Split EIP in a Camel Route.
2. Specify an onPrepareRef=<class>
3. Add an onCompletion step to the exchange in <class>
4. NPE should be thrown when processing files.",,dye357,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,9223372036854775807,,,2014-09-05 16:31:37.0,,,,,,,,,,,"0|i1zqc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel : RSS - Ignores posts with identical published or updated date.,CAMEL-7784,12739472,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andyflatt,andyflatt,05/Sep/14 13:17,30/Nov/14 14:59,14/Jul/23 05:49,30/Nov/14 14:59,2.13.2,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-rss,,,,,,0,,,,,,,"When running with a RSS feed which has multiple entries with the same date only the first one is read, the rest are ignored because of the date filter.  I have provided a rudimental fix and unit test for this issue, this hashes the entries to detect duplicates.",,andyflatt,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Sep/14 13:18;andyflatt;camel-rss.zip;https://issues.apache.org/jira/secure/attachment/12666792/camel-rss.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 30 14:59:38 UTC 2014,,,,,,,Patch Available,,,,"0|i1zq27:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Sep/14 13:18;andyflatt;Added the patch;;;","05/Sep/14 13:18;andyflatt;Also the feed that exposes this issue is the BBC weather rss feed:

http://open.live.bbc.co.uk/weather/feeds/en/2643123/3dayforecast.rss?splitEntries=true&consumer.delay=5000&sortEntries=true&lastUpdate=2014-08-06T11:08:11
;;;","30/Nov/14 14:59;davsclaus;Thanks for reporting this and the patch. I am using a lru cache as the set may otherwise grow forever under unlucky situations;;;",,,,,,,,,,,,,,,,,,,,,
Maven plugin camel-api-component-maven-plugin cannot read empty API name for components with single proxy class,CAMEL-7772,12738199,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,01/Sep/14 06:37,01/Sep/14 06:48,14/Jul/23 05:49,01/Sep/14 06:48,2.13.2,,,,,,,,2.14.0,,,,tooling,,,,,,0,,,,,,,"Maven has a known issue where empty parameter values are set as null value for properties and plugin configuration parameters. This throws an error with the message ""Properties apiName and proxyClass are required"".

The camel-api-component-maven-plugin must explicitly set the apiName to """" for this use case for single proxy class API components. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 01 06:48:11 UTC 2014,,,,,,,,,,,"0|i1zjgv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Sep/14 06:48;dhirajsb;Fix committed to master;;;",,,,,,,,,,,,,,,,,,,,,,,
Handle fault - Should convert the payload to String using type converter,CAMEL-7768,12737989,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Aug/14 07:58,30/Aug/14 13:07,14/Jul/23 05:49,30/Aug/14 13:07,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"We should use the type covnerters from Camel to convert the payload correctly.

As if you have a DOM object then we just do a .toString which just prints it as Document #0 etc.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-30 07:58:31.0,,,,,,,,,,,"0|i1zinr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mock - Defining assertion on message doest work if using convertTo,CAMEL-7767,12737986,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Aug/14 07:48,30/Aug/14 13:07,14/Jul/23 05:49,30/Aug/14 13:07,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"See
http://www.manning-sandbox.com/thread.jspa?threadID=41025&tstart=0


The reason is when you use a method in the fluent builder that returns a ValueBuilder then that didn't detect the predicate.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-30 07:48:37.0,,,,,,,,,,,"0|i1zin3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyServerBootstrapConfiguration should provide default SSL settings,CAMEL-7763,12737799,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,29/Aug/14 13:58,29/Aug/14 14:05,14/Jul/23 05:49,29/Aug/14 14:05,2.13.2,,,,,,,,2.14.0,,,,camel-netty,,,,,,0,,,,,,,"Currently {{NettyServerBootstrapConfiguration}} doesn't provide default values of {{keyStoreFormat}} and {{securityProvider}} options. This is not in sync with description of these options in Netty doc (1).

For example the following configuration:

{code}
<bean id=""httpsConfiguration"" class=""org.apache.camel.component.netty.http.NettySharedHttpServerBootstrapConfiguration"">
  <property name=""port"" value=""10020""/>
  <property name=""host"" value=""0.0.0.0""/>
  <property name=""keyStoreResource"" value=""jsse/localhost.ks""/>
  <property name=""trustStoreResource"" value=""jsse/localhost.ks""/>
  <property name=""passphrase"" value=""changeit""/>
</bean>	 
{code}

...won't work until I add {{keyStoreFormat}} and {{securityProvider}} explicitly to it:

{code}
  <property name=""keyStoreFormat"" value=""JKS""/>
  <property name=""securityProvider"" value=""SunX509""/>
{code}

Solution:

We should add {{keyStoreFormat=JKS}} and {{securityProvider=SunX509}} defaults to the {{NettyServerBootstrapConfiguration}}.

(1) http://camel.apache.org/netty.html",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 29 14:05:35 UTC 2014,,,,,,,,,,,"0|i1zhi7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Aug/14 14:05;hekonsek;Resolved in 9430e4d55ae7e91f46c70d7969156767a5f42da4.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel CxfPayload issue when using namespace with no prefix (xmlns:xmlns),CAMEL-7762,12737751,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/Aug/14 09:05,30/Aug/14 06:55,14/Jul/23 05:49,30/Aug/14 06:55,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,"When using Camel CXF in PAYLOAD mode.If the client sends a SOAP request with body having no namespace prefix. The element which get for the Payload body has an attribute ""xmlns:xmlns"".

You can find more information in [the stack overflow site|http://stackoverflow.com/questions/25532081/camel-cxfpayload-issue-when-using-namespace-with-no-prefix-xmlnsxmlns]",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-29 09:05:34.0,,,,,,,,,,,"0|i1zh87:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WELD-001409: Ambiguous dependencies for type CdiCamelContext,CAMEL-7760,12737357,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,myfear,myfear,28/Aug/14 11:06,20/Nov/15 18:10,14/Jul/23 05:49,09/Jul/15 11:07,2.13.2,,,,,,,,2.16.0,,,,camel-cdi,,,,,,4,,,,,,,"Trying to bootstrap camel in a @singleton @startup bean with enabled CDI leads to a deployment exception.

 Ambiguous dependencies for type CdiCamelContext with qualifiers @Default
 - org.apache.camel.cdi.internal.CamelContextBean@35921a07,
  - Managed Bean [class org.apache.camel.cdi.CdiCamelContext] with qualifiers [@Any @Default]

The only way to workaround this, is to implement a custom Cdi-Extension to veto the bean in question.

Here is a demo-app: https://github.com/myfear/CamelEE7/
(including workaround)

The deployment exception:
https://gist.github.com/myfear/40bfc75c292dafa7ba64

This should be solved in order to make it easier to use Camel on EE servers with CDI integration.","  JBOSS_HOME: ""D:\wildfly-8.1.0.Final""
  JAVA: ""D:\jdk1.8.0_11\bin\java""",antonin.stefanutti,davsclaus,janario,myfear,,,,,,,,,,,,,,,,,,CAMEL-9201,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 09 11:07:59 UTC 2015,,,,,,,,,,,"0|i1zfp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Feb/15 09:20;davsclaus;An improved camel-cdi is in the works to be contributed for Camel 2.16
https://github.com/astefanutti/camel-cdi/issues/7#issuecomment-75986058;;;","09/Jul/15 11:07;davsclaus;Works fine now - tried without that veto in wildfly 9;;;",,,,,,,,,,,,,,,,,,,,,,
camel-restlet  2.13.1  throwing EOFException  on reading ZipInputStream ,CAMEL-7757,12737082,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sandeepreddip,sandeepreddip,27/Aug/14 12:00,08/Jul/15 07:53,14/Jul/23 05:49,29/Aug/14 05:05,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-restlet,,,,,,0,patch,,,,,,Please refer to : http://camel.465427.n5.nabble.com/Came-2-13-1-Reading-ZipInputStream-EOFException-tt5755726.html,"Windows 7 Professional 64 Bit, JBOSS EAP 6.1, Java 1.7.0_65, Camel 2.13.1",njiang,sandeepreddip,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8941,,,,,,,,,,,"27/Aug/14 12:36;sandeepreddip;DefaultRestletBinding.java;https://issues.apache.org/jira/secure/attachment/12664633/DefaultRestletBinding.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 29 05:05:32 UTC 2014,,,,,,,Patch Available,,,,"0|i1ze0v:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,"27/Aug/14 12:36;sandeepreddip;Patch for the fix.;;;","29/Aug/14 05:05;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Sandeep.;;;",,,,,,,,,,,,,,,,,,,,,,
Property Trigger.timerZone is declared as constant but not implemented,CAMEL-7754,12737045,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,27/Aug/14 08:37,01/Sep/14 07:24,14/Jul/23 05:49,27/Aug/14 10:29,2.12.1,2.13.2,,,,,,,2.14.0,,,,camel-quartz,camel-quartz2,,,,,0,,,,,,,"Seems that we have a problem with Quartz/Quartz2 components. The doc claims that we can setup this property in the URI ""trigger.timeZone"" (http://camel.apache.org/quartz.html - see specifying timezone ) but quartz don't use it even if a constant is defined :https://www.dropbox.com/s/1wjt3slsz3jajlh/Screenshot%202014-08-27%2010.29.53.png?dl=0

We have the same issue too with quartz2 --> https://www.dropbox.com/s/jcxnn72bzi38qob/Screenshot%202014-08-27%2010.31.34.png?dl=0",,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Sep/14 07:24;cmoulliard;after.png;https://issues.apache.org/jira/secure/attachment/12665718/after.png","01/Sep/14 07:24;cmoulliard;before.png;https://issues.apache.org/jira/secure/attachment/12665719/before.png",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 01 07:22:50 UTC 2014,,,,,,,,,,,"0|i1zdsn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/14 08:39;cmoulliard;Test case used

{code}
public class CamelQuartzTest extends CamelTestSupport {

    @Test
    public void testQuartzCronRoute() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMinimumMessageCount(3);

        assertMockEndpointsSatisfied();

        JobDetail job = mock.getReceivedExchanges().get(0).getIn().getHeader(""jobDetail"", JobDetail.class);
        assertNotNull(job);

        assertEquals(""cron"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE));
        assertEquals(""UTC"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE)); // ERROR
        assertEquals(""0/2 * * * * ?&trigger.timeZone=UTC"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION));
    }

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?&trigger.timeZone=UTC"").to(""mock:result"");
            }
        };
    }
}
{code};;;","27/Aug/14 09:38;cmoulliard;For Quartz 1, we should improve the QuartzComponent class to add the CamelProperty ""QUARTZ_TRIGGER_CRON_TIMEZONE""

{code}
        // enrich job data map with trigger information
        if (cron != null) {
            answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE, ""cron"");
            answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, cron);
            String timeZone = EndpointHelper.resloveStringParameter(getCamelContext(), (String)triggerParameters.get(""timeZone""), String.class);
            if (timeZone != null) {
                answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, timeZone);
            }
        } 
{code};;;","27/Aug/14 10:28;cmoulliard;For Quartz2, the TimeZone property must be pass as parameter to the Trigger.newBuilder();;;","01/Sep/14 07:22;cmoulliard;There is a bug with Quartz Scheduler as the TIMEZONE which is well used by the calendar is not taken into consideration when the nextFiredTime is calculated by the CronExpression class

{code}
    protected Date getTimeAfter(Date afterTime) {

        // Computation is based on Gregorian year only.
        Calendar cl = new java.util.GregorianCalendar(getTimeZone()); 

        // move ahead one second, since we're computing the time *after* the
        // given time
        afterTime = new Date(afterTime.getTime() + 1000); // CALENDAR SYSTEM IS USED AS WE DON'T USE THE cl object
{code}

See screenshots ;;;",,,,,,,,,,,,,,,,,,,,
Trace interceptor use add instead of remove in removeTraceHandler,CAMEL-7751,12736966,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,neoramon,neoramon,26/Aug/14 23:44,27/Aug/14 05:09,14/Jul/23 05:49,27/Aug/14 05:09,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"Class https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java implements add instead of remove in method: 

    public void removeTraceHandler(TraceEventHandler traceHandler) {
        this.traceHandlers.add(traceHandler);
    }",,neoramon,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 27 05:09:20 UTC 2014,,,,,,,,,,,"0|i1zdbb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/14 05:09;njiang;Applied the patch to camel-2.12.x, camel-2.13.x and master branches with thanks to Ramon.;;;",,,,,,,,,,,,,,,,,,,,,,,
Using @EndpointInject with ref does not enlist endpoint in JMX,CAMEL-7745,12736736,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Aug/14 07:50,26/Aug/14 07:59,14/Jul/23 05:49,26/Aug/14 07:59,,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-blueprint,camel-osgi,,,,,0,,,,,,,"When using osgi such as blueprint/spring-dm.

When using
{code}
    @EndpointInject(ref = ""sourceDirectoryXml"")
    Endpoint sourceUri;
{code}

In a RouteBuilder class then the endpoint is not enlisted in jmx. But if you use uri instead of ref, then they are enlisted in JMX.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-26 07:50:19.0,,,,,,,,,,,"0|i1zbwn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail poller onCompletion Folder is not Open,CAMEL-7739,12736095,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Laabidi Raissi,Laabidi Raissi,22/Aug/14 16:42,15/Feb/15 11:34,14/Jul/23 05:49,15/Feb/15 11:34,2.13.0,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,camel-mail,,,,,0,bug,onCompletion,pop3,,,,"I think I found a bug in Camel OncompletionProcessor code when used with a Mail poller route and onCompletion.
The error occurs when the Log level is set to DEBUG or TRACE. In that case the logger tries to call the toString() method of the DefaultExchange class which calls org.apache.camel.component.mail.MailMessage.toString().

At that stage, the POP3Folder is already closed.
A very obvious (but not elegant) solution, would be to add a try-catch block to the log instruction. 
Otherwise, I think a good solution is to change the DefaultExchange#toString method.
Here is the exception that occured:

java.lang.IllegalStateException: Folder is not Open
	at com.sun.mail.pop3.POP3Folder.checkOpen(POP3Folder.java:551)
	at com.sun.mail.pop3.POP3Folder.getProtocol(POP3Folder.java:581)
	at com.sun.mail.pop3.POP3Message.loadHeaders(POP3Message.java:606)
	at com.sun.mail.pop3.POP3Message.getHeader(POP3Message.java:383)
	at javax.mail.internet.MimeMessage.getAddressHeader(MimeMessage.java:701)
	at javax.mail.internet.MimeMessage.getFrom(MimeMessage.java:362)
	at org.apache.camel.component.mail.MailUtils.dumpMessage(MailUtils.java:106)
	at org.apache.camel.component.mail.MailMessage.toString(MailMessage.java:49)
	at java.lang.String.valueOf(String.java:2854)
	at java.lang.StringBuilder.append(StringBuilder.java:128)
	at org.apache.camel.impl.DefaultExchange.toString(DefaultExchange.java:81)
	at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
	at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
	at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:115)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:439)
	at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:413)
	at ch.qos.logback.classic.Logger.debug(Logger.java:506)
	at org.apache.camel.processor.OnCompletionProcessor$OnCompletionSynchronization$1.call(OnCompletionProcessor.java:178)
	at org.apache.camel.processor.OnCompletionProcessor$OnCompletionSynchronization$1.call(OnCompletionProcessor.java:176)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
",,davsclaus,Laabidi Raissi,nkukhar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 11:29:44 UTC 2015,,,,,,,,,,,"0|i1z8i7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 11:29;davsclaus;Yeah we should not dump the mail content in the toString();;;",,,,,,,,,,,,,,,,,,,,,,,
Failure to create producer during routing slip or similar eip causes exchange causes error handler not to react properly,CAMEL-7736,12736018,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/14 09:07,22/Aug/14 11:39,14/Jul/23 05:49,22/Aug/14 11:39,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"If an endpoint.createProducer throws an exception from a dynamic eip, then the exchange is kept marked as inflight, and the error handler does not react asap and as expected.

This was working in Camel 2.10.x etc.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-22 09:07:57.0,,,,,,,,,,,"0|i1z81j:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate - Sending manually created Exchange causes 2x sent event notification,CAMEL-7735,12736010,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/14 08:24,22/Aug/14 08:40,14/Jul/23 05:49,22/Aug/14 08:40,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,Only when you manually create  the exchange and pass it to the producer template send method there will be 2x sent event in the notifier.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,2014-08-22 08:24:49.0,,,,,,,,,,,"0|i1z7zr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultBeanRowMapper broken,CAMEL-7731,12735825,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,nathanwray,nathanwray,21/Aug/14 16:33,22/Aug/14 15:05,14/Jul/23 05:49,22/Aug/14 15:05,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-jdbc,,,,,,0,,,,,,,"DefaultBeanRowMapper current version does not upper-case when it should, due to what appears to be a copy paste error (note the toLowerCase in both branches)

if (toUpper) {
	char upper = Character.toLowerCase(ch);
	sb.append(upper);
	// reset flag
	toUpper = false;
} else {
	char lower = Character.toLowerCase(ch);
	sb.append(lower);
}

should be

if (toUpper) {
	char upper = Character.toUpperCase(ch);
	sb.append(upper);
	// reset flag
	toUpper = false;
} else {
	char lower = Character.toLowerCase(ch);
	sb.append(lower);
}
",,githubbot,nathanwray,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Aug/14 16:41;nathanwray;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12663424/patchfile.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 22 05:39:51 UTC 2014,,,,,,,Patch Available,,,,"0|i1z6w7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/14 16:41;nathanwray;patch;;;","21/Aug/14 16:49;githubbot;GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/249

    CAMEL-7731: fix typo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7731

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/249.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #249
    
----
commit d7ba926794b4df826c0fc8c57e4ce5afb72bb0e2
Author: david <david@davidkarlsen.com>
Date:   2014-08-21T16:48:03Z

    CAMEL-7731: fix typo

----
;;;","22/Aug/14 05:39;githubbot;Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/249
;;;",,,,,,,,,,,,,,,,,,,,,
"URI option ""command"" is not working in camel-infinispan component",CAMEL-7730,12735745,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rjakubco,rjakubco,21/Aug/14 09:31,22/Aug/14 06:13,14/Jul/23 05:49,22/Aug/14 06:13,2.13.2,,,,,,,,2.13.3,2.14.0,,,,,,,,,0,,,,,,,"Documentation for the component states that ""command"" URI option can be used in producer for setting operations for infinispan. But is seems only the default value is working because commands REMOVE, CLEAR and GET  fail with NullPointerException:
{code}
Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route7            ] [route7            ] [direct://commandGet                                                           ] [         3]
[route7            ] [setHeader11       ] [setHeader[CamelInfinispanKey]                                                 ] [         0]
[route7            ] [to7               ] [infinispan://localhost?cacheContainer=#container1&command=GET                 ] [         1]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-roman-ThinkPad-T430s-46536-1408612528972-0-4
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-roman-ThinkPad-T430s-46536-1408612528972-0-3, CamelInfinispanKey=commandKey1, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            null
	Body                [Body is null]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.lang.NullPointerException: Null values are not supported!
	at org.infinispan.CacheImpl.assertKeyValueNotNull(CacheImpl.java:187)
	at org.infinispan.CacheImpl.putInternal(CacheImpl.java:876)
	at org.infinispan.CacheImpl.put(CacheImpl.java:870)
	at org.infinispan.CacheImpl.put(CacheImpl.java:1351)
	at org.infinispan.CacheImpl.put(CacheImpl.java:215)
	at org.apache.camel.component.infinispan.InfinispanOperation$Operation$1.execute(InfinispanOperation.java:50)
	at org.apache.camel.component.infinispan.InfinispanOperation.process(InfinispanOperation.java:34)
	at org.apache.camel.component.infinispan.InfinispanProducer.process(InfinispanProducer.java:42)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110)
	at org.jboss.fuse.qa.infinispan.component.test.InfinispanComponentTest.testUriCommandOption(InfinispanComponentTest.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}

Looking at the code it seems there is a missing test if the operation is not specified in the URI and default operation PUT is always used( that is why there is NullPointerException). I will correct it later in the evening or tomorrow a make a pullrequest to the git.",,davsclaus,githubbot,rjakubco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 22 06:13:33 UTC 2014,,,,,,,,,,,"0|i1z6en:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/14 14:40;githubbot;GitHub user romanjakubco opened a pull request:

    https://github.com/apache/camel/pull/248

    CAMEL-7730 

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/romanjakubco/camel CAMEL-7730

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/248.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #248
    
----
commit 7e699997bdad65ee89129055db7f97b7dd922942
Author: Roman Jakubco <rjakubco@redhat.com>
Date:   2014-08-21T14:38:57Z

    CAMEL-7730 plus added junit test for this bug

----
;;;","22/Aug/14 06:12;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/248
;;;","22/Aug/14 06:13;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,
Constants used in camel-infinispan component have restricted access,CAMEL-7718,12734968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rjakubco,rjakubco,19/Aug/14 06:54,20/Aug/14 01:55,14/Jul/23 05:49,20/Aug/14 01:55,2.13.2,,,,,,,,2.13.3,2.14.0,,,,,,,,,0,,,,,,,"Constants used for setting headers in camel-infinispan are not accessible in application because class containing them  is not public. 

These constants are used in unit tests and also in example in the documentation of the component, so it seems this is minor mistake and also a bug.",,githubbot,njiang,rjakubco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412908,,,Wed Aug 20 01:55:09 UTC 2014,,,,,,,,,,,"0|i1z13r:",412894,,,,,,,,,,,,,,,,,,,,"19/Aug/14 09:19;githubbot;GitHub user romanjakubco opened a pull request:

    https://github.com/apache/camel/pull/243

    CAMEL-7718 Constants used in camel-infinispan component have restricted access

    https://issues.apache.org/jira/browse/CAMEL-7718

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/romanjakubco/camel CAMEL-7718

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/243.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #243
    
----
commit 8945cf1863f43fbe79948f7b51f9b5f51e906bbd
Author: Roman Jakubco <rjakubco@redhat.com>
Date:   2014-08-19T09:05:32Z

    CAMEL-7718 Constants used in camel-infinispan component have restricted access

----
;;;","19/Aug/14 10:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/243
;;;","20/Aug/14 01:55;njiang;Applied the patch into apache camel master and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
SjmsConsumer and SjmsProducer do not remove thread pool when stop,CAMEL-7715,12734905,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cristiano.nicolai,cristiano.nicolai,19/Aug/14 00:37,05/Sep/14 07:09,14/Jul/23 05:49,20/Aug/14 05:51,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-sjms,,,,,,0,,,,,,,"SjmsConsumer and SjmsProducer always register a new ThreadPool on Camel context ExecutorServiceManager every time a new instance is created for an endpoint.  If consumer or producer is stopped or removed or even component is removed, thread pool still exists. ",,cristiano.nicolai,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412845,,,Fri Sep 05 07:09:36 UTC 2014,,,,,,,,,,,"0|i1z0qf:",412831,,,,,,,,,,,,,,,,,,,,"19/Aug/14 01:24;githubbot;GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/242

    CAMEL-7715: Fix SJMS ThreadPool for SjmsConsumer and SjmsProducer.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7715

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/242.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #242
    
----
commit f90c8967c573226bdf0ede8656b91ea5f34b5960
Author: Cristiano Nicolai <cristiano.nicolai@gmail.com>
Date:   2014-08-19T01:21:24Z

    CAMEL-7715: Fix SJMS ThreadPool for SjmsConsumer and SjmsProducer.

----
;;;","20/Aug/14 05:51;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x branch with thanks to Cristiano.;;;","05/Sep/14 07:09;githubbot;Github user cristianonicolai closed the pull request at:

    https://github.com/apache/camel/pull/242
;;;",,,,,,,,,,,,,,,,,,,,,
AdviceWith - Does not honor autoStartup option,CAMEL-7714,12734704,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Aug/14 07:12,18/Aug/14 07:50,14/Jul/23 05:49,18/Aug/14 07:50,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"If setting a route or camel context to autoStartup=false, and then advicing that route, then it will always be started.

We should honor the auto startup option and only start it if that option is default or true.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412644,,,2014-08-18 07:12:26.0,,,,,,,,,,,"0|i1yzjj:",412630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-scala - Route id not set when using onException definition,CAMEL-7712,12734636,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,edinhodzic,edinhodzic,17/Aug/14 10:24,18/Aug/14 07:50,14/Jul/23 05:49,18/Aug/14 07:49,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-scala,,,,,,0,,,,,,,"Given this route:

{code:title=MyRoute.scala}
import org.apache.camel.main.Main
import org.apache.camel.scala.dsl.builder.{RouteBuilder, RouteBuilderSupport}

class MyRoute extends RouteBuilder {

  ""direct:input"" ==> {
    id(""my-route"")
    to(""mock:output"")
  }

}

object MyRoute extends RouteBuilderSupport {

  def main(args: Array[String]) {
    val main = new Main()
    main.enableHangupSupport
    main.addRouteBuilder(new MyRoute)
    main.run
  }
  
}
{code}

On startup we can see a {{my-route}} id:

{noformat}
[main] DefaultCamelContext INFO Route: my-route started and consuming from: Endpoint[direct://input]
{noformat}

Adding an {{onException}} definition to the route:

{code}
  handle[FileNotFoundException] {
    to(""mock:exception"")
  }.handled
{code}

On startup we can see a {{route1}} id:

{noformat}
[main] DefaultCamelContext INFO Route: route1 started and consuming from: Endpoint[direct://input]
{noformat}",,davsclaus,edinhodzic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412576,,,Mon Aug 18 07:17:48 UTC 2014,,,,,,,,,,,"0|i1yz4n:",412563,,,,,,,,,,,,,,,,,,,,"17/Aug/14 12:15;davsclaus;You need to use .routeId to set the id of the route;;;","17/Aug/14 18:12;edinhodzic;That's what http://camel.apache.org/scala-dsl-getting-started.html also suggests but there is no {{routeId}} method in the Scala DSL, at least not in version {{2.13.2}}.;;;","18/Aug/14 07:14;davsclaus;See
org.apache.camel.scala.dsl.RouteIdTest;;;","18/Aug/14 07:17;davsclaus;Yeah its not there in the DSL, which we should add.;;;",,,,,,,,,,,,,,,,,,,,
OnCompletion - Should route even if original exchange has route stop / exception handled,CAMEL-7707,12734581,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Aug/14 08:48,16/Aug/14 09:15,14/Jul/23 05:49,16/Aug/14 09:15,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Behavior-of-onCompletion-for-exception-fault-and-stop-td5754257.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412521,,,2014-08-16 08:48:10.0,,,,,,,,,,,"0|i1yysf:",412508,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel JGroups does not disconnect shared JChannel correctly,CAMEL-7706,12734498,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,15/Aug/14 19:28,15/Aug/14 19:37,14/Jul/23 05:49,15/Aug/14 19:37,2.13.2,,,,,,,,2.13.3,2.14.0,,,,,,,,,0,,,,,,,"Camel JGroups component uses a JGroups JChannel object in JGroupsEndpoint, which is shared by its JGroupsProducer and JGroupsConsumer. 
However, both the producer and consumer call disconnect() independently in their doStop() methods. This can leave a producer or consumer disconnected if the other is stopped.
The channel connect/disconnect could use a shared counter to determine when the channel should be disconnected. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412438,,,Fri Aug 15 19:37:09 UTC 2014,,,,,,,,,,,"0|i1yya7:",412425,,,,,,,,,,,,,,,,,,,,"15/Aug/14 19:37;dhirajsb;Added fix and unit test with commit https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=7936f2f6c1220f454d4d524a9ba078d41d92a0f6;;;",,,,,,,,,,,,,,,,,,,,,,,
Chaining cxfrs endpoints,CAMEL-7701,12734265,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bbonnet,bbonnet,14/Aug/14 21:49,21/Oct/14 08:39,14/Jul/23 05:49,15/Aug/14 09:06,2.13.2,Future,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,"Hi,
chaining 2 cxfrs endpoints in a route reveals 2 problems :
- proxy-client method choice in producer (CxfRsProducer.findRightMethod) is way too restrictive : the choice is based on the name and the exact type of the parameters. As a consequence, if parameters  type transmitted are compatible (i.e. extend the signature parameter types) with the method signature but are not the very ones of the signature, the operation will not be found.
That problem occurs when you chain 2 cxfrs endpoints having an InputStream parameter since cxf uses DelegatingInputStream to handle received InputStreams.
That problem may also occur for any "".to()"" cxfrs endpoint if the message body uses subtypes of the parameters.
- transmitting Content-Type header from camel to CXFRS request in DefaultCxfRsBinding may cause trouble for multipart messages : actually, if Content-Type contains a boundary defintion (which is the case when you chain cxfrs endpoints), that definition will be included into the Content-Type transmitted (in addition with the one generated during binding). That throws an exception since the ""old"" boundary is not used in the transmitted message. NB : header propagation was not enforced in 2.13.2 but it is enforced in head.

I developped a JUnit test that shows such failures in the case of a cxfrs endpoint chaining, and some code that prevents them. I am going to submit them on github.

Regards","JDK7 / Windows7
OpenJDK /Ubuntu Precise",bbonnet,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412205,,,Tue Aug 19 21:07:46 UTC 2014,,,,,,,,,,,"0|i1ywv3:",412194,,,,,,,,,,,,,,,,,,,,"15/Aug/14 06:01;njiang;I just merged the pull request with thanks to Benjamin and revert the change of ""Content-Type"" as the header could be used by the other user.;;;","15/Aug/14 20:53;githubbot;Github user bonnetb closed the pull request at:

    https://github.com/apache/camel/pull/237
;;;","19/Aug/14 21:07;bbonnet;Thank you, Willem.;;;",,,,,,,,,,,,,,,,,,,,,
"from(""mqtt:.."").to(""mqtt:..."") causes a seriously delayed delivery",CAMEL-7697,12734028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,igarashitm,igarashitm,14/Aug/14 10:58,17/Nov/14 08:04,14/Jul/23 05:49,17/Nov/14 08:04,2.14.0,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-mqtt,,,,,,0,,,,,,,"If you have a following route
{code}
                from(""mqtt:input?subscribeTopicName=testTopicIn"")
                    .from(""direct:foo"")
                    .removeProperty(""MQTTTopicPropertyName"")
                    .to(""mqtt:output?publishTopicName=testTopicOut"");
{code}

The delivery through mqtt:input seriously delays. I'll attach a reproducer soon.",,igarashitm,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7662,"14/Aug/14 11:01;igarashitm;camel-example-mqtt.tar.gz;https://issues.apache.org/jira/secure/attachment/12661695/camel-example-mqtt.tar.gz",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,412056,,,Sun Nov 16 10:40:47 UTC 2014,,,,,,,,,,,"0|i1yvyn:",412045,,,,,,,,,,,,,,,,,,,,"14/Aug/14 11:01;igarashitm;It runs with ""mvn exec:java -PExample""

The delivery through mqtt consumer takes almost 30secs while it only takes 40millisecs if it comes from direct.
{code}
2014-08-14 19:46:59,915 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2014-08-14 19:46:59,962 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>> Direct input:	39[ms]
2014-08-14 19:47:29,860 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>> MQTT consumer:	29891[ms]
2014-08-14 19:47:29,907 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>> Direct input:	40[ms]
2014-08-14 19:47:59,865 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>> MQTT consumer:	29950[ms]
2014-08-14 19:47:59,865 [e.mqtt.CamelMQTTExample.main()] CamelMQTTExample               INFO  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
{code};;;","15/Aug/14 07:59;njiang;Hi Tomohisa,

When I enable the trace log of MQTTProducer:
{code}
log4j.logger.org.apache.camel.component.mqtt=TRACE
{code}
I found the wait time is between the MQTTProducer (Publishing to testTopicOut) and (onSuccess from testTopicOut).
{code}
2014-08-15 15:53:00,535 [        hawtdispatch-DEFAULT-2] MQTTProducer                   DEBUG Publishing to testTopicOut
2014-08-15 15:53:30,405 [                          main] CamelMQTTExample               INFO  >>>>> MQTT consumer:	29877[ms]
2014-08-15 15:53:30,406 [        hawtdispatch-DEFAULT-3] MQTTProducer                   TRACE onSuccess from testTopicOut
{code}
When I change the camel route to use other thread to send the message,  the test looks good.
{code}
 from(""mqtt:input?subscribeTopicName="" + TOPIC_IN)
        .removeProperty(""MQTTTopicPropertyName"")
        .threads(2)
                    .to(""mqtt:output?publishTopicName="" + TOPIC_OUT);
{code}
Here is the log message about MQTTProducer sending the message
{code}
2014-08-15 15:55:21,766 [ (camel-1) thread #0 - Threads] MQTTProducer                   DEBUG Publishing to testTopicOut
2014-08-15 15:55:21,767 [        hawtdispatch-DEFAULT-3] MQTTProducer                   TRACE onSuccess from testTopicOut
2014-08-15 15:55:21,768 [                          main] CamelMQTTExample               INFO  >>>>> MQTT consumer:	11[ms]
{code}

It looks the hawtdispatch queue have some kind of block issue there.
;;;","16/Nov/14 10:40;igarashitm;Verified this delaying symptom has gone away with the fix I submitted for CAMEL-7662.;;;",,,,,,,,,,,,,,,,,,,,,
[cxfrs] Second argument is null when consumer invoke the bean with two arguments,CAMEL-7679,12733242,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,11/Aug/14 13:58,12/Aug/14 08:11,14/Jul/23 05:49,12/Aug/14 08:11,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,,,amarkevich,njiang,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7682,,,,,,,,,,,"11/Aug/14 13:59;amarkevich;camel-cxfrs-put-two-args.zip;https://issues.apache.org/jira/secure/attachment/12660987/camel-cxfrs-put-two-args.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,411270,,,Tue Aug 12 08:11:20 UTC 2014,,,,,,,,,,,"0|i1yr7z:",411262,,,,,,,,,,,,,,,,,,,,"11/Aug/14 14:58;njiang;You can work around this issue by converting the message body into an Object Array and setup the message header of ""CamelBeanMultiParameterArray"" to be true, just like this.
{code}
from(""cxfrs://http://0.0.0.0:8080?resourceClasses=org.apache.camel.bug.Service&loggingFeatureEnabled=true"")
					.to(""log:cxfrs8080"").process(new Processor() {

                        @Override
                        public void process(Exchange exchange) throws Exception {
                            List<Object> parameter = exchange.getIn().getBody(List.class);
                            exchange.getIn().setBody(parameter.toArray());
                            exchange.getIn().setHeader(""CamelBeanMultiParameterArray"", true);
                        }
                    }).bean(org.apache.camel.bug.ServiceUtil.class, ""invoke"");
{code}
I will update the camel bean method to leverage the camel converter to get the Object array by default.;;;","12/Aug/14 08:11;njiang;I just committed a quick fix of it, now the route could be like this
{code}
from(CXF_RS_ENDPOINT_URI).to(""bean://service?multiParameterArray=true"");
{code}

If you want to use the bean DSL, you need to wait for camel 2.14.0 which has the patch of CAMEL-7682.;;;",,,,,,,,,,,,,,,,,,,,,,
Update camel-rabbitmq URI for consumers,CAMEL-7678,12733231,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,edwardost,edwardost,11/Aug/14 13:17,30/Apr/15 07:07,14/Jul/23 05:49,30/Apr/15 07:07,2.13.2,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-rabbitmq,,,,,,0,,,,,,,"The camel-rabbitmq requires a mandatory amqp exchange as the first parameter in the URI.  Other options are specfied after the ""?.  This is appropriate for producers, but not for consumers.  Subscribers should specify the queue name as the first parameter.",,davsclaus,edwardost,reusable,,,,,,,,,,,,,,,,,,,,CAMEL-8270,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,411259,,,Sat Dec 06 01:21:37 UTC 2014,,,,,,,,,,,"0|i1yr5j:",411251,,,,,,,,,,,,,,,,,,,,"12/Aug/14 10:24;davsclaus;Can you maybe provide some examples to better explain what you see as a problem?;;;","14/Nov/14 06:45;reusable;I think [~edwardost] is refering to the RabbitMQ's default exchange, where the default exchange is specify with empty string.  I use camel-rabbitmq just two days ago, and i encounter that i am unable to define a <from> route with the rabbitmq default exchange as following:
{quote}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""rabbitmq://localhost?routingKey=ad_google_dfa_reporting_queue""/>
{quote}

Following is the Java exception stack
{noformat}
Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost?routingKey=ad_google_dfa_reporting_queue
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:50)
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:31)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:525)
{noformat}
instead, the following is required:
{quote}
<from uri=""rabbitmq://localhost/*adserver*?routingKey=ad_google_dfa_reporting_queue""/>
{quote};;;","30/Nov/14 15:05;davsclaus;Can you guys try with latest release as we have fixed stuff in camel-rabbitmq;;;","06/Dec/14 01:21;reusable;[~davsclaus]

I am using the latest release, v2.14.0. ;;;",,,,,,,,,,,,,,,,,,,,
advice with - CBR may be removed if advicing an output in a when,CAMEL-7676,12733178,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Aug/14 07:36,22/Aug/14 15:11,14/Jul/23 05:49,22/Aug/14 15:11,,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"Take a look at #3 this to see if its reproducable on latest code
http://camel.465427.n5.nabble.com/Camel-AdviceWith-issues-tp5752786.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,411206,,,Fri Aug 22 15:11:20 UTC 2014,,,,,,,,,,,"0|i1yqtr:",411198,,,,,,,,,,,,,,,,,,,,"22/Aug/14 15:11;davsclaus;We have fixed this recently.;;;",,,,,,,,,,,,,,,,,,,,,,,
"""delay"" parameter not supported: Unknown parameters=[{delay=60}]",CAMEL-7674,12733087,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ceefour,ceefour,10/Aug/14 05:45,15/Aug/14 10:13,14/Jul/23 05:49,11/Aug/14 08:07,2.13.2,,,,,,,,,,,,camel-facebook,,,,,,0,,,,,,,"From the doc http://camel.apache.org/facebook.html :

{code}
To poll, every 5 sec., all statuses on your home feed:
from(""facebook://home?delay=5"")
    .to(""bean:blah"");
{code}

But attempting to set {{delay}} parameter throws:

bq. There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{delay=60}]

Additionally, the {{delay}} was never mentioned in the parameters documentation.
",camel-facebook,ceefour,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,411115,,,Fri Aug 15 10:13:20 UTC 2014,,,,,,,,,,,"0|i1yq9z:",411107,,,,,,,,,,,,,,,,,,,,"11/Aug/14 07:59;njiang;It should be ""consumer.delay"" not ""delay"". 
You can find more information about it [here|http://camel.apache.org/polling-consumer.html].;;;","11/Aug/14 08:07;njiang;I just updated the wiki page example code.;;;","11/Aug/14 09:23;ceefour;Thanks [~njiang] but please re-update the example code: consumer.delay=5 means  5 milliseconds, not 5 seconds as intended.;;;","15/Aug/14 09:53;njiang;I just updated the example code to consumer.delay=5000.;;;","15/Aug/14 10:13;ceefour;Thank you [~njiang] :);;;",,,,,,,,,,,,,,,,,,,
"subscribeTopicName leaks out as a property and used as a destination for mqtt producer, causes infinite delivery",CAMEL-7673,12733021,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,igarashitm,igarashitm,09/Aug/14 07:35,12/Jan/15 09:06,14/Jul/23 05:49,27/Aug/14 07:01,2.12.2,2.14.0,,,,,,,2.14.0,,,,camel-mqtt,,,,,,0,,,,,,,"MQTT consumer sets its subscribeTopicName as a exchange property, and it will be used by MQTT producer as a destination if it exists in the route.

If you have a following route:
{code}
from(""mqtt:input?subscribeTopicName=topicIn"")
        .to(""mqtt:output?publishTopicName=topicOut"");
{code}

MQTT consumer put ""topicIn"" to ""MQTTTopicPropertyName"" exchange property, and MQTT producer uses this property to determine a destination topic to publish. Then MQTT producer ignores publishTopicName and send a message to ""topicIn"", so MQTT consumer consumes the message again, eventually it causes infinite delivery. We need to stop this property to be used as a destination for producer.",,davsclaus,igarashitm,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8228,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,411049,,,Wed Aug 27 07:01:39 UTC 2014,,,,,,,,,,,"0|i1ypvb:",411041,,,,,,,,,,,,,,,,,,,,"11/Aug/14 03:19;njiang;You can workaround this issue by changing the route like this
{code}
from(""mqtt:input?subscribeTopicName=topicIn"")
        .removeProperty(""MQTTTopicPropertyName"")
        .to(""mqtt:output?publishTopicName=topicOut"");
{code}
I will add an option ""bridgeEndpoint"" to  the mqtt component to ignore the property header if the ""bridgeEndpoint"" option is true.
;;;","11/Aug/14 06:02;davsclaus;I think it should be similar as we do in camel-jms. 

The component should work out of the box as camel-jms would do, and only if you want to send a message to a special topic you need to use a special header - as done in camel-jms.

We talked about this on the mailing list
;;;","11/Aug/14 06:22;igarashitm;I think the problem is that MQTT consumer and producer are using same property for different purpose, consumer set its susbcribeTopicName into the property so application can read it to know the topic name, and producer use the property for destination. I would prefer to use different property name for those since producer never sends back to the topic which is subscribed by consumer, otherwise it causes infinite delivery.;;;","11/Aug/14 06:31;igarashitm;I would give +1 that the topic name property should be removed after it's used by producer as done in camel-jms producer btw.;;;","14/Aug/14 03:10;njiang;I just take a look at the camel-jms component, it just put the destination into the message header with ""JMSDestination"" in the consumer and use ""CamelJMSDestination"" in the producer, so it doesn't hit the issue like of mqtt component.

For the camel-rabbitmq, the consumer and producer use the same message header name of ""RabbitMQConstants.EXCHANGE_NAME"" and ""RabbitMQConstants.ROUTING_KEY"" so we use  ""bridgeEndpoint"" to avoid this kind of issue.

As the mqtt consumer and producer treat the ""MQTTTopicPropertyName"" differently, I'm +1 for  consumer and producer use different header name to store the topic,  and we need put that information into message header instead of exchange property.;;;","27/Aug/14 07:01;njiang;Introduced CamelMQTTSubscribeTopic for MQTTConsumer and CamelMQTTPublishTopic MQTTProducer in camel master branch.;;;",,,,,,,,,,,,,,,,,,
CamelContext.addService may fail with java.util.ConcurrentModificationException,CAMEL-7666,12732494,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Aug/14 08:18,07/Aug/14 14:49,14/Jul/23 05:49,07/Aug/14 14:49,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"Most likely to happen only for pojo consuming where you may have a JMS listener execute concurrently and do some routing, and on initial messages then they need to register as service in CamelContext which can trigger to this ConcurrentModificationException.

{code}
2014-08-07 10:09:09,338 [sonnel.records]] WARN  EndpointMessageListener        - Execution of JMS message listener failed. Caused by: [org.apache.camel.FailedToCreateProducerException - Failed to create Producer for endpoint: Endpoint[file://target/messages/amer/finance_pickup]. Reason: java.util.ConcurrentModificationException]
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[file://target/messages/amer/finance_pickup]. Reason: java.util.ConcurrentModificationException
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:410)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.RecipientListProcessor.createProcessorExchangePairs(RecipientListProcessor.java:174)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:219)
	at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:167)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:286)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:103)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)
	at java.util.ArrayList$Itr.next(ArrayList.java:831)
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:976)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:963)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:408)
	... 22 more
2014-08-07 10:09:09,345 [main           ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) started in 0.254 seconds
2014-08-07 10:09:14,347 [main           ] INFO  CamelContextTest               - ********************************************************************************
2014-08-07 10:09:14,347 [main           ] INFO  CamelContextTest               - Testing done: testCheckFiles(org.apache.camel.example.pojo_messaging.CamelContextTest)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,410522,,,2014-08-07 08:18:52.0,,,,,,,,,,,"0|i1ymof:",410516,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMq don't reject messages when consumer or endpoint fail.,CAMEL-7665,12732368,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,neoramon,neoramon,06/Aug/14 18:48,11/Sep/14 13:23,14/Jul/23 05:49,07/Sep/14 06:46,2.13.2,,,,,,,,2.14.0,,,,camel-rabbitmq,,,,,,0,,,,,,,"RabbitMQ does not execute command to reject a message when consumers or end point throws an exception or shutdown is executed by karaf.
We need execute channel.basicReject(deliveryTag, false) to send message to Dead Letter Exchange.
In current implementation the message is always acknowledged. 
Scenario:
{code}
from(""rabbitmq://localhost:5672/myFailTest?""
+""routingKey=myFailTest&queue=myFailTest&exchangeType=direct""
+ ""&vhost=test&durable=true&autoDelete=false""
+ ""&autoAck=false&username=guest&password=guest"")
.to(""ftp://localhost/notExists?connectTimeout=100&timeout=100"");
{code}
Using errorHandler(deadLetterChannel(""..another queue"") the message is Redelivered in same queue.",,davsclaus,githubbot,neoramon,nikosd23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,410396,,,Thu Sep 11 13:23:03 UTC 2014,,,,,,,,,,,"0|i1ylvr:",410385,,,,,,,,,,,,,,,,,,,,"29/Aug/14 19:47;githubbot;GitHub user neoramon opened a pull request:

    https://github.com/apache/camel/pull/258

    CAMEL-7665

    RabbitMq don't reject messages when consumer or endpoint fail.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/neoramon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/258.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #258
    
----
commit ba230db56fa903e10c790da82e98a287c9662baf
Author: neoramon <neoramon@gmail.com>
Date:   2014-08-29T19:42:12Z

    CAMEL-7665
    RabbitMq don't reject messages when consumer or endpoint fail.

----
;;;","07/Sep/14 06:46;davsclaus;Thanks for reporting, and the PR.;;;","07/Sep/14 06:47;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/258
;;;","10/Sep/14 22:41;githubbot;GitHub user neoramon opened a pull request:

    https://github.com/apache/camel/pull/264

    CAMEL-7665

    RabbitMq don't reject messages when consumer or endpoint fail.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/neoramon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/264.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #264
    
----
commit 668316f0a06da0664765e64b12cf45e3dc451fab
Author: neoramon <neoramon@gmail.com>
Date:   2014-09-10T22:32:31Z

    CAMEL-7665
    RabbitMq don't reject messages when consumer or endpoint fail.

----
;;;","11/Sep/14 13:23;githubbot;Github user neoramon closed the pull request at:

    https://github.com/apache/camel/pull/264
;;;",,,,,,,,,,,,,,,,,,,
MQTTProducerTest fails once enables it,CAMEL-7662,12731963,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,igarashitm,igarashitm,05/Aug/14 08:36,17/Nov/14 08:01,14/Jul/23 05:49,17/Nov/14 08:01,2.12.2,2.14.0,,,,,,,2.13.4,2.14.1,2.15.0,,camel-mqtt,,,,,,0,,,,,,,"MQTTProducerTest fails once you enable this testcase. This is disabled here:
https://github.com/apache/camel/blob/master/components/camel-mqtt/pom.xml#L84
Although this may be a known issue as it's explicitly disabled, I'm filing this anyway since I couldn't find any corresponding JIRA.

It fails with different error on 2.12.2 and current upstream master, but both case show the producer can't send messages through the MQTT producer correctly. I think there is an issue in camel-mqtt since I hit same issue in our application (https://issues.jboss.org/browse/SWITCHYARD-2221), but even if the problem is in the testcase, it still needs to be replaced with appropriate testcase to verify MQTT producer works correctly.",,githubbot,igarashitm,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7697,,"12/Aug/14 12:17;igarashitm;camel-example-mqtt.tar.gz;https://issues.apache.org/jira/secure/attachment/12661205/camel-example-mqtt.tar.gz",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,409992,,,Mon Nov 17 08:01:39 UTC 2014,,,,,,,,,,,"0|i1yjfz:",409986,,,,,,,,,,,,,,,,,,,,"06/Aug/14 05:28;igarashitm;http://camel.465427.n5.nabble.com/Dispatch-queue-mqtt-client-was-not-executing-error-from-camel-mqtt-producer-td5753937.html;;;","12/Aug/14 12:17;igarashitm;This attaching example reproduces the issue by CamelMQTTExampleTest - it fails with following error in spite of it succeeds if it runs with ""mvn exec:java -PExample -DskipTests=true"". CamelMQTTExampleTest just kicks CamelMQTTExample. No difference between exec:java and test. So this strange behavior is only shown in unit test.

{code}
Caused by: java.lang.AssertionError: Dispatch queue 'mqtt client' was not executing, (currently executing: '<not-dispatched>')
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.assertExecuting(SerialDispatchQueue.java:145)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:585)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:581)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:160)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:58)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
{code};;;","12/Aug/14 13:23;njiang;Hi Tomohisa,

Can you explain why there is an file of byteman.btm?
Does it have something with running the unit test?

;;;","12/Aug/14 13:30;igarashitm;Hi Willem,

Just ignore the byteman.btm - you can run the unit test with byteman if you add -PByteman, but not necessarily.;;;","14/Aug/14 08:48;njiang;Hi Tomohisa,

I managed to find out why the unit test cannot work, even it does the same work as the example does.
First the exception is java [assertion|http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html] exception, it is thrown from 
{code}
Caused by: java.lang.AssertionError: Dispatch queue 'mqtt client' was not executing, (currently executing: '<not-dispatched>')
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.assertExecuting(SerialDispatchQueue.java:145)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:585)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:581)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:160)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:58)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
	... 36 more
{code}
By default, JVM assertions are disabled at runtime, but Surefire enables JVM assertions for the execution of your test cases by default. That could explain why you can get the different result here in the unit test.
If you disable the assertion in the surefire configuration just like this, the test is passed.
{code}
          <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkMode>perTest</forkMode>
                    <enableAssertions>false</enableAssertions>
                </configuration>
            </plugin>
{code}

I will ping Hiram for the assertion in the hawtdispatch at the mean time.;;;","14/Aug/14 12:10;igarashitm;Ah good catch! I didn't notice that. Thanks for handling this.;;;","21/Aug/14 09:09;njiang;Enable the test by disable the assertion when running the unit test in Apache Camel trunk.;;;","26/Sep/14 13:18;chirino;Disabling the assertions is the wrong thing to do.  The assertion failure is telling you that camel is using the MQTT client incorrectly.;;;","16/Nov/14 10:10;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/333

    CAMEL-7662 MQTTProducerTest fails once enables it

    The assertion expects MQTT publish/disconnect call to be submitted as a async task, i.e. enqueued in a dispatch queue

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-7662

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/333.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #333
    
----
commit f686fcb0d3c1a97a561474eb75d934310b8f9e44
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2014-11-16T07:55:45Z

    CAMEL-7662 MQTTProducerTest fails once enables it
    
    The assertion expects MQTT publish/disconnect call to be submitted as a async task, i.e. enqueued in a dispatch queue

----
;;;","16/Nov/14 10:27;igarashitm;I looked into this issue again and finally found what should be done. So the assertion expects MQTT publish call to be enqueued in a dispatch queue, but camel MQTTEndpoint was invoking it directly. For the same reason, disconnect was also failing, it was just a WARN on shutdown though. ;;;","17/Nov/14 03:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/333
;;;","17/Nov/14 08:01;njiang;Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,
camel-atom filter always returns the last consumed entry from feed more than once,CAMEL-7659,12731717,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tturek,tturek,04/Aug/14 11:53,13/Aug/14 14:22,14/Jul/23 05:49,13/Aug/14 14:22,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-atom,,,,,,0,,,,,,,"I have problem with camel setup to consume feeds atom://atomUri?splitEntries=true&filter=true&throttleEntries=false, feed processor does not skip last consumed entry.

The source of problem is in UpdateDateFilter class, it filters only entries older than last update and entries of same pubdate are once more
consumed.",,njiang,tturek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,409746,,,Wed Aug 13 14:22:29 UTC 2014,,,,,,,,,,,"0|i1yhyf:",409738,,,,,,,,,,,,,,,,,,,,"13/Aug/14 14:22;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Component api - error in camel-box component in assembly phase,CAMEL-7656,12731677,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,davsclaus,davsclaus,04/Aug/14 06:41,04/Aug/14 16:25,14/Jul/23 05:49,04/Aug/14 16:25,2.14.0,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"See this CI build and see th console output (raw) and check in the end of the build where it does the assembly of the build

https://builds.apache.org/job/Camel.trunk.notest/2124/consoleText

You get a bunch of errors like
{code}
[ERROR] Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.14-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-linkedin: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id, -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.14-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-linkedin: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.jvnet.hudson.maven3.launcher.Maven3Launcher.main(Maven3Launcher.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchStandard(Launcher.java:329)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:239)
	at org.jvnet.hudson.maven3.agent.Maven3Main.launch(Maven3Main.java:178)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:134)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:69)
	at hudson.remoting.UserRequest.perform(UserRequest.java:118)
	at hudson.remoting.UserRequest.perform(UserRequest.java:48)
	at hudson.remoting.Request$2.run(Request.java:328)
	at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.camel.maven.ApiComponentGeneratorMojo.execute(ApiComponentGeneratorMojo.java:89)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 31 more
Caused by: java.lang.IllegalArgumentException: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.camel.util.component.ApiMethodParser.forName(ApiMethodParser.java:229)
	at org.apache.camel.util.component.ApiMethodParser.parse(ApiMethodParser.java:126)
	at org.apache.camel.maven.AbstractApiMethodGeneratorMojo.execute(AbstractApiMethodGeneratorMojo.java:71)
	at org.apache.camel.maven.ApiComponentGeneratorMojo.execute(ApiComponentGeneratorMojo.java:86)
	... 33 more
{code}",,davsclaus,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,409706,,,Mon Aug 04 16:23:27 UTC 2014,,,,,,,,,,,"0|i1yhpr:",409698,,,,,,,,,,,,,,,,,,,,"04/Aug/14 15:55;dhirajsb;Looks like an issue with building with Java6, which somehow breaks decoding Javadoc HTML escapes in the API component framework Javadoc parser. I will provide a patch soon. ;;;","04/Aug/14 16:23;dhirajsb;Fixed org.apache.camel.maven.JavadocParser to replace &nbsp with ' ', tested with Java6, and changes pushed to master branch. ;;;",,,,,,,,,,,,,,,,,,,,,,
camel-sql endpoint oracle failure,CAMEL-7653,12731024,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jogeraerts,jogeraerts,31/Jul/14 09:45,04/Aug/14 07:26,14/Jul/23 05:49,04/Aug/14 07:26,2.12.0,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-sql,,,,,,0,,,,,,,"I use the sql endpoint against oracle, however the {{DefaultSqlPrepareStatementStrategy}} uses {{PreparedStatement.setObject}} to set all the named parameters. With most jdbc drives this works fine except for oracle. Oracle throws an ORA-17004 exception stating an invalid column type. 

My route looks like this

{code}
from(""{{ktn.stkbal.in"")
                .routeId(""KTN.StkBal"")
                .onCompletion().onCompleteOnly()
                    .to(""seda:generatestockbalancereport"")
                .end()
                .setHeader(""ts"",constant(new Timestamp(new Date().getTime())))
                .split().tokenizeXML(""product"",""stockPicture"").streaming()
                    .setHeader(""ean"",xpath(""/st:product/@ean"").resultType(String.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .setHeader(""available"", xpath(""/st:product/st:available"").resultType(Integer.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .setHeader(""blocked"",xpath(""/st:product/st:blocked"").resultType(Integer.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .to(""sql:insert into stockbalance(ean,available,blocked,picturets) values (:#ean,:#available,:#blocked,:#ts)?dataSourceRef=hybrisDataSource"");
{code}

And from our dear oracle i get
{code}
23:34:20,821 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Prepared query: insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)
23:34:20,824 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #1 with value: 10000000000001
23:34:20,825 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #2 with value: 2
23:34:20,826 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #3 with value: 5
23:34:20,828 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #4 with value: Wed Jul 30 23:33:18 CEST 2014
23:34:20,831 | ERROR | 2/STKBAL/inbound | DefaultErrorHandler              | 142 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Failed delivery for (MessageId: ID-tst-esb-inno1-41429-1406755976005-6-7 on ExchangeId: ID-tst-esb-inno1-41429-1406755976005-6-9). Exha
usted after delivery attempt: 1 caught: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)]; SQL state [99999]; error code [17004];
Invalid column type; nested exception is java.sql.SQLException: Invalid column type

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[KTN.StkBal        ] [KTN.StkBal        ] [sftp://TSTKATOEN2341@<edited>/STKBAL/inbound?antExcl] [        21]
[KTN.StkBal        ] [setHeader69       ] [setHeader[ean]                                                                ] [         2]
[KTN.StkBal        ] [setHeader70       ] [setHeader[available]                                                          ] [         1]
[KTN.StkBal        ] [setHeader71       ] [setHeader[blocked]                                                            ] [         1]
[KTN.StkBal        ] [to107             ] [sql:insert into stockbalance(ean,available,blocked,picturets) values (:#ean,:#] [         9]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)]; SQL state [99999]; error code [17004]; Invalid column type; nested exception is
 java.sql.SQLException: Invalid column type
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]

{code}

As workaround i extended the {{DefaultSqlPrepareStatementStrategy}} and override {{populateStatement}}. It leverages springs {{ArgumentPreparedStatementSetter}} to do the right thing.  

{code}
    @Override
    public void populateStatement(PreparedStatement ps, Iterator<?> iterator, int expectedParams) throws SQLException {
        final Object[] args = new Object[expectedParams];
        int i = 0 ;
        while (iterator != null && iterator.hasNext()) {
            args[i]=iterator.next();
            i++;
        }
        final ArgumentPreparedStatementSetter setter = new ArgumentPreparedStatementSetter(args);
        setter.setValues(ps);
    }
{code}",,jogeraerts,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,409096,,,2014-07-31 09:45:36.0,,,,,,,,,,,"0|i1ye0n:",409092,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - Return 405 if method not allowed instead of 404,CAMEL-7650,12731005,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,31/Jul/14 07:19,04/Aug/14 08:19,14/Jul/23 05:49,31/Jul/14 07:22,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-restlet,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-Restlet-2-13-1-Consumer-Questions-tp5754698.html",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,409077,,,Mon Aug 04 08:19:48 UTC 2014,,,,,,,,,,,"0|i1ydwf:",409073,,,,,,,,,,,,,,,,,,,,"31/Jul/14 14:22;raulvk;In the fix applied in commit 563d143, how do we differentiate between the method not being allowed (405) and the resource not existing (404)? 

In other words, if we have a Restlet consumer listening on {{restlet:http://0.0.0.0/abcd?method=POST}}, these two circumstances are different:

* GET /abcd => should lead to HTTP 405.
* POST /abcd/def => should lead to HTTP 404.

Moreover, RFC2616 specifies the following:

{quote}
10.4.6 405 Method Not Allowed
The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.
{quote}

So we must return the Allow header along with the HTTP 405. 

Can we delegate this stuff to the Restlet engine instead of handling it manually?;;;","04/Aug/14 08:19;davsclaus;Well spotted about the allow header to be returned - fixed that.

About the resource not found then that is handled by restlet already if an uri template does not match.;;;",,,,,,,,,,,,,,,,,,,,,,
Remove cyclic package dependency in xmlsecurity component,CAMEL-7646,12730434,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,29/Jul/14 08:32,29/Jul/14 16:02,14/Jul/23 05:49,29/Jul/14 16:02,,,,,,,,,2.14.0,,,,camel-xmlsecurity,,,,,,0,,,,,,,Code cleanup for xmlsecurity component: remove cyclic package dependency,,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jul/14 08:32;forsthofer;0001-xmlsecurity-cyclic-package-dependency-removed.patch;https://issues.apache.org/jira/secure/attachment/12658378/0001-xmlsecurity-cyclic-package-dependency-removed.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,408507,,,Tue Jul 29 16:02:30 UTC 2014,,,,,,,Patch Available,,,,"0|i1yag7:",408505,,,,,,,,,,,,,,,,,,,,"29/Jul/14 16:02;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,
Scala camel DSL creates numerous DefaultCamelContext instances,CAMEL-7644,12730246,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ukcrpb6,ukcrpb6,28/Jul/14 16:39,03/Mar/15 09:12,14/Jul/23 05:49,03/Mar/15 09:12,2.13.1,,,,,,,,2.15.0,,,,camel-scala,,,,,,0,,,,,,,"Since the camel DSL is invoked prior to `.addRoutesToCamelContext(CamelContext)` being invoked there is no camel context set on the delegate java RouteBuilder which causes it to create a new context when the first dsl method is invoked.

With the implementation of CAMEL-7327 introduced in 2.13.1 which stores created camel contexts in a set in `Container.Instance#CONTEXT`; this causes instances of DefaultCamelContext to be leaked, they are never removed from the static set. This is especially aparrent during unit testing.

The following test shows that an additional context is registered for the scala route builder as opposed to java. Verification of the leak can be requires profiler and capturing of heap after termination of the test case (in ParentRunner.java).

{code:java}
package org.apache.camel.scala.dsl.builder;

import com.google.common.collect.Sets;

import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.spi.Container;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.lang.ref.WeakReference;
import java.util.Set;

import static org.junit.Assert.assertEquals;

public class BuggyScalaTest implements Container {

  Set<CamelContext> managed = Sets.newHashSet();

  @Before
  public void setUp() throws Exception {
    Container.Instance.set(this);
  }

  @After
  public void tearDown() throws Exception {
    Container.Instance.set(null);
  }

  @Test
  public void testNameJava() throws Exception {
    DefaultCamelContext defaultCamelContext = new DefaultCamelContext();
    defaultCamelContext.addRoutes(new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        from(""direct:start"").log(""a message"");
      }
    });
    defaultCamelContext.start();

    ProducerTemplate producerTemplate = defaultCamelContext.createProducerTemplate();
    producerTemplate.start();
    producerTemplate.sendBody(""direct:start"", """");
    producerTemplate.stop();
    defaultCamelContext.stop();

    assertEquals(1, managed.size());
  }

  @Test
  public void testNameScala() throws Exception {
    DefaultCamelContext defaultCamelContext = new DefaultCamelContext();
    defaultCamelContext.addRoutes(new SimpleRouteBuilder());
    defaultCamelContext.start();

    ProducerTemplate producerTemplate = defaultCamelContext.createProducerTemplate();
    producerTemplate.start();
    producerTemplate.sendBody(""direct:start"", """");
    producerTemplate.stop();
    defaultCamelContext.stop();

    assertEquals(1, managed.size()); // will equal 2
  }

  @Override
  public void manage(CamelContext camelContext) {
    managed.add(camelContext);
  }
}
{code}

{code:java}
  package org.apache.camel.scala.dsl.builder

  import org.apache.camel.scala.dsl.builder.RouteBuilder

  class SimpleRouteBuilder extends RouteBuilder {
    from(""direct:start"").log(""a message"")
  }
{code}",,davsclaus,njiang,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8427,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,408319,,,Tue Mar 03 09:12:17 UTC 2015,,,,,,,,,,,"0|i1y9cv:",408323,,,,,,,,,,,,,,,,,,,,"29/Jul/14 12:31;njiang;I just dug the code and found out all the unit tests which extends the CamelTestSupport has the same problem which lets the RouteBuilder creates a default camel context when the first dsl method is used.  

To resolve this, we need to pass the camel context instance to the RouteBuilder to avoid create the default camel context there.

For adding the created camel context into the static set, I think maybe we can do it when the camel context is start the CAMEL-7327.
;;;","15/Feb/15 11:35;davsclaus;What is the status of this ticket?;;;","03/Mar/15 06:39;davsclaus;Okay so the problem is that camel-scala RouteBuilder runs the route configure in its constructor, it should use a configure method just like java does.

;;;","03/Mar/15 09:01;davsclaus;We are adding a ScalaRouteBuilder ppl should use that requires to pass in a CamelContext, then its a fairly easy migration effort.;;;","03/Mar/15 09:12;davsclaus;See this unit test how to use the new ScalaRouteBuilder and with lazy modifier when using ScalaTestSupport
https://github.com/apache/camel/commit/01f08a6267232089adba90a380050ba5dc9c43d2;;;",,,,,,,,,,,,,,,,,,,
Netty consumer should return error on invalid request,CAMEL-7642,12730212,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Jul/14 14:44,28/Jul/14 15:14,14/Jul/23 05:49,28/Jul/14 15:14,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-netty-http,,,,,,0,,,,,,,"f you send the corrupted request to the Netty consumer...
> header1: value1
> GET /some/resource HTTP/1.1
> header2: value2
...Netty will hang on the open connection, instead of returning error immediately.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,408285,,,Mon Jul 28 15:14:46 UTC 2014,,,,,,,,,,,"0|i1y95b:",408289,,,,,,,,,,,,,,,,,,,,"28/Jul/14 15:14;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Reply manager during timeout must use a catch to ensure onEviction can return correclty,CAMEL-7636,12729474,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jul/14 15:02,25/Jul/14 07:44,14/Jul/23 05:49,25/Jul/14 07:44,2.12.3,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-jms,,,,,,0,,,,,,,"Got a tidbit of a problem

<raul>	 2014-07-24 02:12:02,250 | WARN  | CorrelationTimeoutMap | 123 - org.apache.camel.camel-core - 2.13.1 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@7f3a3f81, won't evict and will continue trying: java.lang.NullPointerException

This could lead to endless retry if processing the timeout keeps causing the same exception.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7635,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,407548,,,2014-07-24 15:02:09.0,,,,,,,,,,,"0|i1y4ov:",407562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in Message History feature,CAMEL-7635,12729464,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,24/Jul/14 14:06,18/Aug/14 16:58,14/Jul/23 05:49,18/Aug/14 16:58,2.13.1,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"We just had an OOM incident in our dev environments after upgrading from Camel 2.10.3 to 2.13.1. Heap settings have remained untouched.

A heap dump showed millions of DefaultMessageHistory instances retained (see [^image1.png]), along with their corresponding Date and StopWatch instances. Obviously our first solution will be to disable message history in all contexts.

Digging deeper, I'm utterly confused because I don't seem to find the GC roots that are keeping these objects alive.

OQL query for VisualVM:

{code}
select x from org.apache.camel.impl.DefaultMessageHistory x where count(referrers(x)) > 0
{code}

returns many objects, which is good.

However, they are referenced by some Object[] which in turn has no referrers (!), see [^image2.png].

Using the ""Find nearest GC root"" feature yields no results either.

This mysterious Object[] seems to be filled from position 4072 onwards (see [^image3.png]), it has 9k+ items... Perhaps some kind of Queue? There are many more Object[] arrays storing DefaultMessageHistory instances too.","Apache ServiceMix 5.1.0 w/ Camel 2.13.1
JDK 7",davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7636,,,,,,,,,"24/Jul/14 14:34;raulvk;Screen Shot 2014-07-24 at 15.32.05.png;https://issues.apache.org/jira/secure/attachment/12657612/Screen+Shot+2014-07-24+at+15.32.05.png","24/Jul/14 14:06;raulvk;image1.png;https://issues.apache.org/jira/secure/attachment/12657608/image1.png","24/Jul/14 14:06;raulvk;image2.png;https://issues.apache.org/jira/secure/attachment/12657607/image2.png","24/Jul/14 14:06;raulvk;image3.png;https://issues.apache.org/jira/secure/attachment/12657606/image3.png",,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,407538,,,Mon Aug 18 16:58:19 UTC 2014,,,,,,,,,,,"0|i1y4mn:",407552,,,,,,,,,,,,,,,,,,,,"24/Jul/14 14:25;davsclaus;So does none of the DefaultMessageHistory have any data, eg are they all empty for routeId, and the other fields?

;;;","24/Jul/14 14:34;raulvk;[~davsclaus] – at first sight it seems so. See attached screenshot ([^Screen Shot 2014-07-24 at 15.32.05.png]). I'm running an OQL query to confirm, though. Will post back the results. I've also made myself available on IRC in case you'd like to use that channel.;;;","25/Jul/14 07:27;davsclaus;The issue seems to be that request/reply over JMS having replies not coming back within the timeout period, so a timeout is triggered, and being processed. But a NPE is being thrown somewhere during the onTimeout, which causes the timeout entry to not be removed, and reprocessed the next time the timeout eviction process is being run (by default every 1 sec). So this can also be seen from the headdump that the entries are 1 second apart.

CAMEL-7636 should fix the issue so the entry is being removed in cause of an exception. But the NPE may be triggered in some end user code or something, so best to track that down.;;;","18/Aug/14 16:58;davsclaus;Fixed by that other ticket;;;",,,,,,,,,,,,,,,,,,,,
BlueprintPropertiesParser doesn't handle the Blueprint Encryption: EncryptionOperationNotPossibleException,CAMEL-7630,12729187,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Jul/14 15:29,21/Jul/16 06:01,14/Jul/23 05:49,25/Jul/14 12:12,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-blueprint,,,,,,0,,,,,,,"When using encryption feature which provides by Karaf, BlueprintPropertiesParser has more than one PropertyPlaceholder. It just throw the EncryptionOperationNotPossibleException out if the property is not encrypted. ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10038,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,407261,,,Fri Jul 25 12:12:27 UTC 2014,,,,,,,,,,,"0|i1y2xr:",407277,,,,,,,,,,,,,,,,,,,,"25/Jul/14 12:12;njiang;Applied the patch into the master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Quartz/Quartz2 in cluster mode doesn't apply changed trigger settings,CAMEL-7627,12728897,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,Nikolay-Turpitko,Nikolay-Turpitko,22/Jul/14 16:47,13/Nov/14 15:23,14/Jul/23 05:49,13/Nov/14 15:22,,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-quartz,camel-quartz2,,,,,1,,,,,,,"Camel-quartz2 component in clustered mode uses trigger options stored in DB rather (possibly changed) ones from endpoint's URI.

Desirable behavior is to compare trigger options in DB and endpoint's URI and reschedule quartz job when they changed (like in camel-quartz component).

Component camel-quartz already have this functionality, but there is no test for it and it works incorrectly with changed SimpleTrigger options.

I attached a patch with unit tests. Every test prepares DB, than creates application context twice with different trigger options. Both times it retrieves options back, accessing them via trigger (not via endpoint, so that it uses values stored in DB). After that it asserts that retrieved options are indeed different.

You can ensure, that the tests fail with old versions of org.apache.camel.component.quartz2.QuartzEndpoint#addJobInScheduler or org.apache.camel.component.quartz.QuartzComponent#hasTriggerChanged methods and pass with patched implementation.

",,chris889,janstey,Nikolay-Turpitko,steffen.ryll,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Jul/14 02:32;Nikolay-Turpitko;0001-Fix-reshedule-changed-trigger-after-restart.patch;https://issues.apache.org/jira/secure/attachment/12657753/0001-Fix-reshedule-changed-trigger-after-restart.patch","28/Jul/14 14:43;Nikolay-Turpitko;0002-Test-trigger-type-change.patch;https://issues.apache.org/jira/secure/attachment/12658135/0002-Test-trigger-type-change.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,406971,,,Thu Nov 13 15:22:58 UTC 2014,,,,,,,Patch Available,,,,"0|i1y15z:",406990,,,,,,,,,,,,,,,,,,,,"25/Jul/14 02:32;Nikolay-Turpitko;Patch for both quartz/quartz2. Quartz already had similar check, but there was no unit test and condition for SimpleTrigger was broken.;;;","28/Jul/14 14:43;Nikolay-Turpitko;Fixed case when trigger type changes;;;","13/Nov/14 15:22;janstey;Just merged your patches with a few minor modifications. Thanks Nikolay!;;;",,,,,,,,,,,,,,,,,,,,,
advice-with - No outputs found matching id when upgrading from 2.13 to 2.14,CAMEL-7622,12728629,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mraible,mraible,21/Jul/14 17:32,22/Jul/14 09:16,14/Jul/23 05:49,22/Jul/14 09:16,2.14.0,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"I have the following route defined with the Java DSL: 

from(""direct:localMemberLookup"").routeId(""localMemberLookup"") 
        .process(new MemberLookupToSqlParametersProcessor()).id(""sqlParams"") 
        .recipientList(simple(""sql:{{sql.memberLookup}}"")).delimiter(""false"") 
        .to(""log:output"") 
        .process(new MemberLookupProcessor()) 
        // do more processing 
        .to(""log:output""); 

I'm testing it with a test that looks as follows: 

@EndpointInject(uri = ""mock:lookupHeaders"") 
MockEndpoint lookupHeaders; 

@EndpointInject(uri = ""mock:searchResult"") 
MockEndpoint searchResult; 

@EndpointInject(uri = ""mock:lookupResult"") 
MockEndpoint lookupResult; 

@Autowired 
CamelContext camelContext; 

@Before 
public void before() throws Exception { 
        ModelCamelContext context = (ModelCamelContext) camelContext; 
        context.setTracing(true); 
        RouteDefinition searchRoute = context.getRouteDefinition(""memberSearchRequest""); 
        searchRoute.to(searchResult); 

        RouteDefinition lookupRoute = context.getRouteDefinition(""localMemberLookup""); 
        lookupRoute.adviceWith(context, new AdviceWithRouteBuilder() { 
                @Override 
                public void configure() throws Exception { 
                        weaveById(""sqlParams"").after().to(lookupHeaders); 
                } 
        }); 
        lookupRoute.to(lookupResult); 
        context.start(); 
} 

With Camel 2.13.1, this works fine. However, with 2.14-SNAPSHOT, I get the following error: 

java.lang.IllegalArgumentException: There are no outputs which matches: sqlParams in the route 

Mailing list thread: http://camel.465427.n5.nabble.com/weaveById-works-with-2-13-1-not-with-2-14-SNAPSHOT-td5753809.html",,davsclaus,mraible,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jul/14 17:34;mraible;outputnotfound.zip;https://issues.apache.org/jira/secure/attachment/12656901/outputnotfound.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,406704,,,Tue Jul 22 09:16:54 UTC 2014,,,,,,,,,,,"0|i1xzj3:",406724,Regression,,,,,,,,,,,,,,,,,,,"21/Jul/14 17:34;mraible;Attaching outputnotfound.zip sample project to demonstrate this issue. To see how it works with Camel 2.13.2, run the following:

mvn clean test -f pom-camel-2.13.xml

To see how it fails with 2.14-SNAPSHOT, run the following:

mvn clean test;;;","22/Jul/14 07:19;davsclaus;Thanks for the sample code. I have reproduced the issue and have a fix in the works.;;;","22/Jul/14 09:16;davsclaus;Thanks for the sample code. It passes now on my laptop;;;",,,,,,,,,,,,,,,,,,,,,
JavadocApiMethodGenerator has problems extracting method signatures from JavaDoc,CAMEL-7617,12728500,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,21/Jul/14 09:55,21/Jul/14 10:39,14/Jul/23 05:49,21/Jul/14 10:39,2.14.0,,,,,,,,2.14.0,,,,tooling,,,,,,0,,,,,,,"The bug occurs during the build of Camel master branch:
{noformat}
[ERROR] Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.14-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-linkedin: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: java.lang.%20java.lang.String -> [Help 1]
{noformat}
",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,406576,,,Mon Jul 21 10:39:09 UTC 2014,,,,,,,,,,,"0|i1xyr3:",406596,,,,,,,,,,,,,,,,,,,,"21/Jul/14 10:22;ggrzybek;The links in HTML Javadocs looks like this:
{code:html}
<a href=""../../../../../../org/apache/camel/component/linkedin/api/CommentsResource.html#getComment(java.lang.String,%20java.lang.String)"">getComment</a>
{code}
;;;","21/Jul/14 10:39;ggrzybek;https://github.com/apache/camel/commit/049923e285f8f81670fcf1bfe523ba6f9dd8a19a;;;",,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.util.KeyValueHolder equals bug,CAMEL-7611,12728191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yann_m,yann_m,18/Jul/14 11:54,20/Jul/14 07:27,14/Jul/23 05:49,20/Jul/14 07:27,2.10.2,2.12.4,2.13.2,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"According to java.lang.Object javadoc (http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html), ""equal objects must have equal hash codes"". 

Current implementation of the ""equals"" and ""hashCode"" method of the org.apache.camel.util.KeyValueHolder does not seem to follow that rule: hashCode is calculated from the key and value attributes while the equals compares only the key attribute. 

Could generate unexpected behaviour in certain circumstances.","AIX, Weblogic",davsclaus,githubbot,yann_m,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,406296,,,Sun Jul 20 07:27:32 UTC 2014,,,,,,,,,,,"0|i1xx1b:",406317,,,,,,,,,,,,,,,,,,,,"19/Jul/14 02:27;githubbot;GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/223

    Fix for CAMEL-7611

    Equals and hash code in KeyValueHolder now are consistent.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-7611

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/223.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #223
    
----
commit d3a587f0824dc460f8dd78c9bf514abdd301c484
Author: nkukhar <kukhar.n@gmail.com>
Date:   2014-07-19T02:05:40Z

    Fixed equals and hashCode methods to be consistent with java (equals and hashCode) requirements.

commit fa7e7733c8669c9708f7e41b0d9998a8ab48f98e
Author: nkukhar <kukhar.n@gmail.com>
Date:   2014-07-19T02:17:53Z

    Merge branch 'master' into CAMEL-7611

----
;;;","20/Jul/14 07:27;davsclaus;Thanks for the PR;;;","20/Jul/14 07:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/223
;;;",,,,,,,,,,,,,,,,,,,,,
camel-cxfrs need to store the security context information into the message header,CAMEL-7603,12727602,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,16/Jul/14 07:37,13/Aug/14 07:43,14/Jul/23 05:49,13/Aug/14 07:43,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,We need to store the security context information when generate the camel exchange from CXF request message as camel-cxf does.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,405708,,,Wed Aug 13 07:43:32 UTC 2014,,,,,,,,,,,"0|i1xtg7:",405730,,,,,,,,,,,,,,,,,,,,"13/Aug/14 07:43;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
QueueLoadBalancer does not set callback,CAMEL-7600,12727314,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Kr10n1,Kr10n1,15/Jul/14 10:52,20/Jul/14 08:08,14/Jul/23 05:49,20/Jul/14 08:08,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,eip,,,,,0,,,,,,,"QueueLoadBalancer needs to set callback before ending processing but when no processor is returned by chooseProcessor method, it only throws exception, which in turn makes it impossible to use it with onException.
To fix it setException should be used instead of throwing exception.",,davsclaus,githubbot,Kr10n1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,405420,,,Sun Jul 20 08:08:31 UTC 2014,,,,,,,,,,,"0|i1xrp3:",405445,,,,,,,,,,,,,,,,,,,,"19/Jul/14 15:59;davsclaus;Thanks for spotting a patch is welcome.;;;","20/Jul/14 08:04;githubbot;GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/224

    Fix for CAMEL-7600

    Fixed QueueLoadBalancer issue when callback is not executed when processor is not found.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-7600

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/224.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #224
    
----
commit 03a6b58269a0c8bda740ad7af1f32079cbcc3bc6
Author: nkukhar <kukhar.n@gmail.com>
Date:   2014-07-20T07:56:09Z

    Fixed QueueLoadBalancer issue when callback is not executed when processor is not found.

----
;;;","20/Jul/14 08:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/224
;;;","20/Jul/14 08:08;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,
Camel does not clear the jpa session after each processed message batch,CAMEL-7598,12727081,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dseidewitz,dseidewitz,14/Jul/14 12:58,24/Jul/14 13:23,14/Jul/23 05:49,24/Jul/14 13:23,2.12.3,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-jpa,,,,,,0,,,,,,,"We are using apache camel to poll from a database. As we want processed rows only to be updated we have disabled consumeDelete on the JPA endpoint. 

During testing we found a large memory leak: all polled entities are kept in the session cache (we are using hibernate as persistence provider). 

The issue seems to be in the JpaConsumer. In method poll() it calls enitityManager.joinTransaction() at the beginning and entitiyManager.flush() at the end of the method but it never calls  entityManager.clear(). As camel is reusing the underlying session during each poll() this causes the first level entity cache to grow indefinitely. ",,davsclaus,dseidewitz,preben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,405188,,,Thu Jul 24 13:23:07 UTC 2014,,,,,,,,,,,"0|i1xqd3:",405223,,,,,,,,,,,,,,,,,,,,"19/Jul/14 16:01;davsclaus;Thanks, so do you mean that we should just call clear after the flush?

A patch is welcome;;;","24/Jul/14 13:04;dseidewitz;Yes, i think the correct patch would be to call clear after the flush. 

I've implemented this fix and we now don't see any rise in used heap on our production system (system is running since 2 days and was showing heap rises of 100 MB / day before). 

Do you think it's possible to include the patch in release 2.12.5?

{code}
Index: components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java             (revision 89bf25387d3798620dc6972067e4a563e11f0b5a)
+++ components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java             (revision )
@@ -135,6 +135,7 @@
                 // commit
                 LOG.debug(""Flushing EntityManager"");
                 entityManager.flush();
+                entityManager.clear();
                 return messagePolled;
             }
         });
{code};;;","24/Jul/14 13:23;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,
camel-jdbc - Overrides with old headers when used the 2nd time in a route,CAMEL-7595,12726766,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/14 09:56,11/Jul/14 10:12,14/Jul/23 05:49,11/Jul/14 10:12,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-jdbc,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/I-m-having-problems-with-the-jdbc-component-header-CamelJdbcUpdateCount-tp5753590p5753603.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,404873,,,2014-07-11 09:56:17.0,,,,,,,,,,,"0|i1xog7:",404911,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http consumer uses a fixed 1mb chunked frame size,CAMEL-7593,12726756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/14 09:04,11/Jul/14 09:06,14/Jul/23 05:49,11/Jul/14 09:06,2.12.4,2.13.2,,,,,,,2.12.5,2.13.3,2.14.0,,camel-netty-http,,,,,,0,,,,,,,"The option to configure the setting was only exposed on the shared netty http server config. We should also expose it for the non shared out of the box netty http consumer.

People today will run into this problem

When sending an HTTP request bigger than 1MB, netty HTTP throws an exception - org.jboss.netty.handler.codec.frame.TooLongFrameException: HTTP content length exceeded 1048576 bytes .",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,404863,,,2014-07-11 09:04:19.0,,,,,,,,,,,"0|i1xodz:",404901,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageHistory stores passwords in plain text,CAMEL-7587,12726328,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,marcozapletal,marcozapletal,09/Jul/14 14:08,10/Jul/14 05:57,14/Jul/23 05:49,10/Jul/14 05:57,2.13.2,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"The MessageHistory feature currently keeps passwords in plain text in case they are part of the URI. 
MessageHelper.doDumpMessageHistoryStacktrace() does some sanitizing, but only for the from node - other nodes/processors are currently not sanitized. 
In order to prevent handling sensitive information in the message history in general, I would suggest to sanitize the URI already when storing a MessageHistory item. ",,marcozapletal,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,404435,,,Thu Jul 10 05:57:23 UTC 2014,,,,,,,,,,,"0|i1xlrr:",404474,,,,,,,,,,,,,,,,,,,,"10/Jul/14 05:57;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
NotCompliantMBeanException : Attribute MessageHistory has more than one getter,CAMEL-7586,12726107,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,awlintern,awlintern,08/Jul/14 15:29,20/Jul/14 08:00,14/Jul/23 05:49,20/Jul/14 08:00,2.12.3,2.13.0,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,jmx,,,,,0,,,,,,,"Hello, I wasn't able to subscribe on the mailing list, so I'm posting my issue directly here.

In my project I need to use some _ManagedCamelContextMBean_, which I am trying to access through [JMX.newMBeanProxy|http://docs.oracle.com/javase/8/docs/api/javax/management/JMX.html#newMBeanProxy-javax.management.MBeanServerConnection-javax.management.ObjectName-java.lang.Class-]

However, it is not working as I'm getting a *NotCompliantMBeanException* because the attribute _MessageHistory_ is said to have more than one getter.

I checked the source code of newMBeanProxy, then the [JMX 1.4 specification|http://docs.oracle.com/javase/8/docs/technotes/guides/jmx/JMX_1_4_specification.pdf], and then Camel's source code, and it appears that ManagedCamelContextMBean is indeed not respecting the standard MBean.

The problem is that two methods are defined in _ManagedCamelContextMBean_ : isMessageHistory() and getMessageHistory()
Since the return type is boolean, isMessageHistory is considered to be a getter, which makes two getter according to the JMX specification and is blocking the newMBeanProxy() method.",,awlintern,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,404214,,,2014-07-08 15:29:04.0,,,,,,,,,,,"0|i1xkf3:",404254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cyclic behaviour in shutdown of temporary queues used in a proxy,CAMEL-7585,12726054,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,maurice_71,maurice_71,08/Jul/14 11:44,07/Aug/15 15:50,14/Jul/23 05:49,07/Aug/15 15:50,2.13.0,2.13.2,,,,,,,2.16.0,,,,camel-jms,,,,,,0,,,,,,,"On bundle shutdown the DMLC for the temporary queue does not get discarded. When stop() is called on the request reply JmsEndpoint the runningMessageListeners.get() count returns 1 preventing to call stop on ServiceSupport. Then inside the DMLC in refreshConnectionUntilSuccessful() isRunning() gets called resulting in a JmsEndpoint isRunning() returning true from ServiceSupport.
As a quick and dirty solution one can do this on bundle shutdown:

JmsEndpoint jmsEndpoint = camelContext.getEndpoint(""amq:queue:Endpoint"", JmsEndpoint.class);
jmsEndpoint.onListenerContainerStopped(null);

This will decrement the runningMessageListeners (which should always be one for temp queues because a singlethreadexecuter is used) to zero allowing stop() to propagate to ServiceSupport. ","Windows 7 64
Karaf 2.3.4
ActiveMQ 5.9.0 / 5.10.0
Spring 3.2.4",davsclaus,maurice_71,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,404161,,,Fri Aug 07 15:50:04 UTC 2015,,,,,,,,,,,"0|i1xk3j:",404201,,,,,,,,,,,,,,,,,,,,"15/Feb/15 11:37;davsclaus;Can you explain more about this, and what proxy you use etc. And do you use 1 or more bundles etc.;;;","07/Aug/15 15:45;davsclaus;Its the producer that is responsible for the temporary queue manager and therefore its count down / stopped when the producer stops.;;;","07/Aug/15 15:50;davsclaus;CAMEL-8491 now stores producers as a service which allows Camel to shutdown on stopping so this should stop the producer, eg if you use Camel proxy stuff.;;;",,,,,,,,,,,,,,,,,,,,,
XML-Aware Tokenizer failing with utf-8 multibyte characters,CAMEL-7584,12725776,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,07/Jul/14 16:18,08/Jul/14 08:55,14/Jul/23 05:49,08/Jul/14 08:55,,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"There is some issue in the underlining Stax reader's  getLocation().getCharOffset() when the input data is an InputStream to the stax reader.

This issue was brought up in the woodstox community. But I believe fixing it seems to be non trivial as woodstox internally uses char/Reader and keeps the offset value to the character sequence and not to the original input stream.

We change the tokenzer to pass java.io.Reader to the woodstox parser instead of passing java.io.InputStream directly.


",,ay,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7468,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403934,,,2014-07-07 16:18:24.0,,,,,,,,,,,"0|i1xiqf:",403977,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Python scripts with multiple statements return null,CAMEL-7582,12725564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,tdudgeon,tdudgeon,05/Jul/14 10:31,23/Jul/14 08:18,14/Jul/23 05:49,23/Jul/14 08:18,2.13.0,,,,,,,,2.14.0,,,,camel-language,,,,,,0,,,,,,,"As reported here: 
http://camel.465427.n5.nabble.com/Return-Value-from-Python-Script-Not-In-Message-Body-tt5724056.html#none

It seems that when calling python script that has more than a single statement  the return value from the script is null. Here is a simple example in groovy that  shows this:

{code}
package com.im.examples

import org.apache.camel.*
import org.apache.camel.impl.*
import org.apache.camel.builder.*

String script = URLEncoder.encode('""Hello world!""', ""UTF-8"") // this works - script returns ""Hello world!""
//String script = URLEncoder.encode('bar = ""baz""; ""Hello world!""', ""UTF-8"") // this fails - script returns null

CamelContext camelContext = new DefaultCamelContext()
camelContext.addRoutes(new RouteBuilder() {
        def void configure() {
            from(""direct:python"")
            .to(""language:python:"" + script)
        }
    }
)

camelContext.start()

ProducerTemplate t = camelContext.createProducerTemplate()
def result = t.requestBody('direct:python', 'foo')
println result

camelContext.stop()
{code}

",,njiang,tdudgeon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403723,,,Thu Jul 10 07:10:42 UTC 2014,,,,,,,,,,,"0|i1xhfr:",403766,,,,,,,,,,,,,,,,,,,,"10/Jul/14 07:10;njiang;camel-script component just can get result for one line expression.
If you want to run a more complicated scripts, the script engine can store the statements values into a value set.  I just did some change in the camel ScriptBuilder to look up the result value by using the key of ""result"".  Now I can get the result in multiple statements.
;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - pattern attribute should not be ignored if locale is not set,CAMEL-7578,12725482,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Peter Keller,Peter Keller,04/Jul/14 12:44,11/Jul/14 06:50,14/Jul/23 05:49,06/Jul/14 09:10,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-bindy,,,,,,0,,,,,,,"This code doesn't pad field {{mandant}} with ""0"" if locale is not set: 
{code}
@CsvRecord(separator = "","")
public class Unity {
    @DataField(pos = 1, pattern = ""000"")
    public float mandant;
{code}

Route:
{code}
final BindyCsvDataFormat bindy = new BindyCsvDataFormat(Unity.class);
from(""direct:start"")
    .marshal(bindy)
    .log(""${body}"");
{code}

Testing with:
{code}
final Unity unity = new Unity();
unity.mandant = 50f;
final ProducerTemplate template = context.createProducerTemplate();
{code}

This prints:
{quote}
50.0
{quote}

Only when setting the locale, {{pattern}} is not ignored:
{code}
bindy.setLocale(Locale.US.getISO3Country());
{code}

This prints:
{quote}
050
{quote}
",,acosentino,davsclaus,githubbot,Peter Keller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403641,,,Fri Jul 11 06:50:37 UTC 2014,,,,,,,,,,,"0|i1xgxz:",403685,,,,,,,,,,,,,,,,,,,,"04/Jul/14 12:51;Peter Keller;See {{org.apache.camel.dataformat.bindy.format.NumberPatternFormat#getNumberFormat()}}:
{code}
if (locale == null) {
    return null;
}
{code}

This should be:
{code}
if (locale == null) {
    locale = Locale.getDefault();
}
{code};;;","05/Jul/14 10:13;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/212

    CAMEL-7578 pattern attribute should not be ignored if locale is not set

    Hi,
    
    This PR is related to https://issues.apache.org/jira/browse/CAMEL-7578
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel fix-Camel-7578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #212
    
----
commit 8989bc7b2ddf75cbcc9d39e59c7b8a511ca684c7
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-05T10:10:23Z

    Fixes CAMEL-7578 pattern attribute should not be ignored if locale is not set

----
;;;","05/Jul/14 10:14;acosentino;PR created:

https://github.com/apache/camel/pull/212;;;","06/Jul/14 08:49;davsclaus;Thanks for the PR but that is not the solution, as returning null is by design according to CAMEL-5326;;;","06/Jul/14 08:55;acosentino;Ok. Do you have an idea to solve this issue? Looking at CAMEL-5326 it seems there is no way.;;;","06/Jul/14 09:09;davsclaus;You can now configure the local as 'default' which will use the platform default. Added note to docs about this, and also indicate that if you use the @DataField pattern then its recommended to set a locale on bindy.;;;","06/Jul/14 09:16;acosentino;Sorry about the uselessness of this PR.;;;","06/Jul/14 09:17;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/212
;;;","06/Jul/14 09:21;davsclaus;Thanks for the PR and help contributing to the project. We love that.
Keep em coming.

;;;","06/Jul/14 09:24;acosentino;I was thinking to submit a PR with a test case for this specific case. Should it be useful?;;;","06/Jul/14 09:47;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/213

    CAMEL-7578 specific test case

    Hi,
    
    This PR is related to https://issues.apache.org/jira/browse/CAMEL-7578
    
    It's just a specific test case for the reported issue.
    
    I hope it should be useful.
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel test-Camel-7578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/213.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #213
    
----
commit 8ffb77bb1956de618ac8314c39303cfb8ce290c0
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-06T09:44:10Z

    Test case related to the fix of CAMEL-7578 issue

----
;;;","06/Jul/14 09:48;acosentino;PR created:

https://github.com/apache/camel/pull/213

Just a test case related to this discussion and this issue.;;;","06/Jul/14 09:56;davsclaus;Yeah a test case is welcome. Just mind that if using default locale then testing depends on what that value is. eg we have people testing this from all the world. So the unit test needs to work on all those defaults too.;;;","06/Jul/14 09:59;acosentino;Ok. I'll improve this test case. Thanks.

I'll post a comment when the PR will be updated with generic test case.;;;","06/Jul/14 11:25;Peter Keller;Thanks a lot for the quick fix!;;;","06/Jul/14 12:59;acosentino;PR updated

https://github.com/apache/camel/pull/213

I hope this should help.;;;","06/Jul/14 13:32;acosentino;PR updated

https://github.com/apache/camel/pull/213

Now it examines all the available locale.
;;;","08/Jul/14 18:10;acosentino;Since the bug is already resolved.. can someone take a look to the Pr before it could be lost? Thanks.;;;","09/Jul/14 06:33;davsclaus;Thanks for the PR I added a comment on the PR about maybe a better way to set a fixed locale during testing. Maybe you could look into that and submit and updated PR, then we can get that merged.;;;","09/Jul/14 07:08;acosentino;Hi Claus,

Updated. My aim was to test all the possible Locale. You're right. That kind of test can lead to unexpected behavior.

Thanks,

Andrea;;;","11/Jul/14 06:32;acosentino;Just to remember the PR is updated.
;;;","11/Jul/14 06:46;davsclaus;Thanks the PR has been merged (only on master). Do you mind closing the PR at github?;;;","11/Jul/14 06:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/213
;;;","11/Jul/14 06:50;acosentino;Hi Claus,

AsfGit already closed it. Many thanks.

Andrea;;;"
camel-zipfile - ZipIterator should be closable,CAMEL-7577,12725478,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jul/14 12:16,04/Jul/14 12:19,14/Jul/23 05:49,04/Jul/14 12:19,2.13.1,,,,,,,,2.13.3,2.14.0,,,,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/File-component-does-not-delete-file-tp5753140p5753207.html

The ZipIterator should be Closable so the splitter eip closes it correctly.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403637,,,2014-07-04 12:16:20.0,,,,,,,,,,,"0|i1xgx3:",403681,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using custom id in CBR will output id duplicated when dumping route as XML using JMX,CAMEL-7572,12725185,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Jul/14 06:23,03/Jul/14 11:16,14/Jul/23 05:49,03/Jul/14 11:16,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,jmx,,,,,0,,,,,,,"If setting a custom id on a CBR then the dump route as xml JMX operation will include the id duplicated in the otherwise tag

{code}
<routes xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""route1"">
        <from uri=""file:src/data?noop=true""/>
        <to uri=""activemq:personnel.records"" customId=""true"" id=""amq""/>
    </route>
    <route id=""route2"">
        <from uri=""activemq:personnel.records""/>
        <choice customId=""true"" id=""myChoice"">
            <when id=""when1"">
                <xpath>/person/city = 'London'</xpath>
                <to uri=""file:target/messages/uk"" id=""to1""/>
            </when>
            <otherwise customId=""true"" id=""myChoice"">
                <to uri=""file:target/messages/others"" id=""to2""/>
            </otherwise>
        </choice>
    </route>
</routes>
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403368,,,Thu Jul 03 06:23:45 UTC 2014,,,,,,,,,,,"0|i1xfb3:",403419,,,,,,,,,,,,,,,,,,,,"03/Jul/14 06:23;davsclaus;Notice that <otherwise> has id = myChoice also;;;",,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in rabbitmq producer if header has null value and DEBUG logging enabled,CAMEL-7571,12725180,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,03/Jul/14 05:53,03/Jul/14 06:10,14/Jul/23 05:49,03/Jul/14 06:10,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-rabbitmq,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-RabbitMQProducer-tp5753248.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403363,,,2014-07-03 05:53:18.0,,,,,,,,,,,"0|i1xf9z:",403414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
enrich doesn't send out ExchangeSendingEvent nor ExchangeSentEvent ,CAMEL-7570,12725166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Jul/14 03:15,03/Jul/14 11:31,14/Jul/23 05:49,03/Jul/14 11:31,2.12.3,2.13.1,,,,,,,2.12.5,2.13.3,2.14.0,,,,,,,,1,,,,,,,"When using enrich DSL, camel doesn't send out ExchangeSendingEvent nor ExchangeSentEvent  for management.
You can find more information about it [here|http://camel.465427.n5.nabble.com/enrich-and-ExchangeSentEvents-td5753216.html]",,j0xaf,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Jul/14 07:32;j0xaf;TestExchangeSentEvent.java;https://issues.apache.org/jira/secure/attachment/12653776/TestExchangeSentEvent.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,403349,,,Thu Jul 03 11:31:01 UTC 2014,,,,,,,,,,,"0|i1xf6v:",403400,,,,,,,,,,,,,,,,,,,,"03/Jul/14 07:32;j0xaf;Attached unit tests. Testcases testInOut() and testInOnly() are passing whereas testEnrich() is failing.;;;","03/Jul/14 11:31;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
OnComplete does not  work on transactioned route after rollback,CAMEL-7568,12724978,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andrericos,andrericos,02/Jul/14 14:04,01/Sep/14 11:06,14/Jul/23 05:49,01/Sep/14 11:06,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-core,,,,,,0,,,,,,,"Example:
{code:title=Route Sample|borderStyle=solid}
this.from(""servlet:///test"").routeId(""CamelTestRoute"") 
   .onCompletion() 
      .bean(this.logCompletionRoute) 
   .end() 
   .onException(Exception.class) 
      .log(LoggingLevel.ERROR, this.log, ""Error on processing message. Sending Rollback command!"") 
      .log(LoggingLevel.ERROR, this.log, ""${exception.stacktrace}"") 
      .rollback()
      .handled(true) 
   .end() 
   .transacted(RouteTransactionConfiguration.PROPAGATION_REQUIRED) 
   .process(new Processor() { 
                @Override 
                public void process(Exchange exchange) throws Exception { 
                    throw new Exception(); 
                }}); 
{code}

In this sample, the OnCompletion bean never is executed. But, if I remove the ""rollback()"" call, it is executed properly.

thanks,",,andrericos,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,403161,,,2014-07-02 14:04:54.0,,,,,,,,,,,"0|i1xe27:",403216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP using PollEnrich with ""disconnect=true"" and ""delete=true"" does NOT delete the file",CAMEL-7565,12724784,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yarddog,yarddog,01/Jul/14 18:18,21/Mar/15 11:11,14/Jul/23 05:49,21/Mar/15 11:11,2.13.1,,,,,,,,2.15.1,2.16.0,,,camel-ftp,,,,,,0,delete,disconnection,pollenrich,sftp,,,"Attached are two test cases - one with a ""non-pollEnrich"" test (which works fine) and one with a ""pollEnrich"" test (which fails).

In stepping through some of the code, it appears that the ""disconnect"" and ""delete"" are on two different threads (true for both scenarios).  However, for the ""non-pollEnrich"" test, there seems to be a cycle that allows the timing of the two threads to NOT be an issue.  For the ""pollEnrich"" test, that cycle doesn't seem to occur.  

My uneducated guess is that both tests (code executions) are checking to see if the ""from"" has completed (including performing the delete) before disconnecting.  This makes sense for the ""non-pollEnrich"" test, but for the ""pollEnrich"" it should be checking to see if the ""pollEnrich"" is done, not the ""from"".

Please note that if you do not indicate ""disconnect=true"", file deletion occurs as expected.  This seems to be broken in 2.12.x through 2.13.1 (not sure if it goes back further or not).

I have attached two different test cases to show the different behaviors (""non-pollEnrich"" vs ""pollEnrich"").",Occurs on both Windows 7 and CentOS 6.4 against multiple SFTP servers.,davsclaus,yarddog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/14 18:20;yarddog;SftpPollEnrichConsumeWithDisconnectAndDeleteTest.java;https://issues.apache.org/jira/secure/attachment/12653435/SftpPollEnrichConsumeWithDisconnectAndDeleteTest.java","01/Jul/14 18:20;yarddog;SftpSimpleConsumeWithDisconnectAndDeleteTest.java;https://issues.apache.org/jira/secure/attachment/12653436/SftpSimpleConsumeWithDisconnectAndDeleteTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402967,,,Sat Mar 21 11:11:37 UTC 2015,,,,,,,Patch Available,,,,"0|i1xcvj:",403027,Unit Test Broken,,,,,,,,,,,,,,,,,,,"02/Jul/14 07:39;davsclaus;Sounds like disconnect is executed before the file is deleted, which happens with the UoW is done. Likely need to move the logic to disconnect in the UoW after file is deleted.;;;","02/Jul/14 17:41;yarddog;Claus - 

I either have to come up with some hack using a bean and ConsumerTemplate, or given I can get my head around the fix you are suggesting, I can look into trying to create a patch for this issue.  I have breakpoints in the code at SftpConsumer.postPollCheck() (which does the disconnect and is NOT in the UOW) and GenericFileDeleteProcessStrategy.commit() (which does the delete and is in the UOW).  If it was easy enough to point me towards the piece of code(s) that I might be able to move from A to B, I can test it and submit a patch.
;;;","03/Jul/14 11:05;davsclaus;Yeah the disconnect logic should be moved to an UoW instead of post poll check. Though the trick is to only disconnect on the last Exchange, eg in case the consumer polled 5 files, then the disconnect should only happen on the last UoW. And that gets more complicated if the exchanges is processed in parallel and asynchronous. Then you could have that even the last file polled was not last processed, but maybe it was the 3rd file etc.

But for a single file, such as you may use with pollEnrich then there is only 1 exchange and therefore a bit easier.

;;;","03/Jul/14 12:57;yarddog;Something has to know when all the UoW(s) are done, right?  Would it be possible to put the disconnect logic in the ""supervisor"" (if there is such a thing) of the UoW(s), after they have all completed?;;;","07/Jul/14 14:58;yarddog;I'm not sure I explicitly said this, but the ""non-pollEnrich"" test also throws an ""java.io.IOException: An established connection was aborted by the software in your host machine"", although the test case itself still completes successfully (and has the file deleted).;;;","21/Mar/15 11:11;davsclaus;Thanks for the test case and reporting.;;;",,,,,,,,,,,,,,,,,,
camel-test - AdviceWith in CBR may add twice,CAMEL-7562,12724523,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jun/14 19:25,02/Jul/14 07:37,14/Jul/23 05:49,02/Jul/14 07:37,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-test,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-AdviceWith-issues-tp5752786.html

When using advice-with for a CBR it may add to the when clauses 2 times.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402706,,,2014-06-30 19:25:51.0,,,,,,,,,,,"0|i1xbbz:",402773,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test - AdviceWith transacted does not work,CAMEL-7560,12724503,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jun/14 18:27,02/Jul/14 07:37,14/Jul/23 05:49,02/Jul/14 07:37,2.13.1,,,,,,,,2.12.5,2.13.3,2.14.0,,camel-test,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-adviceWith-on-2-13-x-tp5752421.html

The work-around when using transacted is to set isUseAdvice return false.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402686,,,2014-06-30 18:27:22.0,,,,,,,,,,,"0|i1xb7j:",402753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer does not copy headers between Camel and CXF messages in a proxy mode,CAMEL-7557,12724401,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,30/Jun/14 09:21,04/Jul/14 11:53,14/Jul/23 05:49,04/Jul/14 11:53,2.12.3,2.13.1,,,,,,,2.12.5,2.13.3,2.14.0,,camel-cxf,,,,,,0,,,,,,,,,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402584,,,Fri Jul 04 11:53:30 UTC 2014,,,,,,,,,,,"0|i1xal3:",402651,,,,,,,,,,,,,,,,,,,,"04/Jul/14 11:53;njiang;I just commit the patch into master, camel-2.13.x and camel-2.12.x branches.
Now the message header is copying to client whether CxfRsProducer is in Proxy model or not.;;;",,,,,,,,,,,,,,,,,,,,,,,
Avoid clash of CamelContext managementName in OSGi,CAMEL-7546,12723908,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jun/14 16:18,26/Jun/14 18:08,14/Jul/23 05:49,26/Jun/14 18:08,2.13.0,,,,,,,,2.13.2,2.14.0,,,osgi,,,,,,0,,,,,,,"There can be a potential clash in OSGi when there are 2+ camelContext in the same bundle, as they will by default reuse the same managementName in the mbean naming, where it uses the symbolic name of the OSGi bundle.

We should detect this clash and use the counter to make it unique.

This is part of CAMEL-6972

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6972,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402093,,,2014-06-26 16:18:26.0,,,,,,,,,,,"0|i1x7k7:",402159,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Having multiple camelContext in same blueprint bundle may only register the 1st in the OSGi service registry,CAMEL-7545,12723883,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jun/14 14:28,26/Jun/14 15:05,14/Jul/23 05:49,26/Jun/14 15:05,2.12.3,,,,,,,,2.12.4,2.13.2,2.14.0,,osgi,,,,,,0,,,,,,,"But its correct in JMX etc.

But the osgi service registry is used by the Camel Karaf commands so they can only see the 1st CamelContext

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402068,,,Thu Jun 26 14:29:54 UTC 2014,,,,,,,,,,,"0|i1x7en:",402134,,,,,,,,,,,,,,,,,,,,"26/Jun/14 14:29;davsclaus;Before

{code}
Karaf:karaf@root> context-list
  Name                  Status      Uptime           
[ blueprintContext1 ] [ Started ] [ 14.050 seconds ] 
[ blueprintContext2 ] [ Started ] [ 13.605 seconds ] 
Karaf:karaf@root> 
{code}

But no longer working
{code}
Karaf:karaf@root> context-list
 Context             Status         Uptime          
 -------             ------         ------          
 blueprintContext1   Started        22.625 seconds  
Karaf:karaf@root> 
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
XML DSL with customId attribute cannot be read by Camel,CAMEL-7544,12723859,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jun/14 12:49,26/Jun/14 14:08,14/Jul/23 05:49,26/Jun/14 14:08,2.13.1,,,,,,,,2.13.2,2.14.0,,,camel-core,camel-spring,,,,,0,,,,,,,"The XSD allows to specify customId=""true"" id=""foo"" in the route elements. But when reading the route using spring you get a parse error in spring.

{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'fromFile': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'customId' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'customId' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1453)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1158)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:610)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)
	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:140)
	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:94)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:176)
	at org.apache.camel.spring.Main.doStart(Main.java:140)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:352)
	at org.apache.camel.spring.Main.main(Main.java:73)
	... 6 more
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'customId' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'customId' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1043)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:903)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1450)
	... 24 more
[ERROR] *************************************
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,402044,,,2014-06-26 12:49:07.0,,,,,,,,,,,"0|i1x79b:",402110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RedisIdempotentRepository doesn't work out of box,CAMEL-7541,12723797,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Jun/14 03:13,26/Jun/14 14:02,14/Jul/23 05:49,26/Jun/14 14:02,2.12.3,2.13.1,,,,,,,2.12.4,2.13.2,2.14.0,,,,,,,,0,,,,,,,"IdempotentRepository need to use contains to check if the message is already there before adding the message. RedisIdempotentRepository doesn't do that, so RedisComponentSpringIntegrationTest is failed.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,401982,,,Thu Jun 26 14:02:59 UTC 2014,,,,,,,,,,,"0|i1x6vj:",402048,,,,,,,,,,,,,,,,,,,,"26/Jun/14 14:02;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-cache - Should create default cache manager factory if no specific config file configured,CAMEL-7531,12723380,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Jun/14 15:19,24/Jun/14 15:22,14/Jul/23 05:49,24/Jun/14 15:22,2.12.3,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-cache,,,,,,0,,,,,,,"We only create a cache manager factory on the component if a config file has been configured.

But if end users have not done that then its null, and they may get a problem, such as reported at: https://community.jboss.org/thread/241724",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,401567,,,2014-06-24 15:19:50.0,,,,,,,,,,,"0|i1x4d3:",401640,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfProducer created from wsdl detected as provider,CAMEL-7524,12722721,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,20/Jun/14 08:01,20/Jun/14 15:10,14/Jul/23 05:49,20/Jun/14 15:10,2.13.1,,,,,,,,2.13.2,2.14.0,,,camel-cxf,,,,,,1,,,,,,,"In custom bus extension following code used to detect web provider:
{code}
JaxWsServiceFactoryBean factory =...;
                JaxWsImplementorInfo jaxWsImplementorInfo = jaxwsfactory.getJaxWsImplementorInfo();
                isProvider = null != jaxWsImplementorInfo && jaxWsImplementorInfo.isWebServiceProvider();
{code}

But org.apache.camel.component.cxf.WSDLServiceFactoryBean used setServiceClass(Provider.class); which cause 
{code}
org.apache.cxf.jaxws.support.JaxWsImplementorInfo.isWebServiceProvider() {
        return Provider.class.isAssignableFrom(implementorClass);
    }
{code}
return true always.
I can't set ServiceClass for CxfEndpoint because another case will executed.
I propose to override service class for this case",,alexoid,amarkevich,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Jun/14 08:02;amarkevich;CxfEndpoint.patch;https://issues.apache.org/jira/secure/attachment/12651635/CxfEndpoint.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,400912,,,Fri Jun 20 15:10:00 UTC 2014,,,,,,,Patch Available,,,,"0|i1x0en:",400997,,,,,,,,,,,,,,,,,,,,"20/Jun/14 15:10;njiang;I just added a new construction of  WSDLServiceFactoryBean to set the serviceClass as we went. 
Applied the patch into master and camel-2.13.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
FileUtil.renameFile - should return true if file was renamed using copy/delete approach,CAMEL-7518,12721754,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/14 18:38,17/Jun/14 18:41,14/Jul/23 05:49,17/Jun/14 18:41,2.13.0,,,,,,,,2.13.2,2.14.0,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-org-apache-camel-util-FileUtil-renameFile-introduced-in-2-13-0-tp5752450.html

Regression introduced by CAMEL-6458",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,399950,,,2014-06-17 18:38:18.0,,,,,,,,,,,"0|i1wumf:",400057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using JPA entities as the argument in Aggregator using POJO,CAMEL-7513,12721439,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jonvila,jonvila,16/Jun/14 15:51,16/Jun/14 18:39,14/Jul/23 05:49,16/Jun/14 18:39,2.13.1,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,eip,,,,,0,,,,,,,"I have an Aggregator POJO with this method :

public Map<Hoteles, List<EventoPrecio>> agregaEventoPrecio(Map<Hoteles, List<EventoPrecio>> lista, EventoPrecio evento) 

With this route :

from(""timer://tesipro?fixedRate=true&period=60000"").
beanRef(""uploadARIService"", ""getEventosPrecio"").
aggregate(constant(true), AggregationStrategies.bean(AgregadorEventos.class, ""agregaEventoPrecio"")).
completionSize(100).
log(""Ejecucion de Quartz "");

And I get this error :

Error occurred during starting Camel: CamelContext(249-camel-9) due Parameter annotations at index 1 is not supported on method: public java.util.HashMap com.tesipro.conectores.interfaces.tesiproconpush.camel.AgregadorEventos.agregaEventoPrecio(java.util.HashMap,com.tesipro.conectores.domain.EventoPrecio)          

It seems the problem is that annotations are not supported in the aggregator arguments nor in the argument class.

https://github.com/apache/camel/blob/3f4f8e9ddcc8de32cca084927a10c5b3bceef7f9/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategyBeanInfo.java#L67","Linux Ubuntu 14.04
16Gb Memory
Karaf 3.0.1",davsclaus,jonvila,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,399635,,,Mon Jun 16 18:39:30 UTC 2014,,,,,,,,,,,"0|i1wson:",399744,,,,,,,,,,,,,,,,,,,,"16/Jun/14 18:39;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
[NettyHttp] Remove headerFilterStrategy option after resolving,CAMEL-7506,12721041,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,13/Jun/14 06:26,13/Jun/14 14:56,14/Jul/23 05:49,13/Jun/14 06:30,2.13.1,,,,,,,,2.12.4,2.13.2,2.14.0,,,,,,,,0,,,,,,,"In Camel Netty HTTP component, we don't remove {{headerFilterStrategy}} option from the parameters, so it is propagated as a query parameter.

When I create producer URL like this - {{netty-http:http://host.com?headerFilterStrategy=#headerFilterStrategy&foo=bar}} I expect only {{foo=bar}} to be send as a query to to endpoint (while {{headerFilterStrategy=#headerFilterStrategy}} should be resolved from the registry and removed from the parameters). This is how it works in Jetty component for example.",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,399239,,,Fri Jun 13 14:55:51 UTC 2014,,,,,,,,,,,"0|i1wq9r:",399349,,,,,,,,,,,,,,,,,,,,"13/Jun/14 06:30;hekonsek;Fixed in 0da7ade0b994a9404054aa0b3bb6eee02183994b .;;;","13/Jun/14 14:52;hekonsek;Backported to 2.13.2 in commit c98d0430575e6c1746ba9d6ba65dcd945a0a51cc.;;;","13/Jun/14 14:55;hekonsek;Backported to 2.12.4 in commit 265c2899279144f55b46f1e691deccaa5439cd95.;;;",,,,,,,,,,,,,,,,,,,,,
camel-elastichsearch - starts up an instance even though IP specified,CAMEL-7502,12720800,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,12/Jun/14 05:48,13/Jun/14 02:52,14/Jul/23 05:49,13/Jun/14 02:52,2.13.1,,,,,,,,2.13.2,2.14.0,,,camel-elasticsearch,,,,,,2,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-elasticsearch-component-starts-up-an-instance-even-though-IP-specified-tp5751825.html

",,davsclaus,njiang,nocturnal,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,398999,,,Fri Jun 13 02:52:20 UTC 2014,,,,,,,,,,,"0|i1wouf:",399116,,,,,,,,,,,,,,,,,,,,"12/Jun/14 08:10;njiang;Jose already provides a solution in the thread, so I just apply the patch into master branch with thanks to Jose.;;;","12/Jun/14 18:23;nocturnal;hey guys, I see the code has already been committed ;) - was just about to work on this (only just refreshed the JIRA page). Thanks a mil!;;;","13/Jun/14 02:52;njiang;Committed the patch with thanks to Jose into master and camel-2.13.x branch.;;;",,,,,,,,,,,,,,,,,,,,,
Concurrent modification of exchange during retry after netty TCP failure leads to futher processing of failed messages,CAMEL-7500,12720632,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ukcrpb6,ukcrpb6,11/Jun/14 17:03,15/Feb/21 16:53,14/Jul/23 05:49,10/Jul/15 08:48,2.13.1,,,,,,,,2.15.3,2.16.0,,,camel-netty,,,,,,0,,,,,,,"When a exception occurs on a netty TCP channel such as ChanelClosedException then there are two invocations of the producer callback. 

If there is a redelivery handler configured this causes either two threads to be added to the scheduled thread-pool which then compete or in the more common case the first invocation adds the redelivery thread but in doing so clears the exception from the exchange such that when the subsequent callback invocation occurs it see's the event as a success and continues routing of the exchange.

Note this also seems to be a cause of negative inflight messages on the route.

The first callback invocation occurs in the ChannelFutureListener which is the usual case.

The second callback invocation which comes from the ClientChannelHandler registered in the DefaultClientPipelineFactory used by the NettyProducer.",,davsclaus,mattnathan,njiang,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16178,,,,,,,,,"11/Jun/14 17:17;ukcrpb6;NettyRedeliveryTest.java;https://issues.apache.org/jira/secure/attachment/12649832/NettyRedeliveryTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,398831,,,Fri Jul 10 08:17:14 UTC 2015,,,,,,,,,,,"0|i1wnvb:",398953,,,,,,,,,,,,,,,,,,,,"16/Jun/14 03:21;njiang;In ClientChannelHandler, we need to updated the state of exceptionHandled to avoid the callback be called twice when the ChannelClosedException is thrown. I just committed a quick fix for that.

The other part of the issue is cased by Exchange instance could be modified by more then one thread in you test case. Current RedeliveryErrorHandler doesn't prevent this situation. It just treat the error handle is working in an single thread environment.
Maybe we need to do some refactoring there.
;;;","23/Jul/14 08:42;davsclaus;Willem has this been fixed?;;;","25/Jul/14 12:18;njiang;Hi Claus,

I didn't find a way to fix the issue that the exchange states could be modified by multiple threads at the same time.
I'd like to keep this JIRA open until we find a way to address that issue.;;;","10/Jul/15 08:17;davsclaus;Okay so it seems its because both netty producer detects the exception and also the client handler, and therefore we do 2 x callback.
Thanks Bob for this test case it helps dig down the problem, although it was a bit complicated to track down.;;;",,,,,,,,,,,,,,,,,,,,
Duplicate classes ,CAMEL-7497,12720537,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,pdjohe,pdjohe,11/Jun/14 09:09,11/Jun/14 13:12,14/Jul/23 05:49,11/Jun/14 13:12,2.13.1,,,,,,,,2.14.0,,,,camel-test,,,,,,0,,,,,,,"It looks like there are duplicate classes between the camel-test and camel-test-spring artifacts:

{code}
[WARNING] Rule 0: org.apache.maven.plugins.enforcer.BanDuplicateClasses failed with message:
Duplicate classes found:

  Found in:
    org.apache.camel:camel-test:jar:2.13.1:test
    org.apache.camel:camel-test-spring:jar:2.13.1:test
  Duplicate classes:
    org/apache/camel/test/junit4/CamelTestSupport$1.class
    org/apache/camel/test/junit4/CamelTestSupport$4.class
    org/apache/camel/test/junit4/CamelTestSupport$2.class
    org/apache/camel/test/junit4/CamelTestSupport$DebugBreakpoint.class
    org/apache/camel/test/junit4/LanguageTestSupport.class
    org/apache/camel/test/junit4/CamelTestSupport.class
    org/apache/camel/test/junit4/TestSupport.class
    org/apache/camel/test/junit4/ExchangeTestSupport.class
    org/apache/camel/test/junit4/CamelTestSupport$3.class
{code}",,njiang,pdjohe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,398736,,,Wed Jun 11 13:09:07 UTC 2014,,,,,,,,,,,"0|i1wnaf:",398858,,,,,,,,,,,,,,,,,,,,"11/Jun/14 13:09;njiang;This is caused by camel-spring-test and camel-test are exports the same package of ""org.apache.camel.test.junit4"".
As the org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner and org.apache.camel.test.junit4.CamelSpringTestSupport were derecated since camel-2.11.0, it should be safe for us to remove them in camel-2.14.0 now.

;;;",,,,,,,,,,,,,,,,,,,,,,,
PropertiesComponent gets initialized by util:constant,CAMEL-7488,12719005,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,SvenNold,SvenNold,07/Jun/14 11:11,15/Feb/15 14:17,14/Jul/23 05:49,15/Feb/15 14:17,2.13.0,2.13.1,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,camel-spring,,,,,0,,,,,,,"Using BridgePropertyPlaceholderConfigurer & Spring util constant namespace  to reference a static field, the Properties Component gets initialized with this constant.

{code:xml|title=camelContext.xml }
<util:constant static-field=""anypackage.CONSTANT_1""/>

<bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
    <property name=""locations"">
      <list>
        <value>classpath:test.properties</value>
      </list>
    </property>
</bean>

<camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <camel:route>
      <camel:from uri=""direct://ignore"" />
      <camel:setBody>
        <camel:simple>{{testProperty}}</camel:simple>
      </camel:setBody>
      <camel:to uri=""mock://ignore"" />
    </camel:route>
</camel:camelContext>   
{code}

Will produce following Stacktrace (constant contained '>>This will be loaded as location; but I am simply a constant<<'):

{noformat}
Caused by: java.io.FileNotFoundException: Properties file >>This will be loaded as location; but I am simply a constant<< not found in classpath
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromClasspath(DefaultPropertiesResolver.java:96)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:55)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer.resolveProperties(BridgePropertyPlaceholderConfigurer.java:118)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:131)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1223)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:571)
{noformat}

My current workaround was to specify propertyPlaceholder with empty location in  camelContext ...

{code:xml|title=camelContext.xml }
<!-- same as above -->
<camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <!-- location and id are mandatory -->
    <camel:propertyPlaceholder id=""stupidMandatoryId"" location=""""/>
    <camel:route>
      <camel:from uri=""direct://ignore"" />
      <camel:setBody>
        <camel:simple>{{testProperty}}</camel:simple>
      </camel:setBody>
      <camel:to uri=""mock://ignore"" />
    </camel:route>
</camel:camelContext>   
{code}",,davsclaus,njiang,SvenNold,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7496,,,,,,,,,,,"11/Jun/14 08:01;SvenNold;camel-test.zip;https://issues.apache.org/jira/secure/attachment/12649759/camel-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,397204,,,Sun Feb 15 11:51:01 UTC 2015,,,,,,,,,,,"0|i1wduf:",397327,,,,,,,,,,,,,,,,,,,,"09/Jun/14 03:40;njiang;Camel PropertyComponent will use the  PropertiesResolver(bridgePropertyPlaceHolder) to lookup the properties, so you can get the exception by default, as bridgePropertyPlaceHolder cannot find the resource file. 

You can define the propertyPlaceholder to override the default feature like this.
{code}
 <camel:propertyPlaceholder id=""propertiesOverride"" ignoreMissingLocation=""true""/>
{code};;;","10/Jun/14 10:40;SvenNold;The current fix (w/o ignoreMissingLocation) is also working, but the main problem is that w/o declaring the propertyPlaceHolder inside the camel context it throws weird errors. It would be great if you could use springs util constants w/o getting those autowired.;;;","11/Jun/14 07:48;njiang;Hi Sven,
I managed to reproduce the issue and find out PropertyPlaceholderConfigurer know nothing about the util:constant as a property.
You have to use it in [a different way|http://stackoverflow.com/questions/7309956/how-to-reference-constant-in-attribute-in-spring].

I did some work to enable the configuration of ""ignoreResourceNotFound"", so you don't need to addition camel:propertyPlaceholder to the camel context there, the bridgePropertyPlaceHolder could be.
{code}
<bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
      <property name=""ignoreResourceNotFound"" value=""true""/>
      <property name=""locations"">
        <list>
          <value>classpath:test.properties</value>
        </list>
      </property>
   </bean>
{code};;;","11/Jun/14 08:01;SvenNold;Files for new case;;;","11/Jun/14 08:08;SvenNold;Hi Willem,

I already had that setting enabled, but even with 2.13-SNAPSHOT no luck.
If you enable tracing you can see lines like:


[pache.camel.spring.Main.main()] CamelContextFactoryBean        INFO  Bridging Camel and Spring property placeholder configurer with id: bridgePropertyPlaceHolder
[pache.camel.spring.Main.main()] SpringCamelContext             DEBUG Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@70ff4bfb to resolve component with name: properties
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     TRACE No bean named 'properties' found in org.springframework.beans.factory.support.DefaultListableBeanFactory@4b37f3f9: defining beans [ag.isb.camel.Constants.CONSTANT_1,bridgePropertyPlaceHolder,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy
[pache.camel.spring.Main.main()] DefaultComponentResolver       DEBUG Found component: properties in registry: null
[pache.camel.spring.Main.main()] ObjectHelper                   TRACE Loading class: org.apache.camel.component.properties.PropertiesComponent using classloader: java.net.URLClassLoader@154f6189
[pache.camel.spring.Main.main()] DefaultComponentResolver       DEBUG Found component: properties via type: org.apache.camel.component.properties.PropertiesComponent via: META-INF/services/org/apache/camel/component/properties
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Creating instance of bean 'org.apache.camel.component.properties.PropertiesComponent'
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Returning cached instance of singleton bean 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing after initialization for bean: ag.isb.camel.Constants.CONSTANT_1
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Autowiring by type from bean name 'org.apache.camel.component.properties.PropertiesComponent' via constructor to bean named 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Returning cached instance of singleton bean 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing after initialization for bean: ag.isb.camel.Constants.CONSTANT_1
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG *Autowiring by type from bean name 'org.apache.camel.component.properties.PropertiesComponent' via constructor to bean named 'ag.isb.camel.Constants.CONSTANT_1'*
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing before initialization for bean: org.apache.camel.component.properties.PropertiesComponent

Why is it doing that?;;;","11/Jun/14 08:44;njiang;I just set the constant Property into the BridgePropertyPlaceholderConfigurer just like this
{code}
    <util:constant id=""test"" static-field=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurerTest.CONSTANT""/>  
    
    <bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
      <property name=""properties"">
         <props>
           <!-- reference the constant value in a property-->
           <prop key=""testProperty"">#{test}</prop>
         </props>
      </property>
      <property name=""ignoreResourceNotFound"" value=""true""/>
      <property name=""locations"">
        <list>
          <value>classpath:someplaceToOverride</value>
        </list>
      </property>
   </bean>
{code}

I think you can also wire the Properties that way.
;;;","11/Jun/14 08:54;SvenNold;Sorry but the main problem/issue is that PropertiesComponent autowires that constants.
I cannot get rid off that (util:)constant(s) because they're referenced else where, which I cannot change.

Is there any way to remove this auto magic of using these constants as part of the PropertiesComponent (constructor) initialization. I couldn't find any @Autowired annotation.;;;","13/Jun/14 03:13;njiang;Can you check the class file fo constant object?
I don't think ProerptiesComponent has the dependency of constant object.;;;","15/Feb/15 11:51;davsclaus;Reproduced this. It looks a bit odd that spring will autowire that util:constant in the ctr of PropertiesComponent as it has no match / makes no sense at all.;;;",,,,,,,,,,,,,,,
AdviceWithRouteBuilder.weaveById() creates duplicated endpoint,CAMEL-7485,12718852,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,joaocenoura,joaocenoura,06/Jun/14 14:15,22/Aug/14 12:42,14/Jul/23 05:49,22/Aug/14 12:42,2.12.3,2.13.0,,,,,,,2.13.3,2.14.0,,,camel-core,,,,,,0,,,,,,,"AdviceWithRouteBuilder.weaveById() and weaveByToString() creates duplicated endpoint if there's a ""choice"" in camel route. Tested with java 1.7.0_55.

Test case to demonstrate this issue:
- git clone https://github.com/joaocenoura/sandbox.git
- mvn clean package -f sandbox/camel-weaving/pom.xml

Test logs shows the duplicated endpoint insertion.
Excerpt of GoodRouteTest logs:
23:44:45,644 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,644 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]

Excerpt of BadRouteTest logs:
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]
",,davsclaus,joaocenoura,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,397051,,,Fri Aug 22 12:42:22 UTC 2014,,,,,,,,,,,"0|i1wcvb:",397169,,,,,,,,,,,,,,,,,,,,"06/Jun/14 14:17;joaocenoura;Related discussion at users list: http://camel.465427.n5.nabble.com/AdviceWithRouteBuilder-weaveById-creates-duplicated-endpoint-td5751888.html;;;","23/Jul/14 08:44;davsclaus;Do you mind testing with 2.13.2 and/or 2.14-SNAPSHOT as we have had some fixes in advice-with recently.;;;","22/Aug/14 12:42;davsclaus;Works now;;;",,,,,,,,,,,,,,,,,,,,,
SmppConfiguration has wrong value setDataCoding,CAMEL-7483,12718812,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tagabd,tagabd,06/Jun/14 10:19,06/Jun/14 12:03,14/Jul/23 05:49,06/Jun/14 12:03,2.13.1,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-smpp,,,,,,0,,,,,,,"// SmppConfiguration has wrong value setDataCoding
public void setDataCoding(byte dataCoding) {
        this.alphabet = dataCoding;
    }",,njiang,tagabd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,397011,,,Fri Jun 06 12:03:07 UTC 2014,,,,,,,,,,,"0|i1wcmf:",397129,,,,,,,,,,,,,,,,,,,,"06/Jun/14 12:03;njiang;Applied patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Abdelghani.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel:route-stop does not clean up resources,CAMEL-7482,12718808,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,kearls,kearls,06/Jun/14 09:40,20/Aug/14 06:54,14/Jul/23 05:49,20/Aug/14 06:54,,,,,,,,,2.14.0,,,,camel-core,camel-jms,,,,,0,,,,,,,"camel:route-stop does not work properly when there are messages in flight. 
Running a route that consumes from JMS where the route hung waiting for an ack, the route will eventually be stopped. However the JMS consumer does not unregister from the broker and the brokers JMX stats still show a consumer registered.",,davsclaus,githubbot,kearls,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,397007,,,Fri Jun 06 13:11:28 UTC 2014,,,,,,,,,,,"0|i1wclj:",397125,,,,,,,,,,,,,,,,,,,,"06/Jun/14 12:40;githubbot;GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/172

    First part of CAMEL-7482, update log messages on timeout

    Update the warn messages that are logged when the graceful timeout is hit to let people know some resources may still be running.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7482

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/172.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #172
    
----
commit 15f60b9b78d885b791d4dca4789b44671b6b02d5
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-06T12:34:16Z

    First part of CAMEL-7482, update log messages on timeout

----
;;;","06/Jun/14 13:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/172
;;;","06/Jun/14 13:11;davsclaus;Thanks for the 172 PR which has been applied to master.;;;",,,,,,,,,,,,,,,,,,,,,
Test fails in non-English environments,CAMEL-7479,12718447,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gzurowski,Peter Keller,Peter Keller,04/Jun/14 19:22,05/Jun/14 06:23,14/Jul/23 05:49,05/Jun/14 06:23,,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-jaxb,,,,,,0,,,,,,,"Some Java exception messages are language specific and JUnit tests evaluating theses messages fail in a non-English environment.

Such assertions are done in {{JaxbDataFormatSchemaValidationSpringTest}} and {{JaxbDataFormatSchemaValidationTest}}:
* The assertion ""Invalid content was found"" fails for the German message ""Ungültiger Content wurde beginnend mit Element ""age"" gefunden"" ({{#testMarshallWithValidationException()}})
* The assertion ""The content of element 'person' is not complete"" fails for the German message ""Content des Elements ""person"" ist nicht vollständig"" ({{#testUnmarshallWithValidationException()}}).
","MacOS, Java 1.7.0_40, German language",davsclaus,githubbot,gzurowski,Peter Keller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,396646,,,Thu Jun 05 06:23:54 UTC 2014,,,,,,,,,,,"0|i1wae7:",396767,,,,,,,,,,,,,,,,,,,,"05/Jun/14 04:49;githubbot;GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/170

    CAMEL-7479: Make unit tests run with any JVM system locale

    Use SAX validation error code instead of the localized error message in
    assert statements, so that the tests run with any JVM system locale.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7479

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/170.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #170
    
----
commit a16c105141bbd434c248f55f37ed3143c6bd127c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-06-05T04:20:45Z

    CAMEL-7479: Make unit tests run with any JVM system locale
    
    Use SAX validation error code instead of the localized error message in
    assert statements, so that the tests run with any JVM system locale.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----
;;;","05/Jun/14 04:52;gzurowski;Fix successfully tested by running unit tests with languages en, de, sv, zh and using the following Maven configuration:

{code:title=camel-jaxb/pom.xml}
<plugin>
  <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
      <forkMode>pertest</forkMode>
      <argLine>-Duser.language=de</argLine> <!-- replace language code here -->
    </configuration>
</plugin>
{code};;;","05/Jun/14 06:23;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/170
;;;","05/Jun/14 06:23;davsclaus;Thanks for the PR. It has been pushed to the branches.;;;",,,,,,,,,,,,,,,,,,,,
Simple Language - Length of array properties is not correctly evaluated,CAMEL-7478,12718423,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,Peter Keller,Peter Keller,04/Jun/14 17:42,06/Jun/14 06:24,14/Jul/23 05:49,06/Jun/14 01:29,2.13.1,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,,,,,,0,,,,,,,"If the exchange body is an array, then {{body.length}} returns correctly the length of the array. However, if the array is a property of an object, then not the correct value is returned:
{code:title=MyClass.java}
public class MyClass {
    public Object[] getMyArray() {
        return new Object[]{""Hallo"", ""World"", ""!""};
    }
}
{code}
Accessing the property {{myArray}} with Simple:
{code}
<setHeader headerName=""mySimpleHeader"">
    <simple>body.myArray.length</simple>
</setHeader>
<log message=""mySimpleHeader = ${header.mySimpleHeader}"" />
{code}
Java:
{code}
final ProducerTemplate template = main.getCamelTemplate();
template.sendBody(""direct:start"", new MyClass());
{code}
Log:
{noformat}
[main] route1 INFO  mySimpleHeader = 1
{noformat}
The return value should be {{3}} instead of {{1}}.",,njiang,Peter Keller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,396622,,,Fri Jun 06 06:24:17 UTC 2014,,,,,,,,,,,"0|i1wa8v:",396743,,,,,,,,,,,,,,,,,,,,"06/Jun/14 01:29;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;","06/Jun/14 06:24;Peter Keller;Thanks a lot.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty - SingleUDPNettyServerBootstrapFactory should wait synchronously for the outcome of joining a UDP multicast group so that we know if the attempt was successful or not,CAMEL-7472,12717118,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,28/May/14 20:08,28/May/14 20:42,14/Jul/23 05:49,28/May/14 20:42,2.12.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-netty,,,,,,0,,,,,,,In terms of Netty we need to wait until joining the multicast group *_is done_* so that starting the {{NettyConsumer}} succeeds or fails accordingly. Then we know exactly if and what failed while trying to join the multicast group.,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6563,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,395326,,,Wed May 28 20:42:51 UTC 2014,,,,,,,,,,,"0|i1w2bz:",395457,,,,,,,,,,,,,,,,,,,,"28/May/14 20:42;bvahdat;Added the test {{NettyUDPMulticastAsyncTest}} for this UDP multicast scenario verification as well. Also polished some glitches by {{NettyUDPAsyncTest}} and tightened up it's asserts a bit. ;;;",,,,,,,,,,,,,,,,,,,,,,,
SOAP with attachments not mapped correctly from CXF to Camel for CXF_MESSAGE,CAMEL-7471,12717049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,joeluo,joeluo,28/May/14 14:01,10/Jun/14 06:59,14/Jul/23 05:49,10/Jun/14 06:59,2.10.4,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-cxf,,,,,,0,,,,,,,"SOAP with attachments messages are not mapped correctly from CXF to Camel and back if using CXF_MESSAGE message format. 

We are having following simple camel route:
{code}
<route>
    <from uri=""cxf:bean:Endpoint1"" />
    <to uri=""cxf:bean:Endpoint2"" />
</route>
{code}

So mapping between CXF Endpoint 1 and Camel creates attachments in Camel exchange and sets the Camel IN message as a soap message. However, it's missing a bit of removing the attachments from the message as they are already added to the Camel Exchange.

Mapping from Camel and CXF Endpoint 2 maps Camel IN message (Soap with attachments) to CXF and then adds the attachments from Camel exchange which results in a messed up soap message that appears to contain twice as many attachments and it has messed up MIME boundaries as well as some of them are from the input message and some of them are generated during the last mapping.

As a workaround we have added a Camel processor that clears the attachments from the IN Message in Camel .",,joeluo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/May/14 14:02;joeluo;junit_test.diff;https://issues.apache.org/jira/secure/attachment/12647137/junit_test.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,395257,,,Tue Jun 10 06:59:45 UTC 2014,,,,,,,,,,,"0|i1w1wn:",395388,,,,,,,,,,,,,,,,,,,,"28/May/14 14:08;joeluo;Here I attached a new CXF mtom junit test CxfMtomConsumerCxfMessageModeTest here to demonstrate the problem. Here is the code snippet:

{code}
        public void configure() {
                from(MTOM_ENDPOINT_URI).process(new Processor() {
                    @SuppressWarnings(""unchecked"")
                    public void process(final Exchange exchange) throws Exception {
                        Message in = exchange.getIn();
                        assertEquals(""We should not get any attachements here."", 2, in.getAttachments().size());
                        assertEquals(""Get a wrong Content-Type header"", ""application/xop+xml"", in.getHeader(""Content-Type""));
                        exchange.getOut().setBody(""OK"");

                    }
                });
            }
{code}

You can see this assertion:
{code}
 assertEquals(""We should not get any attachements here."", 2, in.getAttachments().size());
{code}
It has to be 2 here in order to make the junit test case to pass. Which means that it had 2 attachments in Camel as well as 2 attachments in the Soap message.;;;","29/May/14 12:04;njiang;Hi Joe,

I tried you junit patch in camel master and camel-2.12.x branch, I cannot reproduce the error.
I will try to run the tests in camel-2.10.x branch.
;;;","29/May/14 12:57;njiang;Hi Joe,

I can verify the issue by checking out the log file after running the test of CxfMtomRouterCxfMessageModeTest.
CXF producer should avoid to add the attachement into CXF message context in CXF_MESSAGE data format, as the camel-cxf already put the attachment into message stream. 

;;;","10/Jun/14 06:59;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,
Bug in Documentation of maxThreads on Reslet Component,CAMEL-7470,12717034,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,tom_guenter,tom_guenter,28/May/14 12:59,01/Jun/14 19:44,14/Jul/23 05:49,29/May/14 01:43,2.13.1,,,,,,,,2.13.2,,,,camel-restlet,,,,,,0,,,,,,,"On the component documentation page:
[https://camel.apache.org/restlet.html]

In chapter _Configuring max threads on component_ the full qualified class name is missing a bit (restlet):
Current:
{code:xml}
<bean id=""restlet"" class=""org.apache.camel.component.RestletComponent"">
  <property name=""maxThreads"" value=""100""/>
</bean>
{code}

Should be:
{code:xml}
<bean id=""restlet"" class=""org.apache.camel.component.restlet.RestletComponent"">
  <property name=""maxThreads"" value=""100""/>
</bean>
{code}",,njiang,tom_guenter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,395242,,,Sun Jun 01 19:44:30 UTC 2014,,,,,,,,,,,"0|i1w1tb:",395373,,,,,,,,,,,,,,,,,,,,"29/May/14 01:43;njiang;I just updated the wiki page to fix the error.;;;","01/Jun/14 19:44;tom_guenter;Verified. Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,
"camel-netty-http doesn't use ""Expect: 100-continue"" correctly",CAMEL-7462,12716289,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,23/May/14 08:42,19/Dec/19 17:29,14/Jul/23 05:49,23/May/14 11:16,2.12.3,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-netty-http,,,,,,0,,,,,,,"Camel-netty-http component, when sending HTTP request with:
{noformat}
Expect: 100-continue
{noformat}
header, always sends the HTTP body with first request and treats:
{noformat}
HTTP/1.1 100 Continue
{noformat}
as final response.

Additionally {{org.apache.camel.component.netty.http.handlers.HttpServerChannelHandler}} sends {{HTTP/1.1 100 Continue}} partial response after the same partial response was send by {{org.jboss.netty.handler.codec.http.HttpChunkAggregator#messageReceived}}

Attached: wireshark session dump.",,ggrzybek,githubbot,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,394497,,,Wed Oct 23 11:24:46 UTC 2019,,,,,,,,,,,"0|i1vxaf:",394638,,,,,,,,,,,,,,,,,,,,"23/May/14 11:11;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/160

    [CAMEL-7462] Do not treat <HTTP/1.1 100 Continue> as final response

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7462

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/160.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #160
    
----
commit efcff6eaeeb6183023d66043116d8ed425c18407
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-05-23T11:10:31Z

    [CAMEL-7462] Do not treat <HTTP/1.1 100 Continue> as final response

----
;;;","23/May/14 11:17;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/160
;;;","23/Oct/19 10:47;zhfeng;Hi [~ggrzybek], I came cross this issue when working on CAMEL-14069 and it seems that the camel-netty-http still send the body with the request even if we set the header ""Expect: 100-continue"". The fix only ignores the HTTP 100-continue response, is it right ?;;;","23/Oct/19 11:24;ggrzybek;Oh my - I completely forgot about this issue!! Probably you're right, but I really don't remember ;).;;;",,,,,,,,,,,,,,,,,,,,
parseQuery Drops Char When Last Parameter is RAW with value ending in ')',CAMEL-7459,12716176,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gillmatthewj,gillmatthewj,22/May/14 19:36,23/May/14 07:00,14/Jul/23 05:49,23/May/14 07:00,2.11.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,,,,,,0,,,,,,,"org.apache.camel.util.URISupport

When processing RAW parameters as part of parseQuery a look ahead to the next char is needed in order to determine the end of the RAW value.  The logic to prevent a _StringIndexOutOfBoundsException_ drops the last char when evaluating for _next_ char when the current char (_i_) is the second to last char of the string.

This becomes an issue when the RAW value ends in ')' 

Consider:
uri = ""foo=RAW(ba(r))""
uri.length() = 14
i = 12
uri.charAt(12) = ')'
uri.charAt(13) = ')'

(i < uri.legnth() - 2) = 12 < (14 - 2) = 12 < 12 = false
thus next = ""\u0000""

The RAW value now ends satisfying the requirements and the char at index 13 is never read.  The resulting parameter is ""foo=RAW(ba(r)"".

The logic to prevent the index exception should be ""(i <*=* uri.legnth() -2)"" or ""(i < uri.legnth() - *1*)""",,davsclaus,gillmatthewj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,394385,,,Fri May 23 07:00:16 UTC 2014,,,,,,,,,,,"0|i1vwm7:",394526,,,,,,,,,,,,,,,,,,,,"23/May/14 07:00;davsclaus;Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,
[camel-cxf] cxfrs: SimpleConsumer does not honur Accept header,CAMEL-7457,12716082,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ssogabe,ssogabe,22/May/14 14:22,08/Jun/14 13:00,14/Jul/23 05:49,26/May/14 07:56,2.12.3,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-cxf,,,,,,0,,,,,,,"Content negotiation does not work correctly.

I create service class and spring xml as follows.

{code:title=CustomerService.java}
@Path(""/customer"")
public class CustomerService {
    
    @GET
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Customers getCustomers() {
        return null;
    }
}
{code}

{code:xml}
    <cxf:rsServer xmlns:cxf=""http://camel.apache.org/schema/cxf""
                  id=""rsServer""
                  address=""http://localhost:9999/rsServer""
                  loggingFeatureEnabled=""true""
                  loggingSizeLimit=""200""> 
        <cxf:serviceBeans>
            <ref bean=""CustomerService"" />
        </cxf:serviceBeans>
        <cxf:providers>
            <ref bean=""jettisonProvider"" />
        </cxf:providers>
    </cxf:rsServer>

        
    <!-- provider -->
    <bean id=""jettisonProvider"" class=""org.apache.cxf.jaxrs.provider.json.JSONProvider"" />
            
    <!-- interface -->    
    <bean id=""CustomerService"" class=""com.buildria.camel.cxf.negotiation.CustomerService"" />
    <!-- Concrete class -->
    <bean id=""CustomerServiceImpl"" class=""com.buildria.camel.cxf.negotiation.CustomerServiceImpl"" />
    
    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
 
        <route> 
            <!-- (1) SimpleConsumer BindingStyle -->
            <from uri=""cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"" />
            <!-- (2) Default BindingStyle -->
            <!-- <from uri=""cxfrs://bean://rsServer"" />-->
            
            <choice>
                <when>
                    <simple>$simple{headers.operationName} == 'getCustomers'</simple>
                    <bean ref=""CustomerServiceImpl"" method=""getCustomers"" />
                </when>
                <otherwise>
                    <setHeader headerName=""CamelHttpResponseCode"">
                        <constant>404</constant>
                    </setHeader>
                </otherwise>
            </choice>
        </route>
    </camelContext>
{code}

A) I tested it with curl command like this.

{noformat}
$ curl  -H ""Accept: application/json""  http://localhost:9999/rsServer/customer/ 
{""customers"":{""customers"":{""address"":""Japan"",""name"":""Ken""}}}sogabe@emilia ~/src/camel/camel-rest-cxfrs [2.10.6] 2014/05/22 午後 23:15:56 
$ LANG=C curl  -H ""Accept: application/json""  http://localhost:9999/rsServer/customer/ -v
* Hostname was NOT found in DNS cache
*   Trying ::1...
* connect to ::1 port 9999 failed: Connection refused
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 9999 (#0)
> GET /rsServer/customer/ HTTP/1.1
> User-Agent: curl/7.36.0
> Host: localhost:9999
> Accept: application/json
> 
< HTTP/1.1 200 OK
< Accept: application/json
< breadcrumbId: ID-emilia-46343-1400768103395-0-7
< Content-Type: application/json
< Date: Thu, 22 May 2014 14:16:12 GMT
< Host: localhost:9999
< User-Agent: curl/7.36.0
< Transfer-Encoding: chunked
* Server Jetty(8.1.14.v20131031) is not blacklisted
< Server: Jetty(8.1.14.v20131031)
< 
* Connection #0 to host localhost left intact
{""customers"":{""customers"":{""address"":""Japan"",""name"":""Ken""}}}
{noformat}

*I got a reponse as a JSON format. It's OK!*

B) But if ""Content-Type: application/xml""  specified,

{noformat}
$ LANG=C curl  -H ""Accept: application/json""  -H ""Content-Type: application/xml"" http://localhost:9999/rsServer/customer/ -v
* Hostname was NOT found in DNS cache
*   Trying ::1...
* connect to ::1 port 9999 failed: Connection refused
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 9999 (#0)
> GET /rsServer/customer/ HTTP/1.1
> User-Agent: curl/7.36.0
> Host: localhost:9999
> Accept: application/json
> Content-Type: application/xml
> 
< HTTP/1.1 200 OK
< Accept: application/json
< breadcrumbId: ID-emilia-46343-1400768103395-0-9
< Content-Type: application/xml
< Date: Thu, 22 May 2014 14:19:17 GMT
< Host: localhost:9999
< User-Agent: curl/7.36.0
< Transfer-Encoding: chunked
* Server Jetty(8.1.14.v20131031) is not blacklisted
< Server: Jetty(8.1.14.v20131031)
< 
* Connection #0 to host localhost left intact
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><customers><customers><address>Japan</address><name>Ken</name></customers></customers>
{noformat}

*I got a response as a xml format. It should be JSON format.*

C) replace SimpleConsumer with Default style.
( (2) in spring.xml)

{noformat}
 $ LANG=C curl  -H ""Accept: application/json""  -H ""Content-Type: application/xml"" http://localhost:9999/rsServer/customer/ -v
* Hostname was NOT found in DNS cache
*   Trying ::1...
* connect to ::1 port 9999 failed: Connection refused
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 9999 (#0)
> GET /rsServer/customer/ HTTP/1.1
> User-Agent: curl/7.36.0
> Host: localhost:9999
> Accept: application/json
> Content-Type: application/xml
> 
< HTTP/1.1 200 OK
< Content-Type: application/json
< Date: Thu, 22 May 2014 14:27:19 GMT
< Transfer-Encoding: chunked
* Server Jetty(8.1.14.v20131031) is not blacklisted
< Server: Jetty(8.1.14.v20131031)
< 
* Connection #0 to host localhost left intact
{""customers"":{""customers"":{""address"":""Japan"",""name"":""Ken""}}}

{noformat}

*It's OK without bindingStyle option.*",,githubbot,njiang,ssogabe,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7465,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,394291,,,Sun Jun 08 13:00:05 UTC 2014,,,,,,,,,,,"0|i1vw1b:",394429,,,,,,,,,,,,,,,,,,,,"25/May/14 12:47;githubbot;GitHub user ssogabe opened a pull request:

    https://github.com/apache/camel/pull/161

    CAMEL-7457 Does not override the ""Content-Type"" header of CXF response

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssogabe/camel CAMEL-7457

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/161.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #161
    
----
commit f3fb418f95bdd813ec80e22f1f530d4cf24e71d5
Author: Seiji Sogabe <sogabe@buildria.com>
Date:   2014-05-25T12:44:14Z

    CAMEL-7457 Does not override the ""Content-Type"" header of CXF response

----
;;;","25/May/14 12:47;ssogabe;I created a pull request https://github.com/apache/camel/pull/161;;;","26/May/14 07:56;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Seiji.;;;","08/Jun/14 13:00;githubbot;Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/161
;;;",,,,,,,,,,,,,,,,,,,,
Camel PropertiesComponent ignores custom parser in Blueprint,CAMEL-7456,12716049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,joeluo,joeluo,22/May/14 11:24,22/Jul/14 07:15,14/Jul/23 05:49,22/Jul/14 07:15,2.12.3,,,,,,,,2.12.5,2.13.3,2.14.0,,osgi,,,,,,0,,,,,,,"I have implemented a custom PropertiesParser which allows me to use system property placeholders in propertyPrefix and propertySuffix.

In my use case the propertyPrefix is defined as ""$\{container.stage}."", where container.stage is a jvm option defined at container creation. The value is one of dev, test and prod.

This works fine in Java DSL world (SCR bundle), but custom parser is ignored in Blueprint. Here is sample of my blueprint xml:
{code}
 <cm:property-placeholder id=""integration"" persistent-id=""org.apache.camel.sample.temp"" placeholder-prefix=""[["" placeholder-suffix=""]]"">
    <cm:default-properties>
        <cm:property name=""example"" value=""this value is the default""/>
        <cm:property name=""dev.example"" value=""this value is used in development environment""/>
        <cm:property name=""test.example"" value=""this value is used in test environment""/>
        <cm:property name=""prod.example"" value=""this value is used in production environment""/>
    </cm:default-properties>
</cm:property-placeholder>

<bean id=""parser"" class=""org.apache.camel.sample.MyCustomPropertiesParser""/>

<!-- Load properties for current container stage -->
<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""propertiesParser"" ref=""parser""/>
    <property name=""propertyPrefix"" value=""${container.stage}.""/>
    <property name=""fallbackToUnaugmentedProperty"" value=""true""/>
    <property name=""location"" value=""blueprint:integration,classpath:properties/temp.properties""/></bean>

<camelContext id=""temp"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <route id=""exampleRoute"">
        <from uri=""timer:foo?period=5000""/>
        <transform>
            <simple>{{example}}</simple>
        </transform>
        <to uri=""log:something""/>
    </route>
</camelContext>
{code}

The reason it did not work was because by default, it uses blueprint property resolver (useBlueprintPropertyResolver=""true"") to bridge PropertiesComponent to blueprint in order to support looking up property placeholders from the Blueprint Property Placeholder Service. Then it always creates a BlueprintPropertiesParser object and set it to PropertiesComponent. 

The customer Property Parser I created was only set into the BlueprintPropertiesParser object as a delegate Property Parser. Therefore, it was always the method parseUri() from the BlueprintPropertiesParser object got invoked. The same method from your custom parser was ignored. 

For more detail, please take a look at org.apache.camel.blueprint.CamelContextFactoryBean.initPropertyPlaceholder() function.

The only workaround is to add the attribute useBlueprintPropertyResolver=""false"" to <camelContext> element to disable default blueprint property resolver. However, I will have to change PropertiesComponent's ""location"" property to remove blueprint ""blueprint:integration"" from the comma separated value list:
{code}
 <property name=""location"" value=""classpath:properties/temp.properties""/> 
{code}
Because once I set it to false, I will no longer be able to lookup from blueprint property service.",,davsclaus,ggrzybek,joeluo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,394258,,,Tue Jul 22 07:15:54 UTC 2014,,,,,,,,,,,"0|i1vvtz:",394396,,,,,,,,,,,,,,,,,,,,"23/May/14 05:58;davsclaus;Frankly this has not been the intention to support custom properties parser in OSGi.

So what is the use case for having a custom parser? And having both blueprint and your custom what should happen as there are 2 parsers? So if a property is to be parsed should it use

- use blueprint first, and parse using custom afterwards
- use custom first, and parse using blueprint afterwards
- or something else?
;;;","23/May/14 08:48;joeluo;If I have a custom parser, then I'd expect my custom parser to be used first and then blueprint or default parser afterwards. There are a lot cases that people might want to use combination of them. For instance, in this case, I configured ""propertyPrefix"" property to use property placeholder $\{container.stage} here:
{code}
<property name=""propertyPrefix"" value=""${container.stage}.""/>
{code}
My custom parser basically just tries to look up system property for the value of the property placeholder ""container.stage"" to decide what environment I am in. Say ""dev"", ""prod"" or ""test"". Depends on the value returned by my custom parser, I can either go to blueprint or just default file property to find relevant value. And I still want to use blueprint in this case.

I understand that it was not the intention to support custom parser with blueprint. But I think it is reasonable use case I presented here and more people are going to use blueprint in future so I believe the custom parser with blueprint issue should be addressed in my opinion.;;;","21/Jul/14 14:11;ggrzybek;Custom parser is set as the delegate (see for example {{org.apache.camel.component.jasypt.JasyptPropertiesParser}} which decrypts properties which were first resolved by BlueprintParser) and is called after main parser.

If your use case is *only* about making propertyPrefix/propertySuffix resolvable, then maybe better&simpler would be to do it while configuring PropertiesConfigurer than by changing parser-delegate order.;;;","21/Jul/14 15:16;ggrzybek;{{BlueprintPropertiesParser}} uses provided (configured on {{PropertiesComponent}}) parser as delegate (see example with {{JasyptPropertiesParser}}).

The provided use case is rather about making {{propertyPrefix/Suffix}} resolvable against system/env properties and this is how it was resolved.;;;","21/Jul/14 15:20;ggrzybek;Reopening to update the docs;;;","22/Jul/14 07:15;ggrzybek;Documentation updated;;;",,,,,,,,,,,,,,,,,,
beanRef is caching instances - unwanted behavior,CAMEL-7452,12715687,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,21/May/14 07:02,01/Sep/14 20:08,14/Jul/23 05:49,01/Sep/14 20:08,2.13.0,,,,,,,,2.14.0,,,,,,,,,,0,,,,,,,"After upgrading from 2.11.0 to 2.13.0 the behavior of beanRef has changed(unwanted behavior). Beans only get instanted once, even if the cache option is explicitly set to ""false"".  

see http://camel.465427.n5.nabble.com/beanRef-is-caching-instances-in-camel-2-13-0-unwanted-behavior-td5751335.html",,cgiera,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393972,,,Mon Sep 01 12:56:33 UTC 2014,,,,,,,,,,,"0|i1vu33:",394112,,,,,,,,,,,,,,,,,,,,"01/Sep/14 12:56;davsclaus;Yeah I think we should

- cache by default (which is the behavior we have now)
- setting cache=false, should create a new instance on-demand, eg like a prototype scoped bean.;;;",,,,,,,,,,,,,,,,,,,,,,,
FTP consumer sometimes throws NullPointerException,CAMEL-7451,12715683,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,albertob,albertob,21/May/14 06:43,23/May/14 07:05,14/Jul/23 05:49,23/May/14 07:05,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-ftp,,,,,,0,,,,,,,"I have an exception from a ftp consumer only for few files.

- It happens on few files (2 or 3). Remote directory contains many files
(many thousand)

- These few files have the same ownership and permissions of the others
and are not empty

- I stopped the application that create the files, to avoid any possible
lock (anyway, I can modify them without problems)

- I tried to copy and rename the files, removing the old one, (to create
a completely new one) without success

- Looking at the source code in
FtpChangedExclusiveReadLockStrategy.java, the error happens getting the
timestamp of the file:
{code}
for (FTPFile f : files) {
    if (f.getName().equals(file.getFileNameOnly())) {
        newLastModified = f.getTimestamp().getTimeInMillis();
        newLength = f.getSize();
    }
}
{code}

- Nothing useful in the logs of the ftp server

Follow a trace log and the exception regarding one of those files:
{code}
2014-05-19 16:21:32,298 TRACE FtpChangedExclusiveReadLockStrategy -
Waiting for exclusive read lock to file:
RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml]
2014-05-19 16:21:32,298 TRACE FtpChangedExclusiveReadLockStrategy -
Waiting for exclusive read lock to file:
RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml]
2014-05-19 16:21:32,298 TRACE FtpChangedExclusiveReadLockStrategy -
Waiting for exclusive read lock to file:
RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml]
2014-05-19 16:21:32,299 TRACE FtpChangedExclusiveReadLockStrategy -
Using fast exists to update file information for
RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml]
2014-05-19 16:21:32,299 TRACE FtpChangedExclusiveReadLockStrategy -
Using fast exists to update file information for
RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml]
2014-05-19 16:21:32,640 TRACE FtpChangedExclusiveReadLockStrategy - List
files /dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml found 1 files
2014-05-19 16:21:32,640 TRACE FtpChangedExclusiveReadLockStrategy - List
files /dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml found 1 files
2014-05-19 16:21:32,650 WARN  FtpConsumer -
Endpoint[ftp://xxxx@yy.yy.yy.yy//dwrg1/moved?delay=60000&disconnect=true&fastExistsCheck=true&idempotent=true&idempotentKey=%24%7Bfile%3Aname%7D-%24%7Bfile%3Amodified%7D-%24%7Bfile%3Asize%7D&idempotentRepository=%23fileStore&include=DWRG1.*%5C.xml&maxMessagesPerPoll=10&noop=true&password=xxxxxx&readLock=changed&sortBy=file%3Amodified] cannot begin processing file: RemoteFile[/dwrg1/moved/DWRG1_2014-03-30T01h30Z.xml] due to: null. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
        at
org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy.acquireExclusiveReadLock(FtpChangedExclusiveReadLockStrategy.java:83)
        at
org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:49)
        at
org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:35)
        at
org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:326)
        at
org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:99)
        at
org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)
        at
org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)
        at
org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
        at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
        at java.util.concurrent.Executors
$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
        at java.util.concurrent.ScheduledThreadPoolExecutor
$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
        at java.util.concurrent.ScheduledThreadPoolExecutor
$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor
$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:745)
{code}","Camel 2.13.1
Oracle jdk 1.7.0_55
Debian GNU/Linux oldstable
Remote ftp server IIS on Windows 2000 server",albertob,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393968,,,Fri May 23 07:05:07 UTC 2014,,,,,,,,,,,"0|i1vu27:",394108,,,,,,,,,,,,,,,,,,,,"23/May/14 07:05;davsclaus;Fixed the potential NPE;;;",,,,,,,,,,,,,,,,,,,,,,,
"CsvDataFormat unable to setup header when useMaps=""true""",CAMEL-7450,12715528,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ccancellieri,ccancellieri,20/May/14 16:29,08/Jun/14 13:00,14/Jul/23 05:49,28/May/14 14:50,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-csv,,,,,,0,,,,,,,"Hi all,
 seems that it is impossible to setup the header of a csv when using a map.
It is always used the first line of the CSV file.
Using this configuration in conjunction with my patch I'm currently able to do so (also having the skipFirstLine flag working with useMaps=""true"")
Configuration:
https://github.com/ccancellieri/camel_poc/blob/master/src/main/resources/META-INF/spring/camel-context.xml
",Linux,ccancellieri,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393814,,,Sun Jun 08 13:00:02 UTC 2014,,,,,,,Patch Available,,,,"0|i1vt6v:",393965,,,,,,,,,,,,,,,,,,,,"20/May/14 16:32;githubbot;GitHub user ccancellieri opened a pull request:

    https://github.com/apache/camel/pull/158

    fix CAMEL-7450: CsvDataFormat unable to setup header when useMaps=true

    https://issues.apache.org/jira/browse/CAMEL-7450
    
    Hi all,
    seems that it is impossible to setup the header of a csv when using a map.
    It is always used the first line of the CSV file.
    Using this configuration in conjunction with my patch I'm currently able to do so (also having the skipFirstLine flag working with useMaps=""true"")
    Configuration:
    https://github.com/ccancellieri/camel_poc/blob/master/src/main/resources/META-INF/spring/camel-context.xml
    
    Is this acceptable for you?


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ccancellieri/camel CAMEL-7450-master-CsvDataFormat-useMap

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #158
    
----
commit f31d52b97e79fa4bb9a688bddac5e63e4813719a
Author: carlo <ccancellieri@hotmail.com>
Date:   2014-05-20T16:30:32Z

    fix CAMEL-7450: CsvDataFormat unable to setup header when useMaps=true

----
;;;","20/May/14 16:33;ccancellieri;The pull req is here:
https://github.com/apache/camel/pull/158;;;","26/May/14 09:58;ccancellieri;Just added (andh squashed into one push) JUnit test to speedup the acceptance process.
Please check again the pull req.;;;","28/May/14 14:49;njiang;Merged the PR into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Carlo.;;;","08/Jun/14 13:00;githubbot;Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/158
;;;",,,,,,,,,,,,,,,,,,,
Camel Subscribing to messages published by non-camel producers,CAMEL-7449,12715459,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,JamesGreenwood,JamesGreenwood,20/May/14 12:36,22/May/14 03:13,14/Jul/23 05:49,22/May/14 03:13,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-jms,,,,,,0,,,,,,,"I have come across an issue with Camel 2.13 when subscribing to a qpid messages published by a non-camel producers. The error happens with both Qpid C++ producer and also a python producer. 

An Null pointer exception is thrown in the JmsBinding.extractHeadersFromJMS on line 173. 

map.put(""JMSXUserID"", jmsMessage.getStringProperty(""JMSXUserID"")); 

JMSXUserID has not been set by the publisher as it is a non-JMS publisher. 

java.lang.NullPointerException
at java.lang.String.<init>(String.java:593)
at org.apache.qpid.client.message.AMQMessageDelegate_0_10.getStringProperty(AMQMessageDelegate_0_10.java:735)
at org.apache.qpid.client.message.AbstractJMSMessage.getStringProperty(AbstractJMSMessage.java.225)
at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:173)
at org.apache.camel.component.jms.JmsMessage.populateInitialHeaders(JmsMessage.java:222)

Full stack trace not show as it is on a different system

I can see a change was made to JmsBinding.java in Camel 2.12.2 to fix a ActiveMQ issue. This is what has caused the issue. The system is being upgraded from Camel 2.9.2 to Camel 2.13.1 and this issue has been experienced.",Redhat Linux,JamesGreenwood,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393745,,,Thu May 22 03:13:59 UTC 2014,,,,,,,,,,,"0|i1vssf:",393900,,,,,,,,,,,,,,,,,,,,"22/May/14 03:13;njiang;Now camel can check the NPE if the JMSXUserID is not set in the JMS message.;;;",,,,,,,,,,,,,,,,,,,,,,,
throttle EIP - unchanged value,CAMEL-7448,12715388,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,boday,ecaruana,ecaruana,20/May/14 09:13,27/Aug/14 03:48,14/Jul/23 05:49,27/Aug/14 03:48,2.13.1,,,,,,,,2.13.3,2.14.0,,,camel-core,eip,,,,,0,,,,,,,"Throttler Documentation [1] states ""If the header is absent, then the Throttler uses the old value. So that allows you to only provide a header if the  value is to be changed"".

however if the expression evaluates to null (header missing from message) the Throttler throws an exception (Throttler.java:108).

The workaround is to ensure that all messages carry the value (if the value is the same no changes will take affect). Adding an option to turn this on and off (e.g. allowNullException) would make it much easier to use (as per camel-users thread [2]).

[1] http://camel.apache.org/throttler.html
[2] http://camel.465427.n5.nabble.com/throttle-EIP-unchanged-value-td5751300.html
",,boday,davsclaus,ecaruana,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393674,,,Tue Aug 26 18:43:13 UTC 2014,,,,,,,,,,,"0|i1vsfb:",393836,,,,,,,,,,,,,,,,,,,,"04/Jun/14 04:27;boday;why not just throw the exception if the expression is null AND maximumRequestsPerPeriod hasn't been set otherwise (by a previous message, etc).  That would prevent NULL expression evaluations for the first message and allow for subsequent ones, etc...      

something like this in Throttler calculateDelay()...

{code:title=Throttler.java|borderStyle=solid}
        Object result = maxRequestsPerPeriodExpression.evaluate(exchange, Object.class);
        //if (result == null) {
        if (maximumRequestsPerPeriod == 0 && result == null) {
            throw new RuntimeExchangeException(""The max requests per period expression was evaluated as null: "" + maxRequestsPerPeriodExpression, exchange);
        }
{code};;;","26/Aug/14 08:40;davsclaus;Ben do you have time to work on this?;;;","26/Aug/14 17:19;boday;I can, I was just waiting for some feedback...does that approach sound alright?;;;","26/Aug/14 18:43;davsclaus;Ben, yeah this sounds like a good idea. I think you should try this change.;;;",,,,,,,,,,,,,,,,,,,,
Fix Eclipse m2e lifecycle configuration problem for maven-scalate-plugin_2.11,CAMEL-7446,12715335,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gzurowski,gzurowski,gzurowski,20/May/14 00:32,20/May/14 00:51,14/Jul/23 05:49,20/May/14 00:51,,,,,,,,,2.14.0,,,,build system,,,,,,0,m2e,,,,,,Upgrading the maven-scalate-plugin with CAMEL-7314 caused problems with Eclipse m2e because the plugin does not provide any lifecycle mapping configuration.,,githubbot,gzurowski,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393621,,,Tue May 20 00:51:47 UTC 2014,,,,,,,,,,,"0|i1vs33:",393781,,,,,,,,,,,,,,,,,,,,"20/May/14 00:35;githubbot;GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/157

    CAMEL-7446: Fix m2e lifecycle configuration problem

    Fix m2e lifecycle configuration problems caused by missing lifecycle
    mapping details in maven-scalate-plugin_2.11.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7446

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/157.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #157
    
----
commit e714a759a0bfd88b3ae7f3453ffda819a15ef13c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-05-20T00:16:34Z

    CAMEL-7446: Fix m2e lifecycle configuration problem
    
    Fix m2e lifecycle configuration problems caused by missing lifecycle
    mapping details in maven-scalate-plugin_2.11.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----
;;;","20/May/14 00:51;njiang;Applied the patch into camel master branch with thanks to Gregor.;;;","20/May/14 00:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/157
;;;",,,,,,,,,,,,,,,,,,,,,
Remote Print URI changed to UNC Name,CAMEL-7443,12714733,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cmahnke,cmahnke,16/May/14 09:53,28/Apr/16 12:28,14/Jul/23 05:49,28/Apr/16 12:28,2.13.0,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-printer,,,,,,1,,,,,,,"I'm using a printing URI in the form of lpr://lh.abc.de:631/bbk-test (Hostname changed) and getting an PrintException:

Reason: javax.print.PrintException: No printer found with name: \\lhgoe.gbv.de\bbk-test. Please verify that the host and printer are registered and reachable from this machine.

Which is true, since Camel Printer has changed my URI to a Windows UNC (see backslashes).",Mac OS X with remote CUPS IPP Printer,cmahnke,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,393046,,,Fri May 23 12:30:07 UTC 2014,,,,,,,,,,,"0|i1volj:",393213,,,,,,,,,,,,,,,,,,,,"23/May/14 06:04;davsclaus;Thanks for reporting.

What should be the name of the printer exactly?
{code}
//lh.abc.de:631/bbk-test
{code}

or 
{code}
lh.abc.de:631/bbk-test
{code}

or something else?;;;","23/May/14 12:30;cmahnke;Well, I's a bit complicated:
It should be lh.abc.de:631/bbk-test but as far as I know the Java printing SPI from Sun / Oracle doesn't support remote IPP printing, there are several Libraries which can do this [1]. It might be possible that the best solution for this bug is just throwing an exception [2] under Unix. Maybe after falling back to a local printer with the same fails. From my point of view at least the rewrite from URI to UNC shouldn't be done on Plattforms not using UNCs, since it is misleading.


[1] http://stackoverflow.com/questions/1655297/print-to-specific-printer-ipp-uri-in-java
[2] http://docs.oracle.com/javase/7/docs/api/java/lang/UnsupportedOperationException.html;;;",,,,,,,,,,,,,,,,,,,,,,
Camel Bindy compoent does not log the correct property when quoting is enabled,CAMEL-7440,12714201,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jsherman1,jsherman1,14/May/14 15:51,15/May/14 06:09,14/Jul/23 05:49,15/May/14 06:09,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-bindy,,,,,,0,,,,,,,"The property quoting is not logging the correct value in ./org/apache/camel/dataformat/bindy/BindyCsvFactory.java:

{code}
...
quoting = record.quoting();
LOG.debug(""CSV will be quoted: {}"", messageOrdered);
...
{code}

The value for messageOrdered is being logged instead.",,davsclaus,githubbot,jsherman1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,392514,,,Thu May 15 06:09:11 UTC 2014,,,,,,,,,,,"0|i1vlh3:",392698,,,,,,,,,,,,,,,,,,,,"14/May/14 15:52;githubbot;GitHub user jsherman1 opened a pull request:

    https://github.com/apache/camel/pull/152

    CSV log message should log the quoting property

    Fix for https://issues.apache.org/jira/browse/CAMEL-7440

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jsherman1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/152.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #152
    
----
commit 7dd3a69796b66c08af20da7a0a0bad6f005e1d34
Author: Jason Sherman <jsherman1@gmail.com>
Date:   2014-05-14T15:41:24Z

    CSV log message should log the quoting property

----
;;;","14/May/14 15:53;jsherman1;Pull request created to resolve this issue:

https://github.com/apache/camel/pull/152

Diff:

https://github.com/apache/camel/pull/152.diff;;;","15/May/14 06:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/152
;;;","15/May/14 06:09;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,
camel-mybatis - issues calling Oracle Stored procedure with multiple resultsets,CAMEL-7432,12713641,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ah.narayanan,ah.narayanan,12/May/14 14:13,26/Jun/14 20:13,14/Jul/23 05:49,26/Jun/14 20:13,2.12.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-mybatis,,,,,,0,,,,,,,"I am using camel-mybatis (version 2.12.0) component in Fuse 6.1 environment to invoke an oracle SP with 2 resultsets. The request is a HashMap and once mybatis maps the resultsets to java beans, the List is again saved in the original HashMap itself. 

Here is the snippet of SqlMap:

<select
    id=""searchUsers""
    parameterType=""java.util.HashMap""       
    statementType=""CALLABLE"">
    {call ORACLE.SP_NAME_1(
        #{userId,mode=IN,jdbcType=VARCHAR},
#{maxResultsCount,mode=IN,jdbcType=DECIMAL},
#{view,mode=IN,jdbcType=VARCHAR},
#{statusInfo,mode=OUT,jdbcType=CURSOR,resultMap=statusInfoRowMap},
#{memberInfo,mode=OUT,jdbcType=CURSOR,resultMap=claimInfoRowMap})}

And here is how I invoke the mybatis component:

<setBody>
    <groovy>
[
    userId:'ID-1234',
    maxResultsCount:20,
    view:'MEMBER',
]
   </groovy>
</setBody>
<to uri=""mybatis:searchUsers?statementType=SelectOne"" />

Since there are no result object (all the results are stored in the original requested HashMap itself), MyBatisProducer is setting null to exchange OUT message. The original body which contains the results from stored procedure is lost.

The Question is: is this the expected behaviour? mybatis component already stores the result in exchange header, so why to update the body as well?

The workaround I had to do was - to store the original body to a header, invoke mybatis and reset body from the header (which has the stored procedure result now) : 
<setBody>
            <groovy>
                [
             userId:'ID1234',
             maxResultsCount:20,
             view:'MEMBER'
          ]
        </groovy>
    </setBody>
    <setHeader headerName=""originalRequest"">
        <simple>${body}</simple>
    </setHeader>
    <to uri=""mybatis:searchUsers?statementType=SelectOne"" />
    <setBody>
        <simple>${in.headers.originalRequest}</simple>
    </setBody>
    <log message=""status: ${body.statusInfo}"" />",,ah.narayanan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,391957,,,2014-05-12 14:13:12.0,,,,,,,,,,,"0|i1vi4v:",392160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Impossible to use an existing javax.mail.Session with DefaultJavaMailSender,CAMEL-7431,12713625,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,smokeshield,smokeshield,12/May/14 13:09,13/May/14 14:26,14/Jul/23 05:49,13/May/14 14:26,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-mail,,,,,,0,,,,,,,"When using DefaultJavaMailSender with an existing javax.mail.Session instance (i.e. retrieved from JNDI) it is not possible to leave host and port unconfigured.

My JavaMailSender is configured as follows:

    @Bean
    public JavaMailSender mailSender() {
        JavaMailSender jms = new DefaultJavaMailSender();
        jms.setSession(mailSession);
        jms.setProtocol(""smtp"");
        return jms;
    }

mailSession is a preconfigured Session instance retrieved from JNDI registry. I do not know about it's configuration.

When calling the send() method, it tries to connect using the connect(host, port, username, password) method passing the (unconfigured) host and port which defaults to localhost:0 and then fails.

In case the session is supplied, it should call connect() instead.","Windows 8.1.1, Oracle JDK6u45, JavaMail 1.4.7",njiang,smokeshield,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,391941,,,Tue May 13 14:26:14 UTC 2014,,,,,,,,,,,"0|i1vi1b:",392144,,,,,,,,,,,,,,,,,,,,"12/May/14 13:09;smokeshield;StackTrace of the Exception :

javax.mail.MessagingException: Could not connect to SMTP host: localhost, port: 0;
  nested exception is:
	java.net.ConnectException: connect: Address is invalid on local machine, or port is not valid on remote machine
	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1961)
	at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:654)
	at javax.mail.Service.connect(Service.java:295)
	at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:111)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:56)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:143)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:307)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:138)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:168)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:119)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:359)
	at lu.chd.svc.mailing.service.MailingServiceImpl.sendMail(MailingServiceImpl.java:80)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:78)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)
	at com.sun.proxy.$Proxy56.sendMail(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:212)
	at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:39)
	at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:78)
	at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:114)
	at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:74)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:863)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:556)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:369)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:944)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1005)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.net.ConnectException: connect: Address is invalid on local machine, or port is not valid on remote machine
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
	at java.net.Socket.connect(Socket.java:529)
	at java.net.Socket.connect(Socket.java:478)
	at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:321)
	at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:237)
	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1927)
	... 78 more;;;","13/May/14 08:38;njiang;I just checked the code of java mail, we just need to set the default port of DefaultJavaMailSender to -1, then we can get the same result if the host, username and password parameter are not set.
;;;","13/May/14 14:26;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
Camel Properties Component concatenation issue ,CAMEL-7429,12713287,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acosentino,acosentino,09/May/14 10:48,14/Aug/14 09:27,14/Jul/23 05:49,19/Jun/14 07:18,2.12.3,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,,,,,,0,,,,,,,"Hi,

Suppose you have a properties file of this type

{code}
#PROPERTIES CONCATENATION
prop1=file:
prop2=dirname
concat.property={{prop1}}{{prop2}}

#PROPERTIES WITHOUT CONCATENATION
property.complete=file:dirname
{code}

and you want to use the property concat.property. Using Camel 2.10.3 loading this property doesn't create any kind of problem. When I upgrade to Camel 2.12.3 I get an exception, that you can reproduce with the following informations.

In *DefaultPropertiesParser* class of org.apache.camel.component.properties package, I found a strange behaviour relative to that specific kind of property.  When I execute a test like the following, (the first try to use concatenated property and the second try to use property without concatenation):

{code:title=PropertiesComponentConcatenatePropertiesTest.java}
import org.apache.camel.CamelContext;
import org.apache.camel.ContextTestSupport;
import org.apache.camel.builder.RouteBuilder;

public class PropertiesComponentConcatenatePropertiesTest extends ContextTestSupport {
    
    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext context = super.createCamelContext();
        context.addComponent(""properties"", new PropertiesComponent(""classpath:org/apache/camel/component/properties/concatenation.properties""));
        return context;
    }
    
    @Override
    protected void setUp() throws Exception {
        System.setProperty(""environment"", ""junit"");
        super.setUp();
    }
    
    @Override
    protected void tearDown() throws Exception {
        System.clearProperty(""environment"");
        super.tearDown();
    }
    
    public void testConcatPropertiesComponentDefault() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").setBody(simple(""${properties:concat.property}""))
                .to(""mock:result"");
            }
        });
        context.start();

        getMockEndpoint(""mock:result"").expectedBodiesReceived(""file:dirname"");

        template.sendBody(""direct:start"", ""Test"");

        assertMockEndpointsSatisfied();
    }
    
    public void testWithoutConcatPropertiesComponentDefault() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").setBody(simple(""${properties:property.complete}""))
                .to(""mock:result"");
            }
        });
        context.start();

        getMockEndpoint(""mock:result"").expectedBodiesReceived(""file:dirname"");

        template.sendBody(""direct:start"", ""Test"");

        assertMockEndpointsSatisfied();
    }
}
{code}

The first test return the following exception:
{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Test]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:622)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:463)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:139)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at org.apache.camel.component.properties.PropertiesComponentConcatenatePropertiesTest.testConcatPropertiesComponentDefault(PropertiesComponentConcatenatePropertiesTest.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: prop1}}{{prop2
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)
	at org.apache.camel.builder.ExpressionBuilder$78.evaluate(ExpressionBuilder.java:1784)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:83)
	at org.apache.camel.processor.SetBodyProcessor.process(SetBodyProcessor.java:46)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	... 22 more
Caused by: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: prop1}}{{prop2
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:38)
	at org.apache.camel.component.properties.DefaultPropertiesParser.createPlaceholderPart(DefaultPropertiesParser.java:189)
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:105)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:158)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.builder.ExpressionBuilder$78.evaluate(ExpressionBuilder.java:1781)
	... 40 more
{code}

It seems that *DefaultPropertiesParser* doesn't like concatenation of properties. I've forked Camel project on GitHub and I've added the unit test posted above. Here is the link: https://github.com/ancosen/camel

Investigating the history of the particular class I found that the problem should arise from:
 *CAMEL-5328 supports resolution of nested properties in PropertiesComponent*

Here is the link of the commit:
https://github.com/apache/camel/commit/83f4b0f485521967d05de4e65025c4558a75ff3c

Thanks.
Bye","Ubuntu 13.10, Windows 7",acosentino,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7189,CAMEL-7693,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,391603,,,Sat Jul 12 08:44:35 UTC 2014,,,,,,,,,,,"0|i1vg0n:",391815,,,,,,,,,,,,,,,,,,,,"17/May/14 12:40;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/154

    [CAMEL-7429] Camel Properties Component concatenation issue

    Hi all,
    
    This pull request is related to
    **https://issues.apache.org/jira/browse/CAMEL-7429**
    
    I added a new private method in the **DefaultPropertiesParser** class to determine if the property we're parsing is a concatenation with the aim to distinguish it from a nesting.
    
    I added an **AllPropertiesTest** test class (SuiteTest) to execute all the tests related to Properties when some improvements or patches are added. I have improved the Tests with a new class **PropertiesComponentConcatenatePropertiesTest** where I test the new DefaultPropertiesParser.
    
    Hope this should be useful.
    
    Thanks.
    
    Bye

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-7429-concatenatedproperties

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/154.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #154
    
----
commit f89de09a25e6b8a4a284d2c406c1e146bab16750
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-17T12:28:29Z

    Fixes CAMEL-7429 Camel Properties Component concatenation issue

----
;;;","17/May/14 12:46;acosentino;I think I've fixed the concatenation case. Anyway I'll add other tests later.;;;","20/May/14 05:56;davsclaus;Thanks for the PR but its not a complete solution, as you can have 
{code}
{{foo}blabla{{bar}}{{baz}}123{{dude}}
{code}
etc. 

So its not as easy as just to check for 
{code}
}}{{
{code}
;;;","20/May/14 06:00;acosentino;You're right. I'll improve this solution.;;;","20/May/14 06:07;acosentino;We can have

- nested properties
- concatenated properties
- something like what you've posted 

What else? 

In *DefaultParserProperties* class in *isNestProperty* private method we just control this:

{code}
uri.startsWith(prefixToken) && uri.endsWith(suffixToken)
{code}

as condition to have a nested property.. I think this is a soft condition and this is the point where concatenation fails.;;;","18/Jun/14 11:34;githubbot;GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/189

    CAMEL-7429 Camel Properties Component concatenation issue

    I've changed the logic for finding and replacing properties. All the previous tests still pass and the new contatenation one of Adrea is working too.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-7429

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/189.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #189
    
----
commit 1258691c272ee31dca112141cfcf1f0439e8e506
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2014-06-18T11:31:39Z

    CAMEL-7429 Camel Properties Component concatenation issue

----
;;;","18/Jun/14 12:14;davsclaus;Thanks Anotine, but unfortunately the latest PR breaks in other modules, such as camel-blueprint.

Try running tests for components, eg it should pass for camel-spring, camel-blueprint, camel-test-blueprint, camel-scala, camel-groovy etc.
{code}
testConfigAdmin(org.apache.camel.test.blueprint.ConfigAdminOverridePropertiesOutsideCamelContextTest)  Time elapsed: 2.531 sec  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[{{destination}}] <<< in route: Route(route1)[[From[direct:start]] -> [Bean[ref:myCoolBean m... because of Property with key [destination] not found in properties from text: {{destination}}
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:910)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2068)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1816)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: java.lang.IllegalArgumentException: Property with key [destination] not found in properties from text: {{destination}}
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:207)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:131)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:77)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:42)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:158)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1223)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:571)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:474)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2068)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1816)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}
;;;","18/Jun/14 12:34;antoine.dessaigne;Sorry about that, I'll fix this;;;","19/Jun/14 07:05;antoine.dessaigne;Ok, I've fixed the issue in the pull request, it should be good now;;;","19/Jun/14 07:18;davsclaus;Thanks for the PR;;;","19/Jun/14 07:54;githubbot;Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/189
;;;","12/Jul/14 08:44;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/154
;;;",,,,,,,,,,,,
camel-netty-http component should skip reading the form body if it is bridgeEndpoint,CAMEL-7427,12713272,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/May/14 08:34,09/May/14 11:47,14/Jul/23 05:49,09/May/14 11:46,2.13.0,,,,,,,,2.13.2,2.14.0,,,camel-netty-http,,,,,,0,,,,,,,We need to fix the same issue of CAMEL-7426 in camel-netty-http,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7426,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,391588,,,Fri May 09 11:46:59 UTC 2014,,,,,,,,,,,"0|i1vfxb:",391800,,,,,,,,,,,,,,,,,,,,"09/May/14 11:46;njiang;Applied the patch into camel master and camel-2.13.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http component should skip reading the form body if it is bridgeEndpoint,CAMEL-7426,12713271,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/May/14 08:32,09/May/14 11:46,14/Jul/23 05:49,09/May/14 11:46,2.11.4,2.12.3,2.13.0,,,,,,2.12.4,2.13.2,2.14.0,,camel-http,camel-http4,,,,,0,,,,,,,"When the camel http related component gets the post request of from, it always parsers the request body to get the from parameter. This feature could cause some trouble when the camel route proxy the request to other endpoint.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7427,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,391587,,,Fri May 09 11:46:36 UTC 2014,,,,,,,,,,,"0|i1vfx3:",391799,,,,,,,,,,,,,,,,,,,,"09/May/14 11:46;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
StaxSource doesn't produce correct SAX events with default namespace,CAMEL-7424,12713034,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,08/May/14 08:16,02/Feb/15 14:37,14/Jul/23 05:49,08/May/14 09:41,2.12.3,2.13.0,,,,,,,2.13.2,2.14.0,,,camel-xslt,,,,,,0,,,,,,,See full description here: CXF-5733,,ggrzybek,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,391350,,,Thu May 08 09:45:20 UTC 2014,,,,,,,,,,,"0|i1veif:",391570,,,,,,,,,,,,,,,,,,,,"08/May/14 08:36;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/145

    [CAMEL-7424] copy new version of StaxSource from CXF (with tests)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/145.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #145
    
----
commit 7884c7ac22363cb3e0cf30230d26c37df1ae07d6
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-05-08T08:34:17Z

    [CAMEL-7424] copy new version of StaxSource from CXF (with tests)

----
;;;","08/May/14 09:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/145
;;;",,,,,,,,,,,,,,,,,,,,,,
Netty HTTP producer ignores requestTimeout option,CAMEL-7423,12713028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,08/May/14 07:14,08/May/14 10:54,14/Jul/23 05:49,08/May/14 07:20,,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-netty-http,,,,,,0,,,,,,,"{{DefaultClientPipelineFactory}} respects the {{requestTimeout}} option, but {{HttpClientPipelineFactory}} doesn't. We should add {{requestTimeout}} resolution logic (and {{ReadTimeoutHandler}}) to the HTTP pipeline creation process.",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,391344,,,Thu May 08 10:53:57 UTC 2014,,,,,,,,,,,"0|i1veh3:",391564,,,,,,,,,,,,,,,,,,,,"08/May/14 07:20;hekonsek;Master fix: 5c8b2e953a7e7b23f849849a14ff8a018faa586c

I'll backport the fix later today.;;;","08/May/14 10:34;hekonsek;Backported to 2.13.2 in 3827064b39137aa8134cc8359bc849c27477c7b7.;;;","08/May/14 10:53;hekonsek;Backported to 2.12.4 in 8e3b01b26bca49cface17956f38805c330d7dfba.
;;;",,,,,,,,,,,,,,,,,,,,,
org.apache.camel.impl.JndiRegistry.findByTypeWithName,CAMEL-7418,12712704,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andrericos,andrericos,06/May/14 22:59,02/Jul/14 18:57,14/Jul/23 05:49,02/Jul/14 18:57,2.13.0,,,,,,,,2.14.0,,,,camel-core,,,,,,0,,,,,,,"I guess this line isn't correct:
if (type.isInstance(pair.getClass()) || type.getName().equals(pair.getClassName()))

The variable ""pair.getClass()"" always returns ""javax.naming.NameClassPair"" or its subclasses and the method ""isInstance"" works only with Instances, but doesnt Classes.


 I think the correct code should be:
if (type.isAssignableFrom(Class.forName(pair.getClassName())))


I've tried to test a transacted route, but i couldnt because the error: 
Failed to create route route1 at: >>> Transacted[] <<< in route: Route(route1)[[From[direct:start]] -> [Transacted[]]] because of No bean could be found in the registry of type: PlatformTransactionManager
",,andrericos,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,391020,,,Thu May 08 13:37:40 UTC 2014,,,,,,,,,,,"0|i1vcif:",391246,,,,,,,,,,,,,,,,,,,,"08/May/14 06:36;davsclaus;We cannot do Class.forName as that does not work with classloading in various containers / OSGi etc.

;;;","08/May/14 13:37;andrericos;ok, but at that moment we have only the class name.;;;",,,,,,,,,,,,,,,,,,,,,,
lazyLoad with CSV blows up on last line,CAMEL-7415,12712508,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/May/14 06:51,24/May/14 10:23,14/Jul/23 05:49,24/May/14 09:44,2.12.3,2.13.0,,,,,,,2.12.4,2.13.2,2.14.0,,camel-csv,,,,,,0,,,,,,,"{code}

CsvDataFormat csv = new CsvDataFormat() 
csv.setDelimiter(' ') 
csv.setSkipFirstLine(false) 
csv.setLazyLoad(true) 

CamelContext camelContext = new DefaultCamelContext() 
camelContext.addRoutes(new RouteBuilder() { 
def void configure() { 
from('direct:start') 
.unmarshal(csv) 
.split(body()).streaming() 
.log('row: ${body}') 
} 
}) 
camelContext.start() 

ProducerTemplate t = camelContext.createProducerTemplate() 
t.sendBody('direct:start', new File('/Users/timbo/data/test.txt')) 

camelContext.stop() 

{code}

Here is the exception when camel try to access the last line of the file.

{code}

java.lang.IllegalStateException: java.io.IOException: Stream closed 
at 
org.apache.camel.dataformat.csv.CsvIterator.next(CsvIterator.java:61) 
at 
org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:170) 
at 
org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:146) 
at 
org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:502) 
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390824,,,Sat May 24 10:23:34 UTC 2014,,,,,,,,,,,"0|i1vbdr:",391062,,,,,,,,,,,,,,,,,,,,"06/May/14 06:58;njiang;This issue is caused by the UnmarshalProcessor always wants to close the inputstream even the marshalled object is iterator.
The input stream can be closed by the iterator, so leave the input stream if the result object is iterator solve the issue.;;;","24/May/14 07:47;antoine.dessaigne;Hi Willem,

Correct me if I'm wrong but the InputStream won't be closed if the iterator is not processed until the end. This case can happen if you're processing manually the iterator and not rely on split.

For my pull request of CAMEL-7447, I've called exchange.addOnCompletion in order to close the inputstream.

Is it correct ?;;;","24/May/14 09:41;njiang;Hi Antoine 

I think we need to let the user close the iterator or the input stream when he finish the process.

Closing the stream in exchange.onCompletion could cause some trouble if we just route the message to other system which is not part of camel route,  As the exchange onCompletion is called when the route processes the exchange. we may hit the same issue as we meet in CAMEL-7415.

Regards,

Willem;;;","24/May/14 09:44;njiang;Applied the patch into master, camel-2.12.x and camel-2.13.x branches.;;;","24/May/14 10:23;antoine.dessaigne;Hi Willem,

Thanks you very much for sharing your insights.

Antoine;;;",,,,,,,,,,,,,,,,,,,
[docs] The docs state camel-jdbc does not support transactions.,CAMEL-7412,12712316,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,tmielke,tmielke,05/May/14 14:17,06/May/14 15:12,14/Jul/23 05:49,06/May/14 15:12,2.12.3,,,,,,,,2.13.0,,,,camel-jdbc,,,,,,0,,,,,,,"The docs at http://camel.apache.org/jdbc.html state 

{quote}
This component can not be used as a Transactional Client. If you need transaction support in your route, you should use the SQL component instead.
{quote}

This statement however seems to be wrong. 
I have a demo at https://github.com/tmielke/fuse-demos/tree/master/Camel/Camel-JMS-JDBC-XA-TX that uses the camel-jdbc component in an XA transaction scenario without errors.

Can someone please confirm the docs is wrong and I can correct it in the docs? 

This statement was introduced in 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27822683
 ",,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390632,,,Tue May 06 15:12:34 UTC 2014,,,,,,,,,,,"0|i1va9b:",390878,,,,,,,,,,,,,,,,,,,,"06/May/14 15:08;tmielke;I am going to remove the statement for now. Please let me know if this raises any concerns.
Again, have tested the camel-jdbc component (2.12.0) with XA transactions myself and am confident that it works correctly. ;;;","06/May/14 15:12;tmielke;Fixed in revision 31 of 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=64933;;;",,,,,,,,,,,,,,,,,,,,,,
EventDrivenPollingConsumer can lose exchanges when the internal queue is full,CAMEL-7411,12712294,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bwaldvogel,bwaldvogel,05/May/14 11:39,08/May/14 11:21,14/Jul/23 05:49,06/May/14 07:56,2.13.0,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"The exchange processing in the {{EventDrivenPollingConsumer}} can lose exchanges when the internal queue is bounded and full.

The implementation:
{noformat}
public void process(Exchange exchange) throws Exception {
    queue.offer(exchange);
}
{noformat}

The reason is that {{BlockingQueue.offer(...)}} is non-blocking and returns a boolean which indicates whether the element was added.
However, the return value is ignored causing the exchange to get lost if it could not be added.

A potential workaround is to use an unbounded BlockingQueue (e.g. LinkedBlockingQueue).",,bwaldvogel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390610,,,Thu May 08 11:21:00 UTC 2014,,,,,,,,,,,"0|i1va4f:",390856,,,,,,,,,,,,,,,,,,,,"06/May/14 07:56;davsclaus;Thanks for reporting. We now block by default, and there is new options you can use to configure the initial queue size, and whether to block or not.

Documented at
https://cwiki.apache.org/confluence/display/CAMEL/Polling+Consumer;;;","07/May/14 07:23;bwaldvogel;Thanks for fixing this so quickly!

Is it also planned to backport this fix on Camel 2.12?

One nit-picky remark on your [commit f0b8e011|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=f0b8e011f29772da7d0da92852b8f70d5b31ad80]:
Why do do you use a {{LinkedBlockingDeque}} instead of a {{LinkedBlockingQueue}}?

How do you like the idea to add another option (e.g. {{pollingConsumerBlockTimeout}}) to set a max wait time before it gives up adding an exchange to the internal queue?;;;","08/May/14 05:12;davsclaus;Thanks for spotting the dequeue.

Log another ticket for the timeout idea.;;;","08/May/14 11:21;bwaldvogel;Thanks!

I've created a follow-up ticket: CAMEL-7425.;;;",,,,,,,,,,,,,,,,,,,,
Http4 httpClient.XXXX parameters no longer recognized,CAMEL-7410,12712290,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,benjamin.habegger,benjamin.habegger,05/May/14 10:57,05/May/14 13:35,14/Jul/23 05:49,05/May/14 13:35,2.13.0,,,,,,,,2.13.0,,,,camel-http4,,,,,,0,,,,,,,"When switching from version 2.12.3 to 2.13.0 a route using the http4 component in which the httpClient.cookiePolicy and httpClient.soTimeout parameters were set inline won't start generating the following error:

Caused by: 
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://localhost/?httpClient.cookiePolicy=ignoreCookies&httpClient.soTimeout=10000 due to: There are 2 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{cookiePolicy=ignoreCookies, soTimeout=10000}]

This route worked as is in 2.12.3. No indication in the document shows how to set these parameters otherwise.

",,benjamin.habegger,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390606,,,Mon May 05 13:35:19 UTC 2014,,,,,,,,,,,"0|i1va3j:",390852,,,,,,,,,,,,,,,,,,,,"05/May/14 12:00;njiang;camel-http4 is switched to use [HttpClientBuilder|https://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html] and [RequestConfig.Builder|https://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/client/config/RequestConfig.Builder.html] to setup the client. There are some changes on the httpClient setting just like:
{code}
cookPolicy --> cookieSpec,  soTimeout --> socketTimeout
{code}

I will update the wiki page for these changes.
;;;","05/May/14 13:35;njiang;Updated the wiki page of camel-http4 component.;;;",,,,,,,,,,,,,,,,,,,,,,
Camel ZipIterator should not eat the IOException,CAMEL-7409,12712229,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/May/14 02:24,06/May/14 15:23,14/Jul/23 05:49,05/May/14 03:24,2.13.0,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,"If there are some thing wrong with the Zip file which is split by ZipIterator, we cannot find any warning or exception from the camel route. We should not let ZipIterator eat up the exception without do anything.",,cp1,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390548,,,Tue May 06 15:23:45 UTC 2014,,,,,,,,,,,"0|i1v9s7:",390801,,,,,,,,,,,,,,,,,,,,"05/May/14 03:24;njiang;Applied the patch into camel master, camel-2.12.x and camel-2.13.x.;;;","05/May/14 16:13;cp1;Willem, have you added corrupted zip file for testing? W/o it all tests passed as expected, but if you add corrupted zip file, tests will fail, w/o any errors:

{code}
testSplitter(org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest)  Time elapsed: 2.186 sec  <<< FAILURE!
java.lang.AssertionError: mock://entry Received message count. Expected: <2> but was: <3>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest.testSplitter(ZipSplitterRouteIssueTest.java:39)

testSplitterWithWrongFile(org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest)  Time elapsed: 11.211 sec  <<< FAILURE!
java.lang.AssertionError: mock://errors Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest.testSplitterWithWrongFile(ZipSplitterRouteIssueTest.java:49)
{code}

Steps to reproduce: any file with .zip extension, or corrupted data.zip (in my tests I have removed 1st 2 bytes from data.zip).;;;","06/May/14 07:34;njiang;Hi Serge 

I think just removing the first 2 bytes of the data.zip is not enough, I debugged the code and found out if I did that, camel just cannot read any thing from the zip entry. If I messed up the data.zip file by remove the bytes from multiple place, I can get the same as I test with an empty file stream.;;;","06/May/14 15:23;cp1;Yes, probably ZipInputStream just can't read anything, but ZipFile could detect such corrupted zips.

What about something like in ZipIterator constructor?
{code}
        try {
            final ZipFile zipFile= new ZipFile(inputMessage.getBody(File.class));
            final InputStream inputStream = inputMessage.getBody(InputStream.class);
            if (inputStream instanceof ZipInputStream) {
                zipInputStream = (ZipInputStream)inputStream;
            } else {
                zipInputStream = new ZipInputStream(new BufferedInputStream(inputStream));
            }
        } catch (ZipException e) {
            LOGGER.error(""ZipException"", e);
            zipInputStream= null;
// or            throw new RuntimeException(""ZipException"", e);
        } catch (IOException e) {
            LOGGER.error(""IOException"", e);
            zipInputStream= null;
// or           throw new RuntimeException(""IOException"", e);
        }
{code};;;",,,,,,,,,,,,,,,,,,,,
FTP route considers files as in progress after error in poll,CAMEL-7407,12711914,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nordinh,nordinh,02/May/14 10:00,26/Jun/14 20:13,14/Jul/23 05:49,26/Jun/14 20:13,2.13.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-ftp,,,,,,0,,,,,,,"When an error occurs in the middle of polling (e.g. read timeout on ftp server), all files that have been read up to that point are stored in the inProgressRepospitory (last line GenericFileConsumer.isValidFile()). Due to the error, those files are not passed on to the ftp route, but remain in the inProgressRepository. The effect is that those files are never picked up unless we clear the inProgressRepository somehow (e.g. by restarting). When polling fails, files should not be allowed to remain in the inProgressRepository",,davsclaus,nordinh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390233,,,Thu Jun 26 19:30:04 UTC 2014,,,,,,,,,,,"0|i1v7sf:",390470,,,,,,,,,,,,,,,,,,,,"26/Jun/14 19:30;davsclaus;Thanks for reporting. Yeah indeed there is a problem there, if the exception occurs in the pollDirectory method.;;;",,,,,,,,,,,,,,,,,,,,,,,
Empty password in JCR Endpoint URI causes NPE,CAMEL-7406,12711881,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gzurowski,gzurowski,gzurowski,02/May/14 02:31,02/May/14 09:45,14/Jul/23 05:49,02/May/14 09:18,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-jcr,,,,,,0,,,,,,,"Leaving the password empty in a Camel JCR Endpoint URI (e.g. ""jcr://gregor:@repository/home"") leads to NullPointerExceptions. Empty passwords are valid when used with Jackrabbit's SimpleSecurityManager and useful for testing.

{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jcr://gregor:@repository/home/test due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:534)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:190)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:499)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)
	... 38 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.jcr.JcrEndpoint.<init>(JcrEndpoint.java:60)
	at org.apache.camel.component.jcr.JcrComponent.createEndpoint(JcrComponent.java:31)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:123)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:514)
	... 47 more
{code}",,davsclaus,githubbot,gzurowski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390200,,,Fri May 02 09:45:59 UTC 2014,,,,,,,,,,,"0|i1v7l3:",390437,,,,,,,,,,,,,,,,,,,,"02/May/14 02:43;githubbot;GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/142

    CAMEL-7406: Avoid NPE when password empty in JCR endpoint URI

    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7406

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #142
    
----
commit 1073c9737e8f2f003966170aca0bdd6751e4396a
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-05-02T02:39:09Z

    CAMEL-7406: Avoid NPE when password empty in JCR endpoint URI
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----
;;;","02/May/14 09:18;davsclaus;Thanks for the PR;;;","02/May/14 09:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/142
;;;",,,,,,,,,,,,,,,,,,,,,
SQS endpoint - HttpRoute class not found at route startup,CAMEL-7405,12711718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jeltgroth,jeltgroth,01/May/14 14:59,26/Jun/14 18:22,14/Jul/23 05:49,26/Jun/14 18:22,2.13.0,,,,,,,,2.13.2,2.14.0,,,camel-aws,karaf,,,,,0,,,,,,,"I have a bundle using aws-sqs endpoint that works in Karaf 2.3.3 and Camel 2.12.1.  We have to upgrade Karaf 2.3.5 and Camel to 2.13.0 for required improvements, and now my bundle fails to load because of missing classes.  I would be satisfied to know which packages to include in my imports or which feature I may be missing,  I have run the below steps in two versions of Camel.  The bundle works in 2.12.1 and fails in 2.13.0.  Here are the steps for version 2.13.0:

$ mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.13.0 -DgroupId=com.example.aws -DartifactId=example-aws -Dpackage=com.example.aws -Dversion=2.13.0
$ mvn package
$ mvn camel:run
(verifies archetype runs)

Add dependency to pom.xml
	<dependency>    
	  <groupId>org.apache.camel</groupId>    
	  <artifactId>camel-aws</artifactId>    
	  <version>2.13.0</version>
	</dependency>

Add following to maven-bundle-plugin in pom.xml
    <Import-Package>
      org.apache.http.conn.routing;version=""[4.3.3,5)"",
      *
    </Import-Package>

Change endpoint in blueprint.xml
    <to uri=""aws-sqs://test-queue?accessKey=yourkey&amp;secretKey=yourkey"" />

(need to change or skip test to package)
$ mvn -Dmaven.test.skip=true package
$ mvn camel:run
(above works, so maven is including all classes)

Install Karaf 2.3.5
Set JAVA_HOME to JDK 1.7.0_51
karaf@root> features:chooseurl camel 2.13.0
karaf@root> features:install camel-core
karaf@root> features:install camel-blueprint
karaf@root> features:install camel-aws

Drop bundle into deploy folder and observe the following stack trace in the Karaf console:
karaf@root> ERROR: Bundle example-aws [70] EventDispatcher: Error during dispatch. (java.lang.NoClassDefFoundError: org.apache.http.conn.routing.HttpRoute not found by org.apache.servicemix.bundles.aws-java-sdk [68])
java.lang.NoClassDefFoundError: org.apache.http.conn.routing.HttpRoute not found by org.apache.servicemix.bundles.aws-java-sdk [68]
        at com.amazonaws.http.conn.$Proxy36.<clinit>(Unknown Source)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
        at java.lang.reflect.Proxy.newInstance(Proxy.java:748)
        at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:739)
        at com.amazonaws.http.conn.ClientConnectionManagerFactory.wrap(ClientConnectionManagerFactory.java:42)
        at com.amazonaws.http.impl.client.SdkHttpClient.<init>(SdkHttpClient.java:29)
        at com.amazonaws.http.HttpClientFactory.createHttpClient(HttpClientFactory.java:98)
        at com.amazonaws.http.AmazonHttpClient.<init>(AmazonHttpClient.java:155)
        at com.amazonaws.AmazonWebServiceClient.<init>(AmazonWebServiceClient.java:118)
        at com.amazonaws.AmazonWebServiceClient.<init>(AmazonWebServiceClient.java:102)
        at com.amazonaws.services.sqs.AmazonSQSClient.<init>(AmazonSQSClient.java:166)
        at com.amazonaws.services.sqs.AmazonSQSClient.<init>(AmazonSQSClient.java:147)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.createClient(SqsEndpoint.java:219)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.getClient(SqsEndpoint.java:204)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:81)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)

(remaining stack omitted)
","Windows 7 Ent SP1 AND GNU/Linux 2.6.18-274.17.1.0.1.el5
JDK: 1.7.0_51
Apache Karaf (2.3.5)
camel-core (2.13.0)
camel-karaf-commands (2.13.0)
camel-blueprint (2.13.0)
Apache Apache HttpCore OSGi bundle (4.3.2)
Apache Apache HttpClient OSGi bundle (4.3.3)
Commons Codec (1.8.0)
Jackson JSON processor (1.9.12)
Data mapper for Jackson JSON processor (1.9.12)
Apache ServiceMix :: Bundles :: aws-java-sdk (1.7.1.1)
camel-aws (2.13.0)",davsclaus,jeltgroth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SMX4-1751,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,390039,,,Thu Jun 26 18:22:31 UTC 2014,,,,,,,,,,,"0|i1v6lj:",390277,,,,,,,,,,,,,,,,,,,,"02/May/14 06:32;davsclaus;Yes the aws-sdk bundle is flawed, logged a ticket SMX4-1751.;;;","02/May/14 06:45;davsclaus;If you enabled dynamic import on the aws-sdk bundle you can get it working

dev:dynamic-import <bundleId>

Also install joda-time 2.3, as that is required. And maybe uninstall the older 1.x first.;;;","02/May/14 06:48;davsclaus;karaf@root> features:chooseurl camel 2.13.1-SNAPSHOT
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.13.1-SNAPSHOT/xml/features
karaf@root> features:install camel
karaf@root> features:install camel-aws
karaf@root> list
[  70] [Active     ] [            ] [   50] Apache ServiceMix :: Bundles :: aws-java-sdk (1.7.1.1)
[  71] [Active     ] [            ] [   50] camel-aws (2.13.1.SNAPSHOT)
karaf@root> dynamic-import 70
Enabling dynamic imports on bundle org.apache.servicemix.bundles.aws-java-sdk [70]
karaf@root> install -s mvn:com.example.aws/example-aws/2.13.0
Bundle ID: 72
karaf@root> list
[  72] [Active     ] [Created     ] [       ] [   80] A Camel Blueprint Route (2.13.0);;;","02/May/14 06:50;davsclaus;Okay we have a workaround until a new aws-sdk bundle is released.;;;","02/May/14 13:05;jeltgroth;Great, I just verified my bundle is functional with that workaround.;;;","01/Jun/14 13:34;davsclaus;Waiting for new SMX bundle releases which has the fix.;;;","26/Jun/14 18:22;davsclaus;We have upgraded to 1.7.12_1 bundle;;;",,,,,,,,,,,,,,,,,
Redis integration: incorrect documentation,CAMEL-7400,12711105,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,jhberges,jhberges,29/Apr/14 06:09,29/Apr/14 08:45,14/Jul/23 05:49,29/Apr/14 08:45,2.13.0,,,,,,,,2.14.0,,,,,,,,,,0,documentation,,,,,,"http://camel.apache.org/redis.html :
* URIs must apparently start with ""spring-redis"" not ""redis"".",Documentation,davsclaus,jhberges,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,389426,,,Tue Apr 29 08:45:12 UTC 2014,,,,,,,,,,,"0|i1v2uf:",389668,,,,,,,,,,,,,,,,,,,,"29/Apr/14 08:45;davsclaus;The page was renamed for redis -> spring-redis and then apache infra has some old cached pages. If you refresh the page, or go to spring-redis then the doc is correct.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel Salesforce integration tests fail with ClassNotFoundException,CAMEL-7399,12711044,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,dhirajsb,dhirajsb,dhirajsb,28/Apr/14 22:16,02/May/14 04:00,14/Jul/23 05:49,02/May/14 04:00,2.13.0,,,,,,,,2.13.1,2.14.0,,,camel-salesforce,,,,,,0,,,,,,,"An upgrade to XStream version has broken the alias cache manipulation in XmlRestProcessor. Earlier versions of XStream used to only throw a ClassNotFoundException when CachingMapper.realClass call failed to find a mapped class, but recent versions now add the exception to its cache. This makes it imperative that the cache be flushed when no real class is found. As a result, the cache lookup optimization now only avoids flushing in case the alias mapping hasn't changed, which still works for repeated invocation of the same endpoint which requires using an XML alias for Salesforce's RESTish API. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,389365,,,Fri May 02 04:00:46 UTC 2014,,,,,,,,,,,"0|i1v2hr:",389611,,,,,,,,,,,,,,,,,,,,"28/Apr/14 22:21;dhirajsb;Fixed with commit 4fceb6a18cf57a5694a4d99be395b060e8bf3ea3;;;","02/May/14 04:00;dhirajsb;Fixed with commit 4fceb6a18cf57a5694a4d99be395b060e8bf3ea3,
merged commit in 2.13.x and master for 2.14.0;;;",,,,,,,,,,,,,,,,,,,,,,
"Salesforce recently changed their login API to use new OAuth fields, which breaks the camel-salesforce component",CAMEL-7398,12710997,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,dhirajsb,dhirajsb,dhirajsb,28/Apr/14 19:30,04/May/14 08:19,14/Jul/23 05:49,04/May/14 08:19,2.13.0,,,,,,,,2.13.1,2.14.0,,,camel-salesforce,,,,,,0,,,,,,,Salesforce added new fields to the login API response. These fields should be added to the LoginToken DTO. ,,davsclaus,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,389318,,,Fri May 02 05:17:25 UTC 2014,,,,,,,,,,,"0|i1v27b:",389564,,,,,,,,,,,,,,,,,,,,"28/Apr/14 22:20;dhirajsb;Fixed with commit 34740e78fab12054100e8278f218739107353e4f;;;","29/Apr/14 05:22;davsclaus;You need to fix this on master *first*, and then cherry-pick the fix to the 2.13.x branch.;;;","02/May/14 04:02;dhirajsb;[~davsclaus] Sorry about that, will remember to follow protocol next time
Should I change it to resolved?;;;","02/May/14 05:17;davsclaus;Yeah its resolved now, as the fix is on all needed branches.;;;",,,,,,,,,,,,,,,,,,,,
camel-netty - NettyProduce should use timer from component instead of creating new timer per producer,CAMEL-7391,12710311,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Apr/14 13:42,24/Apr/14 14:14,14/Jul/23 05:49,24/Apr/14 13:45,2.12.3,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-netty,,,,,,0,,,,,,,"We should use the shared timer, instead of creating a new timer per producer.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,388633,,,Thu Apr 24 14:14:24 UTC 2014,,,,,,,,,,,"0|i1uy13:",388884,,,,,,,,,,,,,,,,,,,,"24/Apr/14 14:14;davsclaus;There is an issue in Netty which prevents this.
https://github.com/netty/netty/issues/2424;;;","24/Apr/14 14:14;davsclaus;So we had to use a private timer per producer as using a shared is not possible.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-quartz component does not define osgi import version for quartz,CAMEL-7389,12710001,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ay,siano,siano,23/Apr/14 10:55,23/Apr/14 13:18,14/Jul/23 05:49,23/Apr/14 13:18,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-quartz,,,,,,0,,,,,,,"As the camel-quartz component is (unlike the camel-quartz2 component) built with a plain jar (not a bundle) and no version range is defined for the quartz package imports, the import to the quartz scheduler is generated without version information.

This will cause issues if the quartz 2.x component is also available on an OSGi system.

The provided (trivial) patch will limit the import version range for quartz packages. ",,ay,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Apr/14 10:59;siano;0001-CAMEL-7389-camel-quartz-component-does-not-define-os.patch;https://issues.apache.org/jira/secure/attachment/12641445/0001-CAMEL-7389-camel-quartz-component-does-not-define-os.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,388323,,,Wed Apr 23 13:18:50 UTC 2014,,,,,,,Patch Available,,,,"0|i1uw5b:",388578,,,,,,,,,,,,,,,,,,,,"23/Apr/14 13:18;ay;applied Stephan's patch.
;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-script-* features should depend on scripting-api bundle,CAMEL-7383,12709707,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,ggrzybek,ggrzybek,22/Apr/14 07:50,08/Jun/14 12:59,14/Jul/23 05:49,24/Apr/14 14:48,2.13.0,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,"{{camel-script-*}} features use package {{javax.script}} which may be not exported by system bundle.
{{camel-script-*}} feature should depend on ServiceMix's scripting bundle just like camel-groovy.",,ggrzybek,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7299,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,388029,,,Sun Jun 08 12:59:48 UTC 2014,,,,,,,,,,,"0|i1uucv:",388287,,,,,,,,,,,,,,,,,,,,"22/Apr/14 07:53;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/137

    [CAMEL-7383] adding dependencies on ServiceMix versions of scripting-api

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7383

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #137
    
----
commit f7f747888ab9cf1775f004f3b386bbc51a69fef2
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-22T07:52:24Z

    [CAMEL-7383] adding dependencies on ServiceMix versions of scripting-api

----
;;;","24/Apr/14 14:48;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Grzegorz.;;;","08/Jun/14 12:59;githubbot;Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/137
;;;",,,,,,,,,,,,,,,,,,,,,
allChannels should not be static variable for the NettyProducer,CAMEL-7379,12709451,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Apr/14 14:35,23/Apr/14 13:37,14/Jul/23 05:49,23/Apr/14 13:37,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-netty,,,,,,0,,,,,,,"A user complained that other netty channels would be closed if he just shutdown one of netty producer.  We should not  store the all channels into a static variable. 
http://camel.465427.n5.nabble.com/NettyProducer-stop-will-close-all-channels-belong-to-other-NettyProducer-tp5750374.html ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,387773,,,2014-04-20 14:35:39.0,,,,,,,,,,,"0|i1ust3:",388034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mark openjpa as dependency in Camel JPA feature ,CAMEL-7377,12709234,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ieugen,ieugen,18/Apr/14 09:11,25/Apr/14 09:07,14/Jul/23 05:49,25/Apr/14 06:26,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-jpa,karaf,,,,,0,,,,,,,"I believe Camel-JPA feature should mark openjpa bundle as a dependency becasue it conflicts with open-jpa 2.3.0. 

Currently camel-jpa feature.xml defines: 
```
<bundle>mvn:org.apache.openjpa/openjpa/2.2.2</bundle>
```
and should be <bundle dependency=""true"">mvn:org.apache.openjpa/openjpa/2.2.2</bundle> 

This problem apears when you have openjpa 2.3.0 installed and with to install camel-jpa 2.12.3 feature.  
Not marking the bundle as a dependency results in camel-jpa pulling the OpenJPA 2.2.2 bundle even if karaf has OpenJpa 2.3.0. Since both bundles try to register a PersistenceProvider in OSgi, the second one fails and the bundle fails to start - so camel-jpa feature is not installed.   ",,davsclaus,ieugen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,387556,,,Fri Apr 25 09:07:26 UTC 2014,,,,,,,,,,,"0|i1urgf:",387818,,,,,,,,,,,,,,,,,,,,"25/Apr/14 05:59;davsclaus;Hmm openjpa should really not be there, as people should install their JPA implementation of choice. So if they want to use something else such as EclipseLink or Hibernate then OpenJPA should not be installed out of the box.;;;","25/Apr/14 09:07;ieugen;Good point. I should have spotted that myself :).  ;;;",,,,,,,,,,,,,,,,,,,,,,
camel-mongodb - The readPreference option doesn’t work,CAMEL-7369,12708479,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,15/Apr/14 09:02,15/Apr/14 20:10,14/Jul/23 05:49,15/Apr/14 20:10,2.13.0,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-mongodb,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/About-a-bug-of-the-camel-mongodb-component-td5750234.html,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Apr/14 09:27;bvahdat;CAMEL-7369.patch;https://issues.apache.org/jira/secure/attachment/12640232/CAMEL-7369.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,386802,,,Tue Apr 15 20:10:48 UTC 2014,,,,,,,,,,,"0|i1umtr:",387066,,,,,,,,,,,,,,,,,,,,"15/Apr/14 20:10;bvahdat;The documentation for this has been updated as well.;;;",,,,,,,,,,,,,,,,,,,,,,,
JpaMessageIdRepository uses EntityManager non thread-safe,CAMEL-7364,12708249,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gala,gala,14/Apr/14 12:46,20/Apr/15 06:12,14/Jul/23 05:49,02/Sep/14 12:11,2.12.3,,,,,,,,2.14.0,,,,camel-jpa,,,,,,0,,,,,,,"In our product we have found strange behavior of JpaMessageIdRepository when change version 2.9.2 to 2.12.3.
The reason for this was that EntityManager assigned in the constructor org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository, but
EntityManager not required to be thread safe.
http://download.oracle.com/otn-pub/jcp/persistence-2.0-fr-oth-JSpec/persistence-2_0-final-spec.pdf page 286.
I think need assign the EntityManager in each method separately.","tomcat 7.0.32, hibernate 4.1.4.Final, spring 3.1.4.RELEASE",davsclaus,gala,TheLibrarian,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8672,,,,,CAMEL-8003,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,386572,,,Fri Sep 19 13:22:30 UTC 2014,,,,,,,,,,,"0|i1ulen:",386836,,,,,,,,,,,,,,,,,,,,"29/Apr/14 07:10;davsclaus;Yeah we should likely use the factory to create an entity manager instance and use that, and then close it after use. ;;;","29/Apr/14 07:17;davsclaus;This should apply for anything but the consumer (as the consumer is single threaded);;;","25/Aug/14 10:23;davsclaus;This is a bit more tricky, as we would need to create the entity manager per exchange, and also deal with transactions for idempotent consumer / producer / consumer etc.;;;","19/Sep/14 13:22;TheLibrarian;Will this fix be backported to Camel 2.13.x ? 2.14.x dropped Java 1.6 support so we're currently stuck with 2.10 (as 2.11/2.12/2.13 are impacted)
Thanks!;;;",,,,,,,,,,,,,,,,,,,,
camel headers are not preserverd in camel-ahc component,CAMEL-7363,12708188,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,siano,siano,14/Apr/14 05:49,16/Apr/14 06:39,14/Jul/23 05:49,16/Apr/14 06:39,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-ahc,,,,,,0,,,,,,,"The documentation of the camel-ahc component states:
... All headers from the IN message will be copied to the OUT message, so headers are preserved during routing. Additionally Camel will add the HTTP response headers as well to the OUT message headers.

However this is not true. Camel headers are not copied from the in to the out message.

I have looked up other components doing http requests (http4 and cxf) and these components do copy the headers from the in to the out message.
",,njiang,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Apr/14 06:31;siano;0001-CAMEL-7363-camel-headers-are-not-preserverd-in-camel.patch;https://issues.apache.org/jira/secure/attachment/12640033/0001-CAMEL-7363-camel-headers-are-not-preserverd-in-camel.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,386511,,,Wed Apr 16 06:39:38 UTC 2014,,,,,,,Patch Available,,,,"0|i1ul13:",386775,,,,,,,,,,,,,,,,,,,,"14/Apr/14 06:33;siano;BTW: There was even a unit test for this, however it contained a bug: the test route just returned all the request headers in the HTTP response, so the headers were passed through via the server.;;;","16/Apr/14 06:39;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x branches with thanks to Stephan.;;;",,,,,,,,,,,,,,,,,,,,,,
Simple Language - Additional after text after inbuilt function call is ignored,CAMEL-7359,12707843,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,alanfoster,alanfoster,11/Apr/14 00:39,12/Apr/14 04:26,14/Jul/23 05:49,11/Apr/14 12:46,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,"The following Simple expression is valid and runs OK - however it may have been appropriate to report an error to the developer.

{code:xml}
            <setBody>
                <simple>${bodyAs(java.lang.String) Additional text ignored...}</simple>
            </setBody>
{code}

The above seems a somewhat contrived example; However this is a more 'realistic' scenario in which the behaviour is not unexpected -

{code:xml}
            <setBody>
                <simple>${bodyAs(java.lang.String).toUpperCase()}</simple>
            </setBody>
{code}

The above simple expression will simply set the body to be of type java.lang.String, however will not invoke the subsequent toUpperCase() call - likewise no error is reported to the developer.

Camel has the same issue when using the function of headerAs and mandatoryBodyAs.",,alanfoster,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,386166,,,Sat Apr 12 04:26:21 UTC 2014,,,,,,,,,,,"0|i1uiwn:",386431,,,,,,,,,,,,,,,,,,,,"11/Apr/14 08:54;njiang;The right syntax of bodyAs is {code} ${bodyAs(type)} {code}, current code don't check the rest string after bodyAs(type).
I will updated the code to check the rest string and throw the exception if the string is not empty.;;;","11/Apr/14 12:46;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;","11/Apr/14 18:27;alanfoster;Thanks [~njiang] - For what it's worth, this problem is also apparent within the headerAs function -

{code:xml}
            <setBody>
                <simple>${headerAs(""foo"", String).test)}</simple>
            </setBody>
{code}

Should I reopen, or create a different issue for this scenario?;;;","12/Apr/14 04:05;njiang;Hi Alan,
We need to fix the headerAs function at the same time.
You don't need to create a new JIRA, I can keep fixing the issue by using this JIRA number.
;;;","12/Apr/14 04:26;njiang;Committed the patch to fix headerAs issue into master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,
CXFRS does not check JAX-RS Exception mappers ,CAMEL-7357,12707460,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,09/Apr/14 15:04,11/Apr/14 10:44,14/Jul/23 05:49,10/Apr/14 09:52,,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,,,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385783,,,Fri Apr 11 10:44:52 UTC 2014,,,,,,,,,,,"0|i1ugjr:",386047,,,,,,,,,,,,,,,,,,,,"09/Apr/14 15:52;sergey_beryozkin;If calling CXF JaxrsUtils.convertFaultToResponse(throwable, currentCxfMessage) returns non-null Response then the exception has been mapped;;;","10/Apr/14 03:33;njiang;Current CxfRsInvoker just hijack the exception and turn it into WebApplicationException, which disables the CXF default feature of exception mapping. 
I'm working on the patch now.;;;","10/Apr/14 09:52;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;","11/Apr/14 10:44;sergey_beryozkin;thanks Willem;;;",,,,,,,,,,,,,,,,,,,,
Password constant mapped to System Id Header parameter,CAMEL-7356,12707391,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rayslater,rayslater,09/Apr/14 09:18,10/Apr/14 07:04,14/Jul/23 05:49,10/Apr/14 07:04,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-smpp,,,,,,0,,,,,,,"Just browsing the code and noticed this bug introduced in commit f42b0ce:

String PASSWORD = ""CamelSmppSystemId"";

The junit tests in SmppProducerLazySessionCreationTest repeat the mistake.",,davsclaus,rayslater,,,,,,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,,,,,"09/Apr/14 09:22;rayslater;smpp-password.patch;https://issues.apache.org/jira/secure/attachment/12639373/smpp-password.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385714,,,Thu Apr 10 07:04:40 UTC 2014,,,,,,,,,,,"0|i1ug4f:",385978,,,,,,,,,,,,,,,,,,,,"10/Apr/14 07:04;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
"Configuring an http4 endpoint with hostname starting with ""http"" leads to an URISyntaxException",CAMEL-7353,12707259,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wuan,wuan,08/Apr/14 21:13,09/Apr/14 09:05,14/Jul/23 05:49,09/Apr/14 09:05,2.11.4,2.12.3,2.13.0,,,,,,2.12.4,2.13.1,2.14.0,,camel-http4,,,,,,0,,,,,,,"Trying to configure an endpoint like
{code}
http4://http.org
{code}
where the hostname starts with the characters ""http"" leads to an URISyntaxException ""Expected scheme-specific part at index http4:""

This behaviour is caused by the following lines in camel-http4's HttpComponent (around line 211):
{code}
        // need to set scheme on address uri depending on if its secure or not
        String addressUri = remaining.startsWith(""http"") ? remaining : null;
{code}
In our case, the hostname is not prefixed with http:// or https:// which leads to the mentioned exception.

The code in question was introduced within CAMEL-6880. I'm not shure why the variable {{remaining}} is checked for a protocol prefix as it already comes without one. Setting
{code}
        String addressUri == null;
{code}
would solve the problem and does not break any test. ",,njiang,wuan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Apr/14 06:48;wuan;CAMEL-7353.patch;https://issues.apache.org/jira/secure/attachment/12639351/CAMEL-7353.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385582,,,Wed Apr 09 09:05:49 UTC 2014,,,,,,,Patch Available,,,,"0|i1ufbj:",385848,,,,,,,,,,,,,,,,,,,,"09/Apr/14 09:05;njiang;Applied patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Andreas. ;;;",,,,,,,,,,,,,,,,,,,,,,,
NPE in CamelInternalProcessor,CAMEL-7351,12707186,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,richaosu,richaosu,08/Apr/14 14:06,29/May/14 03:29,14/Jul/23 05:49,10/Apr/14 07:33,2.12.2,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"Using Trace mode in Hawtio throws NPE when route uses <onException> to handle a business exception. Trace mode is successful (no NPE) when the route does not throw a business exception (i.e. route is successful).

I suspect that the value of routeDefinition in BacklogTracerAdvice is null when <onException> handles an exception.

{code:java|title=CamelInternalProcessor$BacklogTracerAdvice}
public BacklogTracerAdvice
(
    Queue<DefaultBacklogTracerEventMessage> queue, 
    BacklogTracer backlogTracer,
    ProcessorDefinition<?> processorDefinition, 
    ProcessorDefinition<?> routeDefinition, 
    boolean first
)
{code}

{code:none}
org.apache.camel.processor.CamelInternalProcessor
522		String routeId = routeDefinition.getId();
{code}

{code:none}
2014-04-08 09:15:24,036 ERROR {qtp1100200721-83}    [o.a.c.p.FatalFallbackErrorHandler]  \--> New exception on exchangeId: ID-RICHAOSU-ULX1310-54949-1396894883751-56-12
java.lang.NullPointerException
    at o.a.c.p.CamelInternalProcessor$BacklogTracerAdvice.before(CamelInternalProcessor.java:522)
    at o.a.c.p.CamelInternalProcessor.process(CamelInternalProcessor.java:139)
    at o.a.c.p.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:42)
    at o.a.c.p.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:839)
    at o.a.c.p.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:337)
    at o.a.c.p.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at o.a.c.p.Pipeline.process(Pipeline.java:118)
    at o.a.c.p.Pipeline.process(Pipeline.java:80)
    at o.a.c.p.ChoiceProcessor.process(ChoiceProcessor.java:111)
...
{code}","CamelContext executing in https://github.com/hawtio/hawtio-camel-wiki
Deployed to apache-tomcat-7.0.47
Hosted on Ubuntu Linux 13.10",davsclaus,niels.bertram,richaosu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385509,,,Thu May 29 03:29:09 UTC 2014,,,,,,,,,,,"0|i1uevj:",385776,,,,,,,,,,,,,,,,,,,,"10/Apr/14 07:33;davsclaus;Thanks for reporting.;;;","29/May/14 03:29;niels.bertram;It also throws that exception when one configures a route with any of the interceptors, e.g.:

{code:java}
interceptFrom(""direct:start"")
  .process(new SomeProcessor());

from(""direct:start"")
  .routeId(""some-route"")
  .transacted(""PROPAGATION_REQUIRED"")
  .to(""log:me"")
{code};;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty - Should return 404 instead of 503 if context-path did not match a route,CAMEL-7347,12706904,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Apr/14 09:01,07/Apr/14 09:15,14/Jul/23 05:49,07/Apr/14 09:15,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-netty-http,,,,,,0,,,,,,,We should return 404 instead as the service is there but the resource requested was not found.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385227,,,2014-04-07 09:01:12.0,,,,,,,,,,,"0|i1ud53:",385494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some endpoints configured using beans may result in NPE under DEBUG mode,CAMEL-7344,12706718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,04/Apr/14 22:06,07/Apr/14 13:12,14/Jul/23 05:49,07/Apr/14 13:12,2.11.4,2.12.3,2.13.0,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"CAMEL-6130 seems to have introduced this issue or more precisely speaking, it has made this issue visible.

DefaultEndpoint's toString() method seems to require its endpoint string value to be set. If it's not set, the toString method throws an exception. A fully built endpoint always has its endpoint string value set, thus there is no issue. However, an endpoint being manually set up may not have its endpoint string value set from the beginning (e.g., when its super class uses the DefaultEndpoint's default constructor to instantiate using a bean based instantiation).

The debug log statement introduced in CAMEL-6130 invokes this toString method during the endpoint setup.

That means, a spring based CXF endpoint may result in the following exception under the debug mode.

SLF4J: Failed toString() invocation on an object of type [org.apache.camel.component.cxf.CxfSpringEndpoint]
java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint does not implement createEndpointUri() to create a default value
at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:154)
at org.apache.camel.impl.DefaultEndpoint.toString(DefaultEndpoint.java:139)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.impl.Log4jLoggerAdapter.debug(Log4jLoggerAdapter.java:271)
at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:528)
at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:570)
at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:454)
at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
at org.apache.camel.component.cxf.CxfEndpoint.setCamelContext(CxfEndpoint.java:840)

I  wonder whether we really need DefaultEndpoint's getEndpointUri() to throw an exception when it's endpoint string value is not set. But if we keep this rule, we must catch the exception in its toString() method so that we won't throw the above exception when the toString() method is called during the endpoint setup

I would propose to add the exception catching in the toString method. If we decide to change the getEndpointUri() method to not throw the exception (that change will likely require the NPE check at the users of this method), we can make that change and remove the exception catch from the toString method

This issue affects camel 2.11.0 and later versions.",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,385041,,,2014-04-04 22:06:36.0,,,,,,,,,,,"0|i1ubzr:",385308,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing gson dependency in camel-splunk feature of 2.13.0 release,CAMEL-7343,12706581,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,xldai,xldai,04/Apr/14 07:28,04/Apr/14 08:29,14/Jul/23 05:49,04/Apr/14 08:29,2.13.0,,,,,,,,,,,,,,,,,,0,,,,,,,"Gson is also a dependency of camel-splunk component, but it is missing in the camel-splunk feature definition.

<bundle dependency='true'>mvn:com.google.code.gson/gson/${gson-version}</bundle>

should be added into the camel-splunk feature.

",,cschneider,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Apr/14 07:54;xldai;patch.txt;https://issues.apache.org/jira/secure/attachment/12638647/patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,384904,,,Fri Apr 04 08:29:32 UTC 2014,,,,,,,,,,,"0|i1ub5b:",385171,,,,,,,,,,,,,,,,,,,,"04/Apr/14 08:29;cschneider;Applied the patch and checked that the bundle can be resolved. Looks good.;;;",,,,,,,,,,,,,,,,,,,,,,,
CXFRS: InInterceptor defined in Spring is ignored,CAMEL-7341,12706373,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,s.schuster,s.schuster,03/Apr/14 07:11,04/Apr/14 04:16,14/Jul/23 05:49,04/Apr/14 04:16,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-cxf,,,,,,0,,,,,,,"A CXF InInterceptor added to the rsServer via Spring is not added to the interceptor chain and therefore is not executed.

{code}
<cxf:rsServer id=""service"" address=""/exampleService""
              serviceClass=""com.example.service.ExampleService""
              loggingFeatureEnabled=""true""
              xmlns:cxf=""http://camel.apache.org/schema/cxf"">
    <cxf:providers>
        <bean class=""com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider""/>
    </cxf:providers>
    <cxf:inInterceptors>
        <bean class=""com.example.service.ExampleInInterceptor""/>
    </cxf:inInterceptors>
</cxf:rsServer>
{code}

{code}
public class ExampleInInterceptor extends AbstractPhaseInterceptor<Message> {
    public ExampleInInterceptor() {
        super(Phase.RECEIVE);
    }

    @Override
    public void handleMessage(Message message) throws Fault {
        ...
    }
}
{code}

The same configuration works with Camel Version 2.12.2.",,njiang,s.schuster,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,384696,,,Fri Apr 04 04:16:07 UTC 2014,,,,,,,,,,,"0|i1u9vb:",384963,,,,,,,,,,,,,,,,,,,,"03/Apr/14 07:14;s.schuster;Could be related to CAMEL-7207;;;","04/Apr/14 03:31;njiang;Yeah, this regression is caused by CAMEL-7207, I just did a quick fix for it.;;;","04/Apr/14 04:16;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
CxfClientCallback should not populate camel exchange OUT message if no response comes back to cxf producer and camel exchange pattern is InOnly,CAMEL-7338,12706217,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,joeluo,joeluo,02/Apr/14 16:14,15/Apr/14 03:21,14/Jul/23 05:49,15/Apr/14 03:21,2.10.4,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-cxf,,,,,,0,,,,,,,"I have a following camel route:
{code}
String destination = ""cxf:http://localhost:9090/test?dataFormat=MESSAGE"";

    from(""jms:queue:dslSource"")
        .onException(java.net.ConnectException.class, Exception.class)
            .maximumRedeliveries(3)
            .maximumRedeliveryDelay(3000)
            .retryAttemptedLogLevel(LoggingLevel.INFO)
            .log(LoggingLevel.WARN, ""Failed to send message ${body}"") 
            .log(LoggingLevel.WARN, ""Sending message to the error queue: ${body}"")          // body is null here
            .to(""jms:queue:dslError"")
            .end()
        .log(LoggingLevel.INFO, ""Sending message ..."")
        .setHeader(""bridgeDestination"", constant(destination))
        .to(destination)
        .log(LoggingLevel.INFO, ""received back: ${body}"")
        .routeId(""example-dsl"");
{code}

If an exception is thrown, for instance, a ConnectionException due to unavailability of the backend web service, the onException() route will be executed. The first log endpoint:
{code}
.log(LoggingLevel.WARN, ""Failed to send message ${body}"") 
{code}
prints out camel exchange IN message body without any problem. However, the second log endpoint:
{code}
.log(LoggingLevel.WARN, ""Sending message to the error queue: ${body}"")
{code}
only prints out a ""null"".

The reason is that when an exception is thrown, the CxfClientCallback.handleException() is called:
{code}
public void handleException(Map<String, Object> ctx, Throwable ex) {
    ....
        if (!boi.getOperationInfo().isOneWay()) {
            // copy the InMessage header to OutMessage header                 
            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
            camelAsyncCallback.done(false);
        }
...
{code}
and this line always populates camel exchange OUT message regardless whether there is a CXF response back or not:
{code}
camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
{code}
Therefore, the second log endpoint within onException() block has it's camel exchange IN message been overwritten and replaced with OUT message from previous endpoint's although it is a message of NULL body.
",,joeluo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Apr/14 16:26;joeluo;patch.txt;https://issues.apache.org/jira/secure/attachment/12638285/patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,384540,,,Tue Apr 15 03:21:11 UTC 2014,,,,,,,Patch Available,,,,"0|i1u8x3:",384808,,,,,,,,,,,,,,,,,,,,"03/Apr/14 02:34;njiang;Hi Joe,

Thanks for you patch. You are right, we should not copy the header so aggressively. 
I will commit the path after running some tests to verify the patch.

Regards,

Willem;;;","15/Apr/14 03:21;njiang;Applied patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Joe.;;;",,,,,,,,,,,,,,,,,,,,,,
PGPDataFormat unmarshal doesn't close the stream correctly,CAMEL-7337,12706101,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,02/Apr/14 05:29,02/Apr/14 11:05,14/Jul/23 05:49,02/Apr/14 11:05,2.13.0,,,,,,,,2.13.1,2.14.0,,, camel-crypto,,,,,,0,,,,,,,The PGPDataFormat does not close some streams during unmarshaling.,,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Apr/14 05:30;forsthofer;0001-PGPDataFormat-unmarshal-close-streams-correctly.patch;https://issues.apache.org/jira/secure/attachment/12638197/0001-PGPDataFormat-unmarshal-close-streams-correctly.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,384424,,,Wed Apr 02 11:05:15 UTC 2014,,,,,,,Patch Available,,,,"0|i1u87j:",384692,,,,,,,,,,,,,,,,,,,,"02/Apr/14 11:05;njiang;Applied patch into camel master and camel-2.13.x with thanks to Franz.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-cometd jetty jmx version is not suit with camel parent jetty version,CAMEL-7336,12705858,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,01/Apr/14 06:39,01/Apr/14 06:55,14/Jul/23 05:49,01/Apr/14 06:55,2.13.0,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,384182,,,Tue Apr 01 06:55:55 UTC 2014,,,,,,,,,,,"0|i1u6q7:",384450,,,,,,,,,,,,,,,,,,,,"01/Apr/14 06:55;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Kafka : Fix the KafkaConsumer to fill the camel message body with the kafka message content,CAMEL-7330,12703801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fchaillou,fchaillou,26/Mar/14 19:20,27/Mar/14 20:38,14/Jul/23 05:49,27/Mar/14 20:38,2.13.0,,,,,,,,2.13.1,2.14.0,,,,,,,,,0,patch,,,,,,"Hello,
After taking a short look at the Consumer for the kafka component, it appears that the consumer never fills the camel message body with the kafka message received.

I fixed it on master but i think this is major enough to be backported to camel 2.13.1.

Here is the link to the pull request  : https://github.com/apache/camel/pull/120

Thank you.
Fabien",,davsclaus,fchaillou,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,382135,,,Thu Mar 27 20:38:10 UTC 2014,,,,,,,Patch Available,,,,"0|i1tu4n:",382408,,,,,,,,,,,,,,,,,,,,"27/Mar/14 20:38;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,
DynamicRouter sends in-message to next destination,CAMEL-7324,12703205,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rene avontuur,rene avontuur,24/Mar/14 14:25,15/Apr/14 03:17,14/Jul/23 05:49,15/Apr/14 03:16,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"The DynamicRouter appears to send the in-message in stead of the out-message to the next destination, which is an unexpected behaviour.",,njiang,rene avontuur,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Mar/14 20:15;rene avontuur;AsyncEndpointDynamicRouterTest.java;https://issues.apache.org/jira/secure/attachment/12636415/AsyncEndpointDynamicRouterTest.java","24/Mar/14 14:27;rene avontuur;DynamicRouterIntermediateResultIssueTest.java;https://issues.apache.org/jira/secure/attachment/12636339/DynamicRouterIntermediateResultIssueTest.java","24/Mar/14 20:15;rene avontuur;patch7324-2.txt;https://issues.apache.org/jira/secure/attachment/12636416/patch7324-2.txt","24/Mar/14 16:04;rene avontuur;patch7324.txt;https://issues.apache.org/jira/secure/attachment/12636355/patch7324.txt",,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,381543,,,Tue Apr 15 03:16:00 UTC 2014,,,,,,,,,,,"0|i1tqi7:",381818,,,,,,,,,,,,,,,,,,,,"24/Mar/14 14:27;rene avontuur;added an unit test;;;","24/Mar/14 16:04;rene avontuur;Added a patch file that solves this issue.;;;","24/Mar/14 16:29;rene avontuur;RoutingSlip.java appears to contain untested duplicated code (below  public boolean doInAsyncProducer), that probably needs the same kind of code-change. ;;;","24/Mar/14 20:15;rene avontuur;Added the unit test for the AsyncEndpoint
Added an updated patch;;;","15/Apr/14 03:16;njiang;Applied patch into master, camel-2.13.x and camel-2.12.x branches with thanks to Rene.
I also did some modification on the unit tests.;;;",,,,,,,,,,,,,,,,,,,
createRouteStatisticEndpointJson - Returns invalid json if no routes,CAMEL-7323,12703137,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Mar/14 07:19,24/Mar/14 07:29,14/Jul/23 05:49,24/Mar/14 07:29,2.13.0,,,,,,,,2.13.1,2.14.0,,,camel-core,jmx,,,,,0,,,,,,,"If there is no routes, we have an extra } which should not be there

{code}
{
  ""routes"": {
    }
  }
}
{code}

Parse error on line 5:
... {            }}}
-------------------^
Expecting 'EOF'",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,381475,,,2014-03-24 07:19:32.0,,,,,,,,,,,"0|i1tq33:",381750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JcrConsumer freezes in some environments,CAMEL-7321,12703061,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzurowski,gzurowski,gzurowski,23/Mar/14 01:32,25/Mar/14 07:46,14/Jul/23 05:49,25/Mar/14 07:43,2.13.0,,,,,,,,2.13.1,2.14.0,,,camel-jcr,,,,,,0,,,,,,,"In January [~njiang] reported that the JUnit test JcrConsumerTest fails in his environment. This could not be reproduced in other environments at that time. [~njiang] applied the following fix to the pom.xml in order make the test pass:

{code:title=camel-jcr/pom.xml}
[...]
  <build>
    <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <forkMode>pertest</forkMode>
        </configuration>
     </plugin>
    </plugins>
  </build>
[...]
{code}

This made all tests run in separate processes, but was also an indicator for potential multi-threading issues in JcrConsumer. I was recently able to reproduce the problem by running Maven within Eclipse. The problem is indeed a synchronization issue and should be addressed with this ticket.",,davsclaus,githubbot,gzurowski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Mar/14 06:55;davsclaus;hang.txt;https://issues.apache.org/jira/secure/attachment/12636304/hang.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,381399,,,Tue Mar 25 07:46:17 UTC 2014,,,,,,,,,,,"0|i1tpmv:",381676,,,,,,,,,,,,,,,,,,,,"23/Mar/14 22:21;githubbot;GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/116

    CAMEL-7321: Fix inconsistent synchronization to prevent freezing of JcrConsumer

    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7321

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/116.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #116
    
----
commit adf86876f3f4fdc895a66d50361102093ee4f98a
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-23T22:17:14Z

    CAMEL-7321: Fix inconsistent synchronization to prevent freezing of
    JcrConsumer
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----
;;;","24/Mar/14 06:55;davsclaus;The JcrConsumerTest hangs on my laptop. I have attached a thread dump.;;;","25/Mar/14 07:43;davsclaus;Thanks for the PR;;;","25/Mar/14 07:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/116
;;;",,,,,,,,,,,,,,,,,,,,
PGP Data Format: EOFException: Unexpected end of ZIP input stream,CAMEL-7320,12703025,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,22/Mar/14 11:08,23/Mar/14 12:46,14/Jul/23 05:49,23/Mar/14 12:46,2.12.3,2.13.0,,,,,,,2.13.1,2.14.0,,, camel-crypto,,,,,,0,,,,,,,"If you call the PGP Data Format unmarshaller with a PGP message containing a PGP Encrypted Data packet and a Singature packet then you get the following exception

java.io.EOFException: Unexpected end of ZIP input stream
	at org.bouncycastle.openpgp.PGPCompressedData$1.fill(Unknown Source)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158)
	at org.bouncycastle.bcpg.BCPGInputStream.read(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream$PartialInputStream.read(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.read(Unknown Source)
	at org.bouncycastle.util.io.Streams.readFully(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readFully(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readFully(Unknown Source)
	at org.bouncycastle.bcpg.MPInteger.<init>(Unknown Source)
	at org.bouncycastle.bcpg.SignaturePacket.<init>(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readPacket(Unknown Source)
	at org.bouncycastle.openpgp.PGPSignature.<init>(Unknown Source)
	at org.bouncycastle.openpgp.PGPObjectFactory.nextObject(Unknown Source)
	at org.apache.camel.converter.crypto.PGPKeyAccessDataFormat.verifySignature(PGPKeyAccessDataFormat.java:474)
	at org.apache.camel.converter.crypto.PGPKeyAccessDataFormat.unmarshal(PGPKeyAccessDataFormat.java:405)

The provided patch is for 2.13 and 2.14. The patch must be adapted for 2.12.

The problem also occurs with the other compression algorithms ZLIB and BZIP2.
Regards Franz",,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/14 11:09;forsthofer;0001-pgp-EOF-exception-for-Encrypted-Data-Packet.patch;https://issues.apache.org/jira/secure/attachment/12636198/0001-pgp-EOF-exception-for-Encrypted-Data-Packet.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,381362,,,Sun Mar 23 12:46:50 UTC 2014,,,,,,,Patch Available,,,,"0|i1tpev:",381639,,,,,,,,,,,,,,,,,,,,"23/Mar/14 12:46;njiang;Applied the patch into master, camel-2.13.x branches with thanks to Franz.;;;",,,,,,,,,,,,,,,,,,,,,,,
Concurrency on HDFS Consumer not working efficiently,CAMEL-7318,12702829,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,thadia,thadia,21/Mar/14 09:08,05/Mar/15 12:45,14/Jul/23 05:49,05/Mar/15 12:43,2.11.2,,,,,,,,2.14.3,2.15.0,,,camel-hdfs,,,,,,0,concurrency,parallel,,,,,"If we have two HDFS consumers the files are being processed twice (once by each consumer, waiting one after the other) so the consumers are not working in parallel. If we add this the consumers will work as a team and the transfer will go faster.

This happens because there is no exception thrown (the rename method just returns true or false and everything carries on as nothing would have happened :).

In order to fix this we could add in the HdfsInputStream: 49

boolean tf = info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath));
if (!tf) {
	throw new IOException(""This exception is thrown because the rename did not succeded."");
	}

And also in the HdfsConsumer: 150
try {
     this.rwlock.writeLock().lock();
     this.istream = HdfsInputStream.createInputStream(fileStatuses[i].getPath().toString(), this.config);
} catch (IOException ioe) {
     log.info(ioe.getMessage()	+ "" If the rename fails we move on to the next file."");
     continue;
}

  

",,ggrzybek,thadia,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,381167,,,Thu Mar 05 12:43:56 UTC 2015,,,,,,,,,,,"0|i1to7b:",381443,,,,,,,,,,,,,,,,,,,,"10/Apr/14 07:36;ggrzybek;[~thadia], there is [this page|https://camel.apache.org/competing-consumers.html], which talks about concurrent consumers. While this is obvious for JMS, other endpoints have more problems with such configuration.
Of course this may be done, but have you considered using {{pattern}} endpoint parameter described [here|http://camel.apache.org/hdfs.html]?

Please let me know.

regards
Grzegorz Grzybek;;;","17/Apr/14 10:01;thadia;The pattern parameter it had been considered, but that is not good enough for this case and I couldn't find another way except the one from the description.
Thank you.;;;","17/Apr/14 10:15;ggrzybek;Hello Martha - I just wanted to say, that according to https://camel.apache.org/competing-consumers.html, the only competing consumers are currently JMS and SEDA. I'm not saying that it cannot be done for HDFS/HDFS2, but it's not trivial.
Please be patient ;);;;","05/Mar/15 09:29;ggrzybek;Actually the file is not being read twice.
I've setup two consumers and watched the behavior under debugger.
This code you've mentioned (in org.apache.camel.component.hdfs2.HdfsInputStream#createInputStream()):
{code:java}
        info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath));
{code}
doesn't return {{false}} if can't rename, it throws exception with the following stack trace (""file://"" case):
{noformat}
java.io.FileNotFoundException: File file:/data/ggrzybek/sources/github.com/grgrzybek/camel/components/camel-hdfs2/target/test/multiple-consumers/file-0194.txt does not exist
	at org.apache.hadoop.fs.RawLocalFileSystem.deprecatedGetFileStatus(RawLocalFileSystem.java:511)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileLinkStatusInternal(RawLocalFileSystem.java:722)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileStatus(RawLocalFileSystem.java:501)
	at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:337)
	at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:289)
	at org.apache.hadoop.fs.RawLocalFileSystem.rename(RawLocalFileSystem.java:334)
	at org.apache.hadoop.fs.ChecksumFileSystem.rename(ChecksumFileSystem.java:503)
	at org.apache.camel.component.hdfs2.HdfsInputStream.createInputStream(HdfsInputStream.java:49)
	at org.apache.camel.component.hdfs2.HdfsConsumer.doPoll(HdfsConsumer.java:140)
	at org.apache.camel.component.hdfs2.HdfsConsumer.poll(HdfsConsumer.java:98)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
{noformat}
so then Camel invokes org.apache.camel.spi.PollingConsumerPollStrategy#rollback() and simply skips this file and move to the next one.
I'll check how it works in ""hdfs://"" case.;;;","05/Mar/15 09:36;ggrzybek;You're right - for ""hdfs://"" scheme, the rename just returns {{false}}.;;;","05/Mar/15 12:43;ggrzybek;Thanks [~thadia] for investigating this issue. I've added [similar check|https://github.com/apache/camel/commit/08eb8bf] to skip missing (failed to rename) file.;;;",,,,,,,,,,,,,,,,,,
xml-specs-api feature in camel features.xml shouldn't have all bundles configured as dependency='true',CAMEL-7317,12702801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,21/Mar/14 03:56,28/Mar/14 09:24,14/Jul/23 05:49,28/Mar/14 09:24,,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,"When OBR resolver is available, If the bundle in features.xml has dependency=""true"" means if there's on other bundle in this feature explicitly depend on this bundle than it won't get installed, so xml-specs-api feature shouldn't have all bundles marked as dependency=""true"",

We should remove dependency=""true"" for woodstox and jaxb-impl bundles",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,381139,,,Fri Mar 28 09:24:21 UTC 2014,,,,,,,,,,,"0|i1to13:",381415,,,,,,,,,,,,,,,,,,,,"21/Mar/14 03:57;ffang;related discussion from smx mailling list is
http://servicemix.396122.n5.nabble.com/Adding-features-to-ServiceMix-4-5-3-minimal-dependency-resolution-not-working-td5719659.html;;;","28/Mar/14 09:24;ffang;commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/8bfd1232 for master
http://git-wip-us.apache.org/repos/asf/camel/commit/2249559a for camel-2.13.x
http://git-wip-us.apache.org/repos/asf/camel/commit/ced3c084 for camel-2.12.x;;;",,,,,,,,,,,,,,,,,,,,,,
SPI locator fails when using a charset such as UTF16,CAMEL-7315,12702599,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hovenko,hovenko,20/Mar/14 10:16,28/Mar/14 08:49,14/Jul/23 05:49,28/Mar/14 08:49,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,patch,,,,,,"Java 6 ServiceLocator requires SPI resources to be encoded in UTF8 according to <http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html>.

I believe Camel SPI locator should confirm to this.

Pull request with patch:
<https://github.com/apache/camel/pull/115>

Sorry for not supplying tests. Try running tests using property ""file.encoding=UTF16"" :)",,hovenko,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380938,,,Fri Mar 28 08:49:28 UTC 2014,,,,,,,Patch Available,,,,"0|i1tmtj:",381217,,,,,,,,,,,,,,,,,,,,"28/Mar/14 08:49;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Knut-Olav.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-mail - Should not fetch attachments if mapMailMessage=false,CAMEL-7311,12702350,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Mar/14 09:44,19/Mar/14 09:48,14/Jul/23 05:49,19/Mar/14 09:48,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-mail,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Polling-Email-Component-Runtime-Error-tp5749047.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380690,,,2014-03-19 09:44:24.0,,,,,,,,,,,"0|i1tlan:",380969,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet - Need to run in sync mode due bug in restlet,CAMEL-7310,12702344,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Mar/14 09:02,19/Mar/14 09:05,14/Jul/23 05:49,19/Mar/14 09:05,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-restlet,,,,,,0,,,,,,,"There is a NPE bug in restlet when the restlet client timeout
https://github.com/restlet/restlet-framework-java/issues/871

This causes camel restlet producer to not have its callback called, which can lead to Camel hanging.

We need to force sync mode until restlet fixes their NPE bug",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380684,,,Wed Mar 19 09:05:52 UTC 2014,,,,,,,,,,,"0|i1tl9b:",380963,,,,,,,,,,,,,,,,,,,,"19/Mar/14 09:05;davsclaus;Fixed on Camel side. When restlet have fixed theirs we can switch back.;;;",,,,,,,,,,,,,,,,,,,,,,,
Timer component : timer should use StartupListener to be initialized before first fire,CAMEL-7308,12702123,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,metatech,metatech,18/Mar/14 11:45,24/Mar/14 10:42,14/Jul/23 05:49,24/Mar/14 10:42,2.10.7,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"CAMEL-5542 creates a regression for our routes when migrating from ServiceMix 4.4 to ServiceMix 4.5.
The secondary route in which we use this timer populates a cache, which must be initialized before other primary routes in the bundle can use it, otherwise requests sent to these other routes will generate errors.
In our ServiceMix installation with all the other bundles, the bundle with the timer can take from 1 second to 30 seconds to start-up, depending on the machine speed and the number of other bundles which are installed/started at the same time. 
It is therefore very difficult to estimate the time to define for the ""delay"" variable. If set too low, the first fire will be ignored and the other primary routes will generate errors until the timer second fire. If set too high, the other primary routes will generate errors until the timer first fire. 
Normally the timer period is set to refresh the cache every several minutes, which leaves a large window where requests end with an error in case the cache failed to initialize.
Here is a patch with a StartupListener which effectively reduces the window of errors to a fraction of a second.
Also, it would help to debug these kind of problems if a ""debug"" log is added when the first timer fire is ignored.",ServiceMix 4.5.3,davsclaus,metatech,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5542,,,,,,,,,,,"18/Mar/14 11:46;metatech;camel_timer_startuplistener.diff;https://issues.apache.org/jira/secure/attachment/12635286/camel_timer_startuplistener.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380463,,,Mon Mar 24 10:41:58 UTC 2014,,,,,,,Patch Available,,,,"0|i1tjxb:",380744,Regression,,,,,,,,,,,,,,,,,,,"20/Mar/14 10:07;davsclaus;Thanks for reporting and providing the patch.

I modified the code a bit to have it work with the unit tests.;;;","21/Mar/14 10:05;metatech;Hi Claus, thanks for your review.
Beware that I needed to remove the check for ""started"" in the ""isTaskAllowedToRun"" method, because the state is still ""starting"" at this point.
It can be seen in the method ""start"" of class ""ServiceSupport"" : 
- firstly ""doStart"" is called, where the ""onCamelContextStarted"" is called.
- secondly, ""started.set(true)"" is called.

My observation was that there was a race condition : 
- if the ""scheduleAtFixedRate"" is very fast to run, the camel context is still in ""starting"" state.
- if the ""scheduleAtFixedRate"" takes a few milliseconds longer to run, the camel context will enter the ""started"" state before.

Typically, the timer was fired when I was connected with my debugger and not fired without debugger, so I guess the race condition window is really small.;;;","24/Mar/14 10:41;davsclaus;This works as designed with the startup listener.

Your design to use a timer route to populate a cache is bad. You should just use a <bean> with a init method to do that.;;;",,,,,,,,,,,,,,,,,,,,,
Camel:Kafka NPE when trying to consume messages from kafka server,CAMEL-7306,12702107,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,i.melnik,i.melnik,18/Mar/14 10:14,04/May/14 08:45,14/Jul/23 05:49,04/May/14 08:25,2.13.1,,,,,,,,2.13.1,2.14.0,,,camel-kafka,,,,,,0,,,,,,,"I've installed and configured zookeeper and kafka servers using apache quick start guide on ubuntu running in vmware.
Launch producer for already created topic ""page_visits"" and try to consume messages and nothing happens.
Trying to debug KafkaEndpoint i can see that server doesn't send me any key (KafkaConstants.KEY) so here:
message.setHeader(KafkaConstants.KEY, new String(mm.key()));
 i got NPE and it silently fails.","Windows, Java 1.6",ggrzybek,githubbot,i.melnik,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Mar/14 10:17;i.melnik;KafkaConsumer.zip;https://issues.apache.org/jira/secure/attachment/12635273/KafkaConsumer.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380447,,,Sun May 04 08:45:23 UTC 2014,,,,,,,,,,,"0|i1tjtr:",380728,,,,,,,,,,,,,,,,,,,,"18/Mar/14 10:17;i.melnik;Here is my sample project to reproduce this issue;;;","08/Apr/14 13:22;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/133

    [CAMEL-7306]: key is optional. Avoid NPE

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7306

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/133.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #133
    
----
commit e317e7b470f03d14fe51b9efcc6d251e869c8224
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-08T13:21:54Z

    [CAMEL-7306]: key is optional. Avoid NPE

----
;;;","04/May/14 08:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/133
;;;",,,,,,,,,,,,,,,,,,,,,
Simple Language - ResultType Coercion is not consistent,CAMEL-7305,12702001,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alanfoster,alanfoster,17/Mar/14 22:16,11/Apr/14 00:32,14/Jul/23 05:49,18/Mar/14 06:25,2.12.3,,,,,,,,2.12.4,2.13.1,2.14.0,,,,,,,,0,,,,,,,"Both of the following code snippets lead to unexpected results when setting a resultType to be a boolean/integer

{code:title=Scenario - Handling POJO}
    <camelContext trace=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""direct:entry""/>

            <!-- Return any kind of POJO -->
            <bean ref=""complexModelFactory"" method=""createComplexModel"" />

            <setBody>
                <simple resultType=""java.lang.Boolean"">${body}</simple>
            </setBody>

            <log message=""The body is currently :: '${body}'"" />

        </route>
    </camelContext>
{code}

{code:title=Scenario - Handling missing header}
    <camelContext trace=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""direct:entry""/>

            <setBody>
                <simple resultType=""java.lang.Boolean"">${headers.missing}</simple>
            </setBody>

            <log message=""The body is currently :: '${body}'"" />

        </route>
    </camelContext>
{code}

The log for both of these scenarios is -

{code}[                          main] route1                         INFO  The body is currently :: ''{code}

It might be expected that the resulting body would either be true or false.

I am not sure if the below behaviour is as expected either - as they are similiar scenarios, but with different outcomes.

{code}
            <!-- No error - but header is not an integer -->
            <setBody>
                <simple resultType=""java.lang.Integer"">${headers.missing}</simple>
            </setBody>

           <!-- Causes java.lang.NumberFormatException: For input string: """" -->
            <setBody>
                <simple resultType=""java.lang.Integer""></simple>
            </setBody>
{code}",,alanfoster,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380341,,,Fri Apr 11 00:32:44 UTC 2014,,,,,,,,,,,"0|i1tj6n:",380623,,,,,,,,,,,,,,,,,,,,"18/Mar/14 06:25;davsclaus;This is resolved with CAMEL-7298 which enforces using predicate when the result type is boolean, and therefore the value is either true or false.;;;","18/Mar/14 06:25;davsclaus;Fixed by CAMEL-7298;;;","11/Apr/14 00:32;alanfoster;[~davsclaus] - I believe this issue is unrelated to [CAMEL-7298], as evident by second java.lang.Integer example.
I wonder what your thoughts are on that example?;;;",,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint does not work where uri needs to be normalized,CAMEL-7304,12701983,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apiwoni,apiwoni,17/Mar/14 21:06,18/Mar/14 17:01,14/Jul/23 05:49,18/Mar/14 10:04,2.10.4,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"interceptSendToEndpoint(""sftp://hostname:22/testDirectory?privateKeyFile=/user/.ssh.id_rsa"") is not intercepted because uri passed to InterceptSendToEndpointDefinition is not normalized.

As a result InterceptSendToEndpointDefinition createProcessor() method fails to match EndpointHelper.matchEndpoint(routeContext.getCamelContext(), uri, getUri()) and InterceptSendToEndpoint is not created.","Windows, Linux",apiwoni,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3434,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380323,,,Tue Mar 18 17:01:21 UTC 2014,,,,,,,,,,,"0|i1tj2n:",380605,,,,,,,,,,,,,,,,,,,,"18/Mar/14 06:22;davsclaus;You can use wildcard, and do

interceptSendToEndpoint(""sftp://hostname:22/testDirectory*"");;;","18/Mar/14 17:01;apiwoni;Thanks, Claus. It was quicker for me to normalize URI passed to interceptSendToEndpoint.
Andre;;;",,,,,,,,,,,,,,,,,,,,,,
Simple Language - Header access surrounded with quotes,CAMEL-7303,12701902,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alanfoster,alanfoster,17/Mar/14 13:41,18/Mar/14 08:39,14/Jul/23 05:49,18/Mar/14 08:39,2.12.3,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"Quotes within header access are not currently handled in the same way as the inbuilt {{headerAs}} function or the body accessor notation - perhaps these should be aligned?

For instance with the following route

{code:xml}
    <camelContext trace=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""direct:entry""/>

            <setHeader headerName=""some key"">
                <constant>hello world</constant>
            </setHeader>

            <setBody>
                <simple>${headers['some key']}</simple>
            </setBody>

            <log message=""The expression evaluated to :: ${body}"" />

        </route>
    </camelContext>
{code}

Outcome :

{code}[                          main] route1                         INFO  The expression evaluated to :: {code}

Expected :

{code}[                          main] route1                         INFO  The expression evaluated to :: hello world{code}

For reference, the current notation works within other parts of the language and are handled as expected

{code}${body['some key']}{code}
{code}${headerAs('some key', java.lang.Boolean}{code}

I think the fix might be to use {{StringHelper.removeQuotes}} on line #269 within SimpleFunctionExpression.java possibly, such as

{code}remainder = StringHelper.removeQuotes(remainder.substring(1, remainder.length() - 1));{code}

",,alanfoster,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380242,,,Tue Mar 18 08:39:24 UTC 2014,,,,,,,,,,,"0|i1til3:",380526,,,,,,,,,,,,,,,,,,,,"18/Mar/14 08:39;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,
HL7 converter should not perform validation,CAMEL-7300,12701839,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rkettelerij,rkettelerij,rkettelerij,17/Mar/14 09:01,25/Mar/14 08:59,14/Jul/23 05:49,17/Mar/14 09:32,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-hl7,,,,,,0,,,,,,,"Currently the TypeConverter in the camel-hl7 component uses a default PipeParser. This parser performs HL7 message validation (using the default validation profile) even if validation on the endpoint is disabled.

IMHO the TypeConverter shouldn't perform any validation at all, it's not the responsible of a TypeConverter. It should just convert types. Validation is already the responsibility of the consumer and enabled by default.",,njiang,rkettelerij,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380179,,,Tue Mar 25 08:58:31 UTC 2014,,,,,,,,,,,"0|i1ti73:",380463,,,,,,,,,,,,,,,,,,,,"17/Mar/14 09:31;rkettelerij;Pushed to master.

Not this patch makes use of a deprecated API call. In time we should move the entire camel-hl7 component to the new HAPI API: CAMEL-7301;;;","17/Mar/14 09:36;njiang;We need to merge the patch into camel-2.13.x branch once the camel-2.13.0 is officially released.;;;","25/Mar/14 08:58;rkettelerij;Backported patch to camel-2.13.x branch and camel-2.12.x branch.;;;",,,,,,,,,,,,,,,,,,,,,
camel-hbase feature should depend on scripting-api bundle,CAMEL-7299,12701834,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,ggrzybek,ggrzybek,17/Mar/14 08:02,22/Apr/14 07:51,14/Jul/23 05:49,17/Mar/14 08:06,,,,,,,,,2.12.4,2.13.0,,,camel-hbase,karaf,,,,,0,,,,,,,"Bundle {{org.apache.servicemix.bundles.hbase}} which is part of feature {{camel-hbase}} imports package {{javax.script}} which may be not exported by system bundle.
{{camel-hbase}} feature should depend on ServiceMix's scripting bundle just like {{camel-groovy}}.",,davsclaus,ggrzybek,githubbot,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7383,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380174,,,Mon Mar 17 08:21:29 UTC 2014,,,,,,,,,,,"0|i1ti5z:",380458,,,,,,,,,,,,,,,,,,,,"17/Mar/14 08:03;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/112

    [CAMEL-7299] camel-hbase should install scripting-api bundle

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7299

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/112.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #112
    
----
commit a266aa9050d694f61530691efd234eaaded8a4ad
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-17T08:02:47Z

    [CAMEL-7299] camel-hbase should install scripting-api bundle

----
;;;","17/Mar/14 08:06;davsclaus;Thanks;;;","17/Mar/14 08:21;githubbot;Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/112
;;;",,,,,,,,,,,,,,,,,,,,,
Simple Language - Binary Expression Equality Fails,CAMEL-7298,12701776,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alanfoster,alanfoster,16/Mar/14 20:58,11/May/14 09:32,14/Jul/23 05:49,18/Mar/14 06:19,2.12.3,2.13.0,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"When writing the following code, the expression {code}${headers.true} == ${headers.true}{code} evaluates to false - rather than the expected true.

{code:xml}
    <camelContext trace=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""direct:entry""/>

            <setHeader headerName=""true"">
                <constant>true</constant>
            </setHeader>

            <setBody>
                <simple resultType=""java.lang.Boolean"">${headers.true} == ${headers.true}</simple>
            </setBody>

            <log message=""The expression evaluated to :: ${body}"" />

        </route>
    </camelContext>
{code}

{code}
[                          main] route1                         INFO  The expression evaluated to :: false
{code}

Edit: I have tried debugging this, and it seems that the ""=="" token is being treated as a LiteralExpression - rather than an being a Binary Operator? I'm imaging therefore that the `false` is purely from coercing a String to the java.lang.Boolean resultType?",Windows 8.1,alanfoster,davsclaus,,,,,,,,,,,,,,,,,,,,,CAMEL-7428,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,380121,,,Tue Mar 18 06:19:41 UTC 2014,,,,,,,,,,,"0|i1thu7:",380405,,,,,,,,,,,,,,,,,,,,"17/Mar/14 08:48;davsclaus;Yeah we can fix this as we can infer that its a predicate when you use a boolean as result type.

We do this already, but missed to fix this when used in a route as an expression.;;;","17/Mar/14 10:11;davsclaus;Fixed, but need to merge to 2.13.x branch;;;","18/Mar/14 06:19;davsclaus;Merged to 2.13 branch;;;",,,,,,,,,,,,,,,,,,,,,
camel-hbase component have some bugs on Consumer side,CAMEL-7296,12701430,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gangliu,gangliu,14/Mar/14 08:06,28/Mar/14 08:25,14/Jul/23 05:49,28/Mar/14 08:25,2.12.3,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-hbase,,,,,,0,,,,,,,"After I tried a little bit, I think there are 2 problems on Consumer side:
# Returned value is null
if we specified family and qualifier options in URI, then all returned values will be null.  I did some investigation, and I found the problem is caused by the equals method of HBaseCell class. In poll() method of HBaseConsumer, the resultRow will apply rowModel first before insert the resultCell, see below code:
{code}
             ....
              HBaseData data = new HBaseData();
                HBaseRow resultRow = new HBaseRow();
                resultRow.apply(rowModel);       //the existing HBaseCell in rowModel will be insert into resultRow
                byte[] row = result.getRow();
                resultRow.setId(endpoint.getCamelContext().getTypeConverter().convertTo(rowModel.getRowType(), row));

                List<KeyValue> keyValues = result.list();
                if (keyValues != null) {
                    for (KeyValue keyValue : keyValues) {
                        String qualifier = new String(keyValue.getQualifier());
                        String family = new String(keyValue.getFamily());
                        HBaseCell resultCell = new HBaseCell();
                        resultCell.setFamily(family);
                        resultCell.setQualifier(qualifier);
                        resultCell.setValue(endpoint.getCamelContext().getTypeConverter().convertTo(String.class, keyValue.getValue()));
                        resultRow.getCells().add(resultCell); //will fail to insert if some cell with same Family and Qualifier exists
                    }
                    ...
              }
{code} 
that means we can't specify family and qualifier option when consuming.
# remove option
the default value of remove option is true, that mean, after scan the table, all scanned row will be removed. I think it's not we expect, so user may have to add option remove=false to stop that. however this option doesn't describe on website http://camel.apache.org/hbase.html .

Besides these problem, I think some descriptions on http://camel.apache.org/hbase.html are not correct, for example the demos and Header Options. please have a check.",,gangliu,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,379776,,,Fri Mar 28 08:25:23 UTC 2014,,,,,,,,,,,"0|i1tfq7:",380061,,,,,,,,,,,,,,,,,,,,"17/Mar/14 03:14;njiang;I updated the document of the remove option. After going through the code,  the options of  family and qualifier is a bug of camel hbase.;;;","17/Mar/14 10:04;gangliu;I saw the new option. thanks.;;;","20/Mar/14 08:37;njiang;Hi LiuGang

I just committed a quick fix for the first issue the hbase consumer.
Please check out the latest SNAPSHOt for verification.

Regards,

Willem;;;","20/Mar/14 08:44;gangliu;OK, will do, thanks.;;;","28/Mar/14 08:25;njiang;Applied the patch into master, camel-2.13.x and camel-2.12.x.;;;",,,,,,,,,,,,,,,,,,,
"SJMS: Cannot connect to durable topic because ""noLocal"" is hardcoded to ""true""",CAMEL-7287,12700907,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,miljenko,miljenko,12/Mar/14 07:28,13/Mar/14 09:11,14/Jul/23 05:49,13/Mar/14 09:11,2.11.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-sjms,,,,,,0,,,,,,,"See this thread: http://camel.465427.n5.nabble.com/SJMS-issue-with-noLocal-td5748632.html
",Tibco EMS,davsclaus,miljenko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,379250,,,Thu Mar 13 09:01:02 UTC 2014,,,,,,,,,,,"0|i1tcj3:",379542,,,,,,,,,,,,,,,,,,,,"12/Mar/14 15:40;davsclaus;Are you working on a patch?;;;","13/Mar/14 09:01;davsclaus;Yeah noLocal should be false, that is the default in the JMS spec
http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String, boolean);;;",,,,,,,,,,,,,,,,,,,,,,
amazonSNSEndpoint option is ignored,CAMEL-7286,12700871,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Mar/14 01:25,12/Mar/14 07:49,14/Jul/23 05:49,12/Mar/14 02:51,2.11.4,2.12.3,,,,,,,2.11.5,2.12.4,2.13.0,,camel-aws,,,,,,0,,,,,,,"I just got [an user complain|http://camel.465427.n5.nabble.com/AWS-SNS-Camel-amazonSNSEndpoint-being-ignored-tp5748651.html ] that the amazonSNSEndpoint option of aws-sns was ignored. ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,379214,,,Wed Mar 12 07:49:09 UTC 2014,,,,,,,,,,,"0|i1tcb3:",379506,,,,,,,,,,,,,,,,,,,,"12/Mar/14 02:51;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches.;;;","12/Mar/14 07:49;njiang;I just found other camel-aws endpoints have the same issue, I will commit the patch shortly.;;;",,,,,,,,,,,,,,,,,,,,,,
onException should enable backoff if backOffMultiplier is in use - just as errorHandler does,CAMEL-7282,12699827,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Mar/14 18:32,11/Mar/14 07:16,14/Jul/23 05:49,11/Mar/14 07:16,,,,,,,,,2.13.0,,,,camel-core,,,,,,0,,,,,,,"Lets keep this change on the new release only.

See nabble
http://camel.465427.n5.nabble.com/diagnosing-onException-problem-tp5748474.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,378173,,,2014-03-10 18:32:15.0,,,,,,,,,,,"0|i1t5w7:",378465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Yammer now uses bearer token for auth,CAMEL-7279,12699460,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,07/Mar/14 16:42,07/Mar/14 16:50,14/Jul/23 05:49,07/Mar/14 16:50,2.12.3,,,,,,,,2.12.4,2.13.1,,,,,,,,,0,,,,,,,... which means camel-yammer cannot connect to the yammer API currently.,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377807,,,Fri Mar 07 16:50:34 UTC 2014,,,,,,,,,,,"0|i1t3n3:",378099,,,,,,,,,,,,,,,,,,,,"07/Mar/14 16:50;janstey;master - http://git-wip-us.apache.org/repos/asf/camel/commit/263b5681
camel-2.12.x - http://git-wip-us.apache.org/repos/asf/camel/commit/496026d6;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-ssh should close the session when execution is finished.,CAMEL-7277,12699330,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Mar/14 03:08,07/Mar/14 10:53,14/Jul/23 05:49,07/Mar/14 10:53,2.11.4,2.12.3,,,,,,,2.11.5,2.12.4,2.13.0,,camel-ssh,,,,,,0,,,,,,,"Here is [the complain|http://stackoverflow.com/questions/22229687/camel-ssh-multiple-session-not-getting-closed-after-execution] from the stackoverfow ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377677,,,Fri Mar 07 10:53:44 UTC 2014,,,,,,,,,,,"0|i1t2uf:",377969,,,,,,,,,,,,,,,,,,,,"07/Mar/14 10:53;njiang;Applied patch into trunk, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-quartz - use of management name to provide default scheduler name breaks context isolation,CAMEL-7276,12699151,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ukcrpb6,ukcrpb6,06/Mar/14 13:41,09/Mar/14 07:33,14/Jul/23 05:49,09/Mar/14 07:33,2.12.3,,,,,,,,2.12.4,2.13.0,,,camel-quartz,,,,,,0,,,,,,,"When using the camel-quartz component in an unmanged context with multiple camel contexts, for example in a JUnit test case, causes the scheduler to be created with the instance name ""DefaultQuartzScheduler"" which is then shared across all camel context's within the same jvm.

This is in contradiction of the previous behaviour that uses `getCamelContext.getName()` which isolates the scheduler by denoting that the default instance is specific to the camel context.

{code}
package org.apache.camel.component.quartz;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.management.JmxSystemPropertyKeys;
import org.junit.Test;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotSame;

/**
 * Test regression of camel-context isolation of default scheduler instance introduced in CAMEL-7034.
 */
public class QuartzComponentCamelContextSchedulerIsolationTest {

  @Test
  public void testSchedulerIsolation_unmanaged() throws Exception {
    disableJMX();
    testSchedulerIsolation();
  }

  @Test
  public void testSchedulerIsolation_managed() throws Exception {
    enableJMX();
    testSchedulerIsolation();
  }

  private void testSchedulerIsolation() throws Exception {
    CamelContext context = createCamelContext();
    context.start();

    CamelContext anotherContext = createCamelContext();
    assertNotEquals(anotherContext.getName(), context.getName());
    assertNotEquals(anotherContext, context);

    assertNotSame(getDefaultScheduler(context), getDefaultScheduler(anotherContext));
  }

  /**
   * Create a new camel context instance.
   */
  private DefaultCamelContext createCamelContext() {
    return new DefaultCamelContext();
  }

  /**
   * Get the quartz component for the provided camel context.
   */
  private QuartzComponent getQuartzComponent(CamelContext context) {
    return context.getComponent(""quartz"", QuartzComponent.class);
  }

  /**
   * Get the default scheduler for the provided camel context.
   */
  private Scheduler getDefaultScheduler(CamelContext context) throws SchedulerException {
    return getQuartzComponent(context).getFactory().getScheduler();
  }

  /**
   * Disables the JMX agent.
   */
  private void disableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""true"");
  }

  /**
   * Enables the JMX agent.
   */
  private void enableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""false"");
  }

}
{code}",,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7034,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377498,,,2014-03-06 13:41:37.0,,,,,,,,,,,"0|i1t1rb:",377792,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using doTry .. doCatch with recipient list should not trigger error handler during recipient list work,CAMEL-7275,12699107,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/14 09:59,06/Mar/14 16:00,14/Jul/23 05:49,06/Mar/14 16:00,2.12.3,,,,,,,,2.12.4,2.13.0,,,camel-core,eip,,,,,0,,,,,,,"When you have a route like this

{code}
                from(""direct:start"")
                    .doTry()
                        .recipientList(constant(""direct:foo"")).end()
                    .doCatch(Exception.class)
                        .to(""mock:catch"")
                        .transform().constant(""doCatch"")
                    .end()
                    .to(""mock:result"");
{code}

Then if an exception was thrown it should be catch by doCatch

A similar route with to instead works as expected.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377454,,,2014-03-06 09:59:35.0,,,,,,,,,,,"0|i1t1hj:",377748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support roles in the camel-shiro component,CAMEL-7274,12698932,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,coheigea,coheigea,05/Mar/14 18:11,05/Mar/14 19:05,14/Jul/23 05:49,05/Mar/14 19:03,,,,,,,,,2.13.0,,,,camel-shiro,,,,,,0,,,,,,,"
The Camel-shiro component allows the ability to perform authorization based on permissions. However, it does not allow using straight-forward roles for authorization. While using permissions is more flexible, we should also support authorization using roles.",,coheigea,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Mar/14 18:18;coheigea;camel-7274.patch;https://issues.apache.org/jira/secure/attachment/12632865/camel-7274.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377279,,,Wed Mar 05 19:03:47 UTC 2014,,,,,,,,,,,"0|i1t0fb:",377574,,,,,,,,,,,,,,,,,,,,"05/Mar/14 18:18;coheigea;
A patch + tests for this issue.

Colm.;;;","05/Mar/14 19:03;raulvk;Patch applied on master (2.13.x) with thanks to [~coheigea].;;;",,,,,,,,,,,,,,,,,,,,,,
Broken links on download pages for archived releases,CAMEL-7273,12698913,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,sebb,sebb,05/Mar/14 17:29,10/Mar/14 23:43,14/Jul/23 05:49,10/Mar/14 21:35,,,,,,,,,,,,,,,,,,,0,,,,,,,"The ASF mirror systems only holds releases that are current; in the case of Camel that is currently 2.11.4 and 2.12.3. All other releases are available on the archive server.

However, all of the superseded release download pages still point to the ASF mirror system. Their links are broken.
For example, in the download page for 2.12.2, instead of 
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip
and
http://www.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc

the page should point to
http://archive.apache.org/dist/camel/apache-camel/2.11.2/apache-camel-2.11.2.zip
and
http://archive.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc",,muellerc,sebb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,377260,,,Mon Mar 10 23:43:20 UTC 2014,,,,,,,,,,,"0|i1t0b3:",377555,,,,,,,,,,,,,,,,,,,,"10/Mar/14 21:35;muellerc;I have updated the links for all releases. Feel free to check if you want. And thanks for reporting!;;;","10/Mar/14 23:43;sebb;Thanks!

I checked a few random pages and they were OK.;;;",,,,,,,,,,,,,,,,,,,,,,
AbstractListGroupedExchangeAggregationStrategy produces failed exchange if first received exchange fails,CAMEL-7271,12698772,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wlhamaty,wlhamaty,05/Mar/14 00:00,28/Apr/14 05:39,14/Jul/23 05:49,28/Apr/14 05:39,2.11.3,2.12.2,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,"If the first exchange received by a (concrete implementation of) AggregationStrategy  contains an exception, then the result of the aggregation will also contain that exception, and so will not continue routing without error. This makes the first received exchange have an effect that subsequent exchanges do not have.

The specific use case multicasts to GroupedExchangeAggregationStrategy. The MulticastProcessor.doDone function uses ExchangeHelper.copyResults to copy the aggregated result to the original exchange. The copyResults method copies the exception as well, thereby propagating the error.

 The attached unit test has 3 tests, testAFail, testBFail, and testAllGood. All three of these should pass, but testAFail does not.

What is happening is that AbstractListAggregationStrategy is directly storing its values on and returning the first exchange:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<V> list;

        if (oldExchange == null) {
            list = getList(newExchange);
        } else {
            list = getList(oldExchange);
        }

        if (newExchange != null) {
            V value = getValue(newExchange);
            if (value != null) {
                list.add(value);
            }
        }

        return oldExchange != null ? oldExchange : newExchange;
    }

The pre-CAMEL-5579 version of GroupedExchangeAggregationStrategy created a fresh exchange to store and return the aggregated exchanges:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<Exchange> list;
        Exchange answer = oldExchange;

        if (oldExchange == null) {
            answer = new DefaultExchange(newExchange);
            list = new ArrayList<Exchange>();
            answer.setProperty(Exchange.GROUPED_EXCHANGE, list);
        } else {
            list = oldExchange.getProperty(Exchange.GROUPED_EXCHANGE, List.class);
        }

        if (newExchange != null) {
            list.add(newExchange);
        }
        return answer;
    }
",,davsclaus,wlhamaty,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Mar/14 00:11;wlhamaty;camel-jira7271-test.zip;https://issues.apache.org/jira/secure/attachment/12632715/camel-jira7271-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,377120,,,Mon Apr 28 05:39:33 UTC 2014,,,,,,,,,,,"0|i1szfz:",377415,,,,,,,,,,,,,,,,,,,,"28/Apr/14 05:39;davsclaus;Thanks for reporting and providing test cases.;;;",,,,,,,,,,,,,,,,,,,,,,,
IAE with calling String.replaceAll via simple expression in Karaf,CAMEL-7262,12698404,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,joni.nousiainen,joni.nousiainen,03/Mar/14 11:58,14/Mar/14 04:27,14/Jul/23 05:49,04/Mar/14 06:15,2.12.2,2.12.3,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,karaf,,,,,0,,,,,,,"I have a Camel route along which I do something like this:

{code}
<setHeader headerName=""CamelHttpPath"">
  <simple>/resource/${headers.RESOURCE_ID.replaceAll(""/"", ""%2F"")}</simple>
</setHeader>
{code}

The header _RESOURCE_ID_ is a String. I have JUnit test set up for the route and it passes OK. But when I deploy my bundle to Karaf I get the following exception:

{code}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .replaceAll(""/"", ""%2F"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:117)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:132)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:113)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:1814)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$58.evaluate(ExpressionBuilder.java:1381)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:83)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:58)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)[73:org.apache.camel.camel-core:2.12.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_51]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
Caused by: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:285)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)[73:org.apache.camel.camel-core:2.12.2]
	... 90 more
Caused by: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:331)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.doLoadClass(OsgiClassResolver.java:87)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.resolveClass(OsgiClassResolver.java:47)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(BeanHelper.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:515)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:472)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:239)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:148)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:67)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:189)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:281)[73:org.apache.camel.camel-core:2.12.2]
	... 91 more
{code}

The notable difference seems to be that the JUnit test uses {{DefaultClassResolver}} instead of {{OsgiClassResolver}} which is used in Karaf.","Karaf version: 2.3.3
JDK/JRE: Oracle JDK 1.7.0_51
OS: Windows 7 Pro",joni.nousiainen,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7294,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,376762,,,Tue Mar 04 06:14:30 UTC 2014,,,,,,,,,,,"0|i1sx8f:",377057,,,,,,,,,,,,,,,,,,,,"04/Mar/14 06:14;njiang;I just committed a patch into camel master, camel-2.12.x and camel-2.11.x branches to fix the NPE issue in the OsgiClassResolver.;;;",,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.model.dataformat.XmlJsonDataFormat settings assignments are misplaced.,CAMEL-7258,12697918,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,alexlomov,alexlomov,28/Feb/14 12:59,28/Feb/14 19:46,14/Jul/23 05:49,28/Feb/14 19:29,2.12.2,2.12.3,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,,,,,,0,patch,,,,,,"""elementName"" value is assigned to ""encoding"" field, ""arrayName"" is assigned to ""elementName"" field when using XmlJsonDataFormat(Map<String, String> options) constructor.",Any,alexlomov,githubbot,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,376392,,,Fri Feb 28 19:46:24 UTC 2014,,,,,,,,,,,"0|i1suyf:",376688,,,,,,,,,,,,,,,,,,,,"28/Feb/14 13:33;githubbot;GitHub user alexlomov opened a pull request:

    https://github.com/apache/camel/pull/105

    CAMEL-7258 fix.

    CAMEL-7258 fix for XmlJsonDataFormat.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alexlomov/camel CAMEL-7258_XmlJsonDataFormat

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit 23f5a1d6038a8002308e893c35db2e7f80a780f9
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-02-28T13:26:58Z

    CAMEL-7258 fix.

----
;;;","28/Feb/14 19:28;raulvk;Many thanks for the patch! Applied to master (2.13.x), 2.12.x and 2.11.x branches. 

[~alexlomov] - I forgot to quote your name and thank you in the commit message, but GitHub will hopefully pick up the closure of the pull request, so it will be credited to you!;;;","28/Feb/14 19:29;raulvk;Also added 2 unit tests for JSON arrays marshalling and unmarshalling.;;;","28/Feb/14 19:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/105
;;;",,,,,,,,,,,,,,,,,,,,
NullPointerException at DefaultCxfRsBinding,CAMEL-7256,12697807,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,yavalek,yavalek,27/Feb/14 22:00,05/Mar/14 03:08,14/Jul/23 05:49,05/Mar/14 03:08,2.12.1,,,,,,,,2.12.4,2.13.0,,,camel-cxf,,,,,,0,,,,,,,"In case if message.isFault() is true, but no Exception set:

{code}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding.populateCxfRsResponseFromExchange(DefaultCxfRsBinding.java:76)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:166)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:107)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)[158:org.apache.cxf.cxf-api:2.7.6]
        ... 23 more
{code}",,njiang,yavalek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,376281,,,Fri Feb 28 02:32:14 UTC 2014,,,,,,,,,,,"0|i1su9r:",376577,,,,,,,,,,,,,,,,,,,,"28/Feb/14 02:32;njiang;We need to check if the exchange has the exception before throw it.
I just committed a patch for it into master, camel-2.12.x and camel-2.11.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
MailComponent 'peek' doesn't work due to programming error,CAMEL-7254,12697747,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,mattnathan,mattnathan,27/Feb/14 17:57,28/Feb/14 13:09,14/Jul/23 05:49,28/Feb/14 02:44,2.12.2,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-mail,,,,,,0,,,,,,,"The MailComponent peek setting doesn't work due to the following line:

{code:java}
    private void peekMessage(Message mail) {
        // this only applies to IMAP messages which has a setPeek method
        if (mail.getClass().getName().startsWith(""IMAP"")) {
            try {
                LOG.trace(""Calling setPeek(true) on mail message {}"", mail);
                IntrospectionSupport.setProperty(mail, ""peek"", true);
            } catch (Throwable e) {
                // ignore
                LOG.trace(""Error setting peak property to true on: "" + mail + "". This exception is ignored."", e);
            }
        }
    }
{code}

The line that checks the class name for IMAP should be using getSimpleName. Otherwise it's checking the package name instead.

This effectively means that rollback of processing in camel mail is not supported.",,githubbot,mattnathan,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,376221,,,Fri Feb 28 13:09:41 UTC 2014,,,,,,,,,,,"0|i1stwf:",376517,,,,,,,,,,,,,,,,,,,,"27/Feb/14 19:40;githubbot;GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/103

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck

    Signed-off-by: david <david@davidkarlsen.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7254

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/103.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #103
    
----
commit 8af0b6069c414e8c46fb9843d99374d63c7c9581
Author: david <david@davidkarlsen.com>
Date:   2014-02-27T19:38:45Z

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck
    
    Signed-off-by: david <david@davidkarlsen.com>

----
;;;","28/Feb/14 02:44;njiang;Applied the patch with thanks to Matt into master, camel-2.12.x and camel-2.11.x branches.;;;","28/Feb/14 13:09;githubbot;Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/103
;;;",,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: NullPointerException if decryptor gets body with invalid format,CAMEL-7253,12697727,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,27/Feb/14 15:26,05/Mar/14 03:08,14/Jul/23 05:49,05/Mar/14 03:08,2.12.3,,,,,,,,2.12.4,2.13.0,,, camel-crypto,,,,,,0,,,,,,,"if the PGPDataFormat gets an invalid format during the decryption process a NullPointerException is thrown.

The attached patch throws an IllegalArgumentException instead and improves further error situations if a wrong formated input is provided.",,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Mar/14 09:14;forsthofer;0001-pgp-NullPointer-exception-if-incorrect-input.patch;https://issues.apache.org/jira/secure/attachment/12631935/0001-pgp-NullPointer-exception-if-incorrect-input.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,376201,,,Mon Mar 03 08:42:55 UTC 2014,,,,,,,Patch Available,,,,"0|i1strz:",376497,,,,,,,,,,,,,,,,,,,,"28/Feb/14 02:52;njiang;Hi Franz,

I think here is a code error in your patch in the patched PGPKeyAccessDataFormat.
You add two same check of ""o instanceof PGPEncryptedDataList"" in a if ... else block.
{code}
   @SuppressWarnings(""resource"")
    public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws Exception {
        if (encryptedStream == null) {
            return null;
        }
        InputStream in = PGPUtil.getDecoderStream(encryptedStream);
        PGPObjectFactory pgpFactory = new PGPObjectFactory(in);
        Object o = pgpFactory.nextObject();
        // the first object might be a PGP marker packet 
        PGPEncryptedDataList enc;
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) pgpFactory.nextObject();
        } else {
            enc = null;
        }
{code};;;","28/Feb/14 05:17;forsthofer;You are right. I have a look at this adn will update the patch.;;;","28/Feb/14 06:55;forsthofer;Hi Willem,

i corrected the error. Please have a look.

Regards Franz;;;","01/Mar/14 09:14;forsthofer;I corrected an error message.;;;","03/Mar/14 08:42;njiang;Applied into camel master branch and back port the patch into camel-2.12.x branch with thanks to Franz.;;;",,,,,,,,,,,,,,,,,,,
SqlProducer call twice the getResultSet on the PreparedStatement => This cause issue with HSQLDB (NPE),CAMEL-7251,12697694,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boretti,boretti,27/Feb/14 14:10,12/Mar/14 13:43,14/Jul/23 05:49,28/Feb/14 03:47,2.12.3,,,,,,,,2.12.4,2.13.0,,,camel-sql,,,,,,0,,,,,,,"The SqlProducer class use the following lines of code :

ResultSet rs = ps.getResultSet();
                        SqlOutputType outputType = getEndpoint().getOutputType();
                        log.trace(""Got result list from query: {}, outputType={}"", rs, outputType);
                        if (outputType == SqlOutputType.SelectList) {
                            List<Map<String, Object>> data = getEndpoint().queryForList(ps.getResultSet());
                           .................................
                        } else if (outputType == SqlOutputType.SelectOne) {
                            Object data = getEndpoint().queryForObject(ps.getResultSet());
                            .................................
                        } else {
                            throw new IllegalArgumentException(""Invalid outputType="" + outputType);
                        }

The problem is that the ResultSet is retrieved at the start, and then only used for the log. Later, when the result set is required, a new call to getResultSet is done. It is an issue with HSQL DB (tested with version 2.3.0 and 2.3.2 of HSQL DB), which in this case return null for the second call.

As the ResultSet is already available in a variable ""rs"", I would recommand to use this variable to replace the two last call to ps.getResultSet().

Thanks",,boretti,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,376168,,,Wed Mar 12 13:43:27 UTC 2014,,,,,,,,,,,"0|i1stkn:",376464,,,,,,,,,,,,,,,,,,,,"27/Feb/14 20:58;githubbot;GitHub user boretti opened a pull request:

    https://github.com/apache/camel/pull/104

    CAMEL-7251 SqlProducer call twice the getResultSet on the PreparedStatement => This cause issue with HSQLDB (NPE)

    According https://issues.apache.org/jira/browse/CAMEL-7251

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/boretti/camel camel-7251

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/104.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #104
    
----
commit e44f258a2f4fac85dcb67c48a9dc9ae129aa87e8
Author: boretti <mathieu.boretti@gmail.com>
Date:   2014-02-27T20:56:04Z

    SqlProducer call twice the getResultSet on the PreparedStatement => This
    cause issue with HSQLDB (NPE)

----
;;;","28/Feb/14 03:47;njiang;Applied the patch with thanks to Mathieu into master and camel-2.12.x branches.;;;","12/Mar/14 13:43;githubbot;Github user boretti closed the pull request at:

    https://github.com/apache/camel/pull/104
;;;",,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: verification with subkey restricted by User ID does not work,CAMEL-7244,12697388,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,26/Feb/14 15:45,27/Feb/14 07:26,14/Jul/23 05:49,27/Feb/14 07:26,2.13.0,,,,,,,,2.13.0,,,, camel-crypto,,,,,,0,,,,,,,"If you verify a PGP signature with a subkey which should have a certain User ID, then you run into an error.

Reason: The implementation has not taken into account that the subkey has no User ID on its own. One must consider the User ID of its master/primary key. ",,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Feb/14 15:45;forsthofer;0001-pgp-verficiation-with-subkey-filtered-by-user-ID.patch;https://issues.apache.org/jira/secure/attachment/12631253/0001-pgp-verficiation-with-subkey-filtered-by-user-ID.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,375862,,,Thu Feb 27 07:26:05 UTC 2014,,,,,,,Patch Available,,,,"0|i1srp3:",376158,,,,,,,,,,,,,,,,,,,,"27/Feb/14 07:26;njiang;Applied the patch into camel master branch with thanks to Franz.;;;",,,,,,,,,,,,,,,,,,,,,,,
when(body().isInstanceOf(Collection.class)) does not work in 2.10.7,CAMEL-7242,12697281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oleg.kozlov,oleg.kozlov,26/Feb/14 02:04,26/Feb/14 06:52,14/Jul/23 05:49,26/Feb/14 06:52,2.10.7,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,"I have a body object of type ArrayList<String>, the following Java DSL when() condition incorrectly evaluates to ""false"" in Camel version 2.10.7. In versions 2.10.3 and 2.12.2 it evaluates correctly to ""true"".

when(body().isInstanceOf(Collection.class))

Using Java 6.",,davsclaus,njiang,oleg.kozlov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,375755,,,Wed Feb 26 06:52:46 UTC 2014,,,,,,,,,,,"0|i1sr1b:",376051,,,,,,,,,,,,,,,,,,,,"26/Feb/14 02:39;njiang;We don't provide community support for camel-2.10.x. Please update your Camel version for it.;;;","26/Feb/14 02:42;oleg.kozlov;That's ok, as long as this bug does not get merged to 2.12 branch.

Thanks!;;;","26/Feb/14 06:52;davsclaus;Fixed in 2.12 onwards. 

Camel 2.10.x is EOL;;;",,,,,,,,,,,,,,,,,,,,,
ByteBuffer to String conversion uses buffer capacity not limit,CAMEL-7241,12697241,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,aaronjwhiteside,aaronjwhiteside,25/Feb/14 22:50,28/Feb/14 07:36,14/Jul/23 05:49,28/Feb/14 07:36,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,,,,,,0,,,,,,,"Camel's conversion logic for ByteBuffer's to String's has a bug where camel uses a ByteBuffers capacity() instead of it's limit().

If you allocate a large byte buffer and only partially fill it with data, and use camel to convert this into a string, camel tries to convert all the bytes, even the non-used ones.

This unit test reproduces this bug.

{code}
    @Test
    public void testByteBufferToStringConversion()
    {
        String str = ""123456789"";
        ByteBuffer buffer = ByteBuffer.allocate( 16 );
        buffer.put( str.getBytes() );

        Exchange exchange = new DefaultExchange( context() );
        exchange.getIn().setBody( buffer );
        assertEquals( str, exchange.getIn().getBody( String.class ) );
    }
{code}",,aaronjwhiteside,njiang,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,375715,,,Wed Feb 26 02:35:59 UTC 2014,,,,,,,,,,,"0|i1sqsf:",376011,,,,,,,,,,,,,,,,,,,,"26/Feb/14 02:35;njiang;Applied the patch into camel master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
ThreadsProcessor should resolve RejectedPolicy from the referenced ThreadPoolProfile,CAMEL-7240,12697147,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hekonsek,hekonsek,25/Feb/14 16:52,25/Feb/14 16:54,14/Jul/23 05:49,25/Feb/14 16:54,,,,,,,,,2.13.0,,,,camel-core,,,,,,0,,,,,,,"Hi,

{{ThreadsProcessor}} uses {{rejectedPolicy}} field to determine if it should set the exception on the exchange. 

{code}
boolean abort = ThreadPoolRejectedPolicy.Abort == rejectedPolicy;
if (abort) {
  exchange.setException(new RejectedExecutionException());
}
{code}

Unfortunately {{ThreadsDefinition}} reads {{rejectedPolicy}} only if the latter is set directly on the Threads definition level. If {{getExecutorServiceRef}} is set on the {{ThreadsDefinition}}, the {{rejectedPolicy}} value from the referenced thread pool profile is ignored.

{code}
ThreadsProcessor thread = ...;
...
thread.setRejectedPolicy(getRejectedPolicy());
{code}

That leads to the situations when task is rejected, but exception is not set on the exchange, because {{ThreadsProcessor}} is unaware of the effective rejection policy.

The following configuration demonstrates the issue:

{code}
<threadPool id=""bigPool"" poolSize=""1"" maxPoolSize=""1"" threadName=""foo"" maxQueueSize=""1"" rejectedPolicy=""Abort""/>
...
<threads executorServiceRef=""bigPool"" ...>
...
{code}

{{ThreadsProcessor}} should resolve the rejection policy from the thread pool profile if one is referenced with the {{ExecutorServiceRef}} option.",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,375621,,,Tue Feb 25 16:54:05 UTC 2014,,,,,,,,,,,"0|i1sq7j:",375917,,,,,,,,,,,,,,,,,,,,"25/Feb/14 16:54;hekonsek;Fixed in 77bbb6e2783cb552fb735ce6caeb711bec8eb472.;;;",,,,,,,,,,,,,,,,,,,,,,,
Address the SchemaFactory thread safe issue.,CAMEL-7239,12696841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Feb/14 04:45,24/Feb/14 07:16,14/Jul/23 05:49,24/Feb/14 07:16,2.11.3,2.12.3,,,,,,,2.11.5,2.12.4,2.13.0,,camel-validator,,,,,,0,,,,,,,"SchemaFactory is not thread safe, we need to do addition work in ValidatorProcessor to avoid the threads issue.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,375316,,,Mon Feb 24 07:16:43 UTC 2014,,,,,,,,,,,"0|i1sobz:",375612,,,,,,,,,,,,,,,,,,,,"24/Feb/14 07:16;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Wrong package for PollingConsumerPollStrategy in documentation,CAMEL-7232,12696495,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,agdula,agdula,21/Feb/14 10:44,21/Feb/14 12:34,14/Jul/23 05:49,21/Feb/14 12:33,2.12.2,,,,,,,,,,,,documentation,,,,,,0,,,,,,,"description of *pollStrategy* of File2 endpoint and Polling Consumer parameter is documentet to be an instance of *org.apache.camel.PollingConsumerPollStrategy*. There is no such class. It should be  *org.apache.camel.spi.PollingConsumerPollStrategy*




",,agdula,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,374971,,,Fri Feb 21 12:33:20 UTC 2014,,,,,,,,,,,"0|i1sm7z:",375270,,,,,,,,,,,,,,,,,,,,"21/Feb/14 12:33;hekonsek;Thanks Andrew. Well spotted :) . I've just fixed it - the changes should be visible on the page within next 24 hours.

Cheers.;;;",,,,,,,,,,,,,,,,,,,,,,,
SJMS does not respect QoS settings (ttl/persistence) for sending to queues,CAMEL-7230,12696295,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,ceposta,ceposta,20/Feb/14 16:45,24/Feb/14 17:59,14/Jul/23 05:49,20/Feb/14 20:51,2.12.2,,,,,,,,2.12.4,2.13.0,,,camel-sjms,,,,,,0,,,,,,,"Reproduced here:

https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.12.2-issues/src/test/java/posta/SjmsTestFromMailingList.java",,ceposta,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,374771,,,Thu Feb 20 20:51:38 UTC 2014,,,,,,,,,,,"0|i1skzr:",375071,,,,,,,,,,,,,,,,,,,,"20/Feb/14 20:51;ceposta;Fixed with this commit: 
https://git-wip-us.apache.org/repos/asf/camel.git/?p=camel.git;a=commitdiff;h=5d1eebccce0e88e053be100c401a97ecb10e8908;;;",,,,,,,,,,,,,,,,,,,,,,,
[cxfrs] Producer override bean bus,CAMEL-7229,12696259,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,amarkevich,amarkevich,20/Feb/14 14:44,03/Mar/14 10:06,14/Jul/23 05:49,03/Mar/14 10:06,2.12.1,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-cxf,,,,,,0,,,,,,,"Bean configuration:
org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean cf_cCXFRS_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();
cf_cCXFRS_1.setBus(customBus);

Route:
.to(""cxfrs://bean://cCXFRS_1"")

But at
org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(Exchange)
cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());",,amarkevich,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,CXF-5579,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,374735,,,Mon Mar 03 10:06:28 UTC 2014,,,,,,,,,,,"0|i1skrr:",375035,,,,,,,,,,,,,,,,,,,,"26/Feb/14 11:11;sergey_beryozkin;Hi Willem, can we just remove this call where the custom producer bus is lost ?

If this may be done for a reason to take care of some scenarios (where using the thread default bus is not OK), can we, in CxfRsProducer do something like:

{code:java}

private static class ProducerJAXRSClientFactoryBean extends JAXRSClientFactoryBean {

   public isBusSet() {
       return super.bus != null;
   }
}
{code}

and use ProducerJAXRSClientFactoryBean instead of JAXRSClientFactoryBean within the producer code and then

{code:java}

if (!cfb.isBusSet()) {
    cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
}

{code}

Introducing the custom bean may be the safest bet...

What do you think ?
Sergey;;;","26/Feb/14 11:58;sergey_beryozkin;If the custom bean is introduced then it can be dropped once CXF-5579 is resolved, we'd check ""if (cxf.getBus(false) == null)"";;;","27/Feb/14 08:50;njiang;Hi Sergey,

The below code of CxfRsProducer just make sure the bus setting on the cxfrs endpoint can take effect.
{code}
 cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
{code}
Current work around of setting custom bus is using option of ""bus=#MyBus"" for the cxfrs enpdoint the URI. 
If we check the ""if (cxf.getBus(false) == null)"", we may lost the control of setting the custom bus from the URI.

I think the better solution is we set the cfb bus when the cxfrs enpdoint is not using the default bus.
Any thought?

Willem
;;;","27/Feb/14 11:28;sergey_beryozkin;Hi Willem 

May be ""If cxfrs endpoint is not using the default bus and if the client bean has either null or the default bus"" ?

This way if we have a case where someone sets a custom, non-default bus on the client bean then it will not be overridden, but if it is null or it is a default bus then we can safely copy the custom cxfrs endpoint bus ?

Cheers, Sergey

;;;","27/Feb/14 11:55;amarkevich;Same time Consumer works as expected (I used preconfigured beans);;;","28/Feb/14 03:00;njiang;Hi Sergey, 

In camel-cxf we prefer the rule that the URI option can override the spring or blueprint configuration.
As the client bean's getBus can provides the default bus by default, we don't need to do anything on the client bean if the cxfrs endpoint is not set with a customer bus.

Regards,

Willem

;;;","28/Feb/14 03:02;njiang;Hi Alexey,

I just checked the code and found we don't override the bus setting of the server bean. I will clean up the code once we come to an agreement on the CxfRsProducer.

Regards,

Willem;;;","28/Feb/14 10:11;sergey_beryozkin;Hi Willem

Sure, the idea in your original comment above [1] sounds OK. So,

1. If the route sets a custom bus on the client bean then it will still be protected/kept in place as long as the the endpoint uses a default bus or the same custom bus.
(this will work after your proposed fix)

2. If we have the client bean using the default bus and we have the endpoint using a custom bus as in ""bus=#MyBus"" then the custom bus will be set on the client bean, as per the camel-cxf rules, this is fine too.
(this works now and will work after your proposed fix)

There's only one case I'm concerned about:
3. The client and the server have both custom but different buses. 

That is why I thought that the rule "" (a)Set the client bus only if the cxfrs endpoint is not using the default bus and (b) the client bean has the default bus"" will ensure 1. and 2. cases are still supported as expected today, but we the client does set its own unique bus then this bus is protected. It will probably make sense for WS producers too...
Note (a) - is what you propose, which is good, and (b) is what I propose to add...

Do you think it makes sense to keep the non-default custom buses on the client bean ? We have it working right now by extending the client bean and blocking the overriding of the bus, so if 3, is not implemented then it won't be an issue for us, but I wonder, does it makes sense to preserve the custom client buses or not

Thanks, Sergey




;;;","28/Feb/14 10:16;sergey_beryozkin;Yes, we've confirmed we a client and a server using their own, different custom bus instances, this is why it can be handy to have the client custom bus preserved; should be useful for the WS producer too IMHO.

Thanks, Sergey;;;","03/Mar/14 09:43;njiang;Hi Sergey,

Thanks for you comments, I just remove the default bus creation in the CxfRsEndpoint, so we don't need to setup the default bus to the JAXRSClientFactoryBean or JAXRSServerFactoryBean any more.
In this way, the bus setting of JAXRSClientFactoryBean and JAXRSServerFactoryBean won't be override if we don't set up customer bus on the CxfRsEndpoint.

Regards,

Willem;;;","03/Mar/14 10:06;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,
camel-smpp - fails to correctly send messages that require UCS-2 encoding,CAMEL-7224,12695932,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,daniel.pocock,daniel.pocock,19/Feb/14 11:44,07/Nov/14 03:14,14/Jul/23 05:49,07/Nov/14 03:14,2.12.2,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-smpp,,,,,,0,,,,,,,"If I try to send a string without any config options or headers to indicate alphabet/data coding/encoding, it appears to be sent using an 8 bit character set even if a 16 bit UCS-2 encoding is required.

If I try to set CamelSmppAlphabet=-1 (for unknown) as a header, an invalid message is sent to the SMPP peer and it is rejected with SMPP error code 00000401

If I try to set alphabet=-1 in the endpoint config though and if I also set CamelSmppDataCoding=8 then it correctly sends a UCS-2 message.

Looking at the code (particularly the method SmppSmCommand.determineCharset()), it seems that it can ONLY send UCS-2 if alphabet == UNKNOWN_ALPHABET.  Using the value UNKNOWN_ALPHABET (-1) as a header triggers the problem with the SMPP peer so I can only set that value in the endpoint config.  This determineCharset() method should also recognise alphabet == ALPHA_UCS2
",any,daniel.pocock,davsclaus,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Nov/14 14:32;daniel.pocock;determineCharset_fix.patch;https://issues.apache.org/jira/secure/attachment/12679843/determineCharset_fix.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,374410,,,Fri Nov 07 03:14:06 UTC 2014,,,,,,,Patch Available,,,,"0|i1sirj:",374710,,,,,,,,,,,,,,,,,,,,"05/Mar/14 21:00;muellerc;Daniel, do you consider to provide a patch for it?;;;","27/Apr/14 10:20;daniel.pocock;The patch submitted for the related issue CAMEL-7225 may help in working around this.

It would be really helpful if the documentation on the camel-smpp page explained the difference between alphabet and coding attributes as they are different attributes that relate to the same thing.  This would make it easier for somebody to contribute a patch.;;;","27/Apr/14 17:21;muellerc;There is no patch attached to [CAMEL-7225 |https://issues.apache.org/jira/browse/CAMEL-7225].;;;","29/Apr/14 05:30;davsclaus;Daniel you are welcome to help improve the docs. See
http://camel.apache.org/contributing

Or attach a .txt file to this JIRA ticket with your doc improvement suggestion, and we can grab that and add to the docs.;;;","26/Jun/14 18:24;davsclaus;Assume implemented by CAMEL-7225;;;","06/Nov/14 14:21;daniel.pocock;This is not the same as the other issue, I have developed a separate patch for it.;;;","06/Nov/14 14:40;daniel.pocock;I would suggest applying this patch on 2.14, 2.13 and 2.12 as it is very trivial patch that fixes a definite bug without changing any API or risking any other regression.;;;","07/Nov/14 03:14;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x with thanks to Daniel.;;;",,,,,,,,,,,,,,,,
Language endpoint with constant cannot load from classpath,CAMEL-7219,12695730,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Feb/14 16:43,21/Feb/14 14:42,14/Jul/23 05:49,18/Feb/14 17:36,2.12.2,,,,,,,,2.11.5,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"A route as
{code}
                from(""direct:start"")
                    .to(""language:constant:resource:classpath:org/apache/camel/component/language/hello.txt"")
                    .to(""mock:result"");
{code}

does not work as expected.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,374238,,,2014-02-18 16:43:51.0,,,,,,,,,,,"0|i1shpb:",374538,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NIOConverter need to call flip() when we put something into the buffer,CAMEL-7213,12695449,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Feb/14 06:28,21/Feb/14 14:44,14/Jul/23 05:49,17/Feb/14 06:59,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"When we create a ByteBuffer, we need to make sure it is ready to be read.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373957,,,Mon Feb 17 06:59:33 UTC 2014,,,,,,,,,,,"0|i1sfz3:",374257,,,,,,,,,,,,,,,,,,,,"17/Feb/14 06:59;njiang;Applied the patch into master and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Bean Validator should use OSGi-friendly ValidationProviderResolver if deployed into OSGi environment,CAMEL-7212,12695410,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,16/Feb/14 16:22,16/Feb/14 16:36,14/Jul/23 05:49,16/Feb/14 16:36,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,"If Bean Validator is deployed into OSGi container (like Karaf), it should use OSGi-friendly {{ValidationProviderResolver}}.

We should detect the type of the current {{CamelContext}} and if the latter is OSGi-aware, and if {{ValidationProviderResolver}} isn't specified explicitly, then we should use {{HibernateValidationProviderResolver}} (which is OSGi-friendly).",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373918,,,Sun Feb 16 16:36:50 UTC 2014,,,,,,,,,,,"0|i1sfqf:",374218,,,,,,,,,,,,,,,,,,,,"16/Feb/14 16:36;hekonsek;Fixed in 9b7ab4263f1c99c230f0bc5089c2f200b63a5fb2.;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix broken BeanValidatorTest,CAMEL-7211,12695409,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,16/Feb/14 16:18,16/Feb/14 16:37,14/Jul/23 05:49,16/Feb/14 16:37,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,{{BeanValidatorTest}} doesn't pass because Hibernate Validator doesn't work well in OSGi environment out-of-the-box. We need to fix the test.,,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373917,,,Sun Feb 16 16:37:16 UTC 2014,,,,,,,,,,,"0|i1sfq7:",374217,,,,,,,,,,,,,,,,,,,,"16/Feb/14 16:37;hekonsek;Fixed by resolving CAMEL-7211.;;;",,,,,,,,,,,,,,,,,,,,,,,
getComponentDocumentation does not work if component name has dash in name,CAMEL-7210,12695404,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Feb/14 13:53,21/Feb/14 14:41,14/Jul/23 05:49,16/Feb/14 14:13,2.12.0,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"For example if component is direct-vm we cannot load the component docs. Also the ftp components has special location.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373912,,,2014-02-16 13:53:19.0,,,,,,,,,,,"0|i1sfp3:",374212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NIOConverter.toByteArray return bad data.,CAMEL-7209,12695361,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rhubner,rhubner,15/Feb/14 14:01,21/Feb/14 14:39,14/Jul/23 05:49,17/Feb/14 05:48,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"Current implmentation of NIOConverter.toByteArray return the byte array
that back the buffer. Array can be bigger that relevant data in ByteBuffer.",,njiang,rhubner,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Feb/14 14:03;rhubner;0001-CAMEL-7209-Fix-wrong-implementation-NIOConverter.toB.patch;https://issues.apache.org/jira/secure/attachment/12629219/0001-CAMEL-7209-Fix-wrong-implementation-NIOConverter.toB.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373869,,,Mon Feb 17 05:48:22 UTC 2014,,,,,,,Patch Available,,,,"0|i1sffj:",374169,,,,,,,,,,,,,,,,,,,,"17/Feb/14 05:48;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Radek.;;;",,,,,,,,,,,,,,,,,,,,,,,
CxfRsEndpoint should accept in/out interceptors and properties,CAMEL-7207,12695259,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,14/Feb/14 18:29,21/Feb/14 14:43,14/Jul/23 05:49,18/Feb/14 13:22,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,"CXF interceptors can be reused quite well with CXFRS, they can also be shared between RS & WS endpoints; contextual properties can be very useful too ",,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Feb/14 13:07;sergey_beryozkin;camel7207.txt;https://issues.apache.org/jira/secure/attachment/12629374/camel7207.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373767,,,Wed Feb 19 12:14:21 UTC 2014,,,,,,,,,,,"0|i1set3:",374067,,,,,,,,,,,,,,,,,,,,"17/Feb/14 13:07;sergey_beryozkin;CxfRsEndpoint updated to have a shared code for setting the common server & client properties (providers, features, interceptors and properties)
- two tests added so far to validate the custom properties get injected; the test is failing and the help on getting them fixed will be appreciated; more tests will be added afterwards;;;","18/Feb/14 12:43;njiang;The failed test is caused by AbstractCxfBeanDefinitionParser puts the beanId into properties map by default.
Applied the patch into camel master branch with thanks to Sergey.
;;;","19/Feb/14 12:14;sergey_beryozkin;thanks;;;",,,,,,,,,,,,,,,,,,,,,
Find component names should discover all available components in OSGi,CAMEL-7202,12694949,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Feb/14 09:49,13/Feb/14 10:26,14/Jul/23 05:49,13/Feb/14 10:26,2.12.0,,,,,,,,2.12.3,2.13.0,,,camel-core,osgi,,,,,0,,,,,,,We only discover the currently in used components. But if other components has been installed (but not in use) we should be able to discover them as well.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373457,,,Thu Feb 13 10:26:27 UTC 2014,,,,,,,,,,,"0|i1scwf:",373757,,,,,,,,,,,,,,,,,,,,"13/Feb/14 10:26;davsclaus;See also CAMEL-7188.;;;",,,,,,,,,,,,,,,,,,,,,,,
getComponentDocumentation do not work in OSGi,CAMEL-7200,12694769,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Feb/14 16:20,12/Feb/14 16:35,14/Jul/23 05:49,12/Feb/14 16:35,2.12.0,,,,,,,,2.12.3,2.13.0,,,camel-core,osgi,,,,,0,,,,,,,"This API returns null in OSGi, eg Karaf.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373277,,,2014-02-12 16:20:41.0,,,,,,,,,,,"0|i1sbt3:",373578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[cxfrs] Consumer returns 204 response for simple route,CAMEL-7198,12694739,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,12/Feb/14 12:57,14/Feb/14 08:17,14/Jul/23 05:49,14/Feb/14 08:16,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-cxf,,,,,,0,,,,,,,"Route: from(""cxfrs://.."").setBody().simple("".."");

If .to(""log:any"") added then response is 200",,amarkevich,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7061,,,,,,,,,"12/Feb/14 12:57;amarkevich;camel-204.zip;https://issues.apache.org/jira/secure/attachment/12628476/camel-204.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373247,,,Fri Feb 14 08:16:13 UTC 2014,,,,,,,,,,,"0|i1sbmf:",373548,,,,,,,,,,,,,,,,,,,,"14/Feb/14 08:16;njiang;This issue has been fixed by CAMEL-7061.;;;",,,,,,,,,,,,,,,,,,,,,,,
[cxfrs] Bus features aren't initialized,CAMEL-7194,12694708,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,12/Feb/14 10:31,05/Mar/14 03:07,14/Jul/23 05:49,05/Mar/14 03:07,2.12.2,,,,,,,,,,,,camel-cxf,,,,,,0,,,,,,,"- CxfRsEndpoint doesn't support custom feture support like
org.apache.camel.component.cxf.CxfEndpoint.setFeatures(List<AbstractFeature>)
- org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.createJAXRSClientFactoryBean() can't be used for additional configuration because org.apache.camel.component.cxf.jaxrs.CxfRsProducer.ClientFactoryBeanCache used
- in case bus was initialized with required features they aren't initialized for WebClient",,amarkevich,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,CAMEL-7179,,,,,,,,,,,,,,"12/Feb/14 10:32;amarkevich;CxfRsProducerTest.java;https://issues.apache.org/jira/secure/attachment/12628462/CxfRsProducerTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,373216,,,Mon Feb 17 13:12:08 UTC 2014,,,,,,,,,,,"0|i1sbfj:",373517,,,,,,,,,,,,,,,,,,,,"12/Feb/14 10:32;amarkevich;testProducerWithFeature added;;;","12/Feb/14 10:36;amarkevich;BTW there are typos for methods testGetCostumerWithClientProxyAPI(), testGetCostumersWithClientProxyAPI() and testGetCostumerWithHttpCentralClientAPI();;;","12/Feb/14 12:01;njiang;Hi Alexey,

I hit this kind issue last year, it was mentioned in CXF-4953.
You cannot take the consideration that the feature which is set to the bus can work on the JAXRSClientFactoryBean out of box.

Regards,

Willem;;;","12/Feb/14 12:28;amarkevich;Hi Willem,
I tried to add custom feature somehow - bus initialization was like workaround. CxfRsEndpoint.setFeatures will be enought.;;;","12/Feb/14 13:39;njiang;You can setup the feature by using cxfrs:client or cxfrs:server elements in the spring or blueprint file.
I can add an option features in CxfRsEndpoint to help you set customer feature through the URI.;;;","13/Feb/14 13:47;amarkevich;Finally I've set the features using beans. Thanks!;;;","14/Feb/14 07:28;njiang;Hi Alexey,

I just commit quick fix to camel master and camel-2.12.x, you should be able to set the features option just like you do on camel-cxf.

;;;","14/Feb/14 18:07;sergey_beryozkin;Hi Willem, thanks for fixing it, I've been trying frantically to create a patch for 7179 but have been happy to find out the issue has been fixed :-)

Btw, I have some extra code for setting properties & in/out interceptors, but I guess it is a bit late to squeeze the extra code now, I was not really sure how to to test it, see it from your commit; I can try to do a patch next week or so

Cheers, Sergey ;;;","17/Feb/14 02:02;njiang;@Sergey,

Maybe you can share you patch here and we can figure out how to test it in the community. That's the beauty of OpenSource :);;;","17/Feb/14 13:12;sergey_beryozkin;Hi Willem, sure, I've added a patch to
https://issues.apache.org/jira/browse/CAMEL-7207, to complement your changes to get interceptors & properties also supported at CxfRsEndpoint level.

Now, I don't understand how to test that the properties enabled in Spring contexts are visible to CxfRsEndpoint; see the attached patch to CAMEL-7207, I updated two different tests with no luck; can you please help with getting the tests passing or give a hint on what needs to be done ? I can add tests validating the interceptors and features setup from the context are also visible

Thanks, Sergey ;;;",,,,,,,,,,,,,,
PGPDataFormat: Sub-Key not supported for signing and correct selection of encryption/signing key via KeyFlag,CAMEL-7192,12694477,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,11/Feb/14 12:06,13/Feb/14 09:43,14/Jul/23 05:49,12/Feb/14 09:59,2.12.2,,,,,,,,2.12.3,2.13.0,,, camel-crypto,,,,,,0,,,,,,,"A PGP key ring with version 4 keys typically consists of a primary key which has sub-keys. There is a use-case where the primary key has only the usage flag (KeyFlag) ""certify"" and one sub-key is makred with the usage flag ""signing"" and the other sub-key is marked with usage flag""encryption"".  In this case the PGPDataFormat does not use the correct sub-key for signing and encryption.

In the patch I enabled the usage of sub-keys for the signing process and I introduced the usage flag (KeyFlag) for finding the correct keys for signing and encryption.

",,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Feb/14 09:43;forsthofer;0001-pgp-key-accessor-interfaces-for-key-caching.patch;https://issues.apache.org/jira/secure/attachment/12628710/0001-pgp-key-accessor-interfaces-for-key-caching.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,372985,,,Wed Feb 12 09:59:17 UTC 2014,,,,,,,Patch Available,,,,"0|i1sa0f:",373287,,,,,,,,,,,,,,,,,,,,"12/Feb/14 03:29;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Franz.
@Franz,  
Do you mind update the wiki page for the new feature?;;;","12/Feb/14 06:47;forsthofer;I will do that.;;;","12/Feb/14 07:30;forsthofer;I updated the wiki.;;;","12/Feb/14 09:59;njiang;Thanks Franz, now I can close the issue.;;;",,,,,,,,,,,,,,,,,,,,
IAE when you have a nested placeholder that starts and ends with {{ and }},CAMEL-7189,12694283,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mattnathan,mattnathan,10/Feb/14 15:20,19/Jun/14 08:53,14/Jul/23 05:49,19/Jun/14 08:53,2.12.2,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,,,,,,1,,,,,,,"Test case: https://gist.github.com/mattnathan/7706ebdce8aa51ebc3c6

When you have a uri that has a placeholder in it and that placeholder is of the form {{\{\{prefix\}\}something\{\{suffix\}\}}} then you get an IllegalArgumentException of the form:

{noformat}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[{{value}}] <<< in route: Route(route1)[[From[direct:test]] -> [To[{{value}}]]] because of Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:912)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:177)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:770)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1670)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:477)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:311)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:38)
	at org.apache.camel.component.properties.DefaultPropertiesParser.createPlaceholderPart(DefaultPropertiesParser.java:189)
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:105)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:160)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1128)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:572)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:475)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 40 more
{noformat}",,apiwoni,davsclaus,mattnathan,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7429,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,372792,,,Thu Jun 19 08:53:28 UTC 2014,,,,,,,,,,,"0|i1s8tz:",373096,,,,,,,,,,,,,,,,,,,,"14/Feb/14 13:04;davsclaus;Yeah the bug is that you have 2 nested and that they both start and end the string. So you hit a bug that assume this was only 1 nested.

Working on a fix.;;;","19/Jun/14 08:41;antoine.dessaigne;Now that CAMEL-7429 is fixed, I've executed the provided test and it passes;;;","19/Jun/14 08:53;davsclaus;Thanks its fixed by another ticket;;;",,,,,,,,,,,,,,,,,,,,,
APT - Should check inherited class/interface for UriParam when scanning,CAMEL-7185,12694234,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Feb/14 10:39,10/Feb/14 12:05,14/Jul/23 05:49,10/Feb/14 12:05,2.12.0,,,,,,,,2.12.3,2.13.0,,,tooling,,,,,,0,,,,,,,"For example generation of the file component does not check the super class which has all the options, and therefore we only detect a few options.

{code}
<html>
<header>
<title></title>
</header>
<body>
<h1>file endpoint</h1>
<p>File endpoint.</p>
<table class='table'>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>copyAndDeleteOnRenameFail</td>
    <td>boolean</td>
    <td></td>
  </tr>
  <tr>
    <td>forceWrites</td>
    <td>boolean</td>
    <td></td>
  </tr>
</table>
<h2>file consumer</h2>
<p>File consumer.</p>
</body>
</html>
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,372743,,,2014-02-10 10:39:15.0,,,,,,,,,,,"0|i1s8j3:",373047,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to validate camel-fop feature,CAMEL-7183,12694173,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,09/Feb/14 20:28,21/Feb/14 14:40,14/Jul/23 05:49,09/Feb/14 21:03,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,"{noformat}
christians-mbp:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
...
[INFO]     OK: imports resolved for camel-flatpack
[WARNING] Failed to validate feature camel-fop
[WARNING] No export found to match org.apache.bcel.classfile;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.util;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.generic;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,372682,,,2014-02-09 20:28:34.0,,,,,,,,,,,"0|i1s85r:",372986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-guice - PostConstruct do not throw checked exception,CAMEL-7182,12694082,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/14 08:03,08/Feb/14 08:32,14/Jul/23 05:49,08/Feb/14 08:32,2.12.0,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-guice,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/GuiceCamelContext-checked-exception-issue-with-Glassfish4-tp5746869.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,372591,,,2014-02-08 08:03:33.0,,,,,,,,,,,"0|i1s7lz:",372895,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default value on jmxAgent createConnector should be 'false',CAMEL-7173,12693313,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,preben,preben,05/Feb/14 09:55,05/Feb/14 10:46,14/Jul/23 05:49,05/Feb/14 10:44,2.12.2,,,,,,,,2.13.0,,,,camel-blueprint,camel-spring,jmx,,,,0,,,,,,,"The defalult value is set to true. Should have been false

see http://camel.465427.n5.nabble.com/disabeling-loadStatistics-td5746709.html",,davsclaus,preben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371898,,,Wed Feb 05 10:46:14 UTC 2014,,,,,,,,,,,"0|i1s3cn:",372202,,,,,,,,,,,,,,,,,,,,"05/Feb/14 10:14;davsclaus;Its a flag change which could break stuff for people in patch upgrades, so doing this on 2.13 onwards only.;;;","05/Feb/14 10:46;davsclaus;Ah well the docs so its optional, and thus indicates its false by default. So lets consider this as a bug, despite the default value is in the XSD.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty - Some options in netty configuration do not support # lookup,CAMEL-7172,12693305,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Feb/14 09:11,05/Feb/14 10:09,14/Jul/23 05:49,05/Feb/14 10:09,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-netty,,,,,,0,,,,,,,"For example passphrase does not support passphrase=#myPassword, to lookup a bean with that id that produces the password to use.

There is a few others as well.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371890,,,2014-02-05 09:11:39.0,,,,,,,,,,,"0|i1s3av:",372194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[bean-validation] Provide OSGi-friendly ValidationProviderResolver,CAMEL-7168,12693106,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,04/Feb/14 13:57,04/Feb/14 15:09,14/Jul/23 05:49,04/Feb/14 15:09,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,Default Hibernate's {{ValidationProviderResolver}} doesn't work well in the OSGi environment. It will be nice to ship OSGi-friendly provider together with the camel-bean-validation jar.,,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371692,,,Tue Feb 04 15:09:42 UTC 2014,,,,,,,,,,,"0|i1s23b:",371992,,,,,,,,,,,,,,,,,,,,"04/Feb/14 15:09;hekonsek;Fixed in 058d22e83a9f9d343ebb7299ca8cf371c69135de.;;;",,,,,,,,,,,,,,,,,,,,,,,
"AbstractListAggregationStrategy : at the end of the split, the body is not replaced by the agregated list",CAMEL-7167,12693101,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yvesdm,yvesdm,04/Feb/14 13:10,05/Feb/14 11:57,14/Jul/23 05:49,05/Feb/14 11:57,2.12.1,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"Using a class that extends AbstractListAggregationStrategy to rebuild a List after the completion of the split cause the body not to be replaced by the agregated list at the end of the split.

In other words (AbstractListAggregationStrategy.onCompletion(Exchange exchange) is never called.


Here is what I do :

from(HANDLE_A_LIST)//
            .split(body(), new ListAggregationStrategy())// body is an arrayList of String
            .to(""log:foo"")//
            .end()// end split
            // the body is a string instead of a List
            .end()// end route

   
class ListAggregationStrategy extends AbstractListAggregationStrategy<String>
    {

        @Override
        public String getValue(Exchange exchange)
        {
            return exchange.getIn().getBody();
        }
    }

As workaround, I use .setBody(property(Exchange.GROUPED_EXCHANGE)) after the end of the split.",,davsclaus,yvesdm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371687,,,Wed Feb 05 11:11:47 UTC 2014,,,,,,,,,,,"0|i1s227:",371987,,,,,,,,,,,,,,,,,,,,"05/Feb/14 11:11;davsclaus;Thanks for reporting. Yeah the onCompletion was currently only in use with the aggregate eip. Should do the same for split and the others as well.;;;",,,,,,,,,,,,,,,,,,,,,,,
BacklogDebugger - Should not change body/header type to string,CAMEL-7163,12692926,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Feb/14 19:11,03/Feb/14 19:15,14/Jul/23 05:49,03/Feb/14 19:15,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"When using the backlog debugger then updating the body/headers would currently force those to become string type.

We should preserve existing type, and allow end users to specify a new type. And also make it possible to remove body/headers as well.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371512,,,2014-02-03 19:11:38.0,,,,,,,,,,,"0|i1s0zb:",371814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dozer - Can cause dead-lock in init when using spring,CAMEL-7161,12692807,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Feb/14 09:37,03/Feb/14 09:39,14/Jul/23 05:49,03/Feb/14 09:39,2.12.2,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,"When using spring with dozer, and we call init in the ctr, then spring can cause a dead lock when it does its getBean stuff.

{code}
   java.lang.Thread.State: BLOCKED (on object monitor)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:182)
	- waiting to lock <0x00000007d7c4ca38> (a java.util.concurrent.ConcurrentHashMap)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:468)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:356)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:334)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:434)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:428)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1182)
	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:228)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.findByTypeWithName(ApplicationContextRegistry.java:85)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.findByTypeWithName(PropertyPlaceholderDelegateRegistry.java:70)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.lookupDozerBeanMapperConfigurations(DozerTypeConverterLoader.java:228)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.init(DozerTypeConverterLoader.java:155)
{code}

We should defer init to a bit later, and turn the loader into a service so init is done like the others with start|stop methods.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371393,,,2014-02-03 09:37:44.0,,,,,,,,,,,"0|i1s09j:",371696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throttling has problems with rate changes,CAMEL-7160,12692805,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michael.pisula,michael.pisula,03/Feb/14 09:25,03/Feb/14 13:55,14/Jul/23 05:49,03/Feb/14 13:55,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,eip,,,,,0,,,,,,,"When using the throttler with the header expression for controlling the rate, changing the rate does not work reliably. 

Some more information can be found in the following mail thread:

http://camel.465427.n5.nabble.com/Problems-with-dynamic-throttling-td5746613.html",,davsclaus,michael.pisula,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Feb/14 09:53;michael.pisula;CAMEL-7160.patch;https://issues.apache.org/jira/secure/attachment/12626626/CAMEL-7160.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371391,,,Mon Feb 03 13:55:28 UTC 2014,,,,,,,Patch Available,,,,"0|i1s093:",371694,,,,,,,,,,,,,,,,,,,,"03/Feb/14 09:27;michael.pisula;New test and fix for dynamic rate change problem;;;","03/Feb/14 09:53;michael.pisula;Added fix for changing rate from high to low, the patch before worked just accidentally because messageCount in the test was 9.;;;","03/Feb/14 13:55;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,
camel-bindy not picking up @Link annotation items,CAMEL-7159,12692535,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,31/Jan/14 16:00,03/Feb/14 14:12,14/Jul/23 05:49,03/Feb/14 14:12,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,,,,,,,0,,,,,,,"It works fine (like in the tests) when you provide bindy with a Map<String, Object> of model objects corresponding to the @Linked-ed classes. We should do better though and try to figure this out for users.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,371130,,,2014-01-31 16:00:58.0,,,,,,,,,,,"0|i1rynr:",371434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect implementation of the method StringHelper.hasStartToken(),CAMEL-7155,12691648,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,trohovsky,trohovsky,28/Jan/14 15:04,21/Feb/14 14:43,14/Jul/23 05:49,17/Feb/14 08:08,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"From the semantic point of view the method hasStartToken() should return false in case of an expression without language specified, i.e. starting with ""${"". 

However, it is correct to return true in current usage of hasStartToken() in camel-core, i.e. checking if an expression is in simple language, since if the expression does not contain the language token, then it is a simple expression.

The method calls for checking of simple language should be replaced with a newly created method isSimpleLanguage(String expression) that would check if the language is a simple expression, i.e. hasStartToken(expression, ""simple"") || expression.indexOf(""${"") >= 0.
",,davsclaus,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,370393,,,Mon Feb 17 08:08:42 UTC 2014,,,,,,,,,,,"0|i1ru93:",370714,,,,,,,,,,,,,,,,,,,,"03/Feb/14 14:17;davsclaus;Thomas, are you working on a patch?;;;","17/Feb/14 08:08;njiang;Applied the patch into camel-2.12.x and master branches.;;;",,,,,,,,,,,,,,,,,,,,,,
NullPointerException when chaining CXF/Jackson REST services in a Camel route,CAMEL-7147,12690309,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dvanbale,dvanbale,22/Jan/14 16:46,05/Mar/14 03:07,14/Jul/23 05:49,05/Mar/14 03:07,2.12.0,,,,,,,,2.12.4,2.13.0,,,camel-cxf,camel-jackson,,,,,0,cxf,cxfrs,json,threadlocal,,,"When chaining multiple REST service calls in a single camel route, using Jackson as the JSON provider for CXF, the JacksonJsonProvider appears to lose its thread local context between invocations, resulting in an NPE. The NPE doesn't always occur at the same point. Sometimes one or both additional services are successfully called before the thead local context disappears, but other times neither service is called and an NPE is thrown as soon as the initial service is invoked.

See attached zip archive for reproducer (service2 and service3 are deployed on JBoss AS 7.3.0).

See camel-users thread for background:
http://camel.465427.n5.nabble.com/Questions-about-cxfrs-td5746294.html

Lib versions:

Camel: 2.12.0
Jackson: 1.9.10
CXF: 2.7.0

Full stacktrace:

11:40:51,678 | INFO  | tp1806392083-718 | LoggingInInterceptor             | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Inbound Message
----------------------------
ID: 15
Address: http://localhost:8182/service1/service1path
Encoding: ISO-8859-1
Http-Method: POST
Content-Type: application/json
Headers: {Accept=[*/*], accept-encoding=[gzip,deflate,sdch], Accept-Language=[en-US,en;q=0.8], connection=[keep-alive], Content-Length=[23], content-type=[application/json], Host=[localhost:8182], Origin=[chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb], User-Agent=[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36]}
Payload: {""id"":1,""name"":""Fred""}

--------------------------------------
11:40:51,679 | WARN  | tp1806392083-718 | PhaseInterceptorChain            | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Interceptor for {http://jackson.blueprint.camel.mycompany.com/}ServiceOne has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
11:40:51,681 | WARN  | tp1806392083-718 | PhaseInterceptorChain            | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Exception in handleFault on interceptor org.apache.cxf.binding.xml.interceptor.XMLFaultOutInterceptor@7ba1c840
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
11:40:51,682 | ERROR | tp1806392083-718 | tractFaultChainInitiatorObserver | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Error occurred during error handling, give up!
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
11:40:51,683 | WARN  | tp1806392083-718 | AbstractHttpConnection           | 93 - org.eclipse.jetty.aggregate.jetty-all-server - 8.1.9.v20130131 | /service1/service1path
java.lang.RuntimeException: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:116)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 22 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
",Fuse ESB 6.1.0.alpha,dvanbale,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CXF-5542,"22/Jan/14 20:33;dvanbale;CAMEL-7147.zip;https://issues.apache.org/jira/secure/attachment/12624421/CAMEL-7147.zip","07/Feb/14 16:36;sergey_beryozkin;blueprint.xml;https://issues.apache.org/jira/secure/attachment/12627647/blueprint.xml","10/Feb/14 22:25;sergey_beryozkin;jaxrs-beans.xml;https://issues.apache.org/jira/secure/attachment/12628087/jaxrs-beans.xml",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,369262,,,Tue Feb 11 15:58:17 UTC 2014,,,,,,,,,,,"0|i1rn8n:",369567,,,,,,,,,,,,,,,,,,,,"22/Jan/14 16:53;dvanbale;Reproducer project, contains a camel route project (camel-blueprint-jackson), a project with shared class (model), and two additional REST services to be called by the camel route (service2 and service3).;;;","22/Jan/14 20:33;dvanbale;Fixed logging issue in service3;;;","22/Jan/14 21:20;dvanbale;Update:

Looks like, on the first invocation, all three services are called and the NPE occurs when the entry-point service is sending its response. Upon subsequent invocations, there is an immediate NPE during invocation of the entry-point service.;;;","23/Jan/14 19:21;dvanbale;A workaround for this is to wire your own ObjectMapper and use it to instantiate the JacksonJsonProvider. This way, the provider won't attempt to store the mapper on the thread local context.

	<bean id=""jacksonMapper"" class=""org.codehaus.jackson.map.ObjectMapper"" />
	<bean id=""jsonProvider"" class=""org.codehaus.jackson.jaxrs.JacksonJsonProvider"">
		<argument ref=""jacksonMapper""/>
	</bean>

;;;","26/Jan/14 09:12;njiang;Hi David,

You user case is more complicated than the other CXFRS application, I suggest you use camel-jetty and camel-http to implement the REST proxy server with more control on you side.
 
In the code of CXF, the rs server clean the proxy thread local context when it suspend the invocation.  But in your rs client side it may still need to access the thread local information when it get the response message.

Can you change the enter point of camel route in camel-blueprint-jackson like this?
{code}
...
  <route id=""twBusinessRoute"">
                        <from uri=""cxfrs:bean:Service1?Synchronous=false"" />
...
{code}
The Synchronous option can make sure the request and response are handled in the same thread.

Regards,

Willem
;;;","04/Feb/14 17:36;sergey_beryozkin;Willem, it is nothing to do with CXF clearing the thread-local proxies on the invocation thread exiting for whatever reasons.

The reason for this NPE is that we have a single Jackson JAX-RS provider shared between multiple CXFRS components - this is in itself is fine, we have a test where a single Jackson provider instance is shared between few endpoints. The problem is the components in the route have different CXF bus instances => the server endpoint injects a thread local proxy into Jackson while the client being injected with a different bus - another one which overrides the server-injected one, therefore the server thinking it has a proper local proxy injects the current value into it bur the provider points to another thread local proxy.

It is a bit of a mess unfortunately.

I've managed to get past the NPE but updating it like this:

{code:xml}
        <bean class=""org.apache.cxf.bus.blueprint.BlueprintBus"" id=""jaxrs"">
            <property name=""id"" value=""jaxrs""/>
        </bean>

	<cxf:rsServer id=""Service1"" address=""http://localhost:8182""
		serviceClass=""com.mycompany.camel.blueprint.jackson.ServiceOne""
		loggingFeatureEnabled=""true""
                bus=""jaxrs"">
		<cxf:providers>
			<ref component-id=""jsonProvider"" />
		</cxf:providers>
	</cxf:rsServer>
        <!-- and also injecting the bus references for clients -->
{code}

and then adding a bus ref

{code:xml}

<from uri=""cxfrs:bean:Service1?bus=#jaxrs"" />

<!-- same for to: -->
{code}

Another work-around is to register a unique Jackson provider per the component, but that is not cool.

This got me past NPE but I hit:

{noformat}
Caused by: org.codehaus.jackson.map.JsonMappingException: No serializer found for class org.apache.cxf.helpers.LoadingByteArrayOutputStream$1 and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )
	at org.codehaus.jackson.map.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)[197:jackson-mapper-asl:1.9.13]
{noformat}

I think we are actually hitting the problem to do with Jackson blindly accepting all types including InputStream, I'll play a bit more with it; CXF should also be enhanced to allow the thread local contexts shared between different buses
;;;","07/Feb/14 16:36;sergey_beryozkin;David, Willem, see the attached files, it all works nicely if we use a custom bus (will not be needed starting from CXF 2.7.10) and drop Jackson: it accepts InputStream and then chokes on it (this won't be a problem with CXF 3.0.0, with JAX-RS 2.0 requiring that the default providers take care of types like InputStream, etc). ;;;","07/Feb/14 16:41;sergey_beryozkin;Willem or David (if you are still interested) - can you please confirm independently it will work with CXF 2.7.10 when it is out ? if you will, please use the attached files first, next - remove a reference to the custom bus - this should not be needed with CXF 2.7.10. And as I said, with CXF 3.0.0 the original route definition is expected to work as is, i.e, no custom bus and jettison references;;;","08/Feb/14 06:40;njiang;Hi Sergey,

Thanks for digging this issue. If you did some change in the CXF side, could you please add a comment with the CXF JIRA?
It could be easy for the user to follow the fix of CXF.

Regards,

Willem;;;","09/Feb/14 18:32;sergey_beryozkin;CXF-5542 fix will let users avoid introducing shared custom CXF buses as shown in the attached files ;;;","10/Feb/14 02:54;njiang;Hi Sergey,

Thanks for the link. 
It looks there is an bus injection issue in camel-cxfrs blueprint parser, I will dig the code to see if I can do some work on the camel-cxf side to make sure the bus are injected rightly.

Regards,

Willem;;;","10/Feb/14 11:31;sergey_beryozkin;Hi Willem, I see you've added the tests validating the bus injection works , thanks.

I've created 

https://issues.apache.org/jira/browse/CXF-5551 

but it is to do with the fact that creating a custom bus with a name other than ""cxf"" in the context via the CXF Blueprint namespace handler does not really work; I guess CXF-5551 is a pure CXF issue, unless you see this being actually a CXF RS Blueprint parser issue, I've looked at the Camel code, it seems OK to me, please double check.

Cheers, Sergey

;;;","10/Feb/14 22:25;sergey_beryozkin;CXF-5551 is a non issue; updated jaxrs-beans.xml;;;","11/Feb/14 04:57;njiang;Hi Sergey,

I just did a quick test with karaf 2.3.3, camel-2.13-SNAPSHOT and CXF 2.7.10, the NPE is gone.

Regards,

Willem;;;","11/Feb/14 09:46;sergey_beryozkin;Hi Willem, thanks for the help on your end; I guess this issue becomes resolved then ? The only other thing that is worth testing, may be independently, is that the original route as defined by David works (with Jackson & with no custom bus) - with CXF 3.0.0-miltesone2, when it's out, but it can be done later 
Cheers, Sergey;;;","11/Feb/14 15:58;dvanbale;Thanks for your work on this. I am still interested in testing the original route. I'll try to do so when I get a chance, but not sure when I'll get to that since I'm not working with Camel at the moment.;;;",,,,,,,,
NPE in Aggregator when completionSize = 1,CAMEL-7146,12690219,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,sburkard,sburkard,22/Jan/14 08:32,06/Feb/14 09:51,14/Jul/23 05:49,06/Feb/14 09:51,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,aggregator,,,,,,"A Camel aggregator with persistence repository cannot have a completionSize of 1. If this is configured, every message produces a NPE with the attached stacktrace. 

I have also attached a small example project that shows the Exception. As soon as the completionSize is > 1, it runs fine.

This is just a minor flaw, since I cannot think about a really useful case with completionSize 1, but it worked with earlier versions of Camel. 

As an alternative (if completionSize 1 should not be used), Camel could throw an error during Context startup when completionSize < 2.",,davsclaus,sburkard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Jan/14 08:37;sburkard;Camel-7146-example.tgz;https://issues.apache.org/jira/secure/attachment/12624303/Camel-7146-example.tgz","22/Jan/14 08:33;sburkard;Camel-7146-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12624302/Camel-7146-stacktrace.txt",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,369173,,,Wed Feb 05 11:59:18 UTC 2014,,,,,,,,,,,"0|i1rmp3:",369478,,,,,,,,,,,,,,,,,,,,"22/Jan/14 08:33;sburkard;The NPE stacktrace;;;","22/Jan/14 08:37;sburkard;Example project that shows the behaviour with completionSize = 1;;;","03/Feb/14 15:24;sburkard;I edited the description of the issue since I analyzed the issue in the Camel code. 

In the method ""doAggregation"" the aggregator evaluates if the aggregation is complete. With completionSize = 1 this is the case on every Exchange. Therefore the aggregator does not persist the Exchanges, but skips this part: 

{code:title=AggregateProcessor.java|borderStyle=solid}
...
if (complete == null) {
	doAggregationRepositoryAdd(newExchange.getContext(), key, originalExchange, answer);
	// we are not complete so the answer should be null
	answer = null;
} else {
...
{code}

On the other hand does the method ""onCompletion"" no such evaluation and tries to delete the Exchange in the Repository. Therefore the NPE.
;;;","05/Feb/14 11:59;davsclaus;Yeah completion size = 1 doesnot so much sense, but you can also have a completion predicate that just returns true each time, and have the same situation with only 1 aggregated.;;;",,,,,,,,,,,,,,,,,,,,
"Added username, password options on cxf endpoint ",CAMEL-7145,12690181,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jan/14 03:28,22/Jan/14 03:53,14/Jul/23 05:49,22/Jan/14 03:53,,,,,,,,,2.11.4,2.12.3,2.13.0,,,,,,,,0,,,,,,,It could be handy if we can setup the basic authentication username and password on the cxf endpoint url.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,369138,,,Wed Jan 22 03:53:30 UTC 2014,,,,,,,,,,,"0|i1rmhb:",369443,,,,,,,,,,,,,,,,,,,,"22/Jan/14 03:53;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.
I also updated the cxf wiki page for the new added options.;;;",,,,,,,,,,,,,,,,,,,,,,,
Blueprint route not shutdown when using OSGi service processor,CAMEL-7144,12689995,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,DominikAmon,DominikAmon,21/Jan/14 10:31,15/Feb/15 16:58,14/Jul/23 05:49,15/Feb/15 16:58,2.12.2,,,,,,,,2.15.0,,,,camel-core,,,,,,0,,,,,,,"The route description uses .toString() when shutting down. This causes the shutdown to block if a proxied OSGi service is used as processor (in XML DSL <process ref=""osgiService/>) and the service is not present at the time the route is shut down.

See http://camel.465427.n5.nabble.com/Blueprint-route-not-shutdown-when-using-OSGi-service-processor-td5746114.html",,davsclaus,DominikAmon,mitaes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,368952,,,Sun Feb 15 16:58:29 UTC 2015,,,,,,,,,,,"0|i1rlbz:",369256,,,,,,,,,,,,,,,,,,,,"06/Feb/14 14:32;davsclaus;As its a toString on the osgi proxy that causes it to call the remote service that is no longer, then its a bit more tricky.

We could either
- avoid any toString calls, but then non OSGi proxied beans can't have toString description in logs etc as today.
- detect if its a proxy and avoid toString
- something else;;;","15/Feb/15 16:58;davsclaus;We now do not do a toString on the processor instance;;;",,,,,,,,,,,,,,,,,,,,,,
camel-groovy - Evaluation returns 1st result only,CAMEL-7143,12689846,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Jan/14 17:49,31/Jan/14 16:24,14/Jul/23 05:49,31/Jan/14 16:24,2.11.2,2.12.0,,,,,,,2.11.4,2.12.3,2.13.0,,camel-script,,,,,,0,,,,,,,"Seems like we have another issue reported which we couldn't reproduce.

But maybe this time we can.
Issue at SO
http://stackoverflow.com/questions/21221085/strange-behaiour-with-camel-groovy-spring-dsl

",,davsclaus,fbalicchia,max.bridgewater,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6988,,,,,,,,,,,"30/Jan/14 21:00;max.bridgewater;groovy-test.zip;https://issues.apache.org/jira/secure/attachment/12626174/groovy-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,368813,,,Fri Jan 31 16:17:08 UTC 2014,,,,,,,,,,,"0|i1rkh3:",369117,Regression,,,,,,,,,,,,,,,,,,,"27/Jan/14 18:42;davsclaus;Added some unit tests in camel-itest on master and 2.12 branch. Cannot reproduce this issue from the SO.;;;","30/Jan/14 21:00;max.bridgewater;Attached is a ready to run small Maven-Spring project that  would help reproduce this issue. The POM has two properties section. To reproduce the issue, comment out the Camel 2.12.2 section. To check the issue with Camel 2.11.1 uncomment the other properties section.

After building the app, dploy it in Tomcat or Jetty and hit the following URLs in your browser:
http://localhost:8080/groovy-test/rs/convert/4
http://localhost:8080/groovy-test/rs/convert/5

The expected result is browser showing the number 4 and 5 respectively.
Observed behaviour with 2.12.1 is browser will show 4 for both URLs.
;;;","31/Jan/14 14:19;davsclaus;Thanks for the test case which reproduces the issue;;;","31/Jan/14 16:16;davsclaus;Okay have a fix for this, and will backport this to branches shortly.;;;","31/Jan/14 16:17;davsclaus;The problem is in camel-script;;;",,,,,,,,,,,,,,,,,,,
CsvDataFormat unmarshal overwrites delimiter in static CSVStrategy strategies,CAMEL-7142,12689565,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,johnsdouglass,johnsdouglass,17/Jan/14 20:08,18/Jan/14 12:15,14/Jul/23 05:49,18/Jan/14 12:15,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-csv,,,,,,0,easyfix,,,,,,"The unmarshal function in CsvDataFormat contains the following line:

{code}
strategy.setDelimiter(config.getDelimiter());
{code}

This can cause problems when multiple CsvDataFormats are used which rely on the default CSVStrategy or one of the other static CSVStrategy objects.

Here is sample code to demonstrate the problem:
 
{code}
final CsvDataFormat csv = new CsvDataFormat();
final CsvDataFormat tsv = new CsvDataFormat();
tsv.setDelimiter(""\t"");

context.addRoutes(new RouteBuilder() {
    @Override
    public void configure() throws Exception {
        from(""file:///tmp/?include=.*.csv"")
                .unmarshal(csv)
                .process(new MyProcessor());
        from(""file:///tmp/?include=.*.tsv"")
                .unmarshal(tsv)
                .process(new MyProcessor());
    }
});
{code}

Running the code above with several files with 2 lines, 9 columns per line and comma or tab delimiters returns the following (the exact values may be different from run to run):

{code}
File: 0.tsv, lines: 2
  Line 1 columns: 9
  Line 2 columns: 9
File: 0.csv, lines: 2
  Line 1 columns: 1
  Line 2 columns: 1
File: 1.csv, lines: 2
  Line 1 columns: 2
  Line 2 columns: 1
File: 1.tsv, lines: 2
  Line 1 columns: 9
  Line 2 columns: 9
{code}

These should all show 9 columns.

Adding the following lines corrects the problem, because each DataFormat has its own CSVStrategy:

{code}
csv.setStrategy(new CSVStrategy(',', '""', '#'));
tsv.setStrategy(new CSVStrategy('\t', '""', '#'));
{code}

The suggested fix would be for the CsvDataFormat to have its own copy of its CSVStrategy instead of using what amounts to a pointer to another CSVStrategy. Perhaps setStrategy should be changed to do that. This is tedious because CSVStrategy has no copy constructor and has many properties, but would be a defensive way to do it.

Note also that the example at http://camel.apache.org/csv.html under ""Unmarshalling with a pipe as delimiter"" actually alters the CSVStrategy.DEFAULT_STRATEGY, so any subsequent CsvDataFormat objects created would have a pipe as the delimiter.
",,bvahdat,johnsdouglass,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,368532,,,Sat Jan 18 12:15:35 UTC 2014,,,,,,,,,,,"0|i1riqn:",368836,,,,,,,,,,,,,,,,,,,,"18/Jan/14 11:43;bvahdat;Luckily {{CSVStrategy}} has widen the visibility of {{Object#clone()}} method from {{protected}} to {{public}}, so that we can easily make a safe copy of a given {{CSVStrategy}} object when necessary.;;;","18/Jan/14 12:15;bvahdat;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,
Custom HeaderFilterStrategy does not work when set it on either component or endpoint uri,CAMEL-7141,12689524,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,joeluo,joeluo,17/Jan/14 17:20,15/Apr/14 03:21,14/Jul/23 05:49,15/Apr/14 03:21,2.12.2,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-netty-http,,,,,,0,,,,,,,"Setting custom HeaderFilterStrategy on either NettyHttpComponent or NettyHttpEndpoint uri does not work. The only way to get it to work is to create a NettyHttpBinding bean and set the custom HeaderFilterStrategy as a property of the NettyHttpBinding bean and then set the custom NettyHttpBinding bean onto either NettyHttpComponent and NettyHttpEndpoint uri.

The reason it does not work was that when applying the custom HeaderFilterStrategy, it is not set on NettyHttpBinding object as the NettyHttpBinding object always uses default HeaderFilterStrategy. 

I have attached the patch file. It might not be necessary to modify NettyHttpComponent class but I thought it'd be better to initialize configuration, nettyBinding and headerFilterStrategy in their getter method only when needed rather than in constructor of the NettyHttpComponent.",,joeluo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jan/14 17:21;joeluo;NettyHttpHeaderFilterBug.patch;https://issues.apache.org/jira/secure/attachment/12623682/NettyHttpHeaderFilterBug.patch","07/Apr/14 20:39;joeluo;revised_patch.txt;https://issues.apache.org/jira/secure/attachment/12639055/revised_patch.txt",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,368491,,,Tue Apr 08 13:36:59 UTC 2014,,,,,,,Patch Available,,,,"0|i1rihj:",368795,,,,,,,,,,,,,,,,,,,,"18/Jan/14 08:53;njiang;Applied the patch into master and camel-2.12.x branches.
;;;","07/Apr/14 20:39;joeluo;Hi, Willem

Apologies but I have to reopen this JIRA since the previous patch I provided caused a new problem. I'll attach a revised patch with a new junit test case to this ticket.

Here is the code changes in NettyHttpEndpoint.java class:
{code}
     public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
         this.headerFilterStrategy = headerFilterStrategy;
+        if (getNettyHttpBinding() != null) {
+            getNettyHttpBinding().setHeaderFilterStrategy(headerFilterStrategy);
+        }
{code}

Basically it allows this method to modify NettyHttpComponent's member object ""nettyHttpBinding"" simply by setting a new headerFilterStrategy to it. As a result, the component's member object contains a different headerFilterStrategy rather than default one that created in component's default constructor. It is ok if we only have one netty http endpoint created. Otherwise, the next endpoint will be created with a non-default headerFilterStrategy that is from previous endpoint. 

The fix is quite simple: in this case, we should not touch component's nettyHttpBinding object at all. Instead, if we have configured a custom headerFilterStrategy on endpoint uri, we should create a new DefaultNettyHttpBinding object with the headerFilterStrategy for the current endpoint.

I also reverted back some changes to initialize default NettyHttpConfiguration, NettyHttpHeaderFilterStrategy and DefaultNettyHttpBinding object in NettyHttpComponent's default constructor since it is reasonable to create them upfront for the component.;;;","08/Apr/14 13:36;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Joe.
I also did some changes on the joe's patch to support setting the CustomDefaultNettyHttpBinding to the CamelNettyHttpComponent.;;;",,,,,,,,,,,,,,,,,,,,,
Problem with MvelExpression class visibility between camel bundles,CAMEL-7139,12689519,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andrzej.majewski,andrzej.majewski,17/Jan/14 16:47,03/Feb/14 14:17,14/Jul/23 05:49,03/Feb/14 14:17,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,osgi,,,,,,1,,,,,,,"http://camel.465427.n5.nabble.com/Problem-with-camel-routes-running-in-apache-karaf-2-3-3-td5745929.html

I am having problems with with class visibility between osgi bundles when using camel 2.12 and 2.13-SNAPSHOT. I have created a showcase to reproduce the problem based on camel example projects. I have tested the created solution in camel 2.10 and problem does not exist.

I have created a sample application which is able to reproduce the problem. Please pick it up from my forked repo:
https://github.com/andrzej-majewski/camel/tree/MvelExpression-class-visibility


The problem occurs when
- camel-example-osgi-domain - project containing only domain classes required by different osgi projects ex.( org.apache.camel.example.osgi.domain.MyPojo )
- camel-example-osgi-mvel -  example project which has dependency on camel-example-osgi-domain

Now camel-example-osgi-mvel has following camel context.
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>   
<beans xmlns=""http://www.springframework.org/schema/beans""  
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  
       xmlns:camel=""http://camel.apache.org/schema/spring""  
       xsi:schemaLocation=""   
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">  
  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"">  
  
    <route>  
      <from uri=""timer://mytestTrigger?fixedRate=true&amp;period=10000""/>  
      <to uri=""myTestFactory""/>  
    </route>  
    <route id=""mvelTest"">  
      <from uri=""seda://myMvelTest?concurrentConsumers=2""/>  
      <choice>  
      <when>  
        <mvel>request.body instanceof org.apache.camel.example.osgi.MyPojo</mvel>  
      <to uri=""log:MvelRouter""/>  
      </when>            
      </choice>  
    </route>  
          
  </camelContext>  
  
  <bean id=""myTestFactory"" class=""org.apache.camel.example.osgi.MyTestFactory"">  
    <property name=""numberOfMessages"" value=""2""/>  
  </bean>  
  
</beans>
{code}

When I deploy both feature to karaf and place a message on seda://myMvelTest queue I get following exception in karaf.
{code}
ERROR | eda://myMvelTest | DefaultErrorHandler              | rg.apache.camel.util.CamelLogger  215 | 73 - org.apache.camel.camel-core - 2.13.0.SNAPSHOT | Failed delivery for (MessageId: ID-localhost-51000-1389691121739-1-56 on ExchangeId: ID-localhost-51000-1389691121739-1-85). Exhausted after delivery attempt: 1 caught: org.apache.camel.ExpressionEvaluationException: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
 
Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[mvelTest          ] [mvelTest          ] [seda://myMvelTest?concurrentConsumers=2                                       ] [        14]
[mvelTest          ] [choice2           ] [when[mvel{Mvel[request.body instanceof org.apache.camel.example.osgi.MyPojo]}]] [         0]
 
Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
        Id                  ID-localhost-51000-1389691121739-1-85
        ExchangePattern     InOut
        Headers             {breadcrumbId=ID-localhost-51000-1389691121739-1-56, CamelRedelivered=false, CamelRedeliveryCounter=0}
        BodyType            org.apache.camel.example.osgi.MyPojo
        Body                org.apache.camel.example.osgi.MyPojo@21093d9e
]
 
Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.ExpressionEvaluationException: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
        at org.apache.camel.language.mvel.MvelExpression.evaluate(MvelExpression.java:60)[103:org.apache.camel.camel-mvel:2.13.0.SNAPSHOT]
        at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:90)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)[:1.6.0_65]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)[:1.6.0_65]
        at java.lang.Thread.run(Thread.java:695)[:1.6.0_65]
Caused by: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:683)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:337)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:140)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.dynamic.DynamicOptimizer.optimizeAccessor(DynamicOptimizer.java:67)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.Instance.getReducedValueAccelerated(Instance.java:21)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:42)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.MVEL.executeExpression(MVEL.java:954)[102:org.mvel2:2.1.7.Final]
        at org.apache.camel.language.mvel.MvelExpression.evaluate(MvelExpression.java:57)[103:org.apache.camel.camel-mvel:2.13.0.SNAPSHOT]
{code}",,andrzej.majewski,davsclaus,fbalicchia,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Jan/14 22:34;fbalicchia;CAMEL-7139.patch.txt;https://issues.apache.org/jira/secure/attachment/12625693/CAMEL-7139.patch.txt","28/Jan/14 22:33;fbalicchia;mvelItest.path.txt;https://issues.apache.org/jira/secure/attachment/12625692/mvelItest.path.txt",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,368486,,,Mon Feb 03 14:17:23 UTC 2014,,,,,,,,,,,"0|i1rigf:",368790,Regression,,,,,,,,,,,,,,,,,,,"17/Jan/14 16:50;andrzej.majewski;I am happy to create a pull request with showcase example.;;;","27/Jan/14 22:59;fbalicchia;I reproduced the problem with itest please see the attach.

To Fix the problem a possible solution is remove TCCL to MVEL until 
http://jira.codehaus.org/browse/MVEL-250 is not resolved

Please see the attach for the patch;I hope it's ok for you.

If it's ok for you please clean it a bit

Any feedback is welcome.;;;","28/Jan/14 06:15;davsclaus;Yeah you are welcome to cleanup the patch.;;;","28/Jan/14 22:33;fbalicchia;osgi-itest for mvel;;;","03/Feb/14 14:17;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,
QuartzComponent with custom Scheduler and multiple contexts requires JMX to be enabled,CAMEL-7132,12688635,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ndjensen,ndjensen,13/Jan/14 23:21,27/Aug/16 14:33,14/Jul/23 05:49,28/Jan/14 13:20,2.11.2,,,,,,,,2.12.3,2.13.0,,,camel-quartz,,,,,,0,,,,,,,"If you have a custom Scheduler set on the QuartzComponent and multiple camel contexts per scheduler, then you must have JMX enabled for it work right.  Ideally, it should not require JMX to be enabled to work correctly.  Specifically, QuartzComponent.onCamelContextStarted(CamelContext, boolean) will make a map key that depends on the context's managementName, which is not set if JMX is not enabled.  Without a managementName, all contexts with quartz routes end up with a key named CamelQuartzCamelContext - null, and then when the CamelJob executes it will retrieve the wrong context.

Note we worked around this by injecting a custom LifecycleStrategy that sets the managementName in onContextStart().  But ideally we shouldn't have to do that.",,davsclaus,githubbot,ndjensen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367654,,,Sat Aug 27 14:33:32 UTC 2016,,,,,,,,,,,"0|i1rde7:",367961,,,,,,,,,,,,,,,,,,,,"28/Jan/14 13:20;davsclaus;Thanks for reporting.;;;","24/Aug/16 08:51;githubbot;GitHub user YoshikiHigo opened a pull request:

    https://github.com/apache/camel/pull/1137

    Followup to CAMEL-7132

    This commit is a small followup to CAMEL-7132 (ca124fd2906071db794e6f539379be637144110a).
    
    Yoshiki, Shinpei, Hideaki, and Mei

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/YoshikiHigo/camel fix05

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1137
    
----
commit 098468ebda766dda500bd0f525787db80da7c083
Author: Yoshiki Higo <yoshiki.higo@gmail.com>
Date:   2016-08-24T08:45:45Z

    Followup to CAMEL-7132

----
;;;","27/Aug/16 14:33;githubbot;Github user YoshikiHigo closed the pull request at:

    https://github.com/apache/camel/pull/1137
;;;",,,,,,,,,,,,,,,,,,,,,
Set XsltBuilder allowStax attribute to be true by default,CAMEL-7130,12688507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jan/14 08:14,25/Jan/16 21:53,14/Jul/23 05:49,13/Jan/14 09:46,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,It could be more effective and safe to use the stax API by default.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9534,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367526,,,Mon Jan 13 09:46:22 UTC 2014,,,,,,,,,,,"0|i1rclz:",367834,,,,,,,,,,,,,,,,,,,,"13/Jan/14 09:46;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Remove the CamelXsltResourceUri header from xslt component,CAMEL-7129,12688491,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jan/14 03:00,13/Jan/14 07:48,14/Jul/23 05:49,13/Jan/14 07:48,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,We should not encourage user to change the xslt url dynamically.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367510,,,Mon Jan 13 07:48:06 UTC 2014,,,,,,,,,,,"0|i1rcif:",367818,,,,,,,,,,,,,,,,,,,,"13/Jan/14 07:48;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
tokenizeXml fails when attributes have a / in them,CAMEL-7125,12688278,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,mattnathan,mattnathan,10/Jan/14 16:57,21/Feb/14 14:43,14/Jul/23 05:49,07/Feb/14 09:38,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"{{tokenizeXml}} does not work or produce value xml output when attributes contain a {{/}}.

The test below will fail under 2.12.2

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class CamelTokenizeXmlTest extends CamelTestSupport {

  @EndpointInject(uri = ""mock:result"")
  protected MockEndpoint resultEndpoint;
  @Produce(uri = ""direct:start"")
  protected ProducerTemplate template;

  @Test
  public void testXmlWithSlash() throws Exception {
    String message = ""<parent><child attr='/' /></parent>"";
    resultEndpoint.expectedBodiesReceived(""<child attr='/' />"");
    template.sendBody(message);
    resultEndpoint.assertIsSatisfied();
  }

  @Override
  protected RouteBuilder createRouteBuilder() {
    return new RouteBuilder() {
      @Override
      public void configure() {
        from(""direct:start"").split().tokenizeXML(""child"").to(""mock:result"");
      }
    };
  }
}
{code}",,davsclaus,mattnathan,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367297,,,Fri Feb 07 09:38:02 UTC 2014,,,,,,,,,,,"0|i1rb7r:",367606,,,,,,,,,,,,,,,,,,,,"10/Jan/14 17:08;mattnathan;Fails in the same way (no message received) under: 2.12.2, 2.12.1, 2.12.0, 2.11.2, 2.11.1

Fails with the following error under 2.11.0:

{noformat}
java.lang.AssertionError: mock://result Body of message: 0. Expected: <<child attr='/' />> but was: <<child attr='/' /></parent></child>>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)
	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:613)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)
{noformat};;;","06/Feb/14 14:33;davsclaus;The regular expression used by the parser may need to take this into account. To deal with skipping / in quoted strings.;;;","07/Feb/14 09:38;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
Enable Xml Transformer security processing feature by default,CAMEL-7123,12688205,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Jan/14 09:16,10/Jan/14 09:20,14/Jul/23 05:49,10/Jan/14 09:20,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,It could be good if we enable the Xml Transformer security processing feature by default.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367224,,,Fri Jan 10 09:20:58 UTC 2014,,,,,,,,,,,"0|i1rarj:",367533,,,,,,,,,,,,,,,,,,,,"10/Jan/14 09:20;njiang;Applied patch into master , camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException on BindyFixedLengthFactory.unbind(),CAMEL-7120,12688155,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jreagan,jreagan,09/Jan/14 22:46,10/Jan/14 09:29,14/Jul/23 05:49,10/Jan/14 09:29,2.12.0,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-bindy,,,,,,0,,,,,,,"The Camel Bindy component throws a NullPointerException on unbind when you've specified a header, but no footer. It looks like there was a simple copy/paste error in the marshal method. When generating the models, it checks the headerRow for null and then adds the headerRow. It then checks the headerRow (not the footerRow) for null and then adds the footerRow. Later down the chain, the BindyFixedLengthFactory throws a null exception when it tries to call getName() on the model Class.",,davsclaus,jreagan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,367175,,,Fri Jan 10 09:29:40 UTC 2014,,,,,,,,,,,"0|i1ragn:",367484,,,,,,,,,,,,,,,,,,,,"10/Jan/14 09:29;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
JettyHttpProducer.doStop does not stop client thread pool,CAMEL-7116,12688048,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matihost,matihost,09/Jan/14 11:31,10/Jan/14 09:04,14/Jul/23 05:49,10/Jan/14 09:04,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-jetty,,,,,,0,,,,,,,"Case:

CamelContext with one route :

from(""direct:a"")
 .routingSlip(generateHttpUrl())

Where generateHttpUrl() returns  for example:

""jetty:http://someurl.com:666/some?httpClientMinThreads=128&""


When CamelContext is closing, JettyHttpProducer.doStop is not called.

Result:
-  When JettyHttpProducer.client is closing, its thread pool is not closed and the threads are non-deamon threads (subject to another JIRA),  so application cannot be shutdown.


",java7,davsclaus,matihost,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7117,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,367054,,,Fri Jan 10 09:04:57 UTC 2014,,,,,,,,,,,"0|i1r9pz:",367364,,,,,,,,,,,,,,,,,,,,"10/Jan/14 09:04;davsclaus;Thanks for reporting. We now stop the thread pool.;;;",,,,,,,,,,,,,,,,,,,,,,,
A single call of consumerTemplate.receiveBody consumes more than one messages from a SEDA queue,CAMEL-7112,12687680,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bocamel,bocamel,07/Jan/14 16:47,06/Feb/14 16:42,14/Jul/23 05:49,06/Feb/14 16:42,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"When using consumer template's receiveBody on a SEDA queue that has multiple exchanges, a single call of receiveBody consumed more than one messages from the queue.  This happens for both receiveBody and receiveBodyNoWait.

I will attach a test project that can produce this issue.",JDK 1.7 on Windows 8.1,bocamel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,366680,,,Thu Feb 06 14:51:56 UTC 2014,,,,,,,,,,,"0|i1r7f3:",366991,,,,,,,,,,,,,,,,,,,,"07/Jan/14 16:54;bocamel;SInce it seems that I cannot attach files to this issue, here are the code to reproduce this issue:

public class TestProc implements Processor {
	
	public void process(Exchange exchange) throws Exception {
		SedaEndpoint queueEp = (SedaEndpoint) exchange.getContext().getEndpoint(""seda:test"");
		ConsumerTemplate cTemplate = (ConsumerTemplate) exchange.getContext().getRegistry().lookupByName(""cTemplate"");
		System.out.println(""seda queue size before receive: "" + queueEp.getExchanges().size());
		String msgBody = cTemplate.receiveBody(queueEp, 10, String.class);
		System.out.println(""seda queue size after receive: "" + queueEp.getExchanges().size());
	}

}

will produce the following output:

seda queue size before receive: 5 
seda queue size after receive: 0 

That is, after a single receive, the queue became empty.  The routes used are:

  <bean id=""testProc"" class=""com.pci.TestSeda.TestProc"" />
  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">

        <camel:consumerTemplate id=""cTemplate"" />

    <camel:route>
      <camel:from uri=""file:src/data?noop=true""/>
      <camel:to uri=""seda:test"" />
    </camel:route>
    
    <camel:route>
    <camel:from uri=""timer://foo?period=500000"" />
    <camel:process ref=""testProc""/>
    </camel:route>
  </camel:camelContext>

Thank you!
;;;","06/Feb/14 14:51;davsclaus;Thanks for reporting. Yeah we should use a real polling consumer implementation instead of the event driven, then we can better control taking exchanges from the queue.;;;",,,,,,,,,,,,,,,,,,,,,,
Multicast EIP with only one child processor does not call aggregate strategy,CAMEL-7111,12687603,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Jan/14 08:42,07/Jan/14 09:17,14/Jul/23 05:49,07/Jan/14 09:17,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,eip,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/multicast-aggregation-tp5745571.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,366604,,,2014-01-07 08:42:40.0,,,,,,,,,,,"0|i1r6xz:",366915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms NullPointerException in case of connection loss,CAMEL-7107,12687432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,matriv,matriv,06/Jan/14 13:14,10/Jan/14 10:55,14/Jul/23 05:49,10/Jan/14 10:55,2.13.0,,,,,,,,2.12.3,2.13.0,,,camel-sjms,,,,,,0,,,,,,,When connection to a broker (HornetQ) is destroyed due to networking issues or broker internal issues or restarts the getProducers().borrowObject() returns null which is not handled properly.,,davsclaus,matriv,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Jan/14 13:17;matriv;CAMEL_7107.patch;https://issues.apache.org/jira/secure/attachment/12621597/CAMEL_7107.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,366433,,,Fri Jan 10 10:55:56 UTC 2014,,,,,,,Patch Available,,,,"0|i1r5vz:",366744,,,,,,,,,,,,,,,,,,,,"10/Jan/14 09:30;davsclaus;Willem, have you fixed this?;;;","10/Jan/14 10:55;njiang;Applied the patch into master and camel-2.12.x fixed branches.;;;",,,,,,,,,,,,,,,,,,,,,,
PGP decryption sometimes can't find the secret key,CAMEL-7106,12687343,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mriordan,mriordan,05/Jan/14 01:48,06/Jan/14 03:31,14/Jul/23 05:49,06/Jan/14 03:31,2.12.2,,,,,,,,2.13.0,,,, camel-crypto,,,,,,0,patch,,,,,,"Camel Crypto fails to decrypt PGP files encrypted by GnuPG and other programs, when the secret key used to encrypt the symmetric key is not the first on the keyring (using Bouncy Castle's definition of a keyring). The error message is ""Provided input is encrypted with unknown pair of keys.""  Since the encryption key in files from other PGP programs normally is a subkey and is not the first one in the keyring (which is typically the master key), this means that decryption fails in many cases.

The fix is a one-liner to PGPDataFormatUtil.findPrivateKeyWithKeyId(), to use a BC method that searches for the secret key rather than assume it's the first one on the secret keyring.  I will attach a patch.",,mriordan,njiang,,,,,,0,0,,0%,0,0,,,,,,,,,,,,,,,CAMEL-7052,,,,,,,,,"05/Jan/14 01:51;mriordan;CAMEL-7106.patch;https://issues.apache.org/jira/secure/attachment/12621496/CAMEL-7106.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,366342,,,Mon Jan 06 03:31:06 UTC 2014,,,,,,,,,,,"0|i1r5bz:",366653,,,,,,,,,,,,,,,,,,,,"06/Jan/14 03:31;njiang;This issue is resolved in CAMEL-7052 few days ago, please try to use the latest camel-2.13-SNAPSHOT to verify the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,
Broken JUnit classes for testing authentication in camel-jcr,CAMEL-7102,12686922,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gzurowski,gzurowski,02/Jan/14 02:02,03/Jan/14 04:43,14/Jul/23 05:49,03/Jan/14 04:43,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-jcr,,,,,,0,,,,,,,"The following JUnit tests that are supposed to test authentication with the camel-jcr component are currently broken and disabled (annotated @Ignore):

- AuthTokenLoginFailureTest
- JcrAuthTokenWithLoginTest

Testing authentication in camel-jcr (i.e. connection URI parsing) is essential and should be fixed.",,gzurowski,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jan/14 02:06;gzurowski;camel-fix-auth-unittests.patch;https://issues.apache.org/jira/secure/attachment/12621022/camel-fix-auth-unittests.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,365917,,,Fri Jan 03 04:43:33 UTC 2014,,,,,,,Patch Available,,,,"0|i1r2p3:",366224,,,,,,,,,,,,,,,,,,,,"02/Jan/14 02:16;gzurowski;The attached patch fixes the authentication test cases for the camel-jcr component. Also submitted pull request https://github.com/apache/camel/pull/82.;;;","02/Jan/14 02:27;gzurowski;Regarding pull request https://github.com/apache/camel/pull/82: Please note that the JUnit classes were renamed in a second commit (https://github.com/gzurowski/camel/commit/71ad30423ef5d61e60e746d1d6465fc58367355c) to reflect what is actually tested. The previous class names were misleading as they tested the opposite of what the name suggested.;;;","03/Jan/14 04:43;njiang;Applied patch into master and camel-2.12.x branches with thanks to Gregor.;;;",,,,,,,,,,,,,,,,,,,,,
CLONE - Camel Splitter eat up exceptions recorded by the underlying Scanner,CAMEL-7100,12686527,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,waynebagguley,waynebagguley,27/Dec/13 14:14,03/Jan/14 07:25,14/Jul/23 05:45,03/Jan/14 07:25,2.10.2,2.10.3,2.11.0,2.12.2,2.9.4,2.9.5,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/Trouble-with-split-tokenize-on-linux-td5721677.html for details,,njiang,waynebagguley,,,,,,,,,,,,,,,,,,,CAMEL-5767,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,365518,,,Fri Jan 03 07:25:59 UTC 2014,,,,,,,,,,,"0|i1r02n:",365819,,,,,,,,,,,,,,,,,,,,"27/Dec/13 14:49;waynebagguley;This is still a problem.

In Java 7 the Scanner class now implements Closeable so the fix for 5767 does not work as the Splitter code handling the IOException never gets executed.

Furthermore there is an additional problem when using tokenize with grouping e.g.: from(""file:inbox"").split().tokenize(""\n"", 1000).streaming().to(""activemq:queue:order"");

In this case the Scanner object is wrapped in a GroupIterator and the code in the Splitter to handle the case of when the Scanner exited with an exception does not get executed because GroupIterator implements Closeable (and is not an instance of Scanner either). I.e. in both cases only the first case of the IF statement on line 149 of the Splitter class will be executed and this leads to no exception being thrown and incorrect behaviour whereby the incorrect number of split messages gets processed and the route exits with no errors.;;;","03/Jan/14 07:25;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x.;;;",,,,,,,,,,,,,,,,,,,,,,
The ObjectHelper#createIterator utility should properly adhere the java.util.Iterator contract,CAMEL-7096,12686420,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,26/Dec/13 14:56,26/Dec/13 15:08,14/Jul/23 05:49,26/Dec/13 15:08,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"According to the {{java.util.Iterator#next()}} contract the implementation should throw {{NoSuchElementException}} if the iteration has no more elements. However this is currently not the case by the different anonymous class implemetations of this interface through {{ObjectHelper#createIterator()}}.

The side effect of this is that currently this could end up with {{IndexOutOfBoundsException}} and what not if one would iterate over the {{Node}}(s) of a DOM {{NodeList}}. Another example is that calling {{next()}} on the {{Iterator}} returned for an empty String *repeatedly* doesn't throw  any {{NoSuchElementException}} *although* it's {{hasNext()}} method returns false!

We should better provide guards for the condition when there's no more elements available in which case a {{NoSuchElementException}} should be thrown.",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,365409,,,2013-12-26 14:56:59.0,,,,,,,,,,,"0|i1qzev:",365711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong <property /> type definition in camel-spring.xsd,CAMEL-7094,12686307,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,o_nix,o_nix,24/Dec/13 15:28,05/Feb/15 14:56,14/Jul/23 05:49,05/Feb/15 14:56,2.12.2,,,,,,,,2.15.0,,,,camel-blueprint,camel-spring,,,,,0,,,,,,,"It defines *<property />* as following:

{code:xml}
<xs:element name=""property"" nillable=""true"" type=""xs:anyType""/>
{code}

via

{code:xml}
<xs:complexType name=""propertiesDefinition"">
  <xs:sequence>
    <xs:element ref=""tns:property"" minOccurs=""0"" maxOccurs=""unbounded""/>
  </xs:sequence>
</xs:complexType>
{code}

but I believe that it should be a link to the existing

{code:xml}
<xs:complexType name=""propertyDefinition"">
  <xs:sequence/>
  <xs:attribute name=""key"" type=""xs:string"" use=""required""/>
  <xs:attribute name=""value"" type=""xs:string"" use=""required""/>
</xs:complexType>
{code}",,davsclaus,o_nix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,365287,,,Thu Feb 05 08:54:14 UTC 2015,,,,,,,,,,,"0|i1qynz:",365590,,,,,,,,,,,,,,,,,,,,"04/Jan/14 08:55;davsclaus;The schema is auto generated and JAXB has a problem when there is multiple classes with the same type name (eg ""property""). So we will look into this in Camel 3.0 where the schema can be adjusted.

The <properties> still work fine, for end users, if they set the tags as documented.;;;","23/Jul/14 08:50;davsclaus;Yeah I think we need to slight adjust the xsd so setting properties for CamelContext should use a different name so there is no clash.;;;","05/Feb/15 08:54;davsclaus;We have a chance to get this fixed now;;;",,,,,,,,,,,,,,,,,,,,,
StreamCache does not reset at the end of the pipeline,CAMEL-7087,12685797,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,siano,siano,20/Dec/13 12:16,20/Dec/13 17:28,14/Jul/23 05:49,20/Dec/13 17:28,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"The StreamCache does not reset at the end of the pipeline.

The following routes will not work as expected:
   from(""direct:c"").noStreamCaching().to(""direct:d"").to(""mock:c"");
   from(""direct:d"").streamCaching().process(new TestProcessor());

(the test processor is a processor that reads the InputMessage)

If another processor is added after the TestProcessor that does nothing, the routes will work as expected.

This case is a bit synthetic, but in real life a route that starts with a InOut CXF endpoint, has an endpoint that generates a Stream and then writes the message content to an in only endpoint (file, FTP, log, etc.) will also fail, even if stream caching is enabled.
",,davsclaus,forsthofer,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Dec/13 12:20;siano;0001-CAMEL-7087-StreamCache-does-not-reset-at-the-end-of-.patch;https://issues.apache.org/jira/secure/attachment/12619803/0001-CAMEL-7087-StreamCache-does-not-reset-at-the-end-of-.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,364958,,,Fri Dec 20 17:28:20 UTC 2013,,,,,,,Patch Available,,,,"0|i1qwon:",365269,,,,,,,,,,,,,,,,,,,,"20/Dec/13 12:27;siano;The root cause is currently the StreamCache is reset only before the executin of the processor, not afterwards. If the consumer gets the exchange back, a StreamCache in the in-message will remain as it is and does not close.

My patch also resets the stream cache after each processor. This means normally the reset() will be executed twice on the stream cache (after the previous processor and before the next), but a reset() on a StreamCache that was reset before, will only do a null comparison, so it doesn't cost much. I also considered to remove the reset before the processors, but I am not sure whether this doesn't break wiretaps or the like.;;;","20/Dec/13 17:28;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,
ZooKeeperProducer should shutdown the ConnectionManager when it is closed,CAMEL-7085,12685750,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,20/Dec/13 05:41,22/Dec/13 02:55,14/Jul/23 05:49,22/Dec/13 02:55,,,,,,,,,,,,,camel-zookeeper,,,,,,0,,,,,,,"We got a pull request in the github for it.
https://github.com/apache/camel/pull/72",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,364825,,,Sun Dec 22 02:55:53 UTC 2013,,,,,,,,,,,"0|i1qvsn:",365125,,,,,,,,,,,,,,,,,,,,"22/Dec/13 02:55;njiang;Applied the patch with some enhancement into master, camel-2.12.x and camel-2.11.x branches. Thank to Klaus for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
FtpEndpoint createRemoteFileOperations should keep the parameter for next invocation,CAMEL-7077,12685328,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Dec/13 07:14,18/Dec/13 17:45,14/Jul/23 05:49,18/Dec/13 08:01,,,,,,,,,2.11.3,2.12.3,2.13.0,,,,,,,,0,,,,,,,"Current createRemoteFileOperations just remove the parameter map directly when it configure the ftp client. It could cause some troubles when the createRemoteFileOperations is called again.
 
Here is the mail thread which talks about it.
http://camel.465427.n5.nabble.com/Camel-FTP-consumer-socketFactory-not-work-correctly-tp5744716.html ",,alexey-s,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,364405,,,Wed Dec 18 17:45:29 UTC 2013,,,,,,,,,,,"0|i1qt7r:",364705,,,,,,,,,,,,,,,,,,,,"18/Dec/13 08:01;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;","18/Dec/13 17:45;alexey-s;Thanks for the correction of an error.
Exactly the same error there FtpsEndpoint.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-restlet - request headers are sent in response,CAMEL-7073,12684980,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davidkeen,davidkeen,16/Dec/13 15:42,17/Dec/13 02:59,14/Jul/23 05:49,17/Dec/13 02:59,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-restlet,,,,,,0,,,,,,,"The fix applied in CAMEL-6879 causes the request headers to be sent back in the response.

DefaultRestletBinding copies the request headers in 'org.restlet.http.headers' header to the response headers in 'org.restlet.http.headers'.

This causes problems for things like Content-Type header which is a valid request and response header and so the response is sent with the request content-type. Eg, POST requests that should receive JSON in response and send using content-type application/x-www-form-urlencoded will be sent back a response with the same content-type which doesn't make sense.",,davidkeen,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6879,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,364057,,,Tue Dec 17 02:59:16 UTC 2013,,,,,,,,,,,"0|i1qr2n:",364357,,,,,,,,,,,,,,,,,,,,"16/Dec/13 15:54;davidkeen;I have opened a pull request with a fix for this issue including a unit test: https://github.com/apache/camel/pull/69.

I can create and attach a patch if you prefer.;;;","17/Dec/13 02:59;njiang;Applied patch into master and camel-2.12.x branches with thanks to David.;;;",,,,,,,,,,,,,,,,,,,,,,
Download page must not link to snapshots / nightly builds,CAMEL-7070,12684869,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sebb,sebb,16/Dec/13 00:17,14/Jan/14 17:35,14/Jul/23 05:49,16/Dec/13 20:07,,,,,,,,,,,,,,,,,,,0,,,,,,,"Nightly builds / snapshots which are not formal releases should not be linked from the main download page.

Such builds have not been voted on and should only be used by developers who should be made aware that the code is without any guarantees,

Nightly builds are not formal ASF releases, and must not be promoted to the general public.

See [1] second para. The second sentence states:

""Do not include any links on the project website that might encourage non-developers to download and use nightly builds, snapshots, release candidates, or any other similar package.""

[1] http://www.apache.org/dev/release.html#what
",http://camel.apache.org/download.html,dkulp,njiang,sebb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363941,,,Mon Dec 16 20:07:17 UTC 2013,,,,,,,,,,,"0|i1qqe7:",364247,,,,,,,,,,,,,,,,,,,,"16/Dec/13 02:20;njiang;I think we can move the snapshot information to the developer section.
But now I just cannot update the wiki page as I keep hitting Non Clustered Confluence error.;;;","16/Dec/13 02:26;sebb;Are you sure the download page is a Confluence page?;;;","16/Dec/13 02:30;njiang;We edit the Confluence page and it will be exported to the svn site.;;;","16/Dec/13 08:21;njiang;I just moved the snapshot information of download page to the developer section.;;;","16/Dec/13 14:10;sebb;When I look at the download page, it still contains references to snapshot builds.;;;","16/Dec/13 14:17;dkulp;
The confluence ""upgrade"" has caused a delay in the publish stuff.   I'm not sure when confluence will get back to a fully usable state.  :-(   Right now, we're getting all kinds of timeouts, etc... while trying to do anything with it.   Not sure if the indexes or something is still being rebuilt or what's completely going on with it.;;;","16/Dec/13 14:29;sebb;I see.

Please leave the issue open until this is resolved.

Thanks.;;;","16/Dec/13 20:07;dkulp;
Confluence is starting to be usable so was able to get an export out of it.;;;",,,,,,,,,,,,,,,,
Sending an empty soap body message to a generic provider camel-cxf consumer results in NPE,CAMEL-7069,12684524,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,13/Dec/13 19:08,29/Jan/14 11:38,14/Jul/23 05:49,29/Jan/14 11:38,2.12.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-cxf,,,,,,1,,,,,,,"In some cases, CXFPayload is instantiated with a null body and this is causing an NPE later in the processing.

Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfPayload$1.size(CxfPayload.java:105)
	at org.apache.camel.component.cxf.converter.NodeListWrapper.getLength(NodeListWrapper.java:33)
	at org.apache.camel.converter.jaxp.DomConverter.toString(DomConverter.java:69)
	at org.apache.camel.converter.jaxp.DomConverter.toByteArray(DomConverter.java:142)
	at org.apache.camel.converter.jaxp.DomConverter.toInputStream(DomConverter.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)

What is not sure is how we should fix it.
CXFPayload is not checking whether the body is null when it is instantiated. In that case, some methods will lead to NPE but some are not (like getBodySources() or getHeaders()). And there are some test cases passing a null body.

So I think, we should either 
1. change CXFPayload to automatically creates an empty body (i.e., an empty List<Source>) when the body passed to the constructor is null, or
2. add this null->empty handling in DefaultCXFBinding.getPayloadBodyElements when extracting the body and pass an empty list to the CXFPayload constructor in this case, or
3. just throws a specific exception instead of NPE in this particular case.

In any case, we need to clarify what is the correct usage of CXFPayload.


",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363596,,,Tue Jan 28 17:49:44 UTC 2014,,,,,,,,,,,"0|i1qo9z:",363902,,,,,,,,,,,,,,,,,,,,"28/Jan/14 17:49;ay;After some pause (forgot about this ticket), I thought about those options again.
Since some of the CXF payload conversion methods and NodeList conversion methods assume the body (of the CxfPayload) to be not null, option 3 will require many changes in those converters to avoid NPE. Option 1 would introduce a redundant way of creating an empty cxf payload (either passing null or an empty list). So, I think we can opt for option 2 and change the getPayloadBodyElements method so that normal scenarios resulting a null camel body will not result in NPE at cxf payload instantiation.


;;;",,,,,,,,,,,,,,,,,,,,,,,
Flatpack skips 1 row every 2 rows when using split with streaming=true,CAMEL-7068,12684519,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xfournet,xfournet,13/Dec/13 18:49,14/Dec/13 09:09,14/Jul/23 05:49,14/Dec/13 09:09,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-flatpack,,,,,,0,,,,,,,"When using a route with a streamed split of a Flatpack result, only halve of the rows are processed

Using the repro case we get
{noformat}
2013-12-13 19:51:17,438 [main] INFO route1 - Number of rows 6
2013-12-13 19:51:17,442 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=1, Col2=A}]
2013-12-13 19:51:17,443 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=3, Col2=C}]
2013-12-13 19:51:17,443 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=5, Col2=E}]
{noformat}

if streaming() is removed, all the lines are processed

{noformat}
2013-12-13 19:52:37,471 [main] INFO route1 - Number of rows 6
2013-12-13 19:52:37,475 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=1, Col2=A}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=2, Col2=B}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=3, Col2=C}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=4, Col2=D}]
2013-12-13 19:52:37,479 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=5, Col2=E}]
2013-12-13 19:52:37,479 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=6, Col2=F}]
{noformat}",,davsclaus,xfournet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Dec/13 18:50;xfournet;Camel7068Test.java;https://issues.apache.org/jira/secure/attachment/12618655/Camel7068Test.java","13/Dec/13 19:33;xfournet;Fix-CAMEL-7068.patch;https://issues.apache.org/jira/secure/attachment/12618666/Fix-CAMEL-7068.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363591,,,Sat Dec 14 09:09:14 UTC 2013,,,,,,,Patch Available,,,,"0|i1qo8v:",363897,,,,,,,,,,,,,,,,,,,,"13/Dec/13 18:50;xfournet;Repro case;;;","13/Dec/13 19:33;xfournet;Patch with unit test;;;","14/Dec/13 09:09;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,
JcrProducer ignores existing nodes and creates invalid node hierarchies,CAMEL-7064,12684298,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gzurowski,gzurowski,12/Dec/13 16:43,12/Dec/13 19:01,14/Jul/23 05:49,12/Dec/13 19:01,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-jcr,,,,,,0,,,,,,,"The CamelJcrInsert operation of the JcrProducer does not handle existing nodes properly: If some of the nodes already exist within the path provided by the CamelJcrNodeName property, they will be skipped, resulting in the creation of an incorrect node hierarchy. Therefore, JcrProducer only works correctly with newly created node hierarchies.

E.g.: For the requested path ""/exists1/exists2/new-node"", JcrProducer will incorrectly create ""/new-node"" (i.e. directly on root level), given nodes ""exists1"" and ""exists2"" do already exist in the repository.",,davsclaus,gzurowski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Dec/13 16:46;gzurowski;camel-jcr-existing-nodes.patch;https://issues.apache.org/jira/secure/attachment/12618434/camel-jcr-existing-nodes.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363370,,,Thu Dec 12 19:01:07 UTC 2013,,,,,,,Patch Available,,,,"0|i1qmw7:",363676,,,,,,,,,,,,,,,,,,,,"12/Dec/13 16:46;gzurowski;The attached patch contains a new JUnit test ""JcrProducerSubNodeTest"" that creates a node and a sub node in the same node hierarchy. It will fail if the fix to JcrProducer (which is also part of the patch) is not applied.

I have also submitted a pull request for this fix: https://github.com/apache/camel/pull/66;;;","12/Dec/13 18:58;davsclaus;The patch looks good. Only one checkstyle error

/Users/davsclaus/workspace/camel/components/camel-jcr/src/test/java/org/apache/camel/component/jcr/JcrProducerSubNodeTest.java:80: method call child at indentation level 16 not at correct indentation, 20

Details here how to build with checkstyle
http://camel.apache.org/building.html;;;","12/Dec/13 19:01;davsclaus;Thanks for the patch. I have fixed the CS.

Keep them coming :);;;",,,,,,,,,,,,,,,,,,,,,
"Tracer, BacklogTracer and BacklogDebugger should stop/shutdown when Camel does that",CAMEL-7062,12684200,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/13 10:42,12/Dec/13 13:23,14/Jul/23 05:49,12/Dec/13 13:23,2.12.0,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"This ensures we cleanup resources nicely.

Also the backlog tracer should remove processor definitions when a route is removed to not keep reference to defintions which are no longer in use.

See nabble
http://camel.465427.n5.nabble.com/BacklogTracer-memory-leak-tp5744561.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363272,,,2013-12-12 10:42:39.0,,,,,,,,,,,"0|i1qman:",363578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultCxfRsBinding only uses Exchange.getOut(),CAMEL-7061,12684068,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,DominikAmon,DominikAmon,11/Dec/13 16:32,14/Feb/14 08:16,14/Jul/23 05:49,12/Dec/13 13:39,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-cxf,,,,,,0,,,,,,,"When {{org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding}} is populating the response from an {{org.apache.camel.Exchange}} then only the {{exchange.getOut().getBody()}} is used.

In the SOAP case {{org.apache.camel.component.cxf.DefaultCxfBinding}} the response is either uses  {{exchange.getOut().getBody()}} or {{exchange.getIn().getBody()}}

See also [Discussion|http://camel.465427.n5.nabble.com/DefaultCxfRsBinding-only-uses-Exchange-getOut-td5744605.html] for more details.",,DominikAmon,njiang,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7198,,,,,,,,,,,"11/Dec/13 16:35;DominikAmon;DefaultCxfRsBinding.patch;https://issues.apache.org/jira/secure/attachment/12618256/DefaultCxfRsBinding.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,363140,,,Thu Dec 12 13:39:05 UTC 2013,,,,,,,,,,,"0|i1qlhb:",363446,,,,,,,,,,,,,,,,,,,,"11/Dec/13 16:35;DominikAmon;The patch implements the same handling as in {{org.apache.camel.component.cxf.DefaultCxfBinding}} for propulating the response in the {{org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding}};;;","12/Dec/13 13:39;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-sql - Setting SQL_ROW_COUNT header is not updated if the header already exists,CAMEL-7058,12683846,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Dec/13 14:49,10/Dec/13 14:58,14/Jul/23 05:49,10/Dec/13 14:58,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-sql,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/bug-sql-SQL-Component-cannot-change-SQL-ROW-COUNT-header-value-tp5744350.html",,davsclaus,kuro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362918,,,2013-12-10 14:49:05.0,,,,,,,,,,,"0|i1qk4f:",363224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with password having double &&,CAMEL-7057,12683840,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,crive,crive,10/Dec/13 14:27,14/Dec/13 09:29,14/Jul/23 05:49,14/Dec/13 09:29,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,,,,,,,0,,,,,,,"there is an issue with handling password with double && even when wrapping it into RAW() constraint 

For instance the use of URI 

http://hostname/script.php?authMethod=Basic&authPassword=RAW(pa&&word)&authUsername=usr

throws the exception: 

org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http://hostname/script.php?authMethod=Basic&authPassword=RAW(pa&&word)&authUsername=usr due to: Invalid uri syntax: Double && marker found. Check the uri and remove the duplicate & marker. ",,crive,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362912,,,Wed Dec 11 06:56:12 UTC 2013,,,,,,,,,,,"0|i1qk33:",363218,,,,,,,,,,,,,,,,,,,,"11/Dec/13 06:56;njiang;You can work around this issue by apply the password directly on the HttpComponent just like this
{code}
                HttpConfiguration config = new HttpConfiguration();
                config.setAuthMethod(AuthMethod.Basic);
                config.setAuthUsername(""myUser"");
                config.setAuthPassword(""myPassword"");
                // to avoid NTLM
                config.setAuthMethodPriority(""Basic,Digest"");

                HttpComponent http = context.getComponent(""http"", HttpComponent.class);
                http.setHttpConfiguration(config);
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException at FileInputStreamCache.<init>(FileInputStreamCache.java:52) in connection with DataFormat.marshal,CAMEL-7055,12683788,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,10/Dec/13 07:37,09/Dec/14 07:23,14/Jul/23 05:49,14/Dec/13 10:06,2.11.2,2.12.2,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"Stack Trace:
{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.converter.stream.FileInputStreamCache.<init>(FileInputStreamCache.java:52)
	at org.apache.camel.converter.stream.CachedOutputStream.newStreamCache(CachedOutputStream.java:199)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:79)
{code}

Error occurs, if streamCache is true and the stream is put into the file system because the spool threashold is reached. 

The following is happening:
The Marshall Processor handels over to the DataFromat.marshal method a CachedOutputStream instance. In the marschal method data are written into the output stream, when the spool threshold is reached the data are streamed into the file system. Finally the output stream is closed and the CachedOutputStream instance deletes the cached file during closing. The next processor tries to read the FileInputStreamCache and gets the NullPointerException.

Currently this problem can occur in the following DataFormat classes (because they close the stream, which is actually correct):

GzipDataFormat
CryptoDataFormat
PGPDataFormat
SerializationDataFormat
XMLSecurityDataFormat
ZipDataFormat

My proposal is not to delete the cached file during closing the output stream. The cached file shall only be closed on the onCompletion event of the route. See attached patch.


",,davsclaus,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8134,,,,,,,,,"10/Dec/13 11:58;forsthofer;0001-bug-CachedOutputStream-close.patch;https://issues.apache.org/jira/secure/attachment/12618030/0001-bug-CachedOutputStream-close.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362860,,,Fri Dec 20 07:07:20 UTC 2013,,,,,,,Patch Available,,,,"0|i1qjrj:",363166,,,,,,,,,,,,,,,,,,,,"14/Dec/13 10:06;davsclaus;Thanks for reporting and the patch.;;;","18/Dec/13 02:59;njiang;As camel-http and camel-http4 is use the CachedOutputStream to cache the response inputstream, the change could cause a side effect on that part, which means you cannot access the input stream after the exchange is done just like this.
{code}
String out = template.requestBody(""http://localhost:{{port}}/myserver"", body, String.class);
{code}
In this way we need to delete the temp file when the input stream is closed, I will commit a quick fix shortly.;;;","20/Dec/13 07:07;forsthofer;Hi Willem,
I am not sure if it is a good idea to generally delete the temp file when the input stream is closed. If you have streamCache=true on the route then the inputStream can be passed from one processor to the next and in between the input stream is reset so that it can be reused in the next processer. The resetting creates a new FileInputStream on the temp file. 

Regards Franz;;;",,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: Unable to encrypt using subkey,CAMEL-7052,12683690,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sdanig,sdanig,09/Dec/13 21:25,06/Jan/14 03:31,14/Jul/23 05:49,04/Jan/14 13:27,2.12.2,,,,,,,,2.12.3,2.13.0,,, camel-crypto,,,,,,0,,,,,,,"Generate a keyring with a DSA key for signing and an Elgamal key for encryption, using the password ""secret"":

{code}>gpg --gen-key
gpg (GnuPG) 2.0.17; Copyright (C) 2011 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 2
DSA keys may be between 1024 and 3072 bits long.
What keysize do you want? (2048) 2048
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Testing
Email address: testing@foo.com
Comment:
You selected this USER-ID:
    ""Testing <testing@foo.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: WARNING: some OpenPGP programs can't handle a DSA key with this digest size
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key C49B82A0 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   2048D/C49B82A0 2013-12-09
      Key fingerprint = AB15 5E15 768E E6FE 96AB  2423 6488 CEA7 C49B 82A0
uid                  Testing <testing@foo.com>
sub   2048g/361D9AA1 2013-12-09{code}

List the keys to make sure they look OK:

{code}>gpg --list-keys
pubring.gpg
---------------
pub   2048D/C49B82A0 2013-12-09
uid                  Testing <testing@foo.com>
sub   2048g/361D9AA1 2013-12-09{code}

Export to a file and then check the contents of the file:

{code}>gpg --export > pubring.pgp

>gpg pubring.pgp
pub  2048D/C49B82A0 2013-12-09 Testing <testing@foo.com>
sub  2048g/361D9AA1 2013-12-09{code}

We now have a keyring that contains a primary DSA key for signing, and an Elgamal subkey for encryption. The subkey does not have a user ID associated with it, because the user ID is associated with the corresponding primary / master key.

The latest code in {{PGPDataFormatUtil.findPublicKeys(InputStream, List<String>, boolean)}} cannot handle this scenario, because it expects the subkey to also have a user ID. Only the first key in a keychain (which is the primary / master key) will have a user ID. The subkeys don't have user IDs directly associated with them, and so they are not recognized as usable by Camel, when in fact they are usable.

See this discussion for more info on how primary keys and subkeys are represented in the BouncyCastle model, and how this relates to user IDs:

http://bouncy-castle.1462172.n4.nabble.com/How-to-find-PGP-subkeys-td1465289.html",,davsclaus,sdanig,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7106,,,,,,,,,,,"09/Dec/13 23:47;sdanig;camel-7052.patch;https://issues.apache.org/jira/secure/attachment/12617924/camel-7052.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362762,,,Sat Jan 04 13:27:43 UTC 2014,,,,,,,,,,,"0|i1qj47:",363056,,,,,,,,,,,,,,,,,,,,"09/Dec/13 23:43;sdanig;I think the PGPDataFormatElGamalTest is failing in master, but it's not visible in the build because the test is marked with the Ignore annotation (because JCE unlimited strength isn't on the build server). I'll provide a proposed patch soon.;;;","09/Dec/13 23:47;sdanig;All tests (including the ignored Elgamal test) pass for me with this patch.;;;","04/Jan/14 13:27;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,
Cannot set JMSReplyTo with a topic destination when sending a message to a queue,CAMEL-7049,12683576,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lichtin,lichtin,09/Dec/13 11:26,28/Jan/14 08:29,14/Jul/23 05:49,28/Jan/14 08:29,2.11.1,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-jms,,,,,,0,,,,,,,"The use case is about using Camel to communicate with the ActiveMQ StatisticsPlugin:

Need to send a message and set 'JMSReplyTo' with a destination for the response message(s). Doing this as part of a Camel processor:

   in.setHeader(""JMSReplyTo"", ""topic://mydest"");

This, however, results in the broker (ie. the statistics plugin) returning messages to the ""mydest"" queue, as opposed to the topic.

The issue is that Camel starts fiddling with the 'JMSReplyTo' header.
Enabling trace level shows how Camel coerces the topic into a queue:

JmsProducer | amel.component.jms.JmsProducer$2 315 | 126 - org.apache.camel.camel-jms - 2.11.1 | Normalized JMSReplyTo destination name topic://jmsqueuemonitor -> jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 315 | 126 - org.apache.camel.camel-jms - 2.11.1 | Normalized JMSReplyTo destination name topic://jmsqueuemonitor -> jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 331 | 126 - org.apache.camel.camel-jms - 2.11.1 | Creating JMSReplyTo queue: jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 331 | 126 - org.apache.camel.camel-jms - 2.11.1 | Creating JMSReplyTo queue: jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 343 | 126 - org.apache.camel.camel-jms - 2.11.1 | Using JMSReplyTo destination: queue://jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 343 | 126 - org.apache.camel.camel-jms - 2.11.1 | Using JMSReplyTo destination: queue://jmsqueuemonitor

Camel seems to apply some logic that is faulty in this circumstance.

Just want to send a message to a queue and have that message carry a 'JMSReplyTo' value that should be left untouched. ",,davsclaus,lichtin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,AMQ-4921,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362649,,,Tue Jan 28 08:29:25 UTC 2014,,,,,,,,,,,"0|i1qif3:",362943,,,,,,,,,,,,,,,,,,,,"04/Jan/14 13:19;davsclaus;Thanks for reporting.;;;","22/Jan/14 11:25;lichtin;Unfortunately it doesn't seem to be fixed, at least not in 2.11.3.
I still see how it the 'normalization' switches from topic to queue:

JmsProducer                      | amel.component.jms.JmsProducer$2  328 | 126 - org.apache.camel.camel-jms - 2.11.3 | Normalized JMSReplyTo destination name topic://xxx -> xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  344 | 126 - org.apache.camel.camel-jms - 2.11.3 | Creating JMSReplyTo queue: xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  356 | 126 - org.apache.camel.camel-jms - 2.11.3 | Using JMSReplyTo destination: queue://xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  364 | 126 - org.apache.camel.camel-jms - 2.11.3 | Created javax.jms.Message: ActiveMQMessage {commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = null, replyTo = queue://xxx, persistent = true, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {breadcrumbId=ID-mlipc-54383-1390388987563-0-1, firedTime=Wed Jan 22 12:09:49 CET 2014}, readOnlyProperties = false, readOnlyBody = false, droppable = false}

;;;","28/Jan/14 06:40;davsclaus;What message broker do you use?;;;","28/Jan/14 07:06;lichtin;ActiveMQ 5.7.0
(however, from what I can see, no message broker code is involved, it's happening in JmsProducer);;;","28/Jan/14 08:29;davsclaus;Applied a new fix.;;;",,,,,,,,,,,,,,,,,,,
BacklogTracer - dumpTracedMessages should check for route id as well,CAMEL-7045,12683083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/13 09:42,06/Dec/13 09:59,14/Jul/23 05:49,06/Dec/13 09:59,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,"The api is for matching node id or route id, so you can grab all the traced messages for a route.

Currently it only check for the node id. ",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362335,,,2013-12-06 09:42:21.0,,,,,,,,,,,"0|i1qghj:",362629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
We should ignore the rabbitmq.ROUTING_KEY when bridgeEndpoint option is true,CAMEL-7044,12683039,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Dec/13 02:11,07/Dec/13 14:33,14/Jul/23 05:49,07/Dec/13 14:33,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,"[An user complains about camel route keeping sending the message to the same queue|http://camel.465427.n5.nabble.com/camel-rabbitmq-routing-issue-tp5744371p5744374.html ] when using the camel-rabbitmq as a proxy.
{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring""> 
<route> 
<from 
uri=""rabbitmq://localhost/general.topic?queue=general.queue&amp;routingKey=general.queue&amp;exchangeType=topic&amp;username=guest&amp;password=guest&amp;autoDelete=false&amp;durable=true""
/> 
<to 
uri=""rabbitmq://localhost/scheduler.topic?queue=scheduler.queue&amp;routingKey=scheduler.queue&amp;exchangeType=topic&amp;username=guest&amp;password=guest&amp;autoDelete=false&amp;durable=true""
/> 
</route> 
</camelContext>
{code}

 ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,362291,,,Sat Dec 07 14:33:08 UTC 2013,,,,,,,,,,,"0|i1qg7r:",362585,,,,,,,,,,,,,,,,,,,,"07/Dec/13 14:33;njiang;Applied the patch into master and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Graceful shutdown of RabbitMQConsumer requires channel.close(),CAMEL-7042,12682908,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,FergusN,FergusN,05/Dec/13 13:56,20/Dec/13 18:08,14/Jul/23 05:49,20/Dec/13 18:08,,,,,,,,,2.12.3,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,"doStop on the RabbitMQConsumer does not close the channel correctly. This doesn't cause any problems on Jetty, but on Tomcat7 it prevented my app from shutting down gracefully. I suggest the doStop method on the consumer should match that of the producer

 protected void doStop() throws Exception {
        super.doStop();
        log.info(""Stopping RabbitMQ consumer"");
        if (channel != null) {
            log.debug(""Closing channel: {}"", channel);
            channel.close();
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (Exception ignored) {
                // ignored
            }
        }

        channel = null;
        conn = null;

        if (executor != null) {
            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {
                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);
            } else {
                executor.shutdownNow();
            }
        }
        executor = null;
    }",,davsclaus,FergusN,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,362165,,,Fri Dec 20 18:08:44 UTC 2013,,,,,,,,,,,"0|i1qffz:",362460,,,,,,,,,,,,,,,,,,,,"20/Dec/13 18:08;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,
tooling - Using the embedded and run goals of the Juice Maven Plugin ends up with a NPE,CAMEL-7037,12682658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,04/Dec/13 11:31,04/Dec/13 11:39,14/Jul/23 05:49,04/Dec/13 11:39,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,tooling,,,,,,0,,,,,,,Exactly the same as CAMEL-7028.,,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361915,,,2013-12-04 11:31:53.0,,,,,,,,,,,"0|i1qdwf:",362210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel XSD validation not working with apache xerces,CAMEL-7036,12682611,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Dec/13 04:43,07/Dec/13 14:48,14/Jul/23 05:49,07/Dec/13 14:48,2.11.2,2.12.2,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"Here is the [user complain|http://stackoverflow.com/questions/20347619/camel-xsd-validation-not-working-camel-2-12-1-jboss-5-1-0-ga-jdk-1-6] of it",,davidkarlsen@gmail.com,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361868,,,Sat Dec 07 14:48:13 UTC 2013,,,,,,,,,,,"0|i1qdlz:",362163,,,,,,,,,,,,,,,,,,,,"07/Dec/13 14:48;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-core-osgi doesn't properly handle different version of the same bundle,CAMEL-7035,12682427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,03/Dec/13 16:39,03/Dec/13 17:14,14/Jul/23 05:49,03/Dec/13 17:14,2.12.2,,,,,,,,2.12.3,2.13.0,,,osgi,,,,,,0,,,,,,,"CamelContext service is registered once per bundle symbolic name.

If multiple bundles share symbolic names (and use different versions) the CamelContext will only registered for the first bundle.",,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361684,,,2013-12-03 16:39:59.0,,,,,,,,,,,"0|i1qci7:",361982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-quartz2 - When clustering, triggers may be left in a paused and unrecoverable state",CAMEL-7033,12682348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,klodrik,klodrik,03/Dec/13 10:06,03/Apr/14 12:06,14/Jul/23 05:49,03/Apr/14 12:06,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-quartz2,,,,,,0,,,,,,,"The reason seems to be that onConsumerStop() is called when camel is shut down. This method does not take clustering into account and pauses the trigger in the quartz database, leaving it in a state that is unrecoverable from camel. I was able to prevent this by removing pauseTrigger() from onConsumerStop(), but I'm not sure what the correct procedure should be. It seems to me like onConsumerStop() and doStop() has some overlap.","camel-quartz2, 2.13-SNAPSHOT clustered on Oracle database",klodrik,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Dec/13 08:03;klodrik;0001-Handling-clustered-scheduler-in-pauseTrigger.patch;https://issues.apache.org/jira/secure/attachment/12616951/0001-Handling-clustered-scheduler-in-pauseTrigger.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361605,,,Thu Apr 03 12:03:40 UTC 2014,,,,,,,,,,,"0|i1qc0v:",361903,,,,,,,,,,,,,,,,,,,,"04/Dec/13 08:03;klodrik;Patch that handles clustering in pauseTrigger().;;;","03/Apr/14 12:03;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Arne.
I also remove the jobAdded.set(false); which makes other unit test failed.
;;;",,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Producer not able to use the default exchange,CAMEL-7031,12682232,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jrfoster67,jrfoster67,02/Dec/13 21:53,10/Jun/15 17:37,14/Jul/23 05:49,03/Dec/13 03:07,2.12.2,,,,,,,,2.12.3,,,,camel-rabbitmq,,,,,,0,,,,,,,"In RabbitMQ, the default exchange is a direct exchange with no name (empty string) and is pre-declared by the broker. It has one special property that makes it very useful for simple applications: every queue that is created is automatically bound to it with a routing key which is the same as the queue name.  This is especially useful in RPC style messaging when the producer specifies a REPLY_TO queue name that was created ""exclusive""  Since RabbitMQ binds that queue onto the default exchange, it makes RPC much simpler.

However, the camel rabbitmq producer throws an IllegalArgumentException if the exchange name is empty, which prevents this simple RPC exchange.  The fix for this is simple, just don't throw that IllegalArgumentException if the exchange name was set to empty string.

The same problem may exists with the Consumer as well.

This python script will send an rpc request (from RabbitMQ in Action)
{code}
import time, json, pika

creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()

msg = json.dumps({""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()})
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue
msg_props.content_type = ""application/json""
msg_props.correlation_id = ""1""
msg_props.delivery_mode = 2

channel.basic_publish(body=msg,
                      exchange=""rpc"",
                      properties=msg_props,
                      routing_key=""ping"")

print ""Sent 'Ping' RPC call.  Waiting for reply...""

def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply --- "" + body
     channel.stop_consuming()

channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)

channel.start_consuming()
{code}

This route would be what I would want to do when consuming from Rabbit the rpc call and sending back a response:
{code}
        from(""rabbitmq://192.168.213.130/rpc?queue=ping&routingKey=ping&durable=True&autoDelete=False&autoAck=False&username=guest&password=guest"")
            .log(""Incoming Headers: ${headers}"")
            .setHeader(""rabbitmq.ROUTING_KEY"", header(""rabbitmq.REPLY_TO""))
            .removeHeader(""rabbitmq.REPLY_TO"")
            .removeHeader(""rabbitmq.EXCHANGE_NAME"")
            .setBody(simple(""Pong!""))
            .to(""rabbitmq://192.168.213.130/?username=guest&password=guest"");

{code}
If I remove the illegalargumentexception, the code works as expected.",,ceefour,jrfoster67,njiang,splazit,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7003,,,,CAMEL-8270,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361489,,,Wed Jun 10 17:37:28 UTC 2015,,,,,,,,,,,"0|i1qbav:",361787,,,,,,,,,,,,,,,,,,,,"03/Dec/13 03:07;njiang;Apply the patch into master and camel-2.12.x branch;;;","10/Jun/15 17:37;splazit;I'm camel-rabbitmq component as as rabbitmq consumer. The consumer is consuming message from a default exchange """" with a routing key. When I started up the app, I got the exception ""Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint"". 
The camel version I'm using is 2.15.2.

Regards,;;;",,,,,,,,,,,,,,,,,,,,,,
quartz2 - Simple trigger should repeat forever by default,CAMEL-7029,12682213,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Dec/13 20:07,02/Dec/13 20:42,14/Jul/23 05:49,02/Dec/13 20:42,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,"If you use the simple trigger then it only triggers once out of the box. You must set repeatCount=-1 to keep firing. Or set it to the exact number of times you want.

The default value of 0 makes it only fire once.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361470,,,2013-12-02 20:07:07.0,,,,,,,,,,,"0|i1qb6v:",361769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tooling - Using the embedded goal of the Camel Maven Plugin ends up with a NPE,CAMEL-7028,12682113,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,02/Dec/13 11:27,04/Dec/13 13:43,14/Jul/23 05:49,02/Dec/13 11:40,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,tooling,,,,,,0,,,,,,,"{code}
~/dev/workspace/camel/examples/camel-example-spring>mvn -e camel:embedded
[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring 2.13-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-spring/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.420s
[INFO] Finished at: Mon Dec 02 12:19:20 CET 2013
[INFO] Final Memory: 23M/982M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:117)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:226)
	at org.apache.camel.maven.EmbeddedMojo.executeWithoutWrapping(EmbeddedMojo.java:127)
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:115)
	... 21 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.main.MainSupport$5.doProcess(MainSupport.java:122)
	at org.apache.camel.main.MainSupport$ParameterOption.doProcess(MainSupport.java:532)
	at org.apache.camel.main.MainSupport$Option.processOption(MainSupport.java:492)
	at org.apache.camel.main.MainSupport.parseArguments(MainSupport.java:227)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:351)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:223)
	... 23 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
2013-12-02 12:19:20,786 [Thread-1       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2013-12-02 12:19:20,788 [Thread-1       ] INFO  MainSupport                    - Apache Camel 2.13-SNAPSHOT stopping
~/dev/workspace/camel/examples/camel-example-spring>
{code}
",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361370,,,Mon Dec 02 11:40:01 UTC 2013,,,,,,,,,,,"0|i1qakn:",361669,,,,,,,,,,,,,,,,,,,,"02/Dec/13 11:40;bvahdat;The current workaround for the users is to make use of the {{run}} goal, that's:

{code}
mvn camel:run
{code}
;;;",,,,,,,,,,,,,,,,,,,,,,,
StaxConverter throws NPE,CAMEL-7025,12681868,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sbo13,sbo13,29/Nov/13 11:16,09/Dec/13 13:35,14/Jul/23 05:49,02/Dec/13 08:09,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,1,,,,,,,"This issue only happens when running in weblogic:

After updating to Camel 2.12.2 the method createXMLStreamReader(InputStream in, Exchange exchange) in staxConverter throws an NPE because of the missing charsetName.
Comparing the class with the previous version I saw camel no longer falls back to the default charset.

As a workaround I set the property Exchange.CHARSET_NAME on  explicitly -> still the same error.

Debugging the code I noticed that in org.apache.camel.impl.converter.BaseTypeConverterRegistry#convertTo line 98 the exchange is not passed to the converter so I  can neither use an explicit nor an implicit charset.

Any workaround/fix would be greatly appreciated!

StackTrace:
java.lang.NullPointerException: charsetName
        at java.io.InputStreamReader.<init>(InputStreamReader.java:82)
        at weblogic.xml.stax.XMLStreamInputFactory.createXMLStreamReader(XMLStreamInputFactory.java:66)
        at org.apache.camel.converter.jaxp.StaxConverter.createXMLStreamReader(StaxConverter.java:170)
        at sun.reflect.GeneratedMethodAccessor85614.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:990)
        at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:275)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:113)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)
        at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:173)
",Weblogic 10,davidkarlsen@gmail.com,de_tom,njiang,sbo13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,361132,,,Mon Dec 02 08:09:11 UTC 2013,,,,,,,,,,,"0|i1q93r:",361431,,,,,,,,,,,,,,,,,,,,"02/Dec/13 08:09;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Allow clearing of field 'Name' for upserts in Salesforce component,CAMEL-7021,12681626,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dhirajsb,dhirajsb,27/Nov/13 18:16,28/Nov/13 08:37,14/Jul/23 05:49,28/Nov/13 08:37,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-salesforce,,,,,,0,,,,,,,"The Salesforce component clears the field 'Name' when upserting SObjects assuming its a common external ID. But Salesforce allows creating SObjects with custom external IDs, and the user may need to insert/update the 'Name' field. The method clearBaseFields in AbstractSObjectBase should not clear this field to support this use case. 
This was originally submitted as a github pull request https://github.com/apache/camel/pull/57 by mdarcemont. ",,davsclaus,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Nov/13 19:25;dhirajsb;salesforce-CAMEL-7021.patch;https://issues.apache.org/jira/secure/attachment/12616101/salesforce-CAMEL-7021.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360890,,,Thu Nov 28 08:37:40 UTC 2013,,,,,,,,,,,"0|i1q7m7:",361189,,,,,,,,,,,,,,,,,,,,"27/Nov/13 19:25;dhirajsb;Attaching patch to disable clearing 'Name' field for update/upsert;;;","28/Nov/13 08:37;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,
Using custom beans with @ManagedResource shows unavailable standard attributes,CAMEL-7018,12681541,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Nov/13 11:47,10/Dec/14 16:21,14/Jul/23 05:49,27/Nov/13 14:14,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,"If you have a custom bean with @ManagedResource and your own attr/ops then Camel adds its default attrs/ops which it should not as they are not available.

See screenshot",,davsclaus,Matteo Mortari,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Nov/13 11:48;davsclaus;jmx-custom-bean.png;https://issues.apache.org/jira/secure/attachment/12616029/jmx-custom-bean.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360805,,,Wed Dec 10 16:21:56 UTC 2014,,,,,,,,,,,"0|i1q73j:",361104,,,,,,,,,,,,,,,,,,,,"10/Dec/14 16:21;Matteo Mortari;Hi, this solves for the use case in description 'custom bean'.
However if I define a +custom Processor+, possibly I annotate with @ManagedResource to expose my own attr/ops, but shouldn't this case _indeed_ expose also the Camel's default attrs/ops for a ManagedProcessor?

The problem I believe is this line, modified in the changelog of this bug:
https://github.com/apache/camel/blob/camel-2.13.x/camel-core/src/main/java/org/apache/camel/management/DefaultManagementMBeanAssembler.java#L63
would actually make expose for a custom Processor _only_ my own annotated attr/ops. But being my custom Processor a ManagedProcessor at runtime, I would have expected it to expose on JMX both the custom and Camel's default attr/ops.

It seems to me same problem described here:
http://camel.465427.n5.nabble.com/exposing-custom-jmx-properties-td5713375.html
And same I experienced today.

I would like to know if this is intended, and how to mitigate for a custom processor, please?
I think this could be a sort of unexpected behavior to some users, and from the faq http://camel.apache.org/why-is-my-processor-not-showing-up-in-jconsole.html to me at least is not clear how to mitigate for a custom processor.
Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,
JMX - Update route from xml on route mbean should update current route only,CAMEL-7016,12681515,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Nov/13 08:45,27/Nov/13 08:50,14/Jul/23 05:49,27/Nov/13 08:50,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,"If you do not have id of the route in the XML then Camel thinks its a new route to be added. We should ensure we handle that, and only update current route as that is the intend of this operation.

If you want to add new routes use mbean operation on camelcontext instead.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360780,,,2013-11-27 08:45:29.0,,,,,,,,,,,"0|i1q6xz:",361079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade CXF version to 2.7.7,CAMEL-7011,12681213,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,26/Nov/13 05:54,26/Nov/13 07:35,14/Jul/23 05:49,26/Nov/13 07:35,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,"CXF 2.7.8 is released, we should consider to upgrade the version.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360478,,,Tue Nov 26 07:35:19 UTC 2013,,,,,,,,,,,"0|i1q533:",360777,,,,,,,,,,,,,,,,,,,,"26/Nov/13 07:35;njiang;Applied the patch into master and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Consumer does not pick up REPLY_TO,CAMEL-7009,12681194,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jrfoster67,jrfoster67,26/Nov/13 03:35,03/Dec/13 00:38,14/Jul/23 05:49,03/Dec/13 00:38,2.12.1,,,,,,,,2.12.2,,,,camel-rabbitmq,,,,,,0,,,,,,,"When using RPC in RabbitMQ, the producer sets up an exclusive queue and specifies that queue as the reply_to on outgoing messages.  When the consumer in camel-rabbitmq receives the messages, the reply_to isn't available on the exchange, so no RPC calls can be completed.

The following Python script (from RabbitMQ In Action) produces the message with a reply_to property:

import time, json, pika

creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()

msg = json.dumps({""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()})
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue

channel.basic_publish(body=msg,
                      exchange=""talentsprout.rpc"",
                      properties=msg_props,
                      routing_key=""ping"")

print ""Sent 'Ping' RPC call.  Waiting for reply...""

def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply --- "" + body
     channel.stop_consuming()

channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)

channel.start_consuming()



The following route in Camel would consume messages from this queue:

		from(""rabbitmq://192.168.213.130/talentsprout.rpc?queue=ping&routingKey=ping&durable=False&autoDelete=False&autoAck=False&username=guest&password=guest"")
		.log(""Headers: ${headers}"");

The log statement from that route shows that no reply_to header is added.

Without this feature, RPC from external producers cannot work.",,jrfoster67,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360459,,,Tue Dec 03 00:38:09 UTC 2013,,,,,,,,,,,"0|i1q4yv:",360758,,,,,,,,,,,,,,,,,,,,"26/Nov/13 07:32;njiang;I just checked the code of RabbitMQConsumer, it just put the REPLY_TO into the message header.
Can you double check if the message properties is set rightly?
{code}
        if (properties.getReplyTo() != null) {
                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo());
            }
{code};;;","26/Nov/13 08:22;njiang;I just ran a simple tests and verified the REPLY_TO message header is set rightly.
{code}
rabbitmq.REPLY_TO=myReply
{code}
;;;","26/Nov/13 16:54;jrfoster67;I downloaded the source from here http://www.interior-dsgn.com/apache/camel/apache-camel/2.12.1/apache-camel-2.12.1-src.zip and looked in apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQConsumer.java and don't see the code you posted in the comment.  I also did a full search through the entire camel 2.12.1 source tree for that constant (using ultra-edit), and only found the following two references:

----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java(90):         final Object replyTo = exchange.getIn().getHeader(RabbitMQConstants.REPLY_TO);
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java(101):         message.setHeader(RabbitMQConstants.REPLY_TO, ""bbbbdfgdfg"");
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
Search complete, found 'RabbitMQConstants.REPLY_TO' 2 time(s). (2 file(s)).

Not sure if the trunk has been updated and not released, or if we're not talking about the same code.

However, if I run the above route in camel, and run the above python script, these are the headers I see:

[) thread #2 - RabbitMQConsumer] route1                         INFO  Headers: {rabbitmq.EXCHANGE_NAME=talentsprout.rpc, breadcrumbId=ID-DENORALT852-61351-1385483624264-0-1, rabbitmq.ROUTING_KEY=ping, rabbitmq.DELIVERY_TAG=1}

;;;","02/Dec/13 21:00;jrfoster67;I looked at  and re-tested with 2.12.2 I can now see that the REPLY_TO header (and others) do get correctly set on the consumer, so must have been code in the trunk you were looking at.;;;","03/Dec/13 00:38;njiang;It is already fixed in camel-2.12.2.;;;",,,,,,,,,,,,,,,,,,,
camel-stream - stream in requires 2 x enter to react in console demo,CAMEL-7005,12680926,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/13 11:21,24/Nov/13 11:34,14/Jul/23 05:49,24/Nov/13 11:34,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-stream,examples,,,,,0,,,,,,,"There is a little regression in 2.12.2 about the camel-stream component, requiring x2 ENTER to read

{code}
Enter something: hello

HELLO
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,360191,,,2013-11-24 11:21:54.0,,,,,,,,,,,"0|i1q3br:",360490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Missing ""throw"" statements in CdiCamelContext",CAMEL-6996,12680564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,natasha,natasha,21/Nov/13 18:06,21/Nov/13 19:57,14/Jul/23 05:49,21/Nov/13 19:57,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cdi,,,,,,0,,,,,,,"Hi everybody,

please have a look into file ""CdiCamelContext.java"":
In the methods ""start"" and ""stop"" ""throw"" statements are missing (see below).
This error suppresses proper error handling and error information in case that the cdi camel context cannot be started (for example due to invalid endpoint uris).

Thanks a lot in advance for the quick fix.

Bye
Natasha

    @PostConstruct
    @Override
    public void start() {
        try {
            super.start();
        } catch (Exception e) {
            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement
        }
    }

    @PreDestroy
    @Override
    public void stop() {
        try {
            super.stop();
        } catch (Exception e) {
            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement
        }
    }",,davsclaus,natasha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,359829,,,Thu Nov 21 19:57:08 UTC 2013,,,,,,,Patch Available,,,,"0|i1q13r:",360128,,,,,,,,,,,,,,,,,,,,"21/Nov/13 19:57;davsclaus;Thanks for reporting and with the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel load balancers should be restartable,CAMEL-6994,12680544,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,metatech,metatech,21/Nov/13 15:44,21/Nov/13 20:31,14/Jul/23 05:49,21/Nov/13 20:31,2.8.5,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"When a route containing a load balancer is restarted, after the restart, the route does not contain any processors within the load balancer.
This is because the processors are removed in ""doStop"", rather than in ""doShutdown"" in LoadBalancerSupport.
Here is a patch that fixes the problem.",ServiceMix 4.4.2,davsclaus,metatech,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Nov/13 15:54;metatech;camel_load_balancer_restartable.patch;https://issues.apache.org/jira/secure/attachment/12615140/camel_load_balancer_restartable.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359809,,,Thu Nov 21 20:31:19 UTC 2013,,,,,,,Patch Available,,,,"0|i1q0zb:",360108,,,,,,,,,,,,,,,,,,,,"21/Nov/13 20:31;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Problem with stream caching and DefaultHttpBinding.writeResponse,CAMEL-6991,12680486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ulrich.kramer,ulrich.kramer,21/Nov/13 11:21,22/Nov/13 08:27,14/Jul/23 05:49,22/Nov/13 08:27,2.11.2,,,,,,,,2.12.0,,,,camel-http,,,,,,0,,,,,,,"DefaultHttpBinding.writeResponse was modified between 2.11.0 and 2.11.2. This yields to a problem with stream caching. 

When exchange.out is not set target (DefaultHttpBinding.java:215)  is assigned to exchange.in . exchange.in may contain a body which is already removed by an onCompletion callback. In DefaultHttpBindung.java:377 this body is read. This may yield to an exception",Debian 7,davsclaus,ulrich.kramer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359751,,,Fri Nov 22 08:27:40 UTC 2013,,,,,,,,,,,"0|i1q0mf:",360050,,,,,,,,,,,,,,,,,,,,"21/Nov/13 20:03;davsclaus;Are you talking about using onCompletion
http://camel.apache.org/oncompletion.html

eg onCompletion in a route, or what?;;;","21/Nov/13 20:05;davsclaus;And can you provide an sample route or what else to demonstrate this?;;;","21/Nov/13 20:06;davsclaus;And try with latest release Camel 2.12.1;;;","22/Nov/13 06:21;ulrich.kramer;With the following example you can reproduce the problem when you set two breakpoints:

# CachedOutputStream line: 209  cleanUpTempFile()	
# FileInputStreamCache line: 110  createInputStream(File)	

cleanupTempFile is called first. createInputStream creates an IOException because the file is already removed.

{code}
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:input"").to(""jetty:http://localhost:55555/input"");
                from(""jetty:http://localhost:55555/input"").process(new Processor() {

                    @Override
                    public void process(final Exchange exchange) throws Exception {
                        Assert.assertFalse(exchange.hasOut());
                    }
                });
            }
        });
        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < 10000; i++) {
            sb.append(""0123456789"");
        }
        template.sendBody(""direct:input"", sb.toString());
        while (true) {
            Thread.sleep(1000);
        }
{code};;;","22/Nov/13 08:27;davsclaus;Ah use Camel 2.12 onwards as Jetty ends the UoW after it has written the response. So the cleanup of the file happens afterwards now.
For earlier releases use .convertBodyTo(byte[].class) to ensure the content is in-memory, at the end of the jetty route.;;;",,,,,,,,,,,,,,,,,,,
2.12.1 caches groovy call - resulting with previous caller state,CAMEL-6988,12680319,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,7erry,7erry,20/Nov/13 16:34,04/Feb/14 21:36,14/Jul/23 05:49,31/Jan/14 16:18,2.12.1,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-groovy,,,,,,0,,,,,,,"2.12.1
Works
{code}
        <simple>""${body.subOrderName}Endpoint""</simple>
{code}
Fails 
{code}
         <groovy>""${request.body.subOrderName}Endpoint""</groovy>
{code}

2.11.1
Works
{code}
        <simple>""${body.subOrderName}Endpoint""</simple>
{code}
Works
{code}
        <groovy>""${request.body.subOrderName}Endpoint""</groovy>
{code}

*Fails by returning a previous calls result for subOrderName. 
To reproduce you must make several calls in a timely manner with different bean data (OGNL/subOrderName).

Route:
{code}
...
<setHeader headerName=""RSSX_ORDER_ROUTING_SLIP"">
<groovy>return ""${request.body.subOrderName}Endpoint""</groovy>
</setHeader>
<!-- Route the order by the routing slip header -->
<routingSlip>
<header>RSSX_ORDER_ROUTING_SLIP</header>
</routingSlip>
...
{code}

Log:
1st execution
Before set header:    UpdatePortIn

After set header:   RSSX_ORDER_ROUTING_SLIP=UpdatePortInEndpoint

2nd execution (in a timely manner – exposing a LRU Cache issue?)
Before set header: ResellerAddSubscriberPortIn
After set header:    RSSX_ORDER_ROUTING_SLIP=UpdatePortInEndpoint

Same logic works in 2.11.1

Additionally this does not appear OGNL related:
I just ran into the case where       
{code}
<setHeader headerName=""RSSX_ORDER_ROUTING_SLIP"">
        <groovy>""${request.body.getSubOrderName()}Endpoint""</groovy>
      </setHeader>
{code}

returns the cached subOrderName from the previous transaction

So this appears to be isolated to the <groovy> component changes (LRU Cache?) that were introduced in 2.12.1","same results using java 7 on osx, ubuntu, and windoze",7erry,davsclaus,Luckless,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6340,CAMEL-7143,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359584,,,Tue Feb 04 21:36:59 UTC 2014,,,,,,,,,,,"0|i1pzlr:",359883,,,,,,,,,,,,,,,,,,,,"21/Nov/13 19:35;davsclaus;CAMEL-6340 was also introduced in Camel 2.11.1. Are you sure its that version? Can you double check.
;;;","21/Nov/13 19:46;davsclaus;How many different values do you return in the {{getSubOrderName}} method? Is there only these 2 values or do you have many more?;;;","21/Nov/13 19:59;davsclaus;Just pushed some unit tests to master. Cannot reproduce this.

Can you double check again what version doesnt work for you.
And if possible put together an unit test or small sample project that demonstrates/reproduces this issue?;;;","21/Nov/13 20:00;davsclaus;Also what is the code logic in the method {{subOrderName}}?;;;","21/Nov/13 20:52;7erry;This is directly related to 2.12.1 since it works correctly in 2.11.1.
Also if we change from <groovy> to <simple> it works.
The exchange accepts an xml payload and then gets converted to a bean:
      <bean ref=""orderConverter"" method=""newExchangeOrder""/>
The bean uses Stax to marshal from XML into an ExchangeOrder bean.
The ExchangeOrder bean contains a getSubOrderName:
	String getSubOrderName(){ 	
		String s = order?.subOrder[0]?.class.simpleName
		
		(s.startsWith(""Lessee""))? s.replace('Lessee', 'Reseller') : s	
	}
;;;","22/Nov/13 10:28;davsclaus;Groovy itself has likely been upgraded between Camel 2.11 and 2.12. Can you try downgrading and use same Groovy version, and test on your end.
And can you make a simpler unit test / sample project that reproduces this problem?

We cannot reproduce this issue you see on your end.

And frankly the setHeader logic you use is so simple you can just use the simple language.;;;","22/Nov/13 14:39;7erry;These dependencies work:
    <camel-version>2.11.1</camel-version>
    <groovy-version>2.1.6</groovy-version>
These do not:
    <camel-version>2.12.1</camel-version>
    <groovy-version>2.1.6</groovy-version>

I have recommended the use of <simple> however it is a large project and there is some concern about how many conditional statements can be scoped ( (a&b)||(c&d) ) using simple.
I am still working on a localized test to reproduce this issue. It is is a timing issue; if you wait a few seconds before sending the second request it will have the correct value which is why I *assumed* it was related to caching groovy.
;;;","22/Nov/13 15:10;7erry;This is isolated to the camel-groovy component given the following *working* configuration:
    <camel-version>2.12.1</camel-version>
    <groovy-version>2.1.6</groovy-version>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-script</artifactId>
      <version>2.11.1</version>
    </dependency>
;;;","31/Jan/14 16:18;davsclaus;CAMEL-7143 fixes this.;;;","04/Feb/14 21:36;7erry;Thank you! I'll have (big phone company) move back to groovy from simple once 2.12.3 is GA.;;;",,,,,,,,,,,,,,
JMX - browseMessageAsXml for files does not work if includeBody is enabled,CAMEL-6987,12680303,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Nov/13 15:04,20/Nov/13 15:43,14/Jul/23 05:49,20/Nov/13 15:43,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,jmx,,,,,0,,,,,,,"If you use the JXM API to browse file endpoints and want to load the file content with includeBody = true, then the file is not loaded.

There is a little bug in MessgeHelper",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359568,,,2013-11-20 15:04:42.0,,,,,,,,,,,"0|i1pzi7:",359867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-paxlogging ignores some properties from the local thread,CAMEL-6983,12679981,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,19/Nov/13 16:16,19/Nov/13 18:32,14/Jul/23 05:49,19/Nov/13 18:32,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,,,,,,,0,,,,,,,The camel-paxlogging component (the consumer endpoint) ignores the properties (especially the MDC ones) from the local thread.,,jbonofre,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359338,,,Tue Nov 19 18:32:07 UTC 2013,,,,,,,,,,,"0|i1py33:",359637,,,,,,,,,,,,,,,,,,,,"19/Nov/13 17:22;jbonofre;Fixed on master: 33f1fca0ce3895f6f21226c1e52fdb78a533acd7;;;","19/Nov/13 18:01;jbonofre;Fixed on camel-2.12.x: d89e76f816acef449610291629759ae86fb7a602;;;","19/Nov/13 18:21;jbonofre;Fixed on camel-2.11.x: 3c6b6c57880aa8e7142af684b71faeea83318935;;;","19/Nov/13 18:32;jbonofre;Fixed on camel-2.10.x: d6ccae1622eb47981520fb586b900bc7f302aff6;;;",,,,,,,,,,,,,,,,,,,,
Missing fields in RestResources DTO in Salesforce component,CAMEL-6974,12679791,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,18/Nov/13 18:46,19/Nov/13 03:26,14/Jul/23 05:49,19/Nov/13 03:26,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-salesforce,,,,,,0,,,,,,,"In Salesforce API version 27.0 new url fields licensing and analytics were added to RestResources. Although the getResources API may not be used that often, for compatibility reasons and to avoid an UnrecognizedFieldException, the fields must be added to the RestResources DTO. ",,dhirajsb,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Nov/13 18:47;dhirajsb;salesforce-missing-fields.patch;https://issues.apache.org/jira/secure/attachment/12614445/salesforce-missing-fields.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,359149,,,Tue Nov 19 03:26:30 UTC 2013,,,,,,,,,,,"0|i1pwxb:",359448,,,,,,,,,,,,,,,,,,,,"18/Nov/13 18:47;dhirajsb;A patch is attached to fix this issue. ;;;","19/Nov/13 03:26;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Dhiraj.;;;",,,,,,,,,,,,,,,,,,,,,,
Problem with trunking idempotent filestore when parent directory not exists,CAMEL-6967,12679375,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,agdula,agdula,15/Nov/13 11:18,18/Nov/13 10:49,14/Jul/23 05:49,18/Nov/13 10:49,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"I've tried to test some route with JUnit test declared like below
{code}
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = CoreRouterConfiguration.class, loader = CamelSpringDelegatingTestContextLoader.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class RouteTestBase {
    @Produce
    protected ProducerTemplate producerTemplate;

    @Autowired
    protected ModelCamelContext context;

}
{code}

Camel context starts and then it's beeing shutdown. It there's a FileIdempotentRepository with nonexisting path then camel contexf fails to shutdown with exception
{code}
Caused by: java.io.FileNotFoundException: .\TempData\meta\mrdf-idempotent.dat (The system cannot find the path specified)
	at java.io.FileOutputStream.open(Native Method) ~[na:1.7.0_40]
	at java.io.FileOutputStream.<init>(FileOutputStream.java:221) ~[na:1.7.0_40]
	at java.io.FileOutputStream.<init>(FileOutputStream.java:171) ~[na:1.7.0_40]
	at org.apache.camel.processor.idempotent.FileIdempotentRepository.trunkStore(FileIdempotentRepository.java:256) ~[camel-core-2.12.1.jar:2.12.1]
	... 50 common frames omitted
{code}

I guess it could be fixed like in a workaround below
{code}
public class FileIdempotentRepositoryEx extends FileIdempotentRepository {
   @Override
    protected void trunkStore() {
        if(getFileStore().exists()){
            super.trunkStore();
        }
    }
}
{code}",windows 7,agdula,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,358736,,,Mon Nov 18 10:49:13 UTC 2013,,,,,,,,,,,"0|i1puaf:",359026,,,,,,,,,,,,,,,,,,,,"18/Nov/13 10:49;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel FileComponent: Done file will not be removed if moveFailed option is configured and an error occurs,CAMEL-6964,12679167,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,14/Nov/13 07:21,14/Nov/13 11:51,14/Jul/23 05:49,14/Nov/13 11:51,2.11.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"Only the ""real"" file is moved to the directory specified with the moveFailed-option. The done file still exists in the source folder and will not be deleted.",,cgiera,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Nov/13 08:12;cgiera;camel.patch;https://issues.apache.org/jira/secure/attachment/12613798/camel.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,358532,,,Thu Nov 14 11:51:04 UTC 2013,,,,,,,Patch Available,,,,"0|i1pt13:",358822,,,,,,,,,,,,,,,,,,,,"14/Nov/13 08:12;cgiera;First time git, hopefully correct.
Patch is for ""master"" version;;;","14/Nov/13 11:51;davsclaus;Thanks for reporting and the patch.

Notice that the done file should only be deleted on rollback if moveFailed is in use.;;;",,,,,,,,,,,,,,,,,,,,,,
Specify the import package version range for camel-lucene ,CAMEL-6963,12679166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,14/Nov/13 06:53,14/Nov/13 07:47,14/Jul/23 05:49,14/Nov/13 07:47,,,,,,,,,2.13.0,,,,osgi,,,,,,0,,,,,,,"As the lucene are not OSGi bundle, the maven bundle plugin  cannot specify the version range for it, and it cause some trouble if there are more than one version of lucene installed in OSGi platform.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,358531,,,Thu Nov 14 07:47:13 UTC 2013,,,,,,,,,,,"0|i1pt0v:",358821,,,,,,,,,,,,,,,,,,,,"14/Nov/13 06:56;njiang;We have the same issue in camel-solr.;;;","14/Nov/13 07:47;njiang;Applied the patch into master branches.;;;",,,,,,,,,,,,,,,,,,,,,,
Documentation for file2 contains a Bug,CAMEL-6956,12678781,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,agdula,agdula,12/Nov/13 12:02,13/Nov/13 02:50,14/Jul/23 05:49,13/Nov/13 02:50,2.12.1,,,,,,,,,,,,documentation,,,,,,0,,,,,,,"Documentation of *Filter* using org.apache.camel.component.file.GenericFileFilter refers to 

<!-- define our *sorter* as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.*MyFileSorter*""/>

which should probably be changed to 

<!-- define our *filter* as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.*MyFileFilter*""/>",,agdula,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,358148,,,Wed Nov 13 02:50:53 UTC 2013,,,,,,,,,,,"0|i1pqnr:",358438,,,,,,,,,,,,,,,,,,,,"13/Nov/13 02:50;njiang;I just updated the file2 wiki page with thanks to Andrzej.;;;",,,,,,,,,,,,,,,,,,,,,,,
ProducerCache should not only stop non-singelton Producers but also shutdown them afterwards as well if the given Producer is a ShutdownableService,CAMEL-6948,12678312,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,08/Nov/13 20:33,09/Nov/13 15:18,14/Jul/23 05:49,09/Nov/13 15:18,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"Currently because of this bug the {{doShutdown}} hook of the following non-singleton Producers doesn't kick in at all:

- {{JpaProducer}}
- {{Mina2Producer}}

Which could cause resources leaking.",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,357687,,,Sat Nov 09 14:53:44 UTC 2013,,,,,,,,,,,"0|i1pntr:",357977,,,,,,,,,,,,,,,,,,,,"09/Nov/13 14:53;bvahdat;Ah there're bunch of other places of {{ProducerCache}} where this should be fixed as well so why reopening the ticket.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http producer should close the connection when the request connection header is close,CAMEL-6945,12678158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Nov/13 05:33,11/Nov/13 03:18,14/Jul/23 05:49,08/Nov/13 08:56,2.12.0,2.12.1,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,"camel-netty-http producer should close the connection when the request connection header is close otherwise it will get ClosedChannelException when the producer try to reuse the connection.
",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,357533,,,Mon Nov 11 03:18:36 UTC 2013,,,,,,,,,,,"0|i1pmvj:",357823,,,,,,,,,,,,,,,,,,,,"08/Nov/13 08:56;njiang;Applied the patch into master and camel-2.12.x branches.;;;","08/Nov/13 12:38;davsclaus;I think we have a catch-22 situation here.

Yeah this ticket about the netty http producer should close the connection if ""Connection: close"" is in the HTTP header, then that is correct. The missing piece was that the check was already there, but the binding code didn't set the Exhcange.CLOSE header. Though this code sets it as a property on the exchange. Should really be header instead to be consistent.

Okay the catch-22 is when you bridge using netty-http, eg

{code}
1..n clients
-->
from netty-http 
   to netty-http 
-->
  backend server
{code}

Then you have N+ clients on the outside that may have ""Connection: close"" in their http headers. So on the Camel server we have the catch-22 situation, because

1. We want the netty http consumer to close the connection when the request is done (current code does that)
2. We most likely do not want to close connections between Camel and the backend server (to keep these connections alive and fast as possible)

So we should have a better way of doing #2 to tell Camel it should disregard the ""Connection: close"" header but keep it alive between Camel and backend server. eg some way of configuring this better.

Today we have the disconnect option people could use to force this
{code}
from netty-http 
   to netty-http?disconnect=false 
{code}

But I am not sure if setting that disconnect option would have the http header override it, so if there is a http header with ""Connection: close"" it may take precedence and still close the connection on the netty http producer side.
;;;","11/Nov/13 03:18;njiang;If we want to proxy the request and keep using the connection, we need to change the header ""Connection: close"" to be ""Connection: keepalive"", the proxy can be like this
{code}
from(""netty-http:xxx"").setHeader(""connection"", ""keep-alive"").to(""netty-http:yyy"")
{code};;;",,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException while shutting down camel,CAMEL-6941,12677746,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kaaveland,kaaveland,06/Nov/13 09:43,08/Nov/13 14:51,14/Jul/23 05:49,08/Nov/13 14:51,2.11.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"Observed the following stacktrace while shutting down camel:
{code}
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.017 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.027 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.037 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#301: Forcing shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due first await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 2.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.018 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.028 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.039 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#305: Cannot completely force shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due second await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#318: Shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda is shutdown: true and terminated: false took: 20.018 seconds.
g   org.apache.camel.impl.DefaultCamelContext.shutdownServices()#1771: Error occurred while shutting down service: org.apache.camel.impl.DefaultExecutorServiceManager@37285252. This exception will be ignored.
g   Caused by java.util.ConcurrentModificationException - null
g      at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
g      at java.util.AbstractList$Itr.next(AbstractList.java:343)
g      at org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown(DefaultExecutorServiceManager.java:442)
g      at org.apache.camel.support.ServiceSupport.shutdown(ServiceSupport.java:158)
g      at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:166)
g      at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1766)
g      at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1681)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.destroy(AbstractCamelContextFactoryBean.java:432)
g      at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:500)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:476)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:445)
g      at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1090)
g      at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1064)
g      at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)
g      at org.apache.camel.spring.Main.doStop(Main.java:152)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.main.MainSupport$HangupInterceptor.run(MainSupport.java:82)
   org.apache.camel.impl.DefaultCamelContext.doStop()#1695: Uptime 35 days 23 hours
   org.apache.camel.impl.DefaultCamelContext.doStop()#1696: Apache Camel 2.11.0 (CamelContext: camel-activemq) is shutdown in 51.196 seconds
{code}

I haven't seen this before but it seems to me that there must be more than one thread doing something to DefaultExecutorServiceManager.executorServices (ArrayList) at the same time.",jdk-1.7.0_45,kaaveland,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,357121,,,2013-11-06 09:43:29.0,,,,,,,,,,,"0|i1pkbz:",357411,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"tokenize xml for splitter throwing org.xml.sax.SAXParseException; XML documents structures must start and end within the same entity. ",CAMEL-6940,12677736,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,Cecilio Alvarez,Cecilio Alvarez,06/Nov/13 08:44,03/Jan/14 03:32,14/Jul/23 05:49,13/Nov/13 17:19,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"When trying to split a xml containing this:
<tag name=name/>
I encountered the following exception : org.xml.sax.SAXParseException; XML documents structures must start and end within the same entity. 

Extract from my route:
the input is:

<BOOKS>
            <LIBRARY name=Library1/>
                      <BOOK name=Book1/>  <-----this kind of tag doesn't work.
                      <BOOK name=Book2/>
            </LIBRARY>
            <LIBRARY name=Library2/>
                      <BOOK name=Book1></BOOK>   <---this works.
                      <BOOK name=Book2></BOOK>
            </LIBRARY>
</BOOKS>


The splitting route:
<route>
<from uri=""activemq:queue.TEST""/>
<choice> 
        <when> 
                <xpath>/BOOKS</xpath> 
                <split streaming=""true"">
                        <tokenize token=""LIBRARY"" xml=""true""/>
                        <to uri=""activemq:example.LIBRARY""/>
                </split>
        </when> 
        <otherwise> 
                <log message=""Not a Books xml.""/> 
        </otherwise>       
</choice>
</route>

This issue is not part of camel 2.11.0.
",,ay,Cecilio Alvarez,subrata1106,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6004,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,357111,,,Tue Nov 12 11:25:55 UTC 2013,,,,,,,,,,,"0|i1pk9r:",357401,,,,,,,,,,,,,,,,,,,,"08/Nov/13 15:15;ay;hi,
i can look into this.
but could you attach the input file to this jira ticket?
your pasted xml is missing the quotation marks and it does't look like the input you are actually using.
and where are you getting the parsing exception?

thanks.
aki;;;","08/Nov/13 15:42;Cecilio Alvarez;Hi,

the quotation marks is <?xml version=""1.0"" encoding=""utf-8""?>
the parsing exception is throws each time a ""library"" contains a ""book"" tag without the closing </BOOK> tag, this wasn't a problem in camel 2.11.0.
I have to ask if I can put the original XML. But it's the same but with different tags names.

Thanks.
Cecilio Alvarez.;;;","12/Nov/13 09:21;ay;hi Cecilio,
initially i thought you were just using a broken xml (as your input xml pasted on this ticket had the attributes not quoted and the LIBRARY elements prematurely terminated), but there seems to be a real issue in the tokenizer when a tokenized block itself contains at least one self-terminated child. So we need to fix this issue.
thanks.
regards, aki;;;","12/Nov/13 11:25;ay;Hi Cecilio,
I just committed the fix for this issue into trunk, 2.12.x, and 2.11.x.
I included a test case that resembles your example, so I hope this fix will resolve your issue.
If you can test it with your example, that would be great.
thanks.
regards, aki;;;",,,,,,,,,,,,,,,,,,,,
FTP route with idempotent repo does not detect modified files,CAMEL-6936,12677585,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skelly,skelly,05/Nov/13 14:47,11/Nov/13 11:30,14/Jul/23 05:49,11/Nov/13 11:19,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,camel-ftp,,,,,0,,,,,,,"Per my forum post:
http://camel.465427.n5.nabble.com/inProgressRepository-Not-clearing-for-items-in-idempotentRepository-td5742613.html

I'm attempting to consume messages from an FTP server using an idempotent repository to ensure that I do not re-download a file unless it has been modified. 

Here is my (quite simple) camel configuration: 
{code}
        <beans:bean id=""downloadRepo"" class=""org.apache.camel.processor.idempotent.FileIdempotentRepository"" >
                <beans:property name=""fileStore"" value=""/tmp/.repo.txt""/>
                <beans:property name=""cacheSize"" value=""25000""/>
                <beans:property name=""maxFileStoreSize"" value=""1000000""/>
        </beans:bean>

        <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">
                <endpoint id=""myFtpEndpoint"" uri=""ftp://me@localhost?password=****&binary=true&recursive=true&consumer.delay=15000&readLock=changed&passiveMode=true&noop=true&idempotentRepository=#downloadRepo&idempotentKey=$simple{file:name}-$simple{file:modified}"" />
                <endpoint id=""myFileEndpoint"" uri=""file:///tmp/files""/>

        <route>
            <from uri=""ref:myFtpEndpoint"" />
            <to uri=""ref:myFileEndpoint"" />
        </route>
{code}

When I start my application for the first time, all files are correctly downloaded from the FTP server and stored in the target directory, as well as recorded in the idempotent repo. 

When I restart my application, all files are correctly detected as being in the idempotent repo already on the first poll of the FTP server, and are not re-downloaded: 

13-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true] 
2013-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: This consumer is idempotent and the file has been consumed before. Will skip this file: RemoteFile[test1.txt] 

However, on all subsequent polls to the FTP server the idempotent check is short-circuited because the file is ""in progress"": 

2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true]
2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: Skipping as file is already in progress: test1.txt 

I am using camel-ftp:2.11.1 (also observing same behavior with 2.12.1)  When I inspect the source code I notice two interesting things. 
First, the GenericFileConsumer check that determines whether a file is already inProgress which is called from isValidFile() always adds the file to the inProgressRepository: 
{code}
    protected boolean isInProgress(GenericFile<T> file) { 
        String key = file.getAbsoluteFilePath(); 
        return !endpoint.getInProgressRepository().add(key); 
    } 
{code}

Second, if a file is determined to match an entry already present in the idempotent repository it is discarded (GenericFileConsumer.isValidFile() returns false).  This means it is never published to an exchange, and thus never reaches the code which would remove it from the inProgressRepository. 

Since the inProgress check happens before the Idempotent Check, we will always short circuit after we get into the inprogress state, and the file will never actually be checked again. ",,davsclaus,skelly,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6574,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356960,,,Mon Nov 11 10:09:56 UTC 2013,,,,,,,,,,,"0|i1pjcn:",357250,,,,,,,,,,,,,,,,,,,,"05/Nov/13 21:23;skelly;In order to solve this, might I suggest removing the idempotent options entirely, and instead implementing an Idempotent GenericFileFilter which can then be injected into the ftp component. This is the approach I used to get around the bug in my implementation and it is working well for me.;;;","11/Nov/13 10:09;davsclaus;Thanks for the detailed report. This bug is also in the regular file component.;;;",,,,,,,,,,,,,,,,,,,,,,
"The ""dns.server"" is not optional.",CAMEL-6932,12677371,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,kuro,kuro,04/Nov/13 13:22,06/Nov/13 14:00,14/Jul/23 05:49,06/Nov/13 14:00,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-dns,,,,,,0,,,,,,,"The ""dns.server"" is not optional.
http://camel.465427.n5.nabble.com/bug-dns-component-td5740962.html

The following code does not work.
{code}
Map<String, Object> headers = exchange.getIn().getHeaders(); 
headers.put(""dns.name"", ""www.example.com""); 
headers.put(""dns.type"", ""TXT""); 
ProducerTemplate template = context.createProducerTemplate(); 
Exchange respExchange = template.send(""dns://dig"", exchange); 
{code}",,davsclaus,kuro,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356746,,,Wed Nov 06 14:00:43 UTC 2013,,,,,,,Patch Available,,,,"0|i1pi13:",357036,,,,,,,,,,,,,,,,,,,,"05/Nov/13 07:58;njiang;Hi Dai,

Can you submit the patch file to this JIRA?
We can have some legal issue if we just merge the patch from github pull request.

BTW, the patch looks good.

Willem;;;","06/Nov/13 14:00;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
"ContentType does not returns ""multipart/form-data;boundary=---------------------------j2radvtrk""",CAMEL-6926,12677055,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,amit1000,amit1000,01/Nov/13 13:35,06/Nov/13 13:59,14/Jul/23 05:49,06/Nov/13 13:59,2.11.2,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-http4,,,,,,0,,,,,,,"I found the issue in camel-http4 component. The HttpProducer.createRequestEntity method has been changed to parse the  contentType. The ContentType.parse method returns ""multipart/form-data"" 
instead of ""multipart/form-data;boundary=---------------------------j2radvtrk"". If you  change HttpProducer.createRequestEntity to use ContentType.create method it works fine. 


http://camel.465427.n5.nabble.com/Camel-HTTP4-2-11-2-ContentType-does-not-returns-quot-multipart-form-data-boundary-j2radvtrk-quot-tc5742407.html

",,amit1000,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Nov/13 13:44;amit1000;HttpProducerPatch;https://issues.apache.org/jira/secure/attachment/12611586/HttpProducerPatch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356431,,,Wed Nov 06 13:59:00 UTC 2013,,,,,,,Patch Available,,,,"0|i1pg2v:",356719,,,,,,,,,,,,,,,,,,,,"06/Nov/13 13:59;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Amit.
I also added an unit test to verify the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
XmlConverter cannot convert from ElementNSImpl to Document,CAMEL-6922,12677019,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,arseniy,arseniy,01/Nov/13 07:57,29/Jan/14 05:07,14/Jul/23 05:49,28/Jan/14 16:27,2.11.2,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,1,converter,dom,xml,,,,"XmlConvertor cannot convert from org.apache.xerces.dom.ElementNSImpl to org.w3c.dom.Document. Class ElementNSImpl implements both interfaces org.w3c.dom.Node and org.w3c.dom.NodeList. While type converter lookup iterates from ElementNSImpl through it's superclasses and implemented interfaces, it reaches NodeList first. Therefore the
{color:green}
Node toDOMNodeFromSingleNodeList(NodeList)
{color}

method is selected for conversion. However this method returns null for any NodeList with more than one node. This leads to null in a message's body.
This issue is not detected on Linux, because on Oracle JDK lookup reaches Node before NodeList and the
{color:green}
Document toDOMDocument(Node)
{color}

method is selected for conversion.","HP-UX, JDK 6.14, 7.06",alexanderz,arseniy,davsclaus,nickolay_martinov,rene avontuur,sdcf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Dec/13 22:23;rene avontuur;NodeListToDocumentTest.java;https://issues.apache.org/jira/secure/attachment/12619422/NodeListToDocumentTest.java","19/Dec/13 22:32;rene avontuur;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12619679/patchfile.txt",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,356395,,,Wed Jan 29 05:07:46 UTC 2014,,,,,,,,,,,"0|i1pfuv:",356683,,,,,,,,,,,,,,,,,,,,"10/Nov/13 10:19;davsclaus;What JDK are you using?

The Oracle JDK on osx, the ElementNSImpl class only implements Node (does NOT implement NodeList);;;","10/Nov/13 10:20;davsclaus;And do you have a sample unit test or something to use?;;;","18/Dec/13 22:23;rene avontuur;I wrote a unit test for this issue, which is attached as NodeListToDoumentTest.java.
It shows that ElementNSImpl implements the NodeList interface, the responsible superclass is NodeImpl.
This unit test passes on my machine, running an Oracle JDK.

The same unit test fails, after making the following change in
class BaseTypeConverterRegistry:

            // try the interfaces (in reverse order)
            for (int i=fromType.getInterfaces().length-1;i>=0;i--) {
                Class<?> type = fromType.getInterfaces()[i];

instead of:
            // try the interfaces
            for (Class<?> type : fromType.getInterfaces()) 

This may explain why a different JDK may have an issue with this conversion.;;;","19/Dec/13 22:32;rene avontuur;I added a patch file (patchfile.txt), which will most likely solve this issue.
After this patch, if toDOMDocumentFromSingleNodeList(Nodelist) is selected for conversion, then a second try using toDOMDocument(Node) will occur if applicable.
The attached unit test is not really fit for inclusion in the camel-core project, but helpful for debugging purposes.;;;","28/Jan/14 16:27;davsclaus;Thanks for reporting and the patch.;;;","29/Jan/14 05:07;arseniy;Did you have a chance to test the fix on HP-UX Java? On Oracle Java the issue does not occur.;;;",,,,,,,,,,,,,,,,,,
"camel-netty - producer channel pool should not close channel on destroy from pool, but noop",CAMEL-6921,12676930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Oct/13 18:51,31/Oct/13 18:58,14/Jul/23 05:49,31/Oct/13 18:58,2.10.7,2.11.2,2.12.1,,,,,,2.11.3,2.12.2,2.13.0,,camel-netty,,,,,,0,,,,,,,"This can lead to a NPE in message received in ClientChannelHandler

{code}
2013-10-31 13:03:18,046 | DEBUG | w I/O  worker #1 | NettyProducer                    | ?                                   ? | 234 - org.apache.camel.camel-netty - 2.10.6 | Closing channel as an exception was thrown from Netty
java.lang.NullPointerException
	at org.apache.camel.util.ExchangeHelper.isOutCapable(ExchangeHelper.java:370)
	at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:145)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:458)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:439)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:84)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:471)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:332)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356306,,,2013-10-31 18:51:01.0,,,,,,,,,,,"0|i1pfb3:",356594,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Component Resolution for CXFBean Triggers a Race Condition,CAMEL-6920,12676878,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zilatica,zilatica,31/Oct/13 15:53,10/Nov/13 10:28,14/Jul/23 05:49,10/Nov/13 10:28,2.10.7,,,,,,,,2.11.0,,,,camel-cxf,karaf,osgi,,,,0,,,,,,,"Making use of the cxfbean camel component triggers a race condition in ServiceMix startup.

Logs received:
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more
{code}

Will attach example code to trigger error and steps to reproduce in Apache ServiceMix 4.5.3.","Apache ServiceMix 4.5.3
Linux centora 2.6.18-308.8.2.el5 #1 SMP Tue Jun 12 09:57:26 EDT 2012 i686 i686 i386 GNU/Linux",davsclaus,zilatica,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"31/Oct/13 16:01;zilatica;cxf-cxfbean-broken.zip;https://issues.apache.org/jira/secure/attachment/12611416/cxf-cxfbean-broken.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356254,,,Sun Nov 10 10:28:57 UTC 2013,,,,,,,,,,,"0|i1pezj:",356542,,,,,,,,,,,,,,,,,,,,"31/Oct/13 15:58;zilatica;Steps to reproduce:

# Install Apache ServiceMix 4.5.3 ""Full assembly"" (http://servicemix.apache.org/downloads.html)
# Unzip to Linux machine
# Modify <smx untar root>/etc/org.apache.karaf.features.cfg
to be 
{code}
featuresBoot=karaf-framework,config,activemq-broker,activemq-spring,saaj,cxf-specs,camel,activemq-camel,camel-cxf,camel-blueprint,war,jetty,camel-jetty
{code}
Not the addition of jetty and camel-jetty
# Build attached source as part of the examples folder under <smx root>/examples/cxf
# Deliver cxf-cxfbean-broken jar into <smx root>/deploy
# Start ServiceMix (<smx root>/bin/start)
# Watch logs at <sxm root>/data/log/servicemix.log

Expected behavior:
Port 8585 will open up and listen for requests.

Actual behavior:
No start, error in logs
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more
{code}

Issue can be resolved by waiting around 3 minutes after actual startup and refresh (forcing a reload) the jar via
{code}
touch ./deploy/cxf-cxfbean-broken-4.5.3.jar
{code}

8585 will start listening after forcing the reload via touch and you may then run http://localhost:8585/test or http://<server host>:8585/test
You will receive a plain/text response of ""Hello world"" once the issue is resolved.
;;;","31/Oct/13 16:01;zilatica;Build this code running ""mvn clean install"" as part of the Apache ServiceMix 4.5.3 examples under 
<smx unzip root>/examples/cxf

You may build it directly or add a module under the cxf pom.xml file to include this example;;;","31/Oct/13 16:05;zilatica;Side notes:
I have tried ferociously to work around this issue without having to create a bug report as I'm well aware this is an old component that may not be fully maintained.  However, nothing is working.

I have enforced in the pom.xml:
{code}
 <Require-Bundle>org.apache.camel.camel-cxf</Require-Bundle>
{code}
which guarantees the camel-cxf bundle is up and running.  This does not fix the issue.

In addition, I reviewed the code and figured out that components are actually camel services with properties defining the component name.  To try to guarantee that the component is actually up and running before using it, I have included this in the camel-context.xml which ensure the service is truly up and running:
{code}
    <!-- this forces our delay to start after cxfbean starts -->
    <osgi:reference id=""cxfbeanReference"" cardinality=""1..1"" interface=""org.apache.camel.spi.ComponentResolver"" filter=""(component=cxfbean)"" />
{code}

I even went through the hassle of creating an OSGI Lifecycle listener and made sure I was actually receiving the component service.  While the service is up and running, it would seem camel is concurrently preparing to enable the ""cxfbean"" component while it is bringing up camel routes that require the component and subsequently failing.  This is a race condition that is solved only by waiting a given amount of time and then forcing a bundle update.  
;;;","31/Oct/13 16:12;zilatica;Also, documentation does not indicate this component is deprecated.  See http://camel.apache.org/cxf-bean-component.html
If this component is no longer being maintained/tested, I'd like to know so that I can work with my team to migrate all of our code away from it.  I'm still hoping the component is maintained and simply missing some blocking lock mechanism that is required for component startup.;;;","10/Nov/13 10:24;davsclaus;This is more of a Karaf/SMX issue, than Camel issue!. 

> step 5 - > Deliver cxf-cxfbean-broken jar into <smx root>/deploy
Also I never recommend people to deploy using the deploy directory - you do not have any control when the container starts the bundle from this dir. 

Install using the shell instead and you can use start level to have your bundles started after the container and framework bundles
;;;","10/Nov/13 10:27;davsclaus;And from Camel 2.11 onwards the Camel components enlist in their MANIFEST.MF entries the components as services this bundle exports

Export-Service: org.apache.aries.blueprint.NamespaceHandler;osgi.service
 .blueprint.namespace=""http://camel.apache.org/schema/blueprint/cxf"",org
 .apache.camel.spi.ComponentResolver;component=cxfrs,org.apache.camel.sp
 i.ComponentResolver;component=cxf,org.apache.camel.spi.ComponentResolve
 r;component=cxfbean

This should also help with this Karaf/SMX to resolve this better.

SMX 4.6 is being upgraded to use Camel 2.12 and thus have this out of the box.;;;","10/Nov/13 10:28;davsclaus;Use SMX 4.6 or Camel 2.11 onwards. And dont deploy using the deploy dir.;;;",,,,,,,,,,,,,,,,,
Error handler for SEDA producer doesn't work,CAMEL-6918,12676861,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,ceposta,ceposta,31/Oct/13 14:20,09/Apr/14 14:36,14/Jul/23 05:49,04/Nov/13 22:27,2.12.1,,,,,,,,2.12.4,2.13.0,,,camel-core,,,,,,1,,,,,,,"Exceptions thrown by seda producer bypass exception handling and bubble up to original caller. 

",,8forty@gmail.com,bvahdat,ceposta,fchaillou,njiang,,,,,,,,,,,,,,,,,,CAMEL-6912,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356237,,,Wed Apr 09 14:36:12 UTC 2014,,,,,,,,,,,"0|i1pevr:",356525,Regression,,,,,,,,,,,,,,,,,,,"31/Oct/13 14:21;ceposta;The SendProcessor doesn't catch exceptions and set them on the exchange (which is what the Redelivery bits look for). 

I'm working on a patch.;;;","31/Oct/13 14:45;8forty@gmail.com;FYI in my test cast the exception doesn't ""bubble up to the original caller"" unless tracing is turned on.  See CAMEL-6912.;;;","31/Oct/13 14:53;ceposta;Yes, that's because the trace processor adds the exception handling as mentioned above. It really should be in the SendProcessor too.;;;","04/Nov/13 22:27;ceposta;Fix is now on master. 
Please check a nightly snapshot from here in a day or so:

https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.13-SNAPSHOT/;;;","05/Nov/13 07:32;bvahdat;I wonder if we could better remove the try/catch block of {{SedaErrorTest}} for this fix as the test is a positive and not a negative one. See also CAMEL-5983.;;;","05/Nov/13 15:06;ceposta;I agree. The test migrated in different iterations, and I no longer need the try/catch. Change has been committed. Thanks for the code review.;;;","08/Apr/14 17:44;fchaillou;Hello,
The issue is marked resolved in 2.12.2 but we have the same issue in 2.12.3.
When looking at the commit, it seems the fix was not pushed on the 2.12 branch. Could you confirm ?
Thank you !
Fabien;;;","09/Apr/14 02:55;njiang;I just merged the patches into camel-2.12.x branch and updated the fix version.;;;","09/Apr/14 14:36;fchaillou;Thank you Willem, do you know when the 2.12.4 is expected to be released ?
Have a good day.
Fabien;;;",,,,,,,,,,,,,,,
camel-jetty - jetty producer misses a colon in the getUrl of HttpOperationFailedException,CAMEL-6915,12676830,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,31/Oct/13 10:13,31/Oct/13 10:14,14/Jul/23 05:49,31/Oct/13 10:14,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,"A colon is missing so the getUrl can return
{code}
http//localhost:23000/test
{code}

Which should be
{code}
http://localhost:23000/test
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356206,,,2013-10-31 10:13:29.0,,,,,,,,,,,"0|i1peov:",356494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel fails to send messages to IPv6 address with a port number,CAMEL-6914,12676686,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,ladislav.lengyel,ladislav.lengyel,30/Oct/13 17:45,03/Jan/14 04:40,14/Jul/23 05:49,03/Jan/14 04:40,2.11.0,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,"Dear Camel team,
we are just verifying our migrated application to Apache Camel. Today we found an issue that is not described on the web, in the faq  nor among the existing issues.
We are creating endpoints via String literals and when we started the IPv6 tests we failed on this issue.
The Camel transforms the orginal address 
{noformat}http://[2a00:8a00:6000:40::1413]:30300{noformat}
to this format
{noformat}http://%5B2a00:8a00:6000:40::1413%5D:30300{noformat}
which causes this exception
{noformat}instance1 2013-10-30 13:25:23,914 org.apache.camel.processor.DefaultErrorHandler DEBUG (MarkerIgnoringBase.java:debug:72) [Camel (camel-1) thread #74 - JmsConsumer[XXX-RR-TEST]]
| Failed delivery for (MessageId: ID:mch30-pgd02-b-45068-1383134137465-8:5:1:1:3 on ExchangeId: ID-mch30-pgd02-b-35624-1383134141407-0-176). On delivery attempt: 0 caught: org.apache.commons.httpclient.URIException: IPv6reference{noformat}

The suggested solution is to remove the square brackets {noformat}[ ]{noformat} from the {noformat}unsafeCharacters{noformat} in the {noformat}org.apache.camel.util.UnsafeUriCharactersEncoder{noformat}
since the square brackets are valid IPv6 characters.
Thanks!
Best regards,
Laci",,ladislav.lengyel,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,356118,,,Fri Jan 03 04:40:35 UTC 2014,,,,,,,,,,,"0|i1pe5r:",356406,,,,,,,,,,,,,,,,,,,,"03/Jan/14 04:40;njiang;Applied the patch into master and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
xslt endpoint - JMX attributes for state and camelId not available,CAMEL-6910,12676123,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/13 14:21,28/Oct/13 14:28,14/Jul/23 05:49,28/Oct/13 14:28,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,jmx,,,,,0,,,,,,,"See ticket
https://github.com/hawtio/hawtio/issues/682

And screenshot attached this ticket",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Oct/13 14:21;davsclaus;Screen Shot 2013-10-28 at 3.21.00 PM.png;https://issues.apache.org/jira/secure/attachment/12610563/Screen+Shot+2013-10-28+at+3.21.00+PM.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,355620,,,2013-10-28 14:21:25.0,,,,,,,,,,,"0|i1pb33:",355908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IMAP message flagged as SEEN following rollback,CAMEL-6905,12675825,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dambrose,dambrose,25/Oct/13 15:19,26/Oct/13 14:06,14/Jul/23 05:49,26/Oct/13 14:06,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-mail,,,,,,0,,,,,,,"By default, if you access the content of an IMAPMessage, it will be flagged as SEEN on the server. This creates a problem if the route is subsequently rolled back (due to an exception - e.g. connection error on destination endpoint), the message will remain as SEEN and never get picked up on subsequent polls (unseen=true).

setPeek(true) should be called on each IMAPMessage before being dispatched to the processor; this ensures that the message will not be automatically flagged as SEEN before being fully consumed.

As a work around, implement a custom processor that calls setPeek(true) on the original IMAPMessage (using reflection):

{quote}
Message msgIn = exchange.getIn();

Field f = msgIn.getClass().getDeclaredField(""originalMailMessage"");
f.setAccessible(true);
IMAPMessage im = (IMAPMessage) f.get( msgIn );
im.setPeek(true);

{quote}

For reference, this is my route configuration:

{quote}
from(""imap://sn?username=un&password=xx&delete=false&unseen=true"").
process( new MyCustomAttachmentProcessor() ).
to(""jms://xyz"");
{quote}
",Windows 7,dambrose,davsclaus,,,,,,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,355323,,,Sat Oct 26 14:06:30 UTC 2013,,,,,,,Patch Available,,,,"0|i1p99b:",355611,,,,,,,,,,,,,,,,,,,,"26/Oct/13 14:06;davsclaus;Thanks for reporting. There is a peek=true option now.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Endpoint should include params in uri so they are unique,CAMEL-6903,12675783,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/13 10:44,26/Oct/13 13:22,14/Jul/23 05:49,26/Oct/13 13:22,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,"This avoids eg a netty-http producer picking up a wrong endpoint, and send wrong data.

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,355281,,,2013-10-25 10:44:44.0,,,,,,,,,,,"0|i1p8zz:",355569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmljson: Encoding is not considered while marhaling,CAMEL-6895,12675531,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vgoldin@gmail.com,vgoldin@gmail.com,24/Oct/13 18:07,29/Oct/13 02:52,14/Jul/23 05:49,29/Oct/13 02:52,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,,,,,,,0,,,,,,,"The encoding specified in the DataFormat properties should be passed to OutputStreamWriter constructor in XmlJsonDataFormat.marshal method, otherwise it is not being considered.

OutputStreamWriter osw = new OutputStreamWriter(stream, encoding);",,njiang,vgoldin@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,355108,,,Tue Oct 29 02:52:58 UTC 2013,,,,,,,,,,,"0|i1p7xj:",355396,,,,,,,,,,,,,,,,,,,,"25/Oct/13 08:50;vgoldin@gmail.com;Willem, why the charset is taken from the exchange instead of DataFormat properties, where it is explicitly specified (""encoding"")?;;;","25/Oct/13 11:42;njiang;Oh, it's my fault. The feature that I just added was supposed to change the encoding dynamically (per message)
I will update the code to apply the encoding setting of DataFormat if the message header is not setting the encoding header.;;;","29/Oct/13 02:52;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
CBR - Should break out if exception was thrown when evaluating predicate,CAMEL-6889,12675247,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/13 13:43,23/Oct/13 14:19,14/Jul/23 05:49,23/Oct/13 14:19,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,eip,,,,,0,,,,,,,"If having a CBR and the predicate throws an exception, then the next predicate is called before error handler triggers.

We should break out when exception is detected like pipeline/multicast can do.

",,davsclaus,kaaveland,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354867,,,Wed Oct 23 14:19:26 UTC 2013,,,,,,,,,,,"0|i1p6g7:",355156,,,,,,,,,,,,,,,,,,,,"23/Oct/13 13:54;kaaveland;I was the one asking about this on IRC earlier - just going to document that we found a workaround here. We made the bean implement Predicate and use when(bean) instead of when(method(bean)) and the error handling appears to work correctly.;;;","23/Oct/13 14:19;davsclaus;Thanks for reporting and providing the work around;;;",,,,,,,,,,,,,,,,,,,,,,
camel-jclouds JcloudsPayloadConverter doesn't copy the inputstream,CAMEL-6888,12675245,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Oct/13 13:19,25/Oct/13 12:36,14/Jul/23 05:49,25/Oct/13 12:36,2.10.7,2.11.2,2.12.1,,,,,,2.11.3,2.12.2,2.13.0,,camel-jclouds,,,,,,0,,,,,,,"JcloudsPayloadConverter.toPayload(InputStream is, Exchange exchange)  doesn't copy is if the is.markSupported() is false.

",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354865,,,Fri Oct 25 12:36:27 UTC 2013,,,,,,,,,,,"0|i1p6fr:",355154,,,,,,,,,,,,,,,,,,,,"25/Oct/13 12:36;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
We should support to set the ContentMetadata of the Payload object through message header,CAMEL-6887,12675210,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Oct/13 08:11,29/Oct/13 02:53,14/Jul/23 05:49,29/Oct/13 02:53,,,,,,,,,2.13.0,,,,camel-jclouds,,,,,,0,,,,,,,"It could be handy if we can set the Payload ContentMetadata of the JcloudsBlock by setting the Camel message header.
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354830,,,Tue Oct 29 02:53:45 UTC 2013,,,,,,,,,,,"0|i1p67z:",355119,,,,,,,,,,,,,,,,,,,,"29/Oct/13 02:53;njiang;Applied the patch into master branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
The XmlSignatureProcessor only supports the Santuario SecurityProvider,CAMEL-6881,12674799,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sbo13,sbo13,21/Oct/13 14:38,22/Oct/13 11:25,14/Jul/23 05:49,22/Oct/13 11:25,2.12.1,,,,,,,,2.12.2,2.13.0,,,extra,,,,,,1,,,,,,,"The problem is in the component camel-xmlsecurity

In the static initializer of the org.apache.camel.component.xmlsecurity.processor.XmlSignatureProcessor throws an ClassNotFoundException if the provider is not in the classpath.

I wanted to use the default implementation since the provided one seemed to caue problems with our application server, but unfortunately classes of the implementation are used in the initialization-code which makes it impossible to use with another security provider.
",,de_tom,njiang,sbo13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Oct/13 14:40;sbo13;IgnoreMissingProvider.patch;https://issues.apache.org/jira/secure/attachment/12609438/IgnoreMissingProvider.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354421,,,Tue Oct 22 11:25:25 UTC 2013,,,,,,,Patch Available,,,,"0|i1p3pb:",354711,,,,,,,,,,,,,,,,,,,,"21/Oct/13 14:41;sbo13;BTW: If you are interested I wouldn't mind to provide a changeset that makes the provider configurable by a parameter;;;","22/Oct/13 11:25;njiang;Applied patch into master and camel-2.12.x branches with thanks to Sebastian;;;",,,,,,,,,,,,,,,,,,,,,,
camel-http4 - Should support defining multiple components with different names,CAMEL-6880,12674754,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/13 09:33,21/Oct/13 12:52,14/Jul/23 05:49,21/Oct/13 12:52,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-http4,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Using-different-SSLContextParameters-with-HTTP4-component-tp5740430.html

If you define multiple http4 components and assign their names as: ""http4-foo"", and ""http4-bar"" etc, then the address uri is not resolved correctly.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354376,,,2013-10-21 09:33:53.0,,,,,,,,,,,"0|i1p3fb:",354666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf-transport component does not include Content-Type in the map of headers,CAMEL-6878,12674715,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,sergey_beryozkin,sergey_beryozkin,20/Oct/13 21:25,19/Nov/13 18:46,14/Jul/23 05:49,19/Nov/13 18:46,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cxf,,,,,,0,,,,,,,"See http://camel.465427.n5.nabble.com/CFX-Bean-headers-access-Issue-tt5741312.html#a5741691

Content-Type is HTTP header like all other headers are, CXF typically has it in the headers map and also as a dedicated message property.

At the moment Camel CXF sets Content-Type only as a message property and not adds it to the list of the headers. This is not consistent with the default CXF HTTP processing.
 ",,hadrian,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Oct/13 17:39;sergey_beryozkin;camel6878.txt;https://issues.apache.org/jira/secure/attachment/12610872/camel6878.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354337,,,Tue Nov 19 18:46:06 UTC 2013,,,,,,,,,,,"0|i1p36n:",354627,,,,,,,,,,,,,,,,,,,,"19/Nov/13 18:46;hadrian;Fixed. Thanks Sergey for patch.

Branch: refs/heads/master
Commit: 4f06ebaecf85a748eb6812afb4d231b80aba5318
Branch: refs/heads/camel-2.12.x
Commit: cffe20373b6de0038c5d9dcf1902b424e6407b29
Branch: refs/heads/camel-2.11.x
Commit: 1fbee5b6d19e8472a0b238bbac6c03393faa6167;;;",,,,,,,,,,,,,,,,,,,,,,,
"camel-jpa - Avoid sharing the same EntityManager object across JpaEndpoint, it's Producers & Consumers as per se EntityManagers are not thread-safe.",CAMEL-6874,12674593,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,18/Oct/13 21:37,19/Oct/13 00:15,14/Jul/23 05:49,19/Oct/13 00:15,2.12.0,,,,,,,,2.12.2,2.13.0,,,camel-jpa,,,,,,0,,,,,,,"See http://camel.465427.n5.nabble.com/Build-failures-td5741273.html

The JPA 2.0 Spec, section 7.2:
{quote}
An entity manager must not be shared among multiple concurrently executing threads, as the entity manager and persistence context are not required to be threadsafe. Entity managers must only be accessed in a single-threaded manner.
{quote}

The test {{org.apache.camel.processor.jpa.JpaProducerConcurrentTest}} is relevant in this context.
",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354215,,,2013-10-18 21:37:59.0,,,,,,,,,,,"0|i1p2fz:",354506,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Gson does not respect Exchange.CHARSET_NAME,CAMEL-6873,12674499,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,FergusN,FergusN,18/Oct/13 12:23,21/Oct/13 04:39,14/Jul/23 05:49,21/Oct/13 04:39,2.12.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-gson,,,,,,0,,,,,,,"When marshalling and unmarshalling using the gson component it does not respect the Excahnge.CHARSET_NAME property on the exchange. When constructing the Streams the charset should be passed. My changes are highlighted below. Git pull request to follow.

    @Override
    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
        BufferedWriter writer = IOHelper.buffered(new OutputStreamWriter(stream{color:red}, IOHelper.getCharsetName(exchange){color}));
        gson.toJson(graph, writer);
        writer.close();
    }

    @Override
    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {
        BufferedReader reader = IOHelper.buffered(new InputStreamReader(stream{color:red}, IOHelper.getCharsetName(exchange){color}));
        Object result = gson.fromJson(reader, this.unmarshalType);
        reader.close();
        return result;
    }",,FergusN,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,354121,,,Mon Oct 21 04:39:32 UTC 2013,,,,,,,,,,,"0|i1p1w7:",354413,,,,,,,,,,,,,,,,,,,,"21/Oct/13 04:39;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x with thanks to  Fergus.;;;",,,,,,,,,,,,,,,,,,,,,,,
came-netty-http - Content-Type may have optional action parameter,CAMEL-6872,12674360,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/13 18:00,17/Oct/13 18:36,14/Jul/23 05:49,17/Oct/13 18:36,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,"For example with SOAP 1.2 HTTP messages there may be an optional action parameter on a Content-Type header.
http://www.w3.org/TR/2002/CR-soap12-part2-20021219/#ietf-action

So we should cater for that when we extract the charset from content-type",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353982,,,Thu Oct 17 18:36:47 UTC 2013,,,,,,,,,,,"0|i1p11b:",354274,,,,,,,,,,,,,,,,,,,,"17/Oct/13 18:36;davsclaus;Also polished camel-jetty;;;",,,,,,,,,,,,,,,,,,,,,,,
Log compenent removes line separators from logged message,CAMEL-6871,12674317,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smikhalevski,smikhalevski,17/Oct/13 14:03,21/Oct/13 14:02,14/Jul/23 05:49,21/Oct/13 14:02,2.10.6,,,,,,,,2.12.2,2.13.0,,,camel-core,,,,,,0,,,,,,,"*Steps*
# Send exchange with input body equal to {{""1"" + LS + ""2"" + LS + ""3""}}, where {{LS}} is a system dependent line separator.
# Log exchange input body with Camel log component:
{code}<to uri=""log:logger_name?level=INFO"" />{code}

*Expected*
Exchange input body is logged with {{LS}} charcters preserved:
{code}1
2
3{code}

*Observed*
Exchange is logged without {{LS}} characters:
{code}123{code}

*Workaround*
Use log EIP instead:
{code}<log loggingLevel=""INFO"" logName=""logger_name"" message=""${body}"" />{code}",,davsclaus,smikhalevski,szhemzhitsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Oct/13 14:03;smikhalevski;camel-log-formatter-test.zip;https://issues.apache.org/jira/secure/attachment/12608934/camel-log-formatter-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,353939,,,Mon Oct 21 13:32:07 UTC 2013,,,,,,,,,,,"0|i1p0rr:",354231,,,,,,,,,,,,,,,,,,,,"21/Oct/13 13:32;davsclaus;Adding option {{skipBodyLineSeparator}} so people can configure if they want to skip the LS or not. This preserves current behavior as default.

For example if your message body is a large XML message with LS you may not want this to log over 50+ lines etc.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-script - Memory leak if creating a lit of expressions and predicates,CAMEL-6870,12674291,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/13 10:12,17/Oct/13 10:39,14/Jul/23 05:49,17/Oct/13 10:39,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-script,,,,,,0,,,,,,,"See
http://camel.465427.n5.nabble.com/Camel-Javascript-Leak-tp5741468.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6559,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353913,,,Thu Oct 17 10:15:43 UTC 2013,,,,,,,,,,,"0|i1p0lz:",354205,,,,,,,,,,,,,,,,,,,,"17/Oct/13 10:15;davsclaus;The problem is CAMEL-6559;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs - HdfsProducer filename collisions when Producer instance recreated,CAMEL-6867,12674173,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,boday,boday,16/Oct/13 18:38,21/Oct/13 03:47,14/Jul/23 05:49,21/Oct/13 03:47,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-hdfs,,,,,,0,,,,,,,"The HdfsProducer uses an instance variable (long splitNum) that is incremented to create unique output filenames in a given directory (seg0, seg1, etc).  

If the Producer instance is recreated (producer cache limit exceeded, server restart, etc), the splitNum variable is reset to 0.  This results in files being overwritten when using overwrite=true mode or throwing ""The file already exists"" errors when using overwrite=false mode.

We should switch to using a timestamp or some other unique generator to prevent filename collisions regardless of the Producer instance lifecycle for the same hdfs directory URL...

",,boday,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353795,,,Mon Oct 21 03:33:33 UTC 2013,,,,,,,,,,,"0|i1ozwf:",354087,,,,,,,,,,,,,,,,,,,,"16/Oct/13 22:37;boday;any objection to using System.nanoTime() for the file name unique Id instead of the the long splitNum++?;;;","17/Oct/13 06:16;davsclaus;Maybe use messageId from Message which is what the Camel File/FTP components does if no explicit file name has been given?;;;","17/Oct/13 21:15;boday;the issue with using the messageId is that the connectOnStartup mode creates the initial file stream on startup (no messageId to use in this case).  how about if we use the UUID generator from the CamelContext like this: getEndpoint().getCamelContext().getUuidGenerator().generateUuid()?

also, any reason to continue to prepend the DEFAULT_SEGMENT_PREFIX with this new approach...the prefix ""seg"" seems pretty arbitrary and should probably be configurable if we need to keep it...
;;;","18/Oct/13 09:19;davsclaus;Yeah good point of using the uuid generator from Camel.

And yeah fell free to change that prefix or make it configurable etc, as you think its the best.;;;","18/Oct/13 22:58;boday;per discussion, changed the split filename logic to use the UUID generator and removed the ""seg"" prefix from the filenames

thanks to Sergey Kozlovich ([~skozlovich]) for helping find/fix/test this issue
;;;","18/Oct/13 23:24;boday;anyone see an issue with backporting this fix to the 2.10.x, 2.11.x, 2.12.x branches?;;;","19/Oct/13 07:10;davsclaus;2.10 is no longer supported, so 2.11 onwards is fine.;;;","21/Oct/13 03:33;boday;merging fixes into 2.11.x, 2.12.x branches;;;",,,,,,,,,,,,,,,,
ConcurrentModificationException when starting QuickFIX/J component with more than one engine,CAMEL-6866,12674127,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,antonin.stefanutti,antonin.stefanutti,16/Oct/13 14:16,21/Oct/13 16:55,14/Jul/23 05:49,21/Oct/13 16:53,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-quickfix,,,,,,0,,,,,,,"{code}
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at org.apache.camel.component.quickfixj.QuickfixjComponent.onCamelContextStarted(QuickfixjComponent.java:163)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1833)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1699)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)
{code}

Since [CAMEL-6443].",,antonin.stefanutti,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6443,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353750,,,Mon Oct 21 16:53:24 UTC 2013,,,,,,,,,,,"0|i1ozmv:",354042,Regression,,,,,,,,,,,,,,,,,,,"17/Oct/13 08:52;davsclaus;Are you using any container such as Apache Karaf or something?;;;","21/Oct/13 15:24;antonin.stefanutti;I'm using Weld SE {{2.1.0.CR1}}.

It's reproducible with an Arquillian test (I'm using the {{arquillian-weld-se-embedded-1.1}} plugin) that uses two different _session settings_ configuration files for the {{quickfix}} endpoint.;;;","21/Oct/13 16:41;bvahdat;Yeah this is indeed a side effect of CAMEL-6443 and I could reproduce this by one of this component's test.;;;","21/Oct/13 16:53;bvahdat;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,
camel-netty-http route cannot proxy the response which is chunked,CAMEL-6861,12673653,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Oct/13 07:49,15/Oct/13 08:04,14/Jul/23 05:49,15/Oct/13 08:04,2.12.0,2.12.1,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,"If I use camel-netty-http to build a http proxy, the proxy just send a empty response back if the back end server is using chunk encoding.",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353276,,,Tue Oct 15 08:04:14 UTC 2013,,,,,,,,,,,"0|i1owpr:",353569,,,,,,,,,,,,,,,,,,,,"14/Oct/13 10:40;njiang;Applied the patch into master and Camel-2.12.x branches.;;;","14/Oct/13 13:29;davsclaus;I think it broke the unit tests in camel-itest

Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.535 sec <<< FAILURE! - in org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest
testNettyHttpRouteClientChunked(org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest)  Time elapsed: 1.147 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[Bye Camel in chunks.]> but was:<[]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.invokeService(NettyHttpClientChunkedResponseTest.java:51)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.testNettyHttpRouteClientChunked(NettyHttpClientChunkedResponseTest.java:38);;;","15/Oct/13 02:01;njiang;Hi Claus,

I ran the test in my box without any issue, and I found the test were passed in the CI[1].
Could you double check it ?
[1]https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-itest/1573/testReport/org.apache.camel.itest.nettyhttp/NettyHttpClientChunkedResponseTest/;;;","15/Oct/13 08:04;davsclaus;Yeah re-ran a couple of test runs today and it passed.;;;",,,,,,,,,,,,,,,,,,,,
camel-jpa is throwing an exception in high concurrency,CAMEL-6857,12673428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,11/Oct/13 12:30,21/Oct/13 15:06,14/Jul/23 05:49,21/Oct/13 15:06,2.12.0,2.12.1,,,,,,,2.12.2,2.13.0,,,camel-jpa,,,,,,0,,,,,,,"Today, it looks much better [1]. We are trying to fix the unit tests which are failing from time to time on slower boxes. But this isn't so easy for all of them...

I had a look at org.apache.camel.processor.jpa.JpaProducerConcurrentTest.testConcurrentProducers. A few times I get the following exception which results in missing exchanges in the mock:result endpoint:
{noformat}
2013-10-11 14:01:10,623 [pool-2-thread-2] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4 on ExchangeId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9). Exhausted after delivery attempt: 1 caught: org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://start                                                                ] [        68]
[route1            ] [to1               ] [jpa://org.apache.camel.examples.SendEmail                                     ] [        67]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
    Id                  ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9
    ExchangePattern     InOnly
    Headers             {breadcrumbId=ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4, CamelEntityManager=org.apache.openjpa.persistence.EntityManagerImpl@6e453dd5, CamelRedelivered=false, CamelRedeliveryCounter=0}
    BodyType            org.apache.camel.examples.SendEmail
    Body                SendEmail[id: 102 address: null]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:293)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.convertException(ExtendedEntityManagerCreator.java:501)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.afterCommit(ExtendedEntityManagerCreator.java:482)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(TransactionSynchronizationUtils.java:133)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit(TransactionSynchronizationUtils.java:121)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCommit(AbstractPlatformTransactionManager.java:951)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:797)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:148)
    at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:53)
    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
    at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:132)
    at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:307)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:127)
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:56)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
    at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
    at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
    at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
    at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
    at org.apache.camel.processor.jpa.JpaProducerConcurrentTest$1.call(JpaProducerConcurrentTest.java:58)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
    at java.lang.Thread.run(Thread.java:680)
Caused by: <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.apache.openjpa.kernel.BrokerImpl.begin(BrokerImpl.java:1369)
    at org.apache.openjpa.kernel.DelegatingBroker.begin(DelegatingBroker.java:925)
    at org.apache.openjpa.persistence.EntityManagerImpl.begin(EntityManagerImpl.java:565)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.enlistInCurrentTransaction(ExtendedEntityManagerCreator.java:422)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.doJoinTransaction(ExtendedEntityManagerCreator.java:399)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:351)
    at com.sun.proxy.$Proxy18.joinTransaction(Unknown Source)
    at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:55)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)
    ... 27 more
{noformat}
which is throwing from the line 55 in org.apache.camel.component.jpa.JpaProducer
entityManager.joinTransaction();

I think this is a concurrency issue we have to investigate (not sure whether the issue is in Camel, Spring, OpenJPA, ...).",,bvahdat,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353051,,,Mon Oct 21 15:05:39 UTC 2013,,,,,,,,,,,"0|i1ovaf:",353338,,,,,,,,,,,,,,,,,,,,"21/Oct/13 13:37;davsclaus;Babak, you got this fixed. Is it also merged to 2.11 and 2.12 branches? If so many you can resolve this ticket?;;;","21/Oct/13 15:05;bvahdat;Yeah this issue is now resolved through CAMEL-6874 and has *only* been backported to the 2.12 branch where the problem started *after* the fix of CAMEL-5932.;;;",,,,,,,,,,,,,,,,,,,,,,
netty consumer using UDP should release the datagram channel factory,CAMEL-6856,12673405,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,11/Oct/13 10:00,11/Oct/13 10:05,14/Jul/23 05:49,11/Oct/13 10:05,2.10.7,2.11.2,,,,,,,2.11.3,,,,camel-netty,,,,,,0,,,,,,,We only release the TCP resources on netty. We should do the same when UDP as in use.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,353028,,,Fri Oct 11 10:05:43 UTC 2013,,,,,,,,,,,"0|i1ov5b:",353315,,,,,,,,,,,,,,,,,,,,"11/Oct/13 10:05;davsclaus;Backported to 2.10 and 2.9 branches as well.;;;","11/Oct/13 10:05;davsclaus;If using UDP and you hot deploy a new application when using netty UDP consumer, you may have depending on netty version in use, some threads still alive that can take up CPU time.;;;",,,,,,,,,,,,,,,,,,,,,,
Type conversion between DOMSource and InputStream breaks on Windows,CAMEL-6854,12673376,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,siano,siano,11/Oct/13 05:53,10/Dec/13 07:54,14/Jul/23 05:49,10/Dec/13 07:54,2.10.7,2.11.2,2.12.1,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,"The type conversion between DomSource and InputStream will destroy non-ascii characters if the default charset is not UTF-8.

Therefore the following test will work on Linux (and in my Eclipse on Windows) where the default charset is UTF-8, but it will not work if invoked from the command line (maven) when the default charset is not UTF-8.

I will also get similar issues if the type converter are implicitly called by endpoints (the real use case was to read the output of a camel-cxf endpoint as an InputStream).

import java.io.InputStream;

import javax.xml.transform.dom.DOMSource;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class XMLTypeConverterTest extends CamelTestSupport {

    @Test
    public void testBase64Marshal() throws InterruptedException {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMessageCount(1);
        template.sendBody(""direct:source"", ""<colors><color>grün</color></colors>"");
        assertMockEndpointsSatisfied();
        String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
        assertStringContains(body, ""<colors><color>grün</color></colors>"");
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:source"").convertBodyTo(DOMSource.class).convertBodyTo(InputStream.class).convertBodyTo(DOMSource.class)
                        .convertBodyTo(String.class).to(""mock:result"");
            }
        };
    }
}
",Windows,ay,njiang,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Oct/13 06:01;siano;0001-CAMEL-6854-Type-conversion-between-DOMSource-and-Inp.patch;https://issues.apache.org/jira/secure/attachment/12608241/0001-CAMEL-6854-Type-conversion-between-DOMSource-and-Inp.patch","11/Oct/13 06:03;siano;XMLTypeConverterTest.txt;https://issues.apache.org/jira/secure/attachment/12607954/XMLTypeConverterTest.txt","09/Dec/13 14:05;ay;test2.diff;https://issues.apache.org/jira/secure/attachment/12617832/test2.diff",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352999,,,Tue Dec 10 07:54:52 UTC 2013,,,,,,,,,,,"0|i1ouyv:",353286,,,,,,,,,,,,,,,,,,,,"11/Oct/13 06:13;siano;I think the issue is in org.apache.camel.converter.jaxp.XmlConverter

...
    @Converter
    public InputStream toInputStream(DOMSource source, Exchange exchange) throws TransformerException, IOException {
        String s = toString(source, exchange);
        return new ByteArrayInputStream(s.getBytes());
    }

Converts the data to a String first, then we get a ByteArrayInputStream. The content of the InputStream has to be UTF-8 unless the preamble (which we don't have) or the BOM (which we also don't have) indicate otherwise.

I am pretty sure that other XML data types (like Document) have the same issue.

I am not entirely sure how to fix this, but it might be possible that the either the default charset needs to be UTF-8 for these XML type conversions or that a XML preamble (with charset) needs to be written in all cases.;;;","11/Oct/13 11:46;siano;Wouldn't changing lines 834 and 848 of XMLConverter class to
        return new ByteArrayInputStream(s.getBytes(""UTF-8""));

fix this issue? (hardcoded UTF-8 no matter what the default encoding is)

Or would this have side effects?;;;","14/Oct/13 06:03;siano;I have attached a patch that will fix this specific issue (even though there might be encoding issues elswhere in the code);;;","09/Dec/13 14:03;ay;Hi Willem,
I was wondering if the reason for this change not being committed is the test using non-ascii characters that are violating the code check? If that is the case, I am attaching a modified test that does not directly include those non-ascii characters in the code but includes them using their corresponding escaped unicode characters. I even added a few characters to make it more interesting.

regards, aki;;;","09/Dec/13 14:05;ay;a modified test file with test cases that use escaped unicode characters.
;;;","10/Dec/13 01:48;njiang;This issue was out of my radar for a while, I will review patch and apply it to the master branch today.;;;","10/Dec/13 07:54;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,
UnsafeUriCharactersEncoder is missing hex digits,CAMEL-6853,12673261,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thomas_konst,thomas_konst,10/Oct/13 17:11,11/Oct/13 11:45,14/Jul/23 05:49,11/Oct/13 11:45,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"The class org.apache.camel.util.UnsafeUriCharactersEncoder in camel-core has a char[] HEX_DIGITS which includes hex digits that can be used in encoded urls following the % sign. However the char[] only contains the uppercase hexadecimal digits 'A' through 'F' which (following RFC 3986, chapter 2.1) are equivalent to the lowercase digits 'a' through 'f' in percent-encoding used in URIs. 

So the char[] should also contain the lowercase digits 'a' through 'f', because otherwise the class does not work correctly in cases where URLs with already encoded characters having lowercase hex digits are encoded (e.g. URL with %3c). For these URLs the % sign is encoded once again (making it %253c in the example).

The provided patch adds the lowercase hex digits to the HEX_DIGITS char[].

Regards,
Thomas",,davsclaus,thomas_konst,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/13 17:36;thomas_konst;UnsafeUriCharactersEncoder.patch;https://issues.apache.org/jira/secure/attachment/12607846/UnsafeUriCharactersEncoder.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,352884,,,Fri Oct 11 11:45:41 UTC 2013,,,,,,,Patch Available,,,,"0|i1ou9j:",353171,,,,,,,,,,,,,,,,,,,,"11/Oct/13 11:45;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Target name with underscores and cron expression throws Exception in QuartzComponent.createEndpoint,CAMEL-6851,12673172,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tcunning,tcunning,10/Oct/13 04:53,12/Oct/13 10:05,14/Jul/23 05:49,12/Oct/13 10:05,2.10.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-quartz,,,,,,0,,,,,,,"I think a fix went in for CAMEL-4769 that fixed up group names with underscores, but it seems to only have fixed group names if there is a trigger specified, and not group names with underscores if a cron expression is specified in the URI.        

I'm attaching a small app that reproduces this issue and a patch.","sh% sw_vers
ProductName:	Mac OS X
ProductVersion:	10.8.5
bananastand:bin tcunning$ java -version
java version ""1.6.0_51""
Java(TM) SE Runtime Environment (build 1.6.0_51-b11-456-11M4508)
Java HotSpot(TM) 64-Bit Server VM (build 20.51-b01-456, mixed mode)",davsclaus,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/13 04:55;tcunning;0001-foo.patch;https://issues.apache.org/jira/secure/attachment/12607738/0001-foo.patch","10/Oct/13 04:59;tcunning;quartzexample.tar.gz;https://issues.apache.org/jira/secure/attachment/12607739/quartzexample.tar.gz",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352795,,,Sat Oct 12 10:05:20 UTC 2013,,,,,,,Patch Available,,,,"0|i1otpz:",353082,,,,,,,,,,,,,,,,,,,,"10/Oct/13 04:55;tcunning;Patch with fix;;;","10/Oct/13 04:59;tcunning;Reproducible test case;;;","10/Oct/13 05:00;tcunning;To run the test: 

mvn clean install
mvn exec:java;;;","12/Oct/13 10:05;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,
FacebookConsumer does not decode the Reading since field correctly,CAMEL-6847,12673062,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,09/Oct/13 17:37,25/Oct/13 12:39,14/Jul/23 05:49,25/Oct/13 12:39,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,The FacebookConsumer class takes the string output of Reading class and tries to retrieve the since field value. It should use java.net.Decoder to correctly decode the URL encoded value. ,,davsclaus,dhirajsb,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Oct/13 19:04;dhirajsb;patchCAMEL-6847-2.txt;https://issues.apache.org/jira/secure/attachment/12608056/patchCAMEL-6847-2.txt","09/Oct/13 17:44;dhirajsb;patchCAMEL-6847.txt;https://issues.apache.org/jira/secure/attachment/12607605/patchCAMEL-6847.txt",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352685,,,Fri Oct 25 12:39:28 UTC 2013,,,,,,,,,,,"0|i1ot1r:",352972,,,,,,,,,,,,,,,,,,,,"09/Oct/13 17:44;dhirajsb;Attached patch for CAMEL-6847;;;","10/Oct/13 08:19;njiang;Applied the patch into master and camel-2.12.x branches.;;;","11/Oct/13 18:56;dhirajsb;The reading since and until fields should be able to use all the arbitrary formats supported by the PHP strtotime function, instead of making the Facebook component standardize on ISO8601 format. 
Also, the since date parse is still broken when its the only reading property specified in the endpoint. ;;;","11/Oct/13 19:04;dhirajsb;Patch fixes the 'since' parse bug for the situation when it occurs as the last reading field in the endpoint url. 
Also removes the restriction on the since and until date formats to be ISO8601. The since and until values are passed as is to Facebook REST calls, which will convert and validate on server side at call time. 
This could result in a facebook4j.FacebookException being raised for an invalid date format, which will be propagated to the Camel error handler. ;;;","21/Oct/13 13:36;davsclaus;Willem, did you get the latest patch committed? If so can this ticket be resolved?;;;","25/Oct/13 12:39;njiang;Applied the second patch into master and camel-2.12.x branches with thanks to Dhiraj.;;;",,,,,,,,,,,,,,,,,,
Using recipient list to a route that has no error handler should allow caller route to trigger its error handler,CAMEL-6845,12673018,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/13 13:47,10/Oct/13 08:28,14/Jul/23 05:49,10/Oct/13 08:28,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"This route
{code}
                errorHandler(deadLetterChannel(""mock:dead""));

                from(""direct:start"")
                    .recipientList().constant(""direct:foo"")
                    .to(""mock:result"");

                from(""direct:foo"")
                    .errorHandler(noErrorHandler())
                    .to(""mock:foo"")
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            throw new IllegalArgumentException(""Forced"");
                        }
                    });
{code}

So in the 2nd route we disabled error handling by using the no error handler. Instead we would like the error handler from the caller route (the 1st) which will fallback and use the context scoped dead letter channel to handle the exception.

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352641,,,2013-10-09 13:47:42.0,,,,,,,,,,,"0|i1osrz:",352928,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Hazelcast Map Support Uses Wrong Verb ""Envict""",CAMEL-6843,12672954,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jwcarman,jwcarman,jwcarman,09/Oct/13 04:29,10/Oct/13 13:42,14/Jul/23 05:49,10/Oct/13 13:42,,,,,,,,,,,,,camel-hazelcast,,,,,,0,,,,,,,"The event type is ""evicted"" not ""envicted.""  Our code has a constant called HazelcastConstants.ENVICTED which has the value ""envicted.""  We need to fix this, but it will cause a compatibility break.  We could introduce the correct values and support both, with the incorrect ones being deprecated.  Would that work?",,jwcarman,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352577,,,Thu Oct 10 13:42:00 UTC 2013,,,,,,,,,,,"0|i1osdr:",352864,,,,,,,,,,,,,,,,,,,,"10/Oct/13 11:47;muellerc;I propose to @deprecate the existing one and update it to use the correct spelling. And of course add a new one with the correct spelling.

{noformat}
@deprecate
HazelcastConstants.ENVICTED = ""evicted""
HazelcastConstants.EVICTED = ""evicted""
{noformat}

And add a remark to the section ""Changes that may affect end users"" in [the release notes|http://camel.apache.org/camel-2130-release.html];;;","10/Oct/13 13:42;jwcarman;Now using new constant EVICTED.;;;",,,,,,,,,,,,,,,,,,,,,,
Facebook endpoint incorrectly sets the nameStyle field to GET_AND_SEARCH even when no search* candidate methods are found,CAMEL-6839,12672848,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,08/Oct/13 17:06,10/Oct/13 08:20,14/Jul/23 05:49,10/Oct/13 08:20,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,Class FacebookEndpoint needs to look at the candidate method list size to determine whether it found get* only or get* and search* candidate methods. ,,dhirajsb,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Oct/13 17:08;dhirajsb;patchCAMEL-6839.txt;https://issues.apache.org/jira/secure/attachment/12607383/patchCAMEL-6839.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352471,,,Thu Oct 10 08:20:32 UTC 2013,,,,,,,Patch Available,,,,"0|i1orq7:",352758,,,,,,,,,,,,,,,,,,,,"08/Oct/13 17:08;dhirajsb;Patch attached for CAMEL-6839;;;","10/Oct/13 08:20;njiang;Applied the patch into master and camel-2.12.x with thanks to Dhiraj.;;;",,,,,,,,,,,,,,,,,,,,,,
Atomic Number Producer Uses Wrong Name,CAMEL-6833,12672732,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jwcarman,jwcarman,jwcarman,08/Oct/13 01:21,10/Oct/13 13:20,14/Jul/23 05:49,08/Oct/13 17:43,,,,,,,,,2.13.0,,,,camel-hazelcast,,,,,,0,,,,,,,"When redesigning the tests to use mock objects, I noticed that the atomic number producer actually uses the incorrect atomic number name.  If you try to update an atomic number named ""foo"", it actually updates one named ""ue:foo"".  This is because it uses the wrong constant (the one for instances) when it picks apart the URI. ",,jwcarman,,,,,,,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352355,,,2013-10-08 01:21:08.0,,,,,,,,,,,"0|i1or0n:",352643,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-qaurtz - Memory leak - when an exception is thrown during the scheduling phase,CAMEL-6832,12672568,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nurali.techie@yahoo.com,nurali.techie@yahoo.com,07/Oct/13 02:58,12/Oct/13 10:19,14/Jul/23 05:49,12/Oct/13 10:18,2.10.4,2.11.0,2.11.2,,,,,,2.11.3,2.12.2,2.13.0,,camel-quartz,,,,,,0,quartz,scheduler,,,,,"Hello,

I have observed a memory leak for Quartz worker thread in case an exception is thrown during
the scheduling phase when schedule is set to past time.
I have observed this issue with camel-quart 2.10.4, 2.11.0, 2.11.2 versions.

For ex, assuming today is 4-Oct; If a schedule is provided for yesterday (i.e 3-Oct) then
below sequence happen:

1. Quartz create worker thread for new schedule [generally TEN Threads with name 'DefaultQuartzScheduler']
2. Camel-quartz increment jobCounter for scheduler context [using QuartzComponent.incrementJobCounter()]
3. Camel-quartz tries to create new schedule [using Scheduler.scheduleJob()]
4. scheduleJob() throws SchedulerException with the message - 'Based on configured schedule,
the given trigger will never fire'
5. Camel-quartz does NOT decrement the job counter and jobCounter value remains '1'
6. Later Camel-Quartz stops the route and call QuartzComponent.doStop()
7. In doStop(), Scheduler.shutdown() supposed to be called so that those TEN threads are
removed but to call shutdown() the pre-condition is that the jobCounter should be '0'.  In
this case jobCounter is '1' and Scheduler.shutdown() will NOT be called and those TEN threads
are NOT removed.  This is memory leak.

Please find the stack trace in attachment 'memory_leak_scheduler_stack_trace.log' [with Camel-Quartz 2.11.2 and org.apache.servicemix.bundles.quartz-1.8.6_1
which wrapped Quartz Scheduler as OSGi bundle] when SchedulerException is thrown at step
4 in above sequence.

Thanks,
Nurali",OS - Windows 7 and Unix.  Server – OSGi equinox,davsclaus,nurali.techie@yahoo.com,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Oct/13 03:01;nurali.techie@yahoo.com;memory_leak_scheduler_stack_trace.log;https://issues.apache.org/jira/secure/attachment/12607122/memory_leak_scheduler_stack_trace.log",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,352191,,,Sat Oct 12 10:18:59 UTC 2013,,,,,,,,,,,"0|i1oq07:",352479,,,,,,,,,,,,,,,,,,,,"12/Oct/13 10:18;davsclaus;Thanks for reporting and providing the stacktrace.;;;",,,,,,,,,,,,,,,,,,,,,,,
JettyContentExchange hides the original error,CAMEL-6828,12672348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matihost,matihost,04/Oct/13 14:49,12/Oct/13 10:29,14/Jul/23 05:49,12/Oct/13 10:29,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,"JettyContentExchange:202 hides the original exchange exception.
The original exchange error should be passed as a cause.",,davsclaus,matihost,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,351973,,,Sat Oct 12 10:29:54 UTC 2013,,,,,,,,,,,"0|i1ooo7:",352261,,,,,,,,,,,,,,,,,,,,"12/Oct/13 10:29;davsclaus;Thanks for reporting and point to the bug in the source code.;;;",,,,,,,,,,,,,,,,,,,,,,,
Jetty component should remove httpClientMinThreads & httpClientMinThreads from parameters during endpoint creation,CAMEL-6825,12672323,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,matihost,matihost,04/Oct/13 12:01,07/Oct/13 16:48,14/Jul/23 05:49,07/Oct/13 16:48,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,"Jetty component doesn't remove httpClientMinThreads & httpClientMinThreads from parameters during endpoint creation

JettyHttpComponent:166 adds these parameters to the result URL when specified - but the URL shouldn't contain these parameters.",,matihost,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,351949,,,2013-10-04 12:01:53.0,,,,,,,,,,,"0|i1ooiv:",352237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
STOMP endpoint not configurable via URI options,CAMEL-6823,12672308,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pinback,pinback,04/Oct/13 10:04,12/Oct/13 10:48,14/Jul/23 05:49,12/Oct/13 10:48,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-stomp,,,,,,0,,,,,,,"In contrast to the documentation on the STOMP components wiki page, the endpoint can not be configured via URI options. The endpoint implementation is missing the corresponding attributes.",,davsclaus,pinback,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351934,,,Sat Oct 12 10:48:13 UTC 2013,,,,,,,,,,,"0|i1oofr:",352222,,,,,,,,,,,,,,,,,,,,"12/Oct/13 10:48;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-facebook - Error when calling endpoint with options from header and configuration bean,CAMEL-6822,12672303,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ebondu,ebondu,04/Oct/13 08:51,04/Jan/14 13:35,14/Jul/23 05:49,04/Jan/14 13:35,2.12.1,,,,,,,,2.12.3,2.13.0,,,camel-facebook,,,,,,0,,,,,,,"When the camel-facebook endpoint is called with a set of options from headers and configuration bean, an NPE is throwed.

Here an example route :

<bean id=""facebook"" class=""org.apache.camel.component.facebook.config.FacebookConfiguration"">
  <property name=""oAuthAppId"" value=""**********""/>
  <property name=""oAuthAppSecret"" value=""******************""/>
</bean>
<route id=""consumeFacebookPage"">
         <from uri=""direct:consumeFacebookPage""/>
         <setHeader headerName=""CamelFacebook.query"">
          <simple>SELECT page_id FROM page WHERE name='Apache Camel'</simple>
         </setHeader>
                 
         <to uri=""facebook://executeFQL""/>
</route>",,davsclaus,ebondu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Oct/13 08:53;ebondu;camel.patch;https://issues.apache.org/jira/secure/attachment/12606759/camel.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351929,,,Sat Jan 04 13:35:57 UTC 2014,,,,,,,Patch Available,,,,"0|i1ooen:",352217,,,,,,,,,,,,,,,,,,,,"04/Oct/13 08:53;ebondu;Here the patch.;;;","21/Oct/13 13:45;davsclaus;Do you have the stacktrace when this error happens?

And if its possible to create an unit test that reproduces the issue and passes with the fix, then that would be great;;;","21/Oct/13 18:44;ebondu;This is the stacktrace  :

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: facebook://executeFQL due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:528)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:63)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:192)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:460)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:429)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:159)
	at org.apache.camel.model.ProcessorDefinition.createChildProcessor(ProcessorDefinition.java:178)
	at org.apache.camel.model.FilterDefinition.createFilterProcessor(FilterDefinition.java:72)
	at org.apache.camel.model.FilterDefinition.createProcessor(FilterDefinition.java:66)
	at org.apache.camel.model.FilterDefinition.createProcessor(FilterDefinition.java:34)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:500)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 47 more
Caused by: java.lang.NullPointerException
	at java.lang.String.startsWith(String.java:1421)
	at java.lang.String.startsWith(String.java:1450)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:410)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:424)
	at org.apache.camel.component.facebook.FacebookComponent.copyComponentProperties(FacebookComponent.java:66)
	at org.apache.camel.component.facebook.FacebookComponent.createEndpoint(FacebookComponent.java:56)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:120)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:508)
	... 63 more

I will try to provide you a unit test ASAP.;;;","04/Jan/14 13:35;davsclaus;Thanks for reporting. I spotted the NPE mistake in the facebook component.;;;",,,,,,,,,,,,,,,,,,,,
RabbitMQ Component unable to transfer custom headers,CAMEL-6821,12672298,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mayank.mishra,mayank.mishra,04/Oct/13 07:23,08/Jun/14 12:59,14/Jul/23 05:49,28/Oct/13 11:45,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,"There is no capability to pass in some custom headers through rabbitmq camel component. it seems only well-known headers of AMQP.BasicProperties are supported.
",,ceposta,davidkeen,davsclaus,githubbot,mayank.mishra,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Oct/13 15:26;davidkeen;0001-CAMEL-6821-Add-support-for-custom-RabbitMQ-headers.patch;https://issues.apache.org/jira/secure/attachment/12608521/0001-CAMEL-6821-Add-support-for-custom-RabbitMQ-headers.patch","04/Oct/13 07:33;mayank.mishra;RabbitMQProducer.patch;https://issues.apache.org/jira/secure/attachment/12606748/RabbitMQProducer.patch","04/Oct/13 07:33;mayank.mishra;RabbitMQProducerTest.patch;https://issues.apache.org/jira/secure/attachment/12606749/RabbitMQProducerTest.patch",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351924,,,Sun Jun 08 12:59:19 UTC 2014,,,,,,,,,,,"0|i1oodj:",352212,,,,,,,,,,,,,,,,,,,,"04/Oct/13 07:33;mayank.mishra;Adding Source code change and Unit test case for custom headers support;;;","07/Oct/13 12:04;mayank.mishra;FYI...It's also copying AMQP well known properties in the headers.;;;","11/Oct/13 10:24;davidkeen;I guess we also need to do something on the consumer side to pull out any custom headers into the camel message. I've attached a patch for RabbitMQConsumer and RabbitMQEndpoint which should do this but it seems header values may need to be filtered or serialized somehow as com.rabbitmq.client.impl.Frame#fieldValueSize throws an IllegalArgumentException if it receives an object value that is not one of its expected types.;;;","15/Oct/13 10:50;davidkeen;I have added some filtering of headers in the producer so incompatible headers are not set. I have created a fork on GitHub here https://github.com/davidkeen/camel/tree/rabbitmq-headers. I will update my patchfile to include these changes.;;;","15/Oct/13 14:55;davidkeen;Added unit tests.;;;","15/Oct/13 15:26;davidkeen;Combine git patches into single file.;;;","28/Oct/13 11:45;davsclaus;Thanks for the patch.;;;","08/Jun/14 12:59;githubbot;Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/50
;;;",,,,,,,,,,,,,,,,
Netty - SSLContext should be initialized once and reused - Also race condition in current code,CAMEL-6818,12671943,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Oct/13 14:33,02/Oct/13 14:44,14/Jul/23 05:49,02/Oct/13 14:44,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-netty,,,,,,0,,,,,,,"The SSLContext is created per pipeline which is not as efficient as creating it once.

Also there is a race condition in the current code that can lead to:
{code}
14:04:27,328 | WARN | ttyServerTCPBoss | netty | 246 - org.jboss.netty - 3.6.6.Final | [org.jboss.netty.channel.socket.nio.AbstractNioSelector] Failed to initialize an accepted socket.
java.lang.IllegalStateException: SSLContextImpl is not initialized
at sun.security.ssl.SSLContextImpl.engineCreateSSLEngine(SSLContextImpl.java:197)[:1.7.0_21]
at javax.net.ssl.SSLContext.createSSLEngine(SSLContext.java:330)
at org.apache.camel.component.netty.ssl.SSLEngineFactory.createServerSSLEngine(SSLEngineFactory.java:104)
at org.apache.camel.component.netty.http.HttpServerPipelineFactory.configureServerSSLOnDemand(HttpServerPipelineFactory.java:153)
at org.apache.camel.component.netty.http.HttpServerPipelineFactory.getPipeline(HttpServerPipelineFactory.java:77)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351569,,,2013-10-02 14:33:45.0,,,,,,,,,,,"0|i1om73:",351858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple NPE during unmarshal with PGPDateFormat,CAMEL-6817,12671930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,milan.baran,milan.baran,02/Oct/13 14:12,03/Oct/13 10:19,14/Jul/23 05:49,03/Oct/13 10:19,2.12.1,,,,,,,,2.12.2,2.13.0,,, camel-crypto,,,,,,0,,,,,,,"Current behavior:

1. Try to unmarshal (PGPDateFormat) not encrypted file, just plain text.
2. You will get NPE exception.

1. Try to unmarshal (PGPDateFormat) encrypted file with different keys
2. You will get NPE exception.

Expected behavior:

1. Try to unmarshal (PGPDateFormat) not encrypted file, just plain text.
2. You will get PGPException says ""input is not encrypted"" 

1. Try to unmarshal (PGPDateFormat) encrypted file with different keys
2. You will get PGPException says ""wrong keys used""","Win 7, 64bit, Oracle JDK 1.6, bouncycastle.",davsclaus,milan.baran,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Oct/13 14:23;milan.baran;CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch;https://issues.apache.org/jira/secure/attachment/12606363/CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch","02/Oct/13 14:23;milan.baran;CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch.asc;https://issues.apache.org/jira/secure/attachment/12606364/CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch.asc",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351556,,,Thu Oct 03 10:19:27 UTC 2013,,,,,,,,,,,"0|i1om47:",351845,,,,,,,,,,,,,,,,,,,,"02/Oct/13 14:23;milan.baran;Well, I prepared fix for my purposes. All tests passes. So, if there is no other problem you can include the patch to next release.;;;","03/Oct/13 10:19;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,
Bean Component/BeanBinding: Body as InputStream parametr (specified as ${body} in route),CAMEL-6810,12671717,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rkraus,rkraus,02/Oct/13 06:35,04/Oct/13 09:10,14/Jul/23 05:49,04/Oct/13 09:10,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"I discovered following problem (which was already shortly discussed in [Camel user forum|http://camel.465427.n5.nabble.com/Bean-component-Bean-Binding-Body-as-InputStream-parametr-specified-as-body-in-route-td5740656.ht]).

I have a ""streamBodyBindingBean"" bean with this method:
{code}
public void bodyBinding(InputStream in) throws IOException {
  int byteCount = 0;
  int c;
  while((c = in.read()) != -1)
    byteCount++;
  System.out.println(""ByteCount: "" + byteCount);
}
{code}

And this route:
{code}
<route id="""" trace=""true"">
  <from uri=""direct://body-input-stream-binding-in""/>
  <to uri=""bean://streamBodyBindingBean?method=bodyBinding(${body})""/>
  <!-- to uri=""bean://isBodyBindingBean""/--> 
  <to uri=""mock://body-input-stream-binding-out""/>
</route>
{code}

And here is a way how I send exchange from test stuff:
{code}
ByteArrayInputStream in = new ByteArrayInputStream(
  ""Small body, which I want to bind as InputStream"".getBytes(""UTF-8"")
);
Exchange exchange = createExchangeWithBody(in);
exchange.setPattern(ExchangePattern.InOnly);
template.send(""direct://body-input-stream-binding-in"", exchange); 
{code}

In this case I got a sysout message: {{ByteCount: 0}}, but when I used the commented variant in the route, I got expected result: {{ByteCount: 47""}}.

When I change the route and use bean component 2 times (both variant of bean method invocation), then I got:

{noformat}
2013-10-01 12:26:37.259 DEBUG {main} [SendProcessor] >>>> Endpoint[bean://isBodyBindingBean?method=bodyBinding%28%24%7Bbody%7D%29] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
ByteCount: 0
2013-10-01 12:26:37.289 DEBUG {main} [SendProcessor] >>>> Endpoint[bean://isBodyBindingBean] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
ByteCount: 47
2013-10-01 12:26:37.307 DEBUG {main} [SendProcessor] >>>> Endpoint[mock://body-input-stream-binding-out] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]] 
{noformat}

The strange for me is {{MethodInfo}} class, line 526:
{code}
// the parameter value was not already valid, but since the simple language have evaluated the expression
// which may change the parameterValue, so we have to check it again to see if its now valid
exp = exchange.getContext().getTypeConverter().convertTo(String.class, parameterValue);
// String values from the simple language is always valid
if (!valid) {
  ...
}
{code}

The line after comment caused that my ""InputStream"" is transformed into String, what can be a problem in case of ""big"" InputStream.

I know that I can use only second variant of ""bean method invocation"", which is enough for my need, but I only want to point out to this situation.",,davsclaus,rkraus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351427,,,Fri Oct 04 09:10:39 UTC 2013,,,,,,,,,,,"0|i1olbj:",351716,,,,,,,,,,,,,,,,,,,,"04/Oct/13 09:10;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,
BeanInfo prioritizes single non-annotated method over multiple methods with method annotations,CAMEL-6808,12671580,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,larryhan,larryhan,01/Oct/13 14:12,03/Oct/13 10:54,14/Jul/23 05:49,03/Oct/13 10:54,2.11.0,2.12.0,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"If a class has multiple methods annotated with custom camel annotations, and 1 non-annotated method, camel will invoke the non-annotated method instead of picking the correct custom annotated method.",,davsclaus,larryhan,,,,,,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,,,,,,"01/Oct/13 14:14;larryhan;CAMEL-6808__Fix_incorrect_behavior_in_BeanInfo_for_single_non-annotated_methods.patch;https://issues.apache.org/jira/secure/attachment/12606107/CAMEL-6808__Fix_incorrect_behavior_in_BeanInfo_for_single_non-annotated_methods.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,351290,,,Thu Oct 03 10:29:17 UTC 2013,,,,,,,Patch Available,,,,"0|i1okhr:",351582,,,,,,,,,,,,,,,,,,,,"01/Oct/13 14:15;larryhan;I've attached a patch for this issue. Could someone direct me to the test that I need to change as well?

Thanks;;;","03/Oct/13 10:29;davsclaus;Thanks for the patch. I created an unit test to reproduce this, and indeed there is a bug.;;;",,,,,,,,,,,,,,,,,,,,,,
Message headers with uppercase letters not matched by jxpath,CAMEL-6807,12671565,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pjanata,pjanata,01/Oct/13 12:24,30/Nov/14 16:53,14/Jul/23 05:49,30/Nov/14 16:53,2.10.4,,,,,,,,2.15.0,,,,,,,,,,0,,,,,,,"{{DefaultMessage}} uses {{CaseInsensitiveMap}} for storing headers. If header name contains uppercase characters, then jxpath expression with correct case will not match.

E.g. header named _fooBarBaz_ on ""in"" message will not be matched by following jxpath expression:
{code:xml}
<jxpath>/in/headers/fooBarBaz = something</jxpath>
{code}
JXPath evaluates nodes that match the fooBarBaz name and uses the keySet() to obtain candidates. The problem is that CaseInsensitiveMap.keySet() returns the converted internal keys, instead of the original keys.

*Is it possible to override the keySet() method of CaseInsensitiveMap to return the original keys?* Then a user will not be unpleasantly surprised that his key is not in the key set.

{code:title=CaseInsensitiveMap.java|borderStyle=solid}
@Override
public Set<String> keySet()
{
    return originalKeys.values();
}
{code}


There are two workarounds possible but neither of them is nice in my eyes.
# use only lowercase header names
# register custom DynamicPropertyHandler in JXPath

Ad 1. this probably wasn't the intention. User must rely on implementation of private method {{CaseInsensitiveMap.assembleKey()}}. This then defeats the purpose of case insensitiveness.

Ad 2. custom property handler must be registered via {{JXPathIntrospector.registerDynamicClass()}} ""in the start"", e.g. before anybody calls {{JXPathIntrospector.getBeanInfo()}}. In our projects it was enough to declare an extra eagerly-instantiated singleton Spring bean.
{code:xml}
<bean class=""CaseInsensitiveMapPropertyHandler""
		init-method=""init""
		autowire-candidate=""false""
		lazy-init=""false"" />
{code}",JXPath used as Expression language,davsclaus,pjanata,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8095,"01/Oct/13 12:29;pjanata;CaseInsensitiveMapPropertyHandler.java;https://issues.apache.org/jira/secure/attachment/12606092/CaseInsensitiveMapPropertyHandler.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351275,,,Sun Nov 30 16:53:03 UTC 2014,,,,,,,Patch Available,,,,"0|i1okef:",351567,,,,,,,,,,,,,,,,,,,,"03/Oct/13 10:30;davsclaus;Thanks for reporting. Do you mind working on an unit test as well?;;;","03/Oct/13 10:33;davsclaus;We should work on a better solution so you do not need to do anything special, 
so having an unit test would be nice. ;;;","30/Nov/14 16:53;davsclaus;Got a solution for #1;;;",,,,,,,,,,,,,,,,,,,,,
camel-facebook - Problem with jsonStoreEnabled option,CAMEL-6804,12671515,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/13 06:49,01/Oct/13 06:58,14/Jul/23 05:49,01/Oct/13 06:53,2.12.0,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,option jsonStoreEnabled=true doesn't enable to call DataObjectFactory.getRawJSON,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351225,,,2013-10-01 06:49:11.0,,,,,,,,,,,"0|i1ok3b:",351517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using stopOnException in splitter should not copy result back as we should preserve original exchange,CAMEL-6802,12671342,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Sep/13 10:38,30/Sep/13 11:33,14/Jul/23 05:49,30/Sep/13 11:09,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,eip,,,,,0,,,,,,,"If you use stopOnException on splitter then when an exception occurs then changes to eg exchange.properties should not override the input exchange, as that would not be expected.

",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351048,,,Mon Sep 30 11:33:19 UTC 2013,,,,,,,,,,,"0|i1oizz:",351340,,,,,,,,,,,,,,,,,,,,"30/Sep/13 11:33;raulvk;Hey Claus,

For me, this is not a black or white situation. When an exception occurs with stopOnException, it understandable that the user may require the (partial) aggregation result as an output + the appropriate Exception set on the exchange.

That way, they get the best of both worlds: (1) knowing that an Exception happened (and triggering any error handlers as a consequence) and (2) the output of the aggregation so far.

Perhaps we could introduce an option 'exchangeOnException' taking the values 'original' and 'aggregated_partial'?

Regards,
Raúl.;;;",,,,,,,,,,,,,,,,,,,,,,,
Bean language - Having dots in parameters cause bean id lookup problem,CAMEL-6800,12671313,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Sep/13 07:49,30/Sep/13 08:46,14/Jul/23 05:49,30/Sep/13 08:46,2.11.0,2.12.0,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"Related to CAMEL-6395

The following example would not work
{code}
                from(""direct:start"")
                    .setHeader(""goto"").simple(""${bean:myBean.whereToMate({{myApp}}, ${header.id})}"")
                    .to(""mock:result"");
{code}

Where as if we use ?method=whereToMate it would work.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,351019,,,2013-09-30 07:49:33.0,,,,,,,,,,,"0|i1oitj:",351311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz2 - The test SpringQuartzConsumerTwoAppsClusteredFailoverTest fails and the same test passes well by camel-quartz,CAMEL-6797,12671243,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,29/Sep/13 06:36,30/Sep/13 09:43,14/Jul/23 05:49,30/Sep/13 09:43,2.12.0,,,,,,,,2.12.2,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,"There seems to be a divergence in the behaviour of the {{camel-quartz}} and {{camel-quartz2}} components regarding [this test|https://github.com/apache/camel/blob/master/components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzConsumerTwoAppsClusteredFailoverTest.java].",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350949,,,Sun Sep 29 06:42:19 UTC 2013,,,,,,,,,,,"0|i1oidr:",351240,,,,,,,,,,,,,,,,,,,,"29/Sep/13 06:42;bvahdat;On the other hand the other clustering test [SpringQuartzTwoAppsClusteredFailoverTest|https://github.com/apache/camel/blob/master/components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringQuartzTwoAppsClusteredFailoverTest.java] works well for both {{camel-quartz}} as well as {{camel-quartz2}} components. However that test makes use of {{CronScheduledRoutePolicy}} instead of {{QuartzConsumer}} to trigger the routes.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-xmlsecurity - Some options is not exposed as getter/setters,CAMEL-6796,12671083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/13 11:00,29/Sep/13 07:39,14/Jul/23 05:49,28/Sep/13 11:46,2.12.0,,,,,,,,2.12.2,2.13.0,,,,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/contentObjectId-in-XML-Security-camel-xmlsecurity-tp5740265p5740348.html

Some options has not been exposed as getter/setters so they can be fully configured.",,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350912,,,Sun Sep 29 07:39:06 UTC 2013,,,,,,,,,,,"0|i1oi5r:",351203,,,,,,,,,,,,,,,,,,,,"29/Sep/13 07:39;forsthofer;Hello,

I do not think that this is a bug. The objectId of the Element 'Object' is generated automatically for the enveloping XML Signature case. And there is a Reference element gnerated with an  URI whose value is ""#<generated object ID>"" The header 'CamelXmlSignatureContentReferenceUri' can be used to overwrite the reference URI in order to reference only a part of the message and not the total message (as the generated object ID does. 

Regards Franz  ;;;",,,,,,,,,,,,,,,,,,,,,,,
"Camel 2.12 shows unexpected warning ""Cannot determine current route from Exchange""",CAMEL-6793,12670971,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michaelf33,michaelf33,27/Sep/13 17:00,03/Dec/13 19:59,14/Jul/23 05:49,17/Oct/13 14:05,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-core,eip,,,,,0,,,,,,,"Since upgrading from 2.10.6 to 2.12.1 Camel logs the following warning:
{code}
18:47:10,278 [WARN ] DefaultErrorHandler       - Cannot determine current route from Exchange with id: ID-xyz-0-12, will fallback and use first error handler.
{code}

It looks like the ""splitter"" is causing the problem. If the ""<split>"" is disabled in the route, then the warning disappears!

Here's the example route for reproduction:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<!-- custom exceptions -->
	<bean id=""demoIllegalStateException"" class=""java.lang.IllegalStateException"">
		<constructor-arg index=""0"" value=""Forced Exception"" type=""java.lang.String""/>
	</bean>

	<!-- this is the camel route which proxy the web service and forward it to the real web service -->
	<camelContext id=""camelCtx"" xmlns=""http://camel.apache.org/schema/spring"" errorHandlerRef=""defaultErrorHandler"" trace=""false""
	              messageHistory=""true"">

		<errorHandler id=""defaultErrorHandler"" type=""DefaultErrorHandler"">
			<redeliveryPolicy logExhausted=""true""/>
		</errorHandler>

		<errorHandler id=""noErrorHandler"" type=""NoErrorHandler""/>

		<endpoint id=""myTimer"" uri=""timer://myTimer?period=5s""/>
		<route id=""Start"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""900"">
			<from uri=""ref:myTimer""/>
			<setBody>
				<simple>Some Test Message</simple>
			</setBody>
			<to uri=""direct:Process""/>
		</route>

		<route id=""Process"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""800"">
			<from uri=""direct:Process""/>

			<onException>
				<exception>java.lang.ArithmeticException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<!-- now delegate the processing of the body with all the selected transfers -->
			<to uri=""direct:Process2""/>
		</route>


		<route id=""Process2"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""30"">
			<from uri=""direct:Process2""/>

			<onException>
				<exception>java.lang.IllegalStateException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<split stopOnException=""true"" streaming=""false"" parallelProcessing=""false"">
				<simple>${body}</simple>

				<throwException ref=""demoIllegalStateException""/>
			</split>
		</route>

		<route id=""HandleException"" autoStartup=""true"" trace=""false""
		       errorHandlerRef=""noErrorHandler""
		       startupOrder=""13"">
			<from uri=""direct:HandleException""/>

			<log loggingLevel=""INFO"" message=""[${property.LogPrefix}] EXCEPTION message: ${exception}""/>
			<log loggingLevel=""DEBUG"" message=""[${property.LogPrefix}] EXCEPTION stacktrace: ${exception.stacktrace}""/>
			<stop/>
		</route>
	</camelContext>
</beans>
{code}

Is it a bug or do I have to configure something new? 2.10.6 and previous versions did not show this kind of behavior (meaning: did not log this warning)!",Windows,davsclaus,Luckless,michaelf33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350800,,,Tue Dec 03 19:59:23 UTC 2013,,,,,,,,,,,"0|i1ohgv:",351091,,,,,,,,,,,,,,,,,,,,"17/Oct/13 11:53;davsclaus;Thanks for reporting. I have reproduced the issue and have a pending fix.;;;","03/Dec/13 19:59;Luckless;I just wanted to confirm that I am having the same issue;;;",,,,,,,,,,,,,,,,,,,,,,
Resuming a bundle that uses blueprint+camel fails if it was suspended externally,CAMEL-6790,12670840,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eugene.tarasov,eugene.tarasov,26/Sep/13 21:51,07/Oct/13 10:45,14/Jul/23 05:49,07/Oct/13 10:45,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-blueprint,,,,,,0,,,,,,,"There is a problem in this scenario:

# Karaf is running.
# Start some bundle that uses blueprint+camel. For convenience will call it <testbundle>.
# Cause this bundle to be suspended by container, by refreshing a bundle that provides some namespace used by <testbundle> bundle. For example, by refreshing camel-cxf (assuming that <testbundle> uses also blueprint/cxf namespace). In logs one can see something like this:
bq. Bundle <testbundle> is waiting for namespace handlers [http://camel.apache.org/schema/blueprint/cxf]

In this case after the missing namespace becomes available again the bundle will fail to resume with exception like:
bq. Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelContext'.

The problem is in CamelNamespaceHandler class which is a part of camel-blueprint. When it parses incoming dom it changes namespace of all elements from http://camel.apache.org/schema/blueprint to http://camel.apache.org/schema/spring. So when a bundle that uses blueprint+camel needs to validate its blueprint context again (like if it was waiting for some namespace) the new validation will fail.
",,davsclaus,eugene.tarasov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Oct/13 21:37;eugene.tarasov;CamelContextIdSetting.patch;https://issues.apache.org/jira/secure/attachment/12607108/CamelContextIdSetting.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350669,,,Mon Oct 07 10:45:43 UTC 2013,,,,,,,,,,,"0|i1ogo7:",350962,,,,,,,,,,,,,,,,,,,,"28/Sep/13 12:59;davsclaus;Thanks for reporting.;;;","06/Oct/13 21:37;eugene.tarasov;Hi Claus. Thanks for fixing the problem! Trying the fix I found a further problem - when camelContext tag is being parsed, its id is being set to some unique value if it wasnt set by user. For setting the id CamelNamespaceHandler calls non-namespace-aware method ""setAttribute"". Its necessary to change it to setAttributeNS (I added a patch that does it). With this change the whole ""refresh"" problem becomes solved.;;;","07/Oct/13 10:45;davsclaus;Thanks I did the same change in camel-spring as its also in use with spring-dm for OSGi;;;",,,,,,,,,,,,,,,,,,,,,
Missing packages from camel-quartz2.jar,CAMEL-6789,12670674,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,abaldoni,abaldoni,26/Sep/13 09:57,04/Aug/14 07:43,14/Jul/23 05:49,26/Sep/13 14:49,2.12.0,2.12.1,,,,,,,2.12.2,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,"The jar camel-quartz2.jar from both maven and the Camel binary zip available on camel.apache.org is missing the following packages:

org.apache.camel.pollconsumer.quartz2
org.apache.camel.routepolicy.quartz2

Both are present in the source code.",,abaldoni,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350503,,,Thu Sep 26 14:49:40 UTC 2013,,,,,,,,,,,"0|i1ofnj:",350796,,,,,,,,,,,,,,,,,,,,"26/Sep/13 14:49;bvahdat;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
IntrospectionSupport.setProperty ClassCastException if you have overloaded methods,CAMEL-6781,12670256,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,24/Sep/13 11:51,29/Sep/13 08:16,14/Jul/23 05:49,29/Sep/13 08:16,2.11.1,2.12.0,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"If you use DefaultComponent.setProperties(config, parameters) with a config object having overloaded methods you can get the following Exception:

org.apache.camel.NoSuchBeanException: Found bean: myExpression in JNDI Context: javax.naming.InitialContext@7f597bc4 of type: org.apache.camel.builder.ExpressionBuilder$31 expected type was: class java.lang.String
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:60)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:121)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:499)
	at org.apache.camel.util.EndpointHelper.setReferenceProperties(EndpointHelper.java:271)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:263)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest$MyComponent.createEndpoint(DefaultComponentReferencePropertiesTest.java:94)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:120)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest.testCallExpressionSetter(DefaultComponentReferencePropertiesTest.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.ClassCastException: Cannot cast org.apache.camel.builder.ExpressionBuilder$31 to java.lang.String
	at java.lang.Class.cast(Class.java:3084)
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:56)
	... 28 more

The exception does not occur always it dpends on the order of the methods with the same name. In IntrospectionSupport.setProperty you find
{code}
 setters = findSetterMethods(clazz, name, value, allowBuilderPattern);
...
  Class<?> parameterType = setter.getParameterTypes()[0];
            Object ref = value;
            // try and lookup the reference based on the method
            if (context != null && refName != null && ref == null) {
                ref = CamelContextHelper.lookup(context, refName.replaceAll(""#"", """"), parameterType);
{code}

If by chance the first setter method has a paramterType which fits to the referenced bean then you will not get the exception. But if the first setter method has a parameterType which does not fit to the referenced bean then you will get the exception.
",,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Sep/13 11:52;forsthofer;0001-ClassCastException-in-setProperties.patch;https://issues.apache.org/jira/secure/attachment/12604782/0001-ClassCastException-in-setProperties.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,350085,,,Sun Sep 29 08:16:07 UTC 2013,,,,,,,Patch Available,,,,"0|i1od33:",350379,,,,,,,,,,,,,,,,,,,,"29/Sep/13 08:16;davsclaus;Thanks for the patch. I polished it slightly.;;;",,,,,,,,,,,,,,,,,,,,,,,
StaxConverter: encoding problems for XMLEventReader and XMLStreamReader,CAMEL-6779,12669998,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,23/Sep/13 08:15,01/Oct/13 09:39,14/Jul/23 05:49,01/Oct/13 09:39,2.11.1,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"StaxConverter creates XMLEventReader and XMLStreamReader always with a specified encoding. However, the encoding of the data the readers should read is not always known. Therefore exceptions occur.

The solution is easy: The encoding should not be set so that the readers can determine the encoding.",,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Sep/13 09:17;forsthofer;0001-StaxConverter-encoding-problem.patch;https://issues.apache.org/jira/secure/attachment/12604545/0001-StaxConverter-encoding-problem.patch","23/Sep/13 08:16;forsthofer;0001-StaxConverter-encoding-problem.patch;https://issues.apache.org/jira/secure/attachment/12604536/0001-StaxConverter-encoding-problem.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349828,,,Tue Oct 01 09:39:01 UTC 2013,,,,,,,Patch Available,,,,"0|i1obiv:",350126,,,,,,,,,,,,,,,,,,,,"23/Sep/13 08:21;davsclaus;Thanks for the patch. Can you use \uNNNN for the german chars, as the source code should use ascii chars.;;;","23/Sep/13 08:33;forsthofer;Yes I will do that.;;;","23/Sep/13 09:18;forsthofer;Hi Claus,

the latest version of the patch does now contain \u00E4\u00F6\u00FC.

Regards Franz;;;","01/Oct/13 09:39;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,
Cannot install feature camel-spring-redis,CAMEL-6778,12669930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,22/Sep/13 20:10,22/Sep/13 20:41,14/Jul/23 05:49,22/Sep/13 20:41,2.11.2,,,,,,,,2.11.3,,,,karaf,,,,,,0,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.2
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.2/xml/features
karaf@root> features:install camel-spring-redis
Error executing command: Could not start bundle mvn:org.springframework/spring-context/3.1.4.RELEASE in feature(s) spring-3.1.4.RELEASE, camel-spring-redis-2.11.2: Unresolved constraint in bundle org.springframework.context [70]: Unable to resolve 70.0: missing requirement [70.0] osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.1.4)(!(version>=3.1.5)))
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349764,,,Sun Sep 22 20:41:25 UTC 2013,,,,,,,,,,,"0|i1ob4n:",350062,,,,,,,,,,,,,,,,,,,,"22/Sep/13 20:41;muellerc;A workaround is installing all features/bundles except mvn:org.springframework/spring-context/3.1.4.RELEASE.;;;",,,,,,,,,,,,,,,,,,,,,,,
Karaf and servlet 2.5/3.0 due recent jetty upgrade causes karaf problems!,CAMEL-6774,12669802,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,bvahdat,davsclaus,davsclaus,21/Sep/13 10:03,23/Oct/13 20:48,14/Jul/23 05:49,23/Oct/13 20:48,2.13.0,,,,,,,,2.13.0,,,,karaf,,,,,,0,,,,,,,"Running tests in tests/camel-itest-karaf fails with features that uses servlet 2.5 api with Karaf 2.3.3.

{code}
test:org.apache.camel.itest.karaf.CamelJettyTest.test:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.3/tar.gz}(org.apache.camel.itest.karaf.CamelJettyTest)  Time elapsed: 10.706 sec  <<< FAILURE!
java.lang.AssertionError: Cannot get component with name: jetty
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.junit.Assert.assertNotNull(Assert.java:526)
	at org.apache.camel.itest.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:64)
	at org.apache.camel.itest.karaf.CamelJettyTest.test(CamelJettyTest.java:32)
{code}

I suspect its the recent jetty 8.x and servlet 3 upgrade that is causing problems.",,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349730,,,Wed Oct 23 20:47:57 UTC 2013,,,,,,,,,,,"0|i1oax3:",350028,,,,,,,,,,,,,,,,,,,,"12/Oct/13 09:36;davsclaus;These tests fails

Failed tests:
  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelHttp4Test.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http4
  CamelHttpTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http
  CamelJettyTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: jetty
  CamelSalesforceTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: salesforce
  CamelServletTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: servlet
  CamelStompTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: stomp
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket;;;","23/Oct/13 15:29;davsclaus;With [~bvahdat] recent fixes we are down to 2 erros

  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket;;;","23/Oct/13 18:47;bvahdat;Yeah I've got those two remaining tests fixed as well on my workspace. Running a full build right now to make sure everything is fine.

Also [this CXF test being excluded inside the POM of {{camel-itest-karaf}}|https://github.com/apache/camel/blob/master/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCxfTest.java] works again, so why I will re-enable it again.
;;;","23/Oct/13 20:47;bvahdat;O.K. I managed to fix those Karaf tests.

Just realized that there're other failing tests by the {{camel-itest-osgi}} module with or without of the fix for this ticket. Are we already aware of this? Is there any ticket around for this?

These are the ones failing for me but I didn't look into them:
{code}
BeanValidatorTest.validateShouldSuccessWithExpliciteDefaultGroup:47 » Validation
BeanValidatorTest.testBeanValidatorRoute:36 » Validation Unable to create a Co...
CamelBlueprint4Test.testRouteWithXSLT:42->AbstractIntegrationTest.getOsgiService:87 » Runtime
XsltBlueprintRouteTest>CamelTestSupport.setUp:218->doPostSetup:68->AbstractIntegrationTest.getOsgiService:87 » Runtime
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorVmTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
GroovyTest.testGroovyLanguage:38 » ClassNotFound groovy.lang.Script
HdfsBlueprintRouteTest.testWriteAndReadString:50->AbstractIntegrationTest.getOsgiService:87 » Runtime
JaxbDataFormatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » JAXB
GroovyScriptOsgiTest.testLanguage:47 » ClassNotFound groovy.lang.Script
{code}
;;;",,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException thrown from inside camel splitter,CAMEL-6771,12669608,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,placebojim,placebojim,20/Sep/13 06:16,29/Sep/13 10:34,14/Jul/23 05:49,29/Sep/13 10:34,2.11.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,"We use camel 2.11.1 running on the oracle 1.7 jvm for linux.

I have a route that looks like this. It reads in files and puts them on a seda queue with 8 concurrent consumers. 
- The SpatialInterpolationPojo reads each file is read and split into two messages X and Y. 
- The MyAggregator uses X and Y together and outputs a combined message A.B 
- The MySplitterPojo splits A.B into two messages A and B 

{code}
from(""file://somefile"") 
    .to(""seda:filteraccept?concurrentConsumers=8""); 

from(""seda:filteraccept?concurrentConsumers=8"") 
    .split() 
    .method(new SpatialInterpolationPojo(), ""split"") 
    .to(""direct:wind-aggregator""); 

from(""direct:wind-aggregator"") 
    .aggregate(packageCorrelationId(), new MyAggregator()) 
    .completionPredicate(header(FIELD_AGGREGATION_COMPLETE).isNotNull()) 
    .split() 
    .method(new MySplitterPojo()) 
    .to(""seda:output""); 
{code}

The MySplitterPojo simply returns List<Message> containing two messages that come from data in the input message body. We copy the body headers to the result messages. 

It is thread safe, it has no state, ie there are no object fields that are modified. 

The method is like this it is edited for clarity/privacy: 
{code}
public class MySplitterPojo {

 public List<Message> splitMessage( 
            @Headers Map<String, Object> headers, 
            @Body CombinedObject body) { 
    
    DefaultMessage a = new DefaultMessage(); 
    a.setBody(body.getA()); 
    a.setHeaders(new HashMap<String, Object>(headers)); 
            
    DefaultMessage b = new DefaultMessage(); 
    b.setBody(body.getB()); 
    b.setHeaders(new HashMap<String, Object>(headers)); 
  
    ArrayList<Message> result = new ArrayList<Message>(2); 
    result.add(a); 
    result.add(b); 
    
    return result; 
 } 
}
{code}
When we run this route we very occasionally get the exception below. You can see that it is entirely within camel, it appears to be trying to copy the map stored under the exchange property Exchange.AGGREGATION_STRATEGY which is a camel internal property key. 

By inspection of the message I can see that Exchange has just come out of the WindVectorAggregator. 

This seems like it must be a camel bug to me. Any ideas? 

{code}
15 Sep 2013 23:06:47,140[Camel (camel-1) thread #21 - seda://filteraccept] WARN AggregateProcessor Error processing aggregated exchange. Exchange[Message: { Trondheim, NO=WindVector [u=-5.92894983291626, v=7.060009002685547], ... }]. Caused by: [java.util.ConcurrentModificationException - null] 
java.util.ConcurrentModificationException 
        at java.util.HashMap$HashIterator.nextEntry(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap.putAllForCreate(Unknown Source) 
        at java.util.HashMap.<init>(Unknown Source) 
        at org.apache.camel.processor.MulticastProcessor.setAggregationStrategyOnExchange(MulticastProcessor.java:1011) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:95) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) 
        at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:495) 
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
        at java.util.concurrent.FutureTask.run(Unknown Source) 
        at org.apache.camel.util.concurrent.SynchronousExecutorService.execute(SynchronousExecutorService.java:62) 
        at java.util.concurrent.AbstractExecutorService.submit(Unknown Source) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onSubmitCompletion(AggregateProcessor.java:487) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:471) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:325) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:229) 
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:151) 
        at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:285) 
        at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:251) 
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:161) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:98) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:294) 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:203) 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:150) 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
        at java.lang.Thread.run(Unknown Source)
{code}","Amazon Linux, oracle jdk 1.7",ceposta,davsclaus,jwcarman,placebojim,,,,,,,,,,,,,,,,,,,,,CAMEL-5704,,,,,,,,,,,,"28/Sep/13 16:25;jwcarman;CAMEL-6771.patch;https://issues.apache.org/jira/secure/attachment/12605662/CAMEL-6771.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349540,,,Sun Sep 29 10:34:01 UTC 2013,,,,,,,,,,,"0|i1o9qv:",349838,,,,,,,,,,,,,,,,,,,,"23/Sep/13 17:35;ceposta;It would be best to recreate this. Can you post an isolated test case that reproduces this?

Or you can take a look at the test I hacked together here and get it to fail w/  your use case:

https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.11.1-issues/src/test/java/posta/Camel6771Test.java

;;;","23/Sep/13 18:05;ceposta;btw... also give a try w/ java 1.6.. curious if that plays a role;;;","23/Sep/13 20:14;ceposta;CAMEL-5704 also demonstrates nested split issues.;;;","28/Sep/13 16:25;jwcarman;This should fix the problem.  I was having trouble creating a unit test that reliably reproduces the issue, so I didn't include it in this patch.  Basically, instead of using a HashMap, I'm using a ConcurrentHashMap to store the MulticastProcessor -> AggreationStrategy map.;;;","29/Sep/13 10:34;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,
camel-resltet - Restlet producer problem after recent upgrade,CAMEL-6770,12669433,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Sep/13 11:10,24/Sep/13 09:55,14/Jul/23 05:49,24/Sep/13 09:55,2.12.1,,,,,,,,2.12.2,,,,camel-restlet,,,,,,0,,,,,,,"After Restlet 2.1.4 upgrade we have a problem with this test in tests/camel-itest

mvn test -Dtest=RestletDomainServiceTest

It looks like the 2nd restlet call takes a long time and doesn't signal back when its done.

Also we should make it easier to configure a connection / request timeout as well.",,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349365,,,Tue Sep 24 09:55:07 UTC 2013,,,,,,,,,,,"0|i1o8nz:",349663,,,,,,,,,,,,,,,,,,,,"21/Sep/13 13:16;bvahdat;This problem arised as a side effect of [this commit|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=99b40bd7]. I just committed a fix for this. If you would now do a {{""mvm clean install -Pfastinstall""}} for {{""camel-restlet""}} then the test should pass again.

As the dependency scope for {{""org.restlet.ext.httpclient""}} was set to {{test}} we didn't have it on the classpath through which the Apache HTTP client would start up to process the HTTP request through ProducerTemplate of this test.;;;","24/Sep/13 09:55;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,
rabbitmq component sends basic ack after channel closed when endpoint is set to autoAck,CAMEL-6767,12669314,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,danrevel@yahoo.com,danrevel@yahoo.com,18/Sep/13 19:21,10/Oct/13 13:29,14/Jul/23 05:49,10/Oct/13 13:29,2.12.0,,,,,,,,2.12.2,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,"Consuming from a rabbitmq endpoint uri that is configured to autoAck generates errors and fails.

Example URI: rabbitmq://localhost:5672/test?autoAck=true&queue=test&autoDelete=false&username=guest&password=guest

Here's the relevant log output:

12:19:03.746  -  osis-ht TRACE o.a.c.c.rabbitmq.RabbitMQConsumer - Acknowleding receipt [delivery_tag=10]
12:19:03.747  -  osis-ht WARN  o.a.c.c.rabbitmq.RabbitMQConsumer - Error processing exchange. Exchange[Message: WTF-9-1379531943713]. Caused by: [com.rabbitmq.client.AlreadyClosedException - clean connection shutdown; reason: Attempt to use closed channel]
com.rabbitmq.client.AlreadyClosedException: clean connection shutdown; reason: Attempt to use closed channel
	at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:907) ~[amqp-client-3.1.3.jar:na]
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.handleDelivery(RabbitMQConsumer.java:126) ~[camel-rabbitmq-2.12.0.jar:2.12.0]
	at com.rabbitmq.client.impl.ConsumerDispatcher$4.run(ConsumerDispatcher.java:121) [amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:76) [amqp-client-3.1.3.jar:na]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_21]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_21]
","Tested on OSX, JDK 1.7",danrevel@yahoo.com,davsclaus,FergusN,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Sep/13 19:22;danrevel@yahoo.com;autoack.patch;https://issues.apache.org/jira/secure/attachment/12603896/autoack.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,349246,,,Thu Oct 10 13:29:22 UTC 2013,,,,,,,Patch Available,,,,"0|i1o7xj:",349544,,,,,,,,,,,,,,,,,,,,"18/Sep/13 19:22;danrevel@yahoo.com;Consumer should not send basicAck on channels that are doing autoAck.;;;","01/Oct/13 09:47;davsclaus;Thanks for the patch.;;;","10/Oct/13 10:56;FergusN;Note that the patch is broken. The logic is wrong. From the comment above from Dan - ""Consumer should not send basicAck on channels that are doing autoAck."" the logic below is missing the not. Needs a ! added to the if.

+                if (consumer.endpoint.isAutoAck()) {
+                    log.trace(""Acknowledging receipt [delivery_tag={}]"", deliveryTag);
+                    channel.basicAck(deliveryTag, false);
+                }
 ;;;","10/Oct/13 12:39;davsclaus;Yeah it seems to make sense to only ack if auto ack is disabled.;;;","10/Oct/13 12:59;FergusN;Pull request - https://github.com/apache/camel/pull/48;;;","10/Oct/13 13:29;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,
HttpConnectionManagerParams doesn't take effect when it is set to HttpComponent,CAMEL-6762,12668955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/13 07:28,17/Sep/13 07:46,14/Jul/23 05:49,17/Sep/13 07:46,2.12.0,,,,,,,,2.12.1,2.13.0,,,camel-http,,,,,,0,,,,,,,"Here is [the user complain|http://camel.465427.n5.nabble.com/Camel-V2-12-HttpConnectionParams-tp5739596.html].
It is caused by the patch of CAMEL-6296 which override the setting of HttpConnectionManagerParams.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6296,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348887,,,Tue Sep 17 07:46:09 UTC 2013,,,,,,,,,,,"0|i1o5pz:",349185,,,,,,,,,,,,,,,,,,,,"17/Sep/13 07:46;njiang;Applied the patch into trunk and camel-2.12.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Null Pointer exception when removing SjmsComponent,CAMEL-6758,12668853,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,matriv,matriv,16/Sep/13 19:27,30/Oct/13 13:35,14/Jul/23 05:49,16/Sep/13 20:11,2.12.0,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-sjms,,,,,,0,,,,,,,"NullPointer exception in SjmsComponent when trying to remove it from camel context:

2013-09-16 11:51:54,201 [WARN] org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:388):org.apache.camel.spring.SpringCamelContext: Error stopping component org.apache.camel.component.sjms.SjmsComponent@232560ec. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.component.sjms.SjmsComponent.doStop(SjmsComponent.java:143)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:116)
	at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:1902)
	at org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:386)",Development,matriv,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348787,,,Mon Sep 16 20:11:22 UTC 2013,,,,,,,,,,,"0|i1o53r:",349085,,,,,,,,,,,,,,,,,,,,"16/Sep/13 20:11;muellerc;Thanks for reporting Marios!;;;",,,,,,,,,,,,,,,,,,,,,,,
scp task does not respect StrictHostKeyChecking option,CAMEL-6757,12668812,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,guy127917,guy127917,16/Sep/13 16:37,17/Sep/13 07:47,14/Jul/23 05:49,17/Sep/13 07:47,2.11.1,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-jsch,,,,,,0,,,,,,,"The SCP component does not currently do anything with the StrictHostKeyChecking option, as documented. The attached patch fixes this (no test case I'm afraid).

",,guy127917,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Sep/13 16:39;guy127917;StrictHostKeyChecking.scp.patch;https://issues.apache.org/jira/secure/attachment/12603363/StrictHostKeyChecking.scp.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,348746,,,Tue Sep 17 07:47:00 UTC 2013,,,,,,,Patch Available,,,,"0|i1o4un:",349044,,,,,,,,,,,,,,,,,,,,"17/Sep/13 03:16;njiang;I just did quick search about the StrictHostKeyChecking
{code}
StrictHostKeyChecking: ask | yes | no
default: ask
  If this property is set to ``yes'', jsch will never automatically add
  host keys to the $HOME/.ssh/known_hosts file, and refuses to connect
  to hosts whose host key has changed.  This property forces the user
  to manually add all new hosts.  If this property is set to ``no'', 
  jsch will automatically add new host keys to the user known hosts
  files.  If this property is set to ``ask'', new  host keys will be
  added to the user known host files only after the user has confirmed 
  that is what they really want to do, and jsch will refuse to connect 
  to hosts whose host key has changed.
{code};;;","17/Sep/13 07:47;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@19acc826,CAMEL-6753,12668700,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,shay_matasaro,shay_matasaro,15/Sep/13 19:10,24/Sep/13 09:59,14/Jul/23 05:49,24/Sep/13 09:59,2.11.0,2.12.0,,,,,,,2.11.2,2.12.2,2.13.0,,camel-cdi,,,,,,0,,,,,,,"when using Camel-CDI with Weld SE 2.0 , the extension fails to load 

org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@19acc826
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.checkNull(ExternalBeanAttributesFactory.java:109)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)
	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:274)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:121)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:261)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:240)
	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:171)
	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:130)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:104)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:63)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:58)
	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:517)
	at org.jboss.weld.bootstrap.api.helpers.ForwardingBootstrap.deployBeans(ForwardingBootstrap.java:63)
	at org.jboss.weld.environment.se.Weld.initialize(Weld.java:143)

",,davsclaus,shay_matasaro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6500,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348634,,,Mon Sep 16 12:22:47 UTC 2013,,,,,,,,,,,"0|i1o45j:",348931,,,,,,,,,,,,,,,,,,,,"15/Sep/13 19:11;shay_matasaro;this is due to the fact that CamelBeanContext return null for getStereotypes, it should return an empty set;;;","15/Sep/13 20:17;shay_matasaro;https://github.com/apache/camel/pull/44;;;","16/Sep/13 08:34;davsclaus;Should a new set be returned or can you return a Collections.EMPTY_SET instead?;;;","16/Sep/13 12:20;shay_matasaro;I'll check the code to see if an EMPTY_SET would work also
should the fix be also ported back to 2.12 and 2.11?;;;","16/Sep/13 12:22;davsclaus;Your patch has been applied to master, 2.12, and 2.11 branches.;;;",,,,,,,,,,,,,,,,,,,
Bean binding to covariant methods throws AmbiguousMethodCallException,CAMEL-6752,12668699,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,guy127917,guy127917,15/Sep/13 19:02,16/Sep/13 07:37,14/Jul/23 05:49,16/Sep/13 07:37,2.11.1,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-core,,,,,,0,,,,,,,"Attached is a patch and test case for an issue in the bean binding code which prevents binding to an overloaded method with a covariant return type from the base class. 

The fix is to check for method covariance at the last moment before throwing AmbiguousMethodCallException. If all methods remaining are covariant, any one of them can be called. Unfortunately this happens in 3 places in the code- if we pre-filtered the list of methods then we could lose annotations on either of the method signature which could be problematic depending on the resolution type. ",,guy127917,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Sep/13 20:07;guy127917;bean-binding-covariant-methods.patch;https://issues.apache.org/jira/secure/attachment/12603250/bean-binding-covariant-methods.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,348633,,,Mon Sep 16 07:37:38 UTC 2013,,,,,,,Patch Available,,,,"0|i1o45b:",348930,,,,,,,,,,,,,,,,,,,,"15/Sep/13 19:18;guy127917;Apologies- initial patch had failing tests, will post correct one shortly.;;;","16/Sep/13 07:37;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Guy.;;;",,,,,,,,,,,,,,,,,,,,,,
readLock=fileLock causes GenericFileOperationFailedException,CAMEL-6750,12668680,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mariusz kow,mariusz kow,15/Sep/13 10:55,16/Sep/13 15:36,14/Jul/23 05:49,16/Sep/13 15:36,2.11.1,2.12.0,,,,,,,2.11.2,2.12.1,2.13.0,,camel-core,,,,,,0,,,,,,,"Camel throws GenericFileOperationFailedException for example route:

 <route>
 <from uri=""file:source?delete=true&amp;readLock=fileLock""/>
 <process ref=""processor""/>
 </route>

See on forum:
http://camel.465427.n5.nabble.com/GenericFileOperationFailedException-for-file-deletion-td5739382.html",Windows only,davsclaus,mariusz kow,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6413,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348614,,,Mon Sep 16 15:36:48 UTC 2013,,,,,,,,,,,"0|i1o413:",348911,,,,,,,,,,,,,,,,,,,,"16/Sep/13 15:36;davsclaus;Thanks for reporting. The fileLock is now released eager so the file can be deleted.;;;",,,,,,,,,,,,,,,,,,,,,,,
Using @Simple (or others) bean parameter binding for boolean type should eval as predicate,CAMEL-6743,12668432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/13 07:54,13/Sep/13 08:47,14/Jul/23 05:49,13/Sep/13 08:47,2.11.1,2.12.0,,,,,,,2.10.7,2.11.2,2.12.1,2.13.0,camel-core,,,,,,0,,,,,,,"For example
{code}
        public void read(String body, @Simple(""${header.foo} != null"") boolean foo) {
{code}

The foo parameter is a boolean and thus the @Simple expression should be evaluated as a predicate and not as an Expression which happens today.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348366,,,2013-09-13 07:54:00.0,,,,,,,,,,,"0|i1o2hz:",348663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade to hadoop 1.2.1,CAMEL-6741,12668320,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,12/Sep/13 18:06,12/Sep/13 18:13,14/Jul/23 05:49,12/Sep/13 18:13,,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348254,,,2013-09-12 18:06:51.0,,,,,,,,,,,"0|i1o1tb:",348550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System property org.apache.camel.jmx.createRmiConnector is ignored with spring xml,CAMEL-6740,12668304,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ssogabe,ssogabe,12/Sep/13 17:17,25/Feb/14 23:39,14/Jul/23 05:49,14/Sep/13 10:31,2.11.1,2.12.0,,,,,,,2.10.7,2.11.2,2.12.1,2.13.0,camel-spring,,,,,,0,jmx,,,,,,"Specifying system property ""-Dorg.apache.camel.jmx.createRmiConnector=false"" to diable JmxConenctor is ignored with the following spring xml.

       <camelContext xmlns=""http://camel.apache.org/schema/spring"">
           <jmxAgent id=""jmxAgent"" />
           :
           :



","camel git master, camel-spring",davsclaus,githubbot,ssogabe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348238,,,Tue Feb 25 23:39:31 UTC 2014,,,,,,,Patch Available,,,,"0|i1o1pr:",348534,,,,,,,,,,,,,,,,,,,,"12/Sep/13 17:42;ssogabe;created https://github.com/apache/camel/pull/43;;;","14/Sep/13 10:31;davsclaus;Thanks for the patch. I kept the default value as-is in camel-core to not change that.;;;","25/Feb/14 23:39;githubbot;Github user ssogabe closed the pull request at:

    https://github.com/apache/camel/pull/43
;;;",,,,,,,,,,,,,,,,,,,,,
The creation of the UnitOfWork should be done after the exchange is populated so that the notification sent contains meaningful data,CAMEL-6731,12668066,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,11/Sep/13 15:23,17/Sep/13 09:50,14/Jul/23 05:49,17/Sep/13 09:50,2.12.0,,,,,,,,2.12.1,2.13.0,,,camel-cxf,camel-jetty,camel-netty,camel-servlet,,,0,,,,,,,,,davsclaus,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,348001,,,Mon Sep 16 08:36:27 UTC 2013,,,,,,,,,,,"0|i1o09b:",348297,,,,,,,,,,,,,,,,,,,,"16/Sep/13 08:36;davsclaus;Guillaume, are you working on this? Would be great to have fixed this week.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty - RequestTimeout should not trigger if we read data,CAMEL-6730,12668058,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Sep/13 14:35,11/Sep/13 14:37,14/Jul/23 05:49,11/Sep/13 14:37,2.11.1,2.12.0,,,,,,,2.11.2,2.12.1,2.13.0,,camel-netty,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Netty-and-requestTimeout-tp5738341p5738533.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347993,,,2013-09-11 14:35:13.0,,,,,,,,,,,"0|i1o07j:",348289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Signature Component: Stream not closed in XmlSignerHelper.getXslTransform(String path),CAMEL-6727,12667983,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,11/Sep/13 05:09,13/Sep/13 07:11,14/Jul/23 05:49,13/Sep/13 07:10,2.12.0,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,Component camel-xmlsecurity: InputStream is not closed after it is read in method XmlSignerHelper.getXslTransform(String path),,forsthofer,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Sep/13 05:11;forsthofer;0001-XML-Signature-component-not-closed-stream.patch;https://issues.apache.org/jira/secure/attachment/12602526/0001-XML-Signature-component-not-closed-stream.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347918,,,Fri Sep 13 07:10:25 UTC 2013,,,,,,,Patch Available,,,,"0|i1nzqv:",348214,,,,,,,,,,,,,,,,,,,,"13/Sep/13 07:10;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Franz.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel-Redis: Serializer passed through URI is used only on consumer,CAMEL-6726,12667818,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,mynos_main@yahoo.it,mynos_main@yahoo.it,10/Sep/13 14:43,12/Sep/13 09:42,14/Jul/23 05:49,12/Sep/13 09:42,2.11.1,,,,,,,,2.11.2,2.12.1,2.13.0,,,,,,,,0,,,,,,,"*Please add camel-redis component*

The serializer passed through URI is used only on consumer and not on producer. Beside been unexpected and undocumented I think it can cause problems on interacting with the Redis DB if the same serializer is not used in both ways.

You can find the example and discussion of this problem on this thread on the forum:

http://camel.465427.n5.nabble.com/camel-redis-strings-serialization-td5738994.html

I put as minor because from the discussion it looks like it is possible to have a workaround using a RedisTemplate.


",,mynos_main@yahoo.it,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,347754,,,2013-09-10 14:43:52.0,,,,,,,,,,,"0|i1nyr3:",348053,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Message history - Possible ArrayIndexOutOfBoundsException,CAMEL-6723,12667763,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Sep/13 08:30,10/Sep/13 09:09,14/Jul/23 05:49,10/Sep/13 09:09,2.12.0,,,,,,,,2.12.1,2.13.0,,,camel-core,,,,,,0,,,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347699,,,Tue Sep 10 08:49:16 UTC 2013,,,,,,,,,,,"0|i1nyev:",347998,,,,,,,,,,,,,,,,,,,,"10/Sep/13 08:49;davsclaus;ava.lang.ArrayIndexOutOfBoundsException: 11
	at java.util.ArrayList.add(ArrayList.java:412)
	at org.apache.camel.processor.CamelInternalProcessor$MessageHistoryAdvice.before(CamelInternalProcessor.java:684)
	at org.apache.camel.processor.CamelInternalProcessor$MessageHistoryAdvice.before(CamelInternalProcessor.java:665)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:139)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)
[) thread #3 - seda://hotDrinks] SedaConsumer                   WARN  Error processing exchange. Exchange[Message: hot 4 shot CAPPUCCINO]. Caused by: [java.lang.ArrayIndexOutOfBoundsException - 10];;;",,,,,,,,,,,,,,,,,,,,,,,
SoapJaxbDataFormat not handling correctly SOAP action with request wrapper element,CAMEL-6720,12667585,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,c0stra,c0stra,09/Sep/13 14:04,28/Apr/16 12:46,14/Jul/23 05:49,28/Apr/16 12:46,2.12.0,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-soap,,,,,,2,,,,,,,"If an interface to be used as SOAP service interface is configured to have parameters wrapped in a request wrapper element (eg. using @RequestWrapper),
then an attempt to invoke a its method will throw NPE:

{code}
java.lang.NullPointerException
	at org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy.findQNameForSoapActionOrType(ServiceInterfaceStrategy.java:207)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.createContentFromObject(SoapJaxbDataFormat.java:208)
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.doMarshal(Soap11DataFormatAdapter.java:77)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.marshal(SoapJaxbDataFormat.java:141)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:59)
{code}

The reason for this is sequence of following:
# The ServiceInterfaceStrategy is creating a mapping of methods to MethodInfo.
# In case of RequestWrapper, the wrapper class is used as a single input TypeInfo, and no TypeInfo is being held for the real parameters.
# At method invocation, it tries to lookup the TypeInfo in the MethodInfo, but for the real parameter class, and it only contains mapping for the request wrapper. So it fails with NPE.",,c0stra,davsclaus,movees,PSPaul,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Feb/14 12:27;movees;ServiceInterfaceStrategy.java;https://issues.apache.org/jira/secure/attachment/12628473/ServiceInterfaceStrategy.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347522,,,Thu Apr 28 12:46:36 UTC 2016,,,,,,,,,,,"0|i1nxbj:",347821,,,,,,,,,,,,,,,,,,,,"11/Sep/13 08:23;davsclaus;An unit test to demonstrate this bug would be great. And as usual patches is welcome to fix this as well.;;;","12/Feb/14 12:27;movees;Patched ServiceInterfaceStrategy;;;","12/Feb/14 12:27;movees;The problem seems to be fixed by commenting out the following line 99, method ""private List<TypeInfo> getInInfo(Method method)"":

//typeInfos.add(new TypeInfo(null, null));

I've been using the patched jar for a while without noticing problems. Is the TypeInfo(null, null) required in other methods?

Sorry I'm not submitting a proper patch, I'm new in Jira.;;;","12/Feb/14 12:31;c0stra;I'm currently out of office. I'll return on Wendesday 2nd January.


;;;","10/Feb/15 10:59;PSPaul;This bug is still happening to me in Camel 2.14.1. Is there or will there be any fix?;;;","16/Feb/15 19:42;davsclaus;It would help if the people who uses this component dive in and help with this issue. ;;;","28/Apr/16 12:46;davsclaus;Thanks Movee for the idea for the fix.;;;",,,,,,,,,,,,,,,,,
camel-mqtt - dead lock when processing fetching/sending messages at high frequency,CAMEL-6717,12667553,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ralfkornberger,ralfkornberger,09/Sep/13 11:58,05/Mar/14 13:10,14/Jul/23 05:49,28/Jan/14 15:17,2.11.0,,,,,,,,2.12.3,2.13.0,,,camel-mqtt,,,,,,0,,,,,,,"I'm using Apache Camel with MQTT to fetch data from a Mosquitto broker. Data are published there at high
frequency (< 10s) by serveral devices. After receiving the data, I send an acknowlege message back. This is done by publishing a message
to a topic for each device. I'm using the Fusesource MQTT Client (version 2.5) for this.
I encountered the following problem: after some time (can be 15 minutes up to 1 day) some thing ""weird"" happens.
The application stops receiving or sending any data via MQTT. Looking at it with jstack reveals the following:


""hawtdispatch-DEFAULT-2"" daemon prio=10 tid=0x00007facc1a2f000 nid=0x782d waiting on condition [0x00007fac42bcf000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x000000078e792b88> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.fusesource.mqtt.client.Promise.await(Promise.java:88)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:73)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:82)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTManager.sendACKMessage(MQTTManager.java:92)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTCommunication.sendACKMessage(MQTTCommunication.java:116)
	at net.centersight.plugins.agent.protomqtt.camel.AgentMQTTbatchACKer.process(AgentMQTTbatchACKer.java:47)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:341)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:238)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.component.mqtt.MQTTConsumer.processExchange(MQTTConsumer.java:46)
	at org.apache.camel.component.mqtt.MQTTEndpoint$1.onPublish(MQTTEndpoint.java:88)
	at org.fusesource.mqtt.client.CallbackConnection.toReceiver(CallbackConnection.java:815)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:732)
	at org.fusesource.mqtt.client.CallbackConnection.access$17(CallbackConnection.java:727)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:660)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:226)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:96)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)

   Locked ownable synchronizers:
	- None
	
Appearently, both the Camel receiving thread and the Fusesource client thread are hanging at
at org.fusesource.mqtt.client.Promise.await(Promise.java:88)

Since I use BlockingConnection in my sending client, I took a look at the Fusesource MQTT client.
In BlockingConnection.java, function 
public void publish(final UTF8Buffer topic, final Buffer payload, final QoS qos, final boolean retain) throws Exception 

in line 80, a Future is received on publishing. And there is an await() afterwards.
When I change this await() to await(30L, TimeUnit.SECONDS), the problem still occurs, but the application keeps working.
I've put in debug printouts at the trace class which show me that at the time the problem occurs the MQTT client seems to loose the connection to the broker and tries to reestablish it. Debug logs also show that the timeout exception throw by the timeouted await comes every minute for ca. 20 minutes. Then the problem ""vanishes"" and comes again after serval hours.

Ps.: I also posted this at github, in the Fusesource MQTT issue tracker:
https://github.com/fusesource/mqtt-client/issues/21#issuecomment-23861700
",jdk 1.6.32,ceposta,davsclaus,muellerc,ralfkornberger,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347490,,,Wed Mar 05 13:10:26 UTC 2014,,,,,,,,,,,"0|i1nx4f:",347789,,,,,,,,,,,,,,,,,,,,"09/Sep/13 20:59;muellerc;I think this issue has to be fixed on the mqtt-client site.;;;","01/Oct/13 09:43;davsclaus;Yes its a bug in 3rd party library
https://github.com/fusesource/mqtt-client/issues/23;;;","07/Oct/13 08:18;ralfkornberger;Ok, now we have cyclic references between Apache Camel here and MQTT Client on GitHub . ;-) Thats's fine, but what next? I've tried to get close to the problem, but without real success. So, does anyone have an idea where to start? ;;;","28/Jan/14 15:17;davsclaus;The word on the street is that this should be fixed in MQTT 1.7 client.;;;","05/Mar/14 13:10;ralfkornberger;Thanks. I think it working :-) I haven't had a deadlock so far ....;;;",,,,,,,,,,,,,,,,,,,
ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters,CAMEL-6716,12667544,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,c0stra,c0stra,09/Sep/13 10:56,20/May/14 06:09,14/Jul/23 05:49,13/May/14 14:24,2.12.0,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-soap,,,,,,0,,,,,,,"I you attempt to create a ServiceInterfaceStrategy with interface containing multiple methods without parameters, you get NullPointerException.

It's due to following code:
ServiceInterfaceStrategy.java:161
{code}
155    private void analyzeServiceInterface(Class<?> serviceInterface) {
156        Method[] methods = serviceInterface.getMethods();
157        for (Method method : methods) {
158            MethodInfo info = analyzeMethod(method);
159            for (int i = 0; i < info.getIn().length; i++) {
160                TypeInfo ti = info.getIn()[i];
161                if (inTypeNameToQName.containsKey(ti.getTypeName())
162                    && (!(ti.getTypeName().equals(""javax.xml.ws.Holder"")))
163                    && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {
164                    LOG.warn(""Ambiguous QName mapping. The type [ ""
165                                                    + ti.getTypeName()
166                                                    + "" ] is already mapped to a QName in this context."");
167                    continue;
168                }
169                inTypeNameToQName.put(ti.getTypeName(), ti.getElName());
170            }
171            if (info.getSoapAction() != null && !"""".equals172(info.getSoapAction())) {
172                soapActionToMethodInfo.put(info.getSoapAction(), info);
173            }
174
175            outTypeNameToQName.put(info.getOut().getTypeName(), info.getOut().getElName());
176
177            addExceptions(method);
178        }
179    }
{code}

For the second method without parameters, the null value is already in the inTypeNameToQName, so it tries to evaluate this: !(ti.getTypeName().equals(""javax.xml.ws.Holder""), which fails with NPE.

The question here is, why method without parameters still needs an array of types containing one element with those null values.",,acosentino,c0stra,davsclaus,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,347481,,,Tue May 20 06:09:50 UTC 2014,,,,,,,,,,,"0|i1nx2f:",347780,,,,,,,,,,,,,,,,,,,,"11/Sep/13 08:23;davsclaus;Patches is welcome;;;","10/May/14 20:15;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/147

    [CAMEL-6716] ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategyfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #147
    
----
commit 7b96bde38f16b4c42af543d9a3d4b94913af26f3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Added new Properties Component Test related to concatenation of properties. First test fails because of unsupported parsing properties.

commit 8fe696c02738baaf4d299a01386a4018c1e0c6e4
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:14:56Z

    Reload Pom.xml

commit 6e59877da99ef208e699284c05221f0c318e1c33
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T15:48:13Z

    Fixes Camel-6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

commit d551e36d0c484d6e8603fda73da0d08aea7618e3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T20:06:34Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----
;;;","10/May/14 21:08;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/147
;;;","10/May/14 21:09;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/148

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.
    
    P.S.: I've closed the other pull request and submitted this new one.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategy

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit 493d725ed30b012590622e812cab9d0282e60964
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----
;;;","10/May/14 21:11;acosentino;Sorry for this two pull request. I've close the first one, and submitted a new one.

Hope it should be helpful.;;;","13/May/14 14:24;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Andrea;;;","20/May/14 06:09;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/148
;;;",,,,,,,,,,,,,,,,,
Installation of camel-stomp feature fails ,CAMEL-6714,12667445,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,07/Sep/13 11:23,08/Sep/13 12:53,14/Jul/23 05:49,08/Sep/13 12:53,2.12.0,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,"{noformat}
Christians-MacBook-Pro:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.12.0
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/features
karaf@root> features:install camel-stomp
Error executing command: Could not start bundle mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1 in feature(s) spring-jms-3.1.4.RELEASE, camel-spring-ws-2.12.0, spring-jms-3.2.3.RELEASE, spring-jms-3.0.7.RELEASE, camel-jms-2.12.0, camel-bam-2.12.0, camel-stomp-2.12.0, camel-sjms-2.12.0, camel-jpa-2.12.0: Unresolved constraint in bundle org.apache.geronimo.specs.geronimo-jms_1.1_spec [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction.xa)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347382,,,Sun Sep 08 11:04:31 UTC 2013,,,,,,,,,,,"0|i1nwgf:",347681,,,,,,,,,,,,,,,,,,,,"08/Sep/13 11:04;muellerc;installing the Geronimo JTA spec before resolves this issue (with the original jre.properties settings from Karaf):

{code}
install mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
camel-yammer - Endpoint yammer:current throwns JsonMappingException exception ,CAMEL-6709,12667106,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,05/Sep/13 13:58,05/Sep/13 14:03,14/Jul/23 05:49,05/Sep/13 14:03,2.12.0,,,,,,,,2.12.1,,,,,,,,,,0,,,,,,,"Getting 

org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token

when trying to return the current user using yammer:current. Workaround is to just add ?useJson=true and do marshaling manually. Fixing on master shortly.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,347043,,,Thu Sep 05 14:03:41 UTC 2013,,,,,,,,,,,"0|i1nudb:",347342,,,,,,,,,,,,,,,,,,,,"05/Sep/13 14:03;janstey;Fixed with https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=420ab5d2 No need to hold up 2.12 release for this as you can still get the raw info of the current user via useJson=true.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - In bridge mode should use noop cookie store to not eat memory,CAMEL-6702,12666677,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/13 10:38,03/Sep/13 11:16,14/Jul/23 05:49,03/Sep/13 11:16,,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/CookieStore-tp5737517.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346615,,,Tue Sep 03 11:16:57 UTC 2013,,,,,,,,,,,"0|i1nrqn:",346916,,,,,,,,,,,,,,,,,,,,"03/Sep/13 11:16;davsclaus;Expired cookies is now removed by default. And a noop cookie store is using when bridging. Also made it easy to configure a custom cookie store.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Using <endpoint> and referrring to SSLContextParameters with property placeholders can lead to CircularDependencyException,CAMEL-6700,12666662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/13 08:30,03/Sep/13 10:18,14/Jul/23 05:49,03/Sep/13 10:18,2.11.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-blueprint,,,,,,0,,,,,,,"Configuring a blueprint xml file with
{code}
    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>
{code}


Can lead to ciruclar exceptions
{code}
Caused by: org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='mySsl'], BeanRecipe[name='.camelBlueprint.factory.mySsl'], BeanRecipe[name='camel-4'], BeanRecipe[name='myNettyServer'], BeanRecipe[name='mySsl']]
	at org.apache.aries.blueprint.container.BlueprintRepository.push(BlueprintRepository.java:343)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:71)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:230)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:145)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:746)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookupByNameAndType(BlueprintContainerRegistry.java:54)
	at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:52)
	... 125 more
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346600,,,Tue Sep 03 08:54:01 UTC 2013,,,,,,,,,,,"0|i1nrnb:",346901,,,,,,,,,,,,,,,,,,,,"03/Sep/13 08:54;davsclaus;The problem is only when you define a SSLContextParameters which you refer to from <endpoint>

{code}
  <camel:sslContextParameters id=""mySsl"">
    <camel:serverParameters clientAuthentication=""REQUIRE""/>
    <camel:keyManagers keyPassword=""changeit"">
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>
{code}

And with endpoint
{code}
    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Using routeContextRef to refer to a RouteBuilder in another bundle causes ClassCastException,CAMEL-6699,12666582,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Sep/13 13:35,02/Sep/13 15:48,14/Jul/23 05:49,02/Sep/13 15:42,2.11.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-blueprint,,,,,,1,,,,,,,"See
http://camel.465427.n5.nabble.com/Referencing-OSGi-services-with-RouteBuilder-classes-for-use-in-CamelContext-tp5734660.html

I can reproduce with stacktrace
{code}
Caused by: java.lang.ClassCastException: Proxyfdf03102_b8fa_4caf_b44c_fa565998bb6e cannot be cast to org.apache.camel.builder.RouteBuilder
	at org.apache.camel.model.RouteBuilderDefinition.createRouteBuilder(RouteBuilderDefinition.java:64)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.installRoutes(AbstractCamelContextFactoryBean.java:727)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.setupRoutes(AbstractCamelContextFactoryBean.java:299)
	at org.apache.camel.blueprint.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:300)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_25]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)[7:org.apache.aries.blueprint.core:1.1.0]
	... 40 more
{code}",,davsclaus,stibi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346520,,,Mon Sep 02 15:48:49 UTC 2013,,,,,,,,,,,"0|i1nr5r:",346821,,,,,,,,,,,,,,,,,,,,"02/Sep/13 15:43;davsclaus;Remember to expose the RouteBuilder class using its interface which is org.apache.camel.RoutesBuilder. eg notice the S in Route***s***Builder.;;;","02/Sep/13 15:46;stibi;ah, ok :) that's it! Thanks, I'll try.;;;","02/Sep/13 15:48;davsclaus;Ah there was still a bug in camel-core-xml which I have fixed. Though it may be a common mistake for end users to expose a route builder as osgi service using its class name, I made that mistake at first. ;;;",,,,,,,,,,,,,,,,,,,,,
camel-cxf should not setup the holder and wrapperClass interceptors in CXF_MESSAGE data format,CAMEL-6696,12666557,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Sep/13 09:38,03/Sep/13 02:01,14/Jul/23 05:49,03/Sep/13 02:01,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,"When we specify the serviceClass attribute of cxfEndpoint with CXF_MESSAGE dataformat, camel-cxf will setup the WrapperClass{In|Out}Interceptor and Holder{In|Out}Interceptor for the endpoint, but these interceptors are useless and throw some exceptions because camel-cxf doesn't consume under layer message at all and it cannot setup right information for these interceptor to use.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346495,,,Tue Sep 03 02:01:58 UTC 2013,,,,,,,,,,,"0|i1nr07:",346796,,,,,,,,,,,,,,,,,,,,"03/Sep/13 02:01;njiang;Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
mbeansRegistered in DefaultManagementAgent isn't ThreadSafe,CAMEL-6695,12666546,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,02/Sep/13 06:51,03/Sep/13 11:51,14/Jul/23 05:49,03/Sep/13 11:51,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,,,,,,,0,,,,,,,"This is more or less a ""corner-case"" I stumbled upon, though
the HashSet/HashMap (2.5/2.10 camel versions) in the DefaultManagementAgent containing the registered Mbean _mbeansRegistered_ isn't Thread-Safe. 
This has been an issue for us while using the ProducerTemplate in a wrongful way, by instantiating the ProducerTemplate during every Route run. 
As this might be a common mistake by users I'd suggest to improve the _mbeansRegistered_ by using a Synchronized Map.",,achim_nierbeck,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346484,,,2013-09-02 06:51:51.0,,,,,,,,,,,"0|i1nqxr:",346785,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-5676 introduced a regression for JMX with spring/blueprint,CAMEL-6693,12666457,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Aug/13 11:07,05/Sep/13 14:10,14/Jul/23 05:49,31/Aug/13 11:15,2.12.0,,,,,,,,2.12.0,,,,camel-blueprint,camel-spring,jmx,,,,0,,,,,,,"See
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-12-0-tp5738140.html

Scott found a regressions, and pointed out the fix.",,davsclaus,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Sep/13 12:02;scranton;CAMEL-6693.diff;https://issues.apache.org/jira/secure/attachment/12601598/CAMEL-6693.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346396,,,Thu Sep 05 14:10:09 UTC 2013,,,,,,,,,,,"0|i1nqe7:",346697,,,,,,,,,,,,,,,,,,,,"05/Sep/13 12:02;scranton;I've pulled the Unit Test from https://github.com/CamelCookbook/camel-cookbook-examples/blob/master/camel-cookbook-monitoring/src/test/java/org/camelcookbook/monitoring/managed/ManagedSpringTest.java that originally caught the regression, but now that its part of the normal camel build it does not react to the addition or removal of those two lines. I'm guessing I need to run a test with jmx disabled, and then run a spring test with it enabled to catch this case.

Feel free to add these test cases as it does exercise ManagedResource.;;;","05/Sep/13 14:10;davsclaus;Thanks for the tests I will add them.;;;",,,,,,,,,,,,,,,,,,,,,,
seda - queue size compare should use equals,CAMEL-6691,12666454,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Aug/13 09:38,02/Sep/13 08:55,14/Jul/23 05:49,31/Aug/13 10:57,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-11-1-SedaComponent-issues-with-Queue-size-tp5738258.html

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346393,,,2013-08-31 09:38:32.0,,,,,,,,,,,"0|i1nqdj:",346694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak SoapOutInterceptor.writeSoapEnvelopeStart with security headers,CAMEL-6690,12666440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,31/Aug/13 01:38,16/Sep/13 15:37,14/Jul/23 05:49,16/Sep/13 15:37,2.10.6,2.11.1,,,,,,,2.11.2,2.12.1,2.13.0,,camel-cxf,,,,,,0,,,,,,,"When proxying the WS-Security request through camel route with CXF_MESSAGE data format, we will get the endless loop that eat up the memory.

{code}
""qtp967241364-210"" prio=10 tid=0x00007f1de4306800 nid=0x1c9f runnable [0x00007f1d8d451000]
   java.lang.Thread.State: RUNNABLE
	at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeCharacters(W3CDOMStreamWriter.java:292)
	at org.apache.cxf.staxutils.DelegatingXMLStreamWriter.writeCharacters(DelegatingXMLStreamWriter.java:91)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:588)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:564)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:542)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:160)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:81)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e28af4a0> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:530)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:456)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:41)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:81)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:93)
	- locked <0x00000000e2533d18> (a org.apache.cxf.transport.http_jetty.continuations.JettyContinuationWrapper)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:72)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:107)
	- locked <0x00000000e28af958> (a org.apache.cxf.interceptor.ServiceInvokerInterceptor$2)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e26edb48> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:236)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:194)
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:130)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:221)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:141)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.ops4j.pax.web.service.internal.HttpServiceStarted$1.invoke(HttpServiceStarted.java:182)
	at org.ops4j.pax.web.service.internal.$Proxy6.service(Unknown Source)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:447)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:363)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483)
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:724)
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346379,,,2013-08-31 01:38:34.0,,,,,,,,,,,"0|i1nqaf:",346680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using simple language OGNL expressions doesn't work for Bean Binding when a field is null,CAMEL-6687,12666309,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,30/Aug/13 11:50,20/Oct/15 13:42,14/Jul/23 05:49,01/Sep/13 09:15,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,bean,method,ognl,simple,,,"The following functionality doesn't work, when one of the fields is null: 

http://camel.apache.org/bean-binding.html
{quote}
You can also use the OGNL support of the Simple expression language. Now suppose the message body is an object which has a method named asXml. To invoke the asXml method we can do as follows:
{code}.bean(OrderService.class, ""doSomething(${body.asXml}, ${header.high})""){code}

Instead of using .bean as shown in the examples above, you may want to use .to instead as shown:
{code}.to(""bean:orderService?method=doSomething(${body.asXml}, ${header.high})""){code}
{quote}

A test case is provided. Instead of getting values of fields ""foo"" and ""bar"" respectively, the first parameter (which should be null) receives value of pojo.toString(), while the second parameter receives the correct value.",,davsclaus,koscejev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Aug/13 11:51;koscejev;CamelBeanMethodOgnlFieldTest.java;https://issues.apache.org/jira/secure/attachment/12600770/CamelBeanMethodOgnlFieldTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346248,,,Mon Sep 02 16:46:51 UTC 2013,,,,,,,,,,,"0|i1nphj:",346549,,,,,,,,,,,,,,,,,,,,"01/Sep/13 09:15;davsclaus;Thanks for reporting and providing a unit test.;;;","02/Sep/13 16:46;koscejev;No, thank you for fixing it. I'm always impressed how fast these are fixed. :)
Looking forward to 2.12...;;;",,,,,,,,,,,,,,,,,,,,,,
camel-cxf RAW message data format doesn't support MTOM,CAMEL-6684,12666240,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Aug/13 02:40,02/Sep/13 08:54,14/Jul/23 05:49,30/Aug/13 12:13,2.10.6,2.11.1,,,,,,,2.11.2,2.12.0,,,camel-cxf,,,,,,0,,,,,,,"As camel-cxf RAW message dataformat doesn't pass the content-type header rightly, the request which route by the camel router cannot accept by the server. ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346179,,,Fri Aug 30 12:13:00 UTC 2013,,,,,,,,,,,"0|i1np2n:",346480,,,,,,,,,,,,,,,,,,,,"30/Aug/13 12:13;njiang;Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-dozer - Does not work well in OSGi Blueprint,CAMEL-6683,12666130,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Aug/13 13:29,02/Sep/13 09:15,14/Jul/23 05:49,02/Sep/13 09:15,2.12.0,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,"Dozer doesnt work to well in OSGi. It seems to work with spring, but fails with OSGi blueprint.

{code}
2013-08-29 14:44:51,302 | ERROR | l Console Thread | BlueprintContainerImpl           | container.BlueprintContainerImpl  393 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Unable to start blueprint container for bundle blue
org.osgi.service.blueprint.container.ComponentDefinitionException: Error when instantiating bean dozerMapper of class class org.dozer.DozerBeanMapper
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:333)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[7:org.apache.aries.blueprint.core:1.1.0]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_25]
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_25]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:259)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:222)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.1.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.updateBundle(Felix.java:2235)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:962)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:949)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.karaf.shell.osgi.UpdateBundle.doExecute(UpdateBundle.java:37)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.osgi.BundleCommand.doExecute(BundleCommand.java:42)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[14:org.apache.karaf.shell.console:2.3.2]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]
Caused by: org.dozer.MappingException: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:38)
	at org.dozer.DozerInitializer.loadBeanType(DozerInitializer.java:115)
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:97)
	at org.dozer.DozerInitializer.init(DozerInitializer.java:74)
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:94)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_25]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:329)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:962)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:331)[7:org.apache.aries.blueprint.core:1.1.0]
	... 39 more
Caused by: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_25]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_25]
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_25]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)[:1.7.0_25]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.7.0_25]
	at java.lang.Class.forName0(Native Method)[:1.7.0_25]
	at java.lang.Class.forName(Class.java:270)[:1.7.0_25]
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:823)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:889)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:872)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:36)
	... 52 more
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,346069,,,Mon Sep 02 09:15:07 UTC 2013,,,,,,,,,,,"0|i1noe7:",346370,,,,,,,,,,,,,,,,,,,,"30/Aug/13 08:07;davsclaus;You should configure dozer using org.apache.camel.converter.dozer.DozerBeanMapperConfiguration as shown on: https://cwiki.apache.org/confluence/display/CAMEL/Dozer+Type+Conversion

Dozer 5.5 works better in OSGi as it also has an OSGi Activator. So when this version is released we can upgrade and have Dozer work better with OSGi Blueprint.;;;","30/Aug/13 08:31;davsclaus;I asked about a 5.5.0 release of Dozer at
https://groups.google.com/forum/?fromgroups=#!topic/dozer-mapper/jDfxFW4pkqY;;;","02/Sep/13 09:15;davsclaus;It works better now. Though upgrading to Dozer 5.5.0 works even better. Though Dozer 5.5.0 has not been released yet.;;;",,,,,,,,,,,,,,,,,,,,,
RabbitMQConsumer doesn't call the queueDeclare rightly,CAMEL-6672,12665657,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/Aug/13 06:53,27/Aug/13 10:08,14/Jul/23 05:49,27/Aug/13 10:08,2.12.0,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,"When using the camel-rabbitmq to consume the message, we need to make sure the exchange and queue declare with the same configuration.
Here is the [discussion|http://camel.465427.n5.nabble.com/Camel-RabbitMQ-from-2-12-snapshot-missing-parameter-type-direct-tp5738013.html] about it.

",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,345597,,,2013-08-27 06:53:11.0,,,,,,,,,,,"0|i1nlhb:",345898,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop EIP doesn't honour copy option in some circumstances,CAMEL-6667,12665418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,25/Aug/13 14:24,25/Aug/13 14:42,14/Jul/23 05:49,25/Aug/13 14:42,2.12.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,loop,,,,,,"Happens when the Async Routing Engine variant of the Loop logic kicks in, and there are more than two processors in the loop body, e.g. 
\\
\\
{code:java}
.loop(3)
  .to(""activemq:queue:abc?exchangePattern=InOut"")
  .to(""activemq:queue:def?exchangePattern=InOut"")
.end()
{code}

The wrong inflight Exchange is copied (instead of the original one), and since the implicit Pipeline has copied the OUT message from the 1st endpoint to the IN message, the original IN message is lost fully.",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,345358,,,2013-08-25 14:24:55.0,,,,,,,,,,,"0|i1nk07:",345659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sap-netweaver throws JsonParseException when using json=false option,CAMEL-6663,12665078,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,22/Aug/13 17:12,22/Aug/13 17:14,14/Jul/23 05:49,22/Aug/13 17:14,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,"If you set json=false like:

{code}
sap-netweaver:https://sapes1.sapdevcenter.com/sap/opu/odata/IWFND/RMTSAMPLEFLIGHT/?username=USER&amp;password=PASS&amp;json=false
{code}

It will try and parse the body as JSON because jsonAsMap is still true. This is the result:

{code}
org.codehaus.jackson.JsonParseException: Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
 at [Source: java.io.StringReader@343eb53f; line: 1, column: 2]
	at org.codehaus.jackson.JsonParser._constructError(JsonParser.java:1433)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.JsonParserMinimalBase._reportError(JsonParserMinimalBase.java:521)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.JsonParserMinimalBase._reportUnexpectedChar(JsonParserMinimalBase.java:442)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.ReaderBasedParser._handleUnexpectedValue(ReaderBasedParser.java:1198)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.ReaderBasedParser.nextToken(ReaderBasedParser.java:485)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper._initForReading(ObjectMapper.java:2770)[53:jackson-mapper-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2718)[53:jackson-mapper-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1863)[53:jackson-mapper-asl:1.9.10]
	at org.apache.camel.component.sap.netweaver.NetWeaverProducer.process(NetWeaverProducer.java:61)[237:org.apache.camel.camel-sap-netweaver:2.12.0.redhat-610030]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:352)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:199)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:152)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_25]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)[:1.7.0_25]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)[:1.7.0_25]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_25]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_25]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_25]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_25]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]
{code}",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,345019,,,Thu Aug 22 17:14:45 UTC 2013,,,,,,,,,,,"0|i1nhxb:",345320,,,,,,,,,,,,,,,,,,,,"22/Aug/13 17:14;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/922ea959;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-yammer - don't share requestor between different endpoint types,CAMEL-6662,12665065,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,22/Aug/13 16:05,22/Aug/13 16:17,14/Jul/23 05:49,22/Aug/13 16:17,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,This means that the same API connection info is used for say a messages consumer and users consumer - which is bad because they are supposed to connect to different yammer APIs.,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,345006,,,Thu Aug 22 16:17:15 UTC 2013,,,,,,,,,,,"0|i1nhuf:",345307,,,,,,,,,,,,,,,,,,,,"22/Aug/13 16:17;janstey;https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=bb4f2e5b;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-example-loan-broker - is broken on master,CAMEL-6658,12664991,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/13 07:05,23/Aug/13 06:39,14/Jul/23 05:49,23/Aug/13 06:39,2.12.0,,,,,,,,2.12.0,,,,examples,,,,,,0,,,,,,,"mvn clean install -rf :camel-example-loan-broker

fails testing this example. 

{code}
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: org.apache.camel.Exchange but has value: [[ssn:SSN bank:bank1 rate:3.9542535426930447]] of type: org.apache.cxf.message.MessageContentsList on: Message: [[ssn:SSN bank:bank1 rate:3.9542535426930447]]. Caused by: No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]. Exchange[Message: [[ssn:SSN bank:bank1 rate:3.9542535426930447]]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)
	at org.apache.camel.builder.ExpressionBuilder$38.evaluate(ExpressionBuilder.java:936)
	... 12 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)
	... 13 more
...
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,344932,,,Fri Aug 23 06:39:38 UTC 2013,,,,,,,,,,,"0|i1nhdz:",345233,,,,,,,,,,,,,,,,,,,,"23/Aug/13 06:39;davsclaus;It was due a mistake in CAMEL-6650 in multicast EIP.;;;",,,,,,,,,,,,,,,,,,,,,,,
spring-batch - Looses headers,CAMEL-6656,12664786,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,21/Aug/13 07:19,22/Aug/13 13:08,14/Jul/23 05:49,22/Aug/13 13:08,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-spring-batch,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-spring-batch-2-11-1-breaks-previous-working-routes-tp5737426.html",,davsclaus,gardellajuanpablo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Aug/13 18:05;gardellajuanpablo;CAMEL-6656-testcase.zip;https://issues.apache.org/jira/secure/attachment/12599236/CAMEL-6656-testcase.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,344729,,,Wed Aug 21 18:05:51 UTC 2013,,,,,,,,,,,"0|i1ng4n:",345029,,,,,,,,,,,,,,,,,,,,"21/Aug/13 18:05;gardellajuanpablo;I've attached a file with a test case that it works with camel 2.11.0;;;",,,,,,,,,,,,,,,,,,,,,,,
Resolving endpoints before route start leads to JMX registration failure,CAMEL-6652,12664567,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,avina,avina,20/Aug/13 05:57,23/Aug/13 08:25,14/Jul/23 05:49,23/Aug/13 08:25,2.11.1,,,,,,,,2.12.0,,,,camel-core,jmx,,,,,0,,,,,,,"If resolve endpoint before route start, MBeans for component & endpoint can't be found in jconsole.

Example code:
public void configure() {
  from(xxx).to(yyy);
  ...
  endpoint(xxx); // resolve the endpoint before start
}

Or:
camelContext.getEndpoint(xxx); // resolve the endpoint before start
...
camelContext.start()

",,avina,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Aug/13 06:02;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12598911/test.zip","20/Aug/13 06:02;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12598910/test.zip",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,344510,,,Tue Aug 20 06:02:08 UTC 2013,,,,,,,,,,,"0|i1nesf:",344810,,,,,,,,,,,,,,,,,,,,"20/Aug/13 06:02;avina;a test case;;;",,,,,,,,,,,,,,,,,,,,,,,
SJMS component throws class cast error when used with IBM Webshpere MQ,CAMEL-6641,12663864,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,nigell,nigell,15/Aug/13 15:19,15/Aug/13 21:54,14/Jul/23 05:49,15/Aug/13 21:54,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-sjms,,,,,,0,,,,,,,"When using the IBM MQ JMS classes and pub/sub over a TOPIC the JmsObjectFactory.createMessageConsumer method throws a cast class exception. The session is being cast to a TopicSession which for MQ it is not.
Using pure jms this cast is not required as the session class is aware of the destination type.",Windows 7,muellerc,nigell,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Aug/13 15:21;nigell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12598228/patchfile.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,343865,,,Thu Aug 15 21:53:58 UTC 2013,,,,,,,Patch Available,,,,"0|i1natr:",344167,,,,,,,,,,,,,,,,,,,,"15/Aug/13 15:21;nigell;Created a patch that fixes it on my desktop.;;;","15/Aug/13 21:53;muellerc;Thanks Nigel for the patch! It's applied into the master and the camel-2.11.x maintenance branch.;;;",,,,,,,,,,,,,,,,,,,,,,
Validation using JAXB format is not thread safe,CAMEL-6630,12663379,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ales_d,ales_d,13/Aug/13 09:32,20/Aug/13 21:34,14/Jul/23 05:49,20/Aug/13 21:34,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"I'm using JAXB format for unmarshaling. It is defined like this:

<dataFormats>
  <jaxb id=""kofax"" contextPath=""com.indracompany.telefonica.assignmanager""
      schema=""classpath:DocumentsDataForAssignManager.xsd""/>
</dataFormats>

And used in route like this:

<unmarshal ref=""kofax""/>

Sometimes however I get following exception:

org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
	at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXException(Util.java:65) ~[na:1.7.0_21]
	at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:244) ~[na:1.7.0_21]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.createUnmarshaller(JaxbDataFormat.java:347) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:171) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:57) ~[camel-core-2.11.1.jar:2.11.1]

Seems that the problem is same as in CAMEL-1565. That ticket was however related to <validate> element.

Right now I have disabled validation on the jaxb format used for unmarshalling and put extra <validate> in the route. It would be however fine to have this issue fixed as well.",,ales_d,muellerc,,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,343380,,,Tue Aug 20 21:21:03 UTC 2013,,,,,,,,,,,"0|i1n7uf:",343684,,,,,,,,,,,,,,,,,,,,"16/Aug/13 22:13;muellerc;The reason is, the [SchemaFactory|http://download.java.net/jdk7/archive/b123/docs/api/javax/xml/validation/SchemaFactory.html] is not thread safe. WTF...;;;","20/Aug/13 21:21;muellerc;I created an unit test which shows this issue.

The current implementation needs 9.9 seconds on my machine to unmarshall and 5.8 seconds to marshall 10000 sample xml strings/java objects (single threaded). Of course is fails in the multi threaded case...

By implementing the simplest solution (creating a new SchemaFactory instance per exchange), we got a performance penalty by 20% - 30%.
Because of this, I solved this by pooling the SchemaFactory instances using a LinkedBlockingQueue like we do it already in org.apache.camel.converter.jaxp.StaxConverter.;;;",,,,,,,,,,,,,,,,,,,,,,
Splitter should close iterator if there was an exception and stopOnException enabled,CAMEL-6627,12663206,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/13 12:41,12/Aug/13 13:26,14/Jul/23 05:49,12/Aug/13 13:26,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,eip,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/moveFailed-is-failing-when-streaming-is-on-tp5737065.html

We should ensure the splitter iterator is closed when we are done with splitting due to an exception. The current logic only closes at the end, which you we wont reach if stopOnException is enabled.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,343207,,,2013-08-12 12:41:36.0,,,,,,,,,,,"0|i1n6rz:",343511,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Search critera for toSentDate throws NPE,CAMEL-6626,12663169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ales_d,ales_d,12/Aug/13 08:45,13/Aug/13 07:16,14/Jul/23 05:49,13/Aug/13 07:16,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-mail,,,,,,0,easyfix,,,,,,"Use of searchTerm.toSentDate=now-24h (to poll only mails older than 24 hours) throws NPE. This is because MailConverters#toSearchTerm tries to build ""toSentDate"" criteria from ""fromSentDate"" value:

        if (simple.getToSentDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {

The middle line should be:

            String s = simple.getToSentDate();
",,ales_d,davidkarlsen@gmail.com,davsclaus,njiang,,,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,343170,,,Tue Aug 13 07:16:32 UTC 2013,,,,,,,,,,,"0|i1n6jr:",343474,,,,,,,,,,,,,,,,,,,,"12/Aug/13 08:55;ales_d;Looking at the code I see that other search criteria are wrong as well - namely:

toSentDate
fromReceivedDate
toReceivedDate

The problem is same in all cases - variable s is initialized from ""fromSentDate"".

The critera were probably created with ""copy-paste"" and the copied code not fixed.

Ales

;;;","12/Aug/13 13:27;davsclaus;Ales, thanks for reporting.

Are you working on a patch to fix this?

We love contributions
http://camel.apache.org/contributing.html;;;","12/Aug/13 14:28;davidkarlsen@gmail.com;https://github.com/apache/camel/pull/39;;;","12/Aug/13 15:45;ales_d;The pull request still contains one error left:

        if (simple.getFromReceivedDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {;;;","12/Aug/13 18:24;davidkarlsen@gmail.com;I've updated the branch.;;;","13/Aug/13 07:16;njiang;Applied the patch into master and camel-2.11.x branches with thanks to Ales.;;;",,,,,,,,,,,,,,,,,,
potential NPE in CxfConsumer if the PAYLOAD not match the ServiceModel,CAMEL-6625,12663150,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,12/Aug/13 06:59,15/Aug/13 06:49,14/Jul/23 05:49,15/Aug/13 06:49,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,"currently in CxfConsumer we have code like
{code}
                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
                // make sure the ""boi"" is remained as wrapped in PAYLOAD mode
                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
                    boi = boi.getWrappedOperation();
                    cxfExchange.put(BindingOperationInfo.class, boi);
                }

{code}
however, the boi could be NULL if the message PAYLOAD not match the ServiceModel, which means can't determine the operation from the PAYLOAD, should add a NPE guarder before boi.isUnwrapped to avoid the NPE",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,343151,,,2013-08-12 06:59:14.0,,,,,,,,,,,"0|i1n6fj:",343455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQConsumer doesn't put the body into message,CAMEL-6617,12662523,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Aug/13 00:43,08/Aug/13 00:51,14/Jul/23 05:49,08/Aug/13 00:51,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,camel-rabbitmq component doesn't pass the body of the message down the line.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,342526,,,Thu Aug 08 00:51:44 UTC 2013,,,,,,,,,,,"0|i1n2lb:",342831,,,,,,,,,,,,,,,,,,,,"08/Aug/13 00:51;njiang;Applied the patch into master branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
quartz consumer - Suspend and resume does not work,CAMEL-6614,12662314,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Aug/13 08:37,07/Aug/13 08:43,14/Jul/23 05:49,07/Aug/13 08:43,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quartz,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-Pause-Quartz-Componenent-tp5736101.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,342318,,,Wed Aug 07 08:43:55 UTC 2013,,,,,,,,,,,"0|i1n1b3:",342623,,,,,,,,,,,,,,,,,,,,"07/Aug/13 08:43;davsclaus;You can use stop/start instead.;;;",,,,,,,,,,,,,,,,,,,,,,,
Always got IndexOutOfBoundsException when customized id of wireTap component,CAMEL-6610,12662074,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gangliu,gangliu,06/Aug/13 09:12,08/Aug/13 02:46,14/Jul/23 05:49,08/Aug/13 00:50,2.11.1,2.11.2,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"when I'm tring to execute below route:
{code}
from(""timer:foo"").wireTap(""direct:a"").id(""wiretap_1"").to(""log:a"");
from(""direct:a"").to(""log:b"");
{code}
I always got IndexOutOfBoundsException:
{color:red}
Exception in thread ""main"" java.lang.IndexOutOfBoundsException: Index: -1
	at java.util.Collections$EmptyList.get(Collections.java:3212)
	at org.apache.camel.model.ProcessorDefinition.id(ProcessorDefinition.java:1025)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap$1.configure(TestWiretap.java:14)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:650)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap.main(TestWiretap.java:10)
{color}
I tried on 2.11.1, 2.11.2-SNAPSHOT, both of them have the same problem (not sure 2.12-SNAPSHOT).",,gangliu,mfshen,njiang,ttoommbb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,342078,,,Thu Aug 08 02:46:29 UTC 2013,,,,,,,,,,,"0|i1mztz:",342383,,,,,,,,,,,,,,,,,,,,"08/Aug/13 00:50;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.;;;","08/Aug/13 02:46;gangliu;Great, Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,
CXF FailoverFeature does not take effect when camel-cxf producer uses async invocation,CAMEL-6609,12661997,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/Aug/13 23:42,19/Aug/13 03:09,14/Jul/23 05:49,19/Aug/13 03:09,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,"CAMEL-6602 shows an user case which using the CXF failover feature within camel-cxf, the CXF failover feature doesn't work when the CxfProducer uses the async invocation.",,avina,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,342001,,,Mon Aug 19 03:09:02 UTC 2013,,,,,,,,,,,"0|i1mzcv:",342306,,,,,,,,,,,,,,,,,,,,"19/Aug/13 03:09;njiang;Applied patch into master and camel-2.11.x and camel-2.10.x branches.

The code should be updated once we move to new version of CXF which has the local fix.;;;",,,,,,,,,,,,,,,,,,,,,,,
Tokenize XML does not support child elements with names similar to their parent,CAMEL-6607,12661890,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pjwalstrom,pjwalstrom,05/Aug/13 14:11,06/Aug/13 23:17,14/Jul/23 05:49,06/Aug/13 23:17,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,2,,,,,,,"This XML will not split on Trip, as Trip has a child which starts with Trip
<Trip>
<Triptype>
</Triptype>
</Trip>

The bug was introduced in https://issues.apache.org/jira/browse/CAMEL-6004
I believe the regex in TokenXMLExpressionIterator needs to be fixed

see enclosed test",,njiang,pjwalstrom,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6004,,,,,,,"05/Aug/13 14:12;pjwalstrom;TokenizerTest.java;https://issues.apache.org/jira/secure/attachment/12596120/TokenizerTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341894,,,Tue Aug 06 23:17:31 UTC 2013,,,,,,,,,,,"0|i1mypb:",342200,,,,,,,,,,,,,,,,,,,,"06/Aug/13 06:01;njiang;Yeah, it's a bug of SCAN_BLOCK_TOKEN_REGEX_TEMPLATE, it should make sure it skip the validate xml token.
I will commit the code after running the whole tests.;;;","06/Aug/13 23:17;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
"When restart camel, lucene index folder always by empty",CAMEL-6606,12661862,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,terrymanu,terrymanu,05/Aug/13 10:42,23/Aug/13 10:34,14/Jul/23 05:49,23/Aug/13 10:34,2.11.1,,,,,,,,2.11.2,2.12.0,,,,,,,,,0,,,,,,,"When restart camel, lucene index folder always be empty.
I check the source code. It is in class LuceneIndexer line 145, method openIndexWriter. It seems when camel start, will create a new lucene index folder. Because the variable ""indexCreated"" cannot set by outside. ",,davsclaus,terrymanu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341866,,,Fri Aug 23 10:34:54 UTC 2013,,,,,,,,,,,"0|i1myj3:",342172,,,,,,,,,,,,,,,,,,,,"23/Aug/13 10:34;davsclaus;The indexer should now use create or append, so it ought to reuse existing index if already exists.;;;",,,,,,,,,,,,,,,,,,,,,,,
Custom HttpClientConfigurer makes Basic Authentication and Proxy settings ineffective,CAMEL-6605,12661425,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,drasil,drasil,02/Aug/13 16:30,26/Aug/13 15:14,14/Jul/23 05:49,26/Aug/13 15:14,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,"When custom HttpClientConfigurer is defined for http4-based endpoint as described in the component documantation, the basic authentication and proxy settings are ignored. I am not sure whether this is a bug or feature, but it should be either fixed or documented.

The reason is, that basic authentication and proxy settings are also realized using HttpClientConfigurer and the custom one overrides this one in org.apache.camel.component.http4.HttpComponent.createEndpoint():
1.) Custom HttpClientConfigurer is detected in the parameters map and the parameter is removed from the map (line 188)
2.) Compound HttpClientConfigurer for Basic authentication and Proxy settings is created by the createHttpClientConfigurer() method (line 218). The method tries to detect also the custom HttpClientConfigurer, but its declaration was already removed from the parameters map.
3.) New HttpEndpoint instance is created using the compound HttpClientConfigurer for Basic authentication and Proxy settings (line 221)
4.) Custom HttpClientConfigurer is set to the endpoint instance which overrides the original one (line 277)",,davsclaus,drasil,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341614,,,Mon Aug 26 15:10:35 UTC 2013,,,,,,,,,,,"0|i1mwzb:",341921,,,,,,,,,,,,,,,,,,,,"26/Aug/13 15:10;davsclaus;Yeah that seems wrong.;;;",,,,,,,,,,,,,,,,,,,,,,,
Routing slip and dynamic router EIP - Stream caching not working,CAMEL-6604,12661371,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Aug/13 09:59,03/Aug/13 07:46,14/Jul/23 05:49,03/Aug/13 07:46,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/stream-caching-to-HTTP-end-point-tp5736608.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341560,,,2013-08-02 09:59:14.0,,,,,,,,,,,"0|i1mwnb:",341867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf ClassCastException when use cxf FailoverFeature,CAMEL-6602,12661341,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,avina,avina,02/Aug/13 06:58,08/Aug/13 02:50,14/Jul/23 05:49,08/Aug/13 02:50,2.9.7,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,"With PAYLOAD data format used, the first element in argument is casted to a CxfPayload instance and the argument is changed into a List<DOMSource> instance by the method ""setParameters"" in class org.apache.camel.component.cxf.CxfEndpoint.
Then FailoverFeature calls retry, the class-cast action throws a ClassCastException.
btw: ""message.remove(DataFormat.class)"" at the end of the method ""setParameters"" dosn't work. The method ""remove"" is inherited from Map, and a new message with data format PAYLOAD is created when retry.
",,avina,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Aug/13 00:13;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12595707/test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341530,,,Wed Aug 07 00:50:33 UTC 2013,,,,,,,,,,,"0|i1mwgn:",341837,,,,,,,,,,,,,,,,,,,,"02/Aug/13 08:13;njiang;Can you submit a simple test case for us to dig the issue?;;;","03/Aug/13 00:13;avina;a test case;;;","05/Aug/13 01:11;avina;About the test case:
I compared PAYLOAD with POJO. Both tests failed when the ""synchronous"" property set to ""false"". That's another problem I found. 
With ""synchronous=true"", POJO test passed but PAYLOAD test stuck.
A ClassCastException was thrown at line 869 in CxfEndpoint.java .
Detail:
 javax.xml.transform.dom.DOMSource cannot be cast to org.apache.camel.component.cxf.CxfPayload;;;","05/Aug/13 12:56;njiang;I just fixed the ClassCastException, but it may take me some time to fix the synchronous issue.;;;","07/Aug/13 00:50;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.
Please check out the latest snapshot for verification.;;;",,,,,,,,,,,,,,,,,,,
camel-netty-http - Must include HOST header in client and server must validate HOST header exists,CAMEL-6599,12661123,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Aug/13 12:56,01/Aug/13 12:57,14/Jul/23 05:49,01/Aug/13 12:57,2.12.0,,,,,,,,2.12.0,,,,camel-netty,,,,,,0,,,,,,,"The HTTP 1.1 spec requires a HOST header
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html

The client should include the host
And the server should validate and send back http code 400 if HOST header is missing.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341312,,,2013-08-01 12:56:27.0,,,,,,,,,,,"0|i1mv6n:",341630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cmis component: test packages have the wrong name,CAMEL-6595,12660938,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,mturatti,mturatti,31/Jul/13 17:00,01/Aug/13 04:19,14/Jul/23 05:49,01/Aug/13 04:19,2.12.0,,,,,,,,2.11.2,2.12.0,,,,,,,,,0,cmis,test-patch,,,,,"Unit tests for camel-cmis are under package org.apache.camel.componenet instead of org.apache.camel.component

Actions:
1) Rename folder src/test/java/org/apache/camel/componenet to src/test/java/org/apache/camel/component/
2) Fix the package name in each unit test

Affected version: 2.12-SNAPSHOT and before",,mturatti,njiang,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,"31/Jul/13 17:03;mturatti;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12595211/patchfile.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,341127,,,Thu Aug 01 04:19:19 UTC 2013,,,,,,,Patch Available,,,,"0|i1mu1j:",341445,,,,,,,,,,,,,,,,,,,,"31/Jul/13 17:03;mturatti;this is a patch generated with ""git diff --no-prefix > patchfile.txt"" on my own issue branch

I think you have to manually rename the test folder as mentioned in the issue description.;;;","01/Aug/13 04:19;njiang;Applied patch with thanks to Maurizio.;;;",,,,,,,,,,,,,,,,,,,,,,
Predicates from java dsl are not dumped to xml correctly,CAMEL-6593,12660890,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davidkeen,davidkeen,31/Jul/13 11:37,23/Aug/13 07:52,14/Jul/23 05:49,23/Aug/13 07:52,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"Predicates defined in the java dsl are not dumped to xml when using jmx.

Eg, this java dsl route:
{code}
from(""seda:a"").choice().when(header(""test"").isNotNull()).log(""not null"").end().to(""mock:a"");
{code}

Will be dumped as this:
{code}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route group=""com.example.TestRoute"" id=""route1"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""seda:a""/>
    <choice id=""choice23"">
        <when id=""when24"">
            <expressionDefinition/>
            <log message=""not null"" id=""log20""/>
        </when>
    </choice>
    <to uri=""mock:a"" id=""to17""/>
</route>
{code}

The <expressionDefinition> element should contain the expression.

This seems similar to CAMEL-4733.",,davidkeen,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6664,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,341079,,,Fri Aug 23 07:52:20 UTC 2013,,,,,,,,,,,"0|i1mtqv:",341397,,,,,,,,,,,,,,,,,,,,"31/Jul/13 11:46;davidkeen;Also seems to affect setting properties. Eg:
{code}
.setProperty(""foo"").constant(""bar"")
{code}

Gets dumped with an empty expressionDefinition tag as well.;;;","23/Aug/13 07:09;davsclaus;This is expected as these builders cannot be represented in plain text, such as simple etc can do.

Though in the future we may be able to map these to a simple text expression we can use to dump eg
{code}
<simple>${header.test} != null</simple>
{code}
;;;","23/Aug/13 07:52;davsclaus;We now dump the predicate in the model though its just a toString representation of the predicate that the ValuerBuilder has built. But at least you can see some information now.;;;",,,,,,,,,,,,,,,,,,,,,
Invalid javadoc for org.apache.camel.spi.ShutdownStrategy#setTimeout,CAMEL-6592,12660696,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,antoine.dessaigne,antoine.dessaigne,30/Jul/13 16:06,05/Aug/13 23:29,14/Jul/23 05:49,05/Aug/13 23:29,2.11.1,2.11.2,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,javadoc,,,,,,"The javadoc of {{org.apache.camel.spi.ShutdownStrategy#setTimeout}} is invalid.

It says that it's possible to set a negative or 0 value but the default implementation {{org.apache.camel.impl.DefaultShutdownStrategy#setTimeout}} will throw an {{IllegalArgumentException}}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,340886,,,Wed Jul 31 03:25:03 UTC 2013,,,,,,,,,,,"0|i1msjz:",341204,,,,,,,,,,,,,,,,,,,,"31/Jul/13 03:25;njiang;The IlleagelArgumentException is set by CAMEL-6341. I will go ahead and update the java doc.;;;",,,,,,,,,,,,,,,,,,,,,,,
JMX - browsable endpoints such as seda has some attributes listed as unavaiable,CAMEL-6586,12660339,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/13 09:09,22/Aug/13 13:24,14/Jul/23 05:49,22/Aug/13 13:21,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,jmx,,,,,0,,,,,,,"See screenshot

The problem is related to extending a ManagedEndpoint then some options is shown as unavaiable in JMX consoles.",,davsclaus,saltnlight5,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6660,,,,,,,,,,,"22/Aug/13 03:53;saltnlight5;CAMEL-6586.patch;https://issues.apache.org/jira/secure/attachment/12599350/CAMEL-6586.patch","22/Aug/13 04:24;saltnlight5;CAMEL-6586v2.patch;https://issues.apache.org/jira/secure/attachment/12599353/CAMEL-6586v2.patch","29/Jul/13 09:09;davsclaus;Screen Shot 2013-07-29 at 11.07.33 AM.png;https://issues.apache.org/jira/secure/attachment/12594651/Screen+Shot+2013-07-29+at+11.07.33+AM.png",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,340531,,,Thu Aug 22 13:21:46 UTC 2013,,,,,,,,,,,"0|i1mqd3:",340849,,,,,,,,,,,,,,,,,,,,"22/Aug/13 03:53;saltnlight5;Patch attached.

The bug seems to be caused by SedaEndpoint.java has explicitly added a {{@ManagedResource(description = ""Managed SedaEndpoint"")}} on class declaration that prevented the normal {{BrowsableEndpoint}} to be registered in JMX. I presume it's added by mistake originally, and the fix is simply to remove it. 

The fix will now shows {{seda}} endpoint with typical browsable endpoint attributes.;;;","22/Aug/13 04:24;saltnlight5;Patch v2 attached.

Actually, on second thought, I do see that there are many properties in {{SedaEndpoint.java}} are annotated as managed attributes. So it's not an mistake to have the @ManageResource then. If this is the case, then I have a second patch, which is to override the two ""Unavialable"" attributes to properly return correct values.;;;","22/Aug/13 04:43;saltnlight5;Despite the patch v2 fixed the problem, but having these two managed attribute methods added directly into SedaEndpoint.java class seems not clean. There is probably a more correct place to add these. It's late now, so I will leave it for another night to look further into.;;;","22/Aug/13 13:11;davsclaus;Yeah its on purpose - its just that when having custom attributes/operations and also wanting to inheirt the default attributes/operations then JMX doesnt cope with that too well.;;;","22/Aug/13 13:21;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,
camel-cxf should shutdown the bus when the endpoint is stopped.,CAMEL-6585,12660327,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/Jul/13 06:29,29/Jul/13 07:26,14/Jul/23 05:49,29/Jul/13 07:26,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,"If the bus is create by cxfEndpoint itself, cxfEndpoint should shutdown it when the endpoint is stopped.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,340519,,,Mon Jul 29 07:26:05 UTC 2013,,,,,,,,,,,"0|i1mqaf:",340837,,,,,,,,,,,,,,,,,,,,"29/Jul/13 07:26;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix a potential NPE,CAMEL-6576,12659885,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Jul/13 20:37,30/Jul/13 14:30,14/Jul/23 05:49,30/Jul/13 14:30,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"org.apache.camel.example.pojo_messaging.CamelContextTest.testCheckFiles

Stacktrace
java.lang.NullPointerException: null
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1626)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1540)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1508)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:476)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:310)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:216)
	at org.apache.camel.example.pojo_messaging.CamelContextTest.setUp(CamelContextTest.java:32)


See [Jenkins build output|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.spring3.1/229/org.apache.camel$camel-example-pojo-messaging/testReport/junit/org.apache.camel.example.pojo_messaging/CamelContextTest/testCheckFiles/] for details.",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,340077,,,Tue Jul 30 14:30:38 UTC 2013,,,,,,,,,,,"0|i1mnkv:",340395,,,,,,,,,,,,,,,,,,,,"27/Jul/13 10:05;davsclaus;See CAMEL-6485

We need to find a solution that has the performance improvements from CAMEL-6485 and avoids the NPE;;;","30/Jul/13 08:23;davsclaus;I think I found a solution, doing some testing now.;;;","30/Jul/13 14:30;davsclaus;Okay the JMX initialization logic was a bit more elaborate and thus decided to keep it on master only, to keep existing branches stable as is.;;;",,,,,,,,,,,,,,,,,,,,,
FTP consumer does not detect file changes,CAMEL-6574,12659664,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,albertob,albertob,24/Jul/13 21:05,11/Nov/13 11:30,14/Jul/23 05:49,11/Nov/13 11:21,2.11.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-ftp,,,,,,0,,,,,,,"I have a route with an FTP consumer with the following options:

delay=1800000
disconnect=true
fileName=xxxxx.yyy
idempotent=true
idempotentKey=${file:name}-${file:size}
maxMessagesPerPoll=1
noop=true
readLock=changed
sortBy=file:modified

Upgrading from camel 2.11.0 to 2.11.1 the FTP consumer does not detect changes in the file.
I tried several idempotentKey without success.
Reverting to 2.11.0 works all fine.

I did not find any relevant info in the release notes.","GNU/Debian 6.0, Java 1.7 ",albertob,clee,davsclaus,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6936,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,339856,,,Mon Nov 11 11:21:00 UTC 2013,,,,,,,,,,,"0|i1mm7r:",340174,,,,,,,,,,,,,,,,,,,,"27/Jul/13 17:11;davsclaus;As we say on the file/ftp component docs in the bottom
http://camel.apache.org/ftp2

Enable TRACE logging and see what happens on your system.;;;","06/Aug/13 16:36;clee;I had a similar issue and stepped through the code. IMHO, it has to do with the end point's internal inprogressIdempotentRepository not clearing under certain circumstances.

The problem arise when you use have file names that do not change. In this case, you typically use the new custom idempotent key:

        from(""ftp://"" + this.user
                + ""@"" + this.host
                + "":"" + this.port
                + this.ftpDir.trim()
                + ""?password="" + this.pass
                // Poll every minute
                + ""&delay=60000""
                // Site is Read-Only, so do not attempt any operation on remote FTP.
                // NOTE: This implies idempotent=true
                + ""&noop=true""
                // Add timestamp to the key, so that we only process files that are new
                + ""&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}""
                // Use PASV FTP
                + ""&passiveMode=true"").
                routeId(this.getClass().getSimpleName()).
                to(""log:com.psi.camel?showAll=true&multiline=true"").
                to(""file://"" + dir.getAbsolutePath()
                + ""?fileName="" + fileName
                + ""&autoCreate=true""
                + ""&fileExist=Override"");

When the route executes the first time, all files are new (since its a memory based cache), and all is fine:
a) Filenames added to inprogress cache, 
b) custom idempotent keys added to end point idempotent cache, 
c) files processed
d) inprogress cache cleared.

When the route runs again,
a) Filenames added to inprogress cache, 
b) custom idempotent keys exists, 
c) files not processed
d) inprogress cache not cleared.

Hope this helps.

Thanks vm;;;","22/Aug/13 14:10;davsclaus;Added unit tests. Works fine on trunk. The file is picked up again if its changed such as length etc.;;;","21/Oct/13 13:54;albertob;Still having problems using SFTP consumer. Trace the component gives no additional information.

Endpoint configuration:

sftp://username@host//dirname?delay=1800000&disconnect=true&fileName=FILENAME&idempotentKey=$simple{file:name}-$simple{file:modified}-$simple{file:size}&idempotentRepository=#fileStore&maxMessagesPerPoll=1&noop=true&password=xxxxxx&readLock=changed&sortBy=file:modified

Log:
2013-10-21 15:26:57,921 TRACE SftpConsumer - SftpFile[fileName=FILENAME, longName=-rwxr-xr-x    1 User Group   1504500 Oct 21 12:16 FILENAME, dir=false]
2013-10-21 15:26:57,925 TRACE SftpConsumer - This consumer is idempotent and the file has been consumed before. Will skip this file: RemoteFile[dirname/FILENAME]

I tried both inMemory and file idempotent key repository but the behaviour is always the same. Looking in the file repository I can see the old key  that is different from that of the current file, but the consumer always says that the file has been consumed before.
;;;","29/Oct/13 12:17;albertob;Just a bit more.
The sftp server on test was an openssh on Windows. Now I tried with a sftp server on Linux and the behaviour is the same. The changes of the file are not detected.;;;","11/Nov/13 11:21;davsclaus;Fixed by CAMEL-6936;;;",,,,,,,,,,,,,,,,,,
adjust to the changed behavior in ehcache's CacheManager instance creation,CAMEL-6573,12659619,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,24/Jul/13 16:55,30/Jul/13 13:33,14/Jul/23 05:49,30/Jul/13 13:33,2.10.6,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cache,,,,,,0,,,,,,,"ehcache changed its cache manager creation behavior from version 2.5.1 to 2.5.2 and up. The previously used method no longer creates a new instance in the later version but simply returns a singlton instance. So this change needs to be accommodated in camel-cache.
",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,339812,,,2013-07-24 16:55:10.0,,,,,,,,,,,"0|i1mly7:",340131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Validator component - Loading resource on classpath with relative paths doesnt work in OSGi,CAMEL-6572,12659560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,24/Jul/13 12:59,26/Jul/13 14:39,14/Jul/23 05:49,26/Jul/13 14:39,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"When loading a resource on the classpath with the validator component that uses xsd that imports other xsd's, and they import xsd using relative paths with ../.. to go back in the path, then that fails

an example
{code}
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: schema/../../../structures/2.0/structures.xsd
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsInputStream(ResourceHelper.java:106)
{code}

",,davsclaus,njiang,xiaohui.wu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,339753,,,Fri Jul 26 14:39:45 UTC 2013,,,,,,,,,,,"0|i1mll3:",340072,,,,,,,,,,,,,,,,,,,,"24/Jul/13 15:03;davsclaus;Darn some more work is needed.;;;","24/Jul/13 16:02;davsclaus;Could be CAMEL-5837 causing this regression;;;","25/Jul/13 02:38;njiang;CAMEL-5837 is trying to build the relative path by looking up the baseURI from the SystemId. There is a object member relatedURI to trace the relative path. I guess this may cause some issue when the import xsd using relative paths which is related to the root of class path.;;;","26/Jul/13 08:35;njiang;This issue is caused by when the schema are imported more than once, the DefaultLSResourceResolver doesn't keeping tracking the resourceURI rightly.
;;;","26/Jul/13 14:39;njiang;Applied the patch into trunk, camel-2.11.x branches.;;;",,,,,,,,,,,,,,,,,,,
Wrong InputStream reference is used in method storeFile of class ScpOperations,CAMEL-6571,12659547,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,andeng,andeng,24/Jul/13 10:43,27/Jul/13 17:17,14/Jul/23 05:49,27/Jul/13 17:17,2.11.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jsch,,,,,,0,,,,,,,"In method {{storeFile(String name, Exchange exchange)}} of class {{org.apache.camel.component.jsch.ScpOperations}} the wrong reference of the required input stream is used (line 131). Should be 

{{write(channel, file, is, cfg);}} 

instead of 

{{write(channel, file, exchange.getIn().getMandatoryBody(InputStream.class), cfg);}}",,andeng,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,339740,,,Sat Jul 27 17:17:08 UTC 2013,,,,,,,,,,,"0|i1mli7:",340059,,,,,,,,,,,,,,,,,,,,"27/Jul/13 17:17;davsclaus;Thanks for reporting this.;;;",,,,,,,,,,,,,,,,,,,,,,,
xslt component with saxon=true does not work in OSGi,CAMEL-6569,12659321,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jul/13 12:26,23/Jul/13 12:40,14/Jul/23 05:49,23/Jul/13 12:40,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"This is because camel-core does not import net.sf.saxon optionally where the saxon factory for xslt is located.

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,339514,,,2013-07-23 12:26:42.0,,,,,,,,,,,"0|i1mk4f:",339834,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - unable to consume on UDP multicast addresses,CAMEL-6563,12658582,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,samel,samel,18/Jul/13 18:29,28/May/14 20:17,14/Jul/23 05:49,22/Jul/13 09:13,2.11.0,,,,,,,,2.12.0,,,,camel-netty,,,,,,0,,,,,,,"When using a route to listen to UDP multicast address , no messages seem to get consumed. No exceptions are observed. 

Multicast address is defined as addresses in the range of 224.0.0.0 through 239.255.255.255 (http://en.wikipedia.org/wiki/Multicast_address)

Input was simple string (e.g. ""Test String"")

Example Route:

<route>
     <from uri=""netty:udp://225.1.1.1:8001?allowDefaultCodec=false&sync=false&broadcast=true""/>
</route>

Found an old topic in the user discussion forum that seems related.  Did not find any unit tests in the Camel source code exercising this behavior.  (http://camel.465427.n5.nabble.com/camel-netty-and-multicast-tt4638622.html)","Karaf 2.3.1
Java 7 
Ubuntu 12.04 (64 bit)",davsclaus,githubbot,samel,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7472,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,338776,,,Thu Feb 27 16:29:55 UTC 2014,,,,,,,,,,,"0|i1mfkf:",339096,,,,,,,,,,,,,,,,,,,,"18/Jul/13 20:27;samel;To listen for UDP multicast addresses, I think the code may have to do some different logic when binding to the IP address.  I found this link on the web which may have code that is relevant (http://web.archiveorange.com/archive/v/z6Mf9AWgO1zZ4z3SHvGs)

The camel-netty code currently does this for UDP non-mulicast address (e.g. localhost).  This is in the SingleUDPNettyServerBootstrapFactory.java source file.

Channel channel = connectionlessBootstrap.bind(hostAddress);

I think for UDP multicast address (e.g. 225.1.1.1), it needs to join a group on a particular network interface.  It might looks something like this:

DatagramChannel channel = (DatagramChannel)connectionlessBootstrap.bind(hostAddress);
String networkInterface = configuration.getNetworkInterface() == null ? LOOPBACK_INTERFACE : configuration.getNetworkInterface();
NetworkInterface multicastNetworkInterface = NetworkInterface.getByName(networkInterface);
channel.joinGroup(hostAddress, multicastNetworkInterface);

I think the implication here is that the user might have to specify an interface name as an option of the camel-netty component when using a UDP multicast address.
;;;","19/Jul/13 14:19;samel;Pull request:
https://github.com/apache/camel/pull/31

Pull request developer discussion topic:
http://camel.465427.n5.nabble.com/camel-pull-request-CAMEL-6563-Added-networkInterface-option-and-added-logi-td5735874.html;;;","22/Jul/13 09:13;davsclaus;Thanks for the patch.;;;","27/Feb/14 16:29;githubbot;Github user patels3 closed the pull request at:

    https://github.com/apache/camel/pull/31
;;;",,,,,,,,,,,,,,,,,,,,
Inserting JSON like data with sql component cause a java.lang.StackOverflowError,CAMEL-6561,12658514,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,saltnlight5,saltnlight5,18/Jul/13 13:06,07/Aug/13 10:05,14/Jul/23 05:49,07/Aug/13 10:05,2.11.0,,,,,,,,2.11.2,2.12.0,,,camel-sql,,,,,,0,,,,,,,"I have a simple route use case like this:

{code}
<camel:camelContext id=""camel-server"" xmlns=""http://camel.apache.org/schema/spring"">
		<template id=""producerTemplate""/>
        <route>
			<from uri=""direct:SEND_MEMQ""/>
			<to uri=""sql:INSERT INTO CAMEL_TEST(MSG) VALUES(#)?dataSource=testdbDataSource""/>
			<to uri=""log:camel.demos.throughputtest.tcp.Stat?level=INFO&amp;groupSize=100""/>
        </route>
    </camel:camelContext>
{code}

The DB table is simple one like this:
{code}
/* H2Database */
DROP TABLE CAMEL_TEST;
CREATE TABLE CAMEL_TEST ( 
  ID BIGINT PRIMARY KEY AUTO_INCREMENT,
  MSG VARCHAR(10240),
  CREATE_TS TIMESTAMP DEFAULT NOW()
);
{code}

And then I use the producerTemplate to send a sample JSON content like data message (see attachment) into the ""direct:SEND_MEMQ"" (I read the full file and send it as String), and it produced the following severe error:

{code}
2013-07-18 08:34:00,593 ERROR pool-1-thread-1 [org.apache.camel.processor.DefaultErrorHandler] - Failed delivery for (MessageId: ID-L328BDS002012US-56371-1374150839469-0-1 on ExchangeId: ID-L328BDS002012US-56371-1374150839469-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: {""web-app"": {
... 
... [Body clipped after 1000 chars, total length is 3467]]
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1354)
        at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:272)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:64)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:390)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60)
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
        at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
        at throughputtest.FileSampleProducer$1.run(FileSampleProducer.java:64)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.StackOverflowError
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
        at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
        at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
        at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
        at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
        at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
        at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)

{code}",,davsclaus,saltnlight5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Jul/13 13:10;saltnlight5;sample1.json;https://issues.apache.org/jira/secure/attachment/12592967/sample1.json",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,338708,,,Wed Aug 07 09:43:03 UTC 2013,,,,,,,,,,,"0|i1mf5b:",339028,,,,,,,,,,,,,,,,,,,,"18/Jul/13 13:10;saltnlight5;Sample data that cause the error.;;;","19/Jul/13 02:41;saltnlight5;Hi,

I see where the problem is now. Since I send input message as plain String, the ""sql"" component automatically converts it to Iterator type for SQL parameters bindings. What's hidden is that default converter will also use a delimiter to parse the string! (I see this in ObjectHelper.java line 601, which uses a RegExp that happens to cause StackOverflowError with the input I give.

I can work around this by actually just send an Iterator type (List<String>) as message type instead of String. It then works as intended and not get the StackOverflowError problem. I should have done this in first place anyway since my input is large and not typical.

If you guys don't see this as problem to fix or improve, then please close it.

Thanks,
Zemian Deng;;;","22/Jul/13 15:35;davsclaus;Yeah we could possible add a new option which tells the sql component to not iterate the body but use it as is, when you have only 1 parameter etc.;;;","22/Jul/13 15:36;davsclaus;Zemian, do you want to work on a patch for such a new option?

Maybe the option is just named {{useIterator}} and is default {{true}}. Then ppl can turn that off.;;;","23/Jul/13 02:48;saltnlight5;Sure Claus,

But before I add new option you suggested, I've discovered couple things that I would like to discuss first:

1) It looks like the latest code in master has a change in DefaultSqlPrepareStatementStrategy.java line  129 that prevented my test case to generate StackOverflowError. With this, it went and parsed the input into array and obviously give error because the size is mismatch to SQL binding parameters count. Which is expected.

However I see that DefaultSqlPrepareStatementStrategy did not check for this String input type when query has namedParameters (starting line 68) though. Is this intended?

2) As I hinted in previous comment, the StackOverflowError is really comes from ObjectHelper class. This is more concern to me. You can duplicate this bug by the following simple test case:
{code}

    @Test
    public void testCreateIteratorWithJsonThatBreakDelimiter() throws Exception {
        String input = readFromClasspath(""sample1.json"");
        Iterator<Object> result = ObjectHelper.createIterator(input);
        Assert.assertEquals(input, result.next());
    }
{code}

That means whoever calls any of these creatIterator() with bad input could potential get into StackOverflowError. The root cause is from ObjectHelper.java line 601. It parses input with some fancy regexp. Since its part of Camel Core, this is too risky and a bad error to expose to users by simply having bad inputs. I would recommend NOT to use that regexp but keep it minimal, fixed delimiter String to avoid this. What's your thought on this?

Zemian;;;","30/Jul/13 10:30;davsclaus;Ad 2)
Working as designed, read the javadoc of the API

Ad 1)
Yes intended as named parameters requires Map like structure (key=value).;;;","30/Jul/13 21:07;saltnlight5;Hi Claus,

For 1) Okay I see. Thanks for clarifying.

For 2) Do you mean to read the inline comment in ObjectHelper.java line 591-601, or the ObjectHelper#createIterator() method javadoc. I read both cases, and it doesn't indicate to me that it might throws StackOverflowError if input is String.

Well, I don't want to beat this defect to death. As I said, what changes you guys have in master branch already prevented this StackOverflowError when used with camel-sql in my particular case. Thus you may close this issue as it intended. 

However, I would just like to point out the ObjectHelper#createIterator() could still give StackOverflowError if user give a certain String as input.;;;","07/Aug/13 09:43;davsclaus;If the expected parameters == 1 then we will use the body as is. This will fix this problem.
;;;",,,,,,,,,,,,,,,,
[JDBC Component] ResultMetaData as a header value - IndexOutOfBoundsException,CAMEL-6560,12658473,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rkraus,rkraus,18/Jul/13 08:44,22/Jul/13 12:53,14/Jul/23 05:49,18/Jul/13 11:45,2.11.1,,,,,,,,2.11.2,,,,camel-jdbc,,,,,,0,,,,,,,"The {{java.lang.IndexOutOfBoundsException: Index: 0, Size: 0}} exception is thrown, if select statement returns empty result.

The correction is already made in version 2.12.0, see issue [CAMEL-6157|https://issues.apache.org/jira/browse/CAMEL-6157], but this 'Parametrized queries in JDBC component' issue looks as more complex. 

It will be nice to fix only this exception in version 2.11.2. I attached the extended {{JdbcRSMetaDataTest.java}} and fixed {{JdbcProducer.java}} as patch (based on tag {{camel-2.11.1}}). 
",,davsclaus,rkraus,,,,,,,,,,,,,,,,,,,,,,CAMEL-6566,,,,CAMEL-6157,CAMEL-5383,,,,,,,,"18/Jul/13 08:45;rkraus;camel-jdbc-result-metada.patch;https://issues.apache.org/jira/secure/attachment/12592937/camel-jdbc-result-metada.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,338667,,,Thu Jul 18 11:45:36 UTC 2013,,,,,,,Patch Available,,,,"0|i1mew7:",338987,,,,,,,,,,,,,,,,,,,,"18/Jul/13 11:45;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
AbstractListAggregationStrategy does not work with batch completion strategy,CAMEL-6557,12658255,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mumrah,mumrah,17/Jul/13 13:24,23/Aug/13 09:30,14/Jul/23 05:49,23/Aug/13 09:30,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"When my aggregator extends AbstractListAggregationStrategy, I never get aggregator completions from the batch consumer.

If I change my aggregator to be something like:

{code}
    Foo foo = newExchange.getIn().getBody(Foo.class);
    List<Foo> list = null;
    Exchange outExchange;
    if (oldExchange == null) {
      list = new LinkedList<Foo>();
      list.add(foo);
      newExchange.getIn().setBody(list);
      outExchange = newExchange;
    } else {
      list = oldExchange.getIn().getBody(List.class);
      list.add(foo);
      outExchange = oldExchange;
    }
    return outExchange;
{code}

then it works fine.

I'm guessing this is has something to do with AbstractListAggregationStrategy messing with properties or wrapping the actual exchanges (since the batch completion is triggered based on Exchange.BATCH_SIZE property)",,davsclaus,mumrah,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,338449,,,Fri Aug 23 09:30:00 UTC 2013,,,,,,,,,,,"0|i1mdjr:",338769,,,,,,,,,,,,,,,,,,,,"23/Aug/13 09:30;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
ManagedBacklogTracer implements an incorrectly named ManagedTracerBacklogMBean interface,CAMEL-6549,12657630,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marekw,marekw,14/Jul/13 09:33,16/Jul/13 06:45,14/Jul/23 05:49,16/Jul/13 06:45,2.11.0,,,,,,,,2.12.0,,,,jmx,,,,,,0,,,,,,,"The MBean interface for ManagedBacklogTracer should be named ManagedBacklogTracerMBean rather than ManagedTracerBacklogMBean (see the order  of words) to be compatible with standard MBean naming conventions.

This issue causes problems with some JMX implementations.",,marekw,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337850,,,2013-07-14 09:33:47.0,,,,,,,,,,,"0|i1m9vb:",338172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XQueryBuilder will override any saxon Configuration provided,CAMEL-6548,12657599,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels.bertram,niels.bertram,13/Jul/13 17:47,14/Jul/13 08:50,14/Jul/23 05:49,14/Jul/13 08:50,2.11.2,,,,,,,,2.11.2,2.12.0,,,camel-saxon,,,,,,0,,,,,,,"Sometimes one wants to register a custom extension function {{net.sf.saxon.lib.ExtensionFunctionDefinition}} in the saxon xquery engine context.

When providing {{XQueryBuilder.setConfiguration(Configuration configuration)}} with such configuration, the method will set the context and also set the initialise flag to false (line 378). This will cause {{XQueryBuilder.initialize(Exchange exchange)}} to run next time the builder is used.

Unfortunately the initialize method on line 639 it will create a new saxon Configuration regardless of what was set in the {{XQueryBuilder.setConfiguration()}} and renders this function pretty much useless.

The obvious solution to this problem is to check if the configuration is null before creating a new saxon configuration.",,davsclaus,niels.bertram,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,337820,,,Sun Jul 14 08:50:25 UTC 2013,,,,,,,Patch Available,,,,"0|i1m9on:",338142,,,,,,,,,,,,,,,,,,,,"13/Jul/13 17:57;niels.bertram;Sent a patch together with a unit test as pull request to apache:camel-2.11.x on GitHub. Otherwise the commit on my fork is https://github.com/bertramn/camel/commit/52f26be2d2bf43b8bb35b88cc3984bc2548ddab6.;;;","14/Jul/13 08:19;davsclaus;Willem I am working on this, there is some changes needed on trunk the patch doesn't work with.;;;","14/Jul/13 08:23;njiang;Claus already started to work on this issue.;;;","14/Jul/13 08:50;davsclaus;Thanks for the patch.

Saxon has changed its API in latest release so had to do a few changes.;;;",,,,,,,,,,,,,,,,,,,,
Installation of camel-leveldb feature fails,CAMEL-6547,12657582,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jul/13 11:18,14/Jul/13 20:31,14/Jul/23 05:49,14/Jul/13 20:31,2.11.1,,,,,,,,2.11.2,,,,karaf,,,,,,0,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-leveldb
Error executing command: Could not start bundle wrap:mvn:org.fusesource.leveldbjni/leveldbjni-all/1.6$Bundle-Version=1.6&Export-Package=*;-noimport:=true;version=""1.6"" in feature(s) camel-leveldb-2.11.1: Unresolved constraint in bundle org.fusesource.leveldbjni.leveldbjni-all [62]: No matching native libraries found.
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337803,,,2013-07-13 11:18:24.0,,,,,,,,,,,"0|i1m9kv:",338125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Installation of camel-mybatis feature fails,CAMEL-6546,12657581,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jul/13 11:16,14/Jul/13 20:05,14/Jul/23 05:49,14/Jul/13 20:05,2.11.1,,,,,,,,2.11.2,2.12.0,,,karaf,,,,,,0,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-mybatis
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-dbcp/1.4_3 in feature(s) camel-quartz-2.11.1, camel-jpa-2.11.1, camel-bam-2.11.1, camel-mybatis-2.11.1, camel-ibatis-2.11.1: Unresolved constraint in bundle org.apache.servicemix.bundles.commons-dbcp [64]: Unable to resolve 64.0: missing requirement [64.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337802,,,Sun Jul 14 20:05:37 UTC 2013,,,,,,,,,,,"0|i1m9kn:",338124,,,,,,,,,,,,,,,,,,,,"14/Jul/13 20:05;muellerc;A work around for Camel 2.11.1 is to install camel-spring before.;;;",,,,,,,,,,,,,,,,,,,,,,,
StringQuoteHelper should skip the separate character,CAMEL-6544,12657561,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,13/Jul/13 03:01,17/Jul/13 08:46,14/Jul/23 05:49,17/Jul/13 08:46,2.11.0,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"The StringQuoteHelper.splitSafeQuote can not split the invocation string like this
""*, '', 'arg3'""
The third parameter should be ""arg3"" but camel 2.11.0 treat it as "",arg3"".
Here is [the mail thread| http://camel.465427.n5.nabble.com/Bean-Method-Invocation-regression-in-2-11-tp5735576.html] which discuses about it. ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337782,,,2013-07-13 03:01:16.0,,,,,,,,,,,"0|i1m9g7:",338104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultUnitOfWork's headers for the original message are the same object as the in message headers,CAMEL-6541,12657290,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,uvapalmer,uvapalmer,11/Jul/13 16:51,18/Jul/13 08:25,14/Jul/23 05:49,11/Jul/13 21:01,2.8.6,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,camel-jms,,,,,0,,,,,,,"For jms messages, the useOriginalMessage does not work when headers are changed during the route because the DefaultUnitOfWork's headers are the same object as the in message's headers.

In DefaultUnitOfWork, this.originalInMessage.setHeaders(exchange.getIn().getHeaders()); should be changed to create a copy of the headers instead of directly assigning.

Maybe changed to this.originalInMessage.setHeaders((Map<String,Object>) new CaseInsensitiveMap(exchange.getIn().getHeaders()));",,davsclaus,uvapalmer,,,,,,,,,,,,,,,,,,,,,CAMEL-6558,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,337512,,,Thu Jul 11 17:10:05 UTC 2013,,,,,,,,,,,"0|i1m7sf:",337835,,,,,,,,,,,,,,,,,,,,"11/Jul/13 17:10;davsclaus;Well spotted;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty - Add option to enrich Camel message with client certificate details to make it easy to get these details,CAMEL-6540,12657283,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/13 16:02,11/Jul/13 16:07,14/Jul/23 05:49,11/Jul/13 16:07,,,,,,,,,2.12.0,,,,camel-netty,,,,,,0,,,,,,,"Adding a new option {{sslClientCertHeaders}} which can be set to true, and then Camel Netty consumer will enrich the Message with headers that has the client certificate information out of the box.

This allows end users to get this details a bit easier, for example to be used in content based routing without having to code to get the details.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337505,,,2013-07-11 16:02:28.0,,,,,,,,,,,"0|i1m7qv:",337828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in validator component if no classpath prefix,CAMEL-6538,12657221,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/13 08:54,11/Jul/13 08:57,14/Jul/23 05:49,11/Jul/13 08:57,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"There is a potentail NPE in validator component
{code}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.validator.DefaultLSResourceResolver.resolveResource(DefaultLSResourceResolver.java:73)
        at com.sun.org.apache.xerces.internal.util.DOMEntityResolverWrapper.resolveEntity(DOMEntityResolverWrapper.java:109)
        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:1056)
...
{code}

When the resource loader tries to load the XSD, I get a null pointer exception thrown as there is no path before the file name and the DefaultLSResourceResolver trying to call intern() on a null value.  ",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337443,,,2013-07-11 08:54:42.0,,,,,,,,,,,"0|i1m7d3:",337766,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Routing slip EIP - Does not send ExchangeSentEvent notifications,CAMEL-6537,12657069,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Jul/13 13:31,10/Jul/13 14:10,14/Jul/23 05:49,10/Jul/13 14:10,2.10.0,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-core,eip,,,,,0,,,,,,,"When using routing slip eip, then we only get the ExchangeSendingEvent, what we miss is the ExchangSentEvent.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337292,,,2013-07-10 13:31:42.0,,,,,,,,,,,"0|i1m6fj:",337615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test-blueprint - Using isMockEndpointsAndSkip doesnt work,CAMEL-6524,12656868,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Jul/13 14:42,10/Jul/13 10:21,14/Jul/23 05:49,10/Jul/13 10:21,,,,,,,,,2.11.2,2.12.0,,,camel-test,osgi,,,,,0,,,,,,,"Reported here:
http://fusesource.com/forums/thread.jspa?threadID=4835&tstart=0

Works with Spring but fails with blueprint.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,337091,,,2013-07-09 14:42:00.0,,,,,,,,,,,"0|i1m57b:",337414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina and camel-mina2 fail when configured with Spring or blueprint,CAMEL-6516,12656560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,viecili,viecili,08/Jul/13 06:35,10/Jul/13 09:29,14/Jul/23 05:49,10/Jul/13 06:06,2.10.4,2.11.0,,,,,,,2.10.7,2.11.1,2.12.0,,camel-mina,camel-mina2,,,,,0,,,,,,,"A user following the documentation at http://camel.apache.org/mina.html#MINA-ConfiguringMinaendpointsusingSpringbeanstyle will face an IllegalArgumentException because org.apache.camel.component.mina2.Mina2Component.createEndpoint(Mina2Configuration) calls createEndpoint(null, config) and does not implement/override org.apache.camel.impl.DefaultEndpoint.createEndpointUri()
 


Stack Trace:
java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.mina2.Mina2Endpoint does not implement createEndpointUri() to create a default value
        at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:154)
(...)


Workaround: define the endpoint inline with mina:tcp://[host]...",,njiang,viecili,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,336783,,,Wed Jul 10 06:06:03 UTC 2013,,,,,,,,,,,"0|i1m3av:",337106,,,,,,,,,,,,,,,,,,,,"08/Jul/13 07:11;njiang;You can workaround it by applying the endpoint uri parameter yourself when creating the mina endpoint.
{code}
<bean id=""myMinaEndpoint""
      factory-bean=""myMinaFactory""
      factory-method=""createEndpoint"">
    <!-- pass the endpoint uri into the createEndpoint method -->
    <constructor-arg index=""0"" val=""mina://myMinaConfig"" />
    <!-- and here we can pass it our configuration -->
    <constructor-arg index=""1"" ref=""myMinaConfig""/>
</bean>
{code} ;;;","08/Jul/13 08:02;njiang;I just did a simple test on the camel trunk, the endpointUri will be set with the endpoint name like ""myMinaEndpoint"". I will updated the code by using the endpoint uri which can reflects the config setting. ;;;","08/Jul/13 12:57;viecili;bare in mind the method taking these 2 arguments is 'protected' as it may affect other injection frameworks;;;","10/Jul/13 06:06;njiang;Applied the patch into master and camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,
SFTP: NPE if no private key file is supplied,CAMEL-6514,12656379,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joerg,joerg,05/Jul/13 14:10,10/Jul/13 16:39,14/Jul/23 05:49,10/Jul/13 16:39,2.10.4,2.11.0,,,,,,,2.10.7,2.11.1,2.12.0,,camel-ftp,,,,,,0,,,,,,,"Hi,
a NPE is thrown if no private key file is supplied in the configuration for SFTP. The error is
Caused by: java.lang.NullPointerException: while trying to get the length of an array loaded from local variable 'foo'
at com.jcraft.jsch.Buffer.putString(Buffer.java:59)
I have analysed the code a bit and found that the problem is caused
by the class SftpOperations. The method createSession sets the userInfo for the seesion by an inline class. Here the method promptKeyboardInteractive does not work correctly if no private key file is supplied. In that case JSCH switches to user/pw authorization and this method is called. But since there is no password maintained the configation object returns NULL. The present implementation adds it to the string array causing the error in JSCH. JSCH either wants a NULL string array or an empty string array (I have tested both). So the code should look e.g. as follows:

            public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {
                String password = configuration.getPassword();
                if (password == null) {
                    return new String[0];
                } else {
                    return new String[] { password };
                }
            }
With that change JSCH returns
Caused by: java.io.FileNotFoundException: ./data/ssh/id_rsa (No such file or directory)
	at java.io.FileInputStream.open(Native Method)

and that is the real cause of the error 

Best Regards,

Jörg 
",,davsclaus,joerg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,336602,,,Wed Jul 10 16:39:23 UTC 2013,,,,,,,,,,,"0|i1m26n:",336925,,,,,,,,,,,,,,,,,,,,"10/Jul/13 16:39;davsclaus;Thanks for reporting and with the solution.;;;",,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.main.Main#doStop() throws java.lang.IndexOutOfBoundsException,CAMEL-6504,12655732,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,svenb,svenb,02/Jul/13 08:55,03/Jul/13 02:22,14/Jul/23 05:49,03/Jul/13 02:22,2.10.4,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"When calling a Camel application with parameter -h all parameters are printed an the program exits.
But it is no clean exit; it throws an java.lang.IndexOutOfBoundsException.

The reason for this is the expression in doStop():
+
----
getCamelContexts().get(0).stop();
----

get(0) returns null, if no context is initialized yet.

See camel-users mailinglist, thread ""Bug in org.apache.camel.main.Main#doStop() ?""
",,njiang,svenb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,336007,,,Wed Jul 03 02:22:14 UTC 2013,,,,,,,,,,,"0|i1lyiv:",336331,,,,,,,,,,,,,,,,,,,,"03/Jul/13 02:22;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
Complete Aggregation on route stop broken,CAMEL-6503,12655647,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kkartaltepe,kkartaltepe,01/Jul/13 20:16,02/Jul/13 21:32,14/Jul/23 05:49,02/Jul/13 21:32,2.10.4,2.11.0,,,,,,,2.9.2,,,,camel-core,,,,,,5,aggregator,forceCompletionOnStop,gracefulshutdown,RejectedExecutionException,stopRoute,,"When attempting to stop a route that has exchanges in flight they should be processed and aggregated before shutdown but instead they all throw RejectedExecutionException and are not processed.
In camel 2.9.2 they are processed and aggregated as expected before the route is shutdown. But the same code does not work in any further versions of camel.
Attached is a sample test that displays the above error. Simply changing the version of camel will cause the test to pass.",,tetoconsusport,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/13 20:17;kkartaltepe;CamelBugDemo.tar.gz;https://issues.apache.org/jira/secure/attachment/12590295/CamelBugDemo.tar.gz",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,335922,,,Tue Jul 02 21:32:27 UTC 2013,,,,,,,,,,,"0|i1lxzz:",336246,Regression,,,,,,,,,,,,,,,,,,,"01/Jul/13 20:17;kkartaltepe;Sample test project showcasing error.;;;","02/Jul/13 21:32;kkartaltepe;Dependency issue between ActiveMQ 5.6 depending on camel-jms 2.9.2 which conflicted with other version of camel.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-cxf-transport's blueprint/camel.xsd xml schema is invalid,CAMEL-6501,12655560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dkulp,ay,ay,01/Jul/13 09:39,01/Jul/13 21:13,14/Jul/23 05:49,01/Jul/13 21:13,2.11.0,,,,,,,,2.11.2,,,,camel-cxf,,,,,,0,,,,,,,"camel.xsd has the following fragment:

    33      <xsd:element name=""destination"">
    34          <xsd:complexType>
    35              <xsd:complexContent>
    36                  <xsd:extension base=""beans:Tcomponent""/>
    37                  <!-- here we need to specify the CamelContext reference -->
    38                  <xsd:attribute name=""camelContextId"" type=""xsd:string"" />
    39              </xsd:complexContent>
    40          </xsd:complexType>
    41      </xsd:element>


The ""attribute"" element appears in complexContent, which is not allowed according to the xml schema spec, consequently when using the schema, it results in the following validation error.

org.xml.sax.SAXParseException; systemId: jar:file:/C:/maven/repo/org/apache/camel/camel-cxf-transport/2.12-SNAPSHOT/camel-cxf-transport-2.12-SNAPSHOT.jar!/schema/blueprint/camel.xsd; lineNumber: 38; columnNumber: 74; s4s-elt-invalid-content.1: The content of '#AnonType_destination' is invalid.  Element 'attribute' is invalid, misplaced, or occurs too often.


I think the correct schema should include this attribute element inside the extension element, as shown in
    <xsd:element name=""destination"">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base=""beans:Tcomponent"">
                    <!-- here we need to specify the CamelContext reference --> 
                    <xsd:attribute name=""camelContextId"" type=""xsd:string"" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

thanks.",,ay,dkulp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/13 09:54;ay;camel-cxf-transport-6501.diff;https://issues.apache.org/jira/secure/attachment/12590237/camel-cxf-transport-6501.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,335835,,,Mon Jul 01 21:13:02 UTC 2013,,,,,,,Patch Available,,,,"0|i1lxgn:",336159,,,,,,,,,,,,,,,,,,,,"01/Jul/13 09:54;ay;modified:
components/camel-cxf-transport/src/main/resources/schema/blueprint/camel.xsd;;;","01/Jul/13 21:13;dkulp;This doesn't affect 2.10.5 as that version doesn't have a blueprint version of camel.xsd.;;;",,,,,,,,,,,,,,,,,,,,,,
Copy of GenericFileMessage returns NULL from toString,CAMEL-6499,12655315,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,ales_d,ales_d,28/Jun/13 12:16,02/Jul/13 03:48,14/Jul/23 05:49,02/Jul/13 03:48,2.11.0,,,,,,,,2.12.0,,,,camel-core,,,,,,0,,,,,,,"CAMEL-3060 changed GenericFileMessage#toString to output just file name instead of it's content. However copies of message do not have file field set and thus return null from toString method. In my application actually all routed messages are copies and thus I see just ""null"" in my logs files.

The copies are created by constructor: org.apache.camel.impl.DefaultUnitOfWork.DefaultUnitOfWork(Exchange exchange, Logger logger). The code seems like ""dirty hack"" in sense that it treats JmsMessage specially and all other messages handle by:

this.originalInMessage = exchange.getIn().copy();

There is no override of copy() method (provided by MessageSupport) in GenericFileMessage. This leads to lose of value of the internal file property.

---

I'm not sure if the problem missing override of copy() method or if it is pretty ""legal"" to have GenericFileMessage without file.

I'm, on the other hand, pretty sure that returning NULL from toString() is BAD practise. The method should stick to java.lang.Object behavior if it does not know what to print:

    @Override
    public String toString() {
        // only output the filename as body can be big
        if (file != null) {
            return file.getFileName();
        }
        return getClass().getName() + ""@"" + Integer.toHexString(hashCode());
    }


Ales",,akarpe,ales_d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,335592,,,Tue Jul 02 03:48:00 UTC 2013,,,,,,,,,,,"0|i1lvyn:",335916,,,,,,,,,,,,,,,,,,,,"02/Jul/13 03:48;akarpe;Fixed issue, added unit test, verified against checkstyle and committed in Git trunk as commit id  7b002c732f021f624eb404965f54ac313afd82a3

;;;",,,,,,,,,,,,,,,,,,,,,,,
Karaf features file points to wrong CXF features version,CAMEL-6492,12654912,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,gertvanthienen,gertvanthienen,26/Jun/13 11:27,27/Jun/13 21:24,14/Jul/23 05:49,27/Jun/13 21:24,2.10.5,,,,,,,,2.10.6,,,,karaf,,,,,,0,,,,,,,"The https://repository.apache.org/content/repositories/releases/org/apache/camel/karaf/apache-camel/2.10.5/apache-camel-2.10.5-features.xml file refers to version 2.6.6.1 of the CXF features descriptor, while the Camel 2.10.5 is actually using the CXF 2.6.8 version instead.",,gertvanthienen,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6496,,,,SMX4-1486,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,335189,,,2013-06-26 11:27:38.0,,,,,,,,,,,"0|i1lthb:",335513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Installation of camel-leveldb feature fails,CAMEL-6491,12654808,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Jun/13 20:46,25/Jun/13 21:08,14/Jul/23 05:49,25/Jun/13 21:08,2.10.5,,,,,,,,2.10.6,,,,karaf,,,,,,0,,,,,,,"{noformat}
karaf@root> features:chooseurl camel 2.10.5
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.10.5/xml/features
karaf@root> feature:install camel-leveldb
Error executing command: Could not start bundle mvn:org.apache.camel/camel-leveldb/2.10.5 in feature(s) camel-leveldb-2.10.5: Unresolved constraint in bundle org.apache.camel.camel-leveldb [68]: Unable to resolve 68.0: missing requirement [68.0] package; (&(package=org.fusesource.leveldbjni)(version>=1.3.0)(!(version>=2.0.0)))
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,335085,,,2013-06-25 20:46:01.0,,,,,,,,,,,"0|i1lsuf:",335409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestNG test cases not working correctly with groups,CAMEL-6478,12654262,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mumrah,mumrah,21/Jun/13 22:46,23/Jun/13 09:12,14/Jul/23 05:49,23/Jun/13 07:28,2.11.0,,,,,,,,2.10.6,2.11.1,2.12.0,,camel-test,,,,,,0,,,,,,,"When using the Camel TestNG integration, tests work fine when no -groups are specified, but fail if a group is selected. 

This is due to the default behavior of TestNG's annotations. @BeforeClass, @AfterClass, etc need a ""alwaysRun = true"" argument in order to still run when groups are selected.

This is really a peculiarity in the way TestNG works, but nonetheless, the Camel support classes do not work with TestNG groups",,davsclaus,mumrah,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jun/13 22:50;mumrah;0001-CAMEL-6478-Add-alwaysRun-true-to-TestNG-annotations.patch;https://issues.apache.org/jira/secure/attachment/12589179/0001-CAMEL-6478-Add-alwaysRun-true-to-TestNG-annotations.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,334539,,,Sun Jun 23 07:04:41 UTC 2013,,,,,,,,,,,"0|i1lpiv:",334865,,,,,,,,,,,,,,,,,,,,"23/Jun/13 07:04;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
NULL values are not supported in named parameters,CAMEL-6473,12654096,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,srg,srg,21/Jun/13 07:00,10/Nov/14 21:26,14/Jul/23 05:49,23/Jun/13 07:39,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-sql,,,,,,0,,,,,,,"Due to the bug in the DefaultSqlPrepareStatementStrategy there no ability to use NULL values.

Following query will be failed, if we try to use NULL  as a parameter value:

bq. select a, b from foo where (:#param1 IS NOT NULL AND a > 12 ) OR (:#param2 IS NOT NULL AND b > 12)

We'll get an error: 
{quote}
Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 2, was:1
at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:132) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:74) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:57) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ~[spring-jdbc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
{quote}


Fix is quite simple: iterator implementation (returned by DefaultSqlPrepareStatementStrategy.createPopulateIterator()) should be changed as follows:

{code:java}
                return new Iterator<Object>() {
                    private NamedQueryParser parser = new NamedQueryParser(query);
                    private String nextParam;
                    private boolean done;

                    @Override
                    public boolean hasNext() {
                        if (done) {
                            return false;
                        }
                        
                        if (nextParam == null) {
                            nextParam = parser.next();
                            if (nextParam == null) {
                                done = true;
                            }
                        }
                        return nextParam != null;
                    }

                    @Override
                    public Object next() {
                        if(!hasNext()){
                            throw new NoSuchElementException();
                        }
                        
                        boolean contains = bodyMap != null ? bodyMap.containsKey(nextParam) : false;
                        contains |= headerMap != null ? headerMap.containsKey(nextParam) : false;
                        if (!contains) {
                            throw new RuntimeExchangeException(""Cannot find key ["" + nextParam + ""] in message body or headers to use when setting named parameter in query ["" + query + ""]"", exchange);
                        }
                            
                        // get from body before header
                        Object next = bodyMap != null ? bodyMap.get(nextParam) : null;
                        if (next == null) {
                            next = headerMap != null ? headerMap.get(nextParam) : null;
                        }

                        nextParam = null;
                        return next;
                    }

                    @Override
                    public void remove() {
                        // noop
                    }
                };
{code}
",,camelguy,davsclaus,srg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,334373,,,Sun Jun 23 07:39:47 UTC 2013,,,,,,,,,,,"0|i1lohz:",334699,,,,,,,,,,,,,,,,,,,,"23/Jun/13 07:39;davsclaus;Thanks for reporting and with the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix the frame injection vulnerability in published Javadoc,CAMEL-6470,12653891,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,muellerc,muellerc,muellerc,20/Jun/13 09:09,20/Jun/13 21:43,14/Jul/23 05:49,20/Jun/13 21:43,,,,,,,,,,,,,website,,,,,,0,,,,,,,"Oracle has announced [1], [2] a frame injection vulnerability in Javadoc
generated by Java 5, Java 6 and Java 7 before update 22.

The infrastructure team has completed a scan of our current project
websites and identified over 6000 instances of vulnerable Javadoc
distributed across most TLPs. The chances are the project(s) you
contribute to is(are) affected. A list of projects and the number of
affected Javadoc instances per project is provided at the end of this
e-mail.

Please take the necessary steps to fix any currently published Javadoc
and to ensure that any future Javadoc published by your project does not
contain the vulnerability. The announcement by Oracle includes a link to
a tool that can be used to fix Javadoc without regeneration.

The infrastructure team is investigating options for preventing the
publication of vulnerable Javadoc.

[1]
http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html
[2] http://www.kb.cert.org/vuls/id/225657

camel.apache.org        786 vulnerabilities",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,334168,,,2013-06-20 09:09:29.0,,,,,,,,,,,"0|i1ln8f:",334494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
connectionTimeout property is ignored by JavaMail,CAMEL-6464,12653181,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,marcozapletal,marcozapletal,17/Jun/13 12:21,21/Jun/13 15:32,14/Jul/23 05:49,20/Jun/13 20:22,2.10.2,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-mail,,,,,,0,,,,,,,"JavaMail ignores the timeout values set via the connectionTimeout property.

- Within MailConfiguration::createJavaMailProperties the mail.<protocol>.timeout and mail.<protocol>.connectionTimeout parameters are set as long values
- In com.sun.mail.util.PropUtil::getInt (line 141) the property is ignored since it is a long value

Changing the type of connectionTimeout from long to int would be the cleanest solution - another suggestion would be to downcast the connectionTimeout in MailConfiguration::createJavaMailProperties",mail-1.4.5.jar,marcozapletal,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,333504,,,Fri Jun 21 15:32:21 UTC 2013,,,,,,,,,,,"0|i1lj5b:",333832,,,,,,,,,,,,,,,,,,,,"19/Jun/13 21:43;muellerc;Marco, do you consider to provide a patch and an unit test which shows this issue?;;;","20/Jun/13 15:49;marcozapletal;The problem of this issue is that setting a long property on com.sun.mail.util.SocketFetcher::getSocket has no effect. However, providing a good test for it is difficult, since the properties are set on the socket on creation and I get no handle of the socket (through the Camel mail component) after creation. 

I am happy to provide a patch, which I would ""test"" by debugging it before attaching it here. Actually, there are two ways to patch it and both are quite simple: (a) changing the type of connectionTimeout from long to int or (b) downcast the long to an int before setting the mail.<protocol>.timeout value. I would opt for (a) but this may break the API - so I would appreciate your opinion on this before providing the patch.;;;","20/Jun/13 19:24;muellerc;Thanks Marco for reporting this issue. I understood it's hard/impossible to unit test.

I'm also +1 to change the connectionTimeout type from long to int. It's theoretically not backwards compatible, but only if somebody did something like this:
{code}
mailConfiguration.setConnectionTimeout(30000L);
{code}

I think most of the user configure it with the uri or by using
{code}
mailConfiguration.setConnectionTimeout(30000);
{code}
which is backwards compatible.

I will go ahead and and do the proposed fixed in a few minutes. It would be great if you could verify it with the latest SNAPSHOT versions (2.10.x, 2.11.x, 2.12.x). It should be available tomorrow.;;;","21/Jun/13 15:32;marcozapletal;I can verify that 2.11.1-SNAPSHOT fixes this issue. Thank you Christian for the quick fix.;;;",,,,,,,,,,,,,,,,,,,,
camel-quartz - Stateful job - Redeploying bundle/war and having changed endpoint uri issue,CAMEL-6461,12653140,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/13 07:28,22/Jul/13 15:32,14/Jul/23 05:49,22/Jul/13 15:32,2.10.4,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quartz,,,,,,0,,,,,,,"See
http://camel.465427.n5.nabble.com/In-came-quartz-route-after-bundle-update-jobs-are-not-triggred-tp5734196.html

In these situations we should use job.name to name the job unique so when you change the endpoint uri and redeploy the apps/bundles, then camel-quartz can find the old job in the quartz persistent store.

There may be logic needed to lookup using job.name as the unique name in these situations, and then allow endpoint uri options to change over time, such as the cron trigger etc. Which should be adjusted accordingly as well.",,davsclaus,saltnlight5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Jul/13 17:52;saltnlight5;CAMEL-6461-v2.patch;https://issues.apache.org/jira/secure/attachment/12593354/CAMEL-6461-v2.patch","20/Jul/13 05:50;saltnlight5;CAMEL-6461.patch;https://issues.apache.org/jira/secure/attachment/12593321/CAMEL-6461.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,333463,,,Mon Jul 22 15:32:38 UTC 2013,,,,,,,,,,,"0|i1liw7:",333791,,,,,,,,,,,,,,,,,,,,"19/Jul/13 21:33;saltnlight5;Hello Claus,

I can confirm this problem. Further more, this problem only occur if we enabled Quartz clustering. For non-cluster config, the quartz endpoint will remove the job data upon restart.

I also tried by given job.name unique name, but still same problem.

I would propose to look up the endpoint by trigerName and avoid to store the endpointUri into the jobDetail dataMap to avoid this kind of mismatched problem.;;;","20/Jul/13 05:50;saltnlight5;I have a patch (git diff) that changed the lookup of endpoint by trigger name and group. This is done in CamelJob.java

Also I have to change QuartzComponent.java on how to handle existing trigger. It didn't set the correct job name/group before. So the patch will do that properly.;;;","20/Jul/13 14:04;saltnlight5;I noticed my patch has cause this test to fail: QuartzCronRouteWithSmallCacheTest

I am not familiar with the endpoint caching. Would anyone know how exactly does the endpoints are removed and should be recreated when caching is full? What methods are called on QuartzEndpoint when this happens?
 ;;;","20/Jul/13 17:52;saltnlight5;Okay, I see my own mistake in my patch now (I retrieved the wrong group name during lookup.), so I have uploaded second patch: CAMEL-6461-v2.path

This time all tests in camel-quartz passed.;;;","22/Jul/13 15:32;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,
ReplyManager holds a reference to the first calling Bundle classloader,CAMEL-6459,12652864,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hbmann,hbmann,14/Jun/13 11:54,23/Jul/13 07:19,14/Jul/23 05:49,23/Jul/13 07:19,2.10.4,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jms,,,,,,0,,,,,,,"h3. Source
The initialization of the ReplyManager is triggerd by the first processInOut method call at the JmsProducer.

The concrete instance of the ReplyManager creates on startup an AbstractMessageListenerContainer. The concrete listener container is generally a DefaultMessageListenerContainer which starts a new AsyncMessageListenerInvoker Thread. 

h3. OSGI Scenario
In an osgi envrironment this AsyncMessageListenerInvoker Thread has a class loader reference to the bundle who is triggerd by the first processInOut method call at the JmsProducer.

Let the calling bundle (A) be another bundle as bundle (B) which contains the JmsProducer the AsyncMessageListenerInvoker Thread holds a class loader reference to bundle (A).

Scenario:
* Bundle (A) calls a java service of Bundle (B) 
* Bundle (B) sends a jms message
* Bundle (B) receives a response of the jms message
* Bundle (B) returns the java service call to Bundle (A)

h3. Problem
At this point everything is alright but when Bundle (A) is undeployed and another Bundle (C) calls a java service of Bundle (B) the AsyncMessageListenerInvoker Thread has a class loader problem.



h3. StackTrace
BundleImpl.loadClass(String) line: 926
BundleClassLoader.findClass(String) line: 176
BundleClassLoader.loadClass(String, boolean) line: 194
BundleClassLoader(ClassLoader).loadClass(String) line: 248
Class<T>.forName0(String, boolean, ClassLoader) line: not available [native method]
Class<T>.forName(String, boolean, ClassLoader) line: 247
ClassLoadingAwareObjectInputStream.load(String, ClassLoader...) line: 77
ClassLoadingAwareObjectInputStream.resolveClass(ObjectStreamClass) line: 46
ClassLoadingAwareObjectInputStream(ObjectInputStream).readNonProxyDesc(boolean) line: 1574
ClassLoadingAwareObjectInputStream(ObjectInputStream).readClassDesc(boolean) line: 1495
ClassLoadingAwareObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1731
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1328
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject() line: 350
ActiveMQObjectMessage.getObject() line: 185
ActiveMQObjectMessage.toString() line: 226
MessageFormatter.safeObjectAppend(StringBuffer, Object) line: 304
MessageFormatter.deeplyAppendParameter(StringBuffer, Object, Map) line: 276
MessageFormatter.arrayFormat(String, Object[]) line: 230
MessageFormatter.format(String, Object, Object) line: 152
Slf4jLogger.debug(String, Object, Object) line: 300
PersistentQueueReplyManager(ReplyManagerSupport).onMessage(Message) line: 110
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 560
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 498
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 467
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947
Thread.run() line: 662 

h3. JMS Error
<suppressedExceptions class=""java.util.Collections$UnmodifiableRandomAccessList"" resolves-to=""java.util.Collections$UnmodifiableList""><c class=""list""/><list reference=""../c""/></suppressedExceptions><undeclaredThrowable class=""org.apache.camel.InvalidPayloadException""><detailMessage>No body available of type: TransactionServiceResponse but has value: [B@7b9554f9 of type: byte[] on: Message: &lt;?xml version='1.0' encoding='UTF-8'?>&lt;org.apache.camel.component.bean.BeanInvocation>&",Apache karaf 2.3.1,davsclaus,hbmann,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,333187,,,Tue Jul 23 07:19:38 UTC 2013,,,,,,,,,,,"0|i1lh6v:",333515,,,,,,,,,,,,,,,,,,,,"23/Jul/13 07:19;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
Bean component - Calling a bean with method name with () as empty parameter - Better error message if method does not exists,CAMEL-6455,12652735,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jun/13 19:48,20/Jun/13 15:58,14/Jul/23 05:49,20/Jun/13 15:58,2.11.0,,,,,,,,2.12.0,,,,camel-core,,,,,,0,,,,,,,"Calling a bean from a route like
{code}
                from(""direct:start"")
                    .to(""bean:myBean?method=doSomething()"")
                    .to(""mock:result"");
{code}

Notice the method has () as parameters. Which would refer to a method with no-args. 

But if the method has 1 arg like
{code}
        public static void doSomething(Exchange exchange) {
            exchange.getIn().setHeader(""foo"", ""bar"");
        }
{code}

We get this error about some type converter probem
{code}
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.Exchange with value 
{code}

We should have a better error message.

If removing () then Camel can call the method as it can do parameter matching.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,333059,,,2013-06-13 19:48:28.0,,,,,,,,,,,"0|i1lgef:",333387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUtil.getDefaultTempDir() causes a classloader leak in webapps,CAMEL-6452,12652556,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sanjayd,sanjayd,13/Jun/13 04:29,17/Jul/13 11:41,14/Jul/23 05:49,17/Jul/13 11:41,2.10.4,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"FileUtil.getDefaultTempDir() registers a JVM shutdown hook to delete the temporary directory it creates. We are using camel in a web application in Tomcat that gets dynamically reloaded as updates are available, so the JVM is normally never shut down. This is causing 'camel-tmp-*' directories to linger in $CATALINA_HOME/temp, and - more importantly - classloader leaks, which are a major problem for us.

If the thread that gets registered as the shutdown hook were stored in a class variable, I could unregister it when the application is being unloaded.","tomcat 7, spring 3.2",davsclaus,njiang,sanjayd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6476,,,,"13/Jun/13 21:57;sanjayd;0001-Fixed-CAMEL-6452-by-adding-a-cleanup-routine-to-remo.patch;https://issues.apache.org/jira/secure/attachment/12587716/0001-Fixed-CAMEL-6452-by-adding-a-cleanup-routine-to-remo.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332880,,,Wed Jul 17 11:41:53 UTC 2013,,,,,,,Patch Available,,,,"0|i1lfan:",333208,,,,,,,,,,,,,,,,,,,,"13/Jun/13 21:57;sanjayd;Patch to fix issue;;;","14/Jun/13 00:35;njiang;Hi Sanjay,

I just have a quick look of the path, it looks like you add a cleanup to the FileUtil, but I didn't found the place where you call it. 
Can you give us more detail about unload the application?

Willem;;;","14/Jun/13 02:34;sanjayd;Hey Willem,

I had planned on leaving it up to the application to call this method when it is unloaded from the app container. I suppose it could also be called from the shutdown routine of a CamelContext, but then that assumes that the app only has one context.

The problem I'm running into is basically that any webapp that runs in an app container and expects to be periodically reloaded will register a new shutdown hook in the same JVM each time the app is loaded. Unless these hooks are removed when each instance is unloaded, all the classloaders will remain in memory and the app container will eventually run out of PermGen space.

Adding this optional cleanup method will enable apps that run in an app container to remove their shutdown hook on their own so their classloaders can be garbage collected, and the app container can continue on. Those apps who expect the JVM to terminate when they are finished executing won't have to call it, and they will continue working as they do now.

Thanks!

Sanjay;;;","14/Jun/13 06:22;davsclaus;First thanks for reporting this issue with the leak.

I think a better approach is to add a UtilService class in the util package. This class should extends ServiceSupport from the support package. Then we register this as a service to DefaultCamelContext in its doStartCamel() method.

Then we have callbacks for doStart / doStop in the UtilService class where we can do out needed logic, when Camel is starting / stopping.

This also means the default temp dir logic should be *per CamelContext* instead of *per JVM*. This also works much better in WAR containers / OSGi containers et all; where people can hot and redeploy apps. Having JVM hooks and static classes that are initialized with a == null check is (becoming) a bad practice IMHO.

;;;","14/Jun/13 06:50;davsclaus;Well even better this FileUtil temp dir logic is only used when stream caching is enabled. We should ideally IMHO have StreamCaching setup its temp dir it want to use, and cleanup it as well. And remove the logic from the FileUtil so its not required to delete using a JVM shutdown hook.

Then we should also make configuring this on stream caching easier and more ""Camelish"" as today you set some properties on CamelContext. Instead of using a <streamCache tempDir=""xxx"" threshold=""64mb"" xxx/> or something. And then we should expose this in JMX so people can see StreamCacheService in JMX and how its configured. And maybe even reconfigured it at runtime etc.;;;","15/Jun/13 16:24;sanjayd;Awesome - that gives me a lot more context and definitely sounds like the way to go. I like the per-context or per-streamcache temp dir that gets removed when the context or cache shuts down.

In the meantime, in case anyone else runs into this issue, here's the workaround (i.e. hack) that I added to the cleanup routine of our project:

{code}
    public void cleanShutdownHook() throws Exception {
        Class<?> klass = Class.forName(""java.lang.ApplicationShutdownHooks"");
        Field field = klass.getDeclaredField(""hooks"");
        field.setAccessible(true);

        @SuppressWarnings(""unchecked"")
        Map<Thread, Thread> hooks = (Map<Thread, Thread>) field.get(null);
        Thread target = null;
        for(Thread thread: hooks.values()) {
            if (thread.getClass().getName().equals(""org.apache.camel.util.FileUtil$1"")) {
                target = thread;
                break;
            }
        }

        if (target != null) {
            Runtime.getRuntime().removeShutdownHook(target);
        }
    }
{code};;;","17/Jul/13 11:41;davsclaus;Thanks for the patch.

There is a static shutdown method on FileUtil you can use to cleanup this in 2.11 and 2.10 releases.

For Camel 2.12 we introduce StreamCachingStrategy that handles this out of the box, and avoid using static stuff etc. So it becomes per CamelContext instead.;;;",,,,,,,,,,,,,,,,,
Deadlock in camel netty while sending messages to multiple tcp endpoints in single route,CAMEL-6449,12652326,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kiranreddykasa,kiranreddykasa,12/Jun/13 06:29,14/Jun/13 17:01,14/Jul/23 05:49,14/Jun/13 13:34,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-netty,,,,,,0,,,,,,,"we are getting the following exception when trying to use more than two netty endpoints in a single route. 

java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread. 

Sample route : 

                                             from(""netty:tcp://localhost:7000textline=true"")                               .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7001?textline=true"")                                 .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7002?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7003?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7004?textline=true"") 
.bean(DummyProcessor.class); 

camel version : 2.11 
netty 3.6.5

The same is working in 2.10.3 version. ",,kiranreddykasa,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6442,,,,,,,,,"12/Jun/13 06:43;kiranreddykasa;MainCamelTest.zip;https://issues.apache.org/jira/secure/attachment/12587386/MainCamelTest.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332650,,,Fri Jun 14 17:01:24 UTC 2013,,,,,,,,,,,"0|i1ldvr:",332979,,,,,,,,,,,,,,,,,,,,"12/Jun/13 06:43;kiranreddykasa;Test case for simulating the same.It is failing with both 2.10.4 and 2.11.0;;;","14/Jun/13 16:26;njiang;Hi kiran,
As you know this issue is fixed last week. Can you check out the last camel 2.12-SNAPSHOT to verify the fix?;;;","14/Jun/13 17:01;kiranreddykasa;Ya i have tested with 2.12-SNAPSHOT and it's working.;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect documentation for XML redeliveryPolicyRef in OnException clause,CAMEL-6448,12652208,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,muellerc,bkiefer,bkiefer,11/Jun/13 14:08,11/Jun/13 19:52,14/Jul/23 05:49,11/Jun/13 19:52,,,,,,,,,,,,,website,,,,,,0,documentation,onException,redelivery,,,,"The example in the documentation on the onException page (http://camel.apache.org/exception-clause.html) shows incorrect configuration of an external redelivery policy.

It currently shows:

 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>

     <onException>
         <!-- you can define multiple exceptions just adding more exception elements as show below -->
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>

         <!-- here we reference our redelivery policy defined above -->
         <redeliveryPolicy ref=""myRedeliveryPolicy""/>
     </onException>

But it should be:

 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>

     <onException redeliveryPolicyRef=""myRedeliveryPolicy"">
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>
         <!-- more config here -->
     </onException>

",,bkiefer,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,332532,,,Tue Jun 11 19:52:34 UTC 2013,,,,,,,,,,,"0|i1ld5j:",332861,,,,,,,,,,,,,,,,,,,,"11/Jun/13 19:52;muellerc;Thanks for reporting Ben. I updated the web site. It should be online in a few minutes.;;;",,,,,,,,,,,,,,,,,,,,,,,
endChoice() has no effect in nested choice definition,CAMEL-6447,12652166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,syberyan,syberyan,11/Jun/13 07:22,22/Aug/13 20:42,14/Jul/23 05:49,22/Aug/13 20:38,2.11.0,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,2,,,,,,,"I just upgraded from 2.10.4 to 2.11.0 and noticed that nested choice definitions started acting strangely. For example:

{code:java}
            .choice()
                .when(header(Exchange.EXCEPTION_CAUGHT).isNotNull())
                    // 1
                    .setBody(exceptionMessage().append(SystemUtils.LINE_SEPARATOR).append(exceptionStackTrace()))
                    .choice()
                        .when(header(HEADER_CONTROLLER_ID).isNotNull())
                            // 1a
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_CONTROLLER_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                        .otherwise()
                            // 1b
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                            // INSERTING .end() here solves the issue
                        .endChoice()
                    .log(LoggingLevel.WARN, ""DLQ written: ${in.header.CamelExceptionCaught}""
                .otherwise()
                    // 2
                    .log(LoggingLevel.WARN, ""DLQ written"" + MESSAGE_LOG_FORMAT)
                .end()
{code}

I have a test that is supposed to go through 1 and 1a. However it now passes through 1 and 2!
It looks like the endChoice() in 1b has no effect and the otherwise() in 2 is executed instead of 1b. Inserting and end() statement as shown seems to solve the issue, but it looks suspicious.

It's probably a regression introduced by the fix for CAMEL-5953, but I'm not 100% sure. ",,dalewking,davsclaus,robinbezuijen,syberyan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332490,,,Thu Aug 22 20:42:16 UTC 2013,,,,,,,,,,,"0|i1lcwf:",332819,Regression,,,,,,,,,,,,,,,,,,,"12/Aug/13 09:59;robinbezuijen;It looks like this issue was introduced in 2.10.4

The problem is that adding the end() before the endChoice() will only work for 2.10.4 and above because it will break when using 2.10.3 with the following exception:

{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test-route': Invocation of init method failed; nested exception is java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
{code}


;;;","20/Aug/13 14:19;dalewking;I see a slightly different but probably related problem. Here is a simple route to test it:

{noformat}
    <route>
        <from uri=""timer://myTimer?period=1&amp;repeatCount=1"" />
        <setHeader headerName=""test"">
            <constant>1</constant>
        </setHeader>
        <choice>
            <when>
                <simple>${header.test} &gt; 0</simple>
                <choice>
                    <when>
                        <simple>${header.test} &gt; 5</simple>
                        <log message=""Should not get here"" />
                    </when>
                    <otherwise>
                        <log message=""Should get here"" />
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <log message=""Why do I get here???"" />
            </otherwise>
        </choice>
    </route>
{noformat}

The output is:

{noformat}
    Should get here 
    Why do I get here???
{noformat}

So it executes both otherwise clauses, which is definitely wrong. I realize that the nesting is not necessary in this simple example, but where I found it, the inner choice was within a split and could not be eliminated. The outer choice was to actually handle the case for when the split would have nothing to split.;;;","22/Aug/13 20:42;davsclaus;The problem mentioned by Dale, was caused by CAMEL-6364] and only affected trunk (eg 2.12). This has been fixed now.

The endChoice has been fixed on both trunk and 2.11 branch.;;;",,,,,,,,,,,,,,,,,,,,,
XML DSL - removeHeaders does not work as expected if more then one excludePatter is speficied,CAMEL-6445,12652055,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ralfsteppacher,ralfsteppacher,10/Jun/13 16:17,14/Jun/13 01:22,14/Jul/23 05:49,14/Jun/13 01:22,,,,,,,,,,,,,website,,,,,,0,,,,,,,"To reproduce put the following in a route:

<camel:setHeader headerName=""header1"">
<camel:constant>1</camel:constant>
</camel:setHeader>

<camel:setHeader headerName=""header2"">
<camel:constant>2</camel:constant>
</camel:setHeader>

<camel:setHeader headerName=""header3"">
<camel:constant>3</camel:constant>
</camel:setHeader>

<camel:removeHeaders pattern=""*"" excludePattern=""header1,header2"" />

Expected behavior: ""header3"" should be gone.
Actual behavior: All headers are gone.


Specifying only one exclude pattern works. I.e. 

<camel:removeHeaders pattern=""*"" excludePattern=""header1"" />

removes headers ""header2"" and ""header3"" but leaves ""header1"".",,davsclaus,muellerc,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332379,,,Fri Jun 14 01:22:46 UTC 2013,,,,,,,,,,,"0|i1lc7z:",332708,,,,,,,,,,,,,,,,,,,,"11/Jun/13 15:14;muellerc;The documentation was misleading about this. I update it and will think about a fix.
At present, you should use a regular expression like this:
{code}
<removeHeaders pattern=""*"" excludePattern=""header1|header2""/>
{code};;;","13/Jun/13 19:35;davsclaus;They are all patterns and use reg exp for that. So it works as designed. And the example Christian posted is correct, eg use | for OR in reg exp.;;;","13/Jun/13 21:21;ralfsteppacher;Well, if it is just a documentation bug, even better. Thanks for the clarification.;;;","14/Jun/13 01:22;muellerc;I also think we should not make the Camel DSL more complicated if there is already a solution for a given problem.;;;",,,,,,,,,,,,,,,,,,,,
"camel-quickfix - Engine that could not start (e.g. because of store creation problems) is still stored in the engiens map, thus making futher starts problematic",CAMEL-6443,12652015,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,10/Jun/13 11:39,21/Oct/13 16:52,14/Jul/23 05:49,23/Jul/13 08:50,2.10.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quickfix,,,,,,0,,,,,,,"It's even worse as because of https://issues.apache.org/jira/browse/CAMEL-6441
if two starts was not successful, engine becomes totally broken.

The only workaround I can see now is to create new component instance for each endpoint.",,davsclaus,tivv,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6866,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332339,,,Tue Jul 23 08:50:06 UTC 2013,,,,,,,,,,,"0|i1lbz3:",332668,,,,,,,,,,,,,,,,,,,,"23/Jul/13 08:50;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http route throws java.lang.IllegalStateException,CAMEL-6442,12651849,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jun/13 08:53,14/Jun/13 13:34,14/Jul/23 05:49,09/Jun/13 02:02,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-netty,,,,,,0,,,,,,,"I just create a simple proxy route by using camel-netty-http component like this
{code}
        <route id=""front"">
            <from uri=""netty-http:http://0.0.0.0:9001/test"" />
            <to uri=""netty-http:http://localhost:9090/foo"" />
        </route>

        <route id=""back"">
            <from uri=""netty-http:http://0.0.0.0:9090/foo"" />
            <transform>
              <simple>hello world</simple>
            </transform>
        </route>

{code}

When I send the get request to http://localhost:9001/test, I got below exception
{code}
java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:342)
	at org.jboss.netty.channel.DefaultChannelFuture.await0(DefaultChannelFuture.java:306)
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:285)
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:402)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:473)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:468)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1188)
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:210)
	at org.apache.camel.component.netty.http.NettyHttpProducer.process(NettyHttpProducer.java:49)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:123)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:118)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:388)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:118)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.messageReceived(ServerChannelHandler.java:102)
	at org.apache.camel.component.netty.http.handlers.HttpServerChannelHandler.messageReceived(HttpServerChannelHandler.java:97)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.http.HttpChunkAggregator.messageReceived(HttpChunkAggregator.java:145)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:459)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:536)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:435)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:680)
{code}
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6449,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332173,,,Sun Jun 09 02:02:19 UTC 2013,,,,,,,,,,,"0|i1lay7:",332502,,,,,,,,,,,,,,,,,,,,"09/Jun/13 02:02;njiang;Applied the patch and unit test into trunk.
Here is the [blog|http://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels] which helped me to resolve the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,
Exception in service start (when before start it was in stopped state) leaves service in starting state,CAMEL-6441,12651716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tivv,tivv,07/Jun/13 15:16,23/Jul/13 09:26,14/Jul/23 05:49,23/Jul/13 09:26,2.10.0,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,"Currently if service start produces an exception, stop is called to clear flags. But stop() is noop if service was in stopped state before. This leaves service in starting+stopped unusable state.",,davsclaus,tivv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,332041,,,Tue Jul 23 09:26:05 UTC 2013,,,,,,,,,,,"0|i1la4v:",332370,,,,,,,,,,,,,,,,,,,,"23/Jul/13 09:26;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
loss of data on xpath after cxf (payload-mode) ,CAMEL-6440,12651647,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rene avontuur,rene avontuur,07/Jun/13 09:06,18/Sep/13 06:28,14/Jul/23 05:49,18/Sep/13 06:28,2.11.0,2.12.0,,,,,,,2.11.2,2.12.1,2.13.0,,camel-cxf,,,,,,0,,,,,,,"Applying an xpath expression to a message containing a CxfPayload may lead to loss of data. 
A unit test to demonstrate this, has been written.

A work around is converting the CxfPayload to a String, followed by applying xpath to the String.

The unit test fails on current snapshot-version:

testMessageWithIncreasingSize(org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest)  Time elapsed: 1.357 sec  <<< FAILURE!
java.lang.AssertionError: Lengths of testMessage and receiveMessage should be equal (body is CxfPayload), expected:<10000> but was:<3805>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.execTest(CxfConsumerPayloadXPathTest.java:131)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.testMessageWithIncreasingSize(CxfConsumerPayloadXPathTest.java:109)


",,davsclaus,njiang,rene avontuur,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Sep/13 09:08;rene avontuur;CxfConsumerPayloadXPathTest.java;https://issues.apache.org/jira/secure/attachment/12602112/CxfConsumerPayloadXPathTest.java","07/Jun/13 09:07;rene avontuur;CxfConsumerPayloadXPathTest.java;https://issues.apache.org/jira/secure/attachment/12586685/CxfConsumerPayloadXPathTest.java","09/Sep/13 13:56;rene avontuur;DomConverter.patch.txt;https://issues.apache.org/jira/secure/attachment/12602137/DomConverter.patch.txt",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331973,,,Wed Sep 18 06:28:26 UTC 2013,,,,,,,,,,,"0|i1l9qf:",332302,,,,,,,,,,,,,,,,,,,,"07/Jun/13 09:07;rene avontuur;the failing unit test;;;","23/Jul/13 09:30;davsclaus;You need to enable stream caching;;;","13/Aug/13 07:07;rene avontuur;adding .StreamCaching() to the route in the unit test has no effect.

Even, in the case stream caching would be the remedy, I think it is still a problem.
The risk is too high that during acceptance testing of such a route no issue is detected, while once in production a few users experience corrupted data. It will then be hard to find the cause.;;;","09/Sep/13 09:08;rene avontuur;The observed data loss is most likely due to the inability of Camel's DomConverter/XmlConverter to handle linked lists of text nodes correctly. See latest version of the added unit tests for more details.;;;","09/Sep/13 13:56;rene avontuur;Added a patch that solves THIS issue.

The method: 
private static void append(StringBuilder buffer, Node node) 
probably has a simular issue.

It would be helpful first having more unit tests in DomConverterTest;;;","13/Sep/13 07:59;njiang;Hi Rene,

I just have quick run with the test and patch.
I found the patch doesn't fix the old version of CxfConsumerPayloadXPathTest, and new version of CxfConsumerPayloadXPathTest is passed if I don't apply the patch.

Can you double check it?

Regards,

Willem;;;","16/Sep/13 08:10;rene avontuur;Hello Willem,

Regarding the new version of CxfConsumerPayloadXPathTest:
- The annotation above size10000XPathTest() expresses the current behavior, which is not the desired behavior.
For the desired behavior, please change '@Test(expected = ComparisonFailure.class)' into '@Test'.
- The test 'size10000DomFirstOneOnlyTest()' may be removed completely. As it only shows what happens if one does not process all DOM-nodes.

Regarding the old version of CxfConsumerPayloadXPathTest:
- after line 77: receivedMessageByDom = textnode.getNodeValue();  
in order to process all nodes, add:
textnode = (Text) textnode.getNextSibling();
while (textnode != null) {
   //the textnode appears to have siblings!
   receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue();
   textnode = (Text) textnode.getNextSibling();
}

René

;;;","18/Sep/13 06:28;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Rene.;;;",,,,,,,,,,,,,,,,
camel-rss and camel-atom - Should includes feeds with same pub timestamp as it okay,CAMEL-6436,12651394,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jun/13 17:40,30/Jul/13 14:29,14/Jul/23 05:49,30/Jul/13 14:29,,,,,,,,,2.11.2,2.12.0,,,camel-atom,camel-rss,,,,,0,,,,,,,"See SO
http://stackoverflow.com/questions/16948288/apache-camel-rss-feed-processor-skips-with-feeds-of-same-pubdate?noredirect=1#comment24503558_16948288
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,331720,,,2013-06-06 17:40:51.0,,,,,,,,,,,"0|i1l86n:",332051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The configAdminFileName property does not be picked up when run command: mvn camel:run,CAMEL-6434,12651287,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,xiaohui.wu,xiaohui.wu,06/Jun/13 08:19,06/Jun/13 13:51,14/Jul/23 05:49,06/Jun/13 13:51,,,,,,,,,2.12.0,,,,tooling,,,,,,0,,,,,,,"When running command: mvn camel:run, I know that the config file name and PID can be passed through the configuration in pom.xml like :

			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<version>${camel.version}</version>
				<configuration>
					<useBlueprint>true</useBlueprint>
					<configAdminPid>ConfigApp</configAdminPid>
					<configAdminFileName>/opt/jboss-fuse/jboss-fuse-6.0.0.redhat-024/deploy/ConfigApp.cfg</configAdminFileName>
				</configuration>
			</plugin>
But when I tried to run the command: mvn camel:run to get the content from the config file, I found that only configAdminPid is recognized, while the configAdminFileName did not been picked up.

The stack trace is:
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:486)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: The persistent file should not be null
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.setPersistentFileForConfigAdmin(CamelBlueprintHelper.java:176)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:103)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)","Fedora16,JDK1.6,",njiang,xiaohui.wu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331613,,,Thu Jun 06 13:51:07 UTC 2013,,,,,,,,,,,"0|i1l7iv:",331944,,,,,,,,,,,,,,,,,,,,"06/Jun/13 13:51;njiang;Applied the patch into master.

It's caused by the property comment of RunMojo, it should start with one star, not two star. ;;;",,,,,,,,,,,,,,,,,,,,,,,
Invalid KeyStore format error is generated using camel websocket secure on osgi platform,CAMEL-6433,12651271,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,06/Jun/13 06:08,28/Apr/16 13:53,14/Jul/23 05:49,28/Apr/16 13:53,,,,,,,,,2.18.0,,,,camel-mina2,camel-websocket,osgi,,,,1,,,,,,,"When the following camel websocket secure route is deployed on karaf, we get this error 

{code}
Caused by: java.io.IOException: Invalid keystore format
	at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:633)[:1.6.0_45]
	at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:38)[:1.6.0_45]
	at java.security.KeyStore.load(KeyStore.java:1185)[:1.6.0_45]
	at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:236)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
{code}

{code}

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

  <camel:sslContextParameters
      id=""sslContextParameters"">
    <camel:keyManagers
        keyPassword=""changeit"">
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <packageScan>
      <package>com.fusesource.examples.camel.websocket.secure</package>
    </packageScan>
  </camelContext>

...

           from(""activemq:topic:newsTopic"").routeId(""fromJMStoWebSocketSecureNews"")
             .log(LoggingLevel.DEBUG, "">> News info received : ${body}"")
             .delay(5000)
             .to(""websocket://0.0.0.0:8443/newsTopic?sendToAll=true"" +
                     ""&sslContextParametersRef=#sslContextParameters&staticResources=classpath:webapp"");
{code}",,cmoulliard,davsclaus,pberkman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Jun/13 08:23;cmoulliard;Screen Shot 2013-06-06 at 10.21.53.png;https://issues.apache.org/jira/secure/attachment/12586468/Screen+Shot+2013-06-06+at+10.21.53.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331597,,,Thu Apr 28 13:53:34 UTC 2016,,,,,,,,,,,"0|i1l7fb:",331928,,,,,,,,,,,,,,,,,,,,"06/Jun/13 06:09;cmoulliard;Project works fine using mvn camel:run with same reources;;;","06/Jun/13 08:18;cmoulliard;Error occurs when keystore load the password

{code}
        if (this.resource == null) {
            ks.load(null, ksPassword);
        } else {
            InputStream is = this.resolveResource(this.parsePropertyValue(this.resource));
            ks.load(is, ksPassword); // ERROR OCCURS HERE
        }
{code};;;","06/Jun/13 08:22;cmoulliard;Could this issue be due to the InputStream created by Felix (see screenshot) ?;;;","18/Nov/14 18:24;pberkman;I get the same issue using Java DSL route and Mina2:

{code}
            if (isTLS) {
                
                MessagingGroup mg = ConfigurationCache.getEntry(instanceName).getMessagingSettings();

                KeyStoreParameters ksp = new KeyStoreParameters();
                ksp.setResource(mg.getSecurityKeystoreFile());
                ksp.setPassword(mg.getSecurityKeystorePass());
                
                KeyManagersParameters kmp = new KeyManagersParameters();
                kmp.setKeyStore(ksp);
                kmp.setKeyPassword(mg.getSecurityPrivateKeyPass());
                
                KeyStoreParameters tsp = new KeyStoreParameters();
                tsp.setResource(mg.getSecurityTruststoreFile());
                tsp.setPassword(mg.getSecurityTruststorePass());
                
                TrustManagersParameters tmp = new TrustManagersParameters();
                tmp.setKeyStore(tsp);
                
                SSLContextServerParameters scsp = new SSLContextServerParameters();
                scsp.setClientAuthentication(ClientAuthentication.REQUIRE.name());
                
                SSLContextParameters scp = new SSLContextParameters();
                scp.setServerParameters(scsp);
                scp.setKeyManagers(kmp);
                scp.setTrustManagers(tmp);

                minaCfg.setSslContextParameters(scp);
            }
{code}

{code}
Exception:
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283] Error starting mvn:com.nextgate.ms.components.adapters/ngms-listener-h
l7v2-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283]
.)
java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Consumer.setupSocketProtocol(Mina2Consumer.java:159)
        at org.apache.camel.component.mina2.Mina2Consumer.<init>(Mina2Consumer.java:78)
        at org.apache.camel.component.mina2.Mina2Endpoint.createConsumer(Mina2Endpoint.java:55)
        at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
        at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:134)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.listener.hl7mllp.routes.Activator.start(Activator.java:55)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284] Error starting mvn:com.nextgate.ms.components.adapters/ngms-sender-hl7v2
-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284].)
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[mina2:tcp://192.168.0.200:8001]. Reason: java.io.IOE
xception: Invalid keystore format
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
        at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
        at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:202)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:993)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.impl.RouteService.startChildService(RouteService.java:334)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.sender.hl7mllp.routes.Activator.start(Activator.java:56)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Producer.setupSocketProtocol(Mina2Producer.java:313)
        at org.apache.camel.component.mina2.Mina2Producer.<init>(Mina2Producer.java:90)
        at org.apache.camel.component.mina2.Mina2Endpoint.createProducer(Mina2Endpoint.java:49)
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
        ... 54 more
{code};;;","28/Apr/16 13:14;davsclaus;We need to inject CamelContext on the SSL parameters so when it attempts to load those resources it can have access to the bundle classloader (via Camel's ClassResolver);;;","28/Apr/16 13:44;davsclaus;Also I think we should let the ClassResolver load the resource first instead of trying the TCCL and whatnot known tricks.;;;","28/Apr/16 13:53;davsclaus;There were a bunch of changes so pushing this to master for know;;;",,,,,,,,,,,,,,,,,
baseResource of Jetty ServletContextHandler does not work when project deployed as a bundle,CAMEL-6432,12651268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,06/Jun/13 05:16,07/Jun/13 13:16,14/Jul/23 05:49,07/Jun/13 13:16,2.11.0,2.12.0,,,,,,,,,,,camel-websocket,,,,,,0,,,,,,,"If we package a camel websocket route (""websocket://0.0.0.0:9090/newsTopic?sendToAll=true&staticResources=classpath:webapp"") as a bundle and set the staticResources as parameter (classpath:webapp), then the pages cannot be accessed from the browser

Code should be 

{code}
            if (resources[0].equals(""classpath"")) {
                URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]);
                context.setBaseResource(Resource.newResource(url));
            } else if (resources[0].equals(""file"")) {
                context.setBaseResource(Resource.newResource(resources[1]));
            }
{code}",,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331594,,,Fri Jun 07 13:16:51 UTC 2013,,,,,,,,,,,"0|i1l7en:",331925,,,,,,,,,,,,,,,,,,,,"07/Jun/13 13:16;cmoulliard;Code committed for 2.12-SNAPSHOT, 2.11.1-SNAPSHOT;;;",,,,,,,,,,,,,,,,,,,,,,,
Shorthand usage of property placeholders in onException does not work.,CAMEL-6429,12651095,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,adam.wehner,adam.wehner,05/Jun/13 11:45,06/Jun/13 17:34,14/Jul/23 05:49,06/Jun/13 17:34,2.10.1,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,"The syntax {{propName}} does not resolve in the onException block and the header is set with the value {{propName}}. The syntax ${properties:propName} does work as expected. Further the shorthand syntax also works correctly in the usual route.

<camel:onException>
  <camel:exception>java.lang.Exception</camel:exception>
  <camel:setHeader headerName=""anyHeaderName"">
    <camel:simple>{{myPropName}}</camel:simple>
  </camel:setHeader>				
  ..
</camel:onException>",,adam.wehner,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331421,,,Thu Jun 06 17:34:06 UTC 2013,,,,,,,,,,,"0|i1l6cf:",331753,,,,,,,,,,,,,,,,,,,,"05/Jun/13 13:17;davsclaus;Can you try upgrade to newer release and as well test with SNAPSHOT. We have fixed property placeholder resolution recently for nested elements, and thus very likely fixed this also.;;;","06/Jun/13 10:12;adam.wehner;Okay. The issue is fixed in 2.10.4 and 2.11.0. Thanks. From my point of view this issue can be closed.;;;","06/Jun/13 17:34;davsclaus;Thanks for testing and reporting back;;;",,,,,,,,,,,,,,,,,,,,,
Graceful shutdown with maximum redeliveries enabled from seda route may hang,CAMEL-6421,12650827,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jun/13 07:05,04/Jun/13 07:49,14/Jul/23 05:49,04/Jun/13 07:49,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Graceful-shutdown-not-working-tp5733697.html

The method getErrorHandlerExecutorService from DefaultCamelContext should use a private lock to avoid this problem.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,331154,,,2013-06-04 07:05:44.0,,,,,,,,,,,"0|i1l4pb:",331487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScriptBuilder Some scripting are exception lost ,CAMEL-6416,12650573,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,fkocik,fkocik,03/Jun/13 07:50,03/Jul/13 02:22,14/Jul/23 05:49,03/Jun/13 08:43,2.10.4,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-script,,,,,,0,,,,,,,"Hello, 

A little bug in *ScriptBuilder* class cause some script errors to be lost and replaced by a *NullPointerException* : 

{code:title=Encountered Exception}
Caused by: java.lang.NullPointerException
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEvaluationException(ScriptBuilder.java:418)
	at org.apache.camel.builder.script.ScriptBuilder.evaluateScript(ScriptBuilder.java:348)
	at org.apache.camel.builder.script.ScriptBuilder.evaluate(ScriptBuilder.java:92)
	at org.apache.camel.builder.script.ScriptBuilder.evaluate(ScriptBuilder.java:96)
{code}

The problem occurs in *evaluateScript* method (line 336 to 352) :
{code:title=ScriptBuilder.evaluateScript}
    protected synchronized Object evaluateScript(Exchange exchange) {
        try {
            getScriptContext();
            populateBindings(getEngine(), exchange);
            addScriptEngineArguments(getEngine(), exchange);
            Object result = runScript(exchange);
            LOG.debug(""The script evaluation result is: {}"", result);
            return result;
        } catch (ScriptException e) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Script evaluation failed: "" + e.getMessage(), e);
            }
            throw createScriptEvaluationException(e.getCause());
        } catch (IOException e) {
            throw createScriptEvaluationException(e);
        }
    }
{code}


We can see the following line (348) : 
{{throw createScriptEvaluationException(e.getCause());}}

In some cases, the exception cause is null and the error message become very unclear.

A simple workaround would be to write something like this :
{code:}
if (e.getCause() == null) {
    throw createScriptEvaluationException(e);
} else {
    throw createScriptEvaluationException(e.getCause());
}
{code}

I don't have some GIT software, so I could not provide a patch, sorry for that ;-)

Regards",,fkocik,njiang,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,330900,,,Mon Jun 03 08:43:27 UTC 2013,,,,,,,,,,,"0|i1l353:",331233,,,,,,,,,,,,,,,,,,,,"03/Jun/13 08:43;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches with thanks to Fabien.;;;",,,,,,,,,,,,,,,,,,,,,,,
LOG-Eip log an ERROR by evaluating Simple Language expression,CAMEL-6414,12650531,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,02/Jun/13 20:51,09/Jul/13 08:03,14/Jul/23 05:49,09/Jul/13 08:03,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/Camel-Error-even-when-everything-seems-to-be-working-fine-but-log-shows-errors-td5733536.html,,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Jun/13 20:52;muellerc;simple-language-test.zip;https://issues.apache.org/jira/secure/attachment/12585778/simple-language-test.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,330858,,,Tue Jul 09 06:18:41 UTC 2013,,,,,,,,,,,"0|i1l2vr:",331191,,,,,,,,,,,,,,,,,,,,"02/Jun/13 20:52;muellerc;Added a unit test which shows the issue.;;;","09/Jul/13 06:18;davsclaus;Its the unary operator -- that influences this.
;;;",,,,,,,,,,,,,,,,,,,,,,
File consumer - Race condition for markerFile read lock strategy,CAMEL-6413,12650493,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,02/Jun/13 07:27,16/Sep/13 14:56,14/Jul/23 05:49,02/Jun/13 10:33,2.10.4,2.11.0,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/File-markerFile-strategy-race-condition-tp5733561.html

We should delete the .camelLock file last, as currently we move the processed file first. And there is a very tiny tiny window where another process could potential see the file and pickup it.",,davsclaus,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6750,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,330820,,,2013-06-02 07:27:41.0,,,,,,,,,,,"0|i1l2nb:",331153,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cCXF route proxy cannot return Fault message to client when Dataformat is CXF_MESSAGE,CAMEL-6404,12649847,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mfshen,mfshen,29/May/13 05:55,10/Oct/13 13:19,14/Jul/23 05:49,31/May/13 15:18,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-cxf,,,,,,0,,,,,,,"use CXF component with CXF_MESSAGE dataFormat to call any service, and the response of this service is a fault, then you can see this exception.
{noformat} 
Exception in thread ""default-workqueue-1"" java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getContentFromCxf(DefaultCxfBinding.java:642)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfResponse(DefaultCxfBinding.java:151)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:81)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1132)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:428)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:353)
	at java.lang.Thread.run(Thread.java:662)
{noformat} ",,ay,davsclaus,gangliu,mfshen,njiang,,,,,,,,,,,,,,,,,,CAMEL-6243,,,,,,,,,,,,,,"31/May/13 06:07;gangliu;CXFFaultExample.zip;https://issues.apache.org/jira/secure/attachment/12585557/CXFFaultExample.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,330174,,,Tue Jun 04 08:39:18 UTC 2013,,,,,,,,,,,"0|i1kyo7:",330508,,,,,,,,,,,,,,,,,,,,"31/May/13 06:07;gangliu;Attached an example;;;","31/May/13 06:39;davsclaus;What version of Camel and CXF are you using?;;;","31/May/13 06:57;gangliu;I'm using Camel-2.10.4, CXF-2.7.5, see the attached example;;;","31/May/13 14:21;njiang;I just checked the code, the NPE is caused by the DefaultCxfBinding try to find the processed object from CXF message. As the CXF_MESSAGE consume the input stream and throw out the exception, the DefaultCxfBing get the NPE. 
This issue can be fixed by letting DefaultCxfBinding ignore the CXF message content when there is nothing. camel-cxf will take care of the fault message (which is turned into an exception) then.;;;","31/May/13 15:18;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.;;;","31/May/13 15:36;gangliu;But by this way, the answer returns null, right? then user can give the expect fault response message?
thanks

Now, I resolved this problem by extracting *W3CDOMStreamWriter.class* content, and then wrap it into a *List* object.;;;","31/May/13 15:42;njiang;The exception will be marshalled and sent to client, you don't need to wrap the W3CDOMStreamWriter.class.;;;","02/Jun/13 12:43;gangliu;Hi Willem: 
But this only happens after the fix, right? for now, I always get the NullPointerException, So I have to find a workaround to make it works.

And BTW, when I want to call a WebService by creating request from scratch, for example, timer -> setBody -> CXF (*with RAW dataFormat*), I found if the body type isn't *javax.xml.tranform.Source.class*, then the body will always be empty, no matter what I've set in setBody component. I think the convert should be done inside Camel instead of client. Could you also have a check? 

Thanks alot.;;;","03/Jun/13 02:44;njiang;I think you are talking about other issue, we'd better start a new thread for it.
When you using the RAW dataFormat, you need to cache the input stream before you read it.
If you don't cache it, you cannot read the input stream again if you already consumed it.;;;","03/Jun/13 03:40;gangliu;OK, thanks. ;;;","03/Jun/13 10:02;ay;Hi Willem,
I am not sure about this handling and wanted to ask you or Dan about it.

Instead of trying to get the List object and return its content, could we use SOAPMessage directly in this case?
That means,

+import javax.xml.soap.SOAPMessage;
...
-                answer = message.getContent(List.class).get(0);
+                answer = message.getContent(SOAPMessage.class);


regards, aki;;;","03/Jun/13 14:54;njiang;Hi Aki,

I just did a quick test on your suggestion, it look like the below code is much like each other
{code}
answer = message.getContent(List.class).get(0);
answer = message.getContent(SOAPMessage.class);
{code}
But if the camel-cxf producer get an exception (fault message), we still cannot get the SOAPMessage from the cxf message.

Regards,

Willem;;;","04/Jun/13 01:20;gangliu;Now, I'm using message.getContent(W3CDOMStreamWriter.class) for workaround in fault case;;;","04/Jun/13 01:46;njiang;Hi liugang,

Can you verify my fix by running the test case with the latest Camel 2.12-SNAPSHOT?
I did the test last weekend, it works :)

Willem;;;","04/Jun/13 05:50;gangliu;sure, The Maven Repository is https://repository.apache.org/content/repositories/snapshots , right?;;;","04/Jun/13 07:15;njiang;yes, it is.;;;","04/Jun/13 08:39;gangliu;OK, I just gave a try on 2.12.SNAPSHOT version. the same route which doen't work on 2.10.4, works fine on this snapshot version.;;;",,,,,,,
camel-solr - Should close its resources when stopping,CAMEL-6396,12649436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/May/13 05:26,25/May/13 06:38,14/Jul/23 05:49,25/May/13 06:38,,,,,,,,,2.11.1,2.12.0,,,camel-solr,,,,,,0,,,,,,,"See SO
http://stackoverflow.com/questions/16667720/connections-are-hanging-in-close-wait-even-after-successful-shutdown-of-camel-co",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,329763,,,2013-05-25 05:26:22.0,,,,,,,,,,,"0|i1kw53:",330098,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"bean language - Should always use ?method= as preferred way for specifying the method name, can cause problems with the old dot style",CAMEL-6395,12649338,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/May/13 14:59,24/May/13 15:27,14/Jul/23 05:49,24/May/13 15:27,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,"This expression should work out of the box
{code}
                    .setHeader(""goto"").simple(""${bean:myBean?method=whereToMate('MyAppV1.2.3', 'blah')}"")
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,329665,,,2013-05-24 14:59:18.0,,,,,,,,,,,"0|i1kvjb:",330000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 Route with suspended SedaConsumer can't be stopped correctly,CAMEL-6390,12649112,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,23/May/13 12:58,30/May/13 09:12,14/Jul/23 05:49,30/May/13 09:12,2.10.0,,,,,,,,2.11.1,2.12.0,,,,,,,,,0,,,,,,,"Route with suspended SedaConsumer can't be stopped correctly. Here is test:
{code}
 @Test
    public void testOriginalSedaShutdownSuspended() throws Exception {
        SedaEndpoint endpoint = context().getEndpoint(""seda:test"", SedaEndpoint.class);
        context().addRouteDefinition(new RouteDefinition()
                .id(""testRoute"")
                .from(endpoint)
                .to(""log:body"")
        );
        Set<SedaConsumer> consumers = endpoint.getConsumers();
        Assert.assertFalse(consumers.isEmpty());
        for (SedaConsumer sedaConsumer: consumers) {
            sedaConsumer.suspend();
        }
        Assert.assertTrue(context().stopRoute(""testRoute"", 2, TimeUnit.SECONDS, true));
    }
{code}",,davsclaus,tivv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,329439,,,Thu May 30 09:12:29 UTC 2013,,,,,,,,,,,"0|i1ku53:",329774,,,,,,,,,,,,,,,,,,,,"25/May/13 07:28;davsclaus;Works fine. Even if its suspended it may need more than 2 sec to stop properly.;;;","27/May/13 08:48;tivv;It does not work. Original test does not send any message.
Your test also does not work if it either: 
1) Does not send any message
2) Sleep 2000ms after suspension. (that is better as ""do not send"" works on some timing clash, see below)

To be clear:
a) 2000ms is used since default poll timeout is 1000ms. For real test, poll timeout can be lowered down and sleep after suspension used.
b) you test works because it does not have time to exit from queue.pool to really suspend polling thread. 
c) The actual problem is that SedaConsumer first check isSuspending/isSuspended and go for next circle if it is. Shutdown check is done later (after queue.poll), so when suspended it never reaches this shutdown check.;;;","27/May/13 08:49;tivv;The committed test do not show the problem, see my previous comment;;;","30/May/13 09:12;davsclaus;Thanks I have added additional check;;;",,,,,,,,,,,,,,,,,,,,
New restlet endpoints don't work if route is created after restlet server is started.,CAMEL-6385,12648655,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,chenyuejie,chenyuejie,21/May/13 16:15,24/May/13 13:36,14/Jul/23 05:49,24/May/13 13:36,2.11.0,,,,,,,,,,,,camel-restlet,,,,,,0,,,,,,,"If a route with restlet endponit is created after restlet server is started, restlet can't handle the endpoint correctly, because restlet translate all URI pattern of routes at server starting, but don't it for later attached routes. So we must translate the URI pattern before attach it to restlet after restlet server is started. See http://restlet.tigris.org/issues/show_bug.cgi?id=988. ",,chenyuejie,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/May/13 16:19;chenyuejie;patch.txt;https://issues.apache.org/jira/secure/attachment/12584031/patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,329010,,,Thu May 23 14:45:23 UTC 2013,,,,,,,Patch Available,,,,"0|i1krjr:",329352,,,,,,,,,,,,,,,,,,,,"23/May/13 14:45;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x with thanks to Yuejie.;;;",,,,,,,,,,,,,,,,,,,,,,,
Headers are not set correctly in some situation,CAMEL-6375,12648139,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,clement tamisier,clement tamisier,17/May/13 08:27,17/May/13 13:14,14/Jul/23 05:49,17/May/13 13:14,2.10.4,,,,,,,,2.11.1,2.12.0,,,,,,,,,2,,,,,,,"If I define a route like this: 

from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")); 
my http client get a 200 response code. 

If a add something else on the route like: 
from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")) 
.log(""400"").
my http client get a 400 response code as expected. 

forum :
http://camel.465427.n5.nabble.com/route-http-code-td5732728.html",,clement tamisier,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,328495,,,Fri May 17 13:14:02 UTC 2013,,,,,,,,,,,"0|i1kodz:",328839,,,,,,,,,,,,,,,,,,,,"17/May/13 08:56;njiang;What's your from(""<MyUrl>/test"")  looks like, which kind of camel component are you using?
After check the code of DefaultHttpBinding, I didn't found anything wrong.
I just did a quick test on the camel trunk, camel-2.10.x branch, I cannot reproduce the error.;;;","17/May/13 09:05;clement tamisier;I am using ""servlet"" component.
and it works if I use setOutHeader (which is deprecated).
I'll provide soon a test case.;;;","17/May/13 11:36;davsclaus;Ah we have fixed this in the http/servlet/jetty component recently.

Though ideally the org.apache.camel.builder.ProcessorBuilder should check for OUT vs IN; currently looking into that.;;;","17/May/13 12:21;njiang;This issue should be resolved in CAMEL-6349.;;;","17/May/13 13:14;davsclaus;Fixed the DSL with the setHeader / removeHeaders EIPs to work correctly on OUT or IN;;;",,,,,,,,,,,,,,,,,,,
vm component - Stopping a route when using multipleConsumers should not stop MP if there is other routes using it,CAMEL-6374,12648129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/May/13 07:49,17/May/13 11:17,14/Jul/23 05:49,17/May/13 11:17,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-tp5732616.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6373,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,328485,,,2013-05-17 07:49:52.0,,,,,,,,,,,"0|i1kobr:",328829,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Removing route stops other routes from the same producer,CAMEL-6373,12648126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ikoblik,ikoblik,17/May/13 07:36,17/May/13 11:18,14/Jul/23 05:49,17/May/13 11:18,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,"If there are 2 routes from the same source, e.g.:
{code}
CamelContext camelContext = new DefaultCamelContext();
final PrinterBean bean1 = new PrinterBean(""bean1"");
final PrinterBean bean2 = new PrinterBean(""bean2"");
RouteBuilder builder = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route1"").bean(bean1);
    }

};
RouteBuilder builder2 = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route2"").bean(bean2);
    }
};
camelContext.addRoutes(builder);
camelContext.addRoutes(builder2);
{code}

And if after starting the context {{camelContext.start();}} I stop and remove one of the routes the other one will stop working as well.

{code}
camelContext.stopRoute(""route2"");
camelContext.removeRoute(""route2"");
{code}

These messages will not be delivered to bean1:
{code}
System.out.println(""Sending message"");
ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
for (int i = 0; i < 100; i++) {
    producerTemplate.sendBody(""vm:producer?multipleConsumers=true"", i);
}
{code}

----
When debugging I noticed that in {{SedaEndpoint}} on line 144 it stops shared MulticastProcessor used by the both routes.

Please see this post to get the entire source file:
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-td5732616.html",,davsclaus,ikoblik,,,,,,,,,,,,,,,,,,,,,CAMEL-6374,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,328482,,,Fri May 17 11:18:06 UTC 2013,,,,,,,,,,,"0|i1kob3:",328826,,,,,,,,,,,,,,,,,,,,"17/May/13 11:18;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
GsonDataFormat doesn't use given Gson instance anymore,CAMEL-6369,12647913,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wd_dietmar,wd_dietmar,16/May/13 08:35,17/May/13 06:50,14/Jul/23 05:49,17/May/13 06:50,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-gson,,,,,,0,,,,,,,"Before 2.11.0 it was possible to configure GsonDataFormat to use an externally created and configured Gson instance. (Which was especially necessary since it was not possible to configure via GsonDataFormat.) But in 2.11.0 GsonDataFormat implements ServiceSupport which breaks this. Because doStart _always_ creates a new Gson instance although one has been given by a constructor call.

Probably a 

{code}
if (this.gson == null) {
  // ... old doStart body ...
}
{code}

could do in doStart method.
",,davsclaus,wd_dietmar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,328269,,,Fri May 17 06:50:34 UTC 2013,,,,,,,,,,,"0|i1kmzr:",328613,,,,,,,,,,,,,,,,,,,,"17/May/13 06:11;davsclaus;Thanks for reporting. 

Would you work on a patch to fix this?;;;","17/May/13 06:31;wd_dietmar;You're welcome.

Patch... not really... :| but following workaround works, so I'm pretty sure it's just the above mentioned if which is missing.

{code:java}
package org.apache.camel.component.gson;

import com.google.gson.Gson;

// Workaround for https://issues.apache.org/jira/browse/CAMEL-6369
public class WorkaroundGsonDataFormat extends GsonDataFormat {

  Gson gson;

  public WorkaroundGsonDataFormat(Gson gson, Class<?> unmarshalType) {
    super(gson, unmarshalType);
    this.gson = gson;
  }

  @Override
  protected void doStart() throws Exception {
    if (this.gson == null) {
      super.doStart();
    }
  }

}
{code};;;","17/May/13 06:50;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,
BigDecimalFormat can't deal with the number with big precision,CAMEL-6358,12647436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/May/13 03:03,22/May/13 03:15,14/Jul/23 05:49,22/May/13 03:15,2.11.0,,,,,,,,2.11.1,2.12.0,,,,,,,,,0,,,,,,,"You will get the below error when
{code}
Non-terminating decimal expansion; no exact representable decimal result.
caused by
java.math.BigDecimal.divide(BigDecimal.java:1616)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:38)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:23)
{code}

When parasering the String 00000123567 with the below model.
{code}
@DataField(pos = 1, precision = 10, length = 11, impliedDecimalSeparator = true) 
private BigDecimal	 foobar;
{code}

Here is the discussion about the issue.
http://camel.465427.n5.nabble.com/impliedDecimalSeparator-not-working-for-numbers-starting-with-0-tp5732448.html",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,327792,,,Wed May 22 03:15:34 UTC 2013,,,,,,,,,,,"0|i1kk1r:",328136,,,,,,,,,,,,,,,,,,,,"22/May/13 03:15;njiang;Applied the patch into trunk and camel-2.11.x.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-shiro - Should detect new username if always reauthenticate is false,CAMEL-6352,12647198,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/May/13 08:25,12/May/13 08:39,14/Jul/23 05:49,12/May/13 08:39,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-shiro-security-policy-with-alwaysReauthenticate-set-to-false-doesn-t-detect-seperate-user-loggn-td5732043.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,327555,,,2013-05-12 08:25:46.0,,,,,,,,,,,"0|i1kil3:",327899,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http / servlet - Should set response correctly on Exchange depending on has out or not,CAMEL-6350,12647154,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/May/13 08:10,11/May/13 08:19,14/Jul/23 05:49,11/May/13 08:19,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-http,camel-jetty,camel-servlet,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html

Same problem we noticed in camel-restlet is in camel-servlet ",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,327511,,,2013-05-11 08:10:30.0,,,,,,,,,,,"0|i1kibb:",327855,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - Should set response correctly on Exchange depending on has out or not,CAMEL-6349,12647015,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/May/13 14:26,10/May/13 14:29,14/Jul/23 05:49,10/May/13 14:29,2.10.0,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-restlet,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,327372,,,2013-05-10 14:26:33.0,,,,,,,,,,,"0|i1khgf:",327716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecurityException in HDFS producer/consumer when no security configuration is present,CAMEL-6348,12646909,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mumrah,mumrah,09/May/13 22:58,10/May/13 13:44,14/Jul/23 05:49,10/May/13 13:44,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-hdfs,,,,,,0,,,,,,,"In the HdfsProducer and HdfsConsumer classes, there are calls to get the current security configuration

{code}
Configuration auth = Configuration.getConfiguration();
{code}
 
in order to later reset them after HDFS tramples the system with its own config. However, if no security configuration was set, this throws a SecurityException like:

{code}
Exception in thread ""main"" org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[hdfs://localhost:50001/tmp/camel/?splitStrategy=MESSAGES%3A4]. Reason: java.lang.SecurityException: Unable to locate a login configuration
{code}

My current workaround is to set the system property ""java.security.auth.login.config"" to an empty file. 

It seems like the code should check if a configuration exists before fetching it.",,davsclaus,mumrah,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/May/13 13:04;mumrah;CAMEL-6348.patch;https://issues.apache.org/jira/secure/attachment/12582618/CAMEL-6348.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,327266,,,Fri May 10 13:44:12 UTC 2013,,,,,,,,,,,"0|i1kgsv:",327610,,,,,,,,,,,,,,,,,,,,"10/May/13 12:14;davsclaus;Are you working on a patch?;;;","10/May/13 13:04;mumrah;Not sure how you guys prefer patches. This was generated with ""git diff --no-prefix HEAD"" from the camel-hdfs directory. Let me know if you prefer something else.;;;","10/May/13 13:06;mumrah;This patch basically swallows SecurityExceptions thrown from Configuration.getConfiguration. I consolidated this code into two static methods in HdfsComponent: getJAASConfiguration and setJAASConfiguration.;;;","10/May/13 13:44;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,
DefaultShutdownStrategy shutdown timeout of 0 will never timeout and go in negative time,CAMEL-6341,12646433,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,lleclerc,lleclerc,07/May/13 16:09,06/Oct/15 20:37,14/Jul/23 05:49,17/May/13 13:50,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,"A timeout of 0 won't timeout in the instant, the time will go negative. 

camelcontext.stopRoute(routeId, 0, TimeUnit.SECONDS, false); 

[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -1 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -2 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -3 seconds. 

Found a post related to it there : http://camel.465427.n5.nabble.com/Forcefully-shutting-down-routes-td5722447.html",,alanfoster,davsclaus,lleclerc,mykolap,njiang,,,,,,,,,,,,,,,CAMEL-9196,,,,,,,,,,,,,,,,,"08/May/13 15:28;lleclerc;shutdownStrategy8may2013.patch;https://issues.apache.org/jira/secure/attachment/12582305/shutdownStrategy8may2013.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,326791,,,Tue Oct 06 09:53:45 UTC 2015,,,,,,,,,,,"0|i1kdlj:",327136,,,,,,,,,,,,,,,,,,,,"08/May/13 06:05;davsclaus;Luc, do you want to work on a patch? We should possible validate that the timeout option is a positive number, and not allow 0 or negative values.;;;","08/May/13 15:28;lleclerc;patch (not tested);;;","09/May/13 01:48;njiang;I just checked the code, as there is some inflight exchange, the ShutdownTask will keep waiting for it.
I think we need to check the timeout value before trying to wait for the inflight exchanges are clean.;;;","09/May/13 07:10;davsclaus;I think its better to require the timeout value to be positive, eg > 0.
Then you don't need that special if its 0 check etc.;;;","17/May/13 13:47;davsclaus;Working on a bit better fix so we always require a timeout value, as using 0 do not make sense. And when the timeout was hit, and the task was stuck in that while loop with the (there are still X) then we detect the timeout now, and leave the loop and force shutdown the consumers and remainder part. Which otherwise was only done if we interrupted the sleep thread.;;;","06/Oct/15 09:53;mykolap;Issue marked as fixed but I'm using 2.15.3 and still have this problem

12:48:59,864 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25754 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:00,865 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25755 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:01,865 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25756 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:02,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25757 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:03,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25758 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:04,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25759 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:05,867 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25760 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]

When using hawtio it simply hangs when I try to view properties of Camel Contexts

I am using camel with activemq, but there are no inflight messages in activemq...
;;;",,,,,,,,,,,,,,,,,,
camel cdi uses postconstruct to inject in cdi beans,CAMEL-6336,12646237,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,romain.manni-bucau,romain.manni-bucau,06/May/13 15:56,20/Nov/15 18:08,14/Jul/23 05:49,10/Jul/15 10:01,2.11.0,,,,,,,,2.16.0,,,,camel-cdi,,,,,,0,,,,,,,org.apache.camel.cdi.internal.CamelExtension#onInjectionTarget uses InjectionTarget#postConstruct instead of inject() to inject camel injections. That's not really consistent since postconstruct is done once injections are done because they can be used in post construct methods.,,davsclaus,romain.manni-bucau,,,,,,,,,,,,,,,,,,,,CAMEL-9201,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,326595,,,Fri Jul 10 10:01:17 UTC 2015,,,,,,,,,,,"0|i1kce7:",326940,,,,,,,,,,,,,,,,,,,,"02/Mar/14 11:31;davsclaus;Patches is welcome;;;","10/Jul/15 10:01;davsclaus;Thanks for the suggestion;;;",,,,,,,,,,,,,,,,,,,,,,
Sftp cannot change to parent directory in a stepwise fashion,CAMEL-6335,12646164,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,rodehav,rodehav,06/May/13 07:08,30/Jul/13 07:42,14/Jul/23 05:49,30/Jul/13 07:42,2.10.2,2.10.3,2.10.4,2.11.0,2.9.4,2.9.5,2.9.6,2.9.7,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,0,,,,,,,"The problem occurs when using the sftp protocol with the stepwise option enabled and when polling a subdirectory.

When Camel has finished polling the subdirectory, it attempts to change directory back to the home directory in a stepwise fashion: Doing ""cd .."" one step at a time. This logic has a bug that causes it to try to change to a non-existing directory.

This has been discussed on the user mailing list:

http://mail-archives.apache.org/mod_mbox/camel-users/201305.mbox/%3CCAJ0TPGJ6gdaEuYgjpKG42HR-ozbyC0e5Z=mi2xRDmnonBtY0Eg@mail.gmail.com%3E
",,ay,rodehav,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/May/13 11:07;rodehav;SftpOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12582074/SftpOperations.java.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,326522,,,Tue Jul 30 07:42:29 UTC 2013,,,,,,,,,,,"0|i1kbxz:",326867,,,,,,,,,,,,,,,,,,,,"07/May/13 11:07;rodehav;Patch for removing the faulty code.;;;","07/May/13 11:08;rodehav;I attached a patch for removing the code where I found the bug. It works for me but someone need to check why that code was created in the first place. It might have been for a good reason.;;;","07/May/13 11:18;rodehav;Browsing through SVN I noticed that the bug was introduced in version 1382039 on 2012-09-07. Cross referencing with the releases announced in the news feed, it means that the following versions all are affected by this bug:

* 2.9.4
* 2.9.5
* 2.9.6
* 2.9.7
* 2.10.2
* 2.10.3
* 2.10.4
* 2.11.0
;;;","27/May/13 09:40;ay;i think simply removing the code will reintroduce old issues. The code was solving the normal stepwise operations in which we ensure the stepwise traversal moves the path upwards from the current directory to where it started without touching its upper directory where you may not have authorization to access.
CAMEL-5574

however, it appears that this code doesn't not work when the path is at the root (i.e., when the path is ""/"").
in that case, this code needs to be skipped as this special traversal is not needed.

regards, aki;;;","24/Jun/13 18:02;rodehav;Sorry for the late comment. Aki, I don't understand why it is better to ""move the path upwards"" one directory at a time to avoid authorization problems. In fact, you will get more authorization problems if you change to every intermediate directory instead of changing directory ""in one go"". You might not be authorized to access the intermediate directories at all. This really does not make sense to me.;;;","25/Jun/13 10:05;ay;Bengt,
The assumption is, if your ftp server requires stepwise traversal, you will anyway need access right to the segment you traverse.

While going down the path from the starting point using stepwise traversal, you can certainly go up stepwise to the starting point because you have accessed those segment before. The original stepwise traveral jumped to the root while going back and from there going down to the starting point. This can touch the segment outside of the previously accessed segment and resulted in the access error mentioned. And as I mentioned in my previous comment, this code must be skipped if the path is at the root but otherwise, it is needed.

regards, aki
;;;","25/Jun/13 14:12;rodehav;Point well taken - if you are allowed to go down stepwise you are most likely allowed to go back up stepwise. I guess you want to go back up stepwise for the same reason you want to go down stepwise. I just have never understood what situations the stepwise functionality actually remedies. What ftp server does not allow you to change directory directly (""CD subdirA/subdirB"") but requires you to stop att every intermediate directory (""CD subdirA"" then ""CD subdirB"")? What does actually happen?

I'm not opposed to the stepwise functionality but I have never found a situation where I have needed it and I'm just curious abou this since stepwise has been chosen as the default option for Camel.

Anyway, I guess all that is needed is to fix the code according to your suggestion. Then we'll have the best of both worlds (stepwise and not).;;;","25/Jun/13 14:16;rodehav;BTW, Aki, isn't the stepwise stepping up functionality also needed for ftp/ftps? For some reason this functionality is only added to sftp and not to ftp/ftps.;;;","19/Jul/13 08:26;ay;Hi Bengt,
I committed the fix to trunk, 2.11.x, and 2.10.x. If you could try it out, that would be appreciated. 

Regarding the consolidation/refactoring of the ftp and sftp part of the code, you are right. This needs to be done. But for clarity, we should handle this explicitly in another ticket, as it will involve more changes.

thanks.
regards, aki;;;","29/Jul/13 13:14;rodehav;Just back from vacation will test as soon as I can.;;;","30/Jul/13 07:02;rodehav;I tested version 2.11.2-SNAPSHOT built on July 24. My test case that fails with version 2.11.0 now works. Good job!;;;","30/Jul/13 07:42;ay;Thanks to Bengt for his testing the patch.
;;;",,,,,,,,,,,,
StringQuoteHelper not able to handle single quote inside double quote,CAMEL-6333,12645934,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nikolaj.torring,nikolaj.torring,03/May/13 08:46,14/May/13 07:26,14/Jul/23 05:49,14/May/13 07:26,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,"The StringQuoteHelper does not handle single quotes inside double quotes correctly, as these should be seen as part of the content inside the double quote and not an actual single quote start.

This means that a route containing a simple transform like this will fail:

{code:xml} 
<transform>  
  <simple>${in.body.replace(""'UNH+"", ""'\nUNH+"")}</simple>
</transform>
{code} 

",,davsclaus,nikolaj.torring,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,326293,,,Tue May 14 07:26:18 UTC 2013,,,,,,,,,,,"0|i1kaj3:",326638,,,,,,,,,,,,,,,,,,,,"14/May/13 07:26;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
Simple expression and predicate have different behaviors when used along with properties,CAMEL-6328,12645443,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,30/Apr/13 14:36,08/May/13 08:42,14/Jul/23 05:49,08/May/13 08:42,2.10.3,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,1,,,,,,,"The following simple expression doesn't behave the same way whether it's used as expression or predicate:
{noformat}
'{{foo}}' == 'bar'
{noformat}

When used in an expression, it works perfectly.

When used in a predicate the given expression is thrown:
{noformat}
org.apache.camel.language.simple.types.SimpleIllegalSyntaxException: functionEnd has no matching start token at location 7
'{{foo}}' == 'bar'
       *

	at org.apache.camel.language.simple.SimplePredicateParser.parsePredicate(SimplePredicateParser.java:69)
	at org.apache.camel.language.simple.SimpleLanguage.createPredicate(SimpleLanguage.java:136)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:73)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:66)
...
{noformat}

You'll find attached the source code that shows the error",,davsclaus,xfournet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Apr/13 14:37;antoine.dessaigne;CamelTest.java;https://issues.apache.org/jira/secure/attachment/12581161/CamelTest.java","07/May/13 09:54;antoine.dessaigne;properties_everywhere.patch;https://issues.apache.org/jira/secure/attachment/12582069/properties_everywhere.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,325805,,,Wed May 08 08:42:18 UTC 2013,,,,,,,,,,,"0|i1k7iv:",326150,,,,,,,,,,,,,,,,,,,,"07/May/13 09:54;antoine.dessaigne;Here a patch that fixes this issue. The properties are now processed everywhere.;;;","08/May/13 08:42;davsclaus;Thanks for the patch and unit test.

I went for a less dramatic solution as we want to avoid the recursive resolve which also end up resolving the same instances multiple times.

And fixed the problem elsewhere.;;;",,,,,,,,,,,,,,,,,,,,,,
BridgePropertyPlaceholderConfigurer does not support nested Spring properties from System variables,CAMEL-6326,12645224,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hefiso,hefiso,29/Apr/13 12:50,25/May/13 14:51,14/Jul/23 05:49,25/May/13 14:51,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-spring,,,,,,1,,,,,,,"Some work has been done in order to make BridgePropertyPlaceholderConfigurer work with nested spring-style properties (see CAMEL-6233).

However, the fix does not allow using nested spring-style properties for system variables; here only camel-style is supported. For example: 

inCamelSystem=${${environment}.inCamelSystem} does not work when ""environment"" has been set as a system variable (e.g. set to ""junit"").

inCamelSystem={{{{environment}}.inCamelSystem}} works, however.

Camel test case is attached.",Windows 7,davsclaus,hefiso,preben,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5978,,,,,,,,,"29/Apr/13 12:51;hefiso;BridgePropertyPlaceholderConfigurer-problem.zip;https://issues.apache.org/jira/secure/attachment/12580964/BridgePropertyPlaceholderConfigurer-problem.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,325586,,,Sat May 25 11:16:33 UTC 2013,,,,,,,,,,,"0|i1k667:",325931,,,,,,,,,,,,,,,,,,,,"25/May/13 10:28;davsclaus;Thanks for the test case. I got it fixed now.;;;","25/May/13 11:16;preben;Seems related issues;;;",,,,,,,,,,,,,,,,,,,,,,
FixedLength Bindy DataFormat does not work with @Link,CAMEL-6323,12645185,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,29/Apr/13 06:18,30/Apr/13 08:43,14/Jul/23 05:49,30/Apr/13 08:43,2.10.4,2.11.0,,,,,,,,,,,camel-bindy,,,,,,0,,,,,,,FixedLength Bindy DataFormat does not work with @Link,,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,325547,,,Tue Apr 30 08:37:35 UTC 2013,,,,,,,,,,,"0|i1k5xj:",325892,,,,,,,,,,,,,,,,,,,,"30/Apr/13 08:37;cmoulliard;The issue is related to the fact that positions of fields is not guarantee anymore when camel bindy reads several classes and linked them. By example if we have an Order class with 2 fields in poistion 1 and 7 and a link to a class SubRec containing the position 4, then the DataField, AnnotatedField Map will contain 3 entries with position 1, 7 & 4
But when the record AAABBBCCC will be parsed (1, 4, 7) it will be mapped to positions 1, 7 and 4 (fieldA, fieldC and fieldB) which is not correct

So I propose to do the following modification LinkedHashMap --> TreeMap

{code}
public class BindyFixedLengthFactory extends BindyAbstractFactory implements BindyFactory {

    private Map<Integer, DataField> dataFields = new LinkedHashMap<Integer, DataField>();
    private Map<Integer, Field> annotatedFields = new LinkedHashMap<Integer, Field>();
{code}

{code}
public class BindyFixedLengthFactory extends BindyAbstractFactory implements BindyFactory {

    private Map<Integer, DataField> dataFields = new TreeMap<Integer, DataField>();
    private Map<Integer, Field> annotatedFields = new TreeMap<Integer, Field>();
{code}

 ;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-example-cxf-osgi camel-example-cxf-blueprint have some warning when running the test,CAMEL-6322,12645012,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/Apr/13 09:51,28/Apr/13 08:48,14/Jul/23 05:49,28/Apr/13 08:48,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,0,,,,,,,I just found there are some warning message are thrown when running the test of these module or deploy the bundles into OSGi platform. ,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,325374,,,Sun Apr 28 08:48:22 UTC 2013,,,,,,,,,,,"0|i1k4v3:",325719,,,,,,,,,,,,,,,,,,,,"28/Apr/13 08:48;njiang;Applied the patch into trunk, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel-validator not able to resolve schema when using useSharedSchema=false,CAMEL-6317,12644563,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,davidkarlsen@gmail.com,davidkarlsen@gmail.com,25/Apr/13 09:21,21/Jun/13 16:23,14/Jul/23 05:49,21/Jun/13 16:23,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-validator,,,,,,0,,,,,,,"This one works:
{noformat}
 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd"" />
{noformat}

This one doesn't:
{noformat}
 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd?useSharedSchema=false"" />
{noformat}

it fails with:
{noformat}
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
{noformat}

The streamsource object in the validator is populated, but the buffered inputstream object has no content","et2448@ubuntu:~/projects/payment/cashpool/server$ /opt/ibm/ibm-java-i386-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxi3260sr13fp1-20130325_01(SR13 FP1))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr13-20130114_134867 (JIT enabled, AOT enabled)
J9VM - 20130114_134867
JIT  - r9_20130108_31100
GC   - 20121212_AA)
JCL  - 20130315_01


",davidkarlsen@gmail.com,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324928,,,Fri Jun 21 07:36:48 UTC 2013,,,,,,,,,,,"0|i1k247:",325273,,,,,,,,,,,,,,,,,,,,"25/Apr/13 14:15;davsclaus;What error do you see? And how do you run the Camel application? eg in some sort of container etc.;;;","26/Apr/13 09:39;davidkarlsen@gmail.com;Doh - forgot to add the exception - edited in now.
This test is a unit-test running in eclipse. I usually run the app in spring/jetty.;;;","27/Apr/13 07:27;davsclaus;This is likely IBM JDK/JVM issue as the option in Camel doesn't do something different really.
IBM JDK may not use same XML libraries as Oracle/SUN JDKs embed.;;;","27/Apr/13 07:28;davsclaus;Sorry but we dont believe this is a bug in Camel. But due to a bug in the JDK/JVM as state as well on its documentation page.;;;","30/Apr/13 12:29;davidkarlsen@gmail.com;I have a reproducable case in: git@github.com:davidkarlsen/camel6317.git, which fails consistently on the following 4 different JDKs (all latest version) - and the case failing is actually the one to avoid the JDK bug:

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.7/bin/java -version
java version ""1.7.0_21""
Java(TM) SE Runtime Environment (build 1.7.0_21-b11)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.6/bin/java -version
java version ""1.6.0_45""
Java(TM) SE Runtime Environment (build 1.6.0_45-b06)
Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)



et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxi3260sr13fp1-20130325_01(SR13 FP1))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr13-20130114_134867 (JIT enabled, AOT enabled)
J9VM - 20130114_134867
JIT  - r9_20130108_31100
GC   - 20121212_AA)
JCL  - 20130315_01


et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-70/bin/java -version
java version ""1.7.0""
Java(TM) SE Runtime Environment (build pxi3270sr4fp1-20130325_01(SR4 FP1))
IBM J9 VM (build 2.6, JRE 1.7.0 Linux x86-32 20130306_140761 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR4_FP1_20130306_1011_B140761
JIT  - r11.b03_20130131_32403ifx1
GC   - R26_Java726_SR4_FP1_20130306_1011_B140761
J9CL - 20130306_140761)
JCL - 20130315_01 based on Oracle 7u13-b08


;;;","07/Jun/13 15:13;davidkarlsen@gmail.com;Ping? The testcase I refer in my git repo could be incorporated into camel?;;;","20/Jun/13 20:05;muellerc;I can reproduce this issue with 2.12.x on
Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 14:51:28+0100)
Java version: 1.6.0_43, vendor: Apple Inc.
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.8.4"", arch: ""x86_64"", family: ""mac"";;;","21/Jun/13 07:36;davidkarlsen@gmail.com;I see it went on several branches - maybe update the fix-versions?;;;",,,,,,,,,,,,,,,,
Property placeholder optimization broke placeholders in Spring camelContext configuration,CAMEL-6313,12644477,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sdanig,sdanig,24/Apr/13 23:12,13/May/17 06:27,14/Jul/23 05:49,25/Apr/13 08:58,2.10.1,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-spring,,,,,,0,,,,,,,"We are upgrading from 2.10.0 to 2.11.0, and are getting an error on startup.

Example Spring configuration:

{code:xml}<camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
    <contextScan />
    <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
</camelContext>

<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""location"" value=""classpath:foo.properties""/>
</bean>
{code}

As you can see, we use the Camel properties component to configure Camel auto-startup, JMX port, etc.

This is the error we're getting on startup:

{code}org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/component/properties/SpringPropertiesComponentTest.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.component.properties.SpringPropertiesComponentTest.createApplicationContext(SpringPropertiesComponentTest.java:30)
	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:52)
	at junit.framework.TestCase.runBare(TestCase.java:139)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:69)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:85)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	... 27 more
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1063)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:337)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:543)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:266)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	... 40 more{code}

I believe this is a side-effect of the optimization introduced in CAMEL-5508, which was incorporated into 2.10.1 and 2.11.0.

I'll attach a small patch that modifies one of the unit tests in the camel-spring component to reproduce the issue.",,davsclaus,sdanig,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11271,,,,,,,,,"24/Apr/13 23:14;sdanig;camel-6313-test.patch;https://issues.apache.org/jira/secure/attachment/12580411/camel-6313-test.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324844,,,Thu Apr 25 08:58:48 UTC 2013,,,,,,,,,,,"0|i1k1lr:",325190,Regression,,,,,,,,,,,,,,,,,,,"25/Apr/13 08:58;davsclaus;Thanks for reporting and the little patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Setting exceptionHandler on consumer from uri should work,CAMEL-6312,12644404,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Apr/13 18:02,25/Apr/13 14:14,14/Jul/23 05:49,25/Apr/13 14:14,2.10.4,2.11.0,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,"You should be able to set a custom {{ExceptionHandler}} on an endpoint, using {{consumer.exceptionHandler=#myHandler}}, such as from routes.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324771,,,Thu Apr 25 11:11:42 UTC 2013,,,,,,,,,,,"0|i1k15j:",325117,,,,,,,,,,,,,,,,,,,,"25/Apr/13 11:11;davsclaus;When creating a consumer from endpoint.createConsumer, we need to make sure configureConsumer is also called so it can do the extra configuration needed.;;;",,,,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel - When messages sent to DLQ it should always regard it as handled = true,CAMEL-6311,12644399,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Apr/13 17:44,25/Apr/13 07:56,14/Jul/23 05:49,25/Apr/13 07:56,2.10.4,2.11.0,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,camel-jms,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/DeadLetterChanel-does-not-handle-exception-tp5731073.html

You may have a situation when using DeadLetterChannel, and it handles an exception. Then afterwards in the consumer, they should see the Exchange being regarded as handled, with no exception if they call getException.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324766,,,Thu Apr 25 07:32:59 UTC 2013,,,,,,,,,,,"0|i1k14f:",325112,,,,,,,,,,,,,,,,,,,,"25/Apr/13 07:32;davsclaus;This problem is only if you use a custom onException that do *not* have handled=true, then that overrides the handling on the DLC which was the bug.;;;",,,,,,,,,,,,,,,,,,,,,,,
"Sftp upload to subdirectory does not work if home directory is root (""/"" or ""\"")",CAMEL-6309,12644321,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,ay,rodehav,rodehav,24/Apr/13 09:27,29/Jul/13 13:10,14/Jul/23 05:49,23/Jul/13 11:52,2.10.2,2.10.3,2.10.4,2.11.0,,,,,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,3,,,,,,,"It is not possible to upload a file to a sub directory via sftp if the home directory (the directory where you end up directly after login) is root (""/"" or ""\"").

The reason is that after having checked that the sub directory exists (and perhaps created it), Camel tries to go back to the original directory which is ""/"". The SftpOperations.changeCurrentDirectory() method calls the FileUtil.compactPath() method that incorrecly changes ""/"" to ""//"". The bug thus resides in the FileUtil class which is part of camel-core.

I think this bug may cause a number of other errors than the one I have enountered. E g it cannot be possible to change direcotory to ""/"" at all. And, other protocols (like ftp/ftps) might also be affected.

This has been discussed on Camel user list:

http://camel.465427.n5.nabble.com/Problems-with-sftp-in-Camel-2-11-0-td5731359.html
",,ay,davidkarlsen@gmail.com,louisparks,rodehav,xandroalmeida,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Apr/13 07:22;rodehav;FileUtil.java.patch;https://issues.apache.org/jira/secure/attachment/12580496/FileUtil.java.patch","25/Apr/13 07:22;rodehav;FileUtilTest.java.patch;https://issues.apache.org/jira/secure/attachment/12580497/FileUtilTest.java.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324688,,,Mon Jul 29 13:10:13 UTC 2013,,,,,,,,,,,"0|i1k0mv:",325033,Regression,,,,,,,,,,,,,,,,,,,"24/Apr/13 09:34;rodehav;When looking closer at the FileUtil.compactPath() method I notice that it uses the normalizePath() method which in turn does some weird checking of operating system to determine what separator to use. This functionality checks the local operating system (where Camel is running) but does not take into account what separator is being used on the remote server (the sftp server in my case).

The FileUtil class is a generic class that does not know anything about any remote file system's separator - and I don't think it should. Therefore, the FileUtil class can't really be used in SftpOperations since it makes assumptions about separators that it really can't know anything about.

I haven't encountered any erors regarding this yet but it's easy to see that the logic is failing.;;;","24/Apr/13 11:08;rodehav;I noticed that FtpOperations also call the FileUtil.compactPath() method. This probably means that ftp/ftps will have the same error as sftp.;;;","25/Apr/13 07:22;rodehav;Patches for verifying the error (FileUtilTest) and fixing the error (FileUtil).;;;","25/Apr/13 07:34;rodehav;Uploaded patches for extending the FileUtilTest as well as fixing the problem in FileUtil. In FileUtilTest i added four more asserts in testCompactPath(). All of those failed for me before applying the fix. Note that I added the four asserts both for the ""Windows"" case and the ""non-Windows"" case but I have only tested on Windows.;;;","25/Apr/13 07:42;rodehav;I looked further into the ""weird checking of operating systems"" that I wrote about in a previous comment. Although I still think it is kind of weird that the normalizePath() method is checking the local operating system to determine what separator to use, I am now of the opinion that it really doesn't affect the final outcome. This is because the compactPath() method is called with a separator set to ""/"" which means that the produced path will use ""/"" as separator even if the normalized path will use ""\"" (on Windows anyway). So, this probably works.;;;","11/Jul/13 20:22;louisparks;I do not get this error when connecting to a windows based Filezilla ftp server.  But I do get it when connecting to a RHEL box.
Has anyone gotten around this?  I would imagine this would affect a lot of people. I know all my FTP routes no longer work.;;;","22/Jul/13 14:16;xandroalmeida;I encountered this problem using a ftp route .
The work around for this problem is to add one ""/ "" in the path of the FTP directory. ex

/export/home/userone/path => //export/home/userone/path;;;","23/Jul/13 11:52;ay;Hi Bengt,
thanks for the patch and test cases.
I applied a slightly simpler patch.
regards, aki;;;","29/Jul/13 13:10;rodehav;Thanks a lot for fixing Aki!;;;",,,,,,,,,,,,,,,
Regression in 2.11.0 bean invocation,CAMEL-6307,12644073,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davidkarlsen@gmail.com,davidkarlsen@gmail.com,23/Apr/13 09:12,24/Apr/13 17:16,14/Jul/23 05:49,24/Apr/13 17:16,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,argument,beaninvocation,parse,,,,"When upgradring from 2.10.2 to 2.11.0 I met this regression:

I have a step in my route which invokes a bean:
{noformat}
<camel:to uri=""bean:transferConverter?method=transferToMultimap( ${body} )"" />
{noformat}

after the upgrade it threw:
{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: BeanInvocation public abstract com.mycomp.Transfer com.mycomp.TransferService.doTransfer(com.mycomp.Transfer) with [com.mycomp.Transfer@7e299629[.....]]]]

Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: com.mycomp.Transfer with value   
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:149) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:540) ~[camel-core-2.11.0.jar:2.11.0]

{noformat}

If I change the route to:
{noformat}
<camel:to uri=""bean:transferConverter?method=transferToMultimap(${body})"" />
{noformat}
(notice if no whitespace before/after ${body} it works as before).

The problematic code seems to be in org.apache.camel.component.bean.MethodInfo",N/A,davidkarlsen@gmail.com,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324440,,,Wed Apr 24 17:16:19 UTC 2013,,,,,,,,,,,"0|i1jz3r:",324785,Regression,,,,,,,,,,,,,,,,,,,"24/Apr/13 17:16;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,
debugBefore() and debugAfter() not called if unit test extends CamelBlueprintTestSupport,CAMEL-6305,12644067,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tmielke,tmielke,23/Apr/13 07:55,27/Apr/13 09:53,14/Jul/23 05:49,27/Apr/13 09:53,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,camel-test,,,,,0,,,,,,,A test that extends CamelBlueprintTestSupport does not get its debugBefore() and debugAfter() methods called.,,njiang,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Apr/13 07:59;tmielke;CAMEL-6305.diff;https://issues.apache.org/jira/secure/attachment/12579993/CAMEL-6305.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324434,,,Sat Apr 27 09:53:21 UTC 2013,,,,,,,,,,,"0|i1jz2f:",324779,,,,,,,,,,,,,,,,,,,,"23/Apr/13 07:59;tmielke;Attaching slightly modified version of DebugBlueprintTest.java in CAMEL-6305.diff that can serve as unit test for this bug.
 ;;;","23/Apr/13 13:16;njiang;This issue is caused by BlueprintCamelContext is started before the setUp() is called.
We need to introduce a mechanism to avoid staring the BlueprintCamelContext when loading the bundle.;;;","24/Apr/13 10:05;njiang;It's hard to block the starting process of BlueprintCamelContext before the bundle is start, because CamelContext will be publish as OSGi service after the BlueprintCamelContext is started. And CamelBlueprintTestSupport is looking up the CamelContext from the OSGi service registry. 

I finally find a way to fix this issue by just stop the CamelContext in the setUp method if we need the debug feature.;;;","27/Apr/13 09:53;njiang;Applied the patch into trunk, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,
Mina UDP default codec should keep the data as byte[] ,CAMEL-6302,12643980,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tterm001,tterm001,22/Apr/13 19:06,26/Apr/13 09:01,14/Jul/23 05:49,26/Apr/13 09:01,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-mina,camel-mina2,,,,,0,,,,,,,"The MinaUdpProtocolCodecFactory on the consumer side decodes data from an udp datagram to a byte[].

    byte[] bytes = context.getTypeConverter().convertTo(byte[].class, in);

On the provider side where it gets back to the wire it gets converted to a string:

    String value = context.getTypeConverter().convertTo(String.class, message);

and then set to the ByteBuffer with the given charset.

The result is that the original datagram is not valid anymore. The default codec should the data convert to a byte array or keep the data as byte array. 

",,davsclaus,tterm001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Apr/13 19:19;tterm001;camel-mina.patch;https://issues.apache.org/jira/secure/attachment/12579887/camel-mina.patch","24/Apr/13 19:16;tterm001;camel-mina2.patch;https://issues.apache.org/jira/secure/attachment/12580350/camel-mina2.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324347,,,Fri Apr 26 09:01:19 UTC 2013,,,,,,,Patch Available,,,,"0|i1jyjj:",324692,,,,,,,,,,,,,,,,,,,,"22/Apr/13 19:08;tterm001;Attached is a patch with the changes for the codec and a test which results currently in an error. After the fix it will be successful.
;;;","24/Apr/13 19:16;tterm001;camel-mina2 need also the fix for the udp codec.;;;","24/Apr/13 19:16;tterm001;Patch for camel-mina2;;;","26/Apr/13 09:01;davsclaus;Thanks for the patches.;;;",,,,,,,,,,,,,,,,,,,,
AdviceWith doesn't work with doTry,CAMEL-6300,12643838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pjuza,pjuza,21/Apr/13 19:50,09/Jun/13 20:20,14/Jul/23 05:49,22/Apr/13 15:10,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,tests,,,,,,0,,,,,,,"I have the following route definition:
{code}
        from(""direct:billing_"" + operation)
                .routeId(getRouteId(operation))
                .errorHandler(noErrorHandler()) // propagate exceptions to the parent route

                .validate(body().isInstanceOf(
                        com.cleverlance.cleverbss.integration.modules.in.customer.model.Customer.class))

                .beanRef(BILLING_CUSTOMER_ROUTE_BEAN, ""createRequestFor"" + WordUtils.capitalize(operation))

                 // SetCustomer -> XML
                .marshal(jaxbIn)

                .doTry()
                    .to(uri + ""?messageSender=#billingSender"").id(""toURI"")
                .doCatch(AlreadyExistsException.class)
                    .setProperty(exPropertyName, property(Exchange.EXCEPTION_CAUGHT))
                .end()

                .choice()
                    .when(property(exPropertyName).isNull())

                    // XML -> SetCustomerResponse
                    .unmarshal(jaxbOut)
                .endChoice();
{code}

And I would like to replace TO in the tests:
{code}
        getCamelContext().getRouteDefinition(BillingCustomerRoutes.ROUTE_ID_UPDATE_CUSTOMER)
                .adviceWith(getCamelContext(), new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {                        
                        weaveByType(ToDefinition.class).replace().process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                throw new AlreadyExistsException(""msg"", new AlreadyExists());
                            }
                        });
                    }
                });
{code}

When I use weaveById(""toURI"") or weaveByToString(), it doesn't work neither.","Java 6, macos",davsclaus,pjuza,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,324205,,,Sun Jun 09 20:20:43 UTC 2013,,,,,,,,,,,"0|i1jxnz:",324550,,,,,,,,,,,,,,,,,,,,"21/Apr/13 19:53;pjuza;Similar problems - http://camel.465427.n5.nabble.com/Mocking-an-endpoint-within-a-try-catch-block-td5727081.html;;;","22/Apr/13 14:46;davsclaus;Need to merge to 2.11 branch when its setup;;;","09/Jun/13 20:20;pjuza;Please, is any workaround for this bug? 
We aren't able to test every route where we use doTry-doCatch ...;;;",,,,,,,,,,,,,,,,,,,,,
"Camel dont set ID for ToDefinition object, when using validate in the route",CAMEL-6298,12643584,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,horyna,horyna,19/Apr/13 13:28,22/Apr/13 15:23,14/Jul/23 05:49,22/Apr/13 15:23,2.10.4,2.11.0,2.9.6,,,,,,2.10.5,2.11.1,2.12.0,2.9.7,camel-core,,,,,,0,,,,,,,"{code}
from(uri) 
                .routeId(ROUTE_ID) 
                .validate(body().isInstanceOf(SomeClass.class)) 
                .beanRef(bean, ""someMethod"") 
                .marshal(jaxbIn) 
                .to(uri).id(""meID""); 
{code}

Studying Camel source (2.10.4) code i find, that method id(""meID"") is called on ValidateDefinition object and this return empty collection for outputs. 

http://camel.465427.n5.nabble.com/Camel-dont-set-ID-for-ToDefinition-object-td5731143.html",,davsclaus,horyna,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,323951,,,Mon Apr 22 09:23:28 UTC 2013,,,,,,,,,,,"0|i1jw3j:",324296,,,,,,,,,,,,,,,,,,,,"22/Apr/13 08:51;davsclaus;This problem only applies to java dsl.;;;","22/Apr/13 09:23;davsclaus;Need to merge to 2.11 branch when we have it setup;;;",,,,,,,,,,,,,,,,,,,,,,
Commands doesn't support a custom JMX Agent,CAMEL-6297,12643418,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mpriess,mpriess,18/Apr/13 21:11,23/Apr/13 02:27,14/Jul/23 05:49,22/Apr/13 15:25,2.10.4,,,,,,,,2.10.5,2.11.1,,,karaf,,,,,,0,,,,,,,"Hi, 

the latest implementation used the fixed default domain which doesn't work if you specify a custom agent. I removed the fixed default domain name and used the method ManagementAgent.getMBeanObjectDomainName() instead.

In addition I added the attribute InflightExchanges to the route-info command because I really missed it. Would be great if the patch could be integrated into 2.12.

Cheers,

Michael",,davsclaus,mpriess,njiang,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,"18/Apr/13 21:13;mpriess;agent_bug.diff;https://issues.apache.org/jira/secure/attachment/12579419/agent_bug.diff","18/Apr/13 21:13;mpriess;route.xml;https://issues.apache.org/jira/secure/attachment/12579418/route.xml",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,323785,,,Tue Apr 23 02:27:51 UTC 2013,,,,,,,Patch Available,,,,"0|i1jv2n:",324130,,,,,,,,,,,,,,,,,,,,"18/Apr/13 21:13;mpriess;Appended the patch and a small example to reproduce the problem.;;;","19/Apr/13 13:23;njiang;Committed the patch into trunk with thanks to Michael, I will back port it into other branches once Camel 2.11.0 is out.;;;","22/Apr/13 15:27;davsclaus;Maybe this should be patched on the 2.10 branch as well?;;;","23/Apr/13 02:27;njiang;Merged the patch into trunk, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,
<routeContext> can't be reused in multiple contexts when propertly placeholder resolution is used,CAMEL-6291,12642747,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,16/Apr/13 14:45,26/Aug/13 09:50,14/Jul/23 05:49,26/Aug/13 09:50,2.10.0,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,"Currently <routeContext> is a list of RouteDefinitions with ProcessorDefinitions inside. 
When ProcessorDefinition is asked  to makeProcessor, it calls resolvePropertyPlaceHolder that replaces any placeholder with current routeContext data. This makes it impossible to futher use such ProcessorDefinition with any other routeContext with different placeholder resolution data.",,davsclaus,tivv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,323161,,,Mon Aug 26 09:50:28 UTC 2013,,,,,,,,,,,"0|i1jr7z:",323506,,,,,,,,,,,,,,,,,,,,"26/May/13 16:35;tivv;http://camel.apache.org/configuring-camel.html says: ""Reusable routes
The routes defined in <routeContext/> can be reused by multiple <camelContext/>.""
So, this is a bug in documented feature. If you think, it's an enhancement, the page should be corrected.;;;","26/Aug/13 09:50;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-fop - Does not propagate headers,CAMEL-6284,12642560,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,davsclaus,davsclaus,15/Apr/13 16:31,02/May/13 06:11,14/Jul/23 05:49,01/May/13 15:23,,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,1,,,,,,,"See
http://stackoverflow.com/questions/15977012/apache-camel-fop-component-not-propagating-headers

Patches is welcome from the community.",,bvahdat,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,322974,,,Wed May 01 15:23:25 UTC 2013,,,,,,,,,,,"0|i1jq2f:",323319,,,,,,,,,,,,,,,,,,,,"01/May/13 15:06;bvahdat;The {{FopProducer}} doesn't adhere the MEP properly as it always calls {{Exchange#getOut()}} unconditionally to put the transformation result into the OUT message. However it should better do so *only* if the MEP is InOut and in case of InOnly the transformation result should be set as the body of IN Message.

Fixing this properly would cause regression by the existing tests, so let's keep this part the way it already is.;;;","01/May/13 15:23;bvahdat;The fix is backported to the 2.11.x and 2.10.x branches as well.;;;",,,,,,,,,,,,,,,,,,,,,,
Restarting routes using sql aggregation repository may lead to Class loading issues,CAMEL-6283,12642529,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Apr/13 12:49,17/Apr/13 19:38,14/Jul/23 05:49,17/Apr/13 19:38,2.10.4,2.11.0,2.9.0,,,,,,2.10.5,2.11.0,2.9.7,,camel-sql,,,,,,0,,,,,,,Its the code in ClassLoadingAwareObjectInputStream in camel-sql that has the bug.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322943,,,2013-04-15 12:49:30.0,,,,,,,,,,,"0|i1jpvj:",323288,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-cxf-tomcat failed,CAMEL-6281,12642463,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 18:03,17/Apr/13 19:33,14/Jul/23 05:49,17/Apr/13 19:33,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"By accessing ""http://localhost:8080/camel-example-cxf-tomcat/webservices/incident?wsdl"" I get the following exception:
{noformat}
Apr 14, 2013 7:56:37 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Allocate exception for servlet CXFServlet
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'cxf' is defined
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:549)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:277)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
        at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:77)
        at org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:71)
        at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1193)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:865)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:680)
{noformat}","Java 1.6.0_43
Tomcat 7.0.37
Camel 2.11.0",muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322877,,,Mon Apr 15 21:24:16 UTC 2013,,,,,,,,,,,"0|i1jpgv:",323222,,,,,,,,,,,,,,,,,,,,"15/Apr/13 05:14;njiang;It is caused by remove the below line in the camel-config.xml
{code}
<import resource=""classpath:META-INF/cxf/cxf.xml""/>
{code}

I will dig the CxfServlet code to find out the root cause of it, in the meanwhile I had to add this line back to the camel-config.xml.;;;","15/Apr/13 05:19;njiang;Fixed on trunk with r1467851. Need to merge into camel-2.11.x branch;;;","15/Apr/13 21:24;muellerc;It works for me too on trunk;;;",,,,,,,,,,,,,,,,,,,,,
camel-example-osgi failed,CAMEL-6280,12642447,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 15:05,17/Apr/13 19:34,14/Jul/23 05:49,17/Apr/13 19:34,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"I get the following exception by deploying this example into Karaf 2.3.1:
{noformat}
karaf@root> install -s mvn:org.apache.camel/camel-example-osgi/2.11.0
Bundle ID: 54
Error executing command: Error installing bundles:
	Unable to start bundle mvn:org.apache.camel/camel-example-osgi/2.11.0: Unresolved constraint in bundle org.apache.camel.camel-example-osgi [54]: Unable to resolve 54.0: missing requirement [54.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.builder)(version>=2.11.0)(!(version>=2.12.0)))
{noformat}",,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322861,,,Mon Apr 15 21:19:16 UTC 2013,,,,,,,,,,,"0|i1jpdb:",323206,,,,,,,,,,,,,,,,,,,,"15/Apr/13 06:29;njiang;It is caused by the camel-spring feature is not install. I will update the README.txt for it.;;;","15/Apr/13 06:33;njiang;Fixed on trunk with r1467862. Need to merge into camel-2.11.x branch;;;","15/Apr/13 21:19;muellerc;It works for me too on the trunk;;;",,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident-wssecurity failed,CAMEL-6278,12642444,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 14:16,17/Apr/13 19:30,14/Jul/23 05:49,17/Apr/13 19:30,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"If I deploy this example into Karaf 2.3.1 as described, I get the following exception and the service is not available:
{noformat}
karaf@root> osgi:install -s mvn:org.apache.camel/camel-example-reportincident-wssecurity/2.11.0
Bundle ID: 173
karaf@root> Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:609)
	at org.apache.camel.component.cxf.CxfEndpoint.getAddress(CxfEndpoint.java:871)
	at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:219)
	at org.apache.camel.component.cxf.CxfSpringEndpoint.createServerFactoryBean(CxfSpringEndpoint.java:186)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:63)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:206)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:133)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2023)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1953)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1741)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1616)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:120)
	at java.io.FileInputStream.<init>(FileInputStream.java:79)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:73)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:50)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:134)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:120)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1068)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:604)
	... 28 more
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322858,,,Tue Apr 16 19:58:35 UTC 2013,,,,,,,,,,,"0|i1jpcn:",323203,,,,,,,,,,,,,,,,,,,,"16/Apr/13 19:58;muellerc;Works for me too on trunk;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-security failed,CAMEL-6277,12642442,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 13:55,17/Apr/13 19:34,14/Jul/23 05:49,17/Apr/13 19:34,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"{noformat}
cmueller$ mvn jetty:run
..
2013-04-14 15:53:38,288 [main           ] ERROR ContextLoader                  - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	... 50 more
2013-04-14 15:53:38.291:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 15:53:38.314:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
{noformat}",,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322856,,,Mon Apr 15 20:25:08 UTC 2013,,,,,,,,,,,"0|i1jpcf:",323201,,,,,,,,,,,,,,,,,,,,"15/Apr/13 04:12;njiang;It was caused by we upgrade the default version of spring. 
I just committed a quick fix into trunk.;;;","15/Apr/13 04:16;njiang;fixed on trunk with r1467847. Need to merge into camel-2.11.x branch;;;","15/Apr/13 20:25;muellerc;Works for me too from trunk;;;",,,,,,,,,,,,,,,,,,,,,
camel-example-spring-jms failed,CAMEL-6276,12642440,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,14/Apr/13 11:02,17/Apr/13 19:35,14/Jul/23 05:49,17/Apr/13 19:35,,,,,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,"Client and Server using different port numbers:

Server:
{noformat}
2013-04-14 12:54:55,416 [ing.Main.main()] INFO  BrokerService                  - Using Persistence Adapter: MemoryPersistenceAdapter
2013-04-14 12:54:55,431 [JMX connector  ] INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
2013-04-14 12:54:55,560 [ing.Main.main()] INFO  BrokerService                  - Apache ActiveMQ 5.8.0 (myBroker, ID:christians-macbook-pro.fritz.box-56795-1365936895431-0:1) is starting
2013-04-14 12:54:55,567 [ing.Main.main()] INFO  TransportConnector             - Connector vm Started
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportServerThreadSupport   - Listening for connections at: tcp://localhost:1101
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportConnector             - Connector tcp Started
{noformat}

Client
{noformat}
cmueller$ mvn exec:java -PCamelClient
...
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1.1:java (default-cli) on project camel-example-spring-jms: An exception occured while executing the Java class. null: InvocationTargetException: Exception occurred during execution on the exchange: Exchange[Message: 22]: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: Error while attempting to add new Connection to the pool; nested exception is javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61610. Reason: java.net.ConnectException: Connection refused -> [Help 1]
{noformat}",,bvahdat,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-4814,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322854,,,Mon Apr 15 20:12:28 UTC 2013,,,,,,,,,,,"0|i1jpbz:",323199,,,,,,,,,,,,,,,,,,,,"14/Apr/13 20:55;bvahdat;The example breaks if in contrast to what {{README.TXT}} says:

{code}
mvn compile
{code}

One does

{code}
mvn install
{code}

then the generated {{target/custom.properties}} comes into the play for the {{tcp.port}} variable as well however currently this is *only* taken into the account by the server and *not* the 3 clients. So that the clients believe they should connect to the server using the port {{61610}} which is wrong!
;;;","14/Apr/13 21:13;bvahdat;Fixed the example on trunk as well as the 2.10.x branch. Need to backport to the 2.11.x branch when it's ready.;;;","15/Apr/13 20:12;muellerc;It works for me too on trunk;;;",,,,,,,,,,,,,,,,,,,,,
camel-example-route-throttling failed,CAMEL-6275,12642439,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,14/Apr/13 10:48,17/Apr/13 19:42,14/Jul/23 05:49,17/Apr/13 19:42,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"I think the dependency to the ActiveMQ Kahadb store is missing for ActiveMQ 5.8.0.

{noformat}
cmueller$ mvn exec:java -PCamelServer
...
2013-04-14 12:45:10,160 [ing.Main.main()] ERROR BrokerService                  - Cannot create SystemUsage
java.io.IOException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:39)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2215)
	at org.apache.activemq.broker.BrokerService.getPersistenceAdapter(BrokerService.java:1111)
	at org.apache.activemq.broker.BrokerService.getSystemUsage(BrokerService.java:1023)
	at org.apache.activemq.xbean.XBeanBrokerService.ensureSystemUsageHasStore(XBeanBrokerService.java:70)
	at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1522)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:186)
	at org.apache.camel.spring.Main.doStart(Main.java:140)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ClassNotFoundException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2210)
	... 34 more
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322853,,,Sun Apr 14 21:05:01 UTC 2013,,,,,,,,,,,"0|i1jpbr:",323198,,,,,,,,,,,,,,,,,,,,"14/Apr/13 21:05;muellerc;fixed on trunk with r1467828. Need to merge into camel-2.11.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident failed,CAMEL-6274,12642438,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,14/Apr/13 10:43,17/Apr/13 19:36,14/Jul/23 05:49,17/Apr/13 19:36,2.11.0,,,,,,,,2.11.0,,,,examples,,,,,,0,,,,,,,"{noformat}
2013-04-14 12:40:23,207 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 48 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	... 57 more
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	... 65 more
2013-04-14 12:40:23.217:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 12:40:23.241:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:9080
{noformat}",,muellerc,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322852,,,Mon Apr 15 20:08:21 UTC 2013,,,,,,,,,,,"0|i1jpbj:",323197,,,,,,,,,,,,,,,,,,,,"15/Apr/13 05:29;njiang;This issue has the same reason with CAMEL-6281.
Fixed on trunk with r1467852. Need to merge into camel-2.11.x branch;;;","15/Apr/13 20:08;muellerc;Works for me too on trunk;;;",,,,,,,,,,,,,,,,,,,,,,
StringQuoteHelper - Should ignore whitespace between quoted parameters,CAMEL-6271,12642432,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Apr/13 08:43,17/Apr/13 19:45,14/Jul/23 05:49,17/Apr/13 19:45,2.11.0,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,Need to merge to 2.11 branch when created.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322846,,,2013-04-14 08:43:25.0,,,,,,,,,,,"0|i1jpa7:",323191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jclouds cannot install in Apache Karaf,CAMEL-6270,12642375,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/13 10:02,17/Apr/13 19:55,14/Jul/23 05:49,17/Apr/13 19:55,2.11.0,,,,,,,,2.11.0,,,,osgi,,,,,,0,,,,,,,The problem is that jclouds requires guava 13.0.x only and we had imports of 14.0.x in camel-jclouds which causes problems for OSGi.,,davsclaus,muellerc,yziquel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322789,,,Wed Apr 17 19:55:34 UTC 2013,,,,,,,,,,,"0|i1joxj:",323134,,,,,,,,,,,,,,,,,,,,"17/Apr/13 19:55;muellerc;Fixed with
Author: davsclaus
Date: Sat Apr 13 10:03:23 2013
New Revision: 1467582

URL: http://svn.apache.org/r1467582
Log:
CAMEL-6261: Fixed install camel-jclouds in Karaf;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-cxfrs blueprint configure could not be installed if there are some subelement settings,CAMEL-6267,12642259,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Apr/13 15:44,17/Nov/14 01:58,14/Jul/23 05:49,17/Apr/13 20:00,2.10.4,2.11.0,2.9.6,,,,,,2.11.0,2.9.7,,,,,,,,,0,,,,,,,"Got the OOM Exception when blueprint want to parser the setting like this.
{code}
<camelcxf:rsClient id=""rsClient"" address=""http://localhost:9002/rest""
    serviceClass=""org.apache.camel.itest.osgi.cxf.jaxrs.testbean.CustomerService"">
    <camelcxf:features>
         <bean class=""org.apache.cxf.feature.LoggingFeature""/>
     </camelcxf:features> 
  </camelcxf:rsClient>
{code}",,njiang,xiaohui.wu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322673,,,Mon Nov 17 01:58:39 UTC 2014,,,,,,,,,,,"0|i1jo7r:",323018,,,,,,,,,,,,,,,,,,,,"17/Nov/14 01:58;xiaohui.wu;The exception like below:
{code}
java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2219)[:1.7.0_45]
	at java.util.ArrayList.grow(ArrayList.java:242)[:1.7.0_45]
	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)[:1.7.0_45]
	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)[:1.7.0_45]
	at java.util.ArrayList.add(ArrayList.java:440)[:1.7.0_45]
	at org.apache.aries.blueprint.reflect.BeanMetadataImpl.addProperty(BeanMetadataImpl.java:154)
	at org.apache.aries.blueprint.reflect.BeanMetadataImpl.addProperty(BeanMetadataImpl.java:159)
	at org.apache.camel.component.cxf.blueprint.RsServerDefinitionParser.parse(RsServerDefinitionParser.java:72)
	at org.apache.camel.component.cxf.blueprint.CxfNamespaceHandler.parse(CxfNamespaceHandler.java:62)
	at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1279)
	at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:337)
	at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:277)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:309)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:255)
	at org.apache.aries.blueprint.container.BlueprintExtender.checkBundle(BlueprintExtender.java:325)
	at org.apache.aries.blueprint.container.BlueprintExtender.bundleChanged(BlueprintExtender.java:243)
	at org.apache.aries.blueprint.container.BlueprintExtender$BlueprintBundleTrackerCustomizer.modifiedBundle(BlueprintExtender.java:471)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:198)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:128)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:468)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:161)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:117)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4479)
	at org.apache.felix.framework.Felix$4.run(Felix.java:2019)
	at org.apache.felix.framework.Felix$5.run(Felix.java:2061)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_45]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45]
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.support.ServiceSupport: InputStream not being explicitly closed,CAMEL-6262,12642063,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,mdo,mdo,11/Apr/13 16:21,17/Apr/13 19:40,14/Jul/23 05:49,17/Apr/13 19:40,2.11.0,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-core,,,,,,0,,,,,,,"In method getVersion() of ServiceSupport there is an InputStream opened around line 284:

InputStream is = getClass().getResourceAsStream(""/META-INF/maven/org.apache.camel/camel-core/pom.properties"");

This stream is not closed explicitly.

If you undeploy an application from a container like GlassFish you get a warning like this:

[#|2013-04-11T18:02:00.783+0200|WARNING|glassfish3.1.2|javax.enterprise.system.core.classloading.com.sun.enterprise.loader|_ThreadID=137;_ThreadName=Thread-2;|Input stream has been finalized or forced closed w
ithout being explicitly closed; stream instantiation reported in following stack trace
java.lang.Throwable
        at com.sun.enterprise.loader.ASURLClassLoader$SentinelInputStream.<init>(ASURLClassLoader.java:1230)
        at com.sun.enterprise.loader.ASURLClassLoader$InternalJarURLConnection.getInputStream(ASURLClassLoader.java:1338)
        at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:233)
        at com.sun.enterprise.loader.ASURLClassLoader.getResourceAsStream(ASURLClassLoader.java:872)
        at java.lang.Class.getResourceAsStream(Class.java:2049)
        at org.apache.camel.support.ServiceSupport.getVersion(ServiceSupport.java:284)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1439)
        at org.apache.camel.cdi.CdiCamelContext.start(CdiCamelContext.java:61)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[...]


These were similar issues: XBEAN-190, JCR-2962

",,bvahdat,davsclaus,mdo,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,322477,,,Mon Apr 15 07:30:18 UTC 2013,,,,,,,,,,,"0|i1jn07:",322822,,,,,,,,,,,,,,,,,,,,"11/Apr/13 17:27;davsclaus;Thanks for reporting.

Are you considering working on a patch?;;;","12/Apr/13 10:08;mdo;Hello Claus, yes I'd do, but I see it was already fixed in trunk by Willem. Thanks!;;;","15/Apr/13 07:24;bvahdat;Willem, not an issue at all, but IMHO instead of:

{code}
IOHelper.close(is, null, null);
{code}

We could probably better do:

{code}
IOHelper.close(is, ""pom.properties"", LOG);
{code}

Or the shortest way of it if you would prefer:

{code}
IOHelper.close(is);
{code};;;","15/Apr/13 07:30;njiang;Hi, Babak
Yeah, it makes sense. 
I will updated the code for it.
;;;",,,,,,,,,,,,,,,,,,,,
Simple ognl expression - Possible NPE when using String replaceFirst and replacing with an empty string,CAMEL-6261,12641818,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/13 12:04,17/Apr/13 19:56,14/Jul/23 05:49,17/Apr/13 19:56,2.11.0,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/2-11-NPE-with-replaceFirst-tp5730321.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322233,,,Sat Apr 13 10:03:31 UTC 2013,,,,,,,,,,,"0|i1jlhz:",322578,,,,,,,,,,,,,,,,,,,,"13/Apr/13 10:03;davsclaus;Need to backport to 2.11 branch when its created.;;;",,,,,,,,,,,,,,,,,,,,,,,
Scheduled thread pools is not removed from JMX when shutting down,CAMEL-6259,12641797,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/13 09:15,10/Apr/13 21:20,14/Jul/23 05:49,10/Apr/13 21:20,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-core,jmx,,,,,0,,,,,,,"For example if a route use the aggragate eip with a completion timeout, then the scheduled thread pool is enlisted in JMX. But not removed when the route is removed. Though as fail-safe we always remove the JMX when camel is stopping.

But for people doing dynamic add/remove routes this can become a problem.",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Apr/13 09:18;davsclaus;pools.png;https://issues.apache.org/jira/secure/attachment/12577979/pools.png",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322212,,,Wed Apr 10 21:20:35 UTC 2013,,,,,,,,,,,"0|i1jldb:",322557,,,,,,,,,,,,,,,,,,,,"10/Apr/13 09:19;davsclaus;Screenshot of the mbeans not being removed.;;;","10/Apr/13 10:00;davsclaus;Need to merge to 2.11 branch.;;;","10/Apr/13 21:20;muellerc;Because we redo the Camel 2.11.0 release, this issue in now included in Camel 2.11.0;;;",,,,,,,,,,,,,,,,,,,,,
CXF Example OSGi fail in Karaf,CAMEL-6257,12641698,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,09/Apr/13 19:31,17/May/13 14:01,14/Jul/23 05:49,17/May/13 14:01,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,examples,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/CXF-Example-OSGi-td5730551.html,,davsclaus,muellerc,njiang,sobkowiak,,,,,,,,,,,,,,,,,,,,,,CXF-4970,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322113,,,Fri May 17 14:01:56 UTC 2013,,,,,,,,,,,"0|i1jkrb:",322458,,,,,,,,,,,,,,,,,,,,"12/Apr/13 17:13;muellerc;This example works in Camel 2.11.0.;;;","12/Apr/13 17:18;muellerc;The camel-example-cxf-blueprint example works, but not the camel-example-cxf-osgi example with Camel 2.11.0;;;","13/Apr/13 10:56;sobkowiak;I have just tested the latest snaphost form (from the 2.10.x branch) containing both the import of META-INF/cxf/cxf.xml and import of META-INF.cxf in the OSGi manifest and it works on SMX. There is another problem with test cases.

Afetr removing the both imports the example works too. The original issue was that the spring context imported the META-INF/cxf/cxf.xml but META-INF.cxf was not included in Manifest imports. ;;;","14/Apr/13 20:33;muellerc;Thanks Krzysztof Sobkowiak for reporting and the suggested solution. I fixed it in camel-2.10.x accordingly.;;;","16/Apr/13 20:06;muellerc;Willem, could you please have a look at this issues? It's the last example which blocks the new Camel 2.11.0 RC.;;;","17/Apr/13 02:51;njiang;I just have a quick check of the example, it looks like the exposed cxf endpoint cannot be found by the CXF servlet. If I changed the address to use the jetty engine, I can access the service without any trouble.
I will keep digging the issue.;;;","17/Apr/13 02:59;njiang;It should be a bug of CXF 2.7.4, when I switch CXF version to 2.7.3, the example is working without any issue.
As we cannot wait for the new version of CXF release, I suggest we mark it as know issue, and fix it in Camel 2.11.1.
;;;","19/Apr/13 13:54;njiang;This issue is fixed in CXF-4970, we can close this issue when camel upgrades to new released CXF version.;;;","17/May/13 14:01;davsclaus;We have upgraded to newer CXF versions;;;",,,,,,,,,,,,,,,
Camel xmpp dynamic router is not sending incoming messages to openfire upon first failed groupchatroom join,CAMEL-6256,12641635,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pshetty.kateel,pshetty.kateel,09/Apr/13 14:57,28/Apr/16 14:05,14/Jul/23 05:49,28/Apr/16 14:05,2.10.3,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-xmpp,,,,,,0,connection,groupchat,xmpp,,,,"Reference : http://camel.465427.n5.nabble.com/Camel-xmpp-dynamic-router-is-not-connecting-to-openfire-td5730506.html#a5730537

{code:xml} 
<camel:route id=""eventSubscriber"">
                        <camel:from uri=""ref:eventReceiverUri"" />
                         <camel:dynamicRouter>                  
                    <camel:method ref=""eventRouterBean"" method=""processEvent""/>
                </camel:dynamicRouter>
                </camel:route> 
{code}

In eventRouterBean's processEvent method, we are building xmpp groupchat room url depending upon the message and forwading the same message into respective groupchatrooms. 
If resulting groupchat room is not existing, it will log message 
WARN 2013-04-05 17:55:48,190 (UnitOfWorkProcessor.java processAsync:162) - Caught unhandled exception while processing ExchangeId: ID-INGBTCPIC8NB038-63130-1365164745141-0-3 
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://<ip>:5222/?password=******&resource=zone_4fc100e4-d004-4a0b-a7e2-7cf910585af6_51&room=zone_4fc100e4-d004-4a0b-a7e2-7cf910585af6_51%40conference.test.com&serviceName=ispf.com&user=messagepublisher%40test.com]. Reason: not-allowed(405) 
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:395) 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:278) 
        at org.apache.camel.processor.RoutingSlip.processExchange(RoutingSlip.java:280) 
        at org.apache.camel.processor.RoutingSlip.doRoutingSlip(RoutingSlip.java:205) 
        at org.apache.camel.processor.RoutingSlip.process(RoutingSlip.java:135) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
and ...... 
Caused by: not-allowed(405) 
        at org.jivesoftware.smackx.muc.MultiUserChat.join(MultiUserChat.java:501) 
        at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:84) 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) 
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62) 
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:393) 
        ... 40 more 

This is still fine. 
But issue is if I create a groupchat room in openfire, it should forward new incoming message to same groupchat room. But it is not forwarding.
It is keep on logging error message as 'Not connected to the server' repeatedly for all messages.

But if I restart the camel context, then it starts working. 
Looks like it is caching url and its connection as not allowed in dynamic router. 
What will be the solution? 
And even the exception is thowing at ProducerCache.doGetProducer().. 
So how to clear cache for failed connections?

",camel xmpp routing with openfire xmpp server.  Used groupchat configurations,davsclaus,njiang,pshetty.kateel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,322051,,,Thu Apr 28 14:05:32 UTC 2016,,,,,,,,,,,"0|i1jkdj:",322396,,,,,,,,,,,,,,,,,,,,"09/Apr/13 15:01;pshetty.kateel;I just debugged using source code. 
It looks like bug in XmppEndpoint.createConnection method. 

If no groupchat room is avalilable, then XmppGroupChatProducer's method doStart;  chat.join() statement will throw exception. 
Upon this exception, ServiceSupport.stop() is trggered. This triggers XmppGroupChatProducer's doStop() method.  Here it disconnects the connection and sets to null. Till here pretty much ok. 
But XmppEndpoint's connection variable still holds the old connection object and it is in disconnected and unauthorised state. 

For next successive messages, XmppEndpoint.createConnection will return the old connection object, but it is in disconnected state.
Because of this, always we will have connection with disconnected and unauthenticated state. 
So I feel 'createConnection' not only need to check  for null, but also it should also check for connected state and authenticated state. 


If anyone feels 'XmppEndpoint.createConnection' is very much correct, then we need to modify XMPPGroupChatProducer's doStart() or doStop() method. 

I still feel need to correct XmppEndpoint.createConnection  method changes. 

---
Exception is thrown for 2nd and later messages at  chat = new MultiUserChat(connection, room); statement of XmppGroupChatProducer's doStart() method. 
Exception says 'Not connected to the server'. So It means that we need to reconnect and authenticate it if disconnected from earlier unit of work.

;;;","16/Apr/13 11:39;pshetty.kateel;I just observed the codebase at head vesrion of  https://svn.apache.org/repos/asf/camel/trunk.

Here I can see the code changes as below.

File : org.apache.camel.component.xmpp.XmppEndpoint
Method : public synchronized XMPPConnection createConnection()
Changes : if (connection != null && connection.isConnected()) {       FROM     if (connection != null) {

Looks like, this change will fix this defect, I feel.   Need to test more.

Will this changes  go for Camel 2.11.0 release?
I tried to download src from http://apache.techartifact.com/mirror/camel/apache-camel/2.11.0/apache-camel-2.11.0-src.zip to verify the inclusion of this changes.
But link is not working yet.



;;;","16/Apr/13 15:17;njiang;Hi Prakash

I just checked the change log of XmppEndpoint, the change is introduced by the patch of CAMEL-4224.
This change will be part of camel 2.11.0.
;;;","17/Apr/13 07:03;pshetty.kateel;Thanks Willem for update.

I took only org.apache.camel.component.xmpp.XmppEndpoint class and testing my application.  It works fine and it is getting reconnected successfully and I can send messages 2nd time onwards.

But one more issue poped up.
On restarting of Openfire XMPP server and recreation of same group chat room, the connection is not re-joining to the particular groupchat room, but connection is really connected and authenticated.

I can see the following error code in Openfire server.
 <error code=""406"" type=""modify""><not-acceptable xmlns=""urn:ietf:params:xml:ns:xmpp-stanzas""/></error></message>
This comes generally, when user is not joined the groupchatroom.

I debuged the code.  Following is the observation:
In ProducerCache's doGetProducer method, it will return old 'XmppGroupCHatProducer' through statement Producer answer = producers.get(key);
It is always not null even after XMPP restart.  So it wont create new producer and it wont call ServiceHelper.startService(answer);  So XmppGroupCHatProducer's doStart() wont be called.
One more strange thing is org.jivesoftware.smackx.muc.MultiUserChat's isJoined is always true, event if connection is no joined the room. So we cannot use this flag also to rejoin.

I am not sure how to solve this.
This issue is on 2.10.3

I feel, I need to check with whole new 2.11.0 codebase.

Or I probably need to raise one more defect..


;;;","17/Apr/13 07:15;pshetty.kateel;Also note that, on restarting of Openfire, we are deleting groupchat rooms.  I mean we are creating non-Persistent chat rooms. So it goes off on restart and our application will recreate based on user request dynamically. 
That is the reason we are using dynamic router and also creating dynamic resource for same user in xmpp connection url to avoid 'Already logged in' error.;;;","28/Apr/16 14:05;davsclaus;The stale connection is not kept anymore, but only a working connection is set to be used.;;;",,,,,,,,,,,,,,,,,,
NotifyBuilder - whenSentTo - Should be per exchange and not a shared state,CAMEL-6255,12641629,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Apr/13 14:32,10/Apr/13 21:24,14/Jul/23 05:49,10/Apr/13 21:24,2.10.3,2.11.0,,,,,,,2.10.5,2.11.0,,,camel-core,tests,,,,,1,,,,,,,"See SO
http://stackoverflow.com/questions/15849116/camel-splitter-producing-incorrect-number-of-done-exchanges-seen-by-notifybuilde

There is a little bug in whenSentTo in the notify builder.",,davsclaus,muellerc,whaley,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,322045,,,Wed Apr 10 21:24:39 UTC 2013,,,,,,,,,,,"0|i1jkc7:",322390,,,,,,,,,,,,,,,,,,,,"10/Apr/13 06:18;davsclaus;Need to merge to 2.11 branch when we have this branch setup.;;;","10/Apr/13 21:24;muellerc;Because we redo the Camel 2.11.0 release, this issue in now included in Camel 2.11.0;;;",,,,,,,,,,,,,,,,,,,,,,
JettyToCxfRs proxy doesn't work,CAMEL-6253,12641533,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Apr/13 07:10,03/Jun/13 09:19,14/Jul/23 05:49,03/Jun/13 09:19,2.10.4,2.11.0,,,,,,,2.11.0,,,,,,,,,,0,,,,,,,"I'm working a testcase which is using Jetty component and CXFRS component to proxy the rest request just like this
{code}
<from uri=""jetty://http://localhost:{{CXFTestSupport.port5}}/CxfRsRouterTest/route?matchOnUriPrefix=true&amp;bridgeEndpoint=true""/>
       <!-- We can remove this configure as the CXFRS producer is using the HttpAPI by default -->
       <setHeader headerName=""CamelCxfRsUsingHttpAPI"">
         <constant>True</constant>        
       </setHeader>
       <to uri=""cxfrs://bean://rsClient""/>
{code}

CXFRS producer is leverage the Exchange.HTTP_PATH to setup the request URL just like the Http producer does. But the Exchange.HTTP_PATH header which is set by http component is a full request path, which is not a relative path as the CXFRS producer wants. So JettyToCxfRs proxy doesn't work.

To Fix this issue, we need aline the definition of Exchange.HTTP_PATH across the CAMEL components, and it could save us lots of time to build up a right HTTP request url if the header just means a relative path. BTW user can get the full request path by looking up the header with Exchange.HTTP_URI.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Apr/13 07:14;njiang;CAMEL-6253.patch;https://issues.apache.org/jira/secure/attachment/12577736/CAMEL-6253.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,321949,,,Mon Jun 03 09:19:49 UTC 2013,,,,,,,,,,,"0|i1jjqv:",322294,,,,,,,,,,,,,,,,,,,,"09/Apr/13 07:14;njiang;As we are in the middle of camel 2.11.0 release. I just attached the patch for review.;;;","03/Jun/13 09:19;njiang;Applied the patch into trunk. It should be a part of camel 2.11.0.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-aws - Possible concurrent modification exception,CAMEL-6252,12641383,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,davsclaus,davsclaus,08/Apr/13 15:42,27/Jun/13 21:55,14/Jul/23 05:49,27/Jun/13 21:55,2.10.4,2.11.0,,,,,,,2.10.6,2.11.1,2.12.0,,camel-aws,tests,,,,,0,,,,,,,"Noticed this from CI test servers

{code}
Stacktrace

java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819)
	at java.util.ArrayList$Itr.next(ArrayList.java:791)
	at org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest.longReceiveExtendsMessageVisibility(SqsExtendMessageVisibilityTest.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Standard Output

@SLTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.032 sec
@SLRunning org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,321799,,,2013-04-08 15:42:09.0,,,,,,,,,,,"0|i1jitj:",322144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:run in blueprint is broken,CAMEL-6244,12641179,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Apr/13 05:57,06/Apr/13 06:43,14/Jul/23 05:49,06/Apr/13 06:43,2.11.0,,,,,,,,2.11.0,,,,tooling,,,,,,0,,,,,,,"Due the Aries blueprint upgrade then the blueprint extenders may run 2+ due classpath issues.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,321595,,,Sat Apr 06 06:43:56 UTC 2013,,,,,,,,,,,"0|i1jhk7:",321940,,,,,,,,,,,,,,,,,,,,"06/Apr/13 06:43;davsclaus;All deps on camel-blueprint for blueprint stuff should be provided scope so they wont conflict when running with camel:run or testing. 

Also made sure camel:run dont have duplicate jars in the classpath by using a set / and made the classpath logging per line so its easier to read.;;;",,,,,,,,,,,,,,,,,,,,,,,
npe when receiving a soapfault with the CXF_MESSAGE dataformat,CAMEL-6243,12641139,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mr_dfuse,mr_dfuse,05/Apr/13 22:14,25/Oct/13 11:36,14/Jul/23 05:49,20/Oct/13 08:53,2.10.3,2.10.4,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cxf,,,,,,0,,,,,,,"cxf proxy scenario:

from(""cxf:bean:brokerOrderLimit?dataFormat=CXF_MESSAGE"")
.to(""cxf:bean:thalerOrderLimit?dataFormat=CXF_MESSAGE"");

When the thalerOrderLimit service returns a SOAPFault a NPE occurs:
java.lang.NullPointerException
	at org.apache.cxf.interceptor.ClientFaultConverter.getConstructor(ClientFaultConverter.java:204)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:176)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:80)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:112)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:783)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1694)[cxf-rt-transports-http-2.6.3.jar:2.6.3]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1535)[cxf-rt-transports-http-2.6.3.jar:2.6.3]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)[cxf-api-2.6.3.jar:2.6.3]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)[:1.6.0_21]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)[cxf-api-2.6.3.jar:2.6.3]
	at java.lang.Thread.run(Unknown Source)[:1.6.0_21]
Exception in thread ""default-workqueue-1"" java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getContentFromCxf(DefaultCxfBinding.java:642)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfResponse(DefaultCxfBinding.java:151)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:81)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1540)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)
	at java.lang.Thread.run(Unknown Source)

Worked around by switching to PAYLOAD","Windows 7, Java 6",davsclaus,mr_dfuse,njiang,,,,,,,,,,,,,,,,,,,,,CAMEL-6404,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,321555,,,Sun Oct 20 08:53:05 UTC 2013,,,,,,,,,,,"0|i1jhbb:",321900,,,,,,,,,,,,,,,,,,,,"06/Apr/13 09:25;njiang;What kind of SOAP fault does the service return?
Can you just past the SOAP message here?;;;","08/Apr/13 08:42;mr_dfuse;<env:Envelope xmlns:env=""http://schemas.xmlsoap.org/soap/envelope/"">
   <env:Header/>
   <env:Body>
      <env:Fault>
         <faultcode>env:Server</faultcode>
         <faultstring>The request cannot be processed, time is over. (The request timestamp is over the timeout)</faultstring>
         <detail>
            <ns2:CWFault xmlns:ns2=""http://acme.com/"">
               <ns2:errorMessageId>WSEX0252</ns2:errorMessageId>
               <ns2:errorMessage>The request cannot be processed, time is over. (The request timestamp is over the timeout)</ns2:errorMessage>
               <ns2:comment>The request timestamp is over the timeout</ns2:comment>
            </ns2:CWFault>
         </detail>
      </env:Fault>
   </env:Body>
</env:Envelope>;;;","10/Oct/13 09:11;davsclaus;Willem do you mind checking on this, as a NPE is a bug in camel-cxf / CXF which we must fix.;;;","10/Oct/13 13:20;njiang;This issue is same with the CAMEL-6404 which is fixed long time ago.;;;","20/Oct/13 08:22;njiang;I managed to reproduce the first NPE error by not applying the serviceClass attribute on the CxfEndpoint, I will commit a quick fix for it shortly.;;;","20/Oct/13 08:53;njiang;Applied patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,
Krati component - Should preserve headers,CAMEL-6242,12641038,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Apr/13 12:58,05/Apr/13 13:10,14/Jul/23 05:49,05/Apr/13 13:10,,,,,,,,,2.10.5,2.11.0,,,camel-krati,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Krati-Component-isn-t-preserving-headers-tp5730374.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,321454,,,2013-04-05 12:58:13.0,,,,,,,,,,,"0|i1jgov:",321799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - Multiple models in the same package lead to unpredictable results,CAMEL-6234,12640367,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,02/Apr/13 20:07,11/May/13 15:50,14/Jul/23 05:49,11/May/13 15:50,2.10.4,2.9.6,,,,,,,2.11.0,,,,camel-bindy,,,,,,0,,,,,,,"BindyCsvDataFormat only holds one model. When multiple models are defined in the same package or field positions overlap, only one @DataField is kept (the last one) overwriting the previous mapping. This leads to unpredictable behavior, from the wrong field value being populated, to format mismatch exceptions for fields of different types.

This behavior is by design, as camel supports deep models, spread over multiple files (see AnnotationModelLoader.loadModels() implementation where whole packages are scanned).

The documentation is rather vague, but I believe supporting multiple models in the same package is not really feasible, and overkill at best. Therefore my preference would be to keep the functionality as is and document the limitation.

Currently the BindyCVSFieldEndingWithSeparatorIssueTest fails due to a conflict between MyCsvRecord.class and BindyDoubleQuotesCsvUnmarshallTest.Order.class defined in the same package. Moving MyCsvRecord to a different package is a trivial fix. I will look into adding some model validation as well to WARN if the model is inconsistent (i.e. has overlaps or gaps).

",,hadrian,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,320830,,,Sat May 11 15:50:36 UTC 2013,,,,,,,,,,,"0|i1jctr:",321171,,,,,,,,,,,,,,,,,,,,"03/Apr/13 01:15;hadrian;Patch applied to trunk. Need to backport to 2.10.x and 2.9.x and update docs.;;;","11/May/13 15:46;muellerc;I documented the limitation in the WIKI page.;;;","11/May/13 15:50;muellerc;Because the Camel 2.10.x branch differs from the current trunk and the Camel 2.9.x branch isn't supported anymore, I would not pack porting this fix (until may somebody request it).;;;",,,,,,,,,,,,,,,,,,,,,
InOut ActiveMQ exception Cannot publish to a deleted Destination,CAMEL-6229,12640008,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,alanfoster,alanfoster,31/Mar/13 21:33,02/May/13 02:30,14/Jul/23 05:49,01/Apr/13 11:45,,,,,,,,,,,,,,,,,,,0,,,,,,,"When exposing a cxf-rs webservice and attempting to talk to another route, using InOut MEP + ActiveMQ the following exception occurs 

{code}
22:18:14,813 | INFO  | tp1882786420-364 | route1                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Received a request :: 
22:18:14,838 | WARN  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
22:18:14,849 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:3"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:4"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:5"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:6"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:7"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:8"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:2"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:1"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:9"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:10"" on closing pooled connection: The connection is already closed
22:18:14,857 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Consumer is closed
22:18:14,919 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,927 | INFO  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,939 | INFO  | responseHandler] | route2                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Response handler successfully received a request!
22:18:14,943 | WARN  | responseHandler] | EndpointMessageListener          | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Execution of JMS message listener failed. Caused by: [org.apache.camel.RuntimeCamelException - org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10]
org.apache.camel.RuntimeCamelException: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:125)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[153:org.springframework.jms:3.0.7.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
Caused by: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:285)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:469)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:200)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.sendReply(EndpointMessageListener.java:358)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener$EndpointMessageListenerAsyncCallback.done(EndpointMessageListener.java:211)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:108)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	... 11 more
Caused by: javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1731)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:277)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:212)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:79)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:62)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:592)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSend(JmsConfiguration.java:278)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:217)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:159)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$4.doInJms(JmsConfiguration.java:202)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[153:org.springframework.jms:3.0.7.RELEASE]
	... 15 more
22:18:35,016 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 154 - org.apache.camel.camel-jms - 2.10.0.fuse-71-047 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-49919-1364764620418-0-215]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213) and continue routing.
22:18:35,019 | ERROR | responseHandler] | DefaultErrorHandler              | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Failed delivery for (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213). Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_27]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_27]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
22:18:35,030 | WARN  | tp1882786420-362 | WebApplicationExceptionMapper    | 183 - org.apache.cxf.cxf-rt-frontend-jaxrs - 2.6.0.fuse-71-047 | javax.ws.rs.WebApplicationException: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:149)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:104)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:167)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:94)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:94)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:231)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:348)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:312)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1040)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:976)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:193)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handleAsync(Server.java:403)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:79)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	... 1 more
{code}

Using :
Camel 2.10
ActiveMQ Camel 5.7
cxf 2.6
Windows 7

",,alanfoster,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5865,,,,,,,,,"31/Mar/13 22:37;alanfoster;camel-6229.rar;https://issues.apache.org/jira/secure/attachment/12576306/camel-6229.rar",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,320476,,,Mon Apr 01 11:43:46 UTC 2013,,,,,,,,,,,"0|i1jan3:",320817,,,,,,,,,,,,,,,,,,,,"31/Mar/13 22:35;raulvk;Two things:

# Could be related to CAMEL-5865. The InOut logic was a bit rough around the edges and was much improved in that ticket. Please try your code with Camel 2.10.4 and give us some feedback.
# Please post your route logic. In particular, I'd like to see your AMQ component configuration (JmsConfiguration) and the AMQ endpoint options, of both the producer and the consumer.

Thanks.;;;","31/Mar/13 22:37;alanfoster;Attached a sample project which allows you to reproduce this error.

Note, I haven't been create a simple JUnit test that extends CamelBlueprintTestSupport, as I get a lot of strange exceptions - I'm not sure if this is a bug or not, but perhaps someone could shed light on it however?

So currently the steps to reproduce this bug actually depend on it being deployed in a container, sorry

  1) install with :  mvn install -Dmaven.test.skip=true
  2) Deploy to a container
  3) Run the junit test manually a couple of times. Sometimes the test will pass, but it also fails quite frequently

Sorry again that I couldn't get it succesfully running as a JUnit test!;;;","31/Mar/13 22:48;raulvk;Thanks. Can you try with Camel JMS 2.10.4? 

Also, when you say you are on Camel 2.10, you mean Camel 2.10.0? What micro version exactly?;;;","31/Mar/13 22:57;raulvk;Ok, never mind, I see the Camel version in the logs ;)

I don't know if FuseSource/Red Hat have backmerged some important JMS patches onto their 2.10.0.fuse-71-047 release.

From the logs, it looks like they backmerged the initial support for concurrentConsumers on temp reply queues from Camel 2.10.3, but they didn't merge the latest fixes which actually make this feature useable (CAMEL-5865) in Camel 2.10.4. My reasoning is that I see 10 different temp queues being created for the same request queue, which is exactly what CAMEL-5865 resolves.

Please give it a shot with Camel 2.10.4. You should be able to uninstall the current camel-jms component and install 2.10.4 with:

{code}
install -s mvn:org.apache.camel/camel-jms/2.10.4
{code}

Hopefully no more dependency upgrades will be necessary. ;;;","31/Mar/13 23:37;alanfoster;[~raulvk] Thanks for the response! I did think that your fixed jira CAMEL-5865 seemed familiar :)

I wasn't able to swap out the camel-jms in the fuse container, but I downloaded service mix 4.5.1 which has camel 2.10.4 in it by default, and it seems to be working, hurray :);;;","31/Mar/13 23:46;alanfoster;Ah, I was just about to mark this as resolved, and then I noticed some very odd things in the log files :

{code}
0:28:59,458 | INFO  | tp1937409810-134 | route1                           | 96 - org.apache.camel.camel-core - 2.10.4 | Received a request :: 
00:28:59,461 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Exception inside the DMLC for Temporary ReplyTo Queue for destination responseHandler, refreshing ReplyTo destination
javax.jms.IllegalStateException: The Consumer is closed
	at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:817)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:581)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67)[59:org.apache.activemq.activemq-pool:5.7.0]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:429)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[123:org.springframework.jms:3.0.7.RELEASE]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
00:28:59,462 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
00:28:59,468 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:1"" on closing pooled connection: The connection is already closed
00:28:59,472 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:2"" on closing pooled connection: The connection is already closed
00:28:59,472 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Session is closed
00:28:59,479 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,482 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,486 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
{code}

And these are continuously output the log file too

{code}
00:32:11,049 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:11,053 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:12,055 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:12,056 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:13,057 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:13,058 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
{code}

I'm also seeing a lot of other exceptions in the log file too, related to both cxf/camel/activemq, but it seems to handle new requests just fine!

I wonder if this is reproducible on your end at all? :) 

I really wish I could've gotten that JUnit test to run! :(

Edit - I can't seem to reproduce this after a fresh start of servicemix unfortunately... But something did go _very_ wrong! :);;;","01/Apr/13 08:45;raulvk;[~alanfoster] - I've reproduced this situation in the past when using the VM Transport and SMX 4.5.0 or above. In my case, the culprit was the activemq-broker.xml hotdeploy feature, which was redeploying the broker soon after the Camel routes started, therefore leaving them in an inconsistent state. 

Try removing this file: SMX_HOME/etc/org.apache.felix.fileinstall-activemq.cfg, deleting the data/ directory and starting afresh.

Also, installing bundles by copying them to the deploy/ directory could be another cause, as Karaf refreshes all linked bundles during the process (possibly the broker too). How do you perform the deployment? 

;;;","01/Apr/13 11:43;alanfoster;[~raulvk] Ah, those conditions do seem to line up with what I am using currently; 
I was installing this code using {{osgi:install -s mvn:org/camel/1.0-SNAPSHOT}} and not the hot deploy directory

I'll close this issue though as you have already fixed this bug in CAMEL-5865, thanks!;;;",,,,,,,,,,,,,,,,
Using route policy to start and stop routes can cause RouteContextProcessor to be added multiple times,CAMEL-6220,12639386,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Mar/13 16:45,27/Mar/13 18:00,14/Jul/23 05:49,27/Mar/13 18:00,2.10.4,2.9.6,,,,,,,2.10.5,2.11.0,2.9.7,,camel-core,,,,,,0,,,,,,,"For example using a quartz route policy to keep starting and stopping a route may lead to unnecessary processors being wrapped.

A log snippet where we have wrapped 4 times
{code}
2013-03-27 17:43:10,004 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]
2013-03-27 17:43:10,006 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]
2013-03-27 17:43:10,007 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]
2013-03-27 17:43:10,008 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,319856,,,2013-03-27 16:45:34.0,,,,,,,,,,,"0|i1j6tb:",320197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransferExchage InOut ActiveMQ Exception,CAMEL-6218,12639290,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,alanfoster,alanfoster,27/Mar/13 12:07,03/Apr/13 21:34,14/Jul/23 05:49,03/Apr/13 00:38,2.10.4,,,,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,"The scnearios are :

    - when using the transferExchange option only on the producer, I don't get the body back, but not the header.
    - When I use the transferExchange option on both producer and consumer, I get the headers back, but not the body. And instead I get the following exception

{code:java}
[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager     WARN  Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107)
	at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128)
	at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
{code}
",,alanfoster,davsclaus,muellerc,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Mar/13 12:08;alanfoster;camel-6214-transferExchange.java;https://issues.apache.org/jira/secure/attachment/12575692/camel-6214-transferExchange.java","31/Mar/13 17:50;alanfoster;camel-6218-test-project.rar;https://issues.apache.org/jira/secure/attachment/12576293/camel-6218-test-project.rar","31/Mar/13 17:27;muellerc;org.apache.cmueller.camel.zip;https://issues.apache.org/jira/secure/attachment/12576292/org.apache.cmueller.camel.zip",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,319760,,,Wed Apr 03 21:34:38 UTC 2013,,,,,,,,,,,"0|i1j67z:",320101,,,,,,,,,,,,,,,,,,,,"27/Mar/13 12:08;alanfoster;Example of the failing test attached;;;","27/Mar/13 12:24;davsclaus;What Camel version do you use?;;;","27/Mar/13 12:46;muellerc;Can you try not to use inner classes!?
And can you assign serialVersionUID to your classes!?;;;","27/Mar/13 14:21;alanfoster;[~davsclaus] Sorry, I forgot to post that information here

I am running this on windows 2008 r2 with the following dependencies

- Camel 2.10
- activemq-camel 5.7

[~muellerc] Apologies, I have just tried this now. After adding them to separate classes and giving them both a serialVersionUID and I still get an exception;;;","27/Mar/13 14:31;alanfoster;I have also just tried this with the newer versions, and I still get this exception :(

- Camel 2.11-SNAPSHOT
- activemq-camel 5.8;;;","27/Mar/13 14:36;alanfoster;Out of interest I have also tried running it with activemq-camel 5.9-SNAPSHOT, but that caused all 3 tests to fail with the following stack trace for each

{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: foo.Request@6c43da1b]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1347)
	at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:272)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:137)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:390)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at foo.ActiveMQTest.testActiveMQInOutBodyResponse(ActiveMQTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:46)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:292)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.NoSuchMethodError: org.apache.camel.util.ObjectHelper.notNull(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.doStart(ReplyManagerSupport.java:212)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:64)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:54)
	at org.apache.camel.component.jms.JmsProducer.createReplyManager(JmsProducer.java:503)
	at org.apache.camel.component.jms.JmsProducer.initReplyManager(JmsProducer.java:94)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:164)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:129)
	... 77 more
{code}


;;;","29/Mar/13 15:00;alanfoster;I noticed that Camel 2.11 offers camel-sjms, is this the preferred component to use over activemq-camel?

Could someone please confirm if this jira is indeed a bug please, or am I simply misunderstanding the documentation for the transferExchange option?
Thanks!;;;","30/Mar/13 09:21;muellerc;No, for your fist question. It's the simple/springless JMS component. It will may become the preferred JMS component in the future, but not in 2.11.

I will have a look into this JIRA. If you could attach a complete project or a patch to an existin project in the future, it will take less time to verify the issue you have.;;;","30/Mar/13 09:36;muellerc;Ok, it works for me. I can attach my simple project later...;;;","31/Mar/13 10:40;davsclaus;Well the NPE should be fixed in camel-core, that is a bug.

Either we should handle that null, or thrown some other kind of exception saying something is wrong.;;;","31/Mar/13 10:42;davsclaus;Alan, what exact Camel version was that stacktrace from? eg was it 2.10.0, 2.10.1, etc. We need that so we know exactly which code line the NPE is triggered from.;;;","31/Mar/13 10:48;davsclaus;I assume its 2.10.0, then we can see that the NPE is because payload is null
http://svn.apache.org/viewvc/camel/tags/camel-2.10.0/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java?view=markup;;;","31/Mar/13 17:27;muellerc;I created a test which shows it fails with Camel 2.11-SNAPSHOT. It also fails with Camel 2.10.4. The exchange is transfered to the second route, but the response is not transfered back to the first route.;;;","31/Mar/13 17:28;muellerc;We should fix this before 2.11.0 in my opinion.;;;","31/Mar/13 17:50;alanfoster;I've just added an example project which has the previously included test failing now. I haven't had any luck tracking down the actual issue yet sadly :(;;;","31/Mar/13 17:57;alanfoster;Ah, thank you for including an example project [~muellerc], I see you beat me to it! :)

I also have seen some other bugs related in this area; The most important one seems to be a race condition with using InOut + ActiveMQ Component. I'll try making a sample project to show this bug ASAP.;;;","31/Mar/13 18:50;raulvk;[~alanfoster], I fixed a few bugs and race conditions in camel-jms recently. Take a look if any of [these issues|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20component%20%3D%20camel-jms%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20assignee%20in%20(currentUser())] could match your findings.;;;","31/Mar/13 20:52;alanfoster;[~raulvk] Nice work on fixing a lot of those bugs! 

The test i'm writing is having a lot of issues, I am getting a lot of blueprint apache aries ComponentDefinitionExceptions when it attempts to start the org.apache.cxf.cxf-rt-transports-http bundle in JUnit for reason...

I have been able to deploy the route to Karaf just fine however! The exception thrown when inside Karaf is {{Caused By javax.jms.InvalidDestinationException Cannot publish to a deleted Destination: temp-queue://ID:my-computer-1234-etc-etc}} - I'll keep trying to make an actual JUnit test for this though;;;","02/Apr/13 16:42;muellerc;Regarding to my attached project. The strange thing is, if I set transferExchange=true to both ActiveMQ endpoints (producer and consumer), the first route ""ignore"" the response of the second one. If I set transferExchange=false on the second route, the correct body is received but not the header (because it's and serialized object).;;;","02/Apr/13 17:03;muellerc;Thanks Raul for looking into it!;;;","03/Apr/13 00:38;raulvk;Resolved in r1463799.

The JmsBinding is designed to be ""pull-based"", but the Exchange <=> OUT Message relationship was being set too late: after invoking the JmsBinding. Therefore, the latter wasn't able to populate body, headers and properties from the DefaultExchangeHolder in time.

As a side-effect, we now also set the OUT message when the {{transferException}} option is enabled (aside from also setting the Exception, of course). Before we only used to set the exception, but it's a chicken-or-egg situation to be honest.

This is harmless – and even better than before if you ask me, because now there's more context information in the Exchange. All JMS tests pass locally.;;;","03/Apr/13 21:34;muellerc;Thanks for resolving it!;;;",,
"loadResourceAsStream in ObjectHelper could not load resource with leading ""/""",CAMEL-6204,12638745,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,nannou9,nannou9,24/Mar/13 20:12,25/Mar/13 16:15,14/Jul/23 05:49,25/Mar/13 16:15,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-core,,,,,,0,"camel-core,",load,ObjectHelper,resource,util,,"As i could not found any test for ObjectHelper.loadResourceAsStream and i have feced some unexpected behaviur I have created a simple unit test.

The expected result is to get all resources loaded.
Unfortunately ObjectHelper.loadResourceAsStream does no allow to load resource from relative path and for path with leading ""/"".
I my opinion it is a bug.

{code}
    public void testLoadResourceAsStream() {
        InputStream res1 = ObjectHelper.loadResourceAsStream(""org/apache/camel/util/ObjectHelperResourceTestFile.properties"");
        InputStream res2 = ObjectHelper.loadResourceAsStream(""/org/apache/camel/util/ObjectHelperResourceTestFile.properties"");

        assertNotNull(""Cannot load resource without leading \""/\"""", res1);
        assertNotNull(""Cannot load resource with leading \""/\"""", res2);
    }
{code}

",,davsclaus,nannou9,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Mar/13 22:07;nannou9;CAMEL6204.diff;https://issues.apache.org/jira/secure/attachment/12575250/CAMEL6204.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,319220,,,Mon Mar 25 16:15:36 UTC 2013,,,,,,,Patch Available,,,,"0|i1j2vz:",319561,,,,,,,,,,,,,,,,,,,,"24/Mar/13 21:19;nannou9;Test result

Tests run: 4470, Failures: 0, Errors: 0, Skipped: 1

The above tests includes the new test for loadResourceAsStream.;;;","24/Mar/13 21:32;nannou9;The loadResurceAsURL also need a patch so will reupload the patch in few moments.;;;","24/Mar/13 22:08;nannou9;Done.

Greetings,
Piotr;;;","25/Mar/13 02:44;njiang;Applied the patch with thanks to Piotr after fixing the missing file issue of ObjectHelperResourceTestFile.properties.;;;","25/Mar/13 16:15;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,
Missing log parameter placeholder in routepolicy.quartz.ScheduledRoutePolicy,CAMEL-6202,12638597,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,muellerc,cwolf,cwolf,22/Mar/13 21:38,22/Mar/13 22:06,14/Jul/23 05:49,22/Mar/13 22:06,2.10.4,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-quartz,,,,,,0,logging,,,,,,"In the method scheduleRoute(...) there is logging code that looks like:

{code}
  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: "", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }
{code}

...but it's missing parameter placeholder for the routeId.  It should be:

{code}
  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: {}"", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }
{code}
",,cwolf,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,319073,,,Fri Mar 22 22:06:25 UTC 2013,,,,,,,,,,,"0|i1j1zb:",319414,,,,,,,,,,,,,,,,,,,,"22/Mar/13 22:06;muellerc;Thanks for reporting Chris! It's now fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - registry lookup by name should return null if not found,CAMEL-6200,12638515,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Mar/13 14:34,22/Mar/13 14:37,14/Jul/23 05:49,22/Mar/13 14:37,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-blueprint,,,,,,0,,,,,,,"The contract should be to return null if not found.

lookupByName should be similar to lookupByNameAndType which has a try .. catch.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318991,,,2013-03-22 14:34:47.0,,,,,,,,,,,"0|i1j1h3:",319332,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - When removing a route the jms consumer should shutdown any private thread pool the listener container may have been using,CAMEL-6199,12638487,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Mar/13 10:48,04/Aug/21 14:58,14/Jul/23 05:49,22/Mar/13 12:23,2.10.0,,,,,,,,2.10.5,2.11.0,,,camel-jms,,,,,,0,,,,,,,"For example when you add / remove routes dynamically to a Camel app that starts from a JMS endpoint. Then the jms consumer may use a private thread pool for the listener container. That thread pool is enlisted in JMX.

We should ensure the thread pool is shutdown and removed from JMX when the route is removed.",,davsclaus,nizar.ben.mansour@gmail.com,,,,,,,,,,,,,,CAMEL-16848,CAMEL-16848,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318963,,,2013-03-22 10:48:05.0,,,,,,,,,,,"0|i1j1av:",319304,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when using CometD producer,CAMEL-6197,12638264,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,calbazasebastian,calbazasebastian,21/Mar/13 15:49,02/Jun/13 19:33,14/Jul/23 05:49,02/Jun/13 15:52,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-cometd,,,,,,0,,,,,,,"We have an application that creates a lot of channels, resulting in a lot of producers with a Cometd local session attached. These local sessions just add up till we get a out of memory. 


",,bvahdat,calbazasebastian,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318740,,,Sun Jun 02 19:33:43 UTC 2013,,,,,,,,,,,"0|i1izxb:",319081,,,,,,,,,,,,,,,,,,,,"21/Mar/13 22:23;muellerc;Do you consider to work on a patch? And also on a unit test which show the issue?

http://camel.apache.org/contributing.html;;;","22/Mar/13 21:29;calbazasebastian;Sure, will do;;;","22/Mar/13 21:57;muellerc;Cool. Looking forward to your patch...;;;","26/May/13 12:43;davsclaus;Any update on a patch?;;;","26/May/13 22:18;calbazasebastian;Check https://github.com/calbazasebastian/camel/commits/sebi/6197_cometd_oom 
The simplest solution is to disconnect the session that is created by the producer... I added an isLocalSession check to close just the local ones as these are lightweight objects and are not sweeped.;;;","02/Jun/13 15:52;davsclaus;Thanks for reporting and providing a patch with a solution.;;;","02/Jun/13 19:33;bvahdat;The ticket is marked as fixed but I don't see any commit for this on any branch, e.g. on master this's the current history I see:

{code}
commit ddf7ba9b9140eaaab3c784732bfd6eeb1f0114d2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 17:22:49 2013 +0200

    CAMEL-6157: Added support for named parameters to camel-jdbc, like we have in camel-sql. Thanks to Devendra Khanolkar for contribution.

commit bd34771fa19702b9c8f7e86ac56b4a92d2c35169
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 11:42:08 2013 +0200

    CAMEL-6413: Fixed race condition in file consumer, as read lock release should be executed last.

commit 211f90657478df858e02f0bbf8d912d2199b0484
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 11:22:13 2013 +0200

    CAMEL-6412: Trying to fix the broken build.

commit 6ca055d399b7528175f0192f5d948350e1ee7258
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 00:11:18 2013 +0200

    CAMEL-6412: Fixed the Maven build warning about camel-validator-test-resources.jar

commit bdf64e05c8f5b045bb0cbee07a181a06bd516355
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:38:40 2013 +0200

    Polished.

commit 1da8850907623866acaa648f6378596e79f0db69
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:30:52 2013 +0200

    Polished.

commit d5b16f55799a5cdfc2b69bcab62ecbd0962e0f53
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sat Jun 1 07:28:10 2013 +0200

    Upgrade to Groovy 2.1.4

commit 343fd1cf5b08953072f4f3b5bb344dbfad87343c
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 21:56:14 2013 +0200

    Upgrade to Bouncy Castle 1.48 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore). Also cleaned up all the @deprecated Bouncy

commit 9016ac6a22871097ce55d47a4af166f7c73a1f0f
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:53:51 2013 +0200

    Resolved the deprecated API usage after upgrade to Ehcache 2.7.0.

commit 8c57bd4d204e9ecb2bcb54e5733e5b322ac9f710
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:37:15 2013 +0200

    Upgrade to Ehcache 2.7.0 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore).
{code};;;",,,,,,,,,,,,,,,,,
setting DefaultShutdownStrategy.setTimeout(0L) may cause infinite timeout,CAMEL-6196,12638254,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,pjwalstrom,pjwalstrom,21/Mar/13 15:15,26/May/13 12:43,14/Jul/23 05:49,26/May/13 12:43,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,shutdown,,,,,,"defaultShutdownStrategy.setTimeout(0L);

may give the following when shutting down and inflight exchanges do not complete

[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in 0 seconds.
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -1 seconds.
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -2 seconds.
[...]
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -323 seconds.",,davsclaus,muellerc,pjwalstrom,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,318730,,,Fri Mar 22 07:56:35 UTC 2013,,,,,,,,,,,"0|i1izv3:",319071,,,,,,,,,,,,,,,,,,,,"21/Mar/13 15:43;davsclaus;Per are you working on a patch? Seems like we should either deny setting the timeout as 0 or negative (eg must be positive).
Or all to have unlimited timeout (I guess this can be a bit dangerous, as if a message is stuck, you would need to kill the processor or have trouble getting the Camel app stopped/killed);;;","22/Mar/13 06:26;pjwalstrom;I would love to submit a patch, how do I do that?

I suggest the following solution
1) if timeout == 0, the shutdown will be forced immediately
2) if timeout < 0, throw new IllegalArgumentException

you could argue in 2) that negative values should be treated as 0 (which probably would be the easiest solution), but I think this would be confusing. The user sets a negative number for some strange reason. He doesn't expect it silently to be substituted with a 0
;;;","22/Mar/13 07:56;muellerc;Per, we love contributions. You can find more information how to contribute at http://camel.apache.org/contributing.html

Thanks in advance,
Christian;;;",,,,,,,,,,,,,,,,,,,,,
Simple expression and predicate behaviors are different when accessing to map with a space in the key,CAMEL-6191,12638226,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xfournet,xfournet,21/Mar/13 12:59,17/May/13 06:10,14/Jul/23 05:49,17/May/13 06:10,2.10.3,2.10.4,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,"{noformat}
The simple langage permit to access to a map element by specifying the key between [], ie ${body[key]}
When the key contains a space the behavior is not the same for a simple expression or a simple predicate:
* expression ${body[my key]} will access to the ""my key"" element -> correct
* expression ${body['my key']} will access to the ""my key"" element -> correct
* predicate ${body[my key]} == 'value' will access to the ""mykey"" element -> incorrect
* predicate ${body['my key']} == 'value' will access to the ""my key"" element -> correct
{noformat}

See attached testcase, the current ouput is
{noformat}
618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is false
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is true
657 [main] INFO route1 - test4 is false
{noformat}

but it should be
{noformat}
618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is true
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is false
657 [main] INFO route1 - test4 is false
{noformat}
",,davsclaus,muellerc,xfournet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/May/13 11:42;antoine.dessaigne;CAMEL-6191-Simple-expression-and-predicate-behaviors.patch;https://issues.apache.org/jira/secure/attachment/12583466/CAMEL-6191-Simple-expression-and-predicate-behaviors.patch","21/Mar/13 12:59;xfournet;CamelTest.java;https://issues.apache.org/jira/secure/attachment/12574792/CamelTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318702,,,Fri May 17 06:10:26 UTC 2013,,,,,,,Patch Available,,,,"0|i1izov:",319043,,,,,,,,,,,,,,,,,,,,"21/Mar/13 15:56;davsclaus;Well it would be best practice to use quotes in the key name, eg 'my key', then that works fine;;;","21/Mar/13 16:10;davsclaus;I added a note on the simple page.

When your keys have spaces, then you must use enclose the key in single quotes.;;;","21/Mar/13 18:21;xfournet;Humm... not convainced with the resolution ""Not a problem"".
I'm not very fan of the best practice you recommend since it is just redundant with the [].
Anyway even with that, if it is not enforced it could be still a problem for an user that is not aware of it. We spend a lot of time to track this problem so it could be avoided for others user if this issue is fixed either by:
* parse the predicate in the same way than the expression. While debugging I see that the problem is located in org.apache.camel.language.simple.SimplePredicateParser#removeIgnorableWhiteSpaceTokens that transforms the tokens field from $\{body[Header Key]\} == 'VALUE1' to $\{body[HeaderKey]\}=='VALUE1' 
* enforce the ""must"" in the documentation and reject the expression that use an unquoted key with space in order to avoid strange behaviors
;;;","22/Mar/13 13:15;muellerc;[~davsclaus]: Is there a constraint why we cannot offer the same behavior for predicates and expressions? I agree with Xavier that ['key with space'] is a bit cumbersome compared with [key with space] (I know, it's only two chars, but could save some time for people who are lazy in reading the java doc ;-) ).;;;","02/Apr/13 12:42;davsclaus;Sorry the notification mail got lost for me somehow.

Its very common to use quotes for strings when it contains a space when passing that in as a single argument, such as on the command shell, java parameter, other programming languages.

So IMHO requiring to use a quoted string when it has a space is valid for me.

Though I agree we should look into improving the parser to see if we can parse the expression or predicate as much alike as possible.;;;","16/May/13 11:43;antoine.dessaigne;Hi, I've just added a patch that fixes this issue.;;;","17/May/13 06:10;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,
Camel cache: CamelCacheCheck and expiry on cached elements,CAMEL-6189,12637990,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hefiso,hefiso,20/Mar/13 14:23,20/Mar/13 15:09,14/Jul/23 05:49,20/Mar/13 15:09,2.10.0,2.11.0,,,,,,,2.10.5,2.11.0,,,camel-cache,,,,,,0,cache,,,,,,"The operation CamelCacheCheck does not check to see if the cache element is expired before setting the header CamelCacheElementWasFound. This is due to the way isKeyInCache() from EHCache works. 

I believe the bug/quirk has existed since the very beginning of the camel-cache component. The patch is made against 2.11.0-SNAPSHOT.

The patch uses getQuiet() instead of isKeyInCache(). getQuiet() checks for element expiry before returning the element from the cache. getQuiet does not alter the cache element in any way (usage statistics etc) but removes the element from the cache if it is expired.

See the thread on Camel User Forum: http://camel.465427.n5.nabble.com/Camel-cache-CamelCacheCheck-and-expiry-on-cached-elements-td5729404.html

",Windows,davsclaus,hefiso,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Mar/13 14:25;hefiso;cacheCheckHonorsExpiry.patch;https://issues.apache.org/jira/secure/attachment/12574549/cacheCheckHonorsExpiry.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,318468,,,Wed Mar 20 15:09:27 UTC 2013,,,,,,,Patch Available,,,,"0|i1iy8v:",318809,,,,,,,,,,,,,,,,,,,,"20/Mar/13 15:09;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
"CXF cosumer should set Exchange's charset name, if content type provides one",CAMEL-6188,12637977,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fhoeben,fhoeben,20/Mar/13 13:20,28/Mar/13 02:25,14/Jul/23 05:49,28/Mar/13 02:25,2.10.4,,,,,,,,2.11.0,,,,camel-cxf,,,,,,0,,,,,,,"The CXF consumer copies the content-type http header to the camel exchange. This header may indicate the character set used in the request (for instance ""text/xml;charset=UTF-8""), and if so this should be made available in the normal place for Camel (i.e. a property in the exchange called 'CamelCharsetName').

This may (of course) be done in each route by a separate processor, but it simplifies life if this is done by default. (org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest() seems the logical place)


Sample processor that performs this job.
{code}
import java.nio.charset.Charset;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.util.ExchangeHelper;
import org.apache.http.entity.ContentType;

/**
 * Processor to ensure the exchange's charset name property is in sync with
 * its content type.
 */
public class CharsetProcessor implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        String contentTypeHeader = ExchangeHelper.getContentType(exchange);
        if (contentTypeHeader != null) {
            ContentType contentType = ContentType.parse(contentTypeHeader);
            if (contentType != null) {
                Charset charset = contentType.getCharset();
                exchange.setProperty(Exchange.CHARSET_NAME, charset.name());
            }
        }
    }
}
{code}",,fhoeben,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,318455,,,Thu Mar 28 02:25:58 UTC 2013,,,,,,,,,,,"0|i1iy5z:",318796,,,,,,,,,,,,,,,,,,,,"28/Mar/13 02:25;njiang;Applied the patch into trunk.;;;",,,,,,,,,,,,,,,,,,,,,,,
http4 component should default to charset based on content type,CAMEL-6187,12637961,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fhoeben,fhoeben,20/Mar/13 12:01,26/Aug/13 17:40,14/Jul/23 05:49,26/Aug/13 17:40,2.10.4,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,"HttpProducer determines the charset of an outgoing StringEntity based on an Exchange property (Exchange.CHARSET_NAME), using null if that property is not set. It also sets the content-type based on the content-type of the camel message (this may also contain a character encoding). 
If these two don't match the receiver of the http request will probably not be able to parse the message. 

It would be better if the charset of the StringEntity would by default match the charset specified in the content-type. Matching these two is done when receiving response messages (in HttpProducer.extractResponseBody())...

Suggested fix (in HttpProducer.createRequestEntity()), you could of course also do something like org.apache.camel.component.http4.helper.HttpHelper.setCharsetFromContentType() but my approach uses org.apache.http.entity.ContentType and java.nio.charset.Charset instead of trying to determine the correct charset itself):

{code}
// be a bit careful with String as any type can most likely be converted to String
// so we only do an instanceof check and accept String if the body is really a String
// do not fallback to use the default charset as it can influence the request
// (for example application/x-www-form-urlencoded forms being sent)
String charset = IOHelper.getCharsetName(exchange, false);
if (charset == null && contentType != null)
{
    ContentType ct = ContentType.parse(contentType);
    if (ct != null) {
        Charset cs = ct.getCharset();
        if (cs != null)
        {
            charset = cs.name();
        }
    }
}
StringEntity entity = new StringEntity((String) data, charset);
entity.setContentType(contentType);
answer = entity;
{code}",,davsclaus,fhoeben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318439,,,Mon Aug 26 17:40:23 UTC 2013,,,,,,,,,,,"0|i1iy2f:",318780,,,,,,,,,,,,,,,,,,,,"26/Aug/13 17:40;davsclaus;Thanks for reporting and providing a solution.;;;",,,,,,,,,,,,,,,,,,,,,,,
http4 component should always filter 'host' header,CAMEL-6185,12637957,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,fhoeben,fhoeben,20/Mar/13 11:44,04/Nov/13 20:57,14/Jul/23 05:49,04/Nov/13 20:57,2.10.4,,,,,,,,2.12.2,2.13.0,,,camel-ahc,camel-http,camel-http4,camel-jetty,camel-netty-http,,0,,,,,,,"Exchanges originating from a CXF consumer get an incorrect 'host' http-header when directed to a http4 producer. The problem is that the cxf consumer copies the incoming 'host' header to the message, and the http4 producer copies this to the outgoing message. The http component does not do that.

When sending a http request the HttpProducer copies headers from the incomming message to the HTTP request. The 'host' header should not be copied since it (according to the http spec) should always contain the name of the server the request is sent to.
This has already been addressed for bridge endpoints (CAMEL-5757), but is always an issue.

The easiest fix seems to be to add the 'host' header to the list of out going filters in org.apache.camel.component.http4.HttpHeaderFilterStrategy.initialize() i.e.:
{code}
getOutFilter().add(""host"");
{code}

Once this is done the special handling (i.e. removal of) of 'host' header in case of bridgeEndpoint inside HttpProducer can be removed (since the strategy will remove it):
{code}
            // Need to remove the Host key as it should be not used 
            exchange.getIn().getHeaders().remove(""host"");
{code}",,ceposta,davsclaus,fhoeben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Oct/13 03:16;ceposta;CAMEL-6185-3.patch;https://issues.apache.org/jira/secure/attachment/12610978/CAMEL-6185-3.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,318435,,,Mon Nov 04 20:57:29 UTC 2013,,,,,,,,,,,"0|i1iy1j:",318776,,,,,,,,,,,,,,,,,,,,"25/Sep/13 18:34;ceposta;I'll take a look and what is the best patch, and tests...;;;","21/Oct/13 13:43;davsclaus;Some details about host header
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23

Need to make the same fix in
- camel-http
- camel-http4
- camel-ahc
- camel-jetty
- camel-netty-http

As we have several http clients.
;;;","29/Oct/13 19:02;ceposta;Thanks Claus. You're right -- all of the previously listed components also have a header filter strategy that doesn't take into account HOST. I have a patch almost complete.

The camel-jetty component, however, has a dependency on the camel-http component. So it does not directly need any patching.

Should have this fixed shortly.

;;;","30/Oct/13 03:16;ceposta;Claus, 
can you review my patch before I commit?

Thanks!;;;","31/Oct/13 14:24;davsclaus;Patch looks good.;;;","04/Nov/13 20:57;ceposta;This is now fixed on master.;;;",,,,,,,,,,,,,,,,,,
FTP Upload fails due to wrong path separator used in FtpOperations,CAMEL-6181,12637879,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,schlaufuchs,schlaufuchs,20/Mar/13 02:10,21/Mar/13 16:16,14/Jul/23 05:49,21/Mar/13 16:16,2.10.3,,,,,,,,2.10.5,,,,camel-ftp,,,,,,0,,,,,,,"I try to send files via FTP to a remote server. During the upload sequence it checks if the remote directory exists by changing the current work directory to the target, then tries to go back to the current work directory (method FtpOperations#buildDirectory). the call at line 284 fails ( {{changeCurrentDirectory(originalDirectory)}} because in that method at line 654 {{path = FileUtil.compactPath(path);)) is called, which replaces the all forward slashes with File.SEPARATOR - by doing this it also ignores the separator setting in the endpoint uri. The returned directory is not valid on the remote server which then throws a 550 at me.

To fix it line 654 must use the correlated method accepting a separator char produced from the endpoint settings. Or the path needs to be separator-fixed later in the call stack.",Windows,davsclaus,schlaufuchs,,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,318359,,,Thu Mar 21 16:16:06 UTC 2013,,,,,,,,,,,"0|i1ixkn:",318700,,,,,,,,,,,,,,,,,,,,"21/Mar/13 16:16;davsclaus;Can you try with 2.10.5-SNAPSHOT as we have fixed the camel-ftp.;;;",,,,,,,,,,,,,,,,,,,,,,,
Simple expression in spring XML not work if it come in multiple xml lines,CAMEL-6179,12637766,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,darwish,darwish,19/Mar/13 15:06,25/Mar/13 16:16,14/Jul/23 05:49,25/Mar/13 16:16,2.10.1,,,,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,http://camel.465427.n5.nabble.com/Simple-expression-in-spring-XML-not-work-if-it-come-in-multiple-xml-line-td5729408.html,,darwish,davsclaus,msvab,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Mar/13 22:43;msvab;CAMEL-6179.patch;https://issues.apache.org/jira/secure/attachment/12575200/CAMEL-6179.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318246,,,Mon Mar 25 16:16:12 UTC 2013,,,,,,,,,,,"0|i1iwvj:",318587,,,,,,,,,,,,,,,,,,,,"23/Mar/13 22:43;msvab;Attached a patch for this issue.;;;","25/Mar/13 16:16;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Issue when bridging with jetty http producer and uri query parameter has encoded value,CAMEL-6175,12637578,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Mar/13 17:22,19/Mar/13 10:51,14/Jul/23 05:49,19/Mar/13 10:51,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-jetty,,,,,,0,,,,,,,Related to CAMEL-6173 but the jetty http producer in camel-jetty has a problem as well.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318058,,,Mon Mar 18 17:48:34 UTC 2013,,,,,,,,,,,"0|i1ivpr:",318399,,,,,,,,,,,,,,,,,,,,"18/Mar/13 17:48;davsclaus;Fixed on 2.10 branch. The 2.11/trunk needs some different work as the component has changed a bit in 2.11.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http - When bridging endpoints then there may be double parameter values if client sends uri parameters,CAMEL-6173,12637552,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Mar/13 15:31,02/May/13 02:30,14/Jul/23 05:49,18/Mar/13 15:49,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-http,camel-jetty,,,,,0,,,,,,,"If you have a jetty/http bridge endpoint, and the caller sends in a parameter with a value that has url encodings, then you may have double values when calling the bridge.

eg calling
{code}
http://localhost:23001/jettyTestRouteA?param1=%2B447777111222
{code}

And having a jetty -> http bridge, you can end up with double values.
{code}
Caused by: java.lang.AssertionError: expected:< 447777111222> but was:<[+447777111222, +447777111222]>
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5913,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,318043,,,2013-03-18 15:31:57.0,,,,,,,,,,,"0|i1ivmf:",318384,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregate EIP - Completion from batch consumer should trigger first,CAMEL-6172,12637425,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Mar/13 09:19,17/Mar/13 10:20,14/Jul/23 05:49,17/Mar/13 10:20,2.10.0,,,,,,,,2.10.5,2.11.0,,,camel-core,eip,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-Aggregator2-BatchCompletion-disturbed-by-other-completions-and-fails-to-happen-when-it-probabl-tp5728850.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,317917,,,2013-03-17 09:19:11.0,,,,,,,,,,,"0|i1iuuf:",318258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - Should detect existing User-Agent header to avoid adding duplicate,CAMEL-6171,12637424,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,17/Mar/13 09:12,28/Mar/13 02:31,14/Jul/23 05:49,28/Mar/13 02:31,,,,,,,,,2.11.0,,,,camel-cxf,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/CXF-proxy-route-creates-multiple-two-user-agent-HTTP-headers-tp5729137.html",,ay,davsclaus,dkulp,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,317916,,,Thu Mar 28 02:30:48 UTC 2013,,,,,,,,,,,"0|i1iuu7:",318257,,,,,,,,,,,,,,,,,,,,"19/Mar/13 03:53;njiang;That is caused by the CXF is using this hard code to check the User-Agent
{code}
        if (!connection.getRequestProperties().containsKey(""User-Agent"")) {
            connection.addRequestProperty(""User-Agent"", Version.getCompleteVersionString());
        }
{code}

I will update the camel-cxf code for it.
;;;","19/Mar/13 19:26;ay;Hi Willem,
you mean cxf's rt-transport-http, no?

or you want to add an workaround in camel-cxf?

i think we should fix this in cxf, by replacing the above if-line with this one:
if (connection.getRequestProperty(""User-Agent"") == null) {

regards, aki;;;","19/Mar/13 19:35;dkulp;Actually, I think Camel should NOT be copying the User-Agent header over unless it's in RAW/MESSAGE mode.   The server may be using the User-Agent header to change how the response is sent or similar if it knows that a particular client type may have issues.  Thus, if CXF is going to be processing the response (POJO, CXF_MESSAGE, PAYLOAD), then the User-Agent should be set to CXF.   If in RAW/MESSAGE, then likely the original agent should be retained.;;;","20/Mar/13 05:01;njiang;Hi Aki,

The code that I showed is from Headers.java in cxf-rt-transports-http, I will follow it and did some update on cxf code repository. 

;;;","20/Mar/13 05:37;njiang;Hi Dan,

I agree with you and will commit a quick fix for it.;;;","20/Mar/13 09:37;ay;Hi Dan,
I am not sure about that special automatic handling of the User-Agent header in camel.

When you are passing a CXF message over a camel route, you will typically need an explicit removeHeaders step in the root configuration to filter out those transport-specific headers that you don't want to forward to the second transparent leg (e.g., the accept gzip stuff, chunking option, maybe cookies, etc). So, we can leave it to the scenario designer to decide if the user-agent is removed or forwarded in this way. no?

regards, aki

;;;","27/Mar/13 12:31;davsclaus;Whats the status. Is this resolved?;;;","28/Mar/13 02:30;njiang;I think we should let the user have the control of the User-Agent setting, I don't think we need to filter the User-Agent in POJO, CXF_MESSAGE, PAYLOAD by default, if the user doesn't want to use the default one or copy from the source, he can override it by setting the header in his route.
;;;",,,,,,,,,,,,,,,,
SQL component will not look for parameters in header when no body in message,CAMEL-6168,12637369,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jonasf,jonasf,16/Mar/13 09:01,21/Mar/13 09:17,14/Jul/23 05:49,21/Mar/13 09:17,2.11.0,,,,,,,,2.11.0,,,,camel-sql,,,,,,0,,,,,,,Line 60 in SqlProducer checks if the body is null. This will cause any parameters in header fields not to be populated into the prepared statement. Sample scenario is with a camel-jetty enriching a response using camel-sql. ,2.11-SNAPSHOT,davsclaus,jonasf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,317861,,,Thu Mar 21 09:17:05 UTC 2013,,,,,,,,,,,"0|i1iuhz:",318202,,,,,,,,,,,,,,,,,,,,"20/Mar/13 17:23;davsclaus;Can you be more precises what is the problem?

Line 60 is:
{code}
                            populateStatement(ps, i, expected);
{code}

It has nothing to do if body is null etc.;;;","20/Mar/13 17:24;davsclaus;The sql component does not look for parameters in headers, only the body.;;;","20/Mar/13 20:19;jonasf;I find line 60 to be:

{code:xml} 
                if (exchange.getIn().getBody() != null) {
{code}

As seen in the repository here:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java

Also, I believe the documentation clearly states that the headers are searched for parameters and the code does actually do this. 

{quote}
""When using named parameters, Camel will lookup the names from, in the given precedence:
1. from message body if its a java.util.Map
2. from message headers"" 
{quote}
- http://camel.apache.org/sql-component.html

By just removing the if statement the code works. ;;;","21/Mar/13 09:10;davsclaus;Ah I was looking at the camel-sql component for 2.10.

Yeah I am fixing this now on 2.11.;;;","21/Mar/13 09:17;davsclaus;This bug only applies to 2.11;;;",,,,,,,,,,,,,,,,,,,
CamelSpringJUnit4ClassRunner ignores annotation based context configurations.,CAMEL-6160,12636847,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,webdaford,webdaford,13/Mar/13 20:01,15/Mar/13 02:42,14/Jul/23 05:49,15/Mar/13 02:42,2.10.4,,,,,,,,2.11.0,,,,camel-test,,,,,,1,test,,,,,,"In a Camel/Spring JUnit4 test case, if you specify:

@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { FooCamelConfig.class })

then the context configuration (including the definition of CamelContext) defined in FooCamelConfig.java, using Java Annotations, will be ignored.  If you change to use SpringJUnit4ClassRunner, then the configuration will be processed.

The problem is in the two implementations of the method ""loadBeanDefintions()""  in the class CamelSpringTestContextLoader.  They both exclusively use XmlBeanDefinitionReader to load bean definitions into the context, so no beans defined using annotations are ever read/loaded.

If you use the SpringJUnit4ClassRunner, then it includes the use of AnnotationConfigContextLoader which, in turn, uses AnnotatedBeanDefinitionReader to read/load beans defined with annotations.


","Windows 7, Java 1.7.0_17, Spring 3.2.1",davidkarlsen@gmail.com,njiang,webdaford,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,317339,,,Fri Mar 15 02:42:50 UTC 2013,,,,,,,,,,,"0|i1ir9z:",317680,,,,,,,,,,,,,,,,,,,,"14/Mar/13 08:17;njiang;CAMEL-5494 provides an solution for it, because CamelSpringDelegatingTestContextLoader doesn't support the ExcludeRoutes annotation, I didn't switch the default TestContextLoader of CamelSpringJUnit4ClassRunner to CamelSpringDelegatingTestContextLoader. You need to specify the loader with CamelSpringDelegatingTestContextLoader.class if you want to use it.
{code}

@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes =
{ FooCamelConfig.class }
loader = CamelSpringDelegatingTestContextLoader.class
)
{code};;;","14/Mar/13 12:50;webdaford;Ok, thanks.  I see that the solution offered by CAMEL-5494 isn't available until 2.11.0, I'll have to wait for that.  The bug would then appear to be in the documentation.  This page http://camel.apache.org/testing.html only mentions JavaConfigContextLoader, and doesn't mention any of its limitations.  Also, after a search on google, it would appear that the existence of CamelSpringDelegatingTestContextLoader is not documented anywhere other than the CAMEL-5494 bug and the SVN commit message.

Would there be a problem with switching to use CamelSpringDelegatingTestContextLoader in the future?  I found it extremely confusing, not to mention time consuming to figure out, that CamelSpringJUnit4ClassRunner changes the semantics of @ContextConfiguration from what its superclass SpringJUnit4ClassRunner supports.  I expect a continuous parade of developers will trudge down the same path I did.;;;","14/Mar/13 13:49;njiang;JavaConfigContextLoader doesn't support the some camel annotation as the CamelSpringDelegatingTestContextLoader does.
I'm will update the wiki page with new added CamelSpringDelegatingTestContextLoader tomorrow before I close this issue.;;;","15/Mar/13 02:42;njiang;Update the camel test wiki page.;;;",,,,,,,,,,,,,,,,,,,,
Camel stream producer never close the stream of file ,CAMEL-6155,12636532,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Mar/13 07:57,21/Mar/13 01:26,14/Jul/23 05:49,13/Mar/13 07:26,2.10.4,2.9.6,,,,,,,2.10.5,2.11.0,2.9.7,,camel-stream,,,,,,0,,,,,,,"When I was working on CAMEL-6147, I found the file stream is never closed, even it met the close condition. ",,njiang,,,,,,,,,,,,,,,,,,,,,,CAMEL-6152,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,317024,,,Wed Mar 13 07:26:02 UTC 2013,,,,,,,,,,,"0|i1ipc7:",317365,,,,,,,,,,,,,,,,,,,,"13/Mar/13 07:26;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
NPE when using the imap mail component with quartz or the timer and pollEnrich,CAMEL-6154,12636324,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sven 88,sven 88,11/Mar/13 09:34,02/May/13 02:30,14/Jul/23 05:49,21/Mar/13 13:37,2.10.3,2.10.4,,,,,,,2.10.5,2.11.0,,,camel-mail,camel-quartz,,,,,0,imap,pollenrich,quartz,timer,,,"There is a NPE when using the imap mail component with quartz or the timer and pollEnrich as dicussed here:
http://camel.465427.n5.nabble.com/Schedule-file-mail-endpoint-td3356666.html#a3357538

I reproduced it on version 2.10.3 and 2.10.4 with
 <route id=""myTest"">
     <from uri=""timer://foo?fixedRate=true&amp;period=10000""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&amp;level=INFO""/>
  </route>

We need to use it with the quartz component (so we can use a cron expression), but get the same error
 <route id=""myTest"">
     <from uri=""quartz://testTimer?cron=0+*+*+*+*+?""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&amp;level=INFO""/>
  </route>

11/03/2013 10:32:04 [DefaultQuartzScheduler-context_Worker-1] ERROR org.apache.camel.processor.DefaultErrorHandler  - Failed delivery for (MessageId: ID-W7-009430-52415-1362994261595-0-3 on ExchangeId: ID-W7-009430-52415-1362994261595-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
	at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:194)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:71)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:113)[camel-quartz-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:61)[camel-quartz-2.10.4.jar:2.10.4]
	at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[quartz-1.8.5.jar:]
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[quartz-1.8.5.jar:]","Windows, Tomcat 7.0.32, java 7, Spring 3.1.4",davsclaus,sven 88,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6193,,,,,,,,,,,"21/Mar/13 13:19;sven 88;error log.txt;https://issues.apache.org/jira/secure/attachment/12574793/error+log.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,316816,,,Thu Mar 21 13:37:59 UTC 2013,,,,,,,,,,,"0|i1io27:",317158,,,,,,,,,,,,,,,,,,,,"21/Mar/13 10:25;davsclaus;The NPE was burried in the mail binding. Which I have added a fix for.

If you have the time then it would be good to try out 2.10.5 SNAPSHOT to see if that fixes your problem.

Is there something special about the mail you consume? eg if you just do <from uri=""imap:...""> can you consume the mails then also?;;;","21/Mar/13 11:17;sven 88;It don't work, I have added the error log.

As a workarround i use the CronScheduledRoutePolicy with a start and stop time and this works as expected (see the code below)

        from(the mail uri)
        .noAutoStartup()
        .routePolicy(routePolicy)
        .bean(MailAttachmentsHandler.class);

the MailAttachmentsHandler:
 public void process(Exchange exchange) throws Exception {
        CamelContext context = exchange.getContext();
        ProducerTemplate producer = context.createProducerTemplate();

        for (String name : exchange.getIn().getAttachmentNames()) {
            if (name.matches(regex)) {
                DataHandler attachment = exchange.getIn().getAttachment(name);
                byte[] data = context.getTypeConverter().convertTo(byte[].class, attachment.getInputStream());

                Map<String, Object> headers = new HashMap<String, Object>();
                // used to write to file
                headers.put(Exchange.FILE_NAME, name);
                producer.sendBodyAndHeaders(queueEndpointUri, data, headers);
            }
        }
        producer.stop();
    };;;","21/Mar/13 12:59;davsclaus;If you are using log4j, then can you check if you have enabled 
{code}
log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer
{code}

That option has a bug not logging the caused stacktraces, so the actual NPE you now have is not in the error.log.

If so can you try again. Disabling that log4j option. So we can have the caused stacktrace, to track down the NPE in camel-mail?;;;","21/Mar/13 13:19;sven 88;updated the error log;;;","21/Mar/13 13:22;davsclaus;Ah thanks, I can see the problem is that the mail folder gets closed and the mail message is accessed on-demand afterwards.

You can set closeFolder=false to fix that problem.;;;","21/Mar/13 13:31;sven 88;Thanks, now it works.;;;","21/Mar/13 13:37;davsclaus;Okay I logged CAMEL-6193 to fix this better.;;;",,,,,,,,,,,,,,,,,
StreamProducer does not close streams,CAMEL-6152,12636181,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,luzifer42,luzifer42,09/Mar/13 09:36,02/May/13 02:30,14/Jul/23 05:49,21/Mar/13 01:26,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-stream,,,,,,0,,,,,,,"Steps to reproduce:
write a big content(whiche exceeds any write buffer) to the route
.setHeader(""stream"").constant(new File(""test.txt"")).to(""stream:header"");


The source code does not make sense here: org.apache.camel.component.stream.StreamProducer, line 183
{code}boolean systemStream = outputStream != System.out || outputStream != System.err;{code}
should be more like:
{code}boolean systemStream = outputStream == System.out || outputStream == System.err;{code}

By the way:
the line 168 is weird too:
{code}boolean expiredStream = force || headerStream || reachedLimit;  // evaluation order is important!{code}
this would (without this bug) always close header streams after every message.",,luzifer42,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6155,,CAMEL-2937,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,316673,,,Thu Mar 21 01:26:17 UTC 2013,,,,,,,,,,,"0|i1in6f:",317015,,,,,,,,,,,,,,,,,,,,"21/Mar/13 01:26;njiang;This issue was resolved by CAMEL-6155.;;;",,,,,,,,,,,,,,,,,,,,,,,
Bad link in dot file with Transform message (camel:dot goal) ,CAMEL-6141,12635788,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,acorbiere,acorbiere,07/Mar/13 13:45,07/Mar/13 13:56,14/Jul/23 05:49,07/Mar/13 13:56,2.10.0,,,,,,,,2.10.5,2.11.0,,,camel-core,tooling,,,,,0,patch,,,,,,"To generate dot file for Transform message, there is a problem with the url link (http://camel.apache.org/message-translator.html and not http://camel.apache.org/message-transform.htm).",All,acorbiere,davsclaus,,,,,,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,,,,,,,"07/Mar/13 13:47;acorbiere;NodeData.diff;https://issues.apache.org/jira/secure/attachment/12572533/NodeData.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,316280,,,Thu Mar 07 13:56:12 UTC 2013,,,,,,,Patch Available,,,,"0|i1ikrb:",316623,,,,,,,,,,,,,,,,,,,,"07/Mar/13 13:56;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-xmlrpc: dataformat not included in jar,CAMEL-6138,12635772,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sothach,sothach,07/Mar/13 11:08,07/Mar/13 19:05,14/Jul/23 05:49,07/Mar/13 19:05,2.11.0,,,,,,,,2.11.0,,,,extra,,,,,,0,build,xmlrpc,,,,,"Building the camel-xmlrpc component via Maven: {{mvn install}} will create a .jar without the {{dataformat}} package included; this seems to be because the property {{camel.osgi.export.pkg}} only specifies the {{compoenent}} package","java version ""1.7.0_02""
Apache Maven 3.0.4 (r1232337; 2012-01-17 08:44:56+0000)
OS: Windows 7",davsclaus,sothach,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Mar/13 11:10;sothach;pom.patch;https://issues.apache.org/jira/secure/attachment/12572524/pom.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,316264,,,Thu Mar 07 19:05:51 UTC 2013,,,,,,,Patch Available,,,,"0|i1iknr:",316607,,,,,,,,,,,,,,,,,,,,"07/Mar/13 11:10;sothach;Patches the pom.xml build file to fix missing package problem;;;","07/Mar/13 19:05;davsclaus;Thanks for reporting and providing patches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-xmlrpc: In message headers not preserved,CAMEL-6136,12635768,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sothach,sothach,07/Mar/13 10:26,07/Mar/13 13:02,14/Jul/23 05:49,07/Mar/13 13:02,2.11.0,,,,,,,,2.11.0,,,,extra,,,,,,0,,,,,,,"When processing an XMLRPC request in Async mode, the original In message headers are not preserved (copied to the Out message)
This works correctly for sync mode, but the async callback handler does not copy the message headers as the XmlRpcProducer.processor() method does,","java version ""1.7.0_02""
OS: Windows 7",njiang,sothach,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Mar/13 10:28;sothach;XmlRpcAsyncCallback.patch;https://issues.apache.org/jira/secure/attachment/12572519/XmlRpcAsyncCallback.patch","07/Mar/13 10:31;sothach;XmlRpcComponentTest.patch;https://issues.apache.org/jira/secure/attachment/12572520/XmlRpcComponentTest.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,316260,,,Thu Mar 07 13:02:58 UTC 2013,,,,,,,Patch Available,,,,"0|i1ikmv:",316603,,,,,,,,,,,,,,,,,,,,"07/Mar/13 10:28;sothach;Patches XmlRpcAsyncCallBack.java to fix issue CAMEL-6136;;;","07/Mar/13 10:31;sothach;Adds two test cases to XmlRpcComponentTest.java to verify header preservation;;;","07/Mar/13 13:02;njiang;Applied the patch into trunk with thanks to Roy.;;;",,,,,,,,,,,,,,,,,,,,,
CompositeRegistry should catch the exception when it lookup the component across the registry,CAMEL-6135,12635570,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Mar/13 13:46,07/Mar/13 12:59,14/Jul/23 05:49,07/Mar/13 12:59,2.10.4,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"CompositeRegistry#lookup just lookups iterating the registries it has. it should catch the exception to make sure it go through all the registries.

Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Catch-NoSuchComponentException-in-org-apache-camel-impl-CompositeRegistry-lookup-td5728645.html",,njiang,smokemaker,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,316063,,,Thu Mar 07 12:59:06 UTC 2013,,,,,,,,,,,"0|i1ijf3:",316406,,,,,,,,,,,,,,,,,,,,"07/Mar/13 12:59;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jclouds - Does not work in OSGi - Seems META-INF/services loader may not work,CAMEL-6134,12635569,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/13 13:26,15/Feb/15 15:49,14/Jul/23 05:49,15/Feb/15 15:49,2.11.0,,,,,,,,2.15.0,,,,camel-jclouds,karaf,,,,,0,,,,,,,"The BlobStoreBlueprintRouteTest test fails in tests/camel-itest-osgi, when running
{code}
mvn clean test -Dtest=BlobStoreBlueprintRouteTest
{code}

It cannot find the transient provider, which seems to be located in jclouds-blobstore JAR in the META/INF/services directory.

org.jclouds.blobstore.TransientApiMetadata

Migrating to the new builder API I get this error
{code}
java.util.NoSuchElementException: key [transient] not in the list of providers or apis: {}
	at org.jclouds.ContextBuilder.newBuilder(ContextBuilder.java:172)
	at org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.doPreSetup(BlobStoreBlueprintRouteTest.java:52)
{code}

Not sure what it takes to get service loader to work in OSGi / Karaf.",,davsclaus,iocanel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,316062,,,Sun Feb 15 15:49:38 UTC 2015,,,,,,,,,,,"0|i1ijev:",316405,,,,,,,,,,,,,,,,,,,,"06/Mar/13 13:34;iocanel;The service loader doesn't work inside OSGi. 
So I've added some bits to jclouds itself so that it registers its own stuff founds under META-INF/service to the Service Registry. I'll have a look and see why its borked.;;;","04/Mar/14 07:07;davsclaus;[~iocanel] wonder if this is still a problem with jclouds 1.7.1 ?;;;","15/Feb/15 15:49;davsclaus;The test works now;;;",,,,,,,,,,,,,,,,,,,,,
EndpointHelper.setReferenceProperties() does not work with OSGiServiceRegistry,CAMEL-6130,12635432,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,aaronjwhiteside,aaronjwhiteside,05/Mar/13 21:05,12/Mar/13 11:47,14/Jul/23 05:49,12/Mar/13 11:47,2.10.4,2.9.5,,,,,,,2.10.5,2.11.0,,,osgi,,,,,,0,,,,,,,"EndpointHelper.setReferenceProperties() does not work with OSGiServiceRegistry

setReferenceProperties() is hard-coded to lookup services of type Object.class.

It should use reflection to determine the type that the setter method accepts and then use that type to lookup the reference in the service registry.

At the moment this issue is stopping #bean references in Endpoints from being resolved when using an OSGiServiceRegistry, in OSGi you need to know the class of the service you want before hand.",,aaronjwhiteside,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Mar/13 18:38;aaronjwhiteside;CAMEL-6130-2.patch;https://issues.apache.org/jira/secure/attachment/12572362/CAMEL-6130-2.patch","06/Mar/13 18:50;aaronjwhiteside;CAMEL-6130-3.patch;https://issues.apache.org/jira/secure/attachment/12572366/CAMEL-6130-3.patch","06/Mar/13 20:45;aaronjwhiteside;CAMEL-6130-4_.patch;https://issues.apache.org/jira/secure/attachment/12572388/CAMEL-6130-4_.patch","07/Mar/13 17:10;aaronjwhiteside;CAMEL-6130-5.patch;https://issues.apache.org/jira/secure/attachment/12572557/CAMEL-6130-5.patch","05/Mar/13 23:36;aaronjwhiteside;CAMEL-6130.patch;https://issues.apache.org/jira/secure/attachment/12572197/CAMEL-6130.patch",,5.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,315925,,,Thu Mar 07 19:00:19 UTC 2013,,,,,,,Patch Available,,,,"0|i1iikf:",316268,,,,,,,,,,,,,,,,,,,,"05/Mar/13 23:36;aaronjwhiteside;Patch that fixes the issue, it's a little ugly but I didn't want to rewrite EndpointHelper or IntrospectionSupport.

Passes all camel-core unit tests.;;;","06/Mar/13 10:31;davsclaus;I think the fix should be on the OSGi side instead. So if Object.class is provided as type then it should ignore that. Or rely on the fact that any type is an Object.;;;","06/Mar/13 15:53;aaronjwhiteside;I don't think that is possible, you need to know the exact type of a service to retrieve it from a BundleContext.

http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html

Passing in Object.class returns nothing because nothing is explicitly registered against that class.;;;","06/Mar/13 16:08;davsclaus;You can use this method and provide null as the class
http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html#getServiceReferences(java.lang.Class, java.lang.String)

Frankly the end user has not provided any class but only the name of the bean to use. So if the service is register with class FooImpl.class, and we want to lookup this service using the name ""foo"", then we should be able to do

getServiceReferences(null, ""foo"");

If the setter type is a Foo (eg the interface) then Camel (with your patch) would call
getServiceReferences(Foo.class, ""foo"");

But what happens if the service was registered with 
FooImpl.class as the class type.

Would the OSGi service registry be smart enough to know that FooImpl and Foo is the ""same"";;;","06/Mar/13 16:19;aaronjwhiteside;The javadoc for that method says:

{quote}
clazz - The class under whose name the service was registered. Must not be null.
{quote}

I think in this case the _user_ is the Endpoint who is trying to lookup a property/bean and inject it into a method. So the method it finds to inject into determines the type? I think EndpointHelper.setReferenceProperties() is only used in that specific scenario and not by the wider public.

Services in OSGi CAN be registered with any type, interface or not. But the general rule of thumb is you NEVER register a classes concert type, abstract types are OK, only the service interface. This is the essence of loosely coupled services, so I don't see this happening in practice.

If the service was registered with it's concert class and you try and look it up by an interface it implements, you will not be able to find it. Mind you in OSGi you can expose/register a service via many interfaces/abstract classes.

So no the OSGi service registry wouldn't be smart enough to figure it out by itself.;;;","06/Mar/13 16:31;davsclaus;Ah it was getAllServiceReferences

clazz - The class name with which the service was registered or null for all services.;;;","06/Mar/13 16:36;aaronjwhiteside;Ah OK, So I still see a potential problem with that..

Service property's have no unique constraint in OSGi, so there could be a a hundred services registered with the property name=hello, of all different types. So we would have to iterate through the list trying to inject each one until one fits? If you're OK with that approach I could implement it. Though I would be worried at the number of services it would find... potential performance issue.

;;;","06/Mar/13 17:43;aaronjwhiteside;I've had more time to think about this, and I don't think we should go with this approach.

In endpoint helper we would have to call Registry.findByTypeWithName() passing Object.class then index into the result keyed by the bean name to get the object. 

I'm not sure that all Registry implementations would work correctly this way? For me at least it still makes more sense to figure out the specific type and try and lookup a bean with that specific type and name.

What do you think?;;;","06/Mar/13 18:19;davsclaus;Yeah in light of the best practice in OSGi to register a service by its interface, and assuming the endpoint options will be using the interface as its type as well. So there is a 1:1 match. Then it makes sense to use the setter type in the lookup.

If there is a type hierachy from the setter type, we could walk up the tree (and select the interfacaes), and do re-lookup, if we could not find a match. Though this may be overkill? 
;;;","06/Mar/13 18:25;aaronjwhiteside;I think that's not a bad idea, I've cleaned up the first patch a bit - so let me attach the cleaned up version. Then I'll work on a version that returns a set of possible types to try and lookup/inject.;;;","06/Mar/13 18:38;aaronjwhiteside;Latest patch, cleaned up.;;;","06/Mar/13 18:45;davsclaus;Great, it would be good if we could add an unit test to tests/camel-itest-osgi to have an actual unit test running in osgi environment.;;;","06/Mar/13 18:50;aaronjwhiteside;second patch had a bug in it.. this one fixes that;;;","06/Mar/13 18:54;aaronjwhiteside;You wouldn't happen to know which profiles to enable to run the tests under tests/camel-itest-osgi?
;;;","06/Mar/13 19:08;davsclaus;You can run the tests just by
{code}
mvn clean install
{code}

Or a specific test class with
{code}
mvn clean test -Dtest=FooTest
{code}

The profiles is there to not run the tests on the CI servers as they may hang the CI servers. Though the situation recently with pax-exam 2.6 and karaf 2.3 may improve this.;;;","06/Mar/13 20:50;aaronjwhiteside;Forth patch, this one gets all the possible setter methods and then tries to inject each one until it succeeds or fails (due to conversion error or one of the setter methods throws an error).

I added a todo comment, because I think we should really be suppressing these errors instead of just failing outright? But currently the existing behavior is preserved and all camel-core unit tests pass.

I've taken a look at OSGiIntegrationTestSupport used in tests/camel-itest-osgi and I can see that we never actually use the real OsgiServiceRegistry the JndiRegistry is always used by default. 

I'll continue to look at adding a real OSGi test, but in the meantime is the latest patch good enough to be applied? ;;;","07/Mar/13 08:33;davsclaus;camel-ahc uses builder pattern for its configuration so it failed due the code changes. We should allow builder pattern by default when using the set property IMHO. So I am testing with this enabled.;;;","07/Mar/13 10:52;davsclaus;When using spring (spring-dm) or blueprint in the OSGi tests, then they use an OSGi CamelContext that setup all the registry and whatnot to use the OSGi versions. So eg OSGiRegistry would be used over JndiRegistry etc.

This happens automatic for you.

On the other hand if you create CamelContext manually you would need to use the osgi version of it, and setup all that other stuff manually.
;;;","07/Mar/13 17:10;aaronjwhiteside;Cleaned up EndpointHelper moved all the messy logic back into IntrospectionSupport.setProperty()

All camel-core unit tests pass.;;;","07/Mar/13 19:00;davsclaus;Thanks applied patch #5 to trunk and 2.10 branch;;;",,,,
Simple language - bean function - issue when parameter value has comma,CAMEL-6129,12635373,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/13 17:09,12/Mar/13 20:55,14/Jul/23 05:49,12/Mar/13 20:51,2.10.3,2.9.2,,,,,,,2.10.5,2.11.0,,,camel-core,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Prolems-with-parametrized-bean-method-call-via-simple-tp5728319.html

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,315866,,,2013-03-05 17:09:58.0,,,,,,,,,,,"0|i1ii7b:",316209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXB fallbackConveter unmarshal falls with XStreamReader,CAMEL-6128,12635291,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/Mar/13 08:02,05/Mar/13 11:50,14/Jul/23 05:49,05/Mar/13 11:50,2.10.0,2.10.1,2.10.2,2.10.3,2.10.4,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,"When using Get the request object from the CxfPayload Message, we will get this kind of error.

Caused by: javax.xml.bind.UnmarshalException
 - with linked exception:
[javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:253)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:165)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:90)[236:org.apache.camel.camel-jaxb:2.10.0]
        ... 48 more
Caused by: javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:254)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:249)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportUnexpectedChildElement(Loader.java:114)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$DefaultRootLoader.childElement(UnmarshallingContext.java:1049)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext._startElement(UnmarshallingContext.java:478)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:459)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        ... 52 more",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,315784,,,Tue Mar 05 11:50:52 UTC 2013,,,,,,,,,,,"0|i1ihp3:",316127,,,,,,,,,,,,,,,,,,,,"05/Mar/13 11:50;njiang;Applied patch into trunk and 2.10.x-fixes branch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Its impossible to inject a custom InflightRepository due to a copy-and-paste bug,CAMEL-6127,12635157,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,philippj,philippj,04/Mar/13 16:26,04/Mar/13 16:44,14/Jul/23 05:49,04/Mar/13 16:44,2.10.3,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-blueprint,camel-spring,,,,,0,,,,,,,"We wanted to inject/autowire (with a Spring context.xml) a custom InflightRepository as described here http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html
but this is not possible due to an obvious copy-and-past bug in 
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet()


Line 182

InflightRepository inflightRepository = getBeanForType(InflightRepository.class);
        if (delayer != null) {
            LOG.info(""Using custom InflightRepository: "" + inflightRepository);
            getContext().setInflightRepository(inflightRepository);
        }


is:
""if (delayer != null)"" 

should be:
""if (inflightRepository != null)""
",Windows7 64bit jdk7 camel 2.10.3,davsclaus,philippj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,315650,,,Mon Mar 04 16:40:02 UTC 2013,,,,,,,,,,,"0|i1igvb:",315993,,,,,,,,,,,,,,,,,,,,"04/Mar/13 16:40;davsclaus;Thanks for reporting. Will get this fixed soon.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-jms: InOut exchange can time out even if response was received,CAMEL-6123,12635116,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,04/Mar/13 12:41,22/Mar/13 00:33,14/Jul/23 05:49,22/Mar/13 00:32,2.10.3,2.9.5,,,,,,,2.10.5,2.11.0,2.9.6,,camel-jms,,,,,,0,,,,,,,"When performing an InOut JMS exchange with a certain requestTimeout, if the reply message is received in time, but the following formula stands true: 

{{T0 + T1 >= T!}}, where:

T0 = JMS response time
T1 = remaining route processing time following the reply
T! = requestTimeout

Then camel-jms will throw an {{ExchangeTimedOutException}} regardless of the fact that the reply was truly received in time.

I'm surprised this bug has gone unnoticed until now, as it's been present since mid-2010.

*Example unit test:*

{code:java}
    @Test
    public void testTimeoutNotTriggered() throws Exception {
        getMockEndpoint(""mock:exception"").expectedMessageCount(0);
        template.requestBody(""activemq:test"", ""<hello />"");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                onException(ExchangeTimedOutException.class)
                    .handled(true)
                    .to(""mock:exception"");

                from(""activemq:test"")
                    .inOut(""activemq:test?requestTimeout=500"")
                    .delay(constant(1000));
                
                from(""activemq:test"")
                    .log(""test"");
            }
        };
    }
{code}",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,315609,,,Fri Mar 22 00:33:27 UTC 2013,,,,,,,,,,,"0|i1igm7:",315952,,,,,,,,,,,,,,,,,,,,"04/Mar/13 12:42;raulvk;This happens because the entry is removed from the CorrelationTimeoutMap too late, after the subsequent processing has been invoked and returns.;;;","20/Mar/13 09:25;davsclaus;Any status on this. As we are closing in on a 2.11.0 release.;;;","22/Mar/13 00:33;raulvk;Fixed in trunk, 2.10.x and 2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,
camel-test-blueprint - May parse blueprint xml file concurrently and start 2 Camels,CAMEL-6111,12634578,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/13 08:46,28/Feb/13 10:38,14/Jul/23 05:49,28/Feb/13 10:38,2.11.0,,,,,,,,2.11.0,,,,camel-blueprint,camel-test,,,,,0,,,,,,,"Argh Aries Blueprint may parse the same blueprint xml file concurrently. Assume its the influence of pojosr that may trigger this. As running Camel on Karaf has not seen started the same XML file twice.

See nabble
http://camel.465427.n5.nabble.com/camel-blueprint-test-issues-tp5728260.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,315071,,,Thu Feb 28 10:38:46 UTC 2013,,,,,,,,,,,"0|i1idb3:",315415,,,,,,,,,,,,,,,,,,,,"28/Feb/13 10:38;davsclaus;This issue is only on 2.11;;;",,,,,,,,,,,,,,,,,,,,,,,
<to/> step in a <doCatch/> block runs when the <doTry/> tag is closed in the wrong place,CAMEL-6109,12634502,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mattrpav,mattrpav,27/Feb/13 22:23,28/Feb/13 14:38,14/Jul/23 05:49,28/Feb/13 07:04,2.10.3,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,"Example route:

<doTry>
   <to ... >
</doTry>

<doCatch>
    <exception>java.lang.Exception</exception>
    <to uri=""log.... ""/>
</doCatch>


The <to uri=""log...""/> line will execute every time, regardless if there is an exception or not.

I believe the preferred behavior would be that the route should fails to load/validate.  Alternatively, the <to uri=""log.."" /> should not run when there is not an exception.

Thanks!",Windows dev,davsclaus,mattrpav,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,314995,,,Thu Feb 28 14:38:02 UTC 2013,,,,,,,,,,,"0|i1icu7:",315339,,,,,,,,,,,,,,,,,,,,"28/Feb/13 05:23;davsclaus;The doCatch should be *inside* the doTry, as documented in its documentation: http://camel.apache.org/try-catch-finally.html;;;","28/Feb/13 06:32;davsclaus;On 2nd though lets add validation to the Camel model so we can detect the mis configuration of having doCatch outside doTry etc. Then we can tell the end user about this mis configuration so they can fix it.;;;","28/Feb/13 14:38;mattrpav;Thanks, Claus. The syntax check to alert users to the incorrect configuration was what I was hoping for. 

It can be a little confusing since for users coming from a plain Java coding background. When programming plain Java code the try {} closes before the catch {} opens.

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,
Language option not working for twitter streaming event filter,CAMEL-6107,12634426,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kevintelford,kevintelford,27/Feb/13 15:57,12/Nov/13 10:35,14/Jul/23 05:49,12/Nov/13 10:35,2.11.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-twitter,,,,,,0,,,,,,,"The filter seemed to be working when the streaming filter type was userids, but that could have just been happenstance.  Either way, when running a streaming event filter with a language option set I observe tweets coming in that are from users who have their language preferences set to other than the specified language.  I'm only assuming here this is what they are/should be matching against so this could be moot.

Example route code:
{code}
    @Override
    public void configure() throws Exception {
        String keywords = ""lol""; // any language-neutral term should work
        fromF(""twitter://streaming/filter?type=event&lang=en&keywords=%s""
                + ""&consumerKey=%s&consumerSecret=%s&accessToken=%s&accessTokenSecret=%s"", 
                    keywords, consumerKey, consumerSecret, accessToken, accessTokenSecret)
                .process(new Processor() {
                    @Override
                    public void process(Exchange exchange) throws Exception {
                        String json = exchange.getIn().getBody().toString();
                        if (json.contains(""lang='en'"")) {
                            System.out.println(""Correct"");
                        } else {
                            System.out.println(json);
                        }
                    }})
                .end();
    }
{code}",,aynalem,davsclaus,kevintelford,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,314919,,,Tue Nov 12 10:35:53 UTC 2013,,,,,,,,,,,"0|i1icdb:",315263,,,,,,,,,,,,,,,,,,,,"29/Mar/13 17:51;aynalem;Feature wasn't previously supported by twitter streaming api, added recently(https://dev.twitter.com/blog/introducing-new-metadata-for-tweets). Added to twitter4j library via(https://github.com/yusuke/twitter4j/commit/02043253906022c2c9c5e8b04943ca6313c7aedd). (currently part of 3.0.4-SNAPSHOT);;;","29/Mar/13 20:41;kevintelford;Thank you Matthew.  I'll keep an eye out, hopefully they will release twitter4j 3.0.4 soon so that it can make it into a Camel release.;;;","26/Aug/13 17:46;davsclaus;This would be fixed when we upgrade to twitter4j 3.0.4+.;;;","12/Nov/13 10:35;davsclaus;Upgraded to twitter4j 3.0.5;;;",,,,,,,,,,,,,,,,,,,,
Cache endpoint lazy initialization is not thread safe,CAMEL-6101,12634128,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattiker,agattiker,26/Feb/13 12:16,01/Mar/13 14:37,14/Jul/23 05:49,01/Mar/13 12:46,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.5,,camel-cache,,,,,,0,,,,,,,"Similar to CAMEL-5950, but only occurs at lazy cache initialization.

{code}
net.sf.ehcache.ObjectExistsException: Cache sampleCache already exists
    at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294) ~[org.apache.servicemix.bundles.ehcache-2.5.2_1.jar:na]
    at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184) ~[org.apache.servicemix.bundles.ehcache-2.5.2_1.jar:na]
    at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137) ~[camel-cache-2.10.3.jar:2.10.3]
{code}

Workaround:

{code}
		for (Endpoint endpoint : context.getEndpoints()) {
			if (endpoint instanceof CacheEndpoint) {
				CacheEndpoint ce = (CacheEndpoint) endpoint;
				ce.initializeCache();
			}
		}
{code}",,agattiker,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,314621,,,Fri Mar 01 14:37:52 UTC 2013,,,,,,,,,,,"0|i1iaj3:",314965,,,,,,,,,,,,,,,,,,,,"26/Feb/13 13:29;njiang;CAMEL-5950 also address the thread safe issue of the CacheConsumer.
Can you verify it with latest released Camel 2.10.4?;;;","01/Mar/13 12:46;njiang;This issue should be resolved with CAMEL-5950.;;;","01/Mar/13 14:37;agattiker;Confirm this is fixed in version 2.10.4. Sorry for the disturbance and thank you for a great product.;;;",,,,,,,,,,,,,,,,,,,,,
Race condition in AggregatorProcessor recovery sometimes causes duplicates,CAMEL-6097,12633699,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ben.truitt,ben.truitt,22/Feb/13 22:28,26/Jan/22 09:48,14/Jul/23 05:49,01/Mar/13 09:49,2.9.2,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,,,,,,11,,,,,,,"There seems to be a race condition in org.apache.camel.processor.aggregate.AggregateProcessor's RecoverTask.  That task calls recoverable.scan() to find Exchanges that may need to be recovered. Since scan() might return Exchanges that are actually just in progress, the RecoverTask then checks to see if the Exchange really is in progress.  It does this by calling inProgressCompleteExchanges.contains(exchangeId).  However, that collection may have been modified during the time between when scan() returned and when contains() is called.  This would happen if the in-progress Exchange completes before contains() is called.  In that situation, inProgress would evaluate to false, so the Exchange would be recovered.  This results in a duplicate Exchange being output by the Aggregator component. 

One possible solution might be to prevent updating the inProgressCompleteExchanges during the critical section. Another possible solution might be to copy inProgressCompleteExchanges before calling scan().  I'm sure that there are other ways to deal with this also.
",,bbonnet,ben.truitt,davsclaus,tetoconsusport,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8010,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,314194,,,Wed Jan 26 09:48:58 UTC 2022,,,,,,,,,,,"0|i1i7wf:",314539,,,,,,,,,,,,,,,,,,,,"01/Mar/13 09:49;davsclaus;Thanks for reporting, and providing ideas for a solution.;;;","26/Jan/22 09:48;bbonnet;Hi,

we have still a race condition between recover and aggregate threads on camel 3.x.
In AggregateProcessor, recover task :
 # takes a picture of in progress completed exchanges
 # scans completed repo
 # recovers any completed exchange from 2 that is not in picture from 1 ant that is not in progress

So, if a exchange becomes completed after 1 and is dealt by aggregate thread between 2 and 3 , then it will be considered as completed and not in progress, and recovery task will recover it.;;;",,,,,,,,,,,,,,,,,,,,,,
Multiple consumers exists on the same JMS endpoint uri and if you remove a consumer the other active consumers do not receive any messages anymore.,CAMEL-6093,12633400,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ladislav.lengyel,ladislav.lengyel,21/Feb/13 14:24,02/Sep/13 08:53,14/Jul/23 05:49,31/Aug/13 10:05,2.10.3,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jms,,,,,,0,,,,,,,"same issue as CAMEL-4194, but here it is for queues.
https://issues.apache.org/jira/browse/CAMEL-4194

description and unit test for reproduction
http://camel.465427.n5.nabble.com/Removing-routes-programmatically-td4556741.html#a5727523

see post on Feb 13, 2013; 4:41pm

thanks",,davsclaus,ladislav.lengyel,muellerc,saltnlight5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/May/13 12:18;davsclaus;TwoConsumerOnTheSameQueueTest.java;https://issues.apache.org/jira/secure/attachment/12584866/TwoConsumerOnTheSameQueueTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,313895,,,Fri Aug 30 15:06:41 UTC 2013,,,,,,,,,,,"0|i1i61z:",314240,,,,,,,,,,,,,,,,,,,,"06/Aug/13 23:48;saltnlight5;Hi,

I have looked at this issue, and it appeared that simple fix is to make JmsEndpoint#isSingle() to return false for both Queue and Topic cases. But if we do this, we will not able to manage the Queue endpoint through JMX because in DefaultManagementObjectStrategy#getManagedObjectForEndpoint() it will return null for non-singleton endpoint. Is this intended? If yes, what's a suggested solution for it? I will be happy to help come up with a patch if you guys can give some advise here.

Zemian;;;","12/Aug/13 22:34;saltnlight5;Hi, would anyone from Camel team can advise on my comment above?;;;","25/Aug/13 20:23;muellerc;I think this is a serious issue.

With commit 'ea325e3..5721e40', I added the attached (polished) unit test which shows this issue. Could some ActiveMQ expert have a look into it please!?;;;","26/Aug/13 22:27;saltnlight5;Hi Christian,

I don't see how this issue is related to ActiveMQ specific. The problem I see is that we allowing Queue to be singleton JmsEndpoint, and thus we are only creating one threadpool service for jmsMessageListenerContainer. Thus when user remove one consumer, the single threadpool will shutdown, and thus other active consumers who share same single Endpoint will not receive message anymore.

If we do intended for Queue to be non-singleton as JmsEndpoint with same URI string, then, I said, the fix is simply make JmsEndpoint#isSingle() to return false. The only drawback now is that once you do this, you will not able to see Queue stats through JMX because we don't expose non-single Endpoints on JMX (there is a unit test case that verify this)

Please let me know if my diagnosis is incorrect.;;;","30/Aug/13 12:19;davsclaus;The problem is only if the endpoints is 100% identical. You can consume from same queue with different endpoints.

And having 2+ routes from the same jms queue is very unusual, as you would have 1 route and use concurrent consumers if you need concurrency.
;;;","30/Aug/13 12:25;davsclaus;I wonder if the best solution is to let JmsEndpoint not be singleton so its not shared at all. And then introduce a new option on Endpoint to indicate that it should be enlisted in JMX, even if its not singleton. The trick is that you may have JmsEndpoints in JMX that would have the same ObjectName but would be different instances. To make the MBean names unique we would need to add the identity hashcode of the endpoint instance to the MBean name which then makes them look a bit ugly

""jms:queue:foo(0x12de45)""
""jms:queue:foo(0x0a1348)""
;;;","30/Aug/13 12:35;davsclaus;Using this approach the test from mueller passes.;;;","30/Aug/13 15:06;davsclaus;.. though another test hangs. I have founder a better solution that I am testing.;;;",,,,,,,,,,,,,,,,
CXFEndpoint blueprint config having binding element may lead to NPE,CAMEL-6089,12633153,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,20/Feb/13 08:29,04/Mar/13 06:26,14/Jul/23 05:49,28/Feb/13 05:35,2.10.3,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-cxf,,,,,,0,,,,,,,"There seems to be  an error in the EndpointpointDefinitionParser in parsing the binding element. Concretely speaking, that element is not parsed from the right element but wrongly from its parent element.

So, when you have something like

  <camel-cxf:cxfEndpoint id=""routerEndpoint"" ...>
    ...
    <camel-cxf:binding>
      <soap:soapBinding mtomEnabled=""true"" version=""1.2""/>
    </camel-cxf:binding>
  </camel-cxf:cxfEndpoint>

you may get an NPE, as shown in:

java.lang.NullPointerException: null
	at org.apache.aries.blueprint.container.RecipeBuilder.getValue(RecipeBuilder.java:335) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createBeanRecipe(RecipeBuilder.java:258) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createRecipe(RecipeBuilder.java:106) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createRepository(RecipeBuilder.java:89) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getRepository(BlueprintContainerImpl.java:438) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:288) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) ~[na:na


Fixing this line in EndpointDefinitionParser will fix this issue.
",,ay,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Feb/13 08:31;ay;trunk-camel-cxf-20130220.diff;https://issues.apache.org/jira/secure/attachment/12570096/trunk-camel-cxf-20130220.diff","20/Feb/13 16:59;ay;trunk-tests-camel-blueprint-cxf-test-20130220.diff;https://issues.apache.org/jira/secure/attachment/12570151/trunk-tests-camel-blueprint-cxf-test-20130220.diff","20/Feb/13 17:23;ay;trunk-tests-camel-blueprint-cxf-test-20130220b.diff;https://issues.apache.org/jira/secure/attachment/12570156/trunk-tests-camel-blueprint-cxf-test-20130220b.diff",,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,313649,,,Mon Mar 04 06:26:38 UTC 2013,,,,,,,Patch Available,,,,"0|i1i4jb:",313994,,,,,,,,,,,,,,,,,,,,"20/Feb/13 08:32;ay;I can also provide a unit test.;;;","20/Feb/13 16:59;ay;unit test;;;","20/Feb/13 17:04;ay;i just noticed that somehow the pmd setting was not working and the test class contains several unneeded imports.
i'll clean it up.
sorry.;;;","20/Feb/13 17:23;ay;cleaned up the unneeded imports from the test class.;;;","21/Feb/13 02:51;njiang;Applied the patch with thanks to Aki, and I also fixed some similar issues on the other cxf blueprint parser.
;;;","01/Mar/13 17:34;ay;I think this didn't go into 2.10.4, as the fix was integrated into 2.10.x on 2/21, whereas 2.10.4 was cut on 2/20.
;;;","04/Mar/13 06:26;njiang;This patch just missed the release train of camel 2.10.4.;;;",,,,,,,,,,,,,,,,,
Unmarshal from ActiveMQ yields warning if message has been marshalled before enqueue and contains BigDecimal or BigInteger,CAMEL-6086,12632755,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ralfsteppacher,ralfsteppacher,17/Feb/13 16:53,11/Nov/13 11:55,14/Jul/23 05:49,11/Nov/13 11:55,2.10.3,2.9.1,,,,,,,2.11.2,2.12.0,,,camel-activemq,,,,,,0,,,,,,,"Using activemq-camel version 5.8.0 and starting with Camel version 2.9.1 unmarshalling from ActiveMQ yields a warning if 

- the exchange body is an object containing a java.math.BigInteger or BigDecimal or
- the exchange body is an object containing a hierarchy of objects, one of which contains a BigInteger or BigDecimal 

and

- the exchange body has been explicitely marshalled using Java serialization

The warning:

""WARN  ObjectHelper - Cannot find class: [B""


Example route config:

<camel:route id=""writeToQueue"">
	<camel:from uri=""trigger"" />
	<!-- Put bean with BigDecimal or BigInteger into exchange body. -->
	<camel:process ref=""myProcessor"" />
	<camel:convertBodyTo type=""com.rs.TheBean""/>
	<camel:marshal ref=""javaSerialization"" />
	<camel:to ref=""queueTo"" />
</camel:route>

<camel:route id=""receiveFromQueue"">
	<!-- Yields warning. -->
	<camel:from uri=""queueFrom"" />
	<camel:unmarshal ref=""javaSerialization"" />
	<camel:convertBodyTo type=""com.rs.TheBean""/>
	<camel:log message=""Received message: ${in.body}"" loggingLevel=""INFO"" logName=""route:receiveFromQueue"" />
</camel:route>

Despite the warning, un-marshalling the message works.

I have not tried other versions of activemq-camel.
ActiveMQ Server is version 5.8.0",,ceposta,davsclaus,ralfsteppacher,rsteppac,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,313251,,,Mon Nov 11 11:55:44 UTC 2013,,,,,,,,,,,"0|i1i22v:",313596,,,,,,,,,,,,,,,,,,,,"26/May/13 12:16;davsclaus;Is there not more logging in the WARN ? eg a stacktrace or some more details.;;;","29/May/13 07:33;ralfsteppacher;All I had in the logs was the warning.;;;","01/Jun/13 06:03;davsclaus;When using java serialization make sure your objects is fully serializable. 
Are you sure TheBean is really that?

And you dont need the marshal/unmarshal as sending over JMS is object message by default.;;;","03/Jun/13 10:30;ralfsteppacher;The problem is reproducible with a bean that implements Serializable and contains a BigDecimal or BigInteger as its only class member.

Yes, I realized that I do not have to have an explicit serialization step if I wanted to use object serialization as the wire format. The step was in my routes because previously I used JAXB serialization so I could look at the message via the ActiveMQ web frontend. ;;;","20/Sep/13 20:46;ceposta;So I cannot reproduce this. Ralf, if you can post your test-case that shows this, we can take a closer look. Or, you can have a look at my test case here:

camelContext:
https://github.com/christian-posta/camel-sandbox/blob/master/activemq-things/src/test/resources/META-INF/spring/unmarshal-warn-context.xml

testDriver:
https://github.com/christian-posta/camel-sandbox/blob/master/activemq-things/src/test/java/posta/UnmarshalActivemqTest.java;;;","30/Oct/13 03:18;ceposta;Ralf, can you try on a more recent version of Camel, or at least take a look at the tests I've published and let us know if this is still a problem?

Thanks!;;;","11/Nov/13 07:45;rsteppac;Christian, I looked at your test context and to me it looks like you should be able to reproduce the problem with it. Maybe there is a difference between running the context in the unit test and running it ""natively"" that influences the behavior? 

I am able to reproduce the problem with Camel 2.10.5 but not with 2.11.2.;;;","11/Nov/13 11:55;davsclaus;Marking as resolved as its fixed in 2.11.2 onwards.;;;",,,,,,,,,,,,,,,,
SOAP over JMS does not work with camel-cxf endpoint,CAMEL-6084,12632703,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,16/Feb/13 08:54,28/Feb/13 05:32,14/Jul/23 05:49,28/Feb/13 05:32,2.10.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-cxf,,,,,,0,,,,,,,"If we would like to use SOAP over JMS using CXF & Camel (2.10),that fails.

The CXF endpoint receives well the incoming request from the JMS queue

{code}
[aultMessageListenerContainer-1] HelloWorldServicePortType INFO  Inbound Message
----------------------------
ID: 1
Content-Type: text/xml
Headers: {JMSMessageType=[text]}
Payload: <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:hel=""http://helloworld.mycompany.redhat.com"">
   <soapenv:Header/>
   <soapenv:Body>
      <hel:sayHello>
         <hel:name>fred</hel:name>
      </hel:sayHello>
   </soapenv:Body>
</soapenv:Envelope>

--------------------------------------
[aultMessageListenerContainer-1] route1 INFO  SOAP Request received message
[aultMessageListenerContainer-1] route1 INFO  Mock service replied

{code}

but the response is not returned by CXF neither published in a (reply) queue.

{code}
Here is the Camel Route

    @Override
    public void configure() throws Exception {

from(""cxf:bean:endpoint.service.worklist?dataFormat=MESSAGE"")
                .convertBodyTo(String.class)
                .log(""SOAP Request received message"")
.setHeader(""JMSReplyTo"").constant(""supervisorworklist.response"")
                .transform().constant(response) // RESPONSE = SOAP MESSAGE
                .log(""Mock service replied"");

    }

{code}

& Config

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xmlns:osgi=""http://www.springframework.org/schema/osgi""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:jms=""http://cxf.apache.org/transports/jms""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.10.0-spring.xsd
       http://cxf.apache.org/transports/jms http://cxf.apache.org/schemas/configuration/jms.xsd"">


    <bean id=""jms.connectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
       <!-- <property name=""brokerURL"" value=""vm://myEmbeddedBroker?broker.persistent=false"" />-->
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

    <bean id=""jms.config.service"" class=""org.apache.cxf.transport.jms.JMSConfiguration"">
        <property name=""connectionFactory"" ref=""jms.connectionFactory"" />
        <property name=""targetDestination"" value=""supervisorworklist"" />
        <property name=""replyDestination"" value=""supervisorworklist.response""/>
    </bean>

    <bean id=""logginOutInterceptor"" class=""org.apache.cxf.interceptor.LoggingOutInterceptor""/>
    <bean id=""logginInInterceptor"" class=""org.apache.cxf.interceptor.LoggingInInterceptor""/>

    <!--  Producer Endpoint -->
    <cxf:cxfEndpoint id=""endpoint.service.worklist""
                     address=""jms://""
serviceClass=""com.redhat.mycompany.helloworld.HelloWorldService""
                     serviceName=""s:HelloWorldService""
                     endpointName=""s:HelloWorldOverJms""
                     xmlns:s=""http://helloworld.atos.redhat.com"">

        <cxf:features>
            <bean xmlns=""http://www.springframework.org/schema/beans""
class=""org.apache.cxf.transport.jms.JMSConfigFeature"">
                <property name=""jmsConfig"" ref=""jms.config.service"" />
            </bean>
        </cxf:features>

         <cxf:inInterceptors>
             <ref bean=""logginInInterceptor""/>
         </cxf:inInterceptors>

         <cxf:outInterceptors>
             <ref bean=""logginOutInterceptor""/>
         </cxf:outInterceptors>
    </cxf:cxfEndpoint>


    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <package>com.redhat.mycompany.cxf</package>
    </camelContext>

</beans>
{code}
",,cmoulliard,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,313199,,,Mon Feb 18 08:48:22 UTC 2013,,,,,,,,,,,"0|i1i1rj:",313545,,,,,,,,,,,,,,,,,,,,"16/Feb/13 09:25;cmoulliard;wsdl used

{code}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
<wsdl:definitions
        xmlns:impl=""http://helloworld.mycompany.redhat.com""
        xmlns:jms=""http://cxf.apache.org/transports/jms""
        xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
        xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/""
        xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
        xmlns:soapjms=""http://www.w3.org/2010/soapjms/""
        targetNamespace=""http://helloworld.mycompany.redhat.com"">
    <wsdl:types>
        <schema xmlns=""http://www.w3.org/2001/XMLSchema""
                elementFormDefault=""qualified""
                targetNamespace=""http://helloworld.mycompany.redhat.com"">

            <element name=""sayHello"">
                <complexType>
                    <sequence>
                        <element name=""name"" type=""xsd:string""/>
                    </sequence>
                </complexType>
            </element>

            <element name=""sayHelloResponse"">
                <complexType>
                    <sequence>
                        <element name=""sayHelloReturn"" type=""xsd:string""/>
                    </sequence>
                </complexType>
            </element>
        </schema>
    </wsdl:types>

    <wsdl:message name=""sayHelloResponse"">
        <wsdl:part element=""impl:sayHelloResponse"" name=""parameters"">
        </wsdl:part>
    </wsdl:message>

    <wsdl:message name=""sayHelloRequest"">
        <wsdl:part element=""impl:sayHello"" name=""parameters"">
        </wsdl:part>
    </wsdl:message>

    <wsdl:portType name=""HelloWorld"">
        <wsdl:operation name=""sayHello"">
            <wsdl:input message=""impl:sayHelloRequest"" name=""sayHelloRequest"">
            </wsdl:input>
            <wsdl:output message=""impl:sayHelloResponse"" name=""sayHelloResponse"">
            </wsdl:output>
        </wsdl:operation>
    </wsdl:portType>

    <wsdl:binding name=""HelloWorldSoapBinding"" type=""impl:HelloWorld"">
        <wsdlsoap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
        <wsdl:operation name=""sayHello"">
            <wsdlsoap:operation soapAction=""""/>
            <wsdl:input name=""sayHelloRequest"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:input>

            <wsdl:output name=""sayHelloResponse"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:binding name=""HelloWorldSoap_JMS_Binding"" type=""impl:HelloWorld"">
        <wsdlsoap:binding style=""document"" transport=""http://cxf.apache.org/transport/jms""/>
        <wsdl:operation name=""sayHello"">
            <wsdlsoap:operation soapAction=""""/>
            <wsdl:input name=""sayHelloRequest"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:input>

            <wsdl:output name=""sayHelloResponse"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:service name=""HelloWorldService"">
        <wsdl:port binding=""impl:HelloWorldSoapBinding"" name=""HelloWorld"">
            <wsdlsoap:address location=""http://localhost:8080/WebService/services/HelloWorld""/>
        </wsdl:port>

        <wsdl:port binding=""impl:HelloWorldSoap_JMS_Binding"" name=""HelloWorldOverJms"">
            <jms:address
                    destinationStyle=""queue""
                    jndiConnectionFactoryName=""ConnectionFactory""
                    jndiDestinationName=""dynamicQueues/test.soap.jmstransport.queue"">
                <jms:JMSNamingProperty name=""java.naming.factory.initial""
                                       value=""org.apache.activemq.jndi.ActiveMQInitialContextFactory""/>
                <jms:JMSNamingProperty name=""java.naming.provider.url"" value=""vm://localhost""/>
            </jms:address>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>

{code};;;","18/Feb/13 04:15;njiang;Hi Charles,

I just wrote a simple test case by using the jms transport as you did. I can reproduce the error when I use the JMS URI or not. 
It looks like there are something wrong with the jms continuation which the cxf consumer is used by default.
You can work around it by using the synchronous=true on the camel-cxf endpoint like this
{code}
from(""cxf:bean:jmsEndpoint?synchronous=true"")...
{code}

I will keep on digging that.

Willem;;;","18/Feb/13 08:21;njiang;The JMSContinuation doesn't support to be called suspend and consume at the same thread. It is in the old design of cxf 2.2.x, which means you cannot called continuation suspend method before you setup the callback when continuation is ready.
Before I find a way to enhance the feature from CXF side, we should not support to use JMSContinuation anymore. I will commit the code to let CxfConsumer switch to sync invocation mode when it find the JMSContinuation is used. ;;;","18/Feb/13 08:41;cmoulliard;Hi Willem,

Thx. Do you mean that until now SOAP over JMS should not be used anymore (till next change) and we use by example this camel route to support same feature ?

{code}
from(""jms:queue:input"").setExchangePattern(ExchangePattern.InOnly).unmarshal(soap).to(""bean:callBackend"").marshal(soap).to(""jms:queue.replyQueue);
{code};;;","18/Feb/13 08:48;njiang;Hi Charles,

You can keep use the SOAP over JMS by setting the option of synchronous=true, it will force the cxf consumer use the sync invocation to wrok around the issue that we meet. 

I just want to say we can not use JMSContinuation which is key point to camel-cxf async invocation any more before we find a good solution in CXF.;;;",,,,,,,,,,,,,,,,,,,
gzip dataformat - Ensure input stream is closed if exception thrown,CAMEL-6081,12632382,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Feb/13 14:08,15/Feb/13 15:18,14/Jul/23 05:49,15/Feb/13 15:18,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-handle-error-when-Renaming-file-from-failed-due-cannot-delete-from-file-tp5727493.html

This cause problems on windows as it will lock the file etc.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312878,,,2013-02-14 14:08:29.0,,,,,,,,,,,"0|i1hzs7:",313224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
grails - class cast exception on startup,CAMEL-6079,12632345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kotkot,kotkot,14/Feb/13 10:02,16/Feb/13 09:37,14/Jul/23 05:49,16/Feb/13 09:37,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,jmx,,,,,0,,,,,,,"from time to time I get this exception on startup of my application. It doesn't happen every time but something like 1 out of 3 times.
I use camel with cxf+activemq as transport.


| Running Grails application
03:55:01.502 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is starting
03:55:01.871 INFO  o.a.c.m.ManagementStrategyFactory - JMX enabled.
03:55:02.037 WARN  o.a.camel.spring.SpringCamelContext - Lifecycle strategy org.apache.camel.management.DefaultManagementLifecycleStrategy@4774ac6b failed starting CamelContext (camelContext) due java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
03:55:02.039 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is shutting down
03:55:02.043 INFO  o.a.c.i.c.DefaultTypeConverter - TypeConverterRegistry utilization[attempts=0, hits=0, misses=0, failures=0] mappings[total=189, misses=0]
03:55:02.046 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is shutdown in 0.005 seconds. Uptime 0.545 seconds.
03:55:02.071 ERROR o.c.g.g.w.c.GrailsContextLoader - Error executing bootstraps: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
org.apache.camel.RuntimeCamelException: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:184) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1512) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:280) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:324) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:934) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.codehaus.groovy.grails.commons.spring.DefaultRuntimeSpringConfiguration.getApplicationContext(DefaultRuntimeSpringConfiguration.java:153) ~[grails-spring-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:170) ~[grails-core-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:127) ~[grails-core-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.web.context.GrailsConfigUtils.configureWebApplicationContext(GrailsConfigUtils.java:121) ~[grails-web-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.web.context.GrailsContextLoader.initWebApplicationContext(GrailsContextLoader.java:104) ~[grails-web-2.1.3.jar:2.1.3]
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) [spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) [na:1.7.0_13]
	at java.util.concurrent.FutureTask.run(FutureTask.java:166) [na:1.7.0_13]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_13]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_13]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_13]
Caused by: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
	at org.apache.camel.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:164) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:97) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:118) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:105) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:105) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:70) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:69) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.spi.SpringManagementMBeanAssembler.assemble(SpringManagementMBeanAssembler.java:71) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:227) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:217) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:75) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:68) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:772) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:180) ~[camel-core-2.10.3.jar:2.10.3]
	... 28 common frames omitted
03:55:02.205 INFO  o.c.g.g.c.s.GrailsWebApplicationContext - Closing org.codehaus.groovy.grails.commons.spring.GrailsWebApplicationContext@442c7c44: startup date [Thu Feb 14 03:54:20 CST 2013]; parent: Root WebApplicationContext
03:55:02.237 INFO  o.a.camel.spring.SpringCamelContext - No spring-event endpoint enabled to handle event: org.springframework.context.event.ContextClosedEvent[source=org.codehaus.groovy.grails.commons.spring.GrailsWebApplicationContext@442c7c44: startup date [Thu Feb 14 03:54:20 CST 2013]; parent: Root WebApplicationContext]","jdk 1.7.0_13
grails 2.1.3
osx 10.8.2
tomcat 7
",davsclaus,kotkot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312841,,,Sat Feb 16 09:37:28 UTC 2013,,,,,,,,,,,"0|i1hzjz:",313187,,,,,,,,,,,,,,,,,,,,"16/Feb/13 09:13;kotkot;Ommited part of stacktrace:
""localhost-startStop-1@5558"" daemon prio=5 tid=0x1f nid=NA runnable
  java.lang.Thread.State: RUNNABLE
	  at org.apache.camel.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:128)
	  at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:97)
	  at org.apache.camel.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:70)
	  at org.apache.camel.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:69)
	  at org.apache.camel.spring.spi.SpringManagementMBeanAssembler.assemble(SpringManagementMBeanAssembler.java:71)
	  at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:227)
	  at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:217)
	  at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:75)
	  at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:68)
	  at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:772)
	  at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:180)
	  at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1512)
	  at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
	  - locked <0x2b10> (a org.apache.camel.spring.SpringCamelContext)
	  at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	  at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	  at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
	  at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	  at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	  at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:280)
	  at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	  at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	  at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	  - locked <0x2b11> (a java.lang.Object)
	  at org.codehaus.groovy.grails.commons.spring.DefaultRuntimeSpringConfiguration.getApplicationContext(DefaultRuntimeSpringConfiguration.java:153)
	  at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:170)
	  at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:127)
	  at org.codehaus.groovy.grails.web.context.GrailsConfigUtils.configureWebApplicationContext(GrailsConfigUtils.java:121)
	  at org.codehaus.groovy.grails.web.context.GrailsContextLoader.initWebApplicationContext(GrailsContextLoader.java:104)
	  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791)
	  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	  - locked <0x2b12> (a org.apache.catalina.core.StandardContext)
	  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
	  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
	  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	  at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	  at java.lang.Thread.run(Thread.java:722);;;","16/Feb/13 09:37;davsclaus;Thanks for reporting.

We now skip proxy classes during JMX MBean assemble.;;;",,,,,,,,,,,,,,,,,,,,,,
Multiple http4 components modify each other port setting,CAMEL-6078,12632179,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lorenzo,lorenzo,13/Feb/13 10:25,23/May/13 09:32,14/Jul/23 05:49,23/May/13 09:32,2.10.3,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,1,,,,,,,"
This works:

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
  .to(""http4:www.google.com/search?q=Camel"")
  .to(""log:root"");

This does not

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"");

A netstat shows this (173.194.35.145 is a google ip)

tcp6       0      1 10.4.5.107:42627        173.194.35.145:8092     SYN_SENT


It looks like the second http4 declaration modified the port of the first one.

Setting explicitly the port fixes the problem, like this

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com:80/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"");

Even this works fine

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"")
 .to(""http4:www.yahoo.com:80/search?q=Camel"");

camel-http does NOT have this issue (BTW camel-http4 is missing from the form component list). 

I do not think this is by design, anyway it is very confusing to debug, because suddenly a previously working route stops to work just ""freezing"".


","java version ""1.6.0_26""
Linux 3.2.0-4-amd64 #1 SMP Debian 3.2.32-1 x86_64 GNU/Linux

",davsclaus,fhoeben,lorenzo,rene avontuur,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/May/13 13:46;rene avontuur;HTTPComponent.patch;https://issues.apache.org/jira/secure/attachment/12584302/HTTPComponent.patch","22/May/13 13:46;rene avontuur;HttpDefaultPortNumberTest.java;https://issues.apache.org/jira/secure/attachment/12584303/HttpDefaultPortNumberTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312675,,,Thu May 23 09:32:35 UTC 2013,,,,,,,,,,,"0|i1hyiv:",313021,,,,,,,,,,,,,,,,,,,,"22/May/13 13:19;fhoeben;The name of issue is misleading. The problem is not multiple http4 components, but multiple ENDPOINTS (which will be far more common).;;;","22/May/13 13:46;rene avontuur;patch for solving this issue and unit tests;;;","23/May/13 09:32;davsclaus;Thanks for reporting and the patch;;;",,,,,,,,,,,,,,,,,,,,,
Pairs of VM producer-consumer disconnect when OSGi bundle is restarted,CAMEL-6073,12631949,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Feb/13 14:23,12/Feb/13 17:05,14/Jul/23 05:49,12/Feb/13 17:05,2.10.3,2.9.5,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,See http://camel.465427.n5.nabble.com/VM-Queues-Disconnected-after-Karaf-Bundle-Update-tt5727205.html.,,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6072,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312445,,,Tue Feb 12 17:05:48 UTC 2013,,,,,,,,,,,"0|i1hx3r:",312791,,,,,,,,,,,,,,,,,,,,"12/Feb/13 17:05;raulvk;Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch).;;;",,,,,,,,,,,,,,,,,,,,,,,
Service Shutdown logic may execute N times,CAMEL-6072,12631948,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Feb/13 14:21,12/Feb/13 17:06,14/Jul/23 05:49,12/Feb/13 17:06,2.10.3,2.9.5,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,"ServiceSupport#shutdown should return immediately to avoid executing service shutdown logic twice, which could easily cause problems in the state of components, endpoints, consumers, etc.",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6073,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312444,,,Tue Feb 12 17:06:24 UTC 2013,,,,,,,,,,,"0|i1hx3j:",312790,,,,,,,,,,,,,,,,,,,,"12/Feb/13 17:06;raulvk;Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch).;;;",,,,,,,,,,,,,,,,,,,,,,,
java.io.IOException: Permission denied from MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock on NAS,CAMEL-6069,12631881,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andersmholmgren,andersmholmgren,12/Feb/13 04:19,18/Feb/15 11:14,14/Jul/23 05:49,12/Feb/13 08:47,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,"We recently upgraded to 2.10.x and discovered that the file poller no longer works on our NAS. We have hit similar issues with other open source libraries in the past.

The problem occurs when MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock is called and tries to create the new file. This actually works but also results in a Permission denied IOException (strange but true). 

A simple fix for this is to change the acquireExclusiveReadLock method as follows. 

{code}
    public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,
                                            GenericFile<File> file, Exchange exchange) throws Exception {
        String lockFileName = getLockFileName(file);
        LOG.trace(""Locking the file: {} using the lock file name: {}"", file, lockFileName);

        // create a plain file as marker filer for locking (do not use FileLock)
        File lock = new File(lockFileName);
        boolean acquired = false;
        try
        {
            acquired = lock.createNewFile();
        }
        catch (IOException e)
        {
            if (lock.exists())
            {
                acquired = true;
            }
            else
            {
                throw e;
            }
        }

        return acquired;
    }
{code}

Note the same problem occurring with Spring Batch can be found [here|https://jira.springsource.org/browse/BATCH-1659] ",,andersmholmgren,barisacar,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312377,,,Wed Feb 18 11:14:26 UTC 2015,,,,,,,,,,,"0|i1hwon:",312723,,,,,,,,,,,,,,,,,,,,"12/Feb/13 08:47;davsclaus;Thanks for reporting.;;;","14/Feb/13 03:29;andersmholmgren;thanks Claus;;;","18/Feb/15 11:14;barisacar;[~andersmholmgren] - are you _certain_ that it was the thread/process that raised the exception that created the file, and not some other process?

We are having problems with the current implementation as per your proposal, as it introduces race conditions into the locking mechanism, and allows multiple threads or processes to lock the same file at once.
See http://camel.465427.n5.nabble.com/FileUtil-createNewFile-race-condition-issue-td5762853.html#a5762897;;;",,,,,,,,,,,,,,,,,,,,,
CamelBlueprintContext may be wrongly started and this may lead to a deadlock,CAMEL-6068,12631809,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,11/Feb/13 20:53,12/Feb/13 09:04,14/Jul/23 05:49,12/Feb/13 09:04,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-blueprint,,,,,,0,,,,,,,"We observed a deadlock situation that seems to be caused by the change that came in with CAMEL-5712, which changed the way how CamelBlueprintContext is started to solve another issue.

The current code listens to the service registered event for org.osgi....BlueprintContainer (supposedly for its associated BP container) and decides to start itself if not started. From the description of the ticket, this change was intended to make sure the starting of the context occurs after its BP container is registered. 

In that case, should it be checking whether the received event belongs to the same bundle? This checking is missing in the current code and consequently, it may wrongly react to the event from another bundle's container registration event. When this happens under some specific timing situation, it may also lead to a deadlock.

So, should we be checking the event source in CamelBlueprintContext's serviceChanged method?

Regards, aki

Stack trace from 2.10.3
========================================================================
Name: Blueprint Extender: 3
State: BLOCKED on java.lang.Object@9064b42 owned by: Blueprint Extender: 2
Total blocked: 13  Total waited: 38

Stack trace:
 org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:709)
org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)
org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)
org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)
org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)
org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:314)
   - locked java.util.HashMap@1660de94org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:456)
org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)
org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)
org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)
org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)
org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)
org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
   - locked org.apache.camel.blueprint.BlueprintCamelContext@5011bafaorg.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:127)
org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:96)
org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)
org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:346)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
   - locked java.util.concurrent.atomic.AtomicBoolean@3cb3ada
   - locked java.util.concurrent.atomic.AtomicBoolean@31b4d206
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)


========================================================================
Name: Blueprint Extender: 2
State: BLOCKED on
org.apache.camel.blueprint.BlueprintCamelContext@5011bafa owned by: Blueprint Extender: 3
Total blocked: 24  Total waited: 58

Stack trace:
 org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:1053)
org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:64)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:36)
org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)
org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
java.lang.reflect.Method.invoke(Method.java:597)
org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)
org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)
org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)
org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
   - locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
   - locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:631)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
   - locked java.util.concurrent.atomic.AtomicBoolean@53b00227
   - locked java.util.concurrent.atomic.AtomicBoolean@5648a168
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)
",,ay,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Feb/13 20:55;ay;trunk-components-camel-blueprint-20130211.diff;https://issues.apache.org/jira/secure/attachment/12568885/trunk-components-camel-blueprint-20130211.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312305,,,Tue Feb 12 09:04:12 UTC 2013,,,,,,,Patch Available,,,,"0|i1hw8n:",312651,,,,,,,,,,,,,,,,,,,,"12/Feb/13 09:04;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
Wire Tap onPrepare should process new Exchange,CAMEL-6064,12631718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,scranton,scranton,11/Feb/13 13:00,12/Feb/13 09:10,14/Jul/23 05:49,12/Feb/13 09:10,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"As scenario for Wire Tap onPrepare is deep cloning the message body, I'd expect original instance to stay with main route, and deep copy to go to specified Wire Tap endpoint. This would require onPrepare to process the new Exchange.",,davsclaus,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312214,,,Tue Feb 12 09:10:47 UTC 2013,,,,,,,Patch Available,,,,"0|i1hvof:",312560,,,,,,,,,,,,,,,,,,,,"11/Feb/13 13:03;scranton;Fix and updated Unit Test in Github.com pull request - https://github.com/apache/camel/pull/12;;;","12/Feb/13 09:10;davsclaus;Thanks Scott for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,
spring-dm and blueprint - OSGi language resolver does not work,CAMEL-6060,12631628,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,davsclaus,davsclaus,10/Feb/13 06:18,08/May/14 12:19,14/Jul/23 05:49,11/Feb/13 12:28,2.11.0,,,,,,,,2.11.0,,,,camel-spring,osgi,,,,,0,,,,,,,"Running Camel 2.11 in Karaf 2.3.0, can not resolve languages when using spring-dm apps.

[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)
[  79] [Active     ] [            ] [       ] [   50] mvel2 (2.1.3.Final)
[  80] [Active     ] [            ] [       ] [   50] camel-mvel (2.11.0.SNAPSHOT)
[  81] [Active     ] [            ] [       ] [   80] A Camel Spring-DM Route (1.0.0)
Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel{request.body.substring(0, 4)}] <<< in route: Route[[From[timer:foo?period=5000]] -> [SetBody[bean{helloBe... because of No language could be found for: mvel
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1328)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:282)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel{request.body.substring(0, 4)}] <<< in route: Route[[From[timer:foo?period=5000]] -> [SetBody[bean{helloBe... because of No language could be found for: mvel
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:879)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:172)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:742)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1821)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1601)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1470)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1438)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: mvel
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1009)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:177)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:168)
	at org.apache.camel.model.TransformDefinition.createProcessor(TransformDefinition.java:59)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:459)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:177)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)
	... 20 more",,cp1,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312124,,,Thu May 08 12:19:21 UTC 2014,,,,,,,,,,,"0|i1hv4f:",312470,,,,,,,,,,,,,,,,,,,,"10/Feb/13 06:29;davsclaus;Okay camel-mvel does not export the language as a service in OSGi.
Its just empty for camel-mvel


It works for groovy etc
camel-groovy (88) provides:
---------------------------
language = groovy
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 232
;;;","10/Feb/13 06:40;davsclaus;It works for Camel 2.10.3 in Karaf 2.2.10:

[  75] [Active     ] [            ] [       ] [   50] Apache ServiceMix :: Bundles :: mvel2 (2.0.18.3)
[  76] [Active     ] [            ] [       ] [   50] camel-mvel (2.10.3)
karaf@root> ls 76
You are about to access system bundle 76.  Do you wish to continue (yes/no): 
camel-mvel (76) provides:
-------------------------
language = mvel
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 212;;;","10/Feb/13 06:42;davsclaus;And also for Camel 2.10.3 in Karaf 2.3.0;;;","10/Feb/13 07:13;davsclaus;This is also a problem for blueprint. The language cannot be resolved due its not registered in the osgi service registry.;;;","11/Feb/13 09:56;davsclaus;Okay I think I found the issue.

camel-mvel JAR has flawed MANIFEST.MF generated by the tooling.

This is the packages it imports:
{code}
Import-Package: org.apache.camel;version=""[2.11,2.12)"",org.apache.camel.
 language;version=""[2.11,2.12)"",org.apache.camel.support;version=""[2.11,
 2.12)"",org.mvel2;version=""[2.1,3)""
{code}

So we import these packages from Camel
- org.apache.camel
- org.apache.camel.language
- org.apache.camel.support

But we need to import the spi package, which is in fact used by the MvelLanguage.java file.
See the import in the top of its source code

{code}
package org.apache.camel.language.mvel;

import org.apache.camel.Expression;
import org.apache.camel.Predicate;
import org.apache.camel.spi.Language;
import org.apache.camel.support.LanguageSupport;

/**
 * An <a href=""http://mvel.codehaus.org/"">MVEL</a> {@link Language} plugin
 * 
 * @version 
 */
public class MvelLanguage extends LanguageSupport {

    public Predicate createPredicate(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Boolean.class);
    }

    public Expression createExpression(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Object.class);
    }

}
{code}
;;;","11/Feb/13 10:02;davsclaus;And this is the generated MANIFEST.MF file from Camel 2.10.3 release.
Notice it has import of ""org.apache.camel.spi""

{code}
Import-Package: org.apache.camel;version=""[2.10,2.11)"",org.apache.camel.
 language;version=""[2.10,2.11)"",org.apache.camel.spi;version=""[2.10,2.11
 )"",org.apache.camel.support;version=""[2.10,2.11)"",org.mvel2;version=""[2
 .0,3)""
Karaf-Info: Camel;camel-mvel=2.10.3
{code};;;","11/Feb/13 12:28;davsclaus;I had to force adding the spi package, and not the MANIFEST.MF has that package included out of the box.;;;","08/May/14 12:19;cp1;Probably the same error for jsonpath language implementation:

{code}
2014-05-08 16:08:21,179 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 141 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=cbonds-adapter, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:122)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:316)[144:org.apache.camel.camel-spring:2.13.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)[141:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:745)[:1.7.0_55]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:910)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:778)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2041)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1791)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1665)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1633)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)[144:org.apache.camel.camel-spring:2.13.0]
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: jsonpath
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:154)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:143)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createPredicate(ExpressionNode.java:120)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:110)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:77)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:31)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:459)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ChoiceDefinition.createProcessor(ChoiceDefinition.java:135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:499)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)[136:org.apache.camel.camel-core:2.13.0]
	... 19 more
{code};;;",,,,,,,,,,,,,,,,
camel-rss and camel-atom - Not installable in Karaf,CAMEL-6059,12631583,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Feb/13 14:24,09/Feb/13 14:32,14/Jul/23 05:49,09/Feb/13 14:32,2.11.0,,,,,,,,2.10.4,2.11.0,2.9.6,,karaf,,,,,,0,,,,,,,"karaf@root> features:install camel-rss
Error executing command: Manifest not present in the first entry of the zip mvn:org.apache.ws.commons.axiom/axiom-impl/1.2.14

I think we got a JAR that is flawed 1.2.14",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,312079,,,Sat Feb 09 14:32:27 UTC 2013,,,,,,,,,,,"0|i1huuf:",312425,,,,,,,,,,,,,,,,,,,,"09/Feb/13 14:32;davsclaus;Downgraded to the 1.2.12 that works in OSGi.;;;",,,,,,,,,,,,,,,,,,,,,,,
Moving files on FTP not working,CAMEL-6056,12631438,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,csch,csch,08/Feb/13 12:23,25/Mar/13 16:54,14/Jul/23 05:49,16/Mar/13 10:06,2.10.3,2.10.4,2.11.0,,,,,,2.10.5,2.11.0,,,camel-ftp,,,,,,8,file,ftp,move,,,,"Moving files stored on a ftp server to another directory specified by the move parameter is not working in camel versions 2.10.3, 2.10.4-SNAPSHOT and 2.11-SNAPSHOT.
(The ftp user got write permission.)
Whereas the file is moved as expected when using version 2.10.2

*The stacktrace I got when executing the test on camel version 2.10.3:*
{quote}
11:04:56,822 WARN  [org.apache.camel.component.file.GenericFileOnCompletion] (Camel (camel-1) thread #1 - ftp://myftp.com) Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - File operation failed: 550 Failed to change directory.
 Cannot change directory to: \\. Code: 550]: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 Failed to change directory.
 Cannot change directory to: \\. Code: 550
	at org.apache.camel.component.file.remote.FtpOperations.doChangeDirectory(FtpOperations.java:704) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.changeCurrentDirectory(FtpOperations.java:660) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.buildDirectory(FtpOperations.java:284) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:100) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:134) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processSync(UnitOfWorkProcessor.java:139) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:115) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:92) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [rt.jar:1.6.0_37]
	at java.lang.Thread.run(Thread.java:662) [rt.jar:1.6.0_37]
{quote}


*The anonymized test case:*

{quote}
    @Test
    public void testFTPMove() throws Exception{
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""ftp://user@ftpserver.com:21"" +
                        ""/folder/subfolder/"" +
                        ""?password=mypassword"" +
                        ""&ftpClient.dataTimeout=30000"" +
                        ""&binary=true"" +
                        ""&move=.success"" +
                        ""&antInclude=file*.txt"")
                .log(""${body}"");
            }
        });
        Thread.sleep(3000);
        context.stop();
    }
{quote}


",,0jeff0,davsclaus,fbalicchia,mukraker,pontus.ullgren,rlu,supbrah,,,,,,,,,,,,CAMEL-5989,,,,,,,,,,,,,,,,,,"14/Mar/13 19:19;rlu;CAMEL-6056.zip;https://issues.apache.org/jira/secure/attachment/12573754/CAMEL-6056.zip",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311934,,,Mon Mar 25 16:52:18 UTC 2013,,,,,,,,,,,"0|i1hty7:",312280,,,,,,,,,,,,,,,,,,,,"08/Feb/13 12:45;csch;CAMEL-5989 could be related to this Issue, whereas in CAMEL-5989 it worked with 2.10.4-SNAPSHOT (referring to comments) which is not the case in this issue.;;;","14/Mar/13 19:04;supbrah;Any ETA on this? Really hampering my development.;;;","14/Mar/13 19:14;mukraker;I cannot move forward with the time-critical work I need to accomplish without a fix for this issue. Hope it gets resolved soon.;;;","14/Mar/13 19:19;rlu;Patch for wrong separator handling when client and server are running on different os;;;","14/Mar/13 19:28;rlu;There are 2 discussions in camel-user mailing list referring to this issue:
 * Files cannot be moved on FTP
 * camel-ftp 2.10.4 fails to connect on windows;;;","15/Mar/13 10:08;davsclaus;The patch breaks unit tests on Windows when applied to the trunk. 
Its generally best if you would run the unit tests of the component before submitting patches.;;;","15/Mar/13 10:52;davsclaus;Okay I think I got that fixed as well for all the unit test failures on Windows.;;;","16/Mar/13 10:06;davsclaus;Thanks for the patches et all. The codebase has been a mix with this patch and backporting the code to what we used in Camel 2.10.2 to have a working solution.

It would be good if people could give the SNAPSHOT of the upcoming 2.10 or 2.11 releases at test spin in your environment to see if it works for you now.;;;","19/Mar/13 09:25;rlu;i have tested 2.10.5-SNAPSHOT and 2.11-SNAPSHOT on windows client against RHEL FTP server. The exception is gone, but files are not moved.

Working with windows client and ftp server still works as expected.;;;","20/Mar/13 12:45;rlu;in my opinion the issue is _not_ fixed for 2.11.0
Tests using: camel-ftp-2.11-20130320.060217-416 NOK
             camel-ftp-2.10.5-20130315.195808-8 OK;;;","20/Mar/13 14:39;0jeff0;Same problem with sftp ;;;","20/Mar/13 15:08;fbalicchia;summarizing file is not move in the following env
with both ftp and ftps

* client windows -> RHEL FTP server   KO
* client windows -> Apache Ftp (Linux e windows)   OK

* client unixLike -> RHEL FTP server   Ok
* client unixLike -> Apache Ftp (Linux e windows) Ok

Is it correct ?;;;","20/Mar/13 16:02;davsclaus;I have not been able to reproduce any kind of problem. 

For Camel 2.11 I have added a new camel-example-ftp that can be used to test this in the future as well.

I have an Windows XP box with a FileZilla FTP server, and I can upload and download files from my osx laptop without problems.
I have tried with both 2.10.2 and 2.11-SNAPSHOT.

Though I am adding an extra check in the codebase for that double slash that was reported initially in this ticket.;;;","20/Mar/13 16:07;davsclaus;I have committed a fix on 2.11 and 2.10 branch for the double slash issue. Fell free to give that a test spin.;;;","21/Mar/13 11:33;0jeff0;Hey all ! 

I have made a test with the camel-ftp-2.11-20130320.060217-416.jar;
My client    : Windows 7 ( JRE jdk1.7.0_10)
My FTPServer : Solaris( SunOS 5.10 via /usr/lib/ssh/sftp-server)

It works fine only with double quote :

from(""sftp://but@XXX.XXX.XXX.XXX//tmp/JFL/?password=secret"")
   .log(""File=>${file:name}"")
.end();

With no need to &separator=UNIX&stepwise=false

JF

;;;","25/Mar/13 16:52;rlu;i have tested it with camel-2.10.5-20130315.195808-8.jar and it work as expected. Thanks!

    client windows -> RHEL FTP server OK
    client windows -> Apache Ftp (windows) OK
;;;",,,,,,,,
"XML-files containing attributes called ""type"" does not get converted to json",CAMEL-6048,12631288,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,klodrik,klodrik,07/Feb/13 15:54,07/Feb/13 18:05,14/Jul/23 05:49,07/Feb/13 18:05,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,xml,xmljson,,,,,"An XML-file with an attribute called type will not get converted to JSON, even if the TypeHintsEnum.NO is used. The problem is that the XMLSerializer in json-lib has typeHintsCompatibility=true as default. It should be explicitly set to false along with typeHintsEnabled. 
",,davsclaus,klodrik,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Feb/13 15:55;klodrik;camel-xmljson.diff;https://issues.apache.org/jira/secure/attachment/12568426/camel-xmljson.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,311784,,,Thu Feb 07 18:05:46 UTC 2013,,,,,,,Patch Available,,,,"0|i1ht13:",312130,,,,,,,,,,,,,,,,,,,,"07/Feb/13 18:05;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
sftp: noop=true&idempotent=false doesn't work,CAMEL-6046,12631264,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jaakko.salmela@aalto.fi,jaakko.salmela@aalto.fi,07/Feb/13 14:14,07/Feb/13 15:17,14/Jul/23 05:49,07/Feb/13 15:17,2.8.1,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-ftp,,,,,,0,,,,,,,"Forcing idempotent=false doesn't seem to work with ftp-endpoint
{code}
<from uri=""sftp://user@server.aalto.fi//payments?password=*****&amp;connectTimeout=20000&amp;stepwise=false&amp;idempotent=false&amp;noop=true&amp;delay=60000""/>
{code}
Will copy files with a same name only once.

However it works with file-endpoint
{code}
<from uri=""file:/payments?idempotent=false&amp;noop=true&amp;delay=60000""/>
{code}
the files are copied every time, like they should be.



",,davsclaus,jaakko.salmela@aalto.fi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311760,,,Thu Feb 07 15:17:25 UTC 2013,,,,,,,,,,,"0|i1hsvr:",312106,,,,,,,,,,,,,,,,,,,,"07/Feb/13 15:17;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel Email Component Missing Attachments ,CAMEL-6045,12631262,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,07/Feb/13 14:00,24/Sep/13 17:50,14/Jul/23 05:49,07/Feb/13 14:53,2.6.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-mail,,,,,,0,,,,,,,"see http://camel.465427.n5.nabble.com/Camel-Email-Component-Missing-Attachments-td3386382.html#a5727102

The disposition field is optional(see RFC 2183), so it is possible that camel misses attachments.
{noformat}
                if (disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE))) {
                    // only add named attachments
                    String fileName = part.getFileName();
                    if (fileName != null) {
                        LOG.debug(""Mail contains file attachment: "" + fileName);
                        // Parts marked with a disposition of Part.ATTACHMENT are clearly attachments
                        CollectionHelper.appendValue(map, fileName, part.getDataHandler());
                    }
                }
{noformat}

Adding the fileName check to the if should resolve the issue.
",,ceposta,cgiera,davsclaus,vitamon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Feb/13 14:31;cgiera;MailBinding.java.patch;https://issues.apache.org/jira/secure/attachment/12568417/MailBinding.java.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311758,,,Tue Sep 24 17:50:14 UTC 2013,,,,,,,Patch Available,,,,"0|i1hsvb:",312104,,,,,,,,,,,,,,,,,,,,"07/Feb/13 14:24;cgiera;Test with changed if worked on my side. I've just added the fileName check to the if:
{noformat}
				if ((disposition != null && (disposition
						.equalsIgnoreCase(Part.ATTACHMENT) || disposition
						.equalsIgnoreCase(Part.INLINE)))
						|| fileName != null) {
					LOG.debug(""Mail contains file attachment: "" + fileName);
					// Parts marked with a disposition of Part.ATTACHMENT
					// are clearly attachments
					CollectionHelper.appendValue(map, fileName,
							part.getDataHandler());

				}
{noformat};;;","07/Feb/13 14:29;cgiera;I still use camel 2.6 due to some customer restrictions(java 5), but I couldn't find a branch for 2.6 to provide a patch for this version. So i will add a patch for the trunk version.;;;","07/Feb/13 14:31;cgiera;patch added;;;","07/Feb/13 14:53;davsclaus;Thanks for the patch.;;;","20/Aug/13 13:02;vitamon;{code} if ((disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE)))
                        || fileName != null)
{code}
There is a problem with the filename check:
If filename==null, but everything else is ok, it will be added to the map. There should be ""&& filename != null"".
Please correct in future versions.  
 ;;;","24/Sep/13 15:34;ceposta;Vitalii, 
Not sure the sub-task is valid. Can you review my comments on it?
Seems that since disposition is optional, it shouldn't make a difference if it's null or not and whether there is a fileName.;;;","24/Sep/13 17:40;vitamon;The problem is not with disposition, but with fileName. I had a case when disposition was not null, but the fileName == null. (mail from Microsoft Exchange Server btw). The fileName should not be null in any case. Or the map entry (null -> part) will be added, which is not good and causes NPEs.;;;","24/Sep/13 17:47;vitamon;Here's extract from my code:
{code}
Map<String, DataHandler> attachments = exchange.getIn().getAttachments();
if (attachments.size() > 0) {
     for (String name : attachments.keySet()) {
         if (StringUtils.isNotBlank(name)) { // <--- added this to avoid null attachment names
            DataHandler dh = attachments.get(name);
{code};;;","24/Sep/13 17:50;ceposta;Yes, that makes sense. Thanks for the clarification. I've attached a fix to CAMEL-6654;;;",,,,,,,,,,,,,,,
"Bindy does not handle separator at the end of quoted field, appends next field",CAMEL-6041,12631088,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,zinksl,zinksl,06/Feb/13 16:25,31/May/13 11:20,14/Jul/23 05:49,31/May/13 11:20,,,,,,,,,2.10.5,2.11.0,,,camel-bindy,,,,,,0,maven,patch,test,,,,"Address fields quite often contain comma at the end of an addressLine1 field.\\ Example - ""PROBLEM SOLVER"",""8506 SIX FORKS ROAD,"",""SUITE 104"",""RALEIGH"",""NC"",""27615"",""US""\\
Bindy will append next field to such one shifting all others to the left.",,davsclaus,njiang,zinksl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Feb/13 16:50;zinksl;bindy-cvsissue-patch.txt;https://issues.apache.org/jira/secure/attachment/12568247/bindy-cvsissue-patch.txt","06/Feb/13 16:29;zinksl;bindy-cvsissue-test.zip;https://issues.apache.org/jira/secure/attachment/12568244/bindy-cvsissue-test.zip",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311584,,,Fri May 31 11:20:56 UTC 2013,,,,,,,,,,,"0|i1hrsn:",311930,,,,,,,,,,,,,,,,,,,,"06/Feb/13 16:29;zinksl;Test project with suggested patch(for version 2.10.3). 
Situations with separator at the beginning of field still requires attention. Though in real life such use cases are probably rare.;;;","26/May/13 12:12;davsclaus;Thanks for the patch. Willem can you take a look?;;;","31/May/13 11:20;njiang;Applied the patch into trunk and merged back into camel-2.10.x branch.;;;",,,,,,,,,,,,,,,,,,,,,
Possible NPE is OSGi bundle has no symbolic name,CAMEL-6038,12630864,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Feb/13 12:22,05/Feb/13 12:32,14/Jul/23 05:49,05/Feb/13 12:32,,,,,,,,,2.10.4,2.11.0,,,osgi,,,,,,0,,,,,,,"See
http://fusesource.com/forums/thread.jspa?messageID=16745&#16745",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311360,,,2013-02-05 12:22:06.0,,,,,,,,,,,"0|i1hqev:",311706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"multiple decoding Endpoint Parameters containing urlchars: '+'. '?', '&'",CAMEL-6037,12630842,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rlu,rlu,05/Feb/13 09:49,25/Mar/13 16:17,14/Jul/23 05:49,25/Mar/13 16:17,2.10.3,,,,,,,,2.11.0,,,,camel-ftp,,,,,,0,,,,,,,"ftpClientParameters are already (partially) urldecoded in method FtpEndpoint.createRemoteFileOperations when calling for IntrospectionSupport.setProperties, this results in wrong password strings. for example uri=ftp://ftp2.server/path?fileName=testfile.txt&username=user&password=se%2Bcure 
'se+cure' -> 'se cure' 


I think it is caused by DefaultCamelContext.normalizeEndpointUri ",,davsclaus,rlu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311338,,,Mon Mar 25 16:17:13 UTC 2013,,,,,,,,,,,"0|i1hq9z:",311684,,,,,,,,,,,,,,,,,,,,"25/Mar/13 16:17;davsclaus;Fixed by CAMEL-6176;;;",,,,,,,,,,,,,,,,,,,,,,,
interceptSendToEndpoint with a DelegateAsyncProcessor fails,CAMEL-6035,12630619,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,michael.wirth,michael.wirth,04/Feb/13 08:52,05/Feb/13 08:14,14/Jul/23 05:49,05/Feb/13 08:14,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"interceptSendToEndpoint with a DelegateAsyncProcessor fails.
The intercepted target processor don't implement the interave Service and therfore won't 'start' the target services.

Caused by: java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[log://foo])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at AdviceWithTest$ContainerWideInterceptor$1.process(AdviceWithTest.java:94)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:60)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:132)
","Windows XP
RAD 7.5.5.2
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pwi3260sr8-20100409_01(SR8))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260sr8-20100401_55940 (JIT enabled, AOT enabled)
J9VM - 20100401_055940
JIT  - r9_20100401_15339
GC   - 20100308_AA)
JCL  - 20100408_01
",davsclaus,michael.wirth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Feb/13 08:53;michael.wirth;AdviceWithTest.java;https://issues.apache.org/jira/secure/attachment/12567821/AdviceWithTest.java",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311115,,,Tue Feb 05 08:14:42 UTC 2013,,,,,,,,,,,"0|i1howv:",311463,,,,,,,,,,,,,,,,,,,,"04/Feb/13 17:41;davsclaus;Yeah you would need to use WrapProcessor instead of Processor to ensure the target processor gets started as expected.
{code}
    static class ContainerWideInterceptor implements InterceptStrategy {

        private static final transient Logger LOG = LoggerFactory.getLogger(ContainerWideInterceptor.class);
        private static int count;

        public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition,
                                                     final Processor target, final Processor nextTarget) throws Exception {

            return new DelegateAsyncProcessor(new WrapProcessor(new Processor() {

                public void process(Exchange exchange) throws Exception {
                    // we just count number of interceptions
                    count++;
                    LOG.info(""I am the container wide interceptor. Intercepted total count: "" + count);
                    nextTarget.process(exchange);
                }

                @Override
                public String toString() {
                    return ""ContainerWideInterceptor["" + target + ""]"";
                }
            }, target));
        }

        public int getCount() {
            return count;
        }
    }
{code}

We may want to add some API to make this easier for end users.;;;","05/Feb/13 08:14;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,
NoRedeliveryOnShutdown doesn't work for DeadLetterChannel,CAMEL-6033,12630535,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,02/Feb/13 17:28,04/Feb/13 17:33,14/Jul/23 05:49,04/Feb/13 16:39,2.11.0,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,"See http://camel.465427.n5.nabble.com/Wrong-test-for-allowRedeliveryWhileStopping-possible-bug-td5726184.html for details.

The assumption is if we use ""allowRedeliveryWhileStopping(false)"" in an error handler definition which use a dead letter channel, the message should be send to the configured dead letter channel if we are in a delivery by stopping Camel (instead of dropping the message).",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,311029,,,Mon Feb 04 17:33:26 UTC 2013,,,,,,,,,,,"0|i1hod3:",311374,,,,,,,,,,,,,,,,,,,,"02/Feb/13 17:38;muellerc;I added a (slightly modified) unit test to show the bug: http://svn.apache.org/viewvc?view=revision&revision=1441777
I added a @Ignore annotation so that the build will not fail.
It would be great if one of the key committer could have a look at it (I'm too busy with other tasks).;;;","04/Feb/13 10:32;davsclaus;It was not designed to move the message to DLC, but reject redelivery during stopping/shutdown.

I will see what we can do to make this special case for DLC.;;;","04/Feb/13 12:45;davsclaus;I have a potential solution. Though some tests in CXF now fails; will need to look into this. All other tests passes fine.;;;","04/Feb/13 13:01;davsclaus;Okay it was the CXF test that was wrong.;;;","04/Feb/13 14:42;davsclaus;allowRedeliveryWhileStopping is a new option in Camel 2.11;;;","04/Feb/13 17:33;muellerc;Thanks Claus!;;;",,,,,,,,,,,,,,,,,,
NumberFormatException when using File over JMS,CAMEL-6025,12630047,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wattsc3,wattsc3,31/Jan/13 00:24,01/Feb/13 16:42,14/Jul/23 05:49,01/Feb/13 16:42,2.10.2,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,"When using the FileConsumer to send a file to a JMS queue which is then consumed by the FileProducer I get the following error:
{noformat}
11:03:22,778 DEBUG [Camel (camel) thread #1 - JmsConsumer[queue1]] (MarkerIgnoringBase.java:72) - Failed delivery for (MessageId: queue_queue1_ID_xxxxxxxxx-1911-1359590595842-3_4_1_1_1 on ExchangeId: ID-xxxxxxxxx-1910-1359590595467-0-10). On delivery attempt: 0 caught: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Long with value Thu Jan 31 11:03:22 EST 2013 due java.lang.NumberFormatException: For input string: ""Thu Jan 31 11:03:22 EST 2013""{noformat}

This is due to a Date being converted to a String when sending over JMS.

Propose that the following line in Generic file be changed from:
{code}            if (getLastModified() > 0) {
                message.setHeader(Exchange.FILE_LAST_MODIFIED, new Date(getLastModified()));
            }{code}

To:{code}            if (getLastModified() > 0) {
                message.setHeader(Exchange.FILE_LAST_MODIFIED, getLastModified());
            }{code}

As FileOperations can use it:
{code}    private void keepLastModified(Exchange exchange, File file) {
        if (endpoint.isKeepLastModified()) {
            Long last;
            Date date = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Date.class);
            if (date != null) {
                last = date.getTime();
            } else {
                // fallback and try a long
                last = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class);
            }
            if (last != null) {
                boolean result = file.setLastModified(last);
                if (LOG.isTraceEnabled()) {
                    LOG.trace(""Keeping last modified timestamp: {} on file: {} with result: {}"", new Object[]{last, file, result});
                }
            }
        }
    }{code}


Sample route:
{code:xml}
<route>
	<from uri=""file:/tmp/input/""/>
	<to uri=""activemq:queue:test""/>
</route>
<route>
	<from uri=""activemq:queue:test""/>
	<to uri=""file:/tmp/output/?keepLastModified=true""/>
</route>
{code}",,davsclaus,wattsc3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,310543,,,Fri Feb 01 14:51:09 UTC 2013,,,,,,,,,,,"0|i1hldj:",310888,,,,,,,,,,,,,,,,,,,,"01/Feb/13 14:50;davsclaus;Chris, this is a good idea, to keep the modification date as just the long which we get from the java file API.;;;","01/Feb/13 14:51;davsclaus;Though its not human readable as its just a long number :);;;",,,,,,,,,,,,,,,,,,,,,,
Camel-Jetty Spring example has broken Spring XML syntax,CAMEL-6024,12629915,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,mikaelhg,mikaelhg,30/Jan/13 15:10,30/Jan/13 21:06,14/Jul/23 05:49,30/Jan/13 21:06,2.10.3,,,,,,,,2.10.4,2.11.0,,,website,,,,,,0,,,,,,,"http://camel.apache.org/jetty.html

incorrect:
{code}
    <bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
        <property name=""socketConnectorProperties"">
            <properties>
                <property name=""acceptors"" value=""4""/>
                <property name=""maxIdleTime"" value=""300000""/>
            </properties>
        </property>
    </bean>
{code}
 
correct:
{code}
    <bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
      <property name=""socketConnectorProperties"">
        <map>
          <entry key=""acceptors"" value=""4""/>
          <entry key=""maxIdleTime"" value=""300000""/>
        </map>
      </property>
    </bean>
{code}
",,mikaelhg,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,310411,,,Wed Jan 30 21:06:48 UTC 2013,,,,,,,Patch Available,,,,"0|i1hkk7:",310756,,,,,,,,,,,,,,,,,,,,"30/Jan/13 21:06;muellerc;Thanks for reporting Mikael! It's now fixed (should be online in a few hours).;;;",,,,,,,,,,,,,,,,,,,,,,,
"camel-blueprint - Using blueprint-cm with .cfg files, which triggers bundle reload on .cfg file change, does not startup Camel as expected",CAMEL-6023,12629867,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jan/13 10:14,30/Jan/13 13:24,14/Jul/23 05:49,30/Jan/13 13:24,2.10.3,,,,,,,,2.10.4,2.11.0,,,karaf,,,,,,0,,,,,,,"See ARIES-1010

If you do a restart of a Camel application from the shell
restart 123

Then it works fine. But if you change a .cfg file then it wont startup Camel again.

The workaround is to stop the bundle first, change the .cfg file, and then start the bundle again.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,310363,,,2013-01-30 10:14:06.0,,,,,,,,,,,"0|i1hk9j:",310708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Transformer using inconsistent sources,CAMEL-6020,12629838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Jan/13 05:21,01/Feb/13 15:13,14/Jul/23 05:49,01/Feb/13 15:13,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"
I have a simple xml transformer:
{code}
<camel:camelContext id=""camelContext"" trace=""true"">

<camel:route id=""testRoute"">
<camel:from uri=""direct:testEndpoint"" />
<camel:process ref=""testProcessor"" />
<camel:marshal>
<camel:jaxb fragment=""true"" partClass=""test.Talk"" contextPath=""test""
partNamespace=""{http://test/}talk""/>
</camel:marshal>

<camel:to uri=""log:TEST-AFTER-MARSHALL"" />

<camel:to uri=""xslt:xslt/transform.xsl?transformerFactory=saxonTransformerFactory"" />

<camel:to uri=""log:TEST-AFTER-XSL"" />

</camel:route>

</camel:camelContext>
{code}

The xslt is very simple then:
{code}
<xsl:template match=""/"">
<afterXlst>
<xsl:value-of select=""test:talk/text"" />
</afterXlst>
</xsl:template>
{code}
With this example run multiple times (3 in the cases below), I'm seeing inconsistent inconsistent transformers being used with 2.10.3 and also 2.11 SNAPSHOT:
{code}
wildflower:test-bundle $ tail -f output.log | grep ""XsltBuilder TRACE Using""
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,310334,,,Fri Feb 01 15:13:14 UTC 2013,,,,,,,,,,,"0|i1hk33:",310679,,,,,,,,,,,,,,,,,,,,"30/Jan/13 05:39;njiang;The issue is caused by there are bunches of type converter which can turn a byte into a Source. The result could be StreamSource or StaxSource or ByteSource.
Because these converters are loaded in different sequence when camel is loading the converter, so we hit this kind of issue.

To fix the issue, I just changed the type converter calling sequence to make sure we get the exact Source object we want first.;;;","01/Feb/13 15:13;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-ftp module loses starting characters of path for root dir logins,CAMEL-6018,12629684,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jeffmaher,jeffmaher,29/Jan/13 13:30,23/Aug/13 08:02,14/Jul/23 05:49,23/Aug/13 08:02,2.10.2,2.11.1,,,,,,,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,0,,,,,,,"When a SFTP Camel route is established and the user's home directory is the root dir (i.e. when the user logs in, they are put at / because it is their home), the first character in the path is accidentally removed . While this is okay for users that login to a '~' based path (or have '~' as their home), for the root, it means that the '/' is prematurely removed.

This problem happens in SftpOperations. Originally found in 2.10.2 (attached: SftpOperations.java, includes fix). Patch file (SftpOperations.java.patch) is for 2.11-SNAPSHOT (the current trunk).","Camel app ran on: Java 6 u 38
FTP Server: UNIX-based",davsclaus,jeffmaher,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jan/13 13:33;jeffmaher;SftpOperations.java;https://issues.apache.org/jira/secure/attachment/12566950/SftpOperations.java","29/Jan/13 15:28;jeffmaher;SftpOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12566988/SftpOperations.java.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,310180,,,Fri Aug 23 08:02:13 UTC 2013,,,,,,,Patch Available,,,,"0|i1hj4v:",310525,,,,,,,,,,,,,,,,,,,,"29/Jan/13 13:31;jeffmaher;Attaching patched file: See lines 400 or diff against 2.10.2 tag.;;;","29/Jan/13 13:32;jeffmaher;I'm checking out the current trunk (I think it's 2.11-SNAPSHOT) right now and will confirm if the patched file is still relevant.;;;","29/Jan/13 15:28;jeffmaher;Attaching the patch for 2.11-SNAPSHOT (Attached: SftopOperations.java.patch is for 2.11-SNAPSHOT) (SftpOperations.java is the 2.10.2 patched file);;;","30/Jan/13 03:30;njiang;Hi Jeff,

Thanks for  the patch, do you mind to add an unit test for it to avoid the regression issue.;;;","31/Jan/13 13:16;jeffmaher;Hi Willem - I tried to create a unit test, but a few things prevent this from being easy:

# The method under test does not return a value ({{public void changeCurrentDirectory(String path)}})
** Even though the method under test doesn't return a value, {{getCurrentDirectory()}} can be used
# The method under test requires a lot of external infrastructure to setup. Mocking all the dependencies is a significant effort (otherwise, I suppose it's not a *unit* test)
# I noticed that most of the test cases are not true unit test (integration tests) by inheriting from {{SftpServerTestSupport}}. I tried this approach too, but to perform the test, the {{sshd}} object in {{SftpServerTestSupport}} needs to be able to use the root dir ('/') as the home directory. I suspect that this would be an access violation on whatever continuous integration environment is used (i.e. I doubt root access is available on Apache's CI machine -- it'd be scary if it was)

Could you advise, particularly on point #3 (as I think the first two can be worked around easily by using the getter mentioned and making it an integration test)?;;;","23/Aug/13 08:02;davsclaus;Should be fixed in recent code. Try upcoming releases.;;;",,,,,,,,,,,,,,,,,,
Validator component fails on XSD with indirect relative import,CAMEL-6013,12629203,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,petercgrant,petercgrant,25/Jan/13 01:42,01/Jun/13 19:18,14/Jul/23 05:49,01/Feb/13 15:14,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,"When using the validator component with an XSD that references a second XSD on a different path, and where the second XSD references a third XSD using a relative path, the path of the third XSD is resolved relative to the first schema rather than relative to the second.  This looks similar to [CAMEL-5321], but the schemas that trigger this issue necessarily involve an additional layer of includes.

I will include a test case that I rolled into the tarball from [CAMEL-5321].",,davsclaus,njiang,petercgrant,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6412,,,,,,,,,"25/Jan/13 01:47;petercgrant;camel-validator-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12566434/camel-validator-test.tar.gz",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,309047,,,Fri Feb 01 15:14:37 UTC 2013,,,,,,,,,,,"0|i1dymn:",289707,,,,,,,,,,,,,,,,,,,,"25/Jan/13 01:47;petercgrant;Test case (broken) that triggers the issue.;;;","25/Jan/13 03:53;njiang;The test case is very handy, I managed to fix the issue by letting the DefaultLSResourceResolver checking the states of relative path.
I will commit the quick fix shortly.
;;;","29/Jan/13 19:13;davsclaus;Willem, are you working on getting this backported to 2.10 branch?;;;","01/Feb/13 15:14;njiang;Applied the patch into trunk and camel-2.10.x branches.;;;",,,,,,,,,,,,,,,,,,,,
multicase shareUnitOfWork just throw one exception in the first time,CAMEL-6005,12629008,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Jan/13 07:14,24/Jan/13 20:53,14/Jul/23 05:49,24/Jan/13 20:53,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"Here is the mail thread[1] for it.
[1]http://camel.465427.n5.nabble.com/Possible-bug-with-multicast-shareUnitOfWork-tp5726103.html",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,308626,,,2013-01-24 07:14:36.0,,,,,,,,,,,"0|i1cqtz:",282478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tokenize XML does not support self-closing XML tokens,CAMEL-6004,12628991,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,gheidorn,gheidorn,24/Jan/13 02:22,03/Jan/14 10:35,14/Jul/23 05:49,23/Jun/13 08:26,2.10.2,,,,,,,,2.10.6,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,Tokenize creates non-well-formed XML when handling self-closing XML tokens.  Tokenize should support parsing tokens that are either have a closing tag or are self-closing.,,ay,davsclaus,gheidorn,muellerc,njiang,subrata1106,,,,,,,,,,,,,,,,,,,,,,CAMEL-6940,,,CAMEL-6607,,,,,,"24/Jan/13 02:23;gheidorn;GenericTokenizeTest.java;https://issues.apache.org/jira/secure/attachment/12566239/GenericTokenizeTest.java","21/Jun/13 17:54;ay;camel-6004.patch;https://issues.apache.org/jira/secure/attachment/12589112/camel-6004.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,308609,,,Fri Jan 03 10:35:27 UTC 2014,,,,,,,,,,,"0|i1cqq7:",282461,,,,,,,,,,,,,,,,,,,,"24/Jan/13 02:23;gheidorn;JUnit that illustrates how tokenizeXML falls down when the tokens are self-closing.;;;","24/Jan/13 04:39;njiang;Hi,

I just checked the code of Tokenize, it only works after setting the startToken and endToken. So it is not strange that it doesn't support the self-closing XML. As it doesn't has the pair startToken and endToken.

If you want to make your route support the those XML at the same time, you make consider to use the xpath expression like this
{code}
 protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"").split().xpath(""//child"").to(""mock:result"");
            }
        };
    }
{code}

You will get the result like this in you two test case, as you can see the result is unified. 
{code}
<child anotherAttr="""" some_attr=""""/>
{code}

;;;","24/Jan/13 07:18;muellerc;Greg is using tokenizeXML instead of XPath. I guess because XPath load the entire XML in memory (this was the intention of creating the tokenizeXML). So, may this is not a solution for him...;;;","24/Jan/13 22:02;gheidorn;I swapped tokenizeXML for XPath and it worked well as expected.  Christian's memory concern is valid, however, in my case, it is an acceptable risk (I don't expect very large files).  I would, however, like to still see tokenizeXML operate on both tokens with closing tags and tokens that are self-closing.  I will think about how to approach a patch proposal that meets that requirement.  Willem, thanks for the reminder to xpath on split!;;;","30/May/13 12:07;muellerc;I added the attached test to the Camel test suite. I annotated the failing test with @Ignore until somebody fixed it. Thanks Greg for the test case!;;;","12/Jun/13 08:14;ay;Hi,
I have a question to the camel team.

I got distracted to this cute regex-based xml tokenizer and I made it work for both cases.

However, the original approach itself has several inherent limitation in parsing a tree structure, namely handling of the same named elements appearing at different depths or extracting namespace declarations at several ancestor depths (the current approach only allows the extraction of additional namespace declarations from one particular depth specified by the inheritNamespaceToken parameter). So, it works perfect for those cases where the input document is constrained so that the splitting elements do not appear at different depths in hierarchy and any additional namespace declarations needed in the split elements come from one ancestor depth. But it does not work for more general cases.

As long as the input document fits to the constraint, this regex-based approach is more efficient as it does not need to construct those xml artifacts that need to be serialized into a token. However, for other cases, it would be more practical to use a stax based tokenizer to build the valid namespace context and serialize the content into a token instead of purely relying on the regex based parsing.

I don't know how typical use cases look and whether we can stay with or at least keep the regex-based approach or move to a stax based approach.

regards, aki
;;;","21/Jun/13 17:54;ay;As commented in my previous reply, attached is a suggested fix that also works for empty elements.

It passes the existing tokenizing tests and a few other new tests that are included in the patch file.

I didn't directly change TokenXMLPairExpressionIterator but added its replacement TokenXMLExressionIterator and made ExpressionBuilder to use this new one instead. 

I was not sure if I should reuse TokenPairExpressionIterator by passing a dummy end pair tag and overwrite only the necessary methods, or not use it because the end-pairing logic could suggest an arbitrary start and end tag pairing which does not fit to xml tokenizing. I decided to the latter approach. We could add a neutral abstract class that has those commonly used methods and both can be extended from it. But in any case, you can see a regex-based approach to handle normal and empty xml elements.

I would appreciate if you can review it.
thanks.
regards, aki
;;;","23/Jun/13 08:25;davsclaus;Thanks Aki, for the patch. This is great.

The old class has been marked as @deprecated. ;;;","30/Dec/13 16:58;subrata1106;Hi,

I am using service mix 4.5.3. Is this fixed in this release? If not please let me know how to install the patch.

I am getting a similar issues where there are child nodes which are self closing and the tokenizer is creating malformed xml. I am hoping this will fix the issue I am getting also.

Thanks;;;","01/Jan/14 12:22;muellerc;Apache ServiceMix comes with Camel 2.10.7 [1]. This means this issue should be fixed in this version.

[1] http://servicemix.apache.org/downloads/servicemix-4.5.3;;;","02/Jan/14 12:01;subrata1106;Hi,

Actually service mix 4.5.3 does not resolve this issue fully. Please see the sample input and output below when we have self closing tag. There seems to be a problem still {color:red}if the first child element has self closing tag{color}. Note - this does not seems to be an issue if any other child node has self closing tag except the first one.
*Input XML*:
<?xml version=""1.0"" encoding=""UTF-8""?>
<orders>
    <order RECORDID=""1"">
        <name/>
        <description>asdasd</description>
        <price>7000</price>
        <remark>testing</remark>
    </order>
    <order RECORDID=""2"">
        <name/>
        <description>adasd</description>
        <price>7000</price>
        <remark>testing</remark>
    </order>
</orders>

*Camel XML*:
        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<route>
			<from uri=""file:camel/XMLInput""/>
			<split streaming=""true"">
				<tokenize token=""order"" xml=""true""/>
				<to uri=""file:camel/XMLOutput?fileName=RECORDID.xml""/>
			</split>
		</route>
	</camelContext>

*OUTPUT Generated*: (malformed XML)
<order RECORDID=""2"">
        <name/>;;;","03/Jan/14 03:32;ay;Hi subrata,
The issue which you are observing has been solved with CAMEL-6940.
Concretely, CAMEL-6004 did not handle some cases when child elements of the split target element are self-terminated and this particular issue was fixed in CAMEL-6940.

regards, aki;;;","03/Jan/14 10:35;subrata1106;Thanks Aki. The current service mix is using Version 2.10.7 of Camel. So I guess we need to wait for the next service mix release.;;;",,,,,,,,,,,
RestletComponent component is not removing added route from routers list although route is removed from Context.,CAMEL-5999,12628782,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,amit1000,amit1000,22/Jan/13 20:11,29/Jan/13 16:54,14/Jul/23 05:49,26/Jan/13 11:47,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-restlet,,,,,,0,,,,,,,"In RestletComponent class add entry to instance variable ""private final Map<String, MethodBasedRouter> routers = new HashMap<String, MethodBasedRouter>()"" map while invoking getMethodRouter method, but it never remove in disconnect method, also disconnect method has local variable with same name as instance variable ""routes"".

Camel Development Forums
=========================
http://camel.465427.n5.nabble.com/Camel-Restlet-2-10-3-RestletComponent-component-does-not-remove-added-route-form-routers-although-ro-td5726000.html





",,amit1000,davsclaus,Sergey.Semka,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,308260,,,Tue Jan 29 16:54:45 UTC 2013,,,,,,,,,,,"0|i1b1cn:",272517,,,,,,,,,,,,,,,,,,,,"23/Jan/13 07:39;davsclaus;Thanks for reporting.

Are you working on a patch for this?;;;","25/Jan/13 03:56;amit1000;After I made the following changes to RestletComonent, RestletRestartRouteTest does not pass.

I updated RestletComonent disconnect method as below. Look like server.stop() method is not working properly. I need your help to resolve this issue.


public void disconnect(RestletConsumer consumer) throws Exception {
        RestletEndpoint endpoint = consumer.getEndpoint();

        List<MethodBasedRouter> methodBasedRouters = new ArrayList<MethodBasedRouter>();

        String pattern = decodePattern(endpoint.getUriPattern());
        if (pattern != null && !pattern.isEmpty()) {
            methodBasedRouters.add(getMethodRouter(pattern));
        }

        if (endpoint.getRestletUriPatterns() != null) {
            for (String uriPattern : endpoint.getRestletUriPatterns()) {	
                methodBasedRouters.add(getMethodRouter(uriPattern));
              
            }
        } 
  
        for (MethodBasedRouter methodBasedRouter : methodBasedRouters) {
            if (endpoint.getRestletMethods() != null) {
                Method[] methods = endpoint.getRestletMethods();
                for (Method method : methods) {
                    methodBasedRouter.removeRoute(method);
                }
            } else {
                methodBasedRouter.removeRoute(endpoint.getRestletMethod());
            }

           
           //remove route form routers Map 
           routers.remove(methodBasedRouter.getUriPattern());
                     
           String key = buildKey(endpoint);    
           Server server = servers.get(key);
           component.getServers().remove(server);
           server.stop();
           servers.remove(key);
           if (methodBasedRouter.hasBeenAttached()) {
               component.getDefaultHost().detach(consumer.getRestlet());
              
           }
          
             
            System.out.println(""After remove""+ routers.toString());
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Detached restlet uriPattern: {} method: {}"", methodBasedRouter.getUriPattern(),
                          endpoint.getRestletMethod());
            }
        }
        
        
    }
;;;","26/Jan/13 11:47;davsclaus;I took a look and found a way to better deattach restlet routers when they are no longer in use.;;;","29/Jan/13 16:46;amit1000;Thanks for your Help! I tested the changes and it works as expected.;;;","29/Jan/13 16:54;davsclaus;Thanks for taking the time to test the changes.;;;",,,,,,,,,,,,,,,,,,,
CamelJob implementation rely on some inconsistent endpoints LRU cache - Camel endpoints may not be called on quartz fire after some days of uptime,CAMEL-5994,12628715,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,alexiskinsella,alexiskinsella,22/Jan/13 14:17,25/Jan/13 08:43,14/Jul/23 05:49,25/Jan/13 08:43,2.10.3,2.9.5,,,,,,,2.10.4,2.11.0,2.9.6,,camel-quartz,,,,,,1,,,,,,,"CamelJobs rely on some endpoints LRU cache from camel context. If i'm not wrong, since LRU Cache relies on SoftReferences, Garbage Collector can decide to evict some entries and especially QuartzEndpoints.

It happens that sometimes endpoints evicted from LRU Caches are QuartzEndpoints. Since QuartzEnpoints are searched from CamelJob in LRU cache, they are not reachable anymore.

The side effect, is that CamelJob isntance initializes a new QuartzEndpoint, but loadbalancer is not initialized since it is initialized from QuartzConsumer.

The result is that quartz triggers jobs that instanciate Quartz endpoints with unintialized load balancers which are unable to call processor from the routes associated.

I have joined a fix that rely on the search of QuartzEndpoints from initalized routes of Camel context.

Fundamentally, the search of endpoints should not rely on endpoints LRU cache. It is a broken design.

Hope it helps.

By the way, there are other issues related to QuartzEndpoint load balancer initalization: If quartz starts before startup of Camel routes you will have the same issue: Correctly initialized QuartzEndpoints are not in LRU cache since Camel has not started routes (and so endpoints and consumers). Quartz will trigger job, and camel job will search for QuartzEndpoint and put it in LRUCache with uninitialized load balancer.
",Quartz is in deployed in cluster mode.,alexiskinsella,davsclaus,denis.delangle,,,,,,,,,,,,,,,,,,CAMEL-5993,,,,,,,,,,,,,,,,"22/Jan/13 14:18;alexiskinsella;CamelJob.java;https://issues.apache.org/jira/secure/attachment/12565946/CamelJob.java","23/Jan/13 14:01;denis.delangle;QuartzCronRouteWithSmallCacheTest.java;https://issues.apache.org/jira/secure/attachment/12566126/QuartzCronRouteWithSmallCacheTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,307242,,,Fri Jan 25 08:43:16 UTC 2013,,,,,,,,,,,"0|i1akp3:",269819,,,,,,,,,,,,,,,,,,,,"23/Jan/13 13:59;denis.delangle;I made a pull request based on this patch and with a testcase https://github.com/apache/camel/pull/7. This patch solved my problem (described in CAMEL-5993);;;","23/Jan/13 14:01;denis.delangle;JUnit test that reproduce the bug and that is fixed by the correction in CamelJob;;;","25/Jan/13 08:43;davsclaus;Thank guys for help with fixing this issue;;;",,,,,,,,,,,,,,,,,,,,,
"Typo on the ""control bus"" site",CAMEL-5992,12628668,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,jhm,jhm,22/Jan/13 07:26,22/Jan/13 07:32,14/Jul/23 05:49,22/Jan/13 07:32,,,,,,,,,2.11.0,,,,website,,,,,,0,,,,,,,"Page http://camel.apache.org/controlbus.html
Section ""Using Simple language""

The ""l"" is missing:
""Notice: its easier to use the route command to contro lifecycle of routes.""

s/to contro lifecycle/to control lifecycle/",,davsclaus,jhm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,307193,,,Tue Jan 22 07:32:50 UTC 2013,,,,,,,,,,,"0|i1ahtr:",269354,,,,,,,,,,,,,,,,,,,,"22/Jan/13 07:32;davsclaus;Thanks Jan for reporting.
I am fixing the typo.

If you want to help with the docs, then take a look at
http://camel.apache.org/how-do-i-edit-the-website.html

And as well how to contribute in general such as code patches etc
http://camel.apache.org/contributing.html

;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel SFTP endpoint throws exception when running camel route on Windows OS,CAMEL-5989,12628577,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jluo,jluo,21/Jan/13 16:36,08/Feb/13 12:45,14/Jul/23 05:49,24/Jan/13 16:53,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-ftp,,,,,,0,,,,,,,"I have a rather simple camel route involving sftp endpoints:
from(""sftp://jluo@192.168.0.196/outbox?password=******&binary=true&autoCreate=true&move=.done"").to(""sftp://jluo@192.168.0.196/inbox?password=******&autoCreate=true&binary=true"");

The camel sftp consumer and producer endpoints are pointing to my Mac OSX host (192.168.0.196). When I ran the camel route on Windows machine (here I was using Windows 7 Pro 64-bit OS) to try to use sftp to consume and produce files from/to Mac OSX machine, I got following error:
 15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_NEWKEYS received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_REQUEST sent
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_ACCEPT received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: publickey,keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: publickey
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: keyboard-interactive
15:47:00,003 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentication succeeded (keyboard-interactive).
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Channel isn't connected, trying to recreate and connect.
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Connecting use connectTimeout: 10000 ...
15:47:00,034 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | Connected to sftp://jluo@192.168.0.196:22
15:47:00,034 | INFO  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Connected and logged in to: sftp://jluo@192.168.0.196:22
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | doPollDirectory from absolutePath: outbox, dirName: null
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(outbox)
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Polling directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | listFiles(.)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Found 3 in directory: outbox
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(/Users/jluo)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: \
15:47:00,050 | WARN  | 168.0.196/outbox | eFilePollingConsumerPollStrategy |  -  -  | Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://jluo@192.168.0.196:22
15:47:00,050 | DEBUG | 168.0.196/outbox | SftpConsumer                     |  -  -  | Disconnecting from: sftp://jluo@192.168.0.196:22
15:47:00,050 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Disconnecting from 192.168.0.196 port 22
15:47:00,066 | INFO  | 68.0.196 session | SftpOperations                   |  -  -  | JSCH -> Caught an exception, leaving main loop due to socket closed
15:47:00,066 | WARN  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Consumer Consumer[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******] failed polling endpoint: Endpoint[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******]. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: \]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: \
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:434)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:407)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:52)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:107)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92)[camel-core-2.10.3.jar:2.10.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_33]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_33]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_33]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_33]


I tried to run the same camel route on my Mac OSX host (so it was from Mac OSX -> Mac OSX) and everything worked fine. In another word, running the camel route on an Unix like OS, it worked fine. It looks like a bug was introduced from 2.9.x to 2.10 that relates to Windows since I also tested on Camel 2.9.2 version and when I run the same route on Windows machine with camel 2.9.2, it worked fine though. 
",,ay,davsclaus,jluo,,,,,,,,,,,,,,,CAMEL-6056,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,306666,,,Thu Jan 24 16:52:49 UTC 2013,,,,,,,,,,,"0|i19z7b:",266337,,,,,,,,,,,,,,,,,,,,"21/Jan/13 16:41;jluo;It looks like very similar as CAMEL-5970 and they might be the same issue though.;;;","22/Jan/13 12:56;davsclaus;CAMEL-5564 causes this regression.;;;","24/Jan/13 00:08;ay;Hi Claus,
this issue seems to be unrelated to CAMEL-5574, as it is occurring with no-stepwise mode and when trying to go back to root ""/"" (but incorrectly to ""\""). Whereas CAMEL-5574 only changed the stepwise traversal behavior in 2.10.2. I suspect, if Joe uses the stepwise mode (and likely also with the non-stepwise mode), it will work with 2.10.2 but unfortunately not with 2.10.3 because of rev 1410217 in trunk that changed FileUtil.java. This change interferes with the directory path comparison in SFTPOperations's. And this mismatch was fixed with rev 1424437 in trunk and the current 2.10.4-SNAPSHOT should contains the fix.

Hi Joe,
I may be wrong with my assumption, but can you try your scenario with 2.10.4-SNAPSHOT to see if the problem is resolved? (I think 2.10.2 will also work for you). 

regards, aki
;;;","24/Jan/13 13:48;jluo;Hi, Aki

Yeah, you are right. I tried 2.10.2 and 2.10.4-SNAPSHOT, both versions worked fine on Windows OS. As well as both ""stepwise"" modes ""true|false"" worked fine too on Windows now.

Thanks for the help!

Cheers,
/Joe
;;;","24/Jan/13 16:52;davsclaus;Thanks Aki for digging into this, much appreciated.

;;;",,,,,,,,,,,,,,,,,,,
Using annotations DSL in beans may cause async callback to be called twice,CAMEL-5987,12628521,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Jan/13 08:09,21/Jan/13 10:00,14/Jul/23 05:49,21/Jan/13 10:00,2.10.0,2.9.0,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,"The bean processor and bean invocation logic may in cases when the EIP annotations is used on beans, cause the callback to be called twice.

Noticed this problem during investigation of See CAMEL-5905
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,306448,,,2013-01-21 08:09:45.0,,,,,,,,,,,"0|i19uw7:",265639,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enrich EIP may cause async callback done twice,CAMEL-5981,12628416,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/13 15:42,17/Jul/14 14:35,14/Jul/23 05:49,19/Jan/13 16:30,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,"The Enricher may call callback.done(false) two times if there was an exception during enrichment.

Noticed this problem during investigation of See CAMEL-5905",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7609,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,305570,,,2013-01-19 15:42:06.0,,,,,,,,,,,"0|i18fe7:",257296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jmx - Does not work in OSGi if XML output,CAMEL-5975,12627805,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Jan/13 10:43,16/Jan/13 10:54,14/Jul/23 05:49,16/Jan/13 10:54,2.10.0,2.9.0,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jmx,osgi,,,,,0,,,,,,,"For example installing camel-example-jmx in Apache Karaf you get this exception

{code}
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.component.jmx.jaxb"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:186)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:310)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:412)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:375)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:279)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.getMarshaller(NotificationXmlFormatter.java:158)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.format(NotificationXmlFormatter.java:130)
	... 48 more
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304593,,,2013-01-16 10:43:41.0,,,,,,,,,,,"0|i17nkn:",252788,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property placeholder with both blueprint and jasypt seems not working,CAMEL-5973,12627684,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Jan/13 16:24,15/Jan/13 17:07,14/Jul/23 05:49,15/Jan/13 17:07,,,,,,,,,2.10.4,2.11.0,,,camel-blueprint,camel-core,osgi,,,,0,,,,,,,"Looking into an issue with property placeholder
{code}
    <propertyPlaceholder id=""properties"" location=""blueprint:myblueprint.placeholder"" propertiesParserRef=""jasypt""/>
{code}

",,davidkarlsen@gmail.com,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304471,,,2013-01-15 16:24:35.0,,,,,,,,,,,"0|i17mqf:",252652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HdfsOutputStream is not closing,CAMEL-5971,12627641,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jluo,jluo,15/Jan/13 13:13,01/Feb/13 11:47,14/Jul/23 05:49,01/Feb/13 11:47,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-hdfs,,,,,,0,,,,,,,"I have a simple camel route that takes file from a camel-file consumer endpoint and sends to a camel-hdfs producer endpoint:

<from uri=""file:/local/workspace/inbox?delete=true""/>
<to uri=""hdfs://localhost:9000/local/workspace/outbox/file1""/>

However, my Hadoop server only creates a zero length file ""file1.opened"" unless I stop camel route or a splitting condition is met with a ""splitStratedy"" option added to URI. In above cases, a file called ""file1"" is created with proper contents and the ""file1.opened"" is disappeared.  

It looks like that close() function of HdfsOutputStream is never called unless the camel route/context is stopping or we are splitting the file by looking at source code.",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304427,,,Wed Jan 30 07:50:20 UTC 2013,,,,,,,,,,,"0|i17mg7:",252606,,,,,,,,,,,,,,,,,,,,"15/Jan/13 15:00;njiang;It's not a effective to write the hdfs is we close the stream every time.
Maybe we can consider to add a option to make sure the camel-hdfs producer to close the stream once the producer is finished the processing.;;;","16/Jan/13 09:43;davsclaus;There is some idle task in the hdfs producer. I would assume that ought to close the stream if the producer is not busy.

Though camel-hdfs is a bit odd. I would have liked it was implemented more like camel-file etc. In fact we have another JIRA ticket about that.;;;","17/Jan/13 07:04;njiang;Yeah, from the usage of the user, it looks like we need to change the file name dynamically. 
I think most people uses HDFS to store the large size file, so we didn't hit this kind of request before.
;;;","22/Jan/13 08:21;davsclaus;Why is closing a stream not efficient? 

Is the idea to keep the stream open just in case there is a lot of writes to HDFS?
But even if the stream is open, the data must be flushed at some point? Or does HDFS only let ""other parties"" see the file when the stream is closed.
So you can write to the stream 1000 times and only when you close its visibile for other parties?

I dont see a point of keeping the stream open, when the end user has no way of closing it after usage.
Either we should
- always close the stream after writing in the producer
- use some background task to close the stream if idle for more than X
- allow people to explicit close the stream in some way
- add new option: closeStream=true|false which people can turn off|on to have old behavior etc

;;;","30/Jan/13 07:50;njiang;It's not a common practice that we close the HDFS OutputStream and try to append the data later.
It could more easy to make the data is consistent if we just make sure the file is visible for the other parties when the stream is closed.
Here is a page[1] to explain this.
I think when we provide the option of closeStream, I don't think we need to check the append option at the same time.

[1]http://blog.cloudera.com/blog/2009/07/file-appends-in-hdfs/  ;;;",,,,,,,,,,,,,,,,,,,
Upon connection cd fails,CAMEL-5970,12627595,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yaytul,yaytul,15/Jan/13 05:29,05/Feb/13 19:16,14/Jul/23 05:49,25/Jan/13 08:44,2.10.3,2.9.5,,,,,,,2.10.4,2.9.6,,,camel-ftp,,,,,,0,,,,,,,"cd fails on successful connection with 2.10.3 or 2.9.5

sftp endpoint [sftp://sftp-user@127.0.0.1/incoming?disconnect=true&privateKeyFile=sftp-user.ppk&privateKeyFilePassphrase=******]
 
Below log excerpt is with 2.8.0, cd works and sftp cd command successfully goes into '/home/sftp-user' directory

{quote} 
20130114 18:42:52,956 INFO  [Camel (camel-1) thread #0 - sftp://user@host/outgoing] RemoteFileConsumer[133]: Connected and logged in to: sftp://user@host:22
20130114 18:42:52,956 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[339]: getCurrentDirectory()
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[68]: doPollDirectory from absolutePath: outgoing, dirName: null
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(outgoing)
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[81]: Polling directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[415]: listFiles(.)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[94]: Found 2 in directory: outgoing
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(/home/sftp-user)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: /
20130114 18:42:52,988 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: home
20130114 18:42:52,994 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: sftp-user
20130114 18:42:53,000 DEBUG [Camel (camel-1) thread #0 - sftp://user@host/outgoing] GenericFileConsumer[84]: Took 0.044 seconds to poll: outgoing
{quote}

Same route fails with 2.95. or 2.10.3 cd command fails.

{quote}
20130114 19:15:53,530 INFO  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[193]: Connected and logged in to: Endpoint[sftp://user@host/incoming?disconnect=true&knownHostsFile=env%2FunitTest%2Fknown_hosts&privateKeyFile=env%2FunitTest%2Fkeys%2Fsftp-user.ppk&privateKeyFilePassphrase=******&separator=Auto]
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[305]: buildDirectory(incoming,false)
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[381]: changeCurrentDirectory(/home/sftp-user)
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: \
20130114 19:15:53,749 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: home
20130114 19:15:53,796 WARN  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[71]: Writing file failed with: Cannot change directory to: home
{quote}

Looks like separator is bad but I tried all 3 options (Windows,Unix,Auto)... none worked. ",,davsclaus,pant_deepak,yaytul,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jan/13 06:14;yaytul;camel_test.log;https://issues.apache.org/jira/secure/attachment/12565083/camel_test.log",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304379,,,Tue Feb 05 19:16:38 UTC 2013,,,,,,,,,,,"0|i17m4v:",252555,,,,,,,,,,,,,,,,,,,,"16/Jan/13 06:14;yaytul;Complete test log file (some names are obfuscated);;;","22/Jan/13 12:56;davsclaus;CAMEL-5564 caused this regression.;;;","22/Jan/13 12:57;davsclaus;If you use Camel 2.9.3 or older then it ought to work.;;;","25/Jan/13 08:44;davsclaus;Should be fixed in upcoming releases.;;;","04/Feb/13 19:26;yaytul;Thanks for taking care of this so quickly.;;;","05/Feb/13 19:16;pant_deepak;Can you please tell me if this could happen in Apache Camel 2.8.4 or 2.8.5 bundled with Apache Service Mix 4.4.1 and 4.4.2 respectively. My routes work most of the times and then once every few days I would see following information logged in the log files.

org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: /home/msftpusr
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:423)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:388)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.buildDirectory(SftpOperations.java:335)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:243)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:156)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:51)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:80)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:353)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:176)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:137)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:138)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_31]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_31]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_31]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_31]
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:421)[156:org.apache.camel.camel-ftp:2.8.4]
	... 60 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)[:1.6.0_31]
	at java.io.PipedInputStream.read(PipedInputStream.java:361)[:1.6.0_31]
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	... 61 more
;;;",,,,,,,,,,,,,,,,,,
ClassNotFoundException: weblogic.jndi.WLInitialContextFactory when starting the route via Karaf start-route(camel:route-start) command.,CAMEL-5968,12627405,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,kckcs,kckcs,14/Jan/13 09:55,27/Feb/13 14:06,14/Jul/23 05:49,27/Feb/13 14:06,2.9.2,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,camel-jms,karaf,,,,0,,,,,,,"We have a simple camel route definied in Java DSL:

from(""wmq:queue:ESB_TEST_IN"").routeId(""IN"").
autoStartup(true).
log(""${body}"");

This route receives JMS messages from a WebLogicJMS queue with name ESB_TEST_IN and logs the body to the log file.
The route works fine when autoStartup is set to true. But when autoStartup is set to false then the creation of the WebLogic InitialContext failed because of an ClassNotFoundException regarding weblogic.jndi.WLInitialContextFactory and the following message is written to the karaf log file:

2012-12-07 12:03:21,502 WARN : DefaultJmsMessageListenerContainer | Setup of JMS message listener invoker failed for destination 'ESB_TEST_IN' - trying to recover. Cause: Destination [ESB_TEST_IN] not found in JNDI; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory] [org.springframework.jms.listener.DefaultMessageListenerContainer | mer[ESB_TEST_IN] | org.springframework.jms.3.0.7.RELEASE(id=135)]


This issue's related to https://jira.talendforge.org/browse/TESB-7884",Camel-core(2.9.2) in Karaf(2.2.6),cschneider,kckcs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Jan/13 14:05;cschneider;CAMEL-5968-1.patch;https://issues.apache.org/jira/secure/attachment/12565786/CAMEL-5968-1.patch","21/Jan/13 14:54;cschneider;CAMEL-5968-2.patch;https://issues.apache.org/jira/secure/attachment/12565791/CAMEL-5968-2.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304189,,,Wed Feb 27 14:06:55 UTC 2013,,,,,,,,,,,"0|i17jzz:",252209,,,,,,,,,,,,,,,,,,,,"14/Jan/13 17:26;cschneider;I used Weblogic to access ejbs in a POC some time ago. There we had to use the dynamic import feature for the weblogic jars to make it work. So that may be something to try here.;;;","15/Jan/13 09:05;kckcs;Can you please elaborate on the dynamic import feature usage. Currently the project includes maven-bundle-plugin with configuration->instructions set to 

<Import-Package>*, weblogic.jndi</Import-Package>
<DynamicImport-Package>*</DynamicImport-Package>;;;","15/Jan/13 09:27;cschneider;Hi Krishnan, your setup look fine. You probably do not even need the Dynamic-Import. I overlooked that you use the karaf command to start the route. I guess the problem is that a different classloader is used when starting the route with the karaf command.;;;","15/Jan/13 10:27;cschneider;I just looked into the camel karaf commands code but found no classloader stuff there. Can you get me a weblogic jms Installation? Then I will try to debug this.
;;;","15/Jan/13 11:37;kckcs;Hi Christian,

I have emailed you the weblogic installation info. 

Thanks;;;","18/Jan/13 08:59;cschneider;I tested with the example provided in the TESB issue (unfortunately private). 
When I set the route to autotstart it works. When I start it by hand I get this error:

- retrying in 5000 ms. Cause: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory]

I did a second setup with a second route that feeds messages into the queue and is auto started. When I then start the main route by hand I get a different exception.
On first call or route-start I get the exception on second call no exception happens but it does not work anyway.

2013-01-18 09:52:12,497 | INFO  | l Console Thread | Console                          | 13 - org.apache.karaf.shell.console - 2.2.10 | Exception caught while executing command
java.lang.AssertionError: Class does not implement remote interface
	at weblogic.utils.Debug.assertion(Debug.java:67)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:128)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:85)
	at weblogic.rmi.internal.StubGenerator.hotCodeGenClass(StubGenerator.java:782)
	at weblogic.rmi.internal.StubGenerator.getStubClass(StubGenerator.java:766)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:793)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:786)
	at weblogic.rmi.extensions.StubFactory.getStub(StubFactory.java:74)
	at weblogic.rmi.extensions.server.ServerHelper.exportObject(ServerHelper.java:227)
	at weblogic.rmi.internal.wls.CEReferenceHelperImpl.exportObject(CEReferenceHelperImpl.java:20)
	at weblogic.rmi.extensions.PortableRemoteObject.exportObject(PortableRemoteObject.java:34)
	at weblogic.messaging.dispatcher.DispatcherImpl.export(DispatcherImpl.java:85)
	at weblogic.messaging.dispatcher.DispatcherManager.export(DispatcherManager.java:74)
	at weblogic.jms.dispatcher.JMSDispatcherManager.exportLocalDispatcher(JMSDispatcherManager.java:229)
	at weblogic.jms.client.JMSConnectionFactory.setupJMSConnection(JMSConnectionFactory.java:214)
	at weblogic.jms.client.JMSConnectionFactory.createConnectionInternal(JMSConnectionFactory.java:285)
	at weblogic.jms.client.JMSConnectionFactory.createConnection(JMSConnectionFactory.java:191)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)
	at $Proxy72.createConnection(Unknown Source)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:371)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.establishSharedConnection(DefaultMessageListenerContainer.java:749)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.doStart(AbstractJmsListeningContainer.java:278)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.start(AbstractJmsListeningContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.start(DefaultMessageListenerContainer.java:555)
	at org.apache.camel.component.jms.JmsConsumer.startListenerContainer(JmsConsumer.java:85)
	at org.apache.camel.component.jms.JmsConsumer.prepareAndStartListenerContainer(JmsConsumer.java:150)
	at org.apache.camel.component.jms.JmsConsumer.doStart(JmsConsumer.java:134)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1723)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2014)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1950)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1878)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1891)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1773)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:733)
	at org.apache.camel.karaf.commands.RouteStart.doExecute(RouteStart.java:54)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[13:org.apache.karaf.shell.console:2.2.10]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_37]
2013-01-18 09:52:37,813 | INFO  | l Console Thread | OsgiSpringCamelContext           | 65 - org.apache.camel.camel-core - 2.10.0 | Route: IN started and consuming from: Endpoint[wmq://queue:QueueBJNDI]
;;;","18/Jan/13 09:14;kckcs;We'd then tried to load the classes(connectionfactory,desitinationresolver) invoking within the route's config method to resolve ""Cause: JndiObjectTargetSource failed..""

private void initResolver() {
try { ConnectionFactory cf = (ConnectionFactory) getContext().getRegistry().lookup(""jndiFactoryBean""); Connection con = cf.createConnection(); Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE); DestinationResolver resolver = (DestinationResolver) getContext().getRegistry().lookup(""jndiDestinationResolver""); resolver.resolveDestinationName(session, ""QueueBJNDI"", false); session.close(); con.close(); } catch (JMSException e) { e.printStackTrace(); }
}

But this workaround is possible only when the server  <property name=""cache"" value=""true"" /> cache's enabled. Also when the server disconnects and reconnects (may be a shutdown or network issue), route doesn't work.;;;","18/Jan/13 17:16;cschneider;I can confirm now that the problem should be the thread context classloader. When setting this to an invalid classloader I am able to reproduce the problem even outside OSGi. So the solution should be to set the thread context classloader to the classloader of the user bundle before executing the route start in the camel command.;;;","21/Jan/13 12:06;cschneider;I have developed a patch to the camel commands that solves this problem. Will fine tune it a bit and then add to this issue.;;;","21/Jan/13 14:05;cschneider;Add a thread context classloader with the bundle classloader in the start command.

The patch is a little larger as I needed to change other methods in CamelController to retrieve the BundleContext.

I also changed the pom to enable deployment with camel 2.9.2 and karaf 2.2.6. These changes would not go into trunk.;;;","21/Jan/13 14:54;cschneider;Switched to camelContext.getApplicationContextClassLoader() to get hold of the bundle classloader like proposed by Claus. Added the context classloader to stop and resume. 
;;;","21/Jan/13 16:00;cschneider;http://svn.apache.org/viewvc?view=revision&revision=1436431
http://svn.apache.org/viewvc?view=revision&revision=1436432
;;;","21/Jan/13 16:27;cschneider;backported to 2.9.x:
http://svn.apache.org/viewvc?view=revision&revision=1436456;;;","27/Feb/13 14:06;cschneider;Found that I forgot part of the merge for 2.10.4. I fixed the issue on the 2.10.x branch and marked the issue as solved for 2.10.5.
;;;",,,,,,,,,,
Camel feature file doesn't validate,CAMEL-5965,12627344,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,muellerc,muellerc,13/Jan/13 15:57,03/Feb/13 11:57,14/Jul/23 05:49,03/Feb/13 11:57,2.10.4,2.9.6,,,,,,,2.10.4,2.9.6,,,karaf,,,,,,0,,,,,,,"{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.10.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
[INFO]     OK: imports resolved for camel-jmx
[INFO]     OK: imports resolved for camel-ahc
[INFO]     OK: imports resolved for camel-amqp
[INFO]     OK: imports resolved for camel-apns
[WARNING] Failed to validate feature camel-atom
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
{noformat}",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304117,,,Sun Feb 03 11:57:29 UTC 2013,,,,,,,,,,,"0|i17jhb:",252125,,,,,,,,,,,,,,,,,,,,"13/Jan/13 18:09;muellerc;Same issue on 2.9.6-SNAPSHOT;;;","03/Feb/13 11:57;davsclaus;Fixed both 2.9 and 2.10 branches.;;;",,,,,,,,,,,,,,,,,,,,,,
Camel feature file doesn't validate,CAMEL-5964,12627341,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jan/13 15:26,13/Jan/13 22:10,14/Jul/23 05:49,13/Jan/13 15:41,2.11.0,,,,,,,,2.11.0,,,,karaf,,,,,,0,,,,,,,"{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
INFO]     OK: imports resolved for camel-smpp
[INFO]     OK: imports resolved for camel-snmp
[INFO]     OK: imports resolved for camel-soap
[INFO]     OK: imports resolved for camel-solr
[INFO]     OK: imports resolved for camel-spring-batch
[WARNING] Failed to validate feature camel-spring-integration
[WARNING] No export found to match org.springframework.retry;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.classify;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.retry.support;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 24.222s
[INFO] Finished at: Sun Jan 13 14:30:29 CET 2013
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------
{noformat}",,bvahdat,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,304114,,,Sun Jan 13 22:10:14 UTC 2013,,,,,,,,,,,"0|i17jgn:",252122,,,,,,,,,,,,,,,,,,,,"13/Jan/13 15:41;muellerc;{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
[INFO]     OK: imports resolved for camel-xmpp
[INFO]     OK: imports resolved for camel-xstream
[INFO]     OK: imports resolved for camel-zookeeper
[INFO] == Done! ==========================
[INFO] 
[INFO] --- maven-site-plugin:3.2:attach-descriptor (attach-descriptor) @ apache-camel ---
[INFO] 
[INFO] --- build-helper-maven-plugin:1.7:attach-artifact (attach-artifacts) @ apache-camel ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ apache-camel ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT.pom
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT-features.xml
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{noformat};;;","13/Jan/13 17:16;davsclaus;Its actually this ticket CAMEL-5931
There is a patch for that.

But I think Babak upgraded Spring Integration to 2.2.0 in the mean time.
As I was waiting for Karaf to be able to support Spring 3.1, before being able to apply the patch.

I suggest if you got some time to look at the patch in CAMEL-5931, and see if it can be applied/merged, as there is some other changes as well that could be good to get into the codebase. Fell free to assign the ticket if you have the time.;;;","13/Jan/13 17:17;davsclaus;And it was Spring Integration 2.2.0 that now requires that spring-retry project. And hence why the features could not validate anymore.;;;","13/Jan/13 17:34;muellerc;@[~davsclaus]]: adding spring-retry as dependency to the feature file resolved the issue.;;;","13/Jan/13 18:05;davsclaus;The patch in CAMEL-5931 has *more* than just adding spring-retry. That was my point of suggesting to look at that ticket and merge the patch into the codebase.;;;","13/Jan/13 21:18;bvahdat;Sorry it was my bad to not check the camel-spring-integration feature while upgrading.;;;","13/Jan/13 22:10;muellerc;[~bvahdat]: Don't worry. The feature file validates again. I will have a look at CAMEL-5931 as Claus suggested.;;;",,,,,,,,,,,,,,,,,
Bug with completionSize on AggregatorProcessor,CAMEL-5957,12627169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,breilhes,breilhes,11/Jan/13 13:26,18/Jan/13 16:13,14/Jul/23 05:49,18/Jan/13 16:13,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,"See nabble :
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-td5725364.html",,breilhes,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303938,,,Fri Jan 18 16:13:51 UTC 2013,,,,,,,,,,,"0|i17gzz:",251723,,,,,,,,,,,,,,,,,,,,"12/Jan/13 12:21;davsclaus;Benoit, thanks for reporting. Are you working on a patch?;;;","18/Jan/13 16:13;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,
Java DSL: unmarshal() inside choice() blocks adding more conditions,CAMEL-5953,12627020,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,10/Jan/13 20:57,04/Feb/13 08:13,14/Jul/23 05:49,04/Feb/13 08:13,2.10.3,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,"This routing code leads to the exception below:

{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal().xstream().endChoice()
        .otherwise()
            .to(""log:test"")
        .end();
{code}

Exception:

{code}
Caused by: java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
	at com.mycompany.MyRoute.configure(MyRoute.java:40)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	[...]
{code}

Also happens if we try to add another when instead of an otherwise.

Tried using end(), endParent(), but they all lead to the same exception. ",,bvahdat,davsclaus,njiang,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303713,,,Sun Feb 03 12:26:06 UTC 2013,,,,,,,,,,,"0|i17dzr:",251236,,,,,,,,,,,,,,,,,,,,"11/Jan/13 20:17;bvahdat;I just quickly looked at this and IMHO it's a regression caused by CAMEL-4044. For example if you would revert one of the changes made there for {{ProcessorDefinition}} (line 1215 on trunk) where:

{code}
if (defn instanceof TryDefinition) {
{code}

has been changed to:

{code}
if (defn instanceof TryDefinition || defn instanceof ChoiceDefinition) {
{code}

Then your route would be fine without any nasty {{ClassCastException}}. However it's not that easy as this change would cause some existing {{camel-core}} tests to fail, *mainly* at the places where the code has been changed through CAMEL-4044 itself. As Claus has already mentioned there that fix has a poor code coverage.;;;","12/Jan/13 03:29;njiang;To workaround this issue, you can use the direct endpoint to break the main route to some smaller routes.
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""direct:unmarshal"")
        .otherwise()
            .to(""log:test"")
        .end();

from(""direct:unmarshal"").to(""log:test"")
            .unmarshal().xstream();
{code};;;","12/Jan/13 12:25;davsclaus;See this FAQ
http://camel.apache.org/why-can-i-not-use-when-or-otherwise-in-a-java-camel-route.html

You can do this
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal(new XStreamDataFormat())
        .otherwise()
            .to(""log:test"")
        .end();
{code};;;","03/Feb/13 12:26;davsclaus;I found a possible solution.;;;",,,,,,,,,,,,,,,,,,,,
Camel-syslog dataformat broken with netty transport,CAMEL-5951,12626970,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,codingismy11to7,codingismy11to7,10/Jan/13 16:30,19/Jan/13 06:55,14/Jul/23 05:49,19/Jan/13 06:55,2.10.2,2.10.3,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,"in Rfc3164SyslogDataFormat, the remoteAddress of the SyslogMessage is set from the Mina or Netty headers. There's a copy/paste error for Netty: it correctly checks for the existence of the CamelNettyRemoteAddress header, but then attempts to set the remoteAddress from a CamelMinaRemoteAddress header.

(there's no camel-syslog component in JIRA)",,codingismy11to7,davsclaus,njiang,,,,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,303663,,,Sat Jan 19 06:40:37 UTC 2013,,,,,,,,,,,"0|i17djz:",251165,,,,,,,,,,,,,,,,,,,,"11/Jan/13 03:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","16/Jan/13 16:03;codingismy11to7;Another copy/paste error - set the message.remoteAddress instead of localAddress from the NETTY_LOCAL_ADDRESS (at least on 2.10.x branch where I was looking);;;","16/Jan/13 16:05;codingismy11to7;actually, looking at the camel-netty code in 2.10...it looks like netty doesn't provide any local address info (see NettyConstants and NettyEndpoint.createExchange);;;","18/Jan/13 01:49;njiang;Hi Steven,

Did you have chance to checkout the latest camel-2.10.x branch?
I backported the patch of CAMEL-5955 into 2.10.x branches. You should be able to get the  NETTY_LOCAL_ADDRESS from message header. Can you double check it?

Willem;;;","18/Jan/13 16:35;codingismy11to7;Sorry, I didn't know CamelNettyLocalAddress got added - I was looking at 2.10.2, not the latest code

the ""message.setRemoteAddress(exchange.getIn().getHeader(""CamelNettyLocalAddress"", String.class));"" typo still applies though

thanks!;;;","18/Jan/13 17:52;davsclaus;Steven, is there still a problem with the latest code on the 2.10 branch?;;;","18/Jan/13 17:53;codingismy11to7;yes

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-syslog/src/main/java/org/apache/camel/component/syslog/Rfc3164SyslogDataFormat.java?r=1431820

line 57: the remote address of the message is set from the netty local address instead of the message's local address;;;","18/Jan/13 17:55;codingismy11to7;I linked to trunk, but the same line is in 2.10.x and 2.9.x;;;","19/Jan/13 06:40;njiang;Hi Steven,

It's my bad, I didn't update the code after I copy past it.
I just commit a quick fix for it, please feel free to check out the code and verify it.
;;;",,,,,,,,,,,,,,,
Cache producer is not thread safe,CAMEL-5950,12626956,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattiker,agattiker,10/Jan/13 15:13,11/Jan/13 07:17,14/Jul/23 05:49,11/Jan/13 07:13,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-cache,,,,,,0,,,,,,,"{code}
		from(""direct:causeFailure"")
		.split().body().parallelProcessing()
		.setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL))
		.to(""cache://MyTestCache"");
{code} 


{code}
 		String[] body = new String[] { ""a"", ""b"" };
		template.sendBody(body);
{code} 

{noformat}
net.sf.ehcache.ObjectExistsException: Cache MyTestCache already exists
	at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294)
	at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184)
	at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:709)
	at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:80)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:290)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:275)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
{noformat} 
",,agattiker,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303648,,,Fri Jan 11 07:17:56 UTC 2013,,,,,,,,,,,"0|i17dgf:",251149,,,,,,,,,,,,,,,,,,,,"11/Jan/13 07:13;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","11/Jan/13 07:17;agattiker;That was super fast. Thank you very much!;;;",,,,,,,,,,,,,,,,,,,,,,
XML DSL - Should not have default values in errorhandler ,CAMEL-5949,12626930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Jan/13 12:47,10/Jan/13 13:17,14/Jul/23 05:49,10/Jan/13 13:17,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-blueprint,camel-spring,,,,,0,,,,,,,"We should not have default values for <errorHandler> in the XML DSL as when looking at the model at runtime, these values would be set, and appear as in use.

The <errorHandler> is a bit special as its for configuring all the error handlers. Which mean the default level = ERROR option will in the model be as if the end user configured level = ERROR which is only supported on the logging error handler, and not the others etc. Causing problem.

The logging error handler builder has already default values, so its safe to remove the redundant default value from the model.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303621,,,2013-01-10 12:47:49.0,,,,,,,,,,,"0|i17d8n:",251114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectHelper.createIterator() should properly handle the array of primitive types e.g. int[],CAMEL-5948,12626923,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,10/Jan/13 11:48,10/Jan/13 20:58,14/Jul/23 05:49,10/Jan/13 20:58,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"See the thread here:

http://camel.465427.n5.nabble.com/Question-camel-cxf-amp-CXF-MESSAGE-td5725227.html",,bvahdat,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303614,,,Thu Jan 10 20:58:51 UTC 2013,,,,,,,,,,,"0|i17d73:",251107,,,,,,,,,,,,,,,,,,,,"10/Jan/13 20:58;bvahdat;The new behaviour now is (instead of a thrown {{ClassCastException}}) that the returned {{Iterator}} iterates over the corresponding Java primitive wrapper objects of the given elements inside the passed primitive type array object.;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-hl7 marshal charset  error,CAMEL-5943,12626658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,valdar,valdar,08/Jan/13 22:09,11/Jan/13 08:27,14/Jul/23 05:49,11/Jan/13 07:37,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-hl7,,,,,,0,charset,converting,dataformat,hl7,marshaling,unmar,"Suppose you have an environment with default charset = ISO-8859-1 and a route like this one:
{code:xml}
... 
<bean id=""hl7codec"" class=""org.apache.camel.component.hl7.HL7MLLPCodec"">
    <property name=""charset"" value=""utf-8"" />
</bean>
...
<camel:from uri=""mina2:tcp://localhost:8787?sync=true&amp;codec=#hl7codec""/>
//do someting with hl7 object
<camel:marshal><hl7/></camel:marshal>
//do someting with hl7 string
...
{code}

The marshal fail because it use default charset (ISO-8859-1 in this example) without taking in account the Exchange.CHARSET_NAME property (UTF-8 in this example)",All,njiang,valdar,,,,,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,,,,,,"08/Jan/13 22:14;valdar;camel-hl7-dataformatCharEncoding-patch.txt;https://issues.apache.org/jira/secure/attachment/12563840/camel-hl7-dataformatCharEncoding-patch.txt",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,303265,,,Fri Jan 11 08:27:17 UTC 2013,,,,,,,Patch Available,,,,"0|i1790n:",250429,,,,,,,,,,,,,,,,,,,,"08/Jan/13 22:14;valdar;Patch provided (local to camel-hl7 subproject);;;","08/Jan/13 22:16;valdar;provided also a pull request on github.;;;","11/Jan/13 07:37;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.;;;","11/Jan/13 08:27;valdar;Closed also the pull request on github.;;;",,,,,,,,,,,,,,,,,,,,
Custom URIResolve not used to load XSTL script,CAMEL-5942,12626569,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,t.gueldner,t.gueldner,08/Jan/13 16:03,14/Jan/13 07:25,14/Jul/23 05:49,12/Jan/13 14:37,2.10.3,,,,,,,,2.10.4,2.11.0,,,camel-xslt,,,,,,0,,,,,,,"My problem is to load a XSLT script from database or provided as byte array but not as file in classpath or http.

A custom uri resolver would do the job. XsltEndpoint uses a ResourceHelper to load the XSTL resource instead of a given custom uri resolver.

{code}
    private synchronized void loadResource(XsltBuilder xslt, String resourceUri) throws TransformerConfigurationException, IOException {
        LOG.trace(""{} loading schema resource: {}"", this, resourceUri);
        // prefer to use URL over InputStream as it loads better with http
        URL url = ResourceHelper.resolveMandatoryResourceAsUrl(getCamelContext().getClassResolver(), resourceUri);
        xslt.setTransformerURL(url);
        // now loaded so clear flag
        cacheCleared = false;
    }
{code}

The ResourceHelper or this method should use the same URIResolver as XsltBuilder.

Another way would be to make the method above protected to be able to overwrite the behaviour.","Windows, Java 1.6",davsclaus,t.gueldner,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,303176,,,Mon Jan 14 07:25:51 UTC 2013,,,,,,,,,,,"0|i178gn:",250339,,,,,,,,,,,,,,,,,,,,"12/Jan/13 12:32;davsclaus;This is already possible. You can configure a custom uri resolver on the component / endpoint.
http://camel.apache.org/xslt


See this unit test in the source code: XsltCustomizeURIResolverTest


;;;","12/Jan/13 12:37;davsclaus;Ah yeah the xslt endpoint loads the resource the 1st time without the customer resolver. Lets fix that.;;;","12/Jan/13 14:37;davsclaus;Thanks for reporting. Now the uri resolver is always used.;;;","14/Jan/13 07:25;t.gueldner;You are really fast. ;) Thank you.

I will try it next time.;;;",,,,,,,,,,,,,,,,,,,,
SJMS component's pom.xml missing taskmanager package in camel.osgi.private.pkg,CAMEL-5928,12626071,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,earcam,earcam,04/Jan/13 17:50,05/Jan/13 07:44,14/Jul/23 05:49,05/Jan/13 07:44,2.11.0,,,,,,,,2.11.0,,,,,,,,,,0,,,,,,,"Hi,

I know it's not out in the wild yet but with this tiny patch SJMS is usable in my spike project.

Sadly doesn't affect the number of passing/failing tests.

The pom's <camel.osgi.private.pkg> section is missing an entry for the org.apache.camel.component.sjms.taskmanager package.


thanks,
Caspar",,davsclaus,earcam,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/13 17:52;earcam;camel-sjms.patch;https://issues.apache.org/jira/secure/attachment/12563326/camel-sjms.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,302654,,,Sat Jan 05 07:44:56 UTC 2013,,,,,,,Patch Available,,,,"0|i174jj:",249704,,,,,,,,,,,,,,,,,,,,"05/Jan/13 07:44;davsclaus;Thanks for spotting this and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in RouteContextProcessor,CAMEL-5925,12625887,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lombart,lombart,03/Jan/13 18:20,05/Jan/13 07:41,14/Jul/23 05:49,05/Jan/13 07:41,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,"I am trying to implement a fork/join process where work is read by a single thread, distributed to several parallel threads then joined back to another single thread. I am using Camel SEDA components for interfacing between threads. The single thread at the end must process the messages in the correct order which is why I add a stream resequencer in the route.

I have built a small prototype that works correctly with a small number of messages (1000 messages, 10 threads in parallel). However if I increase the number of messages (10000 messages, 10 threads) I start getting null pointer exceptions:
01:35:49.719 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]

I have tried adjusting the resequencer time-out and capacity without any result. My CPU is only lightly loaded as there is plenty of sleep in the dummy processor. If anybody could tell me what I am doing wrong I would be very grateful. Here is the complete code of my prototype class:

package camelTest;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * Simulation of a fork / join parallel processing.
 *
 * Work is created by the main method, distributed (seda:fork) to several
 * parallel workers, joined back to a single queue (seda:join) and resequenced.
 *
 */
public class MainApp {

        private static final Logger LOG = LoggerFactory.getLogger(MainApp.class);
        private static final int NUMBER_OF_MESSAGES = 10000;

        public static void main(String... args) throws Exception {
                CamelContext context = new DefaultCamelContext();
                context.addRoutes(new MyRouteBuilder());
                context.start();

                LOG.info(""Started"");

                ProducerTemplate template = context.createProducerTemplate();
                for (int i = 0; i < NUMBER_OF_MESSAGES; i++) {
                        template.sendBodyAndHeader(""seda:fork"", ""Test Message: "" + i,
                                        ""seqnum"", new Long(i));
                }

                long expectedTime = NUMBER_OF_MESSAGES
                                * (RandomSleepProcessor.MAX_PROCESS_TIME + RandomSleepProcessor.MIN_PROCESS_TIME)
                                / 2 / MyRouteBuilder.CONCURRENCY + MyRouteBuilder.TIMEOUT;
                LOG.info(""Expected time: {}"", expectedTime);
                Thread.sleep(expectedTime);
                LOG.info(""Stopping"");
                context.stop();
                LOG.info(""Stopped"");

        }

        public static class MyRouteBuilder extends RouteBuilder {
                // Number of concurrent processing threads
                public static final int CONCURRENCY = 10;

                // Additional resequencer time-out above theoretical time-out
                public static final long SAFETY_TIMEOUT = 100;

                // Additional resequencer capacity above theoretical capacity
                public static final int SAFETY_CAPACITY = 10;

                // Resequencer time-out
                public static final long TIMEOUT = SAFETY_TIMEOUT
                                + (RandomSleepProcessor.MAX_PROCESS_TIME - RandomSleepProcessor.MIN_PROCESS_TIME);

                // Resequencer capacity
                public static final int CAPACITY = SAFETY_CAPACITY
                                + (int) (CONCURRENCY * TIMEOUT / RandomSleepProcessor.MIN_PROCESS_TIME);

                public void configure() {
                        LOG.info(""Number of processor threads: {}"", CONCURRENCY);
                        LOG.info(""Resequencer time-out: {}"", TIMEOUT);
                        LOG.info(""Resequencer capacity: {}"", CAPACITY);
                        Processor myProcessor = new RandomSleepProcessor();
                        from(""seda:fork?concurrentConsumers="" + CONCURRENCY).process(
                                        myProcessor).to(""seda:join"");
                        from(""seda:join"").resequence(header(""seqnum"")).stream()
                                        .capacity(CAPACITY).timeout(TIMEOUT).to(""mock:result"");
                }

        }

        /**
         * Simulation processor that sleeps a random time between MIN_PROCESS_TIME
         * and MAX_PROCESS_TIME milliseconds.
         *
         */
        public static class RandomSleepProcessor implements Processor {
                public static final long MIN_PROCESS_TIME = 5;
                public static final long MAX_PROCESS_TIME = 50;

                @Override
                public void process(Exchange arg0) throws Exception {
                        long processTime = (long) (MIN_PROCESS_TIME + Math.random()
                                        * (MAX_PROCESS_TIME - MIN_PROCESS_TIME));
                        LOG.debug(""Process time: {}"", processTime);
                        Thread.sleep(processTime);
                }

        }

}

And here is the full log of a run:
01:35:45.632 [main] INFO  camelTest.MainApp - Number of processor threads: 10
01:35:45.635 [main] INFO  camelTest.MainApp - Resequencer time-out: 145
01:35:45.635 [main] INFO  camelTest.MainApp - Resequencer capacity: 300
01:35:45.674 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is starting
01:35:45.733 [main] INFO  o.a.c.m.ManagementStrategyFactory - JMX enabled.
01:35:45.938 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded 172 type converters
01:35:46.333 [main] INFO  o.a.camel.impl.DefaultCamelContext - Route: route1 started and consuming from: Endpoint[seda://fork?concurrentConsumers=10]
01:35:46.348 [main] INFO  o.a.camel.impl.DefaultCamelContext - Route: route2 started and consuming from: Endpoint[seda://join]
01:35:46.348 [main] INFO  o.a.c.m.DefaultManagementLifecycleStrategy - StatisticsLevel at All so enabling load performance statistics
01:35:46.360 [main] INFO  o.a.camel.impl.DefaultCamelContext - Total 2 routes, of which 2 is started.
01:35:46.360 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) started in 0.688 seconds
01:35:46.360 [main] INFO  camelTest.MainApp - Started
01:35:48.061 [main] INFO  camelTest.MainApp - Expected time: 27645
01:35:49.719 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:02.994 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:10.913 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:15.706 [main] INFO  camelTest.MainApp - Stopping
01:36:15.706 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is shutting down
01:36:15.707 [main] INFO  o.a.c.impl.DefaultShutdownStrategy - Starting to graceful shutdown 2 routes (timeout 300 seconds)
01:36:16.778 [Camel (camel-1) thread #14 - ShutdownTask] INFO  o.a.c.impl.DefaultShutdownStrategy - Route: route2 shutdown complete, was consuming from: Endpoint[seda://join]
01:36:16.779 [Camel (camel-1) thread #14 - ShutdownTask] INFO  o.a.c.impl.DefaultShutdownStrategy - Route: route1 shutdown complete, was consuming from: Endpoint[seda://fork?concurrentConsumers=10]
01:36:16.779 [main] INFO  o.a.c.impl.DefaultShutdownStrategy - Graceful shutdown of 2 routes completed in 1 seconds
01:36:16.784 [main] INFO  o.a.c.i.c.DefaultTypeConverter - TypeConverterRegistry utilization[attempts=264380, hits=264380, misses=0, failures=0] mappings[total=172, misses=0]
01:36:16.786 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is shutdown in 1.079 seconds. Uptime 31.114 seconds.
01:36:16.786 [main] INFO  camelTest.MainApp - Stopped

Vincent ","Ubuntu Linux 12.04 (amd64), openjdk 6 (6b24-1.11.5-0ubuntu1~12.04.1)",davsclaus,lombart,taariql,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Jan/13 16:06;taariql;CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch;https://issues.apache.org/jira/secure/attachment/12563306/CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch","04/Jan/13 16:05;taariql;CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch;https://issues.apache.org/jira/secure/attachment/12563304/CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,302468,,,Sat Jan 05 07:41:43 UTC 2013,,,,,,,,,,,"0|i173dr:",249515,,,,,,,,,,,,,,,,,,,,"04/Jan/13 15:52;taariql;Attaching a possible patch;;;","04/Jan/13 16:05;taariql;Possible patch, see Nabble http://camel.465427.n5.nabble.com/Fork-join-with-resequencing-td5724727.html

The unit test provided is based on Vincent's main class and demonstrates the issue once every couple of runs, often the test will pass.
With the attached patch the error no longer occurs and the test always passes.
All camel-core tests also pass.

Any other implications? And should the unit of work from line 41 be reused at 49?;;;","04/Jan/13 16:52;davsclaus;Yeah ideally we should use the same UoW in the done logic. ;;;","05/Jan/13 07:41;davsclaus;Vincent thanks for reporting, and Taariq for the patch.

I fixed some checkstyle errors which you can run as documented here (eg about code formatting, import ordering etc)
http://camel.apache.org/building.html

And as well reuse the UoW in the done as suggested.;;;",,,,,,,,,,,,,,,,,,,,
