Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocked),Outward issue link (Blocker),Inward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Problem/Incident),Outward issue link (Problem/Incident),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Memory leak in ReactiveHelper class,CAMEL-13033,13206849,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,fvaleri,fvaleri,28/Dec/18 18:34,11/Aug/19 18:51,13/Jul/23 08:31,09/Jan/19 11:51,3.0.0,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,camel-core,,,,,,0,,,,"There is a memory leak located in the ReactiveHelper class (back LinkedList). 
It's at the routing engine level and a OOM error should be triggered with a simple load test.",,fvaleri,,,,,,,"fvaleri commented on pull request #2694: CAMEL-13033: Memory leak in ReactiveHelper class
URL: https://github.com/apache/camel/pull/2694
 
 
   It seems that, in some cases, we are never polling from the back list of work in org.apache.camel.support.ReactiveHelper.Work and this leads to OOM error. 
   
   This is a test case (try to set numOfRecords=1000000 and maxWaitTime=20000):
   https://github.com/fvaleri/camel/tree/bigxml-split-example/examples/camel-example-bigxml-split
   
   I tried to set the ""main"" parameter to true in the schedule call inside ReactiveHelper.scheduleLast. If I understand correctly, this avoids the accumulation of after processor work from CamelInternalProcessor by executing it in the route's main execution thread.
   
   After this change I see the after processor TRACE log (CamelInternalProcessor line 232) and I have similar test results as with 2.23.0, even if I have to increase maxWaitTime a little for the 1.3GB test.
   
   I'm not completely aware of the implications of this change in other parts of the code, so I need a double check from you.
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 16:38;githubbot;600","gnodet commented on pull request #2694: CAMEL-13033: Memory leak in ReactiveHelper class
URL: https://github.com/apache/camel/pull/2694
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Jan/19 07:29;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,"28/Dec/18 18:32;fvaleri;Screenshot 2018-12-28 at 7.18.11 PM.png;https://issues.apache.org/jira/secure/attachment/12953257/Screenshot+2018-12-28+at+7.18.11+PM.png",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 30 16:43:52 UTC 2018,,,,,,,,,,,"0|u00dkw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Dec/18 16:43;fvaleri;https://github.com/apache/camel/pull/2694;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - When using SSL with rest-dsl and api-doc then you can get a port already bound exception,CAMEL-13028,13205985,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Dec/18 15:00,21/Dec/18 15:30,13/Jul/23 08:31,21/Dec/18 15:30,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-undertow,,,,,,0,,,,"For example this route cannot startup
{code}
	public void configure() throws Exception {

		restConfiguration().scheme(""https"").component(""undertow"").port(7777).contextPath(""/"").host(""0.0.0.0"")
            .apiContextPath(""/swagger.json"")
				.dataFormatProperty(""prettyPrint"", ""true"")

				.apiProperty(""api.schemes"", ""https"")
				.apiProperty(""api.title"", ""Rest swagger"")
				.apiProperty(""api.description"", ""Camel Rest App with Swagger"");

		rest(""/user"").get().to(""direct:start"");

		from(""direct:start"").setBody().constant(""Hi Camels"");
	}
{code}

With a
{code}
Caused by: java.net.BindException: Address already in use
        at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0_181]
        at sun.nio.ch.Net.bind(Net.java:433) ~[na:1.8.0_181]
        at sun.nio.ch.Net.bind(Net.java:425) ~[na:1.8.0_181]
        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223) ~[na:1.8.0_181]
        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0_181]
...
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-21 15:00:23.0,,,,,,,,,,,"0|u008i0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Mail breaks some attachment names with many special characters,CAMEL-13024,13205743,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,20/Dec/18 14:37,17/Dec/20 19:38,13/Jul/23 08:31,17/Dec/20 19:38,2.23.0,,,,,,,,,,,,,,,3.8.0,,,,,camel-mail,,,,,,0,,,,"The patch for CAMEL-12630 introduced the following line for Attachment file names in the MailBinding class.
{code:java}
String fileName = FileUtil.stripPath(part.getFileName());{code}
This code usually makes sense, it strips paths from attachment names. However, if the file name of the attachment contains many non-ASCII characters (more than ASCII characters) the file name provided by the mail is Base64 encoded, e.g.: ""=?UTF-8?B?6Kq/5pW0?=""

As the / is a valid character in Base64 encoding (but is not a path delimiter there) the stripPath() call on that string will mutilate the filename to ""5pW0?="".

A workaround for this issue is to set the Java system property ""mail.mime.decodefilename"" to ""true"". In this case the part.getFileName() will decode the filename before stripping paths.

The attached unit test might demonstrate the issue.

I am not sure how this can be fixed in a compatible way. One option would be to perform a MimeUtility.decodeText() call on the file name (if it is not null), which will essentially have the same effect as setting the system property (which means that the attachment filename is decoded before processing it further), but this will be kind of incompatible.

Note: The issue will not occur if there are more ASCII characters than non-ASCII characters in the filename, because in that case the non-ASCII characters will be encoded using quoted printable encoding (which does not include a ""/"" character), and even if the file name is Base64 encoded it does not necessarily mean that the Base64 encoded filename contains a ""/"", so you might hardly see that issue in real life.

 ",,davsclaus,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Dec/18 14:18;siano;MailBindingAttachmentEncodedFilenameTest.java;https://issues.apache.org/jira/secure/attachment/12952545/MailBindingAttachmentEncodedFilenameTest.java",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 17 19:38:52 UTC 2020,,,,,,,,,,,"0|u00708:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"17/Dec/20 19:38;davsclaus;I added an option to configure on the component/endpoint whether to encode the file name or not.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - sending PATCH operation should include body,CAMEL-13022,13205723,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Dec/18 13:34,20/Dec/18 13:45,13/Jul/23 08:31,20/Dec/18 13:45,2.23.0,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,3.0.0,,camel-restlet,,,,,,0,,,,We currently only include body for PUT and POST. But we should include the body for PATCH as well.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-20 13:34:10.0,,,,,,,,,,,"0|u006vs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Jetty Maven plugin referenced,CAMEL-13020,13205710,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Dec/18 12:32,01/Mar/19 13:35,13/Jul/23 08:31,20/Dec/18 12:38,,,,,,,,,,,,,,,,3.0.0,3.0.0-M1,,,,build system,,,,,,0,,,,Seems that we have modules that reference {{org.mortbay.jetty:jetty-maven-plugin}} instead of {{org.eclipse.jetty:org.eclipse.jetty}} with the same {{${jetty-plugin-version}}},,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-20 12:32:56.0,,,,,,,,,,,"0|u006sw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
root-Path handling for SFTP on windows bug,CAMEL-13017,13205326,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,jkleemann,jkleemann,19/Dec/18 10:18,20/Dec/18 11:31,13/Jul/23 08:31,20/Dec/18 11:31,2.23.0,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-ftp,,,,,,0,,,,"In SftpOperations.java the commit 0d3612672f2927d0428c2b79686759c16be88791
has introduced a remoting bug when running on windows and connecting to sftp server.



If the sfpt/camel is running on windows, then it assumes that the path include a ""root-path"" like ""C://"" which is not necessarily true for sftp connections. 
So instead of ""/"" it creates a root path of ""/hom"" when working with an sftp path like ""/home/jkleemann/transfer/....:"" and fails when trying to change directory to this root path.

see [https://github.com/apache/camel/commit/0d3612672f2927d0428c2b79686759c16be88791]
for the changes

 ","2.23.0 / executing on windows jdk8 / remote sftp server linux

 ",jkleemann,onders,,,,,,"onderson opened a new pull request #2679: CAMEL-13017 - handle root path on windows
URL: https://github.com/apache/camel/pull/2679
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Dec/18 22:26;githubbot;600","onderson closed pull request #2679: CAMEL-13017 - handle root path on windows
URL: https://github.com/apache/camel/pull/2679
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 1ecce010b46..5f75910641a 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -618,12 +618,17 @@ public synchronized void changeCurrentDirectory(String path) throws GenericFileO
         // that
         if (FileUtil.hasLeadingSeparator(path)) {
             // change to root path
-            if (!FileUtil.isWindows()) {
+            if (!path.matches(""^[a-zA-Z]:(//|\\\\).*$"")) {
                 doChangeDirectory(path.substring(0, 1));
                 path = path.substring(1);
             } else {
-                doChangeDirectory(path.substring(0, 4));
-                path = path.substring(4);
+                if(path.matches(""^[a-zA-Z]:(//).*$"")) {
+                    doChangeDirectory(path.substring(0, 3));
+                    path = path.substring(3);
+                } else if(path.matches(""^[a-zA-Z]:(\\\\).*$"")) {
+                    doChangeDirectory(path.substring(0, 4));
+                    path = path.substring(4);
+                }
             }
         }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Dec/18 09:08;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,CAMEL-12848,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Wed Dec 19 22:31:29 UTC 2018,,,,,,,,,,,"0|u004fs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Dec/18 14:30;jkleemann;The simplest solution would be a regular expression to check if the path to process starts with ""[A-Z]://"" and then act accordingly!;;;","19/Dec/18 22:31;onders;Thanks for spotting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - If multiple bundles uses the same context-path (pathspec) then Jetty should fail,CAMEL-13016,13205296,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/18 07:28,19/Dec/18 13:30,13/Jul/23 08:31,19/Dec/18 13:30,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-jetty,,,,,,1,,,,"If you have 2 bundles that both uses the same context-path with a jetty consumer, then the last installed bundle will be routing the incoming requests, and the first installed will not be in use, and if you uninstall the 2nd bundle then the 1st bundle will still not be in use and jetty will return a 404.

We should detect that there is already another jetty consumer with the same context-path to be routing when creating a jetty connector listener and then fail if so.",,davsclaus,hisao.furuichi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 19 11:47:38 UTC 2018,,,,,,,,,,,"0|u00494:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Dec/18 10:30;davsclaus;There are some existing MultiPart unit tests that relied on the old behavior;;;","19/Dec/18 11:47;davsclaus;Okay I got this fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel mqtt crash using high volume traffic,CAMEL-13014,13205155,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,18/Dec/18 15:42,19/Dec/18 08:03,13/Jul/23 08:31,19/Dec/18 08:03,2.23.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-mqtt,,,,,,0,,,,"Into current version we cannot use 2 (or more) sequential camel-mqtt producer.

With high volume traffic use case, we have this looped error:  
{quote}2018-12-18 16:27:12,609 [.0.1:36172@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36176
2018-12-18 16:27:12,609 [.0.1:36170@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36172
2018-12-18 16:27:12,614 [.0.1:36180@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36170
2018-12-18 16:27:12,639 [.0.1:36182@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36180
2018-12-18 16:27:12,639 [.0.1:36184@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36182
2018-12-18 16:27:12,662 [.0.1:36186@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36184
2018-12-18 16:27:12,662 [.0.1:36190@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36186
2018-12-18 16:27:12,666 [.0.1:36178@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36190
2018-12-18 16:27:12,668 [.0.1:36188@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36192
2018-12-18 16:27:12,668 [.0.1:36192@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36178
2018-12-18 16:27:12,669 [.0.1:36196@1101] WARN RegionBroker - Stealing link for clientId 7f000001e92a5c1911c9 From Connection Transport Connection to: tcp://127.0.0.1:36194
{quote}
 You can reproduce it using junit class *org.apache.camel.component.mqtt.MQTTLoopProducerTest*

 ",,fabryprog,,,,,,,"Fabryprog opened a new pull request #2678: CAMEL-13014 fix stealing link for clientId (looped error)
URL: https://github.com/apache/camel/pull/2678
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Dec/18 15:45;githubbot;600","oscerd closed pull request #2678: CAMEL-13014 fix stealing link for clientId (looped error)
URL: https://github.com/apache/camel/pull/2678
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
index 5b70097f46c..12849656131 100644
--- a/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
+++ b/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java
@@ -228,6 +228,7 @@ protected void doStart() throws Exception {
         super.doStart();
 
         createConnection();
+        connect();
     }
 
     protected void createConnection() {
diff --git a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
index 24e0ad4c250..dcc2d215b9b 100644
--- a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
+++ b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTConfigurationTest.java
@@ -63,7 +63,7 @@ public void testWildcardSubscribeTopicsConfiguration() throws Exception {
 
     @Test
     public void testExactlyOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=exactlyOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=exactlyOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
@@ -72,7 +72,7 @@ public void testExactlyOnceQualityOfServiceConfiguration() throws Exception {
 
     @Test
     public void testAtLeastOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtLeastOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtLeastOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
@@ -81,7 +81,7 @@ public void testAtLeastOnceQualityOfServiceConfiguration() throws Exception {
 
     @Test
     public void testAtMostOnceQualityOfServiceConfiguration() throws Exception {
-        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtMostOnce"");
+        Endpoint endpoint = context.getEndpoint(""mqtt:todo?qualityOfService=AtMostOnce&host="" + MQTTTestSupport.getHostForMQTTEndpoint());
         assertTrue(""Endpoint not a MQTTEndpoint: "" + endpoint, endpoint instanceof MQTTEndpoint);
         MQTTEndpoint mqttEndpoint = (MQTTEndpoint)endpoint;
 
diff --git a/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java
new file mode 100644
index 00000000000..12662696cbb
--- /dev/null
+++ b/components/camel-mqtt/src/test/java/org/apache/camel/component/mqtt/MQTTLoopProducerTest.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.mqtt;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Producer;
+import org.apache.camel.builder.RouteBuilder;
+import org.fusesource.mqtt.client.BlockingConnection;
+import org.fusesource.mqtt.client.MQTT;
+import org.fusesource.mqtt.client.Message;
+import org.fusesource.mqtt.client.QoS;
+import org.fusesource.mqtt.client.Topic;
+import org.junit.Test;
+
+public class MQTTLoopProducerTest extends MQTTBaseTest {
+    @Test
+    public void testProduce() throws Exception {
+        MQTT mqtt = new MQTT();
+        mqtt.setHost(MQTTTestSupport.getHostForMQTTEndpoint());
+        final BlockingConnection subscribeConnection = mqtt.blockingConnection();
+        subscribeConnection.connect();
+        Topic topic = new Topic(TEST_TOPIC, QoS.AT_MOST_ONCE);
+        Topic[] topics = {topic};
+        subscribeConnection.subscribe(topics);
+        final CountDownLatch latch = new CountDownLatch(numberOfMessages * 2); //2 publishers
+
+        Thread thread = new Thread(new Runnable() {
+            public void run() {
+                for (int i = 0; i < numberOfMessages * 2; i++) {
+                    try {
+                        Message message = subscribeConnection.receive();
+                        message.ack();
+                        latch.countDown();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        break;
+                    }
+                }
+            }
+        });
+        thread.start();
+
+        Producer producer = context.getEndpoint(""direct:foo"").createProducer();
+        for (int i = 0; i < numberOfMessages; i++) {
+            Exchange exchange = producer.createExchange();
+            exchange.getIn().setBody(""test message "" + i);
+            producer.process(exchange);
+        }
+        latch.await(10, TimeUnit.SECONDS);
+        assertTrue(""Messages not consumed = "" + latch.getCount(), latch.getCount() == 0);
+    }
+
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                from(""direct:foo"")
+                .setHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC, constant(TEST_TOPIC))
+                .to(""mqtt:boo1?host="" + MQTTTestSupport.getHostForMQTTEndpoint() + ""&qualityOfService=AtMostOnce"")
+                .setHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC, constant(TEST_TOPIC))
+                .to(""mqtt:boo2?host="" + MQTTTestSupport.getHostForMQTTEndpoint() + ""&qualityOfService=AtMostOnce"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Dec/18 07:28;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-18 15:42:48.0,,,,,,,,,,,"0|u003ds:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo4 - AbstractFutureCallback generates NPE when response is a 401,CAMEL-13012,13204969,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,17/Dec/18 19:23,15/Jan/19 09:30,13/Jul/23 08:31,10/Jan/19 10:08,2.21.0,2.22.2,2.23.0,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,odata,,,"The class [AbstractFutureCallback|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/AbstractFutureCallback.java] throws a NullPointerException when the server is secured with basic authentication and the camel client fails to provide the correct credentials.
 # Implement an odata server secured with basic authentication;
 # Crate a camel route to access the odata server but do not specify the correct authentication credentials;
 # While fetching the Edm [object|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L166] from the endpoint proxy, an http client request is made using the provided parameters and of course fails with a 401 error.
 # The response is processed by [AbstractFutureCallback|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/AbstractFutureCallback.java#L60] but _responseContentType_ is null hence the NPE.

 ",,dmvolod,phantomjinx,,,,,,"dmvolod commented on pull request #2702: CAMEL-13012: AbstractFutureCallback generates NPE when response is a 401
URL: https://github.com/apache/camel/pull/2702
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;09/Jan/19 13:13;githubbot;600","dmvolod commented on pull request #2702: CAMEL-13012: AbstractFutureCallback generates NPE when response is a 401
URL: https://github.com/apache/camel/pull/2702
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jan/19 10:03;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,CAMEL-13058,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 10 10:08:37 UTC 2019,,,,,,,,,,,"0|u0028w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jan/19 10:08;dmvolod;Thanks, [~phantomjinx] for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in generated XAdES 1.1.1 signature ,CAMEL-13009,13204670,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,Forinil,Forinil,15/Dec/18 18:09,17/Dec/18 19:12,13/Jul/23 08:31,17/Dec/18 07:55,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,3.0.0,,,camel-xmlsecurity,,,,,,0,XAdES,,,"XAdES XSD file defines, among the others, type 
{code:xml}
DigestAlgAndValueType
{code}
In XAdES 1.1.1 this is defined as:
{code:xml}
<xsd:complexType name=""DigestAlgAndValueType"">
  <xsd:sequence>
    <xsd:element name=""DigestMethod"" type=""ds:DigestMethodType""/>
    <xsd:element name=""DigestValue"" type=""ds:DigestValueType""/>
  </xsd:sequence>
</xsd:complexType>
{code}
and in later versions as:
{code:xml}
<xsd:complexType name=""DigestAlgAndValueType"">
  <xsd:sequence>
    <xsd:element ref=""ds:DigestMethod""/>
    <xsd:element ref=""ds:DigestValue""/>
  </xsd:sequence>
</xsd:complexType>
{code}

Apache Camel always generates elements of this type according to the second definition, regardless of selected namespace. This may cause XAdES 1.1.1 signature validation to fail.",,acosentino,Forinil,,,,,,"Forinil opened a new pull request #2677: CAMEL-13009: DigestMethod and DigestValue elements created either in …
URL: https://github.com/apache/camel/pull/2677
 
 
   …XAdES or DS namespace depending on XAdES version required

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Dec/18 16:23;githubbot;600","oscerd closed pull request #2677: CAMEL-13009: DigestMethod and DigestValue elements created either in …
URL: https://github.com/apache/camel/pull/2677
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
index 594dbdb5903..909e13cd888 100644
--- a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
+++ b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
@@ -944,14 +944,14 @@ protected void addSignaturePolicyIdentifier(Document doc, Element signedProperti
                 throw new XmlSignatureException(
                         ""The XAdES-EPES configuration is invalid. The digest algorithm for the signature policy is missing."");
             }
-            Element digestMethod = createDigSigElement(""DigestMethod"", doc, input.getPrefixForXmlSignatureNamespace());
+            Element digestMethod = createElementNS(doc, input, ""DigestMethod"");
             sigPolicyHash.appendChild(digestMethod);
             setAttribute(digestMethod, ""Algorithm"", getSignaturePolicyDigestAlgorithm());
             if (getSignaturePolicyDigestValue() == null || getSignaturePolicyDigestValue().isEmpty()) {
                 throw new XmlSignatureException(
                         ""The XAdES-EPES configuration is invalid. The digest value for the signature policy is missing."");
             }
-            Element digestValue = createDigSigElement(""DigestValue"", doc, input.getPrefixForXmlSignatureNamespace());
+            Element digestValue = createElementNS(doc, input, ""DigestValue"");
             sigPolicyHash.appendChild(digestValue);
             digestValue.setTextContent(getSignaturePolicyDigestValue());
 
@@ -1142,10 +1142,10 @@ protected void addCertificate(X509Certificate cert, Element signedCertificate, D
         String digest = calculateDigest(algorithm, cert.getEncoded());
         Element certDigest = createElement(""CertDigest"", doc, input);
         elCert.appendChild(certDigest);
-        Element digestMethod = createDigSigElement(""DigestMethod"", doc, input.getPrefixForXmlSignatureNamespace());
+        Element digestMethod = createElementNS(doc, input, ""DigestMethod"");
         certDigest.appendChild(digestMethod);
         setAttribute(digestMethod, ""Algorithm"", getDigestAlgorithmForSigningCertificate());
-        Element digestValue = createDigSigElement(""DigestValue"", doc, input.getPrefixForXmlSignatureNamespace());
+        Element digestValue = createElementNS(doc, input, ""DigestValue"");
         certDigest.appendChild(digestValue);
         digestValue.setTextContent(digest);
 
@@ -1189,6 +1189,16 @@ protected String calculateDigest(String algorithm, byte[] bytes) throws NoSuchAl
         return new Base64().encodeAsString(digestBytes);
     }
 
+    protected Element createElementNS(Document doc, Input input, String elementName) {
+        Element digestMethod;
+        if (HTTP_URI_ETSI_ORG_01903_V1_1_1.equals(findNamespace(input.getMessage()))) {
+            digestMethod = createElement(elementName, doc, input);
+        } else {
+            digestMethod = createDigSigElement(elementName, doc, input.getPrefixForXmlSignatureNamespace());
+        }
+        return digestMethod;
+    }
+
     protected Element createDigSigElement(String localName, Document doc, String prefixForXmlSignatureNamespace) {
         Element el = doc.createElementNS(""http://www.w3.org/2000/09/xmldsig#"", localName);
         if (prefixForXmlSignatureNamespace != null && !prefixForXmlSignatureNamespace.isEmpty()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Dec/18 07:54;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 16 22:17:26 UTC 2018,,,,,,,,,,,"0|u000eg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Dec/18 22:17;acosentino;Once it has been merged we'll mark this as resolved;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Odata-connector assumes '/' at end of URI,CAMEL-13008,13204575,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 21:01,22/Dec/18 21:36,13/Jul/23 08:31,22/Dec/18 21:36,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"An issue comes to light when testing certain odata implementations that do not handle a '/' being added to the end of the consumed URI, eg.
* Implementation of the olingo4 [tutorial|https://olingo.apache.org/doc/odata4/tutorials/read/tutorial_read.html]
* Services deployed using current implementations of [teiid|http://teiid.io/]

Use of the odata-connector on these services results in a _malformed URI_ error.

Essentially, when the service URI is concatenated with the resource path, the constructed URI is [appended|https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L781] with a '/' and a '?' prior to the addition of the query parameters.

This works fine for the reference odata [implementation|https://services.odata.org/TripPinRESTierService/(S(4gus0w41xmxedlzbywj2srqo))/People/?$filter=FirstName%20eq%20%27Scott%27] since can handle the extra '/'.

Since both teiid and the olingo4 tutorial use the olingo4 libraries, it would seem that the problem might be solved with them. However, it might be advantageous, given odata implementations already deployed, whether this odata-connector might check whether the '/' was supported before appending it?

(note. a bug [report|https://issues.jboss.org/browse/TEIID-5573] has been logged with the teiid project to this affect).

",,dmvolod,phantomjinx,,,,,,"dmvolod opened a new pull request #2681: CAMEL-13008: Odata-connector assumes '/' at end of URI
URL: https://github.com/apache/camel/pull/2681
 
 
   @phantomjinx, could you please review this fix. Is it enough for this issue?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Dec/18 13:48;githubbot;600","dmvolod closed pull request #2681: CAMEL-13008: Odata-connector assumes '/' at end of URI
URL: https://github.com/apache/camel/pull/2681
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
index 62bc8abd616..30bac11141f 100644
--- a/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
+++ b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java
@@ -778,7 +778,7 @@ private String createUri(String resourceUri, String resourcePath, String queryOp
 
         final StringBuilder absolutUri = new StringBuilder(resourceUri).append(SEPARATOR).append(resourcePath);
         if (queryOptions != null && !queryOptions.isEmpty()) {
-            absolutUri.append(""/?"" + queryOptions);
+            absolutUri.append(""?"" + queryOptions);
         }
         return absolutUri.toString();
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Dec/18 21:31;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 19 02:57:05 UTC 2018,,,,,,,,,,,"0|s01jl4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Dec/18 17:38;dmvolod;[~phantomjinx], could you please to test this issue with camel-olingo4 component as this fix looks like already present in implementation https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L199;;;","18/Dec/18 17:55;dmvolod;Added test and it's working fine from my point of view https://github.com/dmvolod/camel/tree/CAMEL-13008;;;","18/Dec/18 20:31;phantomjinx;So couple of things to consider:
 * [L199|https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L199] only handles trailing forward slashes at the end of the service uri and not the whole uri. The whole uri is not constructed until [L781|https://github.com/apache/camel/blob/44dacd6a5528c85c31c8a3de708ddeb0e7e4b52b/components/camel-olingo4/camel-olingo4-api/src/main/java/org/apache/camel/component/olingo4/api/impl/Olingo4AppImpl.java#L781], where the service uri, resource name and query options are concatenated together, eg.

{code:java}
ServiceURI (as seen at L199) -> http://192.168.88.5:8090/odata4/Products.svc
Method Name (Resource) -> Products
QueryOptions -> $filter=FirstName eq 'Scott'

Full URI built at L781 (note the '/?' added after '/Products'):
http://192.168.88.5:8090/odata4/Products.svc/Products/?$filter=FirstName eq 'Scott'
{code}
 
 * The test you've added uses the [reference|https://services.odata.org/TripPinRESTierService/(S(4gus0w41xmxedlzbywj2srqo))/People/?$filter=FirstName%20eq%20%27Scott%27] odata service, which handles trailing slashes correctly. If you construct a test server based on the olingo4 [tutorial|https://olingo.apache.org/doc/odata4/tutorials/read/tutorial_read.html], it will fail. If you would like to run up an existing implementation then feel free to copy the one I have created [here|https://github.com/phantomjinx/syndesis/blob/odata-connector-wip/app/connector/odata/src/test/java/io/syndesis/connector/odata/server/ODataTestServer.java].

 

The issue to reflect upon is the assumption of adding a slash with the question mark at L781. Obviously, some odata services will handle it but just in testing I have found that olingo's own tutorial and implementations of teiid both throw an error. There could well be many more odata services already deployed that would also fail in this fashion. Thus, maybe the slash should be removed entirely or a test done to check whether the slash is supported then acted on accordingly.;;;","19/Dec/18 02:57;dmvolod;[~phantomjinx], thanks for explanation, understood the problem root. Will fix it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Missing properties on Olingo4 consumer initialisation,CAMEL-13006,13204492,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 15:00,15/Jan/19 14:45,13/Jul/23 08:31,21/Dec/18 05:08,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"Essentially, after replacing the olingo4 component in the context to bypass the null [serviceUri issue|https://issues.apache.org/jira/browse/CAMEL-13005], the route moves on to initialising the Olingo4Consumer. The latter tests the '_read_' method to ensure all properties have been set [#(1)]. However, this fails due to the properties '_edm_' and '_responseHandler_' being missing.

Have come up with a test [#(2)] that demonstrates the problem.

These properties are not documented (since they appear to be output properties). However
, they are added into the property names collection of the endpoint [#(3)]. This collection is compared against the method signatures in the Olingo4AppEndpointConfiguration and neither _s/getEdm_ or _s/getResponseHandler_ exist hence the exception thrown.


{anchor:(1)} [1] https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/util/component/ApiConsumerHelper.java#L55
{anchor:(2)} [2] https://gist.github.com/phantomjinx/90ee08a989ddff4366d792cc621b36a9#file-properties-issue-java
{anchor:(3)} [3] https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Endpoint.java#L150
",,dmvolod,phantomjinx,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13061,,CAMEL-13005,,"20/Dec/18 11:45;phantomjinx;0001-CAMEL-13006-Fix-for-required-properties-in-odata-con.patch;https://issues.apache.org/jira/secure/attachment/12952524/0001-CAMEL-13006-Fix-for-required-properties-in-odata-con.patch",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 21 05:08:00 UTC 2018,,,,,,,,,,,"0|s01j2w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Dec/18 11:46;phantomjinx;Hi [~dmvolod]

Attached a possible fix for this for your consideration.;;;","21/Dec/18 05:08;dmvolod;Thanks [~phantomjinx] for reporting and provided fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
olingo4 component serviceUri not set,CAMEL-13005,13204488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,phantomjinx,phantomjinx,14/Dec/18 14:52,15/Jan/19 14:46,13/Jul/23 08:31,17/Dec/18 10:05,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,camel-olingo4,,,,,,0,,,,"I think there is a bug in the olingo4 component/endpoint. The [#(1)] states that the serviceUri can be used as a query hence
{code:java}
from(""olingo4://read/Products?serviceUri="" + serviceUri);{code}
However, adding this to a simple test script [#(2)], this results in an exception [#(3)] that the serviceUri has not been set. Digging into the code it seems that the _Olingo4Configuration_ is applied to the endpoint but only has the _apiName_ and _methodName_ set. Consequently, when the call _configuration.getServiceUri()_ is called, the value is null.

 

 [1] [https://github.com/apache/camel/blob/master/components/camel-olingo4/camel-olingo4-component/src/main/docs/olingo4-component.adoc]
  [2] [https://gist.github.com/phantomjinx/085df03915c5813a1f04b32e09d00049#filesimpleolingo4test-java]
  [3] [https://gist.github.com/phantomjinx/085df03915c5813a1f04b32e09d00049#gistcomment-2784671]",,dmvolod,phantomjinx,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13006,CAMEL-13062,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 17 08:29:47 UTC 2018,,,,,,,,,,,"0|s01j20:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Dec/18 17:40;dmvolod;Fixed. Thanks Paul for reporting.;;;","14/Dec/18 17:49;dmvolod;If you need to backport this issue to other Camel versions, let us know.;;;","14/Dec/18 18:01;phantomjinx;Hi [~dmvolod]

If it is possible to backport it to 2.21.0 then that would be great! As part of the fuse project, we take a fork of the camel project and apply bug fixes so probably depends on how complex the fix is.

Thx for the quick fix!;;;","17/Dec/18 08:29;dmvolod;Ok, [~phantomjinx], I will try to do this, but looks like some changes were introduced in 2.23 and OOB cherry-pick is not working.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel Proxy/Bridge - Premature end of Content-Length delimited message body,CAMEL-13004,13204479,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,vitorvr,vitorvr,14/Dec/18 13:37,26/Feb/19 11:21,13/Jul/23 08:31,25/Feb/19 12:38,2.22.0,,,,,,,,,,,,,,,2.22.0,,,,,camel-http4,camel-undertow,,,,,1,,,,"I'm using Camel Rest DSL to build endpoints to use as proxies between different networks.

I have created 2 endpoints. Below the code:

First:
{code:java}
restConfiguration().host(""localhost"").component(""undertow"").bindingMode(RestBindingMode.off); rest(""/endpoint?{1param}&{2param}"") .get(""/"") .route().routeId(""Ednpoint1"") .autoStartup(true) .setProperty(""uri"", simple(""http4://0.0.0.0:8080/endpoint?1param=${header.1param}&2param=${header.2param}"")) .setHeader(Exchange.HTTP_METHOD, constant(""GET"")) .removeHeaders(""CamelHttp*"") .toD(""${header.uri}"").endRest().responseMessage().message(""${body}"");{code}
 

Second:
{code:java}
restConfiguration().host(""localhost"").component(""undertow"").bindingMode(RestBindingMode.off); rest(""/endpoint?{param1}&{param2}"") .get(""/"") .route().routeId(""Endpoint2"") .autoStartup(true) .setProperty(""uri"", simple(""http4://endpoint-destionation/service?dhi=${header.param1}&dhf=${header.param2}"")) .setHeader(Exchange.HTTP_METHOD, constant(""GET"")) .removeHeaders(""*"") .toD(""${header.uri}"").endRest().responseMessage().message(""${body}"");{code}
 

I'm currently getting the following error:
{code:java}
org.apache.http.ConnectionClosedException: Premature end of Content-Length delimited message body (expected: 146541; received: 54482 at org.apache.http.impl.io.ContentLengthInputStream.read(ContentLengthInputStream.java:180) at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:137) at org.apache.http.conn.EofSensorInputStream.read(EofSensorInputStream.java:150) at org.apache.camel.util.IOHelper.copy(IOHelper.java:219) at org.apache.camel.util.IOHelper.copy(IOHelper.java:174) at org.apache.camel.util.IOHelper.copy(IOHelper.java:170) at org.apache.camel.component.http4.HttpProducer.doExtractResponseBodyAsStream(HttpProducer.java:414) at org.apache.camel.component.http4.HttpProducer.extractResponseBody(HttpProducer.java:397) at org.apache.camel.component.http4.HttpProducer.populateResponse(HttpProducer.java:242) at org.apache.camel.component.http4.HttpProducer.process(HttpProducer.java:203) at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:178) at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:445) at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:160) at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:126) at io.undertow.server.Connectors.executeRootHandler(Connectors.java:360) at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378) at java.lang.Thread.run(Thread.java:748){code}",,gilvansfilho,vitorvr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 26 11:21:38 UTC 2019,,,,,,,,,,,"0|s01j00:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Feb/19 02:14;gilvansfilho;I think I'm having same issue. I have a route camel which uses camel-undertow and camel-http4 to be used as gateway between two distinct web applications.
The route works fine when last endpoint response has small size. However when last endpoint response has large size I receive truncated data.

*Example of correct response:*
{code:java}
{ 
    ""field1"": ""something"", 
    ""field2"": ""something"", 
    ""field3"": ""something"" 
}
{code}
*Example of incorrect (truncated) response:*
{code:java}
{ 
    ""field1"": ""something"", 
    ""field2"": ""something"", 
    ""field3"": ""something"", 
    ""fiel
{code}
*This is my route:*
{code:java}
from(""undertow://0.0.0.0:8080/mec?httpMethodRestrict=POST,GET"") //receive only POST and GET http methods
.to(""http4://something/endpoint?bridgeEndpoint=true&throwExceptionOnFailure=false&copyHeaders=false"");{code}
The endpoint ""http4://something/endpoint"" response an JSON. As I already said, when response of ""http4://something/endpoint"" is small everything works fine. However when is large the route broke.

I appended a "".log"" after "".to(""http4://..."")"" and get (in log) complete response but when I make a request in a client (like postman) I receive truncated response.

 ;;;","21/Feb/19 11:51;vitorvr;Hi Gilvan, 

I found the issue.
In my case, I use Wildfly 13 to deploy my Camel Routes.
The problem is on the field Send Buffer inside HTTP Listener Undertow component.
 # Configuration⇒Subsystems⇒Web (Undertow)⇒Server ⇒default-server 
 # Listener⇒HTTP Listener

I change to value to 10000000, and now is working fine.

I don't know if this applies for your scenario, but can help you to solve it.;;;","26/Feb/19 11:21;gilvansfilho;Hi Vitor, I am using spring boot and undertow. In undertow component docs [https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/docs/undertow-component.adoc] i see this option *camel.component.undertow.host-options.buffer-size* to be used in application properties, I changed it but has no effect.

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Example documentation and feature not using new bundle artifactId,CAMEL-12999,13204247,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,miroslav@mibesis.si,miroslav@mibesis.si,13/Dec/18 14:18,13/Dec/18 14:41,13/Jul/23 08:31,13/Dec/18 14:41,,,,,,,,,,,,,,,,2.24.0,3.0.0,,,,documentation,,,,,,0,,,,"Example sub projects are not using changed groupId, most cases feature.xml is wrong, has to be changed from org.apache.camel to org.apache.camel.example.

 

I've pushed to Camel fork on GitHub, located at:

[https://github.com/mibesis/camel]

 

-I've not seen any Pull request on Camel GitHub page, so I do not know if you take pull requests or not. I can create pull request if you accept.-  (dont mine this, it was long day, and I've missed look existing PRs on GitHub ).",,miroslav@mibesis.si,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-13 14:18:27.0,,,,,,,,,,,"0|s01hkg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xquery syntax problem in SpringDSL with spring-boot,CAMEL-12994,13203930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,W.Y,W.Y,12/Dec/18 08:55,18/Dec/18 20:02,13/Jul/23 08:31,17/Dec/18 12:42,2.21.0,2.22.0,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-saxon,,,,,,0,,,,"this JAVADSL sytnax does not exist / supported in SpringDSL 
setHeader(""myHeader"").xquery(""resource:classpath:myxquery.txt"", String.class)


It will cause the problem if return type is String instead of DomReulst or xmlString for xquery, when we use SpringDSL instead of JAVADSL

 we tried all version >= 2.22, same problem ",,acosentino,davsclaus,jiad4701,W.Y,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Dec/18 16:13;W.Y;XqueryTest.zip;https://issues.apache.org/jira/secure/attachment/12951695/XqueryTest.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 18 20:02:46 UTC 2018,,,,,,,,,,,"0|s01fm0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Dec/18 09:10;davsclaus;Try with

{code}
<xquery type=""String"">resource:classpath:myxquery.txt</xquery>
{code}
;;;","12/Dec/18 09:12;acosentino;This is not a problem at first sight;;;","12/Dec/18 10:54;jiad4701;If I use a syntax like below
{code:xml}
<to uri=""xquery:xquery/myXquery.xq"" />
{code}
and my Xquery return plain text, then I got error:

*HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted.*

When I use a syntax like:
{code:xml}
<transform>
	<xquery type=""String"">""resource:classpath:xquery/myXquery.xq""</xquery>
</transform>
{code}
Then I got error: 
 *java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace*

 

With inline xquery like this I also got the error: *Misdeclaration of xmlns namespace*
{code:xml}
<transform>
<xquery>//*[text()]/text()</xquery>
</transofrm>
{code}

Did I something wrong here?;;;","12/Dec/18 13:41;davsclaus;You can also do 

<to uri=""xquery:xquery/myXquery.xq?resultType=String"" />

But please use user mailing list, gitter chat, stackoverflow etc. to ask for help on using Camel. The JIRA tracker is for actual bugs, ideas for improvements or new features etc.
See support page:
http://camel.apache.org/support.html;;;","13/Dec/18 08:04;W.Y;this problem only existing in SpringBoot autoconfig, (route file  has no camel context).

with normal Spring +Camel it is ok 

 

According to [http://camel.apache.org/spring-boot.html] , route xml should not contain

camelContext 

 

but  this example , it puts camel context into route xml file

[https://github.com/apache/camel/edit/master/examples/camel-example-spring-boot-xml/src/main/resources/my-camel.xml] 

 

it is quite confusing and confilcting for me ;;;","13/Dec/18 08:47;acosentino;The official doc is here:

[https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/docs/spring-boot.adoc]

 

The old documentation is deprecated/not updated anymore. There is a message on top of all pages.;;;","13/Dec/18 09:08;W.Y;then in my opinion ,  it is a bug for xquery  when using SpringDSL @ SpringBoot AutoConfig ;;;","13/Dec/18 11:15;davsclaus;Can you create a sample project and attach as either .zip file to this JIRA or put it on github for others to take a look at.
;;;","13/Dec/18 16:13;W.Y;[^XqueryTest.zip]

 

 

mvn spring-boot:run

copy input.xml from input to input/data

You will see below exception

---------------------------------------------------------------------------------------------------------------------------------------
RouteId ProcessorId Processor Elapsed (ms)
[Route1 ] [Route1 ] [file://input/data?moveFailed=.error ] [ 84]
[Route1 ] [convertBodyTo1 ] [convertBodyTo[java.lang.String] ] [ 17]
[Route1 ] [log1 ] [log ] [ 25]
[Route1 ] [transform1 ] [transform[xquery\{XQuery[null]}] ] [ 31]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------

org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:155) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:120) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:50) ~[camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:223) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:187) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.22.1.jar:2.22.1]
 at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.22.1.jar:2.22.1]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_181]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_181]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_181]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_181]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
 at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: java.lang.IllegalArgumentException: Misdeclaration of xmlns namespace
 at net.sf.saxon.query.StaticQueryContext.declareNamespace(StaticQueryContext.java:719) ~[Saxon-HE-9.8.0-12.jar:na]
 at org.apache.camel.component.xquery.XQueryBuilder.initialize(XQueryBuilder.java:721) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsString(XQueryBuilder.java:208) ~[camel-saxon-2.22.1.jar:2.22.1]
 at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:130) ~[camel-saxon-2.22.1.jar:2.22.1]
 ... 19 common frames omitted

 ;;;","17/Dec/18 12:14;davsclaus;Its a issue/change in Saxon library
https://stackoverflow.com/questions/50581191/camel-saxon-xquery-misdeclaration-of-xmlns-namespace;;;","17/Dec/18 12:35;davsclaus;We need to skip some specific xml prefixes according to the query spec which Saxon now complains about
https://www.w3.org/TR/xquery-31/#id-namespace-declaration;;;","17/Dec/18 12:38;davsclaus;Okay found the issue in camel-saxon and have it fixed now.
{code}
2018-12-17 13:38:14.213  INFO 13698 --- [le://input/data] Route1                                   : #### Body Before XQ Execution : ####
 <?xml version=""1.0"" encoding=""UTF-8""?>
<Envelope>
   <Header/>
   <Body>
      <getEmployee>
         <EmpId>123</EmpId>
      </getEmployee>
   </Body>
</Envelope>
2018-12-17 13:38:14.510  INFO 13698 --- [le://input/data] Route1                                   : #### Body After XQ Execution : ####
 123TestConcat
{code}

You need to set the result type to String in the XML DSL
{code}
		<transform>
			<xquery type=""String"">concat(/Envelope/Body/getEmployee/EmpId/text(),""TestConcat"")</xquery>
		</transform>
{code};;;","18/Dec/18 20:02;W.Y;When the fix version 2.22.3 will be available ?

or Where could I download the bug fix release 2.22.3 now?

Thanks!;;;",,,,,,,,,,,,,,,,
SftpEndpoint does not allow to use custom process strategy,CAMEL-12991,13203680,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kolas,kolas,11/Dec/18 10:45,12/Dec/18 09:32,13/Jul/23 08:31,12/Dec/18 09:32,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,3.0.0,,,camel-ftp,,,,,,0,,,,"SftpEndpoint always create generic file strategy even processStrategy object is set in endpoint, same code is used in FtpEndpoint so it's not working also
{code:java}
@Override
protected RemoteFileConsumer<SftpRemoteFile> buildConsumer(Processor processor) {
    return new SftpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
}{code}
it is working in FileEnpoint
{code:java}
protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations) {
    return new FileConsumer(this, processor, operations, processStrategy != null ? processStrategy : createGenericFileStrategy());
}{code}",,davsclaus,githubbot,kolas,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 12 09:32:30 UTC 2018,,,,,,,,,,,"0|s01e3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Dec/18 13:16;davsclaus;You are welcome to provide a PR with a fix;;;","11/Dec/18 15:30;githubbot;swalendzik opened a new pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 15:41;githubbot;onderson commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240663382
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   please remove

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 15:41;githubbot;onderson commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240663223
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   please remove

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 15:41;githubbot;onderson commented on issue #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#issuecomment-446248024
 
 
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 17:10;githubbot;swalendzik commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240705851
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   removed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 17:10;githubbot;swalendzik commented on a change in pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665#discussion_r240705944
 
 

 ##########
 File path: components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
 ##########
 @@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+/**
+ * @author Seweryn Walendzik on 12/11/18.
 
 Review comment:
   removed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Dec/18 09:19;githubbot;davsclaus closed pull request #2665: CAMEL-12991 setting processStrategy for sftp/ftp endpoints
URL: https://github.com/apache/camel/pull/2665
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
index 22a72ca61dc..51a590c9ae7 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
@@ -96,7 +96,7 @@ public String getScheme() {
     @Override
     protected RemoteFileConsumer<FTPFile> buildConsumer(Processor processor) {
         try {
-            return new FtpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
+            return new FtpConsumer(this, processor, createRemoteFileOperations(), processStrategy != null ? processStrategy : createGenericFileStrategy());
         } catch (Exception e) {
             throw new FailedToCreateConsumerException(this, e);
         }
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
index 069dfa7411d..41456f5d25b 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
@@ -62,7 +62,7 @@ public void setConfiguration(GenericFileConfiguration configuration) {
 
     @Override
     protected RemoteFileConsumer<SftpRemoteFile> buildConsumer(Processor processor) {
-        return new SftpConsumer(this, processor, createRemoteFileOperations(), createGenericFileStrategy());
+        return new SftpConsumer(this, processor, createRemoteFileOperations(), processStrategy != null ? processStrategy : createGenericFileStrategy());
     }
 
     protected GenericFileProducer<SftpRemoteFile> buildProducer() {
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
new file mode 100644
index 00000000000..13b2c45d9bb
--- /dev/null
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpConsumerProcessStrategyTest.java
@@ -0,0 +1,90 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+public class FtpConsumerProcessStrategyTest extends FtpServerTestSupport {
+
+    private MyStrategy myStrategy;
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        myStrategy = new MyStrategy();
+        jndi.bind(""myStrategy"", myStrategy);
+        return jndi;
+    }
+
+    private String getFtpUrl() {
+        return ""ftp://admin@localhost:"" + getPort() + ""/"" + FTP_ROOT_DIR + ""?password=admin&processStrategy=#myStrategy"";
+    }
+
+    @Test
+    public void testFtpConsume() throws Exception {
+        if (!canTest()) {
+            return;
+        }
+
+        sendFile(getFtpUrl(), ""Hello World"", ""hello.txt"");
+
+        String out = consumer.receiveBody(getFtpUrl(), 5000, String.class);
+        assertNotNull(out);
+        assertTrue(out.startsWith(""Hello World""));
+        assertEquals(""Begin should have been invoked 1 times"", 1, myStrategy.getInvoked());
+    }
+
+    private static class MyStrategy implements GenericFileProcessStrategy {
+
+        private volatile int invoked;
+
+        @Override
+        public void prepareOnStartup(GenericFileOperations operations, GenericFileEndpoint endpoint) throws Exception {
+            //noop
+        }
+
+        @Override
+        public boolean begin(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            return true;
+        }
+
+        @Override
+        public void abort(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        @Override
+        public void commit(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            invoked++;
+        }
+
+        @Override
+        public void rollback(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        int getInvoked() {
+            return invoked;
+        }
+    }
+}
\ No newline at end of file
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
new file mode 100644
index 00000000000..d3147285b49
--- /dev/null
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpConsumerProcessStrategyTest.java
@@ -0,0 +1,93 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote.sftp;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFile;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.GenericFileProcessStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.junit.Test;
+
+public class SftpConsumerProcessStrategyTest extends SftpServerTestSupport {
+
+    private MyStrategy myStrategy;
+
+    @Override
+    public boolean isUseRouteBuilder() {
+        return false;
+    }
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        myStrategy = new MyStrategy();
+        jndi.bind(""myStrategy"", myStrategy);
+        return jndi;
+    }
+
+    @Test
+    public void testSftpConsume() throws Exception {
+        if (!canTest()) {
+            return;
+        }
+
+        // create file using regular file
+        template.sendBodyAndHeader(""file://"" + FTP_ROOT_DIR, ""Hello World"", Exchange.FILE_NAME, ""hello.txt"");
+
+        String out = consumer.receiveBody(""sftp://localhost:"" + getPort() + ""/"" + FTP_ROOT_DIR + ""?username=admin&password=admin&processStrategy=#myStrategy"", 5000, String.class);
+        assertNotNull(out);
+        // Apache SSHD appends \u0000 at last byte in retrieved file
+        assertTrue(out.startsWith(""Hello World""));
+        assertEquals(""CustomProcessStrategy should have been invoked 1 times"", 1, myStrategy.getInvoked());
+    }
+
+    private static class MyStrategy implements GenericFileProcessStrategy {
+
+        private volatile int invoked;
+
+        @Override
+        public void prepareOnStartup(GenericFileOperations operations, GenericFileEndpoint endpoint) throws Exception {
+            //noop
+        }
+
+        @Override
+        public boolean begin(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            return true;
+        }
+
+        @Override
+        public void abort(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        @Override
+        public void commit(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            invoked++;
+        }
+
+        @Override
+        public void rollback(GenericFileOperations operations, GenericFileEndpoint endpoint, Exchange exchange, GenericFile file) throws Exception {
+            //noop
+        }
+
+        int getInvoked() {
+            return invoked;
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Dec/18 09:32;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,
camel-core-osgi: OsgiServiceRegistry.onContextStop never gets called.,CAMEL-12987,13203243,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,09/Dec/18 02:58,11/Dec/18 13:22,13/Jul/23 08:31,11/Dec/18 13:22,2.18.0,2.19.0,2.20.0,2.21.0,2.22.0,2.23.0,2.24.0,,,,,,,,,2.22.3,2.23.1,2.24.0,,,camel-osgi,,,,,,0,,,,"There is also a second problem with how the registry is being managed within the OsgiDefaultCamelContext.  OsgiServiceRegistry is currently extends LifecycleStrategySupport which is suppose to unload the serviceReferenceQueue onContextStop.  However the registry is never getting added to the CamelContext to manage the Lifecycle because the overridden createRegistry method in OsgiDefaultCamelContext is not being called.  This is because the registry is being set in the constructor of OsgiDefaultCamelContext with
{code:java}
super(registry);{code}
this calls the DefaultCamelContext implementation of createRegistry which does not add the registry to lifecyclemanagement since
{code:java}
OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);{code}
is never called. 

See CAMEL-12969 for screen captures.

 ","Java 10

Karaf 4.2.1

Camel 2.22.0",bobpaulin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Tue Dec 11 13:22:37 UTC 2018,,,,,,,Patch Available,,,,"0|s01bf4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Dec/18 03:06;githubbot;bobpaulin opened a new pull request #2660: CAMEL-12987: Ensure onContextStop is called on the OsgiServiceRegistry.
URL: https://github.com/apache/camel/pull/2660
 
 
   Split the onContextStop issue out of CAMEL-12969.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Dec/18 09:52;githubbot;davsclaus closed pull request #2660: CAMEL-12987: Ensure onContextStop is called on the OsgiServiceRegistry.
URL: https://github.com/apache/camel/pull/2660
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
index 08ff669c59f..2b9b1fc4e60 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
@@ -56,14 +56,23 @@ public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bu
     public static Registry wrapRegistry(CamelContext camelContext, Registry registry, BundleContext bundleContext) {
         ObjectHelper.notNull(bundleContext, ""BundleContext"");
 
-        LOG.debug(""Setting up OSGi ServiceRegistry"");
-        OsgiServiceRegistry osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+        OsgiServiceRegistry osgiServiceRegistry = null;
+        Registry resultingRegistry = registry;
+        if(registry instanceof OsgiServiceRegistry) {
+            osgiServiceRegistry = (OsgiServiceRegistry)registry;
+        } else {
+            LOG.debug(""Wrapping Registry in OsgiServiceRegistry"");
+            osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+            CompositeRegistry compositeRegistry = new CompositeRegistry();
+            compositeRegistry.addRegistry(osgiServiceRegistry);
+            compositeRegistry.addRegistry(registry);
+            resultingRegistry = compositeRegistry;
+        }
+        
         // Need to clean up the OSGi service when camel context is closed.
         camelContext.addLifecycleStrategy(osgiServiceRegistry);
-        CompositeRegistry compositeRegistry = new CompositeRegistry();
-        compositeRegistry.addRegistry(osgiServiceRegistry);
-        compositeRegistry.addRegistry(registry);
-        return compositeRegistry;
+        
+        return resultingRegistry;
     }
 
 }
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
index 20e3a21eca0..821ef5d7978 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
@@ -32,7 +32,6 @@
 public class OsgiDefaultCamelContext extends DefaultCamelContext {
 
     private final BundleContext bundleContext;
-    private final Registry registry;
 
     public OsgiDefaultCamelContext(BundleContext bundleContext) {
         this(bundleContext, new OsgiServiceRegistry(bundleContext));
@@ -41,7 +40,7 @@ public OsgiDefaultCamelContext(BundleContext bundleContext) {
     public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         super(registry);
         this.bundleContext = bundleContext;
-        this.registry = registry;
+        setRegistry(OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext));
         OsgiCamelContextHelper.osgiUpdate(this, bundleContext);
         // setup the application context classloader with the bundle classloader
         setApplicationContextClassLoader(new BundleDelegatingClassLoader(bundleContext.getBundle()));
@@ -52,15 +51,6 @@ public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         return BundleContextUtils.findComponents(bundleContext, this);
     }
 
-    @Override
-    protected Registry createRegistry() {
-        if (registry != null) {
-            return OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);
-        } else {
-            return OsgiCamelContextHelper.wrapRegistry(this, super.createRegistry(), bundleContext);
-        }
-    }
-
     @Override
     protected TypeConverter createTypeConverter() {
         // CAMEL-3614: make sure we use a bundle context which imports org.apache.camel.impl.converter package


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Dec/18 13:22;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce streaming api breaks after access token expires and a timeout happens when re logging in.,CAMEL-12986,13203174,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hnguyen15,hnguyen15,08/Dec/18 00:21,07/Jan/19 22:59,13/Jul/23 08:31,07/Jan/19 22:59,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-salesforce,,,,,,0,,,,"*When using salesforce version 37 or earlier my push topics and streaming api runs forever with little to no issues. I tested expiring access tokens and hitting timeouts to mimic network failures. I debug the code and saw that there where retries for network failures. The type login I'm using is refresh token.*

 

*I switch over to version 44 using code from camel 2.21.0 and saw a lot of 403 and timeouts and null pointers caused by timeouts that would kill the push topic subscription. Usually when the process dies I see null pointers than this message and no more push topic action happens.* 

org.apache.camel.component.salesforce.api.SalesforceException: Login request timeout: null
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:135)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.createClient(SubscriptionHelper.java:345)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.doStart(SubscriptionHelper.java:108)
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:277)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
Caused by: java.util.concurrent.TimeoutException: null
 at org.eclipse.jetty.client.util.FutureResponseListener.get(FutureResponseListener.java:109)
 at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:655)
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:129)
 ... 6 common frames omitted
15:51:51.531 [HttpClient@507583873-24] WARN org.eclipse.jetty.util.thread.QueuedThreadPool - 
java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:284)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
15:51:53.256 [HttpClient@507583873-24] WARN org.eclipse.jetty.util.thread.QueuedThreadPool - Unexpected thread death: org.eclipse.jetty.util.thread.QueuedThreadPool$3@4d71480c in HttpClient@507583873\{STARTED,8<=8<=200,i=3,q=0}

 

*When I switch to 2.23.0 I think the issue doesn't happen as often but I still need to do testing for long periods of time to be sure.* 

 

*To recreate the issue put a breakpoint at SalesforceSession on this line* 

 ** final ContentResponse loginResponse = loginPost.send();

*Start up the app and let the first login happen to establish an auth session. Then go to the AuthSession table and delete the row that correspond to the connection for your application, the SessionType should be Oauth2.*

*Then you have to wait for a while for the system to realize that the session has to expire and we need to get a new access token. If you create a timeout exception I think you can cause this to happen faster but I usually wait up to 5 minutes for the loginPost.send() breakpoint to hit. To cause a timeout go to FutureResponseListener.java and debug and set the expired value true.*

        **        if (expired)

            throw new TimeoutException();

 *So for the version 2.21.0 when I step over everything during loginPost.send(); there an exception thrown the client object becomes null and we get a null pointer and the subscription stops.*

 

*For version 2.23.0 the timeout doesn't happen every time so again you have to throw a timeout by going through* *FutureResponseListener and creating a timeout. This is a problem because my jobs always stops taking push action after a couple of days. 37 version code would retry on network issues but the new code will throw a null pointer exception on client when theres a timeout on the login process and cause the subscription to die.* **

 ",,hnguyen15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 07 22:59:50 UTC 2019,,,,,,,,,,,"0|s01b00:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"08/Dec/18 00:38;hnguyen15;Actually for version 2.21.0 to recreate the issue all you need to do is let let the app login once that delete the auth session and wait for it to crash.

If you do this with 2.23.0 It wont crash it will re establish a connection unless you manually tell it to do a timeout.;;;","07/Jan/19 22:59;hnguyen15;This error doesn't happen anymore after the 2.23.0 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
TransactionErrorHandler fails if UnitOfWork is null -- This seems to happen sometimes with intercepted routes,CAMEL-12985,13203112,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jsightle@redhat.com,jsightle@redhat.com,07/Dec/18 18:06,10/Dec/18 07:50,13/Jul/23 08:31,10/Dec/18 07:50,,,,,,,,,,,,,,,,2.22.3,2.23.1,2.24.0,3.0.0,,camel-spring-boot,,,,,,0,,,,"I have been getting NullPointerExceptions on tests for transacted routes as a result of this.

 

PR: [https://github.com/apache/camel/pull/2659] (includes unit test that fails on master)

 ",,jsightle@redhat.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-12-07 18:06:41.0,,,,,,,,,,,"0|s01amg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bundle in 'Active' State but Camel Context not initialized,CAMEL-12980,13202715,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,ggrzybek,xldai,xldai,06/Dec/18 07:47,19/Dec/19 17:30,13/Jul/23 08:31,11/Jan/19 09:53,2.20.1,2.21.1,,,,,,,,,,,,,,2.21.5,2.22.3,2.23.1,2.24.0,3.0.0,camel-blueprint,,,,,,5,,,,"The camel context can't get initialized when validation of the RouteDefinition failed (e.g. typo in Uri or add an unsupported option in Uri), but when deploy the blueprint, the CamelContext startup and then shutdown, but the bundle status is still 'Active', only a FailedToCreateRouteException ERROR is logged.

318 │ Active  │  80 │ 0.0.0                 │ blueprint.xml

Attached the simple blueprint.xml for reproduce it.

The expected behaviour is the bundle is in the 'Failure' status in this case.

The fix proposal from my side is, move the call of ""this.maybeStart()"" from blueprintEvent() method to the constructor of the BlueprintCamelContext class. then this kind of Route definition error can be processed during the Blueprint ""CREATING"" phase. Currently, the start() is invoked after Blueprint in ""CREATED"" phase. (I tested this fix locally and have the expected 'Failure' bundle status) 

(This issue is found in Camel 2.20.x, 2.21.x, but it may affects also on master branch)",,davsclaus,ggrzybek,jbonofre,owulff,xldai,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10513,,,,"06/Dec/18 07:42;xldai;blueprint.xml;https://issues.apache.org/jira/secure/attachment/12950801/blueprint.xml",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 15 10:26:58 UTC 2019,,,,,,,,,,,"0|s0186o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Dec/18 11:53;davsclaus;Yeah noticed this with 2.24 as well.;;;","19/Dec/18 11:57;ggrzybek;Sorry I missed that - let me check;;;","19/Dec/18 12:03;ggrzybek;CAMEL-10513 moved the initialization to after {{BlueprintEvent.CREATED}} state.

The {{Active}} in {{318 │ Active │ 80 │ 0.0.0 │ blueprint.xml}} means the _bundle_ is active. You should however not treat _bundle_ and its _blueprint container_ as the same thing!
A _bundle_ should be treated as kind of _carrier_ of blueprint description, which is then processed by _blueprint extender_, which monitors bundles being installed, resolved, started and stopped. _blueprint extender_ may pick up your *started* bundle and _attempt_ processing the blueprint descriptor it carries.

You can imagine a bundle that:
* creates a thread that waits till next Halloween
* this thread registers blueprint container manually
* this thread fails

I don't think moving back {{this.maybeStart()}} to constructor is good idea. Events are the way to synchronize actions within OSGi. And it's perfectly fine that _active_ bundle wasn't correctly processed by _blueprint extender_. Such bundle may do many other things that don't fail (register OSGi services manually, register SCR components or alter CM configurations).;;;","19/Dec/18 12:04;ggrzybek;Even if you drop {{blueprint.xml}} file to {{deploy/}} it doesn't matter - it's wrapped inside a bundle that's started/activated and _blueprint extender_ processes the XML - despite it's the *only* thing such bundle provides.;;;","19/Dec/18 12:17;davsclaus;Yeah but the big problem for the normal user of Camel on OSGi Blueprint is that their Camel application failed to startup and they can't see this in the list which they used to do in the past. eg this is how camel-blueprint runs on OSGi, not some vanilla blueprint app that are NOT using Camel.

If you run the same Camel application outside OSGi such as standalone then it will fail to start and an exception is thrown and the JVM terminated. 

So we should somehow get the failure to startup the CamelContext (due to thrown exception) propagatede into blueprint and let the bundle go into some kind of error state. 

;;;","19/Dec/18 12:23;ggrzybek;True. Because blueprint should _break_ after CREATED. TBH we had already several problems with CAMEL-10513... Let me think about it.;;;","20/Dec/18 02:53;xldai;Thanks [~davsclaus], [~ggrzybek]!

Yes, moving maybeStart() to constructor is not good, it also breaks many of the ""unit test"" and ""itest"" in the Camel tests/camel-blueprint-test and tests/camel-itest-osgi.

Maybe the BlueprintComponentResolver can be extended a bit? or something like an ""URIResolver"" can be introduced to do this kind of validation. (Currently, given a wrong component name e.g (""aaatimer:"" insteadof ""timer:"") in the blueprint xml, the the blueprint bundle is in ""GracePeriod"" status and finally ""Failure"" status after timeout.)
{code:java}
Bundle blueprint.xml/0.0.0 is waiting for dependencies [(&(component=aaatimer)(objectClass=org.apache.camel.spi.ComponentResolver))]
{code};;;","20/Dec/18 07:17;davsclaus;The problem with using a component name that has not been installed is fine IMHO. It allows the bundle to wait a bit for it to be installed and fail after the timeout.

Its the other problems that are worse when Camel cannot startup due to an exception on startup, which should cause the bundle to be in Failure state and not Active as today. ;;;","20/Dec/18 07:44;xldai;I was not clear enough ~

I didn't blame the behaviour when component name is wrong, it's good and expected status (""Failure""). I meant that any possibility if the BlueprintComponentResolver can be enhanced to also doing the URI validation for fix this Jira issue.;;;","21/Dec/18 14:19;davsclaus;No

But there is some existing Camel tooling that can check your source code and report potential issues. See the maven tooling validate at:
https://github.com/apache/camel/blob/master/tooling/maven/camel-maven-plugin/src/main/docs/camel-maven-plugin.adoc

;;;","07/Jan/19 10:28;ggrzybek;I read again through https://github.com/apache/camel/pull/1297 and CAMEL-10513 and tbh, I prefer *not to* revert CAMEL-10513 (as this CAMEL-12980 is effectively a revert of CAMEL-10513).

What convinced me is:
bq. The example would fail if the autoStartup=""false"" attribute were present in the XML as well

Indeed, starting (optionally) a Camel context after {{BlueprintEvent.CREATED}} separates Blueprint and Camel lifecycles. While there's one benefit of not doing it:
* seeing {{Failed}} in a list of bundles

I think there are more drawbacks:
* handling contexts with _auto startup_ set to {{false}}
* suggesting that Camel context *is* blueprint container, but a container for bundle may declare more contexts and/or also one context may be implemented in different bundles (importing routes defined in separate bundles)
* reviewing all the adjustments we had to make after accepting CAMEL-10513

In my opinion it's better to use dedicated Camel commands to check status of Camel contexts/routes.;;;","07/Jan/19 10:45;davsclaus;Yeah we had some hard problems with blueprint and lifecycle between camel, blueprint and osgi/karaf. The last many years it has been stable after the work of CAMEL-10513. So maybe we can find an alternative solution if there is some way of having some event notification or background thread that tracks the startup of the camel context and can report ""somehow"" to osgi/karaf/blueprint.

And we could also see if the existing camel karaf commands can show the state of all bundles with camel, then you can find which bundles are in error etc. ;;;","07/Jan/19 11:01;ggrzybek;+1 for enhancing {{camel:context-list}} ({{org.apache.camel.commands.ContextListCommand}}) command instead.

Unfortunately, now, {{camel:context-list}} doesn't return any blueprint-based Camel context that has failed - because relevant OSGi service ({{(objectClass=org.apache.camel.CamelContext)}}) is not registered.;;;","10/Jan/19 10:04;owulff;This issue becomes more critical when your camel route publishes CXF endpoints. Blueprint will then start the CXF endpoints successfully but something else goes wrong with the route initialization. The CXF endpoints are successfully published (including the initialization of some CXF features which registers at a central service) but they can't be called via SOAP/REST because the camel route is not started successfully.

 

IMHO, the OSGi specification states the following that a bundle is in the {{ACTIVE}} state when it has been successfully started and activated.

https://osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#ACTIVE

 

 

If the bundle uses Camel for its implementation, the bundle should not be in ACTIVE mode when something went wrong during the initialization. Further, all beans which has been initialized should be properly removed.

 

The implementation for spring-dm works perfectly fine. I think it should work in the same way for blueprint.

 ;;;","10/Jan/19 13:16;ggrzybek;I understand the problem... CAMEL-10513 was a big change, but actually not against any specification... It's especially true with context using {{autoStart=""false""}}.

bq. A bundle is in the ACTIVE state when it has been successfully started and activated. 

means exactly this - ""activated"" == ""called BundleActivator.start()"" which is NOT the same as successfully starting Camel Context or *even* creating Blueprint Container.

But if we look at blueprint specification:
{quote}
*121.3.2.2 Failure*
If at any time there is a failure, the Blueprint Container must:
# State = FAILURE
# Unregister the Blueprint Container service.
# Destroy the Blueprint Container.
# Wait for the Blueprint bundle to be stopped.
{quote}

Which may be a reason to call back from failed Camel context/route to their blueprint container.

{{org.osgi.service.blueprint.container.BlueprintContainer}} doesn't have any such callback methods, but {{org.apache.aries.blueprint.services.ExtendedBlueprintContainer}} may be called to grab {{org.osgi.service.blueprint.container.BlueprintListener}} to send Failure event like this:
{code:java}
ExtendedBlueprintContainer.getEventDispatcher().blueprintEvent(new BlueprintEvent(BlueprintEvent.FAILURE, getBundle(), getExtenderBundle(), new Throwable(""Camel context says: oops""));
{code}

Then Karaf would catch such event using {{org.apache.karaf.bundle.state.blueprint.internal.BlueprintStateService}} and alter output of {{bundle:list}}.

I think it's doable.

The problem/confusion may be with this scenario:
# bundle with blueprint.xml and Camel Context using autostart=false is installed/started
# blueprint is successfull
# bundle is ACTIVE
# one year later someone actually starts Camel context
# bundle becomes FAILED

no problem for me, but may be confusing for others.;;;","10/Jan/19 13:39;owulff;I agree with you it's true if autoStart is false. In this case, the bundle developer explicitly decides (default is autoStart=true) that the bundle is properly started and active without starting the camel context. In the other case, the bundle developer decides or assumes that the bundle is properly started and active if starting the camel context is successfull as well.

This is working as described for Spring-DM and standalone, but different for Blueprint.

If the lifecycle of blueprint and camel is not aligned you end up with half-way startup as explained above. CXF endpoints published via HTTP but the route with the CXF endpoints is not started.;;;","10/Jan/19 13:45;davsclaus;autoStartup=false means only the routes are not started. CamelContext is ALWAYS started.;;;","10/Jan/19 13:52;jbonofre;I would extend to blueprint lifecycle.;;;","10/Jan/19 13:52;davsclaus;In Gregors example then with autoStartup=false, we should just ""see this"" as a camel context with 0 routes. Its something the user explicit decided to not start the routes on startup. When he/she start them later, then errors may happen, just as it can happen later on if you start/stop routes at runtime etc. I think in this situation the bundle should still be active.

But in the normal use-case I also think that its ideal that the bundle becomes failed if CamelContext cannot fully startup and run successfully.
;;;","10/Jan/19 13:52;ggrzybek;Thanks. But because it's {{FailedToCreateRouteException}}, I assume that anything may break at any time, so looks like Camel-specific {{org.apache.karaf.bundle.core.BundleStateService}} (there's already scr, blueprint and spring-dm specific) implementation is the best idea (for now).;;;","10/Jan/19 13:58;jbonofre;I would do the following:

1. {{BlueprintCamelContext}} could register an Camel implement of Karaf {{BundleStateService}}. It could be optional if the user doesn't want to run Camel in Karaf (even I think it never happens ;)).
2. We hook the camel context/route lifecycle to the bundle thanks to this service
3. Thanks to this light {{BundleStateService}} service, we can retrieve all failing info, and react accordingly

Just my $0.01.;;;","11/Jan/19 09:21;ggrzybek;OK, Here's what I did. With sample blueprint.xml with *two* contexts (one bad, one correct):
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""> 
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint""> 
        <route id=""r1""> 
            <from uri=""timer://simpleTimer?period=1000&amp;repeatCount=0&amp;funnyopt=1"" /> 
            <setBody> <simple>Hello World 1</simple> </setBody> 
            <to uri=""log:test"" />
        </route> 
    </camelContext> 
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint""> 
        <route id=""r2""> 
            <from uri=""timer://simpleTimer?period=1000&amp;repeatCount=0"" /> 
            <setBody> <simple>Hello World 2</simple> </setBody> 
            <to uri=""log:test"" />
        </route> 
    </camelContext> 
</blueprint> 
{code}

I've installed it using {{install -s blueprint:file:///data/tmp/blueprint.xml}} and saw:

Working and visible context 2:
{noformat}
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-4        Started                   7              0              0   7.662 seconds  
karaf@root()> route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime         
 -------        -----          ------              -------       --------     ----------   ------         
 camel-4        r2             Started                   9              0              0   9.213 seconds  
{noformat}

Correct state for a bundle:
{noformat}
karaf@root()> la -l|grep blueprint.xml
65 │ Failure  │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

Additional diagnostic information:
{noformat}
karaf@root()> bundle:diag 65
Bundle 65
---------
Status: Failure
Camel Blueprint
Camel context ""camel-1""
Exception: Failed to create route r1: Route(r1)[[From[timer://simpleTimer?period=1000&repeatCount=... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
org.apache.camel.FailedToCreateRouteException: Failed to create route r1: Route(r1)[[From[timer://simpleTimer?period=1000&repeatCount=... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:217)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1140)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3735)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3440)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:254)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:296)
	at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:187)
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190)
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:753)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:227)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:122)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:75)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:98)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1332)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:212)
	... 24 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:215)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:139)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:706)
	... 32 more

{noformat}

After stopping the bundle, the status is correct and contexts are gone:
{noformat}
karaf@root()> context-list
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Resolved │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

There's single instance of new {{BundleStateService}} exposed from blueprint bundle (regardles of number of contexts it exposes):
{noformat}
karaf@root()> bundle:services -p 65                                                                              

Bundle 65 provides:
-------------------
objectClass = [org.apache.karaf.bundle.core.BundleStateService]
service.bundleid = 65
service.id = 156
service.scope = singleton
...
{noformat}

This new service is used by {{org.apache.camel.blueprint.BlueprintCamelContext#start()}} to track state of the bundle and context.

After fixing first camel context we see the state changed and diagnostic info removed:
{noformat}
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-7        Started                   6              0              0   6.989 seconds  
 camel-8        Started                   6              0              0   6.963 seconds  
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Active   │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
{noformat}

And blueprint bundle exposes 6 services:
{noformat}
karaf@root()> bundle:services 65

Bundle 65 provides:
-------------------
[org.apache.karaf.bundle.core.BundleStateService]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintContainer]
[org.apache.camel.CamelContext]
[org.apache.camel.CamelContext]
{noformat}

camel-blueprint bundle imports additional package (optionally):
{noformat}
org.apache.karaf.bundle.core;resolution:=optional;version=""[4,5)""
{noformat}

If (somehow), this package is not available (wrong Karaf version or no Karaf at all), everything works fine, but bundle is Active (again, with one correct and one broken context):
{noformat}
karaf@root()> bundle:diag 65
karaf@root()> la -l|grep blueprint.xml
65 │ Active   │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
karaf@root()> context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime          
 -------        ------              -------       --------     ----------   ------          
 camel-4        Started                  18              0              0   18.667 seconds  
{noformat}

And no extra, Karaf-related OSGi service is exposed:
{noformat}
karaf@root()> bundle:services 65

Bundle 65 provides:
-------------------
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintListener]
[org.osgi.service.blueprint.container.BlueprintContainer]
[org.apache.camel.CamelContext]
{noformat}

If there's actual Blueprint (non-Camel) problem, we can see it too:
{noformat}
karaf@root()> la -l|grep 65
65 │ Failure  │  80 │ 0.0.0           │ blueprint:file:///data/tmp/blueprint.xml
karaf@root()> bundle:diag 65                                                                                 
Bundle 65
---------
Status: Failure
Blueprint
1/11/19 10:38 AM
Exception: 
Unable to validate xml
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to validate xml
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:349)
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:336)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:345)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730)
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
	at org.apache.karaf.bundle.command.Start.executeOnBundle(Start.java:38)
	at org.apache.karaf.bundle.command.BundlesCommand.doExecute(BundlesCommand.java:65)
	at org.apache.karaf.bundle.command.BundlesCommand.execute(BundlesCommand.java:55)
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84)
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68)
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:599)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:526)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:415)
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:416)
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229)
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.xml.sax.SAXParseException; cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelaContext'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:396)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:284)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:453)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3231)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1912)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:741)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.beginNode(DOMValidatorHelper.java:277)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:244)
	at com.sun.org.apache.xerces.internal.jaxp.validation.DOMValidatorHelper.validate(DOMValidatorHelper.java:190)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:109)
	at javax.xml.validation.Validator.validate(Validator.java:124)
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:346)
	... 34 more

{noformat};;;","11/Jan/19 10:17;davsclaus;Great work Grzegorz;;;","15/Jan/19 10:11;xldai;Hi [~ggrzybek]  I did a quickly test by applying the fixes onto camel-blueprint 2.21.2. yes, the bundle status now it's shown as expected (Failure in case). but one thing I found that the Camel context is still started and then getting shutdown quickly in case of wrong definition in the URI of the Route. 

 
{code}
2019-01-15T17:30:51,141 | INFO  | fileinstall-H:\product\7.1.1GA\Talend-Runtime-V7.1.1/deploy | install.internal.Util$OsgiLogger  205 | 10 - org.apache.felix.fileinstall - 3.6.4 | Installing bundle blueprint.xml / 0.0.0
2019-01-15T17:30:52,049 | INFO  | Blueprint Event Dispatcher: 1 | .blueprint.BlueprintCamelContext  187 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Attempting to start CamelContext: camel-1
2019-01-15T17:30:52,051 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3143 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is starting
2019-01-15T17:30:52,053 | INFO  | Blueprint Event Dispatcher: 1 | gement.ManagedManagementStrategy  205 | 226 - org.apache.camel.camel-core - 2.21.2 | JMX is enabled
2019-01-15T17:30:52,270 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3501 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is shutting down
2019-01-15T17:30:52,283 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3592 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) uptime 0.232 seconds
2019-01-15T17:30:52,284 | INFO  | Blueprint Event Dispatcher: 1 | e.camel.impl.DefaultCamelContext 3593 | 226 - org.apache.camel.camel-core - 2.21.2 | Apache Camel 2.21.2 (CamelContext: camel-1) is shutdown in 0.014 seconds
2019-01-15T17:30:52,284 | WARN  | Blueprint Event Dispatcher: 1 | print.BlueprintCamelStateService   79 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Changing Camel state for bundle 316 to Failure
2019-01-15T17:30:52,284 | ERROR | Blueprint Event Dispatcher: 1 | .blueprint.BlueprintCamelContext  190 | 224 - org.apache.camel.camel-blueprint - 2.21.2 | Error occurred during starting CamelContext: camel-1
org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[timer://simpleTimer?period=1000&repeatCo... because of Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: Failed to resolve endpoint: timer://simpleTimer?funnyopt=1&period=1000&repeatCount=0 due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{funnyopt=1}]
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:209) [226:org.apache.camel.camel-core:2.21.2]
    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1145) [226:org.apache.camel.camel-core:2.21.2]{code}

Is it possible to enhance the fixes by stop doing the Context start/shutdown? 
Thanks;;;","15/Jan/19 10:22;davsclaus;No its not possible. Camel must be started up to detect the error.;;;","15/Jan/19 10:26;ggrzybek;Agree with [~davsclaus].;;;",,,
WARN: No CamelContext defined yet so cannot inject into bean: org.apache.camel.converter.jaxb.FallbackTypeConverter,CAMEL-12975,13202045,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,pascalschumacher,pascalschumacher,03/Dec/18 16:33,17/Jun/19 18:51,13/Jul/23 08:31,17/Jun/19 18:51,2.23.0,2.24.0,,,,,,,,,,,,,,2.23.3,2.24.1,2.25.0,,,camel-jaxb,camel-spring-boot-starters,,,,,0,,,,"I'm using camel-jaxb-starter 2.23.0 in combination with Spring Boot 2.1.1.

During start-up this warning is displayed:

{{WARN 15204 --- [           main] o.a.c.i.DefaultCamelBeanPostProcessor    : No CamelContext defined yet so cannot inject into bean: org.apache.camel.converter.jaxb.FallbackTypeConverter}}

Otherwise everything is working fine (as far as I can tell).

I created a minimal project that allows reproducing this warning: https://github.com/PascalSchumacher/CamelJaxbStartupWarning",,davsclaus,ffang,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12087,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 17 17:23:41 UTC 2019,,,,,,,,,,,"0|s01454:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Jun/19 08:02;davsclaus;Can you try with latest version;;;","13/Jun/19 09:11;pascalschumacher;The warning still occurs with Camel 2.24.0 and Spring Boot 2.1.5.;;;","17/Jun/19 17:23;ffang;I think we also need to add org.apache.camel.DeferredContextBinding annotation to org.apache.camel.converter.jaxb.FallbackTypeConverter(for camel 2.x) to get rid of the WARN message.

Btw, it's not a problem anymore for Camel 3.x since FallbackTypeConverter isn't CamelContextAware anymore.



;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Route coverage: When and otherwise are not marked as covered,CAMEL-12974,13202040,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,03/Dec/18 16:07,30/Dec/18 10:15,13/Jul/23 08:31,30/Dec/18 10:15,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,3.0.0,tooling,,,,,,0,,,,"- use a route with a choice with when and otherwise inside.
- launch mvn test camel:route-coverage
- when and otherwise are marked with a 0 count even if they were used

examples of the CBR examples available in Eclipse Fuse Tooling:
{noformat}Route:	cbr-route

  Line #      Count   Route
  ------      -----   -----
      33          5   from
      34          5     log
      35          5     choice
      36          0       when
      38          2         log
      39          2         to
      41          0       when
      43          2         log
      44          2         to
      46          0       otherwise
      47          1         log
      48          1         to
      51          5     log

Coverage: 10 out of 13 (76.9%){noformat}

we can notice that elements inside when and otherwise are well counted but when and otherwise are at 0",,apupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 30 10:11:13 UTC 2018,,,,,,,,,,,"0|s01440:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Dec/18 13:11;davsclaus;Its a bit by design as they are just placeholders to build up the route structure with the indention. ;;;","05/Dec/18 13:17;apupier;I think it is a bug because when using the failOnError config, the build is failing although all paths are covered.;;;","05/Dec/18 20:38;davsclaus;Ah good point if that option causes it to fail;;;","30/Dec/18 10:03;davsclaus;The Java DSL does not include when/otherwise etc
{code}
[INFO] Discovered 1 routes
[INFO] Route coverage summary:

Class:	sample.camel.MyCamelRouter
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      32          2   from
      33          2     transform
      34          2     choice
      36          1       to
      38          1       to
      41          2     to

Coverage: 6 out of 6 (100.0%)
{code};;;","30/Dec/18 10:05;davsclaus;But the XML DSL includes them
{code}
[INFO] Route coverage summary:

File:	my-camel.xml
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      28          1   from
      29          1     transform
      32          1     choice
      33          0       when
      35          0         to
      37          0       otherwise
      38          1         to
      41          1     to

Coverage: 5 out of 8 (62.5%)
{code};;;","30/Dec/18 10:11;davsclaus;Okay made the XML and Java DSL similar with the CBR
{code}
[INFO] Route coverage summary:

File:	my-camel.xml
Route:	hello

  Line #      Count   Route
  ------      -----   -----
      28          1   from
      29          1     transform
      32          1     choice
      35          0       to
      38          1       to
      41          1     to

Coverage: 5 out of 6 (83.3%)
{code};;;",,,,,,,,,,,,,,,,,,,,,,,
AbstractCamelWorkItemHandler init fails when WIH is loaded before CamelContext is created.,CAMEL-12973,13201953,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,swiderski.maciej,ddoyle,ddoyle,03/Dec/18 10:37,04/Dec/18 13:09,13/Jul/23 08:31,04/Dec/18 13:07,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,,,,camel-jbpm,,,,,,0,,,,"When the AbstractCamelWorkItemHandler is created before the referenced CamelContext is created and registered, deployment of a KJAR fails with an IllegalArgumentException.

This can happen when the deployment uses a combination of a Singleton RuntimeStrategy and a Deployment-scoped CamelContext. This is due to the fact that the jBPM KIE-Server extension runs after the jBPM extension.

In such a situation we need to defer the creation of the ProducerTemplate until the first call to WIH.execute.",,ddoyle,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 04 13:09:10 UTC 2018,,,,,,,,,,,"0|s013ko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Dec/18 10:58;githubbot;DuncanDoyle opened a new pull request #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649
 
 
   …ped context in combination with Singleton RuntimeStrategy. Removed redundant double slash from 'direct' URL.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/18 13:07;githubbot;oscerd commented on issue #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649#issuecomment-444093483
 
 
   Thanks, I fixed the CS a bit. Merged on master and 2.23.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/18 13:08;githubbot;mswiderski commented on issue #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649#issuecomment-444093777
 
 
   excellent, thanks a lot @oscerd and @DuncanDoyle 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Dec/18 13:09;githubbot;oscerd closed pull request #2649: CAMEL-12973: Init deferred to first call when WIH uses Deployment-sco…
URL: https://github.com/apache/camel/pull/2649
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
index 1900960ed2b..212dd7156e2 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelCommand.java
@@ -35,7 +35,7 @@
  * The command passes the {@WorkItem} retrieved from the {@link CommandContext} to the route that has a consumer on the endpoint-id 
  * that can be passed with the <code>camel-endpoint-id</code> {@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the 
  * {link WorkItem} via the <code>camel-endpoint-id</code> parameter, this {@link Command} will send the {@link WorkItem} to 
- * the Camel URI <code>direct://myCamelEndpoint</code>.  
+ * the Camel URI <code>direct:myCamelEndpoint</code>.  
  * <p/>
  * The body of the result {@link Message} of the invocation is returned via the <code>Response</code> parameter. Access to the raw response 
  * {@link Message} is provided via the <code>Message</code> parameter. This gives the user access to more advanced fields like message headers 
@@ -55,7 +55,7 @@ public ExecutionResults execute(CommandContext ctx) throws Exception {
         String camelEndpointId = (String) workItem.getParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM);
 
         // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
-        String camelUri = ""direct://"" + camelEndpointId;
+        String camelUri = ""direct:"" + camelEndpointId;
         
         ProducerTemplate producerTemplate = getProducerTemplate(ctx);
         Exchange inExchange = ExchangeBuilder.anExchange(producerTemplate.getCamelContext()).withBody(workItem).build();
diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
index d5ea7df9092..1361889f26c 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/workitem/AbstractCamelWorkItemHandler.java
@@ -35,9 +35,9 @@
  * Camel jBPM {@link WorkItemHandler} which allows to call Camel routes with a <code>direct</code> endpoint.
  * <p/>
  * The handler passes the {@WorkItem} to the route that has a consumer on the endpoint-id that can be passed with the
- * <code>CamelEndpointId</code>{@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the {link WorkItem} via
- * the <code>CamelEndpointId</code> parameter, this command will send the {@link WorkItem} to the Camel URI
- * <code>direct://myCamelEndpoint</code>.
+ * <code>CamelEndpointId</code>{@link WorkItem} parameter. E.g. when a the value ""myCamelEndpoint"" is passed to the {link WorkItem} via the
+ * <code>CamelEndpointId</code> parameter, this command will send the {@link WorkItem} to the Camel URI
+ * <code>direct:myCamelEndpoint</code>.
  * <p/>
  * The body of the result {@link Message} of the invocation is returned via the <code>Response</code> parameter. Access to the raw response
  * {@link Message} is provided via the <code>Message</code> parameter. This gives the user access to more advanced fields like message
@@ -47,18 +47,22 @@
  * to find the global KIE {@link CamelContext} from the <code>jBPM</code> {@link ServiceRegistry}. When the {@link RuntimeManager} is passed
  * to the constructor, the handler will retrieve and use the {@link CamelContext} bound to the {@link RuntimeManage} from the
  * {@link ServiceRegistry}. When a <code>CamelEndpointId</code> is passed to the constructor, the handler will send all requests to the
- * Camel route that is consuming from that endpoint, unless the endpoint is overridden by passing a the <code>CamelEndpointId</code> in
- * the {@link WorkItem} parameters.
+ * Camel route that is consuming from that endpoint, unless the endpoint is overridden by passing a the <code>CamelEndpointId</code> in the
+ * {@link WorkItem} parameters.
  * 
  */
 public abstract class AbstractCamelWorkItemHandler extends AbstractLogOrThrowWorkItemHandler implements Cacheable {
 
     private static Logger logger = LoggerFactory.getLogger(AbstractCamelWorkItemHandler.class);
 
-    private final ProducerTemplate producerTemplate;
+    private ProducerTemplate producerTemplate;
 
     private final String camelEndpointId;
-
+    
+    private final String camelContextKey;
+    
+    private boolean initialized = false;
+    
     /**
      * Default Constructor. This creates a {@link ProducerTemplate} for the global {@link CamelContext}.
      */
@@ -67,9 +71,10 @@ public AbstractCamelWorkItemHandler() {
     }
 
     public AbstractCamelWorkItemHandler(String camelEndointId) {
-        CamelContext globalCamelContext = (CamelContext) ServiceRegistry.get().service(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
-        this.producerTemplate = globalCamelContext.createProducerTemplate();
         this.camelEndpointId = camelEndointId;
+        this.camelContextKey = JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY;
+        this.producerTemplate = buildProducerTemplate(camelContextKey);
+        this.initialized = true;
     }
 
     /**
@@ -81,18 +86,38 @@ public AbstractCamelWorkItemHandler(RuntimeManager runtimeManager) {
     }
 
     public AbstractCamelWorkItemHandler(RuntimeManager runtimeManager, String camelEndpointId) {
-        String runtimeCamelContextKey = runtimeManager.getIdentifier() + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX;
-        CamelContext runtimeCamelContext = (CamelContext) ServiceRegistry.get().service(runtimeCamelContextKey);
-        this.producerTemplate = runtimeCamelContext.createProducerTemplate();
         this.camelEndpointId = camelEndpointId;
+        this.camelContextKey = runtimeManager.getIdentifier() + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX;
+        /*
+         * Depending on the order of session creation and CamelContext creation and registration, the CamelContext might not yet be
+         * available. Hence, when we deal with a Deployment scoped CamelContext, we can lazy-init when the context is not yet available.
+         */
+        try {
+            this.producerTemplate = buildProducerTemplate(camelContextKey);
+            this.initialized = true;
+        } catch (IllegalArgumentException iae) {
+            String message = ""CamelContext with identifier '"" + camelContextKey
+                    + ""' not found in ServiceRegistry. This can be caused by the order in which the platform extensions are initialized. Deferring Camel ProducerTemplate creation until the first WorkItemHandler call."";
+            logger.info(message, iae);
+        }
     }
 
+    private ProducerTemplate buildProducerTemplate(String key) {
+        CamelContext camelContext = (CamelContext) ServiceRegistry.get().service(key);
+        return this.producerTemplate = camelContext.createProducerTemplate();
+    }
+    
+    
     public void executeWorkItem(WorkItem workItem, final WorkItemManager manager) {
+        if (!initialized) {
+            this.producerTemplate = buildProducerTemplate(camelContextKey);
+            initialized = true;
+        }
 
         String workItemCamelEndpointId = getCamelEndpointId(workItem);
 
         // We only support direct. We don't need to support more, as direct simply gives us the entrypoint into the actual Camel Routes.
-        String camelUri = ""direct://"" + workItemCamelEndpointId;
+        String camelUri = ""direct:"" + workItemCamelEndpointId;
 
         try {
             Exchange requestExchange = buildExchange(producerTemplate, workItem);
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
index 67d54fb69bb..a0fcee5de56 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/CamelWorkItemHandlerIntegrationTests.java
@@ -79,6 +79,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
@@ -120,6 +121,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
@@ -160,6 +162,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
 
     }
@@ -198,6 +201,7 @@ public void configure() throws Exception {
         } finally {
             // Cleanup
             context.removeRoute(routeId);
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
         }
     }
 
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
index b0086b9f602..d2d3d94ce36 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/DeploymentContextCamelCommandTest.java
@@ -38,58 +38,62 @@
 
 @RunWith(MockitoJUnitRunner.class)
 public class DeploymentContextCamelCommandTest {
-    
+
     @Mock
     ProducerTemplate producerTemplate;
 
     @Mock
     Exchange outExchange;
-    
+
     @Mock
     Message outMessage;
-    
+
     @Mock
     CamelContext camelContext;
-    
+
     @Mock
     RuntimeManager runtimeManager;
-    
+
     @Mock
     CommandContext commandContext;
 
     @Test
     public void testExecuteCommandDeploymentCamelContext() throws Exception {
-    
+
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
-        
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
         String testReponse = ""testResponse"";
-        
+
         String deploymentId = ""testDeployment"";
-        
+
         when(producerTemplate.send(eq(camelRouteUri), any(Exchange.class))).thenReturn(outExchange);
         when(producerTemplate.getCamelContext()).thenReturn(camelContext);
-        
+
         when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
-        
+
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
-        
-        //Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX, camelContext);
-        
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
-        
-        when(commandContext.getData(""workItem"")).thenReturn(workItem);
-        when(commandContext.getData(""deploymentId"")).thenReturn(deploymentId);
-        
-        Command command = new DeploymentContextCamelCommand();
-        ExecutionResults results = command.execute(commandContext);
-        
-        assertNotNull(results);
-        assertEquals(2, results.getData().size());
-        assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+
+        // Register the RuntimeManager bound camelcontext.
+        try {
+            ServiceRegistry.get().register(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX, camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+
+            when(commandContext.getData(""workItem"")).thenReturn(workItem);
+            when(commandContext.getData(""deploymentId"")).thenReturn(deploymentId);
+
+            Command command = new DeploymentContextCamelCommand();
+            ExecutionResults results = command.execute(commandContext);
+
+            assertNotNull(results);
+            assertEquals(2, results.getData().size());
+            assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+        } finally {
+            ServiceRegistry.get().remove(deploymentId + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX);
+        }
     }
 }
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
index 031bc69e30b..0d0db7cab8a 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/GlobalContextCamelCommandTest.java
@@ -44,16 +44,16 @@
 
     @Mock
     Exchange outExchange;
-    
+
     @Mock
     Message outMessage;
-    
+
     @Mock
     CamelContext camelContext;
-    
+
     @Mock
     RuntimeManager runtimeManager;
-    
+
     @Mock
     CommandContext commandContext;
 
@@ -61,7 +61,7 @@
     public void testExecuteGlobalCommand() throws Exception {
     
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -76,20 +76,24 @@ public void testExecuteGlobalCommand() throws Exception {
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
 
-        //Register the RuntimeManager bound camelContext.
-        ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, camelContext);
+        // Register the RuntimeManager bound camelcontext.
+        try {
+            ServiceRegistry.get().register(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY, camelContext);
 
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
 
-        when(commandContext.getData(anyString())).thenReturn(workItem);
+            when(commandContext.getData(anyString())).thenReturn(workItem);
 
-        Command command = new GlobalContextCamelCommand();
-        ExecutionResults results = command.execute(commandContext);
+            Command command = new GlobalContextCamelCommand();
+            ExecutionResults results = command.execute(commandContext);
 
-        assertNotNull(results);
-        assertEquals(2, results.getData().size());
-        assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+            assertNotNull(results);
+            assertEquals(2, results.getData().size());
+            assertEquals(testReponse, results.getData().get(JBPMConstants.RESPONSE_WI_PARAM));
+        } finally {
+            ServiceRegistry.get().remove(JBPMConstants.GLOBAL_CAMEL_CONTEXT_SERVICE_KEY);
+        }
     }
 }
\ No newline at end of file
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
index b97822ead63..324f04cf3f9 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOnlyCamelWorkItemHandlerTest.java
@@ -60,7 +60,7 @@
     public void testExecuteInOnlyLocalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -76,22 +76,26 @@ public void testExecuteInOnlyLocalCamelContext() throws Exception {
         when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
 
         // Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
-
-        WorkItemImpl workItem = new WorkItemImpl();
-        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
-        workItem.setParameter(""Request"", ""someRequest"");
-        workItem.setDeploymentId(""testDeploymentId"");
-        workItem.setProcessInstanceId(1L);
-        workItem.setId(1L);
-        
-        AbstractCamelWorkItemHandler handler = new InOnlyCamelWorkItemHandler(runtimeManager);
-
-        TestWorkItemManager manager = new TestWorkItemManager();
-        handler.executeWorkItem(workItem,
-                manager);
-        assertThat(manager.getResults(), is(notNullValue()));
-        //InOnly does not complete WorkItem.
-        assertThat(manager.getResults().size(), equalTo(0));
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+            workItem.setDeploymentId(""testDeploymentId"");
+            workItem.setProcessInstanceId(1L);
+            workItem.setId(1L);
+
+            AbstractCamelWorkItemHandler handler = new InOnlyCamelWorkItemHandler(runtimeManager);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            // InOnly does not complete WorkItem.
+            assertThat(manager.getResults().size(), equalTo(0));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
     }
 }
diff --git a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
index 578de782f36..8453f09cd35 100644
--- a/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
+++ b/components/camel-jbpm/src/test/java/org/apache/camel/component/jbpm/workitem/InOutCamelWorkItemHandlerTest.java
@@ -63,7 +63,7 @@
     public void testExecuteInOutGlobalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -77,6 +77,7 @@ public void testExecuteInOutGlobalCamelContext() throws Exception {
         when(outExchange.getOut()).thenReturn(outMessage);
         when(outMessage.getBody()).thenReturn(testReponse);
 
+        try {
         ServiceRegistry.get().register(""GlobalCamelService"", camelContext);
 
         TestWorkItemManager manager = new TestWorkItemManager();
@@ -97,13 +98,18 @@ public void testExecuteInOutGlobalCamelContext() throws Exception {
         Map<String, Object> results = manager.getResults(workItem.getId());
         assertThat(results.size(), equalTo(2));
         assertThat(results.get(""Response""), equalTo(testReponse));
+        
+        } finally {
+            ServiceRegistry.get().remove(""GlobalCamelService"");
+        }
+        
     }
 
     @Test
     public void testExecuteInOutLocalCamelContext() throws Exception {
 
         String camelEndpointId = ""testCamelRoute"";
-        String camelRouteUri = ""direct://"" + camelEndpointId;
+        String camelRouteUri = ""direct:"" + camelEndpointId;
 
         String testReponse = ""testResponse"";
 
@@ -122,7 +128,94 @@ public void testExecuteInOutLocalCamelContext() throws Exception {
         when(outMessage.getBody()).thenReturn(testReponse);
 
         // Register the RuntimeManager bound camelcontext.
-        ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            WorkItemImpl workItem = new WorkItemImpl();
+            workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+            workItem.setParameter(""Request"", ""someRequest"");
+            workItem.setDeploymentId(""testDeploymentId"");
+            workItem.setProcessInstanceId(1L);
+            workItem.setId(1L);
+
+            AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            assertThat(manager.getResults().size(), equalTo(1));
+            assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
+
+            Map<String, Object> results = manager.getResults(workItem.getId());
+            assertThat(results.size(), equalTo(2));
+            assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
+    }
+
+    @Test
+    public void testExecuteInOutLocalCamelContextLazyInit() throws Exception {
+
+        String camelEndpointId = ""testCamelRoute"";
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
+        String testReponse = ""testResponse"";
+
+        String runtimeManagerId = ""testRuntimeManager"";
+
+        when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
+
+        when(producerTemplate.send(eq(camelRouteUri), ArgumentMatchers.any(Exchange.class))).thenReturn(outExchange);
+        when(producerTemplate.getCamelContext()).thenReturn(camelContext);
+
+        when(camelContext.createProducerTemplate()).thenReturn(producerTemplate);
+        HeadersMapFactory hmf = new DefaultHeadersMapFactory();
+        when(camelContext.getHeadersMapFactory()).thenReturn(hmf);
+
+        when(outExchange.getOut()).thenReturn(outMessage);
+        when(outMessage.getBody()).thenReturn(testReponse);
+
+        WorkItemImpl workItem = new WorkItemImpl();
+        workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
+        workItem.setParameter(""Request"", ""someRequest"");
+        workItem.setDeploymentId(""testDeploymentId"");
+        workItem.setProcessInstanceId(1L);
+        workItem.setId(1L);
+
+        AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
+
+        // Register the context after we've created the WIH to test lazy-init.
+        try {
+            ServiceRegistry.get().register(runtimeManagerId + ""_CamelService"", camelContext);
+
+            TestWorkItemManager manager = new TestWorkItemManager();
+            handler.executeWorkItem(workItem,
+                    manager);
+            assertThat(manager.getResults(), is(notNullValue()));
+            assertThat(manager.getResults().size(), equalTo(1));
+            assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
+
+            Map<String, Object> results = manager.getResults(workItem.getId());
+            assertThat(results.size(), equalTo(2));
+            assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        } finally {
+            ServiceRegistry.get().remove(runtimeManagerId + ""_CamelService"");
+        }
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testExecuteInOutLocalCamelContextLazyInitFail() throws Exception {
+
+        String camelEndpointId = ""testCamelRoute"";
+        String camelRouteUri = ""direct:"" + camelEndpointId;
+
+        String testReponse = ""testResponse"";
+
+        String runtimeManagerId = ""testRuntimeManager"";
+
+        when(runtimeManager.getIdentifier()).thenReturn(runtimeManagerId);
 
         WorkItemImpl workItem = new WorkItemImpl();
         workItem.setParameter(JBPMConstants.CAMEL_ENDPOINT_ID_WI_PARAM, camelEndpointId);
@@ -134,15 +227,9 @@ public void testExecuteInOutLocalCamelContext() throws Exception {
         AbstractCamelWorkItemHandler handler = new InOutCamelWorkItemHandler(runtimeManager);
 
         TestWorkItemManager manager = new TestWorkItemManager();
-        handler.executeWorkItem(workItem,
-                manager);
-        assertThat(manager.getResults(), is(notNullValue()));
-        assertThat(manager.getResults().size(), equalTo(1));
-        assertThat(manager.getResults().containsKey(workItem.getId()), is(true));
-        
-        Map<String, Object> results = manager.getResults(workItem.getId());
-        assertThat(results.size(), equalTo(2));
-        assertThat(results.get(JBPMConstants.RESPONSE_WI_PARAM), equalTo(testReponse));
+        // This is expected to throw an exception.
+        handler.executeWorkItem(workItem, manager);
+
     }
-   
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-core-osgi: Slow Memory Leak in OsgiServiceRegistry,CAMEL-12969,13201658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,30/Nov/18 15:46,30/Dec/18 19:38,13/Jul/23 08:31,30/Dec/18 18:46,2.18.0,2.19.0,2.20.0,2.21.0,2.22.0,2.23.0,,,,,,,,,,2.21.4,2.22.3,2.23.1,2.24.0,,camel-osgi,,,,,,0,,,,"The OsgiServiceRegistry has a slow memory leak in the serviceReferenceQueue.  Currently every time a service is looked up by any method an item is added to the serviceReferenceQueue.  This is required because of OSGi ServiceReference counting.  However left unchecked the system just continues to add ConcurrentLinkedQueue$Node objects until memory is exhausted.

!ServiceReferenceQueueLeak.PNG! . 

 

There is also a second problem with how the registry is being managed within the OsgiDefaultCamelContext.  OsgiServiceRegistry is currently extends LifecycleStrategySupport which is suppose to unload the serviceReferenceQueue onContextStop.  However the registry is never getting added to the CamelContext to manage the Lifecycle because the overridden createRegistry method in OsgiDefaultCamelContext is not being called.  This is because the registry is being set in the constructor of OsgiDefaultCamelContext with
{code:java}
super(registry);{code}
this calls the DefaultCamelContext implementation of createRegistry which does not add the registry to lifecyclemanagement since
{code:java}
OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);{code}
is never called. 

See serviceReferenceQueue  pre context stop

  !ServiceReferenceQueuePreContextStop.PNG!

!karafCamelContextStop.PNG!

See serviceReferenceQueue   post context stop (still contain objects)

  !ServiceReferenceQueuePostContextStop.PNG!

Both issues would have existed for some time but may have gone unnoticed because the leak was so slow (ConcurrentLinkedQueue$Node takes up very little memory).  It appears the removal of the cache in https://issues.apache.org/jira/browse/CAMEL-9631 makes the leak occur more quickly. 

 

I have a patch that involves reintroducing the cache but with an invalidation strategy using the OSGi ServiceListener that leverages a single clean up thread to remain non-blocking.  I'm working on an upstream adaptation and will post a PR for community review.

 

 ","Java 10

Karaf 4.2.1

Camel 2.22.0",bobpaulin,davsclaus,githubbot,,,,,"bobpaulin commented on pull request #2695: CAMEL-12969 : Map based Service Usage counting to remove memory leak
URL: https://github.com/apache/camel/pull/2695
 
 
   This showed comparable performance to using the service cache and thread in my previous PR.  The leak does not occur since the Queue has been replaced with a map of AtomicLongs to count usage.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 16:43;githubbot;600","davsclaus commented on pull request #2695: CAMEL-12969 : Map based Service Usage counting to remove memory leak
URL: https://github.com/apache/camel/pull/2695
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Dec/18 17:57;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,"30/Nov/18 15:46;bobpaulin;ServiceReferenceQueueLeak.PNG;https://issues.apache.org/jira/secure/attachment/12950174/ServiceReferenceQueueLeak.PNG","30/Nov/18 15:51;bobpaulin;ServiceReferenceQueuePostContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950177/ServiceReferenceQueuePostContextStop.PNG","30/Nov/18 15:50;bobpaulin;ServiceReferenceQueuePreContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950175/ServiceReferenceQueuePreContextStop.PNG","30/Nov/18 15:51;bobpaulin;karafCamelContextStop.PNG;https://issues.apache.org/jira/secure/attachment/12950176/karafCamelContextStop.PNG",,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Sun Dec 30 19:38:51 UTC 2018,,,,,,,Patch Available,,,,"0|s011rc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Nov/18 17:37;githubbot;bobpaulin opened a new pull request #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/18 11:26;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444452864
 
 
   Thanks for the PR. I wonder if we can avoid the extra background thread. Can't we just use the service listener directly and in the serviceChanged method with unregister service, then remove the item from the osgi service registry directly. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/18 11:28;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444453399
 
 
   Also if the leak is due to `onContextStop` is not called on OsgiServiceRegistry where it unregisters and clears its own cache, then we should try to fix this first and see if the current code is not okay as-is. I am not keen on adding extra complexity with this PR introduces.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Dec/18 11:29;davsclaus;Thanks for reporting the memory leak and providing details and screenshots etc, much appreciated.;;;","05/Dec/18 15:09;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-444518591
 
 
   @davsclaus Yes I would also like to avoid the background thread if possible.  The problem I ran into with removing the service reference on the unregister event is per the OSGi spec[1] (and in the Felix implementation) the event is fired at the beginning of the service being unregistered not at the end.  So it is possible that if the service is looked up after the event firing but before the service registration is invalidated and removed from Felix's registry [2] it could be re-cached without any other means to remove it other than stopping the camel context.  This gap between the unregistered event firing and the service actually being removed causes some problems for trying to invalidate the cache in a synchronous way.  The thread allows the code to check the ungetService return value which switches to false when the service is actually gone.  That allows the invalidation to work properly without locking but trades the extra resources that get allocated to the thread.
   
   To your point of just applying the fix to the onContextStop being called.  I believe that could be applied separately which would improve the situation for users that are using the lookup calls conservatively.  Without the other parts of the patch (such as the cache reintroduction and invalidation strategy) the ConcurrentLinkedQueue$Node objects would continue to accumulate with each lookup call.  I'd prefer an approach that shields developers from the OSGi runtime and allows them make lookup calls as liberally as they can be with the  SimpleRegistry and JndiRegistry.
   
   I agree with your point about complexity and I'm open to ideas to address the issue in a way that allows developers to use the Camel Registries in a uniform way.  Also sorry for the length of this note.  I wish I could have made it shorter but I think the issue is a bit tricky.
   
   [1] https://osgi.org/specification/osgi.core/7.0.0/framework.api.html#org.osgi.framework.ServiceEvent
   [2] https://github.com/apache/felix/blob/trunk/framework/src/main/java/org/apache/felix/framework/ServiceRegistry.java (specfically the unregisterService method.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Dec/18 17:10;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445300110
 
 
   If it makes sense I can split this PR into 2 separate PRs.  One with the changes to the code that ensures the onContextStop gets called and another including the re-adding of cache and invalidation strategy.  It seems like the onContextStop change is uncontroversial while the cache and invalidation strategy will take require more consideration.  
   
   In my application the onContextStop fix without the other changes will not be of much benefit to me.  But it may benefit others in the community that call the lookup method less frequently and stop the context more frequently.  
   
   If there are suggestions to this pull request that would reduce the complexity to an acceptable level without adding race conditions and managing OSGi reference counting properly I'm happy to adapt this PR as well.  Let me know what approach makes the most sense.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Dec/18 18:41;githubbot;davsclaus commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445326215
 
 
   @bobpaulin yeah it would be good to separate this into 2 PRs. The onContextStop is a good fix IMHO.
   
   For the other I would like to get more feedback and ideas, eg if you have 100 Camel bundles in a JVM, then you now get 100 more JVM threads which is pita. 
   Maybe the background thread can be created on-demand or on when camel context is being shutdown. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Dec/18 03:00;bobpaulin;Created a second issue to separate the onContextStop not called issue CAMEL-12987 .  This issue will be for tracking the memory leak caused by adding to the serviceReferenceQueue with each lookup call.;;;","09/Dec/18 03:09;githubbot;bobpaulin commented on issue #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647#issuecomment-445507171
 
 
   Split this into CAMEL-12987.  Closing this PR will open a new one that does not include the CAMEL-12987 changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Dec/18 03:09;githubbot;bobpaulin closed pull request #2647: CAMEL-12969: Adding ServiceReference Cache to prevent memory leak.
URL: https://github.com/apache/camel/pull/2647
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
index 08ff669c59f..2b9b1fc4e60 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiCamelContextHelper.java
@@ -56,14 +56,23 @@ public static void osgiUpdate(DefaultCamelContext camelContext, BundleContext bu
     public static Registry wrapRegistry(CamelContext camelContext, Registry registry, BundleContext bundleContext) {
         ObjectHelper.notNull(bundleContext, ""BundleContext"");
 
-        LOG.debug(""Setting up OSGi ServiceRegistry"");
-        OsgiServiceRegistry osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+        OsgiServiceRegistry osgiServiceRegistry = null;
+        Registry resultingRegistry = registry;
+        if(registry instanceof OsgiServiceRegistry) {
+            osgiServiceRegistry = (OsgiServiceRegistry)registry;
+        } else {
+            LOG.debug(""Wrapping Registry in OsgiServiceRegistry"");
+            osgiServiceRegistry = new OsgiServiceRegistry(bundleContext);
+            CompositeRegistry compositeRegistry = new CompositeRegistry();
+            compositeRegistry.addRegistry(osgiServiceRegistry);
+            compositeRegistry.addRegistry(registry);
+            resultingRegistry = compositeRegistry;
+        }
+        
         // Need to clean up the OSGi service when camel context is closed.
         camelContext.addLifecycleStrategy(osgiServiceRegistry);
-        CompositeRegistry compositeRegistry = new CompositeRegistry();
-        compositeRegistry.addRegistry(osgiServiceRegistry);
-        compositeRegistry.addRegistry(registry);
-        return compositeRegistry;
+        
+        return resultingRegistry;
     }
 
 }
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
index 20e3a21eca0..821ef5d7978 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiDefaultCamelContext.java
@@ -32,7 +32,6 @@
 public class OsgiDefaultCamelContext extends DefaultCamelContext {
 
     private final BundleContext bundleContext;
-    private final Registry registry;
 
     public OsgiDefaultCamelContext(BundleContext bundleContext) {
         this(bundleContext, new OsgiServiceRegistry(bundleContext));
@@ -41,7 +40,7 @@ public OsgiDefaultCamelContext(BundleContext bundleContext) {
     public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         super(registry);
         this.bundleContext = bundleContext;
-        this.registry = registry;
+        setRegistry(OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext));
         OsgiCamelContextHelper.osgiUpdate(this, bundleContext);
         // setup the application context classloader with the bundle classloader
         setApplicationContextClassLoader(new BundleDelegatingClassLoader(bundleContext.getBundle()));
@@ -52,15 +51,6 @@ public OsgiDefaultCamelContext(BundleContext bundleContext, Registry registry) {
         return BundleContextUtils.findComponents(bundleContext, this);
     }
 
-    @Override
-    protected Registry createRegistry() {
-        if (registry != null) {
-            return OsgiCamelContextHelper.wrapRegistry(this, registry, bundleContext);
-        } else {
-            return OsgiCamelContextHelper.wrapRegistry(this, super.createRegistry(), bundleContext);
-        }
-    }
-
     @Override
     protected TypeConverter createTypeConverter() {
         // CAMEL-3614: make sure we use a bundle context which imports org.apache.camel.impl.converter package
diff --git a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
index 4569962da2d..3cbbad8e2fb 100644
--- a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
+++ b/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiServiceRegistry.java
@@ -21,15 +21,24 @@
 import java.util.Map;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
 
 import org.apache.camel.CamelContext;
+import org.apache.camel.VetoCamelContextStartException;
 import org.apache.camel.spi.Registry;
 import org.apache.camel.support.LifecycleStrategySupport;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.concurrent.CamelThreadFactory;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
 import org.osgi.framework.InvalidSyntaxException;
+import org.osgi.framework.ServiceEvent;
+import org.osgi.framework.ServiceListener;
 import org.osgi.framework.ServiceReference;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -37,13 +46,25 @@
 /**
  * The OsgiServiceRegistry support to get the service object from the bundle context
  */
-public class OsgiServiceRegistry extends LifecycleStrategySupport implements Registry {
-    private static final Logger LOG = LoggerFactory.getLogger(OsgiCamelContextHelper.class);
+public class OsgiServiceRegistry extends LifecycleStrategySupport implements Registry, ServiceListener {
+    private static final Logger LOG = LoggerFactory.getLogger(OsgiServiceRegistry.class);
     private final BundleContext bundleContext;
     private final Queue<ServiceReference<?>> serviceReferenceQueue = new ConcurrentLinkedQueue<>();
+    private final BlockingQueue<ServiceReference<?>> unregisteredServiceReferenceQueue = new LinkedBlockingQueue<>();
+    private final Map<ServiceReference<?>, Object> serviceCacheMap = new ConcurrentHashMap<>();
+    private ExecutorService executorService;
     
     public OsgiServiceRegistry(BundleContext bc) {
         bundleContext = bc;
+        bundleContext.addServiceListener(this);
+    }
+    
+    @Override
+    public void onContextStart(CamelContext context) throws VetoCamelContextStartException {
+        //Start the ServiceReference Cleanup Task.
+        executorService = Executors.newSingleThreadExecutor(new CamelThreadFactory(""Camel ("" + context.getName() + "") thread ##counter# - #name#"", ""OSGiServiceReferenceCleanupThread"", true));
+
+        executorService.execute(new OsgiServiceReferenceCleanupTask());
     }
 
     /**
@@ -57,8 +78,7 @@ public OsgiServiceRegistry(BundleContext bc) {
             if (refs != null && refs.length > 0) {
                 // just return the first one
                 sr = refs[0];
-                serviceReferenceQueue.add(sr);
-                service = bundleContext.getService(sr);
+                service = getService(sr);
             }
         } catch (Exception ex) {
             throw ObjectHelper.wrapRuntimeCamelException(ex);
@@ -90,8 +110,7 @@ public Object lookupByName(String name) {
         if (sr != null) {
             // Need to keep the track of Service
             // and call ungetService when the camel context is closed 
-            serviceReferenceQueue.add(sr);
-            service = bundleContext.getService(sr);
+            service = getService(sr);
         }
         return service;
     }
@@ -104,8 +123,7 @@ public Object lookupByName(String name) {
             if (refs != null) {
                 for (ServiceReference<?> sr : refs) {
                     if (sr != null) {
-                        Object service = bundleContext.getService(sr);
-                        serviceReferenceQueue.add(sr);
+                        Object service = getService(sr);
                         if (service != null) {
                             String name = (String)sr.getProperty(""name"");
                             if (name != null) {
@@ -152,6 +170,48 @@ public void onContextStop(CamelContext context) {
         }
         // Clean up the OSGi Service Cache
         serviceReferenceQueue.clear();
+        serviceCacheMap.clear();
+        unregisteredServiceReferenceQueue.clear();
+        executorService.shutdownNow();
+        executorService = null;
+    }
+    
+    @Override
+    public void serviceChanged(ServiceEvent event) {
+        if( event.getType() == ServiceEvent.UNREGISTERING) {
+                this.unregisteredServiceReferenceQueue.add(event.getServiceReference());
+        }
+    }
+    
+    private Object getService(ServiceReference<?> sr) {
+        Object service = this.serviceCacheMap.get(sr);
+        if(service == null) {
+            service = this.bundleContext.getService(sr);
+            serviceReferenceQueue.add(sr);
+            if(service != null) {
+                this.serviceCacheMap.put(sr, service);
+            }
+        }
+        return service;
+    }
+    
+    class OsgiServiceReferenceCleanupTask implements Runnable {
+        @Override
+        public void run() {
+            ServiceReference<?> serviceReference = null;
+            try {
+                while((serviceReference = unregisteredServiceReferenceQueue.take()) != null) {
+                    if(!bundleContext.ungetService(serviceReference)) {
+                        serviceCacheMap.remove(serviceReference);
+                        serviceReferenceQueue.remove(serviceReference);
+                    }
+                    else {
+                        unregisteredServiceReferenceQueue.add(serviceReference);
+                    }
+                }
+            } catch (InterruptedException e) {
+                LOG.info(""Camel Osgi Service Reference Clean up Interrupted"", e);
+            }
+        }
     }
-
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Dec/18 18:45;davsclaus;Thanks Bob, for all the work on this, much appreciated.;;;","30/Dec/18 19:38;bobpaulin;Thank you for backporting.  Looking forward to picking it up in the next release!;;;",,,,,,,,,,,,,,,,,
"DefaultFluentProducerTemplate is not thread safe (endpoint, etc.)",CAMEL-12968,13201620,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pdjohe,pdjohe,30/Nov/18 13:31,01/Aug/19 09:02,13/Jul/23 08:31,01/Aug/19 09:02,2.22.1,2.23.0,,,,,,,,,,,,,,3.0.0,3.0.0.RC1,,,,camel-core,,,,,,2,,,,"The DefaultFluentProducerTemplate saves state between method calls. This leads to unexpected behavior when the javadoc specifies that it should be thread safe.

For example:
 # thread 1 calls fluentProducerTemplate.to(""direct:a"").send(""message1"");
 # thread 2 calls fluentProducerTemplate.to(""direct:b"").send(""message2"");

If these are run in parallel, the sequence of calls can be:
 # thread 1 calls to(""direct:a"") - endpoint in the object is direct:a
 # thread 2 calls to(""direct:b"") - endpoint in the object is direct:b
 # *thread 1 calls send(""message1"") - this gets sent incorrectly to direct:b*
 # thread 2 calls send(""message2"") - this gets sent correctly to direct:b

Endpoint is one example, but almost all fields in this class share this behavior. It should be clearly documented which fields can be used fluently over multiple threads, and which cannot. As the API is today, all methods returning 'this' should be made thread-safe (state is only local to the caller) so that the fluent interface works as expected.",,davidkarlsen,pdjohe,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 02 05:44:15 UTC 2019,,,,,,,,,,,"0|s011iw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Nov/18 13:35;pdjohe;We are currently experiencing this with Spring Boot where the CamelAutoConfiguration creates the FluentProducerTemplate which we use for sending messages to many different routes. ;;;","30/Nov/18 14:23;davidkarlsen;Did you test with 2.23.0? It contained a threadsafe fix for the said class. ;;;","30/Nov/18 14:27;pdjohe;One suggestion could be that the DefaultFluentProducerTemplate creates a new instance of some sort of fluentProducerTemplate for all the methods, i.e.:
{code:java}
public FluentProducerTemplate to(Endpoint endpoint) {
  // copy existing config to next instance
  DefaultFluentProducerTemplate templateWithUpdatedState = new DefaultFluentProducerTemplate(this); 
  templateWithUpdatedState.to(endpoint);
  return templateWithUpdatedState;
}{code}
 ;;;","30/Nov/18 14:35;pdjohe;As far as I can see, 2.23.0 still has this code:
{code:java}
public class DefaultFluentProducerTemplate extends ServiceSupport implements FluentProducerTemplate {
  ...
  private Optional<Endpoint> endpoint;
  ...
  @Override
  public FluentProducerTemplate to(Endpoint endpoint) {
    this.endpoint = Optional.of(endpoint);
    return this;
  }
  ...
  @Override
  public Exchange send() throws CamelExecutionException {
    // Determine the target endpoint
    final Endpoint target = target();
    return exchangeSupplier.isPresent()
      ? template().send(target, exchangeSupplier.get().get())
      : template().send(target, processorSupplier.orElse(() -> defaultProcessor()).get());
  }
  ...
  private Endpoint target() {
    if (endpoint.isPresent()) {
      return endpoint.get();
    }
    if (defaultEndpoint.isPresent()) {
      return defaultEndpoint.get();
    }
    throw new IllegalArgumentException(""No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)"");
  }
}{code}
 

Endpoint is not a thread local, and between to and send method calls, the endpoint state may have changed. ;;;","03/Dec/18 20:34;pdjohe;We have worked around this issue by no longer using the FluentTemplateProducer that is produced in the CamelAutoConfiguration, but instead using
{code:java}
@EndpointInject(uri=...) 
private FluentTemplateProducer templateProducer;{code}
Thus we avoid the 'FluentTemplateProducer.to(...)' call that was giving us trouble.

Perhaps consider removing the FluentTemplateProducer from the camel autoconfig, or perhaps change the API altogether and have fluentTemplateProducer.createBuilder().to(...).body(...).header(...).send(); where createBuilder() always returns a new object instance that does not affect the state of the main fluentTemplateProducer object instance:
{code:java}
public DefaultFluentProducerTemplate {

  public FluentTemplateProducerBuilder createBuilder() {
    return new FluentTemplateProducerBuilder(this);
  }

  public static class FluentTemplateProducerBuilder {
     // This class contains state (endpoint, processor, body, headers)
     // That is, all 'fluent methods' as well as the send methods.
     // It can have a reference to its DefaultFluentProducerTemplate parent
     // so when needed it can call objects there (ProducerTemplate, etc.)
  }
}{code}
 ;;;","02/Jan/19 05:44;ramu11;Hi Paul,

Could you please attach your test case, so that we can check ;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce-maven-plugin generates code that does not compile,CAMEL-12963,13200915,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,boris.daich,boris.daich,27/Nov/18 17:46,03/Jun/19 07:17,13/Jul/23 08:31,03/Jun/19 07:17,2.22.2,,,,,,,,,,,,,,,2.22.5,2.23.3,2.24.0,3.0.0,,camel-salesforce,,,,,,0,,,,"when running pom.xml with
{code:java}
<plugin>
    <groupId>org.apache.camel.maven</groupId>
    <artifactId>camel-salesforce-maven-plugin</artifactId>
    <version>2.22.2</version>
    <executions>
        <execution>
            <id>camel-sforce</id>
            <phase>generate-sources</phase>
            <goals>
                <goal>generate</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
        <version>44.0</version>
        <clientId>${my.clientId}</clientId>
        <clientSecret>${my.clientSecret}</clientSecret>
        <userName>${my.username}</userName>
        <password>${my.password}</password>
        <loginUrl>${my.loginUrl}</loginUrl>
        <packageName>com.my.entities4camel</packageName>
        <includes>
            <include>Task</include>
        </includes>
    </configuration>
</plugin>
{code}
the generated code does not compile because of the code like
{code:java}
private Account_Lookup What;

    @JsonProperty(""What"")
    public Account_Lookup getWhat() {
        return this.What;
    }

    @JsonProperty(""What"")
    public void setWhat(Account_Lookup What) {
        this.What = What;
    }
    private rtms__CarrierPayment__c_Lookup What;

    @JsonProperty(""What"")
    public rtms__CarrierPayment__c_Lookup getWhat() {
        return this.What;
    }

    @JsonProperty(""What"")
    public void setWhat(rtms__CarrierPayment__c_Lookup What) {
        this.What = What;
    }
{code}
 

it seems that any field that has Salesforce ""polymorphism"" (able to reference any type of Entity) causes the issue.

{{Task}} just simplest example.

Another thing that might be important: I run on top of an installed package the fields with prefix {{rtms__}} are from the managed package.","windows 10 64bit Pro

Java 10 same with Java 8 

 ",boris.daich,davsclaus,jeremyross,Przemo,zregvart,,,"przemeklenik commented on pull request #2777: CAMEL-12963 Fix
URL: https://github.com/apache/camel/pull/2777
 
 
   Problem was related to Lookup and External Ids fields - there was unnecessary duplicity in generated DTOs and also @JsonProperty value wasn't set correctly.
   Additionaly, removed issue with NullPointerException for tests in case useStringsForPicklists variable wasn't set correctly.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Feb/19 12:08;githubbot;600","zregvart commented on pull request #2785: CAMEL-12963: camel-salesforce-maven-plugin generates code that does not compile
URL: https://github.com/apache/camel/pull/2785
 
 
   This fixes issue with non-compilable code of created DTOs related to Lookup and External Ids fields.
   
   Also adds sorting of fields so that different field order caused by differences in introspection don't end up generating different source files.
   
   @przemeklenik can you please take a look and see if I missed anything, this should incorporate your changes and in addition some clean up work I wanted to do.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 11:16;githubbot;600","zregvart commented on pull request #2777: CAMEL-12963 Fix
URL: https://github.com/apache/camel/pull/2777
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 11:17;githubbot;600","zregvart commented on pull request #2785: CAMEL-12963: camel-salesforce-maven-plugin generates code that does not compile
URL: https://github.com/apache/camel/pull/2785
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Feb/19 09:48;githubbot;600",,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://stackoverflow.com/questions/53490510/camel-salesforce-maven-plugin-generates-code-that-does-not-compile,,,,,,,,,,9223372036854775807,,,Mon Jun 03 07:17:32 UTC 2019,,,,,,,,,,,"0|s00x6g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Feb/19 12:11;Przemo;Issue was related to Lookup/External Ids fields in Salesforce.

Please review pull request #2777.;;;","19/Feb/19 12:33;zregvart;Thanks to [~Przemo] for the contribution (y);;;","03/Apr/19 09:54;boris.daich;for 3.0.0-M2 the 
generated classes for 

Task 

SocialPost

SocialPersona

 

still does not compile with the same reason 
the ""Polymorphism""

from the 

public class Task extends AbstractDescribedSObjectBase 
{code:java}
@JsonProperty(""WhatId"")
public void setWhatId(String WhatId) {
this.WhatId = WhatId;
}

private Account_Lookup WhatId_Lookup;

@JsonProperty(""What"")
public Account_Lookup getWhatId_Lookup() {
return this.WhatId_Lookup;
}

@JsonProperty(""What"")
public void setWhatId(Account_Lookup WhatId_Lookup) {
this.WhatId_Lookup = WhatId_Lookup;
}
private rtms__CarrierPayment__c_Lookup WhatId_Lookup;

@JsonProperty(""What"")
public rtms__CarrierPayment__c_Lookup getWhatId_Lookup() {
return this.WhatId_Lookup;
}

@JsonProperty(""What"")
public void setWhatId(rtms__CarrierPayment__c_Lookup WhatId_Lookup) {
this.WhatId_Lookup = WhatId_Lookup;
}
private rtms__CustomerPayment__c_Lookup WhatId_Lookup;

@JsonProperty(""What"")
public rtms__CustomerPayment__c_Lookup getWhatId_Lookup() {
return this.WhatId_Lookup;
}

@JsonProperty(""What"")
public void setWhatId(rtms__CustomerPayment__c_Lookup WhatId_Lookup) {
this.WhatId_Lookup = WhatId_Lookup;
}
private rtms__Load__c_Lookup WhatId_Lookup;

@JsonProperty(""What"")
public rtms__Load__c_Lookup getWhatId_Lookup() {
return this.WhatId_Lookup;
}

@JsonProperty(""What"")
public void setWhatId(rtms__Load__c_Lookup WhatId_Lookup) {
this.WhatId_Lookup = WhatId_Lookup;
}
{code}
 

 ;;;","26/May/19 16:06;jeremyross;Will this get ported to the 2.x branches?;;;","03/Jun/19 07:17;davsclaus;Borish create a new JIRA ticket for new issues.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Wrong camel context bound in service registry of jbpm/Kie Server,CAMEL-12958,13200554,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,swiderski.maciej,swiderski.maciej,swiderski.maciej,26/Nov/18 12:42,27/Nov/18 17:22,13/Jul/23 08:31,27/Nov/18 17:22,2.23.0,,,,,,,,,,,,,,,2.23.1,2.24.0,,,,camel-jbpm,,,,,,0,,,,Wrong camel context is set in the ServiceRegistry of jBPM when creating kie container specific camel context.,,githubbot,swiderski.maciej,,,,,,,,,,,,,,,,,,,,,,CAMEL-12959,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 27 10:23:10 UTC 2018,,,,,,,,,,,"0|s00uyw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Nov/18 12:43;githubbot;mswiderski opened a new pull request #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637
 
 
   …ie Server

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Nov/18 10:20;githubbot;mswiderski commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005294
 
 
   I see that pom.xml is still pointing to 2.23.0-SNAPSHOT so was wondering if this has any chance to be in 2.23.0 release or is it too late?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Nov/18 10:21;githubbot;oscerd commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005440
 
 
   It's under vote, it will be in 2.23.1

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Nov/18 10:22;githubbot;mswiderski commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442005974
 
 
   sounds good, thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Nov/18 10:23;githubbot;oscerd commented on issue #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637#issuecomment-442006129
 
 
   Pushed on master and 2.23.x, thanks @mswiderski 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Nov/18 10:23;githubbot;oscerd closed pull request #2637: CAMEL-12958 - Wrong camel context bound in service registry of jbpm/K…
URL: https://github.com/apache/camel/pull/2637
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
index fbc4448d59c..0e297bece0f 100644
--- a/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
+++ b/components/camel-jbpm/src/main/java/org/apache/camel/component/jbpm/server/CamelKieServerExtension.java
@@ -117,7 +117,7 @@ public void createContainer(String id, KieContainerInstance kieContainerInstance
                 context.start();
                 camelContexts.put(id, context);
 
-                ServiceRegistry.get().register(id + ""_CamelService"", this.camel);
+                ServiceRegistry.get().register(id + ""_CamelService"", context);
 
             }
         } catch (Exception e) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
Camel-AHC-WS: does not send response to ping frame,CAMEL-12952,13200053,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jukka.aalto,jukka.aalto,22/Nov/18 11:24,27/Nov/18 10:15,13/Jul/23 08:31,27/Nov/18 10:15,,,,,,,,,,,,,,,,2.24.0,,,,,camel-ahc-ws,,,,,,0,,,,"Websocket client should send response to ping frame. See document

[https://tools.ietf.org/html/rfc6455#page-37]

Client should send pong response.

The fix should be trivial because WsListener has empty default onPing-method. The implementation of this method should call webSocket sendPong.",,jukka.aalto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-11-22 11:24:34.0,,,,,,,,,,,"0|s00rvs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AHC-WS: reconnect exception is not passed to exception handler,CAMEL-12951,13200051,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jukka.aalto,jukka.aalto,22/Nov/18 11:17,27/Nov/18 10:15,13/Jul/23 08:31,27/Nov/18 10:15,2.22.2,,,,,,,,,,,,,,,2.24.0,,,,,camel-ahc-ws,,,,,,0,,,,"When WsEndPoint reconnect-method fails in line 172 to create connection it throws an exception which is logged but it should also be given to exception handler.

This kind of situation happens when server is shut down while connection is open. First client tries to reconnect but when reconnect fails, client stops trying.

I'm trying to implement a feature which tries continuously to reconnect to server when the server is down. Connection state (open, disconnected or trying to connect) should also be indicated.

If exception is passed to exception handler then it would be possible to register exception handler outside Camel. The purpose of this exception handler is to shut down Camel context and recreate it again in order to reconnect. With this kind of setup I can continuously try to reconnect and also figure out the current connection state.

 

[https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java]

 
{code:java}
@Override
public void onClose(WebSocket websocket, int code, String reason) {
   LOG.debug(""websocket closed - reconnecting"");
   try {
      reConnect();
   } catch (Exception e) {
      LOG.warn(""Error re-connecting to websocket"", e);
   }
}
{code}
 ",,jukka.aalto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-11-22 11:17:57.0,,,,,,,,,,,"0|s00rvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Box: Download file version,CAMEL-12948,13199845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Cherepnalkovski,Cherepnalkovski,21/Nov/18 14:19,29/Mar/19 13:28,13/Jul/23 08:31,29/Mar/19 13:28,2.22.1,,,,,,,,,,,,,,,2.22.4,2.23.2,2.24.0,3.0.0,,camel-box,,,,,,0,,,,"Provided endpoint is not functional.

Exception : Failed to resolve endpoint: box://files/downloadVersion due to: No matching method for files/downloadVersion, with arguments []. 

The issue is explained here : 

[http://camel.465427.n5.nabble.com/Camel-box-download-file-version-td5825974.html]

 

 ",,acosentino,Cherepnalkovski,dmvolod,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 03 09:55:13 UTC 2018,,,,,,,,,,,"0|s00qmg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Nov/18 16:49;Cherepnalkovski;I think there is problem with the mapping.


BoxFileMenagerApiMethod have property : 
DOWNLOADPREVIOUSFILEVERSION with atribute ""downloadPreviousFileVersion""

 

BoxApiCollection creates map with endpoint names and instead of downloadPreviousFileVersion it adds downloadPreviousFileVersions (plural) to the map.;;;","30/Nov/18 14:59;dmvolod;[~ancosen] what about backport this fix to 2.23.x and 2.22.x?;;;","30/Nov/18 15:00;acosentino;It's not fixed yet. I was waiting for [~Cherepnalkovski] to submit a PR;;;","30/Nov/18 15:14;dmvolod;Sorry, think that [https://github.com/apache/camel/pull/2642] was solution.;;;","30/Nov/18 15:15;acosentino;No problem, that was just a part of the solution :)

Thanks for checking!;;;","03/Dec/18 09:55;Cherepnalkovski;I can't setup environment to test this. I am doing something wrong but... ;;;",,,,,,,,,,,,,,,,,,,,,,,
MockEndpoint.expectedHeaderReceived should fail when no exchange received,CAMEL-12947,13199834,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ramu11,AntoineWils,AntoineWils,21/Nov/18 13:07,15/Jun/19 10:13,13/Jul/23 08:31,14/Dec/18 15:59,2.22.1,,,,,,,,,,,,,,,2.23.3,2.24.0,2.25.0,3.0.0,,camel-test,,,,,,0,,,,"When expecting headers to be passed to a MockEndpoint that is never called the test should fail if the MockEndpoint was never called.

However it is succeeding.

Here an example of Junit 4 test succeeding when it should fail


{code:java}

import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class Test extends CamelTestSupport {

  @EndpointInject(uri = ""mock:direct:foo"")
  private MockEndpoint fooProducerMock;

  @Override
  public RouteBuilder createRouteBuilder() throws Exception {

    return new RouteBuilder() {

      @Override
      public void configure() throws Exception {}
    };
  }

  @Test
  public void failWhenHeaderAbsent() throws InterruptedException {
    fooProducerMock.expectedHeaderReceived(""ghost"", ""you should be visible"");
    MockEndpoint.assertIsSatisfied(context);
  }
}
{code}",,AntoineWils,davsclaus,ramu11,,,,,"ramu11 opened a new pull request #2669: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2669
 
 
   …xchange received
   
   CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no exchange received

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Dec/18 09:05;githubbot;600","davsclaus closed pull request #2669: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2669
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
index 6bb30e4ca5c..1681bfa07e2 100644
--- a/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/mock/MockEndpoint.java
@@ -517,6 +517,9 @@ public void expectedMinimumMessageCount(int expectedCount) {
      * <b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)}
      */
     public void expectedHeaderReceived(final String name, final Object value) {
+        if (expectedCount == -1) {
+            expectedMessageCount(1);
+        }
         if (expectedHeaderValues == null) {
             expectedHeaderValues = getCamelContext().getHeadersMapFactory().newMap();
             // we just wants to expects to be called once
diff --git a/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java b/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java
new file mode 100644
index 00000000000..931a472b01c
--- /dev/null
+++ b/components/camel-test/src/test/java/org/apache/camel/test/patterns/MockEndpointFailNoHeaderTest.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.patterns;
+
+import org.apache.camel.EndpointInject;
+import org.apache.camel.Produce;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+public class MockEndpointFailNoHeaderTest extends CamelTestSupport {
+
+    @EndpointInject(uri = ""mock:result"")
+    protected MockEndpoint resultEndpoint;
+
+    @Produce(uri = ""direct:start"")
+    protected ProducerTemplate template;
+
+    @Override
+    public boolean isDumpRouteCoverage() {
+        return true;
+    }
+
+    @Test
+    public void withHeaderTestCase() throws InterruptedException {
+        String expectedBody = ""<matched/>"";
+        resultEndpoint.expectedHeaderReceived(""foo"", ""bar"");
+        template.sendBodyAndHeader(expectedBody, ""foo"", ""bar"");
+        resultEndpoint.assertIsSatisfied();
+    }
+    
+    
+    @Test
+    public void noHeaderTestCase() throws InterruptedException {
+        resultEndpoint.expectedHeaderReceived(""foo"", ""bar"");
+        resultEndpoint.assertIsNotSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                from(""direct:start"").filter(header(""foo"").isEqualTo(""bar"")).to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Dec/18 10:54;githubbot;600","jonathanvila commented on pull request #2976: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2976
 
 
   …xchange received (#2669)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jun/19 08:51;githubbot;600","jonathanvila commented on pull request #2976: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2976
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jun/19 08:54;githubbot;600","jonathanvila commented on pull request #2977: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2977
 
 
   …xchange received (#2669)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jun/19 09:27;githubbot;600","oscerd commented on pull request #2977: CAMEL-12947:MockEndpoint.expectedHeaderReceived should fail when no e…
URL: https://github.com/apache/camel/pull/2977
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jun/19 21:35;githubbot;600",,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 11 06:34:41 UTC 2018,,,,,,,,,,,"0|s00qk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Dec/18 06:43;davsclaus;You should tell that 1 message is expected;;;","09/Dec/18 20:16;AntoineWils;[~davsclaus] it make sense but then the assertion is on the missing message in the count. In other word, you have to know that you forgot to assert the message count. The error did come from a less experienced developer that did not figure out that his mock was not injected in the route.
Isn't it logic that any assertion verifies its prerequisites and fails if they are not met? That was my assumption at least. ;;;","10/Dec/18 07:59;davsclaus;Yeah I think it makes sense to defer that 1 message would arrive when you only set that header expected, like you can do with body today. So its a good improvement.

;;;","10/Dec/18 08:00;davsclaus;Contributions is welcome
https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","11/Dec/18 06:34;ramu11;I am looking into it;;;",,,,,,,,,,,,,,,,,,,,,,,,
Rest DSL generates invalid swagger operation Id,CAMEL-12943,13199302,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,tdiesler,tdiesler,19/Nov/18 11:42,05/Feb/19 16:56,13/Jul/23 08:31,22/Nov/18 07:40,,,,,,,,,,,,,,,,2.23.0,,,,,camel-swagger,,,,,,0,,,,"With this code

 
{code:java}
        rest(""/customers"").description(""Customers REST service"")
            .get(""/\{id}"")
                .bindingMode(RestBindingMode.auto)
                .id(""getCustomerById"")
                .description(""Retrieves a customer for the specified id"")
                .outType(Customer.class)
                .route()
                    .process(exchange -> {
                        Customer customer = new Customer();
                        customer.setId(exchange.getIn().getHeader(""id"", Integer.class));
                        customer.setFirstName(""Kermit"");
                        customer.setLastName(""The Frog"");
                        exchange.getOut().setBody(customer);
                    })
                .endRest();

{code}
 

we see a swagger definition generated like this

 
{code:java}
 ""paths"" : {
    ""/customers/\{id}"" : {
      ""get"" : {
        ""tags"" : [ ""customers"" ],
        ""summary"" : ""Retrieves a customer for the specified id"",
        ""operationId"" : ""route2"",
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""Output type"",
            ""schema"" : {
              ""$ref"" : ""#/definitions/Customer"",
              ""originalRef"" : ""Customer""
            },
            ""responseSchema"" : {
              ""$ref"" : ""#/definitions/Customer"",
              ""originalRef"" : ""Customer""
            }
          }
        }
      }
    }
  },

{code}
 

The operationId seems to be incorrect.

 

In our testsuite, which checks the latest Camel HEAD every Monday, we see ...

 
{code:java}
Caused by: java.lang.IllegalArgumentException: The specified operation with ID: `getCustomerById` cannot be found in the Swagger specification loaded from `http://localhost:8080/api/swagger`. Operations defined in the specification are: route2
    at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.createProducer(RestSwaggerEndpoint.java:198)
    at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:573)
    ... 190 more

{code}",,dmvolod,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12908,CAMEL-13162,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 22 07:44:01 UTC 2018,,,,,,,,,,,"0|s00nco:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Nov/18 11:55;dmvolod;[~tdiesler], oh, I will look at this. Is it possible to run this test locally?;;;","19/Nov/18 12:49;tdiesler;Yes of course.With branch [https://github.com/wildfly-extras/wildfly-camel/blob/camel-2.23.x] do something like ...

 
{code:java}
mvn clean install -Dts.all -DskipTests

mvn install -pl itests/standalone/basic -Dtest=SwaggerIntegrationTest

{code}
 

It should work with master, which uses camel-2.22.2;;;","19/Nov/18 16:29;githubbot;dmvolod opened a new pull request #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623
 
 
   @tdiesler , could you please to look at the PR, but RestSwaggerReaderEnableVendorExtensionTest which was failing also seem to be this issue test.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 08:43;githubbot;tdiesler commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440189881
 
 
   This patch seems to fix the contentID issue, but is still not working for nested context paths
   
   ```
   09:28:45,428 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-2) MSC000001: Failed to start service jboss.deployment.unit.""UndertowSecureRestDslSpringIntegrationTest3.war"".CamelContextActivationService.""UndertowSecureRestDslSpringIntegrationTest3.war"": org.jboss.msc.service.StartException in service jboss.deployment.unit.""UndertowSecureRestDslSpringIntegrationTest3.war"".CamelContextActivationService.""UndertowSecureRestDslSpringIntegrationTest3.war"": Cannot create camel context: UndertowSecureRestDslSpringIntegrationTest3.war
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:71)
   	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1736)
   	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1698)
   	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1556)
   	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
   	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
   	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
   	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
   	at java.lang.Thread.run(Thread.java:748)
   Caused by: org.jboss.msc.service.StartException in anonymous service: Cannot start camel context: secure-rest-context2
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:67)
   	... 8 more
   Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: Cannot add io.undertow.server.HttpHandler for path /test defined in deployment.UndertowSecureRestDslSpringIntegrationTest3.war because that path is already served by deployment.UndertowSecureRestDslSpringIntegrationTest1.war
   	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1826)
   	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:136)
   	at org.wildfly.extension.camel.service.CamelContextActivationService$1.run(CamelContextActivationService.java:63)
   	at org.wildfly.extension.camel.proxy.ProxyUtils$1.invoke(ProxyUtils.java:51)
   	at com.sun.proxy.$Proxy88.run(Unknown Source)
   	at org.wildfly.extension.camel.proxy.ProxyUtils.invokeProxied(ProxyUtils.java:55)
   	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:60)
   	... 8 more
   Caused by: java.lang.IllegalStateException: Cannot add io.undertow.server.HttpHandler for path /test defined in deployment.UndertowSecureRestDslSpringIntegrationTest3.war because that path is already served by deployment.UndertowSecureRestDslSpringIntegrationTest1.war
   	at org.wildfly.extension.camel.undertow.CamelUndertowHostService$WildFlyUndertowHost.validateEndpointContextPath(CamelUndertowHostService.java:211)
   	at org.wildfly.extension.camel.undertow.CamelUndertowHostService$WildFlyUndertowHost.validateEndpointURI(CamelUndertowHostService.java:170)
   	at org.apache.camel.component.undertow.UndertowComponent.registerEndpoint(UndertowComponent.java:336)
   	at org.apache.camel.component.undertow.UndertowConsumer.doStart(UndertowConsumer.java:77)
   	at org.wildfly.extension.camel.undertow.WildFlyUndertowComponent$WildFlyUndertowUndertowConsumer.doStart(WildFlyUndertowComponent.java:86)
   	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
   	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3709)
   	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4027)
   	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3962)
   	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3882)
   	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3646)
   	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3489)
   	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
   	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
   	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
   	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
   	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
   	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
   	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133)
   	... 13 more
   ```
   
   You can reproduce this with branch 
   https://github.com/wildfly-extras/wildfly-camel/tree/camel-2.23.x
   
   ```
   mvn clean install -Dts.all -DskipTests
   mvn install -Dts.all -pl itests/standalone/basic -Dtest=UndertowSecureRestDslSpringIntegrationTest
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 08:59;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440194479
 
 
   This is the last issue for 2.23.0, I hope we can fix it before next weekend :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:05;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440196370
 
 
   Yes, @oscerd ,sure. I'm trying to fix it, but build of the wildfly-camel fails for me with ""Could not resolve dependencies for project org.wildfly.camel:wildfly-camel-feature-modules:pom:8.1.0-SNAPSHOT: Could not find artifact org.kie.remote:kie-remote-client:jar:7.14.0.Final""  seems to be big re-factoring in camel-jbpm

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:17;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440199906
 
 
   It's not released from a while. We changed a bunch of stuff in camel-jbpm in 2.23.0. @mswiderski do you have any idea about the kie-remote-client dependecies in wildfly-camel?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:19;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440200729
 
 
   kie-remote-client has been removed in v7 of jBPM. Please let me know where is wildfly-camel so I can have a look and provide fix for it

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:20;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440200882
 
 
   never mind just found it in the previous comments

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:24;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202106
 
 
   @mswiderski , trying to rebuild components from scratch, may be issue will go away

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:26;githubbot;mswiderski commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202885
 
 
   @dmvolod ok, let me know how it goes. kie-remote-client should not be referenced any more once you get the enhanced camel-jbpm from 2.23.0

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 09:26;githubbot;tdiesler commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440202967
 
 
   You can meet me on #apache-camel or #wildfly-camel

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Nov/18 13:33;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440274714
 
 
   @mswiderski , @oscerd thanks, full rebuild fixed build issue
   @tdiesler I reverted all CAMEL-12908 related commits and test it again. The error stack was the same, as files secure-rest1-camel-context.xml and secure-rest3-camel-context.xml contains the separate verbs with same uri=""/test"". I think this need to be fixed in wildfly-camel.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","21/Nov/18 12:58;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440653729
 
 
   What's the status of this PR in the end?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","21/Nov/18 14:12;githubbot;oscerd commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440674993
 
 
   @dmvolod once you're available, feel free to merge this PR. Thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","21/Nov/18 16:45;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440734094
 
 
   @oscerd, yes I will merge it tomorrow.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Nov/18 07:44;githubbot;dmvolod commented on issue #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623#issuecomment-440940493
 
 
   @ppalaga , thanks, PR merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Nov/18 07:44;githubbot;dmvolod closed pull request #2623: CAMEL-12943: Rest DSL generates invalid swagger operation Id
URL: https://github.com/apache/camel/pull/2623
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
index b0059553bae..83e79f34748 100644
--- a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
@@ -142,6 +142,19 @@ public void run() {
                     });
                 }
                 customIds.add(id);
+            } else {
+                RestDefinition rest = route.getRestDefinition();
+                if (rest != null && route.isRest()) {
+                    VerbDefinition verb = findVerbDefinition(rest, route.getInputs().get(0).getUri());
+                    if (verb != null) {
+                        String id = verb.getId();
+                        if (verb.hasCustomIdAssigned() && ObjectHelper.isNotEmpty(id) && !customIds.contains(id)) {
+                            route.setId(id);
+                            customIds.add(id);
+                            break;
+                        }
+                    }
+                }
             }
         }
 
@@ -169,7 +182,8 @@ public void run() {
             }
             RestDefinition rest = route.getRestDefinition();
             if (rest != null && route.isRest()) {
-                for (VerbDefinition verb : rest.getVerbs()) {
+                VerbDefinition verb = findVerbDefinition(rest, route.getInputs().get(0).getUri());
+                if (verb != null) {
                     String id = verb.idOrCreate(context.getNodeIdFactory());
                     if (!verb.getUsedForGeneratingNodeId()) {
                         id = route.getId();
@@ -195,6 +209,19 @@ public void run() {
             }
         }
     }
+    
+    /**
+     * Find verb associated with the route by mapping uri
+     */
+    private static VerbDefinition findVerbDefinition(RestDefinition rest, String endpointUri) {
+        for (VerbDefinition verb : rest.getVerbs()) {
+            String verbUri = rest.buildFromUri(verb);
+            if (endpointUri.startsWith(verbUri)) {
+                return verb;
+            }
+        }
+        return null;
+    }
 
     /**
      * Validates that the target route has no duplicate id's from any of the existing routes.
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
index 5fcce056d7b..3e09b9a1406 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
@@ -658,6 +658,13 @@ public RouteDefinition route() {
         verb.setRoute(route);
         return route;
     }
+    
+    /**
+     * Build the from endpoint uri for the verb
+     */
+    public String buildFromUri(VerbDefinition verb) {
+        return ""rest:"" + verb.asVerb() + "":"" + buildUri(verb);
+    }
 
     // Implementation
     //-------------------------------------------------------------------------
@@ -799,6 +806,7 @@ public static RouteDefinition asRouteApiDefinition(CamelContext camelContext, Re
         return answer;
     }
 
+    @SuppressWarnings(""rawtypes"")
     private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition> answer, String component) {
         for (VerbDefinition verb : getVerbs()) {
             // either the verb has a singular to or a embedded route
@@ -877,7 +885,7 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
             route.setRestBindingDefinition(binding);
 
             // create the from endpoint uri which is using the rest component
-            String from = ""rest:"" + verb.asVerb() + "":"" + buildUri(verb);
+            String from = buildFromUri(verb);
 
             // append options
             Map<String, Object> options = new HashMap<>();
diff --git a/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java b/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
new file mode 100644
index 00000000000..30b132765d9
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.impl;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.rest.DummyRestConsumerFactory;
+import org.apache.camel.component.rest.DummyRestProcessorFactory;
+import org.junit.Test;
+
+public class RouteIdRestDefinitionTest extends ContextTestSupport {
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        jndi.bind(""dummy-rest"", new DummyRestConsumerFactory());
+        jndi.bind(""dummy-rest-api"", new DummyRestProcessorFactory());
+        return jndi;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:start1?timeout=30000"").to(""mock:result"");
+                from(""direct:start2"").to(""mock:result"");
+                rest(""/say/hello"").get(""/bar"").id(""getSayHelloBar"").to(""mock:result"");
+            }
+        };
+    }
+
+    @Test
+    public void testSayHelloBar() {
+        assertEquals(""getSayHelloBar"", context.getRouteDefinitions().get(2).getId());
+    }
+    
+}
\ No newline at end of file
diff --git a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
index ac838059e34..a7b2d45e6e3 100644
--- a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
+++ b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerReaderEnableVendorExtensionTest.java
@@ -58,7 +58,7 @@ public void configure() throws Exception {
                         .param().name(""body"").type(RestParamType.body).description(""The user to update or create"").endParam()
                         .to(""bean:userService?method=updateUser"")
 
-                    .get(""/findAll"").description(""Find all users"").outTypeList(User.class)
+                    .get(""/findAll"").description(""Find all users"").outType(User[].class)
                         .responseMessage().message(""All the found users"").endResponseMessage()
                         .to(""bean:userService?method=listUsers"");
             }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,
camel-dropbox: upload file does not work,CAMEL-12942,13198841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jbouska,jbouska,16/Nov/18 08:13,16/Nov/18 09:41,13/Jul/23 08:31,16/Nov/18 09:41,2.21.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-dropbox,,,,,,0,,,,"I am not able to upload new file with _DropboxUploadMode.add_ option.

see reproducer:
 - git clone -b refactor_dropbox_test [https://github.com/bouskaJ/camel.git]
 - add access token ([https://github.com/bouskaJ/camel/blob/refactor_dropbox_test/components/camel-dropbox/src/test/resources/test-options.properties])
 - run [DropboxProducerPutSingleFileTest|https://github.com/bouskaJ/camel/blob/refactor_dropbox_test/components/camel-dropbox/src/test/java/org/apache/camel/component/dropbox/integration/producer/DropboxProducerPutSingleFileTest.java]

Workaround:
use _DropboxUploadMode.force_",,acosentino,jbouska,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 16 08:30:45 UTC 2018,,,,,,,,,,,"0|s00kig:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Nov/18 08:29;jbouska;PR sent https://github.com/apache/camel/pull/2621;;;","16/Nov/18 08:30;acosentino;Thanks a lot.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic doneFileName is not working with filename containing 2 dots,CAMEL-12940,13198685,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,aldettinger,aldettinger,15/Nov/18 17:54,15/Nov/18 19:50,13/Jul/23 08:31,15/Nov/18 19:50,2.21.3,2.22.1,2.23.0,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-core,,,,,,0,,,,"Check [this conversation|http://camel.465427.n5.nabble.com/File-polling-issue-for-filename-with-multiple-dots-td5825827.html] out for more context.",,aldettinger,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 15 19:50:20 UTC 2018,,,,,,,,,,,"0|s00jk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Nov/18 18:15;githubbot;aldettinger opened a new pull request #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620
 
 
   …e filename with 2 dots.
   
   Issue traced [here](https://issues.apache.org/jira/browse/CAMEL-12940) and more context [there](http://camel.465427.n5.nabble.com/File-polling-issue-for-filename-with-multiple-dots-td5825827.html).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/18 18:16;githubbot;aldettinger commented on issue #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620#issuecomment-439138701
 
 
   Ok, I'm gonna merge on master, 2.22.x and 2.21.x. Thanks @oscerd.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/18 18:16;githubbot;aldettinger closed pull request #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
index fac9e7e8fbe..c60312375ad 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
@@ -1420,8 +1420,8 @@ protected String createDoneFileName(String fileName) {
 
         pattern = pattern.replaceFirst(""\\$\\{file:name\\}"", onlyName);
         pattern = pattern.replaceFirst(""\\$simple\\{file:name\\}"", onlyName);
-        pattern = pattern.replaceFirst(""\\$\\{file:name.noext\\}"", FileUtil.stripExt(onlyName));
-        pattern = pattern.replaceFirst(""\\$simple\\{file:name.noext\\}"", FileUtil.stripExt(onlyName));
+        pattern = pattern.replaceFirst(""\\$\\{file:name.noext\\}"", FileUtil.stripExt(onlyName, true));
+        pattern = pattern.replaceFirst(""\\$simple\\{file:name.noext\\}"", FileUtil.stripExt(onlyName, true));
 
         // must be able to resolve all placeholders supported
         if (StringHelper.hasStartToken(pattern, ""simple"")) {
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java
new file mode 100644
index 00000000000..a45905a36b4
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeDynamicDoneFileNameWithTwoDotsTest.java
@@ -0,0 +1,68 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import java.io.File;
+import java.lang.invoke.MethodHandles;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.NotifyBuilder;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * This class tests an issue where an input file is not picked up due to a dynamic
+ * doneFileName containing two dots.
+ */
+public class FileConsumeDynamicDoneFileNameWithTwoDotsTest extends ContextTestSupport {
+
+    private static final String TARGET_DIR_NAME = ""target/"" + MethodHandles.lookup().lookupClass().getSimpleName();
+
+    @Override
+    @Before
+    public void setUp() throws Exception {
+        deleteDirectory(TARGET_DIR_NAME);
+        super.setUp();
+    }
+
+    @Test
+    public void testDynamicDoneFileNameContainingTwoDots() throws Exception {
+        NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create();
+        getMockEndpoint(""mock:result"").expectedBodiesReceivedInAnyOrder(""input-body"");
+
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""input-body"", Exchange.FILE_NAME, ""test.twodot.txt"");
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""done-body"", Exchange.FILE_NAME, ""test.twodot.done"");
+
+        assertMockEndpointsSatisfied();
+        assertTrue(notify.matchesMockWaitTime());
+
+        assertFalse(""Input file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.txt"").exists());
+        assertFalse(""Done file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.done"").exists());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:"" + TARGET_DIR_NAME + ""?doneFileName=${file:name.noext}.done&initialDelay=0"").to(""mock:result"");
+            }
+        };
+    }
+}
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java
new file mode 100644
index 00000000000..d1de7a94bc4
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest.java
@@ -0,0 +1,68 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import java.io.File;
+import java.lang.invoke.MethodHandles;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.NotifyBuilder;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * This class tests an issue where an input file is not picked up due to a
+ * dynamic doneFileName using the simple syntax and containing two dots.
+ */
+public class FileConsumeSimpleDynamicDoneFileNameWithTwoDotsTest extends ContextTestSupport {
+
+    private static final String TARGET_DIR_NAME = ""target/"" + MethodHandles.lookup().lookupClass().getSimpleName();
+
+    @Override
+    @Before
+    public void setUp() throws Exception {
+        deleteDirectory(TARGET_DIR_NAME);
+        super.setUp();
+    }
+
+    @Test
+    public void testSimpleDynamicDoneFileNameContainingTwoDots() throws Exception {
+        NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create();
+        getMockEndpoint(""mock:result"").expectedBodiesReceivedInAnyOrder(""input-body"");
+
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""input-body"", Exchange.FILE_NAME, ""test.twodot.txt"");
+        template.sendBodyAndHeader(""file:"" + TARGET_DIR_NAME, ""done-body"", Exchange.FILE_NAME, ""test.twodot.done"");
+
+        assertMockEndpointsSatisfied();
+        assertTrue(notify.matchesMockWaitTime());
+
+        assertFalse(""Input file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.txt"").exists());
+        assertFalse(""Done file should be deleted"", new File(TARGET_DIR_NAME, ""test.twodot.done"").exists());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:"" + TARGET_DIR_NAME + ""?doneFileName=$simple{file:name.noext}.done&initialDelay=0"").to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/18 19:49;githubbot;aldettinger commented on issue #2620: CAMEL-12940: Fixed an issue where dynamic doneFileName does not manag…
URL: https://github.com/apache/camel/pull/2620#issuecomment-439167635
 
 
   Merged on master, 2.22.x and 2.21.x.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Nov/18 19:50;aldettinger;Merged on master, 2.22.x and 2.21.x..;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP regression: RemoteFile does not override populateHeaders method,CAMEL-12933,13198040,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,mshalak,mshalak,13/Nov/18 12:18,14/Nov/18 12:21,13/Jul/23 08:31,14/Nov/18 12:09,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-ftp,,,,,,0,,,,"After upgrade from Camel 2.14 to 2.22.1, I have noticed it no longer sets ""CamelFileHost"" header for Exchange input. After debugging and comparing differences between old and new execution, I have noticed that Camel stopped setting CamelFileHost header after changes in [https://github.com/apache/camel/commit/e3a1bdb6a278b5e4910ba4caf3ebe95751cceaee#diff-f9d7a01c99e5d4239aae6b6834cdfc65].

This happens because previously we had execution chain:
{code:java}
FtpConsumer->RemoteFileEndpoint.createExchange->GenericFile.bindToExchange->RemoteFile.populateHeaders(msg)
{code}
But after this change we have:
{code:java}
FtpConsumer->RemoteFileEndpoint.createExchange->GenericFile.bindToExchange->GenericFile.populateHeaders(msg, false)
{code}
This happens because bindToExchange method sets all the headers via populateHeaders. This method is overriden in RemoteFile, and it adds CamelFileHost header.
{code:java}
public void populateHeaders(GenericFileMessage<T> message) {
    if (message != null) {
        // because there is not probeContentType option 
        // in other file based components, false may be passed
        // as the second argument.
        super.populateHeaders(message, false);
        message.setHeader(""CamelFileHost"", getHostname());
    }
}
{code}
But after changes the signature of the parent method was changed from
{code:java}
public void populateHeaders(GenericFileMessage<T> message) {
{code}
to
{code:java}
public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint) {
{code}
But its signature was not changed in RemoteFile. Since it is missing the @Override annotation, it compiled well and was unnoticed. But now the overridden method in RemoteFile does not get executed, and we end up without CamelFileHost header. It may be unnoticed by those who do not use this header, but if we rely on it, it may be an issue.

My proposed changes will be:
 # Add @Override annotation to populateHeaders method in RemoteFile, so the same bug will not happen.
 # Change its signature to
{code:java}
public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint)
{code}
So it will be called instead of the parent method. If we assume someone already uses this method somehow and we want to make these changes backward compatible, we may just add a new method with this signature and @Override annotation, leaving existing populateHeaders(GenericFileMessage<T> message) without changes.",,acosentino,githubbot,mshalak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 14 11:48:10 UTC 2018,,,,,,,,,,,"0|s00fkw:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"13/Nov/18 12:23;acosentino;[~onderson], since the referenced commit is yours, can you please have a look at this Jira issue if you get a chance? Thanks!;;;","14/Nov/18 01:17;githubbot;onderson opened a new pull request #2613: CAMEL-12933 - override populateHeaders  considering backward compatibility
URL: https://github.com/apache/camel/pull/2613
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 11:48;githubbot;onderson closed pull request #2613: CAMEL-12933 - override populateHeaders  considering backward compatibility
URL: https://github.com/apache/camel/pull/2613
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
index cd1d18eb340..e29c2484889 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFile.java
@@ -42,6 +42,11 @@ public void populateHeaders(GenericFileMessage<T> message) {
             message.setHeader(""CamelFileHost"", getHostname());
         }
     }
+    
+    @Override
+    public void populateHeaders(GenericFileMessage<T> message, boolean isProbeContentTypeFromEndpoint) {
+        populateHeaders(message);
+    }
 
     public String getHostname() {
         return hostname;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AHC-WS: Consumer parameters are not set,CAMEL-12932,13197808,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jukka.aalto,jukka.aalto,12/Nov/18 14:04,15/Nov/18 08:54,13/Jul/23 08:31,15/Nov/18 08:54,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-ahc-ws,,,,,,0,,,,"Trying to set bridgeErrorHandler with following url, ""ahc-ws://localhost?consumer.bridgeErrorHandler=true"", but it did not work.

 

There should probably be configureConsumer-method call in line 71

[https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java]",,acosentino,jukka.aalto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 15 08:54:50 UTC 2018,,,,,,,,,,,"0|s00e5k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Nov/18 14:19;jukka.aalto;I will try to fix this.;;;","15/Nov/18 08:54;acosentino;Since we want to release 2.23.0 probably the next weekend, I had to fix this. Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
error in camel-core/src/main/docs/rest-dsl.adoc,CAMEL-12929,13197670,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,11/Nov/18 22:26,12/Nov/18 14:58,13/Jul/23 08:31,12/Nov/18 14:58,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"Error in {{camel-core/src/main/docs/rest-dsl.adoc}}  RestConfiguration property name: is not {{apiProperties}}, it is {{apiProperty}}, in fact that is the name of the builder method and the xml tag.",,valdar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-11-11 22:26:53.0,,,,,,,,,,,"0|s00db4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
null pointer exceptions accessing swagger url in blueprint projects,CAMEL-12926,13197445,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,09/Nov/18 15:26,14/Nov/18 16:56,13/Jul/23 08:31,14/Nov/18 15:36,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-swagger,,,,,,0,,,,"When a blueprint like:
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">
  
  <reference id=""httpService"" interface=""org.osgi.service.http.HttpService""/>

  <bean class=""org.apache.camel.component.servlet.osgi.OsgiServletRegisterer""
        init-method=""register""
        destroy-method=""unregister"">
    <property name=""alias"" value=""/camel-rest-sql""/>
    <property name=""httpService"" ref=""httpService""/>
    <property name=""servlet"" ref=""camelServlet""/>
  </bean>

  <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet""/>

  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">

    <restConfiguration
        component=""servlet""
        bindingMode=""json""
        contextPath=""/camel-rest-sql"" port=""{{env:HTTP_PORT:8181}}""
        apiContextPath=""/api-doc"">
    </restConfiguration>

    <rest path=""/books"" consumes=""application/json"" produces=""application/json"">
      <get uri=""/"" outType=""java.util.String"">
        <to uri=""log:blueprint-swagger""/>
      </get>
    </rest>

  </camelContext>
</blueprint>
{code}
and then one try to access {{http://localhost:8181/camel-rest-sql/api-doc}} there is a null pointer exception:

{code:java}
2018-11-03 08:31:37,062 | INFO  | ead #2 - timer://foo | generateOrder-route              | 120 - org.apache.camel.camel-core - 2.21.0.fuse-720040 | Inserted new order 1

2018-11-03 08:31:37,547 | INFO  | rocessed%20=%20false | processOrder-route               | 120 - org.apache.camel.camel-core - 2.21.0.fuse-720040 | Processed order id 1 item ActiveMQ of 10 copies of ActiveMQ in Action

2018-11-03 08:31:45,741 | WARN  | qtp1210359820-76     | o.a.c.s.RestSwaggerProcessor     | 125 - org.apache.camel.camel-swagger-java - 2.21.0.fuse-720040 | Error rendering Swagger API due null

java.lang.NullPointerException: null

	at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:211) ~[?:?]

	at org.apache.camel.swagger.RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) ~[?:?]

	at org.apache.camel.component.rest.RestApiProducer.process(RestApiProducer.java:36) ~[?:?]

	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[?:?]

	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[?:?]

	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[?:?]

	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[?:?]

	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[?:?]

	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) ~[?:?]

	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:214) ~[?:?]

	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:80) ~[?:?]

	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[36:javax.servlet-api:3.1.0]

	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865) ~[?:?]

	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:535) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:71) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) ~[?:?]

	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) ~[?:?]

	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) ~[?:?]

	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ~[?:?]

	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1317) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:293) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ~[?:?]

	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) ~[?:?]

	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ~[?:?]

	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219) ~[?:?]

	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ~[?:?]

	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80) ~[?:?]

	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[?:?]

	at org.eclipse.jetty.server.Server.handle(Server.java:531) ~[?:?]

	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) ~[?:?]

	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) ~[?:?]

	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) ~[?:?]

	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) ~[?:?]

	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) ~[?:?]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:132) ~[94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762) [94:org.eclipse.jetty.util:9.4.11.v20180605]

	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680) [94:org.eclipse.jetty.util:9.4.11.v20180605]

	at java.lang.Thread.run(Thread.java:748) [?:?]
{code}
this is happening because {{restConfiguration}} is build with {{apiProperties}} as {{null}} because there is no tag {{<apiProperty key="""" value=""""/>}} inside {{<restConfiguration>}} tag; thus the null pointer here: https://github.com/apache/camel/blob/master/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java#L213-L215

What do you think is the best approach to fix this:
* check for null in {{RestSwaggerSupport.java}}
* or investigate why blueprint use initialize {{apiProperties}} as {{null}} (which I think might be a legitimate behaviour)",,dmvolod,githubbot,ramu11,valdar,,,,,,,,,,,,,,,,,,,,,,CAMEL-12846,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 14 16:56:25 UTC 2018,,,,,,,,,,,"0|s00bx4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Nov/18 16:14;valdar;Hi [~ramu11],
I'm also working on this one, which of the 2 alternatives do you think is better? Or what else you propose to fix it?;;;","12/Nov/18 17:17;ramu11;Did not know you are already working. it is unassigned so I owned. feel free to own it. I have not started;;;","13/Nov/18 09:33;dmvolod;[~valdar], looks like set empty Map if null comes is good enough. But it strange why it not coming from blueprint, as spring works good without explicit apiProperty set.;;;","14/Nov/18 15:13;githubbot;valdar opened a new pull request #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617
 
 
   fix CAMEL-12926

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 15:29;githubbot;zregvart closed pull request #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
index dbbcb905e62..b549634f1f9 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java
@@ -18,6 +18,7 @@
 
 import java.lang.management.ManagementFactory;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -210,7 +211,7 @@ public void renderResourceListing(RestApiResponseAdapter response, BeanConfig sw
 
         List<RestDefinition> rests = getRestDefinitions(contextId);
         if (rests != null) {
-            final Map<String, Object> apiProperties = configuration.getApiProperties();
+            final Map<String, Object> apiProperties = configuration.getApiProperties() != null ? configuration.getApiProperties() : new HashMap<>();
             if (json) {
                 response.setHeader(Exchange.CONTENT_TYPE, (String) apiProperties.getOrDefault(""api.specification.contentType.json"", ""application/json""));
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 15:29;githubbot;zregvart commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438702998
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 16:55;githubbot;valdar commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735496
 
 
   should we backport it to 2.21 as well?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 16:56;githubbot;valdar edited a comment on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735496
 
 
   should we backport it to 2.21 and 2.22 as well?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Nov/18 16:56;githubbot;zregvart commented on issue #2617: CAMEL-12926: fixed null pointer exceptions accessing swagger url inlueprint projects
URL: https://github.com/apache/camel/pull/2617#issuecomment-438735968
 
 
   > should we backport it to 2.21 as well?
   
   @valdar no, the use of `apiProperties` is only on `master`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,
camel-http4 - The sslContextParameters option should be documented on endpoint as well,CAMEL-12916,13196790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Nov/18 10:47,07/Nov/18 10:50,13/Jul/23 08:31,07/Nov/18 10:50,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-http4,tooling,,,,,0,,,,"Reported on gitter
https://gitter.im/apache/apache-camel?at=5be0bcd7de33dd0c96d547b3",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-11-07 10:47:40.0,,,,,,,,,,,"0|s007vs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Action Request Converter is reseting ID on index request to header that is not set,CAMEL-12912,13195942,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,tim.sexton,tim.sexton,02/Nov/18 17:25,09/Nov/18 07:20,13/Jul/23 08:31,09/Nov/18 07:20,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,camel-elasticsearch-rest,,,,,,0,,,,"Currently, the code in the Action Request Converter for the toIndexRequest method has this: 
{code:java}
return createIndexRequest(document, exchange)
.id(exchange.getIn().getHeader(ElasticsearchConstants.PARAM_INDEX_ID, String.class));

{code}
when this method is used it will always set the ID to that header (which is not being set at an earlier time in the code) which will cause the ID to be null (which is a problem for external version types) 

 

This header either needs to be set earlier in the code or the id needs to be set a different way.  

Another way to handle this could be just to put in the documentation that if you want to set a custom id you will need to use this header. ",,tim.sexton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-11-02 17:25:37.0,,,,,,,,,,,"0|s002ns:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gzip Content-Encoding problems after upgrading to Jetty 9.4.12,CAMEL-12911,13195885,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ggrzybek,ggrzybek,02/Nov/18 12:22,06/Nov/18 09:48,13/Jul/23 08:31,06/Nov/18 03:29,2.22.1,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-http,camel-jetty,,,,,0,,,,"After upgrading to Jetty {{9.4.12.v20180830}}, some tests stopped working:
* org.apache.camel.component.jetty.JettyContentTypeTest.testContentTypeWithGZipEncoding(org.apache.camel.component.jetty.JettyContentTypeTest)
* org.apache.camel.component.jetty.JettyImageFileTest.testImageContentWithGZip(org.apache.camel.component.jetty.JettyImageFileTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testGzipProducerWithGzipData(org.apache.camel.component.jetty.HttpGZipEncodingTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testGzipProxy(org.apache.camel.component.jetty.HttpGZipEncodingTest)
* org.apache.camel.component.jetty.HttpGZipEncodingTest.testHttpProducerWithGzip(org.apache.camel.component.jetty.HttpGZipEncodingTest)


I did some analysis on jetty side and the reason is [exactly this commit|https://github.com/eclipse/jetty.project/commit/cf3681ef568be2fea41e89b2937112a7474c5c07] for Jetty issue [1688|https://github.com/eclipse/jetty.project/issues/1688] where this was added to {{jetty-server/src/main/java/org/eclipse/jetty/server/Request.java}}:
{code:xml}
    private void extractContentParameters()
    {
        // Content cannot be encoded
        if (_metaData!=null && getHttpFields().contains(HttpHeader.CONTENT_ENCODING))
            throw new BadMessageException(HttpStatus.NOT_IMPLEMENTED_501,""Unsupported Content-Encoding"");
...
{code}

With Jetty 9.4.11, it's Camel that does gzip encoding (when creating http entity for httpclient 3) and decoding (when reading http body in {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}}).

However, with 9.4.12, after {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}} has read the body, it calls {{org.apache.camel.http.common.DefaultHttpBinding#readHeaders()}} which also extracts parameters.
Because parameters may be POSTed using {{application/x-www-form-urlencoded}} content type, Jetty really needs GZIP Handler.

So far tests worked, because we didn't use {{application/x-www-form-urlencoded}} content type.

I'm not sure how to solve, but maybe, {{org.apache.camel.http.common.DefaultHttpBinding#readRequest()}} should remove {{Content-Encoding: gzip}} header after reading body? IMO, gzip decoding should be done at ""server side"" and jetty is the server - so either it decodes gzip content (using configured {{org.eclipse.jetty.server.handler.gzip.GzipHandler}}) or it should not be aware of encoded body (thus camel should pass wrapped request with {{Content-Encoding}} header filtered.",,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12914,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 02 12:35:36 UTC 2018,,,,,,,,,,,"0|s002bc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Nov/18 12:35;davsclaus;Yeah it sounds plausible to remove that header after the body has been read/unzipped. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot start route using rest dsl due to a mysterious duplicate routeId,CAMEL-12908,13195345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,apupier,apupier,31/Oct/18 10:47,26/Jun/19 19:29,13/Jul/23 08:31,22/Nov/18 07:41,2.21.0,,,,,,,,,,,,,,,2.23.0,,,,,rest,,,,,,0,,,,"issue came from investigation on https://github.com/jboss-fuse/fuse-apicurito-generator/issues/12

the Camel files contains a single route id _route2_ but there is an error while trying to start the application mentioning a duplicate id _route2_

{noformat}
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of duplicate id detected: route2. Please correct ids to be unique among all your routes.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1830) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:136) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.start(CamelContextFactoryBean.java:369) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:416) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:94) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:399) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.createChildManagementContext(EndpointWebMvcAutoConfiguration.java:193) ~[spring-boot-actuator-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration.afterSingletonsInstantiated(EndpointWebMvcAutoConfiguration.java:156) ~[spring-boot-actuator-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:781) ~[spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at io.example.openapi.Application.main(Application.java:31) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of duplicate id detected: route2. Please correct ids to be unique among all your routes.
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1132) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3729) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3443) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) ~[camel-core-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) ~[camel-spring-2.21.0.fuse-720024.jar:2.21.0.fuse-720024]
	... 31 common frames omitted
{noformat}",,apupier,davsclaus,dmvolod,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,CAMEL-13651,,,CAMEL-12943,CAMEL-13162,,,CAMEL-13424,,"31/Oct/18 10:46;apupier;example-fixedVersionsAndRepositories.zip;https://issues.apache.org/jira/secure/attachment/12946362/example-fixedVersionsAndRepositories.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 19 11:46:46 UTC 2018,,,,,,,,,,,"0|i3zu93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/Nov/18 17:22;dmvolod;[~apupier], yes looks like a bug. I've reproduced this issue with upstream code just changing <route> to <route id=""route1""> in the components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml

Will look at route id generator for rest DSL tomorrow. Thanks for reporting.;;;","02/Nov/18 15:35;dmvolod;To implement end-to-end through route id generation with rest and other routes it's necessary to move some code from RestDefinition to the RouteDefinitionHelper. [~davsclaus], what do you think about this? Or use RouteIdFactory as alternative workaround is good enough?;;;","05/Nov/18 08:51;davsclaus;Ah okay, yeah we can move the code if you think its a good solution.

Maybe you can do a PR so we can take a look at the proposed code change?;;;","13/Nov/18 13:46;githubbot;dmvolod opened a new pull request #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612
 
 
   @davsclaus could you please to look at PR

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Nov/18 09:07;githubbot;dmvolod commented on issue #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612#issuecomment-439328269
 
 
   Thanks @onderson and @oscerd 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Nov/18 09:07;githubbot;dmvolod closed pull request #2612: CAMEL-12908: Cannot start route using rest dsl due to a mysterious  duplicate route id
URL: https://github.com/apache/camel/pull/2612
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
index 041bdc212dc..b0059553bae 100644
--- a/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/model/RouteDefinitionHelper.java
@@ -19,14 +19,18 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.builder.ErrorHandlerBuilder;
+import org.apache.camel.model.rest.RestDefinition;
+import org.apache.camel.model.rest.VerbDefinition;
 import org.apache.camel.util.CamelContextHelper;
 import org.apache.camel.util.EndpointHelper;
 import org.apache.camel.util.ObjectHelper;
@@ -145,10 +149,11 @@ public void run() {
         for (final RouteDefinition route : routes) {
             if (route.getId() == null) {
                 // keep assigning id's until we find a free name
+                
                 boolean done = false;
                 String id = null;
                 while (!done) {
-                    id = context.getNodeIdFactory().createId(route);
+                    id = route.idOrCreate(context.getNodeIdFactory());
                     done = !customIds.contains(id);
                 }
                 route.setId(id);
@@ -162,6 +167,32 @@ public void run() {
                 route.setCustomId(false);
                 customIds.add(route.getId());
             }
+            RestDefinition rest = route.getRestDefinition();
+            if (rest != null && route.isRest()) {
+                for (VerbDefinition verb : rest.getVerbs()) {
+                    String id = verb.idOrCreate(context.getNodeIdFactory());
+                    if (!verb.getUsedForGeneratingNodeId()) {
+                        id = route.getId();
+                    }
+                    verb.setRouteId(id);
+                }
+                List<FromDefinition> fromDefinitions = route.getInputs();
+                
+                if (ObjectHelper.isNotEmpty(fromDefinitions)) {
+                    FromDefinition fromDefinition = fromDefinitions.get(0);
+                    String endpointUri = fromDefinition.getEndpointUri();
+                    if (ObjectHelper.isNotEmpty(endpointUri)) {
+                        Map<String, Object> options = new HashMap<String, Object>();
+                        options.put(""routeId"", route.getId());
+                        endpointUri = URISupport.appendParametersToURI(endpointUri, options);
+                     
+                        // replace uri with new routeId
+                        fromDefinition.setUri(endpointUri);
+                        fromDefinitions.set(0, fromDefinition);
+                        route.setInputs(fromDefinitions);
+                    }
+                }
+            }
         }
     }
 
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
index 946fb76c16e..5fcce056d7b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java
@@ -902,23 +902,7 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
             if (outType != null) {
                 options.put(""outType"", outType);
             }
-            // if no route id has been set, then use the verb id as route id
-            if (!route.hasCustomIdAssigned()) {
-                // use id of verb as route id
-                String id = verb.getId();
-                if (id != null) {
-                    route.setId(id);
-                }
-            }
-
-            String routeId = verb.idOrCreate(camelContext.getNodeIdFactory());
-
-            if (!verb.getUsedForGeneratingNodeId()) {
-                routeId = route.idOrCreate(camelContext.getNodeIdFactory());
-            }
 
-            verb.setRouteId(routeId);
-            options.put(""routeId"", routeId);
             if (component != null && !component.isEmpty()) {
                 options.put(""componentName"", component);
             }
@@ -1012,7 +996,6 @@ private void addRouteDefinition(CamelContext camelContext, List<RouteDefinition>
 
             // the route should be from this rest endpoint
             route.fromRest(from);
-            route.routeId(routeId);
             route.setRestDefinition(this);
             answer.add(route);
         }
diff --git a/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java b/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
index bf56005782e..acbe38a6b4b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/rest/VerbDefinition.java
@@ -141,7 +141,7 @@ public void setParams(List<RestOperationParamDefinition> params) {
     /**
      * Sets swagger operation response messages.
      */
-    public void setResponseMsgs(List<RestOperationResponseMsgDefinition> params) {
+    public void setResponseMsgs(List<RestOperationResponseMsgDefinition> responseMsgs) {
         this.responseMsgs = responseMsgs;
     }
 
diff --git a/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml b/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
index c53d943f7d2..246c2a90799 100644
--- a/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
+++ b/components/camel-spring/src/test/resources/org/apache/camel/component/rest/RestRefTest.xml
@@ -54,7 +54,7 @@
         <constant>Hello World</constant>
       </transform>
     </route>
-    <route>
+    <route id=""route1"">
       <from uri=""direct:bye""/>
       <transform>
         <constant>Bye World</constant>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Nov/18 09:10;dmvolod;Thanks [~apupier] for reporting. Fixed.;;;","19/Nov/18 11:46;tdiesler;This change may cause the operationId in swagger to be initialized incorrectly with the routeId.

See: CAMEL-12943;;;",,,,,,,,,,,,,,,,,,,,,
Camel context inconsistencies in Spring Cloud Environment ,CAMEL-12905,13194514,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,omaralles,omaralles,26/Oct/18 21:06,29/Oct/18 14:50,13/Jul/23 08:31,29/Oct/18 14:50,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"In a Spring Cloud environment some components might create a child application context that spring cloud mantains. Such is the case for Feign and Ribbon Clients.

See 7.2 - [https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html]
 ""A central concept in Spring Cloud’s Feign support is that of the named client. Each feign client is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer using the @FeignClient annotation. Spring Cloud creates a new ensemble as an ApplicationContext on demand for each named client using FeignClientsConfiguration.""

This child application contexts are going to be an ApplicationEvent source for the SpringCamelContext and RoutesCollector component who are defined as  ApplicationEvent listeners in a parent context.

SpringCamelContext is intended to be started after a ContextRefreshedEvent.
 RoutesCollector intends to add routes to the camel context after a ContextRefreshedEvent.

When there are child application contexts (ContextRefreshedEvent emitters)  we end up having some inconsistencies in the camel context lifecycle.

 

To reproduce the issue see:

[https://github.com/oalles/camel-cloud-bug]

 

Pull Request:

https://github.com/apache/camel/pull/2581

 

 

 

 

 ",,githubbot,omaralles,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 29 14:50:58 UTC 2018,,,,,,,,,,,"0|i3zp4f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Oct/18 21:59;githubbot;oalles opened a new pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581
 
 
   CAMEL-12905: The trigger that starts the SpringCamelContext and that collect to routes to the camel context, needs to be a expected ContextRefreshedEvent that has been emitted by the ApplicationContext that instantiated the SpringCamelContext instance. 
   
   https://issues.apache.org/jira/browse/CAMEL-12905

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/Oct/18 10:56;githubbot;onderson commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433694655
 
 
   @zregvart , could you have a look?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 10:09;githubbot;zregvart commented on a change in pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#discussion_r228862576
 
 

 ##########
 File path: components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
 ##########
 @@ -84,7 +84,8 @@ public void onApplicationEvent(ContextRefreshedEvent event) {
         CamelContext camelContext = applicationContext.getBean(CamelContext.class);
 
         // only add and start Camel if its stopped (initial state)
-        if (camelContext.getStatus().isStopped()) {
+        if (((ContextRefreshedEvent) event).getApplicationContext().getId().equals(this.applicationContext.getId())
 
 Review comment:
   According to [the documentation](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html#getId--) `ApplicationContext::getId` can return `null`, this would result in `NullPointerException` thrown from this line.
   
   `event` is already a `ContextRefreshedEvent` no need to cast to it.
   
   ```suggestion
           if (event.getApplicationContext() == this.applicationContext)
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 10:09;githubbot;zregvart commented on a change in pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#discussion_r228863323
 
 

 ##########
 File path: components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
 ##########
 @@ -159,7 +159,7 @@ public void stop() {
     public void onApplicationEvent(ApplicationEvent event) {
         LOG.debug(""onApplicationEvent: {}"", event);
 
-        if (event instanceof ContextRefreshedEvent) {
+        if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext().getId().equals(this.applicationContext.getId())) {
 
 Review comment:
   We should watch out for `ApplicationContext::getId` returning `null`
   ```suggestion
           if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext() == this.applicationContext) {
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 10:58;githubbot;oalles commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433868771
 
 
   @zregvart: good point
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 11:00;githubbot;zregvart closed pull request #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
index 54f2064c391..d378e3162be 100644
--- a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
+++ b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java
@@ -84,7 +84,8 @@ public void onApplicationEvent(ContextRefreshedEvent event) {
         CamelContext camelContext = applicationContext.getBean(CamelContext.class);
 
         // only add and start Camel if its stopped (initial state)
-        if (camelContext.getStatus().isStopped()) {
+        if (event.getApplicationContext() == this.applicationContext
+                && camelContext.getStatus().isStopped()) {
             LOG.debug(""Post-processing CamelContext bean: {}"", camelContext.getName());
 
             final AntPathMatcher matcher = new AntPathMatcher();
diff --git a/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java b/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
index e32e581566b..b4dba29728d 100644
--- a/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
+++ b/components/camel-spring/src/main/java/org/apache/camel/spring/SpringCamelContext.java
@@ -159,7 +159,7 @@ public void stop() {
     public void onApplicationEvent(ApplicationEvent event) {
         LOG.debug(""onApplicationEvent: {}"", event);
 
-        if (event instanceof ContextRefreshedEvent) {
+        if (event instanceof ContextRefreshedEvent && ((ContextRefreshedEvent) event).getApplicationContext() == this.applicationContext) {
             // nominally we would prefer to use Lifecycle interface that
             // would invoke start() method, but in order to do that 
             // SpringCamelContext needs to implement SmartLifecycle


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 11:01;githubbot;zregvart commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433869654
 
 
   Thanks for the pull request @oalles :1st_place_medal: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 11:02;githubbot;oalles commented on issue #2581: CAMEL-12905: Camel context inconsistencies in Spring Cloud Environment 
URL: https://github.com/apache/camel/pull/2581#issuecomment-433870086
 
 
   @zregvart  @onderson: Thank you for your work ;) 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Oct/18 14:50;zregvart;Merged from PR [#2581|https://github.com/apache/camel/pull/2581] thanks to [~omaralles];;;",,,,,,,,,,,,,,,,,,,,
Route contract validate does not throw validation exception when validation fails,CAMEL-12900,13194091,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/18 08:30,25/Oct/18 08:46,13/Jul/23 08:31,25/Oct/18 08:46,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"This route will not throw validation exception when expected
{code}
                validator().type(""xml"").withUri(""validator:org/apache/camel/impl/validate.xsd"");

                from(""direct:in"").inputTypeWithValidate(""xml"")
                    .to(""mock:result"");
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-25 08:30:59.0,,,,,,,,,,,"0|i3zmin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle LinkedIn Captcha redirects gracefully,CAMEL-12899,13194051,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,25/Oct/18 05:14,16/Nov/18 09:46,13/Jul/23 08:31,16/Nov/18 09:46,2.22.1,,,,,,,,,,,,,,,2.22.3,2.23.0,,,,camel-linkedin,,,,,,0,camel-linkedin,LinkedIn,,"Currently LinkedIn component throws the exception
{code:java}
java.lang.SecurityException: Invalid CSRF code!{code}
when LinkedIn responds with a CAPTCHA instead of a login token. 

Instead it should detect ac CAPTCHA response and print an appropriate message. In addition, since username and password authentication may not work, the component should support configuring a user generated access token to bypass the LinkedIn login process and still be able to use LinkedIn API. ",,dhirajsb,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 25 17:52:14 UTC 2018,,,,,,,,,,,"0|i3zm9r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Oct/18 05:31;githubbot;dhirajsb opened a new pull request #2578: CAMEL-12899: Added check for LinkedIn CAPTCHA, added accessToken and …
URL: https://github.com/apache/camel/pull/2578
 
 
   …expiryTime properties to avoid login issues

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Oct/18 17:17;githubbot;dhirajsb closed pull request #2578: CAMEL-12899: Added check for LinkedIn CAPTCHA, added accessToken and …
URL: https://github.com/apache/camel/pull/2578
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java b/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
index 51e701f3017..a82a26b252f 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java
@@ -27,7 +27,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.client.ClientRequestContext;
@@ -51,6 +50,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;
 import com.gargoylesoftware.htmlunit.html.HtmlTextInput;
 import com.gargoylesoftware.htmlunit.util.WebConnectionWrapper;
+
 import org.apache.http.HttpHeaders;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpStatus;
@@ -158,23 +158,31 @@ private String getRefreshToken() {
                 url = String.format(AUTHORIZATION_URL_WITH_SCOPE, oAuthParams.getClientId(), csrfId,
                     builder.toString(), encodedRedirectUri);
             }
-            HtmlPage authPage;
+            HtmlPage authPage = null;
             try {
                 authPage = webClient.getPage(url);
             } catch (FailingHttpStatusCodeException e) {
                 // only handle errors returned with redirects
-                if (e.getStatusCode() == HttpStatus.SC_MOVED_TEMPORARILY) {
-                    final URL location = new URL(e.getResponse().getResponseHeaderValue(HttpHeaders.LOCATION));
-                    final String locationQuery = location.getQuery();
-                    if (locationQuery != null && locationQuery.contains(""error="")) {
-                        throw new IOException(URLDecoder.decode(locationQuery).replaceAll(""&"", "", ""));
-                    } else {
-                        // follow the redirect to login form
-                        authPage = webClient.getPage(location);
-                    }
-                } else {
-                    throw e;
-                }
+                boolean done = false;
+                do {
+                        if (e.getStatusCode() == HttpStatus.SC_MOVED_TEMPORARILY || e.getStatusCode() == HttpStatus.SC_SEE_OTHER) {
+                            final URL location = new URL(e.getResponse().getResponseHeaderValue(HttpHeaders.LOCATION));
+                            final String locationQuery = location.getQuery();
+                            if (locationQuery != null && locationQuery.contains(""error="")) {
+                                throw new IOException(URLDecoder.decode(locationQuery).replaceAll(""&"", "", ""));
+                            } else {
+                                // follow the redirect to login form
+                                try {
+                                    authPage = webClient.getPage(location);
+                                    done = true;
+                                } catch (FailingHttpStatusCodeException e1) {
+                                    e = e1;
+                                }
+                            }
+                        } else {
+                            throw e;
+                        }
+                } while (!done);
             }
 
             // look for <div role=""alert"">
@@ -184,12 +192,12 @@ private String getRefreshToken() {
             }
 
             // submit login credentials
-            final HtmlForm loginForm = authPage.getFormByName(""oauth2SAuthorizeForm"");
+            final HtmlForm loginForm = authPage.getForms().get(0);
             final HtmlTextInput login = loginForm.getInputByName(""session_key"");
             login.setText(oAuthParams.getUserName());
             final HtmlPasswordInput password = loginForm.getInputByName(""session_password"");
             password.setText(oAuthParams.getUserPassword());
-            final HtmlSubmitInput submitInput = loginForm.getInputByName(""authorize"");
+            final HtmlSubmitInput submitInput = (HtmlSubmitInput) loginForm.getElementsByAttribute(""input"", ""type"", ""submit"").get(0);
 
             // validate CSRF and get authorization code
             String redirectQuery;
@@ -212,6 +220,10 @@ private String getRefreshToken() {
             while (matcher.find()) {
                 params.put(matcher.group(1), matcher.group(2));
             }
+            // check if we got caught in a Captcha!
+            if (params.get(""challengeId"") != null) {
+                throw new SecurityException(""Unable to login due to CAPTCHA, use with a valid accessToken instead!"");
+            }
             final String state = params.get(""state"");
             if (!csrfId.equals(state)) {
                 throw new SecurityException(""Invalid CSRF code!"");
@@ -221,7 +233,7 @@ private String getRefreshToken() {
                 return params.get(""code"");
             }
 
-        } catch (IOException e) {
+        } catch (Exception e) {
             throw new IllegalArgumentException(""Error authorizing application: "" + e.getMessage(), e);
         }
     }
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
index bb38a5bc5d7..8d3a03e393e 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/AbstractResourceIntegrationTest.java
@@ -20,10 +20,11 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Properties;
-
 import javax.ws.rs.WebApplicationException;
 
 import org.apache.camel.component.linkedin.api.model.Error;
+import org.apache.cxf.Bus;
+import org.apache.cxf.BusFactory;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
 import org.apache.cxf.jaxrs.client.WebClient;
 import org.junit.AfterClass;
@@ -32,6 +33,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static java.util.concurrent.TimeUnit.DAYS;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+
 /**
  * Base class for resource tests.
  */
@@ -39,10 +43,11 @@
 
     protected static final Logger LOG = LoggerFactory.getLogger(PeopleResourceIntegrationTest.class);
     protected static final String DEFAULT_FIELDS = """";
+    public static final long DEFAULT_EXPIRY = MILLISECONDS.convert(60, DAYS) + System.currentTimeMillis();
 
     protected static LinkedInOAuthRequestFilter requestFilter;
-    private static Properties properties;
-    private static OAuthToken token;
+    protected static Properties properties;
+    protected static OAuthToken token;
     private static List<Object> resourceList = new ArrayList<>();
 
     @BeforeClass
@@ -59,6 +64,8 @@ private static LinkedInOAuthRequestFilter createOAuthHelper() throws IOException
         final String clientId = properties.getProperty(""clientId"");
         final String clientSecret = properties.getProperty(""clientSecret"");
         final String redirectUri = properties.getProperty(""redirectUri"");
+        final String accessToken = properties.getProperty(""accessToken"");
+        final String expiryTime = properties.getProperty(""expiryTime"");
 
         final OAuthScope[] scopes;
         final String scope = properties.getProperty(""scope"");
@@ -68,6 +75,12 @@ private static LinkedInOAuthRequestFilter createOAuthHelper() throws IOException
             scopes = null;
         }
 
+        // check if accessToken is set
+        if (accessToken != null) {
+            token = new OAuthToken(null, accessToken,
+                    (expiryTime != null) ? Long.parseLong(expiryTime) : DEFAULT_EXPIRY);
+        }
+
         final OAuthSecureStorage secureStorage = new OAuthSecureStorage() {
             @Override
             public OAuthToken getOAuthToken() {
@@ -105,6 +118,8 @@ public static void afterClass() throws Exception {
             throw new IllegalStateException(AbstractResourceIntegrationTest.class.getName()
                                             + "".beforeClass must be invoked before getResource"");
         }
+        Bus bus = BusFactory.getThreadDefaultBus();
+        bus.setProperty(""allow.empty.path.template.value"", true);
         final T resource = JAXRSClientFactory.create(LinkedInOAuthRequestFilter.BASE_ADDRESS, resourceClass,
 //            Arrays.asList(new Object[] { requestFilter, new LinkedInExceptionResponseFilter() } ));
             Arrays.asList(new Object[]{requestFilter, new EnumQueryParamConverterProvider()}));
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
index 4caaee5f182..78e8e45fb3f 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/java/org/apache/camel/component/linkedin/api/PeopleResourceIntegrationTest.java
@@ -104,9 +104,14 @@ public void testOAuthTokenRefresh() throws Exception {
 
         // mark OAuth token as expired
         final OAuthToken oAuthToken = requestFilter.getOAuthToken();
+        final long expiryTime = oAuthToken.getExpiryTime();
         oAuthToken.setExpiryTime(new Date().getTime());
 
-        peopleResource.getPerson("""", false);
+        try {
+            peopleResource.getPerson("""", false);
+        } finally {
+            token.setExpiryTime(expiryTime);
+        }
     }
 
     @Test
diff --git a/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties b/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
index 43404f5335a..23a3939e3dc 100644
--- a/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
+++ b/components/camel-linkedin/camel-linkedin-api/src/test/resources/test-options.properties
@@ -23,6 +23,10 @@ userPassword=
 clientId=
 # LinkedIn App clientSecret
 clientSecret=
+# LinkedIn access token
+accessToken=
+# LinkedIn token expiry time
+expiryTime=
 # LinkedIn App required scopes
 scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
 # LinkedIn App redirect URI
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
index 94043fa824f..c229f0a529d 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
@@ -89,14 +89,16 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (14 parameters):
+==== Query Parameters (16 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
+| *accessToken* (common) | LinkedIn access token to avoid username and password login. |  | String
 | *clientId* (common) | LinkedIn application client ID |  | String
 | *clientSecret* (common) | LinkedIn application client secret |  | String
+| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch. | 5184000 | long
 | *httpParams* (common) | Custom HTTP params, for example proxy host and port, use constants from AllClientPNames |  | Map
 | *inBody* (common) | Sets the name of a parameter to be passed in the exchange In Body |  | String
 | *lazyAuth* (common) | Flag to enable/disable lazy OAuth, default is true. when enabled, OAuth token retrieval or generation is not done until the first REST call | true | boolean
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
new file mode 100644
index 00000000000..a052daf9d9b
--- /dev/null
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
@@ -0,0 +1,35 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.linkedin;
+
+import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
+import org.apache.camel.component.linkedin.api.OAuthToken;
+import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
+
+/**
+ * Default implementation of {@link OAuthSecureStorage}
+ * with user provided token and expiry time in msecs.
+ */
+public class DefaultOAuthSecureStorage extends CachingOAuthSecureStorage {
+
+    private OAuthToken token;
+
+    public DefaultOAuthSecureStorage(String accessToken, long expiryTime) {
+        super(null);
+        this.token = new OAuthToken(null, accessToken, expiryTime);
+    }
+}
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
index 5189b2caf21..3d8f05d4cb1 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInComponent.java
@@ -24,6 +24,7 @@
 import org.apache.camel.Endpoint;
 import org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter;
 import org.apache.camel.component.linkedin.api.OAuthParams;
+import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
 import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
 import org.apache.camel.component.linkedin.internal.LinkedInApiCollection;
 import org.apache.camel.component.linkedin.internal.LinkedInApiName;
@@ -109,8 +110,12 @@ private LinkedInOAuthRequestFilter createRequestFilter(LinkedInConfiguration con
     }
 
     private static OAuthParams getOAuthParams(LinkedInConfiguration configuration) {
+        OAuthSecureStorage secureStorage = configuration.getSecureStorage();
+        if (secureStorage == null && !ObjectHelper.isEmpty(configuration.getAccessToken())) {
+            secureStorage = new DefaultOAuthSecureStorage(configuration.getAccessToken(), configuration.getExpiryTime());
+        }
         return new OAuthParams(configuration.getUserName(), configuration.getUserPassword(),
-            new CachingOAuthSecureStorage(configuration.getSecureStorage()), configuration.getClientId(), configuration.getClientSecret(),
+            new CachingOAuthSecureStorage(secureStorage), configuration.getClientId(), configuration.getClientSecret(),
             configuration.getRedirectUri(), configuration.getScopes());
     }
 
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
index 26fc1b80a34..114849cdd6f 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
@@ -18,6 +18,7 @@
 
 import java.util.Arrays;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.camel.component.linkedin.api.OAuthScope;
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
@@ -56,6 +57,10 @@
     @UriParam
     private OAuthSecureStorage secureStorage;
     @UriParam
+    private String accessToken;
+    @UriParam(defaultValue = ""5184000"")
+    private long expiryTime = TimeUnit.SECONDS.convert(60, TimeUnit.DAYS);
+    @UriParam
     private String clientId;
     @UriParam
     private String clientSecret;
@@ -116,6 +121,28 @@ public OAuthSecureStorage getSecureStorage() {
         return secureStorage;
     }
 
+    public String getAccessToken() {
+        return accessToken;
+    }
+
+    /**
+     * LinkedIn access token to avoid username and password login.
+     */
+    public void setAccessToken(String accessToken) {
+        this.accessToken = accessToken;
+    }
+
+    public long getExpiryTime() {
+        return expiryTime;
+    }
+
+    /**
+     * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+     */
+    public void setExpiryTime(long expiryTime) {
+        this.expiryTime = expiryTime;
+    }
+
     /**
      * Callback interface for providing an OAuth token or to store the token generated by the component.
      * The callback should return null on the first call and then save the created token in the saveToken() callback.
diff --git a/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties b/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
index 43404f5335a..23a3939e3dc 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
+++ b/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties
@@ -23,6 +23,10 @@ userPassword=
 clientId=
 # LinkedIn App clientSecret
 clientSecret=
+# LinkedIn access token
+accessToken=
+# LinkedIn token expiry time
+expiryTime=
 # LinkedIn App required scopes
 scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
 # LinkedIn App redirect URI
diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
index 44d3f44d762..b26303b7cdf 100644
--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
@@ -96,6 +96,14 @@ public void setResolvePropertyPlaceholders(
          * MUST be provided
          */
         private OAuthSecureStorage secureStorage;
+        /**
+         * LinkedIn access token to avoid username and password login.
+         */
+        private String accessToken;
+        /**
+         * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+         */
+        private Long expiryTime = 5184000L;
         /**
          * LinkedIn application client ID
          */
@@ -167,6 +175,22 @@ public void setSecureStorage(OAuthSecureStorage secureStorage) {
             this.secureStorage = secureStorage;
         }
 
+        public String getAccessToken() {
+            return accessToken;
+        }
+
+        public void setAccessToken(String accessToken) {
+            this.accessToken = accessToken;
+        }
+
+        public Long getExpiryTime() {
+            return expiryTime;
+        }
+
+        public void setExpiryTime(Long expiryTime) {
+            this.expiryTime = expiryTime;
+        }
+
         public String getClientId() {
             return clientId;
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Oct/18 17:52;githubbot;dhirajsb opened a new pull request #2580: CAMEL-12899: Fixed default expiryTime calculation
URL: https://github.com/apache/camel/pull/2580
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Oct/18 17:52;githubbot;dhirajsb closed pull request #2580: CAMEL-12899: Fixed default expiryTime calculation
URL: https://github.com/apache/camel/pull/2580
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
index c229f0a529d..9d7276a4883 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/docs/linkedin-component.adoc
@@ -98,7 +98,7 @@ with the following path and query parameters:
 | *accessToken* (common) | LinkedIn access token to avoid username and password login. |  | String
 | *clientId* (common) | LinkedIn application client ID |  | String
 | *clientSecret* (common) | LinkedIn application client secret |  | String
-| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch. | 5184000 | long
+| *expiryTime* (common) | LinkedIn access token expiry time in milliseconds since Unix Epoch, default is 60 days in the future. |  | Long
 | *httpParams* (common) | Custom HTTP params, for example proxy host and port, use constants from AllClientPNames |  | Map
 | *inBody* (common) | Sets the name of a parameter to be passed in the exchange In Body |  | String
 | *lazyAuth* (common) | Flag to enable/disable lazy OAuth, default is true. when enabled, OAuth token retrieval or generation is not done until the first REST call | true | boolean
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
index a052daf9d9b..5a5804a7477 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/DefaultOAuthSecureStorage.java
@@ -16,20 +16,23 @@
  */
 package org.apache.camel.component.linkedin;
 
+import java.util.concurrent.TimeUnit;
+
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
 import org.apache.camel.component.linkedin.api.OAuthToken;
 import org.apache.camel.component.linkedin.internal.CachingOAuthSecureStorage;
 
 /**
  * Default implementation of {@link OAuthSecureStorage}
- * with user provided token and expiry time in msecs.
+ * with user provided token and optional expiry time in msecs.
  */
 public class DefaultOAuthSecureStorage extends CachingOAuthSecureStorage {
 
-    private OAuthToken token;
-
-    public DefaultOAuthSecureStorage(String accessToken, long expiryTime) {
+    public DefaultOAuthSecureStorage(String accessToken, Long expiryTime) {
         super(null);
+        if (expiryTime == null) {
+            expiryTime = System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS);
+        }
         this.token = new OAuthToken(null, accessToken, expiryTime);
     }
 }
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
index 114849cdd6f..59c189d401c 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/LinkedInConfiguration.java
@@ -18,7 +18,6 @@
 
 import java.util.Arrays;
 import java.util.Map;
-import java.util.concurrent.TimeUnit;
 
 import org.apache.camel.component.linkedin.api.OAuthScope;
 import org.apache.camel.component.linkedin.api.OAuthSecureStorage;
@@ -58,8 +57,8 @@
     private OAuthSecureStorage secureStorage;
     @UriParam
     private String accessToken;
-    @UriParam(defaultValue = ""5184000"")
-    private long expiryTime = TimeUnit.SECONDS.convert(60, TimeUnit.DAYS);
+    @UriParam
+    private Long expiryTime;
     @UriParam
     private String clientId;
     @UriParam
@@ -132,14 +131,14 @@ public void setAccessToken(String accessToken) {
         this.accessToken = accessToken;
     }
 
-    public long getExpiryTime() {
+    public Long getExpiryTime() {
         return expiryTime;
     }
 
     /**
-     * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+     * LinkedIn access token expiry time in milliseconds since Unix Epoch, default is 60 days in the future.
      */
-    public void setExpiryTime(long expiryTime) {
+    public void setExpiryTime(Long expiryTime) {
         this.expiryTime = expiryTime;
     }
 
diff --git a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
index 029e3ab2fec..a263fab6b94 100644
--- a/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
+++ b/components/camel-linkedin/camel-linkedin-component/src/main/java/org/apache/camel/component/linkedin/internal/CachingOAuthSecureStorage.java
@@ -25,7 +25,7 @@
 public class CachingOAuthSecureStorage implements OAuthSecureStorage {
 
     private final OAuthSecureStorage secureStorage;
-    private OAuthToken token;
+    protected OAuthToken token;
 
     public CachingOAuthSecureStorage(OAuthSecureStorage secureStorage) {
         this.secureStorage = secureStorage;
diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
index b26303b7cdf..bdad01867e3 100644
--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java
@@ -101,9 +101,10 @@ public void setResolvePropertyPlaceholders(
          */
         private String accessToken;
         /**
-         * LinkedIn access token expiry time in milliseconds since Unix Epoch.
+         * LinkedIn access token expiry time in milliseconds since Unix Epoch,
+         * default is 60 days in the future.
          */
-        private Long expiryTime = 5184000L;
+        private Long expiryTime;
         /**
          * LinkedIn application client ID
          */


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
PGP Decryption in XML DSL not working,CAMEL-12897,13193844,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,feinhorn,feinhorn,24/Oct/18 11:45,24/Oct/18 13:36,13/Jul/23 08:31,24/Oct/18 13:36,2.21.1,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,, camel-crypto,,,,,,0,,,,"I'm trying to use camel-crypto to crypt and decrypt files with PGP.

Right now, I have the following in my XML DSL:
{code:java}
<dataFormats>
    <pgp id=""encrypt"" keyFileName=""party2public.pgp"" keyUserid=""party2""/>
    <pgp id=""decrypt"" keyFileName=""party2private.pgp""/>
</dataFormats>

<route id=""encrypter"">
    <from uri=""file:ToEncrypt""/>
    <marshal ref=""encrypt""/>
    <to uri=""file:Encrypted""/>
</route>

<route id=""decrypter"">
    <from uri=""file:ToDecrypt""/>
    <unmarshal ref=""decrypt""/>
    <to uri=""file:Decrypted""/>
</route>
{code}
 

The encryption does work, while the decryption throws an error:
{noformat}
org.bouncycastle.openpgp.PGPException: PGP message is encrypted with a key which could not be found in the Secret Keyring.{noformat}
I created a repo with the files being used (camel context, PGP private and public keys), that can be viewed here: [https://github.com/apoguy/Camel-PGP-Test]","This was tested on Windows 10, Java 1.8.191. Using camel core and camel crypto both at 2.21.1.",feinhorn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/18 11:46;feinhorn;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12945391/camel-context.xml","24/Oct/18 11:46;feinhorn;private.pgp;https://issues.apache.org/jira/secure/attachment/12945392/private.pgp","24/Oct/18 11:46;feinhorn;public.pgp;https://issues.apache.org/jira/secure/attachment/12945393/public.pgp",,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-24 11:45:24.0,,,,,,,,,,,"0|i3zkzr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger REST DSL generator not honoring basePath ,CAMEL-12893,13193245,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/Oct/18 11:58,22/Oct/18 12:28,13/Jul/23 08:31,22/Oct/18 12:28,2.19.0,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,When the OpenAPI specification contains a {{basePath}} property the REST DSL routes should be prefixed by that value. The value is currently ignored.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 22 12:28:54 UTC 2018,,,,,,,,,,,"0|i3zhcf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Oct/18 12:28;zregvart;Now {{basePath}} is added to the generated REST DSL (Java route, Java source code and XML REST).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[CAMEL-COUCHBASE] Get document from couchbase error,CAMEL-12892,13193074,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,michael992,michael992,21/Oct/18 01:55,22/Oct/18 17:45,13/Jul/23 08:31,22/Oct/18 17:45,2.22.1,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"/!\ IT IS NOT RELATED TO COUCHDB BUT TO COUCHBASE

 

I try to get a document from couchbase and i getting this error
{code:java}
because of Could not load view ""brewery_beers"" for design doc ""beer""
{code}
So couchbase is a key value engine i just want to get a document by this key and without using view how i suppose to do that ? could someone fix this or remove this component from camel (there is not point tho have this component if there is no possibility to get document with the key from a key value storage engine).

There is even not a camel-couchbase option in Jira.",,acosentino,michael992,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 22 17:45:25 UTC 2018,,,,,,,,,,,"0|i3zgaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Oct/18 08:14;acosentino;There is no reason to remove the component. You're welcome to provide a PR. If you are in a hurry or you're angry for reason we don't know, it's your problem. This is an open source project: you can contribute to make it better, complaining doesn't work here. I'll take a look when I can if you won't work on this.;;;","21/Oct/18 08:14;acosentino;I first need to verify how the component work by the way;;;","21/Oct/18 12:19;michael992;It is not maintened and not working so i don't see the point to maintain this kind of component is just my point of view.

By the way view are in roadmap to be deprecated, if you are doing modification please just provide the availability to get document by ids without need of using view.

 

To reproduce you just need to do something like:
{code:java}
from(""couchbase:http://localhost/test?username=username&password=password"").log(body().toString());
{code}
{code:java}
// from http://camel.apache.org/couchbase.html
from(""couchbase:http://localhost/test?username=username&password=password?operation='GET'"").log(body().toString());
{code}
{code:java}
// from https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc
from(""couchbase:http://localhost/test?username=username&password=password?operation=CCB_GET"").log(body().toString());
{code}
Or Maybe
{code:java}
.pollEnrich().simple(""couchbase:http://localhost/test?username=username&password=password?operation=CCB_GET"")
{code}
Also the documentation is wrong and/or outdated.

 ;;;","21/Oct/18 16:33;acosentino;The doc is autogenerated on GitHub. There is a message on the site. You can contribute to doc too instead of complaining. ;;;","21/Oct/18 16:43;michael992;Ok so I close the ticket ?;;;","21/Oct/18 16:46;acosentino;Leave it open. We'll take a look at the bug and the doc. The issue is ok, it's how you communicate that doesn't sound really good. But no problem, open source is like this sometime;;;","21/Oct/18 16:49;michael992;Ok sorry for this. So you say there is no issue ?;;;","21/Oct/18 16:56;acosentino;No. I'm saying leave it open and we'll check it and ifx it eventually;;;","21/Oct/18 16:59;michael992;Ok thanks;;;","22/Oct/18 07:52;acosentino;As you may see from the documentation here:

[https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc]

The view is used only from the consumer point of view, if you want to get a document by id, you need to use the Couchbase Producer and specify the headers needed. That's why you get an error on the view. 

You can see how the consumer works here:

[https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/java/org/apache/camel/component/couchbase/CouchbaseConsumer.java]

You can do something like:
{code:java}
// from https://github.com/apache/camel/blob/master/components/camel-couchbase/src/main/docs/couchbase-component.adoc
from(""direct:start"").to(""couchbase:http://localhost/test?username=username&password=password&operation=CCB_GET&key=yourkey"").log(body().toString());
{code}
I didn't test this route, it's just written on the fly.

Hope this help. I'll review the adoc documentation and add some example.

Have a nice day.

 ;;;","22/Oct/18 17:41;michael992; Ok good thanks you !;;;","22/Oct/18 17:45;michael992;The documentation will be updated;;;",,,,,,,,,,,,,,,,,
camel-kubernetes getConfigMap does not use Namespace Header,CAMEL-12891,13193014,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,bobpaulin,bobpaulin,20/Oct/18 03:12,22/Oct/18 09:42,13/Jul/23 08:31,22/Oct/18 06:04,2.21.2,2.22.0,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-kubernetes,,,,,,0,,,,The getConfigMap operation does not return a map in a namespace when the CamelKubernetesNamespaceName being specified.  This header should be used by getConfigMap when it is present.,Kubernetes 1.9.11,acosentino,bobpaulin,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Mon Oct 22 09:42:13 UTC 2018,,,,,,,Patch Available,,,,"0|i3zfx3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Oct/18 03:31;githubbot;bobpaulin opened a new pull request #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 06:03;githubbot;oscerd commented on issue #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573#issuecomment-431746925
 
 
   Merged on master, 2.22.x and 2.21.x, thanks @bobpaulin 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 06:03;githubbot;oscerd closed pull request #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
index 7513a8e43af..6878a337cf9 100644
--- a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
+++ b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/config_maps/KubernetesConfigMapsProducer.java
@@ -109,11 +109,16 @@ protected void doListConfigMapsByLabels(Exchange exchange, String operation) thr
     protected void doGetConfigMap(Exchange exchange, String operation) throws Exception {
         ConfigMap configMap = null;
         String cfMapName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, String.class);
+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);
         if (ObjectHelper.isEmpty(cfMapName)) {
             LOG.error(""Get a specific ConfigMap require specify a ConfigMap name"");
             throw new IllegalArgumentException(""Get a specific ConfigMap require specify a ConfigMap name"");
         }
-        configMap = getEndpoint().getKubernetesClient().configMaps().withName(cfMapName).get();
+        if(namespaceName != null) {
+            configMap = getEndpoint().getKubernetesClient().configMaps().inNamespace(namespaceName).withName(cfMapName).get();
+        } else {
+            configMap = getEndpoint().getKubernetesClient().configMaps().withName(cfMapName).get();
+        }
 
         MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);
         exchange.getOut().setBody(configMap);
diff --git a/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java b/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
index ef63de6bf04..f4497698a82 100644
--- a/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
+++ b/components/camel-kubernetes/src/test/java/org/apache/camel/component/kubernetes/producer/KubernetesConfigMapsProducerTest.java
@@ -73,9 +73,9 @@ public void process(Exchange exchange) throws Exception {
 
         assertEquals(3, result.size());
     }
-
+    
     @Test
-    public void getConfigMapTest() throws Exception {
+    public void getConfigMapTestDefaultNamespace() throws Exception {
         ObjectMeta meta = new ObjectMeta();
         meta.setName(""cm1"");
         server.expect().withPath(""/api/v1/namespaces/test/configmaps/cm1"").andReturn(200, new ConfigMapBuilder().withMetadata(meta).build()).once();
@@ -84,7 +84,26 @@ public void getConfigMapTest() throws Exception {
 
             @Override
             public void process(Exchange exchange) throws Exception {
-                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, ""test"");
+                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, ""cm1"");
+            }
+        });
+
+        ConfigMap result = ex.getOut().getBody(ConfigMap.class);
+
+        assertEquals(""cm1"", result.getMetadata().getName());
+    }
+
+    @Test
+    public void getConfigMapTestCustomNamespace() throws Exception {
+        ObjectMeta meta = new ObjectMeta();
+        meta.setName(""cm1"");
+        server.expect().withPath(""/api/v1/namespaces/custom/configmaps/cm1"").andReturn(200, new ConfigMapBuilder().withMetadata(meta).build()).once();
+        server.expect().withPath(""/api/v1/namespaces/custom/configmaps/cm2"").andReturn(200, new ConfigMapBuilder().build()).once();
+        Exchange ex = template.request(""direct:getConfigMap"", new Processor() {
+
+            @Override
+            public void process(Exchange exchange) throws Exception {
+                exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, ""custom"");
                 exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, ""cm1"");
             }
         });


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 06:04;acosentino;Thanks [~bobpaulin]

Comments on github don't work this morning. So I'm writing you on JIRA.;;;","22/Oct/18 09:42;githubbot;oscerd commented on issue #2573: CAMEL-12891 - Allow getConfigMap operation to specify namespace.
URL: https://github.com/apache/camel/pull/2573#issuecomment-431768172
 
 
   Thanks @bobpaulin merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel Printer unable to print to the network printer,CAMEL-12890,13192456,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,calyanbandi,calyanbandi,18/Oct/18 08:23,22/Oct/18 06:18,13/Jul/23 08:31,22/Oct/18 05:51,2.17.0,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,camel-printer,,,,,,0,patch,ready-to-commit,,"Hi,

We have developed a camel route to print a PDF file to a network printer that is configured on the machine. The route looks as follows:

 

<route id=""_route1"">
 <from uri=""file:/opt/user/data?fileName=test.PDF&amp;noop=true""/>
 <to uri=""lpr://1.2.3.4/B4-2nd-floor-right-wing?copies=1&amp;sides=Sides.ONE_SIDED&amp;mimeType=PDF&amp;mediaSize=na-letter&amp;flavor=DocFlavor.INPUT_STREAM&amp;sendToPrinter=true""/>
 </route>

 

When this route is executed we see the following error:

org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[lpr://1.2.3.4:9100/B4-2nd-floor-right-wing?copies=1&flavor=DocFlavor.INPUT_STREAM&mediaSize=na-letter&mediaTray=AUTOSENSE&mimeType=PDF&orientation=portrait&sendToPrinter=true&sides=one-sided]. Reason: javax.print.PrintException: No printer found with name: 1.2.3.4/B4-2nd-floor-right-wing. Please verify that the host and printer are registered and reachable from this machine.

 

With DEBUG logs enabled, i can that it is using the following printer name.

2018-10-17 21:01:05,628 | DEBUG | xtenderThread-26 | PrinterProducer                  | 794 - org.apache.camel.camel-core - 2.17.0.redhat-630310 | Using printer name: 1.2.3.4/B4-2nd-floor-right-wing

 

After more debugging came across the following code in PrinterProducer.java in camel-printer component

private int findPrinter(PrintService[] services, String printer) {
 int position = -1;
 for (int i = 0; i < services.length; i++) {
 if (services[i].getName().toLowerCase().endsWith(printer.toLowerCase())) {
 position = i;
 break;
 }
 }
 return position;
 }

Printer services configured on the machine are:
 * B4-2nd-floor-right-wing
 * B4-2nd-floor-left-wing
 * B4-1st-floor-right-wing
 * B4-1st-floor-left-wing

 

Here the if block condition

{color:#FF0000}services[i].getName().toLowerCase().endsWith(printer.toLowerCase()){color} will always evaluate to false. Because my service name is ""B4-2nd-floor-right-wing"" and printerName in the URI is ""1.2.3.4/B4-2nd-floor-right-wing"" so what you are checking is:

{color:#FF0000}if (""B4-2nd-floor-right-wing"".toLowerCase().endsWith(""1.2.3.4/B4-2nd-floor-right-wing"".toLowerCase()){color} which is always false

 

If  i change the condition to (""1.2.3.4/B4-2nd-floor-right-wing"".toLowerCase().endsWith(""B4-2nd-floor-right-wing"".toLowerCase()) then it works fine

 

I took the latest version (2.23.0-SNAPSHOT) from github which is also having the same condition. Modified the single line and ran my route and it worked fine. 

 

Note that the issue happens only when trying with remote printer and with local printer it works fine. I tested with local printer in my windows PC and it worked fine but none (Windows/Linux) worked with remote printer configuration.

 

Thanks,

Kalyan"," 

Camel version 2.17.0

OS - RHEL Linux 

Running as a standalone application with only following dependencies
 * camel-core
 * camel-spring
 * camel-printer

 ",acosentino,calyanbandi,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Oct/18 08:20;calyanbandi;testCamelPrinter.xml;https://issues.apache.org/jira/secure/attachment/12944500/testCamelPrinter.xml",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,http://camel.465427.n5.nabble.com/Cannot-create-endpoint-with-camel-printer-component-td5742654.html#a5743178,,,,,,,,,,9223372036854775807,,,Mon Oct 22 06:18:39 UTC 2018,,,,,,,,,,,"0|i3zch3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Oct/18 08:39;dmvolod;[~calyanbandi], you are welcome to provide PR and/or JUnit test for this issue.;;;","19/Oct/18 17:16;githubbot;b2kalyan opened a new pull request #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572
 
 
   Please refer to the following link for more detailed explanation about the issue.
   
   https://issues.apache.org/jira/projects/CAMEL/issues/CAMEL-12890?filter=allopenissues
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745617
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 05:52;githubbot;oscerd closed pull request #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
index 7e69aa7759b..e19f9f0b08a 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
@@ -148,7 +148,7 @@ private int findPrinter(PrintService[] services, String printer) {
             // align slashes so we match / or \
             printerName = printerName.toLowerCase(Locale.US);
             printerName = printerName.replace('\\', '/');
-            if (printerName.endsWith(printer)) {
+            if (printer.endsWith(printerName)) {
                 position = i;
                 break;
             }
diff --git a/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java b/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
index 8c099c48305..5a02c8b8f23 100644
--- a/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
+++ b/components/camel-printer/src/test/java/org/apache/camel/component/printer/PrinterPrintTest.java
@@ -306,6 +306,36 @@ public void configure() {
         verify(job1, times(1)).print(any(Doc.class), any(PrintRequestAttributeSet.class));
     }
 
+    /*
+     * Test for CAMEL-12890
+     * Unable to send to remote printer
+     * */
+    @Test
+    public void testSendingFileToRemotePrinter() throws Exception {
+        // setup javax.print 
+        PrintService ps1 = mock(PrintService.class);
+        when(ps1.getName()).thenReturn(""printer1"");
+        when(ps1.isDocFlavorSupported(any(DocFlavor.class))).thenReturn(Boolean.TRUE);
+        boolean res1 = PrintServiceLookup.registerService(ps1);
+        assertTrue(""The Remote PrintService #1 should be registered."", res1);
+        DocPrintJob job1 = mock(DocPrintJob.class);
+        when(ps1.createPrintJob()).thenReturn(job1);
+
+        context.addRoutes(new RouteBuilder() {
+
+            public void configure() {
+                from(""direct:start1"").to(""lpr://remote/printer1?sendToPrinter=true"");
+            }
+        });
+        context.start();
+
+        template.sendBody(""direct:start1"", ""Hello Printer 1"");
+
+        context.stop();
+
+        verify(job1, times(1)).print(any(Doc.class), any(PrintRequestAttributeSet.class));
+    }
+
     @Test
     public void setJobName() throws Exception {
         if (isAwtHeadless()) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745680
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 05:52;githubbot;oscerd commented on issue #2572: Fixing issue CAMEL-12890
URL: https://github.com/apache/camel/pull/2572#issuecomment-431745703
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Oct/18 06:05;acosentino;Thanks [~calyanbandi]

Comments on github don't work this morning, so I'm writing you here.;;;","22/Oct/18 06:17;calyanbandi;You are welcome Andrea.

I am glad that i was able to contribute to the open source community. 

 ;;;","22/Oct/18 06:18;acosentino;We're waiting for other contributions then :);;;",,,,,,,,,,,,,,,,,,,,
The camel-maven-package-plugin issue wrong short java type,CAMEL-12888,13191998,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,aldettinger,aldettinger,16/Oct/18 17:46,20/Oct/18 20:37,13/Jul/23 08:31,20/Oct/18 20:37,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,"For instance, [the seda component documentation |https://github.com/apache/camel/blob/master/camel-core/src/main/docs/seda-component.adoc] exhibits *Exchange>* as the type for the option *defaultQueueFactory* whereas we should issue *BlockingQueueFactory*.",,aldettinger,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 20 20:37:20 UTC 2018,,,,,,,,,,,"0|i3z9nr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Oct/18 18:06;githubbot;aldettinger opened a new pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567
 
 
   …ven-plugin
   
   More details in [CAMEL-12888](https://issues.apache.org/jira/browse/CAMEL-12888).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Oct/18 18:06;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2567

    CAMEL-12888: Fixed the short java type generation in camel-package-ma…

    …ven-plugin
    
    More details in [CAMEL-12888](https://issues.apache.org/jira/browse/CAMEL-12888).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2567.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2567
    
----
commit fc76cae5634ae7961644f92cfa2222d0e475680a
Author: aldettinger <aldettinger@...>
Date:   2018-10-16T18:03:56Z

    CAMEL-12888: Fixed the short java type generation in camel-package-maven-plugin

----
;;;","16/Oct/18 18:07;githubbot;aldettinger commented on issue #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#issuecomment-430339540
 
 
   Could you please have a look ? If the approach fits, I would fix short java type in other parts of the camel-package-maven-plugin model classes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Oct/18 19:57;githubbot;onderson commented on a change in pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#discussion_r225686902
 
 

 ##########
 File path: tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
 ##########
 @@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
 
 Review comment:
   maybe such as of nesting generic types as the following
   `
   java.util.List<java.util.Map<java.lang.String,java.lang.Integer>>
   `
   can also be added?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Oct/18 06:19;githubbot;oscerd commented on a change in pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#discussion_r225791491
 
 

 ##########
 File path: tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
 ##########
 @@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
 
 Review comment:
   Yeah, it would be great

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Oct/18 19:01;githubbot;aldettinger commented on issue #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567#issuecomment-430749645
 
 
   Nice catch, I will add this test indeed and apply the same kind of correction on other model classes from the camel-package-maven-plugin. Thanks @onderson and @oscerd.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Oct/18 19:01;githubbot;aldettinger closed pull request #2567: CAMEL-12888: Fixed the short java type generation in camel-package-ma…
URL: https://github.com/apache/camel/pull/2567
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/docs/seda-component.adoc b/camel-core/src/main/docs/seda-component.adoc
index d12159c8f1d..cdc99f3ef8d 100644
--- a/camel-core/src/main/docs/seda-component.adoc
+++ b/camel-core/src/main/docs/seda-component.adoc
@@ -48,7 +48,7 @@ The SEDA component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/camel-core/src/main/docs/stub-component.adoc b/camel-core/src/main/docs/stub-component.adoc
index eb112d36cd9..8f7840c9ba9 100644
--- a/camel-core/src/main/docs/stub-component.adoc
+++ b/camel-core/src/main/docs/stub-component.adoc
@@ -38,7 +38,7 @@ The Stub component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/camel-core/src/main/docs/vm-component.adoc b/camel-core/src/main/docs/vm-component.adoc
index 8e1c3a9128f..9b9279a8b0e 100644
--- a/camel-core/src/main/docs/vm-component.adoc
+++ b/camel-core/src/main/docs/vm-component.adoc
@@ -68,7 +68,7 @@ The VM component supports 6 options, which are listed below.
 | Name | Description | Default | Type
 | *queueSize* (advanced) | Sets the default maximum capacity of the SEDA queue (i.e., the number of messages it can hold). | 1000 | int
 | *concurrentConsumers* (consumer) | Sets the default number of concurrent threads processing exchanges. | 1 | int
-| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | Exchange>
+| *defaultQueueFactory* (advanced) | Sets the default queue factory. |  | BlockingQueueFactory
 | *defaultBlockWhenFull* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, the calling thread will instead block and wait until the message can be accepted. | false | boolean
 | *defaultOfferTimeout* (producer) | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default, an exception will be thrown stating that the queue is full. By enabling this option, where a configured timeout can be added to the block case. Utilizing the .offer(timeout) method of the underlining java queue |  | long
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/components/camel-ehcache/src/main/docs/ehcache-component.adoc b/components/camel-ehcache/src/main/docs/ehcache-component.adoc
index 05a787aa64c..f4cc6c81587 100644
--- a/components/camel-ehcache/src/main/docs/ehcache-component.adoc
+++ b/components/camel-ehcache/src/main/docs/ehcache-component.adoc
@@ -48,7 +48,7 @@ The Ehcache component supports 7 options, which are listed below.
 | *configuration* (advanced) | Sets the global component configuration |  | EhcacheConfiguration
 | *cacheManager* (common) | The cache manager |  | CacheManager
 | *cacheManager Configuration* (common) | The cache manager configuration |  | Configuration
-| *cacheConfiguration* (common) | The default cache configuration to be used to create caches. |  | CacheConfiguration<?,?>
+| *cacheConfiguration* (common) | The default cache configuration to be used to create caches. |  | CacheConfiguration
 | *cachesConfigurations* (common) | A map of caches configurations to be used to create caches. |  | Map
 | *cacheConfigurationUri* (common) | URI pointing to the Ehcache XML configuration file's location |  | String
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
diff --git a/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc b/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
index 9f3eeebd403..cdf00cd26be 100644
--- a/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
+++ b/components/camel-guava-eventbus/src/main/docs/guava-eventbus-component.adoc
@@ -54,7 +54,7 @@ The Guava EventBus component supports 3 options, which are listed below.
 |===
 | Name | Description | Default | Type
 | *eventBus* (common) | To use the given Guava EventBus instance |  | EventBus
-| *listenerInterface* (common) | The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option. |  | Class<?>
+| *listenerInterface* (common) | The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option. |  | Class
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
 // component options: END
diff --git a/components/camel-milo/src/main/docs/milo-server-component.adoc b/components/camel-milo/src/main/docs/milo-server-component.adoc
index 696f00ccd99..da228426844 100644
--- a/components/camel-milo/src/main/docs/milo-server-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-server-component.adoc
@@ -42,7 +42,7 @@ The OPC UA Server component supports 20 options, which are listed below.
 | *serverName* (common) | Server name |  | String
 | *hostname* (common) | Server hostname |  | String
 | *securityPolicies* (common) | Security policies |  | Set
-| *securityPoliciesById* (common) | Security policies by URI or name |  | String>
+| *securityPoliciesById* (common) | Security policies by URI or name |  | Collection
 | *userAuthentication Credentials* (common) | Set user password combinations in the form of user1:pwd1,user2:pwd2 Usernames and passwords will be URL decoded |  | String
 | *enableAnonymous Authentication* (common) | Enable anonymous authentication, disabled by default | false | boolean
 | *usernameSecurityPolicy Uri* (common) | Set the UserTokenPolicy used when |  | SecurityPolicy
@@ -50,7 +50,7 @@ The OPC UA Server component supports 20 options, which are listed below.
 | *buildInfo* (common) | Server build info |  | BuildInfo
 | *serverCertificate* (common) | Server certificate |  | Result
 | *certificateManager* (common) | Server certificate manager |  | CertificateManager
-| *certificateValidator* (common) | Validator for client certificates |  | CertificateValidator>
+| *certificateValidator* (common) | Validator for client certificates |  | Supplier
 | *defaultCertificate Validator* (common) | Validator for client certificates using default file based approach |  | File
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
diff --git a/tooling/maven/camel-package-maven-plugin/pom.xml b/tooling/maven/camel-package-maven-plugin/pom.xml
index 50afd0f6fc4..ed4a0b73fbc 100644
--- a/tooling/maven/camel-package-maven-plugin/pom.xml
+++ b/tooling/maven/camel-package-maven-plugin/pom.xml
@@ -172,6 +172,26 @@
       <groupId>org.apache.camel</groupId>
       <artifactId>spi-annotations</artifactId>
     </dependency>
+
+    <!-- testing -->
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-api</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-engine</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-params</artifactId>
+      <version>${junit-jupiter-version}</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <profiles>
diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
index d74f314510c..ba758a546ec 100644
--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/model/ComponentOptionModel.java
@@ -155,20 +155,8 @@ public String getShortJavaType() {
     }
 
     public String getShortJavaType(int watermark) {
-        if (javaType.startsWith(""java.util.Map"")) {
-            return ""Map"";
-        } else if (javaType.startsWith(""java.util.Set"")) {
-            return ""Set"";
-        } else if (javaType.startsWith(""java.util.List"")) {
-            return ""List"";
-        }
-
-        String text = javaType;
 
-        int pos = text.lastIndexOf(""."");
-        if (pos != -1) {
-            text = text.substring(pos + 1);
-        }
+        String text = javaType.replaceAll(""<.*>"", """").replaceAll("".*[.]([^.]+)"", ""$1"");
 
         // if its some kind of java object then lets wrap it as its long
         if (""object"".equals(type)) {
diff --git a/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java b/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
new file mode 100644
index 00000000000..dc43fd7e3ef
--- /dev/null
+++ b/tooling/maven/camel-package-maven-plugin/src/test/java/org/apache/camel/maven/packaging/model/ComponentOptionModelTest.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.maven.packaging.model;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import static org.junit.jupiter.params.provider.Arguments.arguments;
+
+public class ComponentOptionModelTest {
+
+    ComponentOptionModel componentOptionModelUnderTest;
+
+    @BeforeEach
+    public void setup() {
+        componentOptionModelUnderTest = new ComponentOptionModel();
+    }
+
+    static Stream<Arguments> getShortJavaTypeVarations() {
+        return Stream.of(
+                         arguments(""String"", ""String""),
+                         arguments(""String"", ""java.lang.String""),
+                         arguments(""List"", ""List<String>""),
+                         arguments(""List"", ""java.util.List<String>""),
+                         arguments(""List"", ""List<java.lang.String>""),
+                         arguments(""BlockingQueue"", ""java.util.concurrent.BlockingQueue<org.apache.camel.Exchange>""),
+                         arguments(""List"", ""java.util.List<Map<String,Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<java.lang.String,Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<String,java.lang.Integer>>""),
+                         arguments(""List"", ""java.util.List<Map<java.lang.String,java.lang.Integer>>""));
+    };
+
+    @ParameterizedTest
+    @MethodSource(""getShortJavaTypeVarations"")
+    public void getShortTypeShouldSucceed(String expectedShortJavaType, String javaType) {
+        componentOptionModelUnderTest.setJavaType(javaType);
+        Assertions.assertEquals(expectedShortJavaType, componentOptionModelUnderTest.getShortJavaType());
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Oct/18 19:13;aldettinger;I've corrected the ComponentOptionModel part. I will report the same kind of fix for other parts of the model.;;;","20/Oct/18 20:37;aldettinger;Ok, all model classes have been fixed.;;;",,,,,,,,,,,,,,,,,,,,
camel-spring-redis wont install from repo,CAMEL-12885,13191904,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,brawlinson,brawlinson,16/Oct/18 12:45,14/Mar/22 10:57,13/Jul/23 08:31,18/May/20 20:02,2.22.0,,,,,,,,,,,,,,,3.x,,,,,camel-spring-redis,,,,,,0,,,,"When I try to install camel-spring-redis from 2.22.0 repo I receive the dependency error:

{code:bash}
karaf@root()> feature:install camel-spring-redis
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-spring-redis; type=karaf.feature; version=""[2.22.0,2.22.0]""; filter:=""(&(osgi.identity=camel-spring-redis)(type=karaf.feature)(version>=2.22.0)(version<=2.22.0))"" [caused by: Unable to resolve camel-spring-redis/2.22.0: missing requirement [camel-spring-redis/2.22.0] osgi.identity; osgi.identity=org.apache.camel.camel-spring-redis; type=osgi.bundle; version=""[2.22.0,2.22.0]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-spring-redis/2.22.0: missing requirement [org.apache.camel.camel-spring-redis/2.22.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.springframework.data.redis.connection)(version>=1.0.0)(!(version>=2.0.0)))""]]
{code}

I've tried to install the missing requirements but this fails to resolve the problem:

{code:bash}
install wrap:mvn:org.springframework.data/spring-data-redis/1.8.15.RELEASE
install mvn:com.querydsl/querydsl-collections/4.2.1
install mvn:com.querydsl/querydsl-core/4.2.1
install mvn:com.mysema.commons/mysema-commons-lang/0.2.4
install mvn:com.mysema.codegen/codegen/0.6.8
install wrap:mvn:org.eclipse.jdt.core.compiler/ecj/3.7.2
{code}
",,acosentino,brawlinson,davsclaus,jgreffe,michael992,mionker,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 14 10:57:47 UTC 2022,,,,,,,,,,,"0|i3z92v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Oct/18 14:21;brawlinson;in parent/pom.xml:

{code:java}
<spring-data-redis-version>2.0.10.RELEASE</spring-data-redis-version>
{code}

But the dependency is asking for !(version>=2.0.0); is that the problem?;;;","16/Oct/18 14:25;acosentino;Probably, there is some mess in the bundle manifest.;;;","21/Mar/19 12:54;k1th;-There is a workaround by overwriting the Export-Package in {{ecj}} which exports version {{0.0.0}}.-

-install mvn:org.springframework.data/spring-data-redis/1.8.6.RELEASE-
 -install mvn:com.querydsl/querydsl-collections-
 -install mvn:com.querydsl/querydsl-core-
 -install mvn:com.mysema.commons/mysema-commons-lang/0.2.4-
 -install mvn:com.mysema.codegen/codegen/0.6.8-
 -install mvn:com.google.guava/guava/19.0-
 -install 'wrap:mvn:org.eclipse.jdt.core.compiler/ecj/4.6.1$overwrite=merge&Export-Package=org.*;version=""4.6.1""'-
 -feature:install camel-spring-redis/2.23.1-

-This is ugly, but it seems to work.-

Correction. This will create a dependency resolver infinite loop when installing anything that uses camel-spring-redis....

 ;;;","18/Apr/19 10:06;mionker;As Barry mentioned, I think the issue is caused by a discrepancy between the version specification in the camel-spring-redis pom.xml
{code:xml}
<properties>
   <camel.osgi.import.before.defaults>
      org.springframework.data.*;version=""[1.0,2)""
   </camel.osgi.import.before.defaults>
</properties>
{code}
and the value of ${spring-data-redis-version} which is specified in the parent/pom.xml - currently as
{code:xml}
<spring-data-redis-version>2.1.1.RELEASE</spring-data-redis-version>
{code}
It would be great if this could even be addressed in a 2.23.x release.;;;","18/Apr/19 12:34;davsclaus;Thanks, you are welcome to provide a PR to fix this, then we can get this merged into applicable branches;;;","18/Apr/19 14:09;acosentino;Even changing the version there, will create other problems.;;;","06/Aug/19 15:07;davsclaus;Anyone tried with latest Camel release;;;","04/Oct/19 14:13;davsclaus;On master it still fails


karaf@root()> feature:install camel-spring-redis
org.apache.felix.resolver.reason.ReasonException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-spring-redis; type=karaf.feature; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-spring-redis)(type=karaf.feature)(version>=3.0.0.SNAPSHOT)(version<=3.0.0.SNAPSHOT))"" [caused by: Unable to resolve camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [camel-spring-redis/3.0.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-spring-redis; type=osgi.bundle; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.springframework.data.geo)(version>=1.0.0)(!(version>=2.0.0)))""]]
	at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343)
	at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:392)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:378)
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:332)
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:257)
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:393)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [camel-spring-redis/3.0.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-spring-redis; type=osgi.bundle; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.springframework.data.geo)(version>=1.0.0)(!(version>=2.0.0)))""]
	at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343)
	... 12 more
Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.springframework.data.geo)(version>=1.0.0)(!(version>=2.0.0)))""
	at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343)
	... 13 more
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-spring-redis; type=karaf.feature; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-spring-redis)(type=karaf.feature)(version>=3.0.0.SNAPSHOT)(version<=3.0.0.SNAPSHOT))"" [caused by: Unable to resolve camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [camel-spring-redis/3.0.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-spring-redis; type=osgi.bundle; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.springframework.data.geo)(version>=1.0.0)(!(version>=2.0.0)))""]];;;","04/Oct/19 14:17;davsclaus;I wonder if there is a bug/issue in the servicemix bundle of spring-data-redis importing that package which are not used in non OSGi

Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-spring-redis/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(osgi.wiring.package=org.springframework.data.redis.connection.jedis)"" [caused by: Unable to resolve org.apache.servicemix.bundles.spring-data-redis/2.1.10.RELEASE_1: missing requirement [org.apache.servicemix.bundles.spring-data-redis/2.1.10.RELEASE_1] osgi.wiring.package; filter:=""(osgi.wiring.package=javax.enterprise.context)""]
	at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343)
	... 13 more
Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve org.apache.servicemix.bundles.spring-data-redis/2.1.10.RELEASE_1: missing requirement [org.apache.servicemix.bundles.spring-data-redis/2.1.10.RELEASE_1] osgi.wiring.package; filter:=""(osgi.wiring.package=javax.enterprise.context)""
	at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343)
	... 14 more;;;","04/Oct/19 14:19;davsclaus;[~acosentino] wonder if you could maybe try to get this fixed on servicemix bundles to not have that package;;;","04/Oct/19 14:45;davsclaus;Okay its a never-ending OSGi pain problem. After adding 10 bundles you end up chasing down JARs that you dont need but something servicemix bundles required

  <feature name='camel-spring-redis' version='${project.version}' start-level='50'>
    <details>Does not work with in OSGi actually</details>
    <feature prerequisite='true'>wrap</feature>
    <feature version='${project.version}'>camel-core</feature>
    <feature version='${spring-version-range}'>spring</feature>
    <feature version='${spring-version-range}'>spring-tx</feature>
    <feature version='${pax-cdi-version}'>pax-cdi</feature>
    <bundle dependency='true'>mvn:commons-pool/commons-pool/${commons-pool-version}</bundle>
    <bundle dependency='true'>wrap:mvn:io.lettuce/lettuce-core/${lettuce-version}</bundle>
    <bundle dependency='true'>mvn:com.fasterxml.jackson.core/jackson-core/${jackson2-version}</bundle>
    <bundle dependency='true'>mvn:com.fasterxml.jackson.core/jackson-databind/${jackson2-version}</bundle>
    <bundle dependency='true'>mvn:com.fasterxml.jackson.core/jackson-annotations/${jackson2-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-common/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-transport/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-buffer/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-handler/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-handler-proxy/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-resolver/${netty-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-redis/${spring-data-redis-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-keyvalue/${spring-data-keyvalue-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-commons/${spring-data-commons-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jedis/${jedis-client-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.commons/commons-pool2/${commons-pool2-version}</bundle>
    <bundle dependency='true'>mvn:commons-beanutils/commons-beanutils/${commons-beanutils-version}</bundle>
    <bundle dependency='true'>mvn:commons-collections/commons-collections/${commons-collections-version}</bundle>
    <bundle dependency='true'>mvn:org.reactivestreams/reactive-streams/${reactive-streams-version}</bundle>
    <bundle dependency='true'>mvn:com.querydsl/querydsl-collections/4.2.1</bundle>
    <bundle dependency='true'>mvn:com.querydsl/querydsl-core/4.2.1</bundle>
    <bundle dependency='true'>mvn:com.querydsl/querydsl-apt/4.2.1</bundle>
    <bundle dependency='true'>mvn:com.google.guava/guava/${google-guava-version}</bundle>
    <bundle dependency='true'>wrap:mvn:com.mysema.commons/mysema-commons-lang/0.2.1</bundle>
    <bundle>mvn:org.apache.camel/camel-spring-redis/${project.version}</bundle>
  </feature>

Lets remove these features that dont work in OSGi for Camel 3;;;","18/May/20 20:02;davsclaus;You can install it on 3.x;;;","13/Sep/21 07:49;michael992;[~davsclaus] I don't agree OSGI is great even if it's little more complexe that regular simple jar why not trying to fix that instead of removing feature ? (still not work with camel 3.11.X);;;","13/Sep/21 07:51;acosentino;You're welcome to fix the feature.;;;","29/Sep/21 13:39;jgreffe;Hello,
we faced the same issue with camel 2.23.1.

We resolved it by updating the feature to:
{code}
<feature name='camel-spring-redis' version='2.23.1' resolver='(obr)' start-level='50'>
    <details>Does not work with in OSGi actually</details>
    <feature version='2.23.1'>camel-core</feature>
    <feature version='[4.3,6)'>spring</feature>
    <feature version='[4.3,6)'>spring-tx</feature>
    <feature version='[4.3,6)'>spring-oxm</feature>
    <feature>camel-netty4</feature>
    <feature>camel-reactive-streams</feature>
    <feature>camel-reactor</feature>
    <bundle dependency='true'>mvn:commons-pool/commons-pool/1.6</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-redis/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-keyvalue/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-commons/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jedis/2.9.0_1</bundle>
    <bundle dependency='true'>mvn:org.apache.commons/commons-pool2/2.6.0</bundle>
    <bundle dependency='true'>wrap:mvn:io.lettuce/lettuce-core/6.1.5.RELEASE</bundle>
    <bundle dependency='true'>wrap:mvn:com.querydsl/querydsl-core/4.4.0</bundle>
    <bundle dependency='true'>wrap:mvn:com.querydsl/querydsl-collections/4.4.0</bundle>
    <bundle dependency='true'>wrap:mvn:com.mysema.commons/mysema-commons-lang/0.2.4</bundle>
    <bundle dependency='true'>wrap:mvn:com.mysema.codegen/codegen/0.6.8$overwrite=merge&amp;Import-Package=org.eclipse.jdt.core.compiler;version=""[0,5)""</bundle> <!-- tweak to accept any version of JDT -->
    <bundle dependency='true'>mvn:org.eclipse.jdt.core.compiler/ecj/4.5.1</bundle>
    <bundle>wrap:mvn:org.apache.camel/camel-spring-redis/2.23.1$overwrite=merge&amp;Import-Package=*,org.springframework.data.redis;version=""[1.0,3)"",org.springframework.data.redis.*;version=""[1.0,3)""</bundle> <!-- add missing imports -->
</feature>
{code};;;","14/Mar/22 10:57;jgreffe;Same for camel 2.24.2:

{code}
  <feature name='camel-spring-redis' version='2.24.2' resolver='(obr)' start-level='50'>
    <details>ESB implementation</details>
    <feature version='2.24.2'>camel-core</feature>
    <feature version='[4.3,6)'>spring</feature>
    <feature version='[4.3,6)'>spring-tx</feature>
    <feature version='[4.3,6)'>spring-oxm</feature>
    <feature>camel-netty4</feature>
    <feature>camel-reactive-streams</feature>
    <feature>camel-reactor</feature>
    <bundle dependency='true'>mvn:commons-pool/commons-pool/1.6</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-redis/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-keyvalue/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-data-commons/2.1.1.RELEASE_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jedis/2.9.0_1</bundle>
    <bundle dependency='true'>mvn:org.apache.commons/commons-pool2/2.6.0</bundle>
    <bundle dependency='true'>wrap:mvn:io.lettuce/lettuce-core/6.1.5.RELEASE</bundle>
    <bundle dependency='true'>wrap:mvn:com.querydsl/querydsl-core/4.4.0</bundle>
    <bundle dependency='true'>wrap:mvn:com.querydsl/querydsl-collections/4.4.0</bundle>
    <bundle dependency='true'>wrap:mvn:com.mysema.commons/mysema-commons-lang/0.2.4</bundle>
    <bundle dependency='true'>wrap:mvn:com.mysema.codegen/codegen/0.6.8$overwrite=merge&amp;Import-Package=org.eclipse.jdt.core.compiler;version=""[0,5)""</bundle>
    <bundle dependency='true'>mvn:org.eclipse.jdt.core.compiler/ecj/4.5.1</bundle>
    <bundle>wrap:mvn:org.apache.camel/camel-spring-redis/2.24.2$overwrite=merge&amp;Import-Package=org.springframework.data.geo,*</bundle>
  </feature>
{code};;;",,,,,,,,,,,,,
Camel Jms headers missing if producer endpoint has transferExchange=true,CAMEL-12882,13191709,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Oct/18 20:33,16/Oct/18 07:30,13/Jul/23 08:31,16/Oct/18 07:30,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-jms,,,,,,0,,,,The JMS headers are not being extracted if you use transferExchange=true.,,acosentino,davsclaus,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 16 06:09:50 UTC 2018,,,,,,,,,,,"0|i3z7vr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Oct/18 04:56;ramu11;in my tests I do get Jms headers  in camel version 2.21.0.fuse-710018-redhat-00001;;;","16/Oct/18 05:04;ramu11;
{noformat}
<dependencies> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-core</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-jms</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-spring</artifactId> <version>2.21.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.fusesource</groupId> <artifactId>activemq-client</artifactId> <version>7.1.0.fuse-710018-redhat-00001</version> </dependency> <dependency> <groupId>org.fusesource</groupId> <artifactId>camel-activemq</artifactId> <version>7.1.0.fuse-710018-redhat-00001</version> </dependency>
{noformat}
;;;","16/Oct/18 05:08;ramu11;
{code:java}
 <bean id=""amqRedeliveryPolicy"" class=""org.apache.activemq.RedeliveryPolicy"">
        <property name=""initialRedeliveryDelay"" value=""1000""/>
		<property name=""backOffMultiplier"" value=""5""/>
        <property name=""useExponentialBackOff"" value=""false""/>
        <property name=""maximumRedeliveries"" value=""3""/>
        <property name=""maximumRedeliveryDelay"" value=""-1""/>	
	
    </bean>
    
     <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
         <property name=""brokerURL"" value=""failover:tcp://localhost:61616""/>
        <property name=""userName"" value=""admin""/>
        <property name=""password"" value=""admin""/>
        <property name=""trustAllPackages"" value=""true""/>
    </bean>

    <bean primary=""true"" id=""pooledConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" init-method=""start"" destroy-method=""stop"">
        <property name=""maxConnections"" value=""10""/>
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
    </bean>

    <bean id=""jmsConfig"" class=""org.apache.activemq.camel.component.ActiveMQConfiguration"">
        <property name=""connectionFactory"" ref=""pooledConnectionFactory""/>
        <property name=""concurrentConsumers"" value=""2""/>
	   <!--  <property name=""acknowledgementModeName"" value=""CLIENT_ACKNOWLEDGE""/> -->
    </bean>

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""configuration"" ref=""jmsConfig""/>
    </bean>
    
    <bean id=""helloBean"" class=""com.mycompany.camel.activemq.HelloBean"">
		<property name=""say"" value=""hello how are you"" />
	</bean>
	
    
    <bean class=""com.mycompany.camel.activemq.HeaderProcessor"" id=""hproc""/>
    <bean class=""com.mycompany.camel.activemq.MyPrepareProcessor"" id=""myPrepare""/>
    <bean class=""com.mycompany.camel.activemq.MyExcProcessor"" id=""exc""/>
    <camelContext id=""camelContext-87aa5925-e951-425d-b911-1ce8c888bb6d"" xmlns=""http://camel.apache.org/schema/spring"">
        <errorHandler deadLetterUri=""activemq:dlq"" id=""dlc"" type=""DeadLetterChannel""/>
         
               <route id=""_route1"">
          	<from uri=""timer:foo?period=1000"" />
          	 <setBody>
				 <method ref=""helloBean"" method=""hello"" />
			</setBody>
          <to id=""_to1"" uri=""activemq:personnel.records?transferExchange=true""/>
           
        </route>  
        
        <route id=""_route3"">
            <from id=""_from3"" uri=""activemq:personnel.records?transferExchange=true""/>
           <!--  <log message=""===this is exchange.headers in _message-handling-receive-msg: ${headers}"" loggingLevel=""WARN"" /> -->
             <log message=""===this is exchange.headers in _message-handling-receive-msg: ${headers}""  />
            <log message=""===this is exchange.properties in _message-handling-receive-msg: ${exchange.properties}""/>
            <to id=""_to3"" uri=""activemq:queue:order.out""/>
        </route>
        
    </camelContext>
</beans>
{code}
;;;","16/Oct/18 05:29;acosentino;This is upstream. It's not Fuse.;;;","16/Oct/18 06:09;davsclaus;Yeah not sure but there can maybe be some situatiuons where the headers get mapped. But I could reproduce this easily from one of the existing unit tests, and so looked at implementing a fix so they are always mapped.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Atom consumer stops polling,CAMEL-12880,13191454,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,saravanakumar,saravanakumar,saravanakumar,14/Oct/18 14:52,15/Oct/18 07:16,13/Jul/23 08:31,15/Oct/18 06:03,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-atom,,,,,,0,,,,"Camel-atom consumer stops polling for new feeds when a connection error occurs. 

It uses java.net.HttpURLConnection without a connection timeout value(The default value is 0 i.e. no timeout).

When network error occur, connection threads hang and it causes ScheduledExecutorService stop polling.",,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 15 06:03:32 UTC 2018,,,,,,,,,,,"0|i3z6b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Oct/18 14:54;githubbot;saravanakumar1987 opened a new pull request #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565
 
 
   PR for https://issues.apache.org/jira/browse/CAMEL-12880. 
   Setting a timeout value of 60 seconds to throw exception if connection not successful so that the scheduled poll consumer restart polling.
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Oct/18 14:54;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2565

    CAMEL-12880 : Atom consumer stops polling

    PR for https://issues.apache.org/jira/browse/CAMEL-12880. 
    Setting a timeout value of 60 seconds to throw exception if connection not successful so that the scheduled poll consumer restart polling.
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2565.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2565
    
----
commit f57fc05e09637c6c94551f7b2f3fdd407a00b957
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-10-14T14:52:50Z

    CAMEL-12880 : Atom consumer stops polling

----
;;;","15/Oct/18 05:57;githubbot;oscerd closed pull request #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java b/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
index f6e9b2c3cee..5b1875a8b45 100644
--- a/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
+++ b/components/camel-atom/src/main/java/org/apache/camel/component/atom/AtomUtils.java
@@ -20,6 +20,7 @@
 import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.net.URLConnection;
 
 import org.apache.abdera.Abdera;
 import org.apache.abdera.model.Document;
@@ -53,13 +54,19 @@ public static Parser getAtomParser() {
      * @throws ParseException is thrown if the parsing failed
      */
     public static Document<Feed> parseDocument(String uri) throws IOException, ParseException {
-        InputStream in = new URL(uri).openStream();
+        URL feedUrl = new URL(uri);
+        URLConnection urlConn = feedUrl.openConnection();
+        urlConn.setConnectTimeout(60000);
+        urlConn.setReadTimeout(60000);
+        InputStream in = urlConn.getInputStream();
         return parseInputStream(in);
     }
 
     public static Document<Feed> parseDocument(String uri, String username, String password) throws IOException {
         URL feedUrl = new URL(uri);
         HttpURLConnection httpcon = (HttpURLConnection) feedUrl.openConnection();
+        httpcon.setConnectTimeout(60000);
+        httpcon.setReadTimeout(60000);
         String encoding = Base64.encodeBase64String(username.concat("":"").concat(password).getBytes());
         httpcon.setRequestProperty(""Authorization"", ""Basic "" + encoding);
         InputStream in = httpcon.getInputStream();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Oct/18 05:57;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2565
;;;","15/Oct/18 06:03;githubbot;oscerd commented on issue #2565: CAMEL-12880 : Atom consumer stops polling
URL: https://github.com/apache/camel/pull/2565#issuecomment-429718607
 
 
   Thanks @saravanakumar1987 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-calendar-stream: Last update date must consider UpdatedMin field instead of TimeMin when used,CAMEL-12874,13190839,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,11/Oct/18 07:27,11/Oct/18 07:40,13/Jul/23 08:31,11/Oct/18 07:40,,,,,,,,,,,,,,,,2.23.0,,,,,camel-google-calendar,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-11 07:27:45.0,,,,,,,,,,,"0|i3z2jj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-servlet - Example for HttpRegistry no longer works throwing FinalModifierException,CAMEL-12873,13190556,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,10/Oct/18 04:15,10/Oct/18 08:29,13/Jul/23 08:31,10/Oct/18 08:29,2.22.1,,,,,,,,,,,,,,,2.23.0,,,,,camel-http-common,camel-servlet,,,,,0,,,,"There was a configuration example for {{HttpRegistry}}, which is introduced by CAMEL-3549, under {{tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/servlet/}}. The test itself was removed probably because it depended on deprecated Spring DM, but the use case CAMEL-3549, which is to use a CamelServlet instance across OSGi bundles, exemplified by the test should be still valid and maintained.

However, with the latest Camel when deploying the attached example ({{camel-example-servlet-httpregistry-blueprint.zip}}) to Karaf it fails to deploy throwing the following error:
{code}
2018-10-09T20:42:54,813 | ERROR | FelixStartLevel  | BlueprintContainerImpl           | 52 - org.apache.aries.blueprint.core - 1.9.0 | Unable to start blueprint container for bundle camel-example-servlet-httpregistry-blueprint/2.23.0.SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: org.apache.aries.proxy.FinalModifierException: The methods protected final void org.apache.camel.http.common.CamelServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException in class org.apache.camel.http.common.CamelServlet are final.
	at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:141) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:716) ~[52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [52:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1373) [?:?]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308) [?:?]
	at java.lang.Thread.run(Thread.java:748) [?:?]
Caused by: org.apache.aries.proxy.FinalModifierException: The methods protected final void org.apache.camel.http.common.CamelServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException in class org.apache.camel.http.common.CamelServlet are final.
	at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.getProxySubclass(ProxySubclassGenerator.java:112) ~[?:?]
	at org.apache.aries.proxy.impl.gen.ProxySubclassGenerator.newProxySubclassInstance(ProxySubclassGenerator.java:171) ~[?:?]
	at org.apache.aries.proxy.impl.AsmProxyManager.createNewProxy(AsmProxyManager.java:140) ~[?:?]
	at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingInterceptingProxy(AbstractProxyManager.java:77) ~[?:?]
	at org.apache.aries.proxy.impl.AbstractProxyManager.createDelegatingProxy(AbstractProxyManager.java:42) ~[?:?]
	at org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.createProxy(AbstractServiceReferenceRecipe.java:332) ~[?:?]
	at org.apache.aries.blueprint.container.ReferenceRecipe.internalCreate(ReferenceRecipe.java:125) ~[?:?]
	... 25 more
{code}
This is clearly because at some point in time {{CamelServlet.service()}} method was marked as {{final}}. We should remove it to restore the use case.",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/18 04:14;tadayosi;camel-example-servlet-httpregistry-blueprint.zip;https://issues.apache.org/jira/secure/attachment/12943169/camel-example-servlet-httpregistry-blueprint.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 10 08:28:38 UTC 2018,,,,,,,,,,,"0|i3z0t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Oct/18 04:31;githubbot;tadayosi opened a new pull request #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559
 
 
   … throwing FinalModifierException
   
   It also recovers an example test which existed under `tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/` as an example.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Oct/18 04:31;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2559

    CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…

    … throwing FinalModifierException
    
    It also recovers an example test which existed under `tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/` as an example.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12873

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2559.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2559
    
----
commit e145c59edd652b1df567ac07423f70fe33133c7e
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-10-10T04:25:21Z

    CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works throwing FinalModifierException

----
;;;","10/Oct/18 07:37;githubbot;oscerd commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428469453
 
 
   For the moment I merged only on master. That final is there since three years. So I won't backport. Don't know what @davsclaus think about backporting this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Oct/18 08:08;githubbot;tadayosi commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428478257
 
 
   Thanks @oscerd. I'm fine with merging only on master atm. We can wait until some other users complain about it for older versions :wink: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Oct/18 08:28;githubbot;oscerd commented on issue #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559#issuecomment-428484141
 
 
   Thanks @tadayosi :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Oct/18 08:28;githubbot;oscerd closed pull request #2559: CAMEL-12873: camel-servlet - Example for HttpRegistry no longer works…
URL: https://github.com/apache/camel/pull/2559
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
index 2b12a6283b1..105373d555a 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/CamelServlet.java
@@ -71,7 +71,7 @@ public void init(ServletConfig config) throws ServletException {
     }
 
     @Override
-    protected final void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
         if (isAsync()) {
             final AsyncContext context = req.startAsync();
             //run async
diff --git a/components/camel-servlet/src/main/docs/servlet-component.adoc b/components/camel-servlet/src/main/docs/servlet-component.adoc
index fee56721985..9e52612226e 100644
--- a/components/camel-servlet/src/main/docs/servlet-component.adoc
+++ b/components/camel-servlet/src/main/docs/servlet-component.adoc
@@ -325,79 +325,71 @@ like this:
 
 From *Camel 2.6.0*, you can publish the
 https://github.com/apache/camel/blob/master/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]
-as an OSGi service with help of SpringDM like this:
+as an OSGi service with Blueprint like this:
 
 [source,xml]
 -------------------------------------------------------------------------
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:osgi=""http://www.springframework.org/schema/osgi""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://www.springframework.org/schema/osgi  http://www.springframework.org/schema/osgi/spring-osgi.xsd"">
-
-    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"">
-    </bean>
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"" />
 
     <!--
-        Enlist it in OSGi service registry
+        Enlist it in OSGi service registry.
         This will cause two things:
         1) As the pax web whiteboard extender is running the CamelServlet will
            be registered with the OSGi HTTP Service
         2) It will trigger the HttpRegistry in other bundles so the servlet is
            made known there too
     -->
-    <osgi:service ref=""camelServlet"">
-        <osgi:interfaces>
+    <service ref=""camelServlet"">
+        <interfaces>
             <value>javax.servlet.Servlet</value>
-            <value>org.apache.camel.component.http.CamelServlet</value>
-        </osgi:interfaces>
-        <osgi:service-properties>
+            <value>org.apache.camel.http.common.CamelServlet</value>
+        </interfaces>
+        <service-properties>
             <entry key=""alias"" value=""/camel/services"" />
             <entry key=""matchOnUriPrefix"" value=""true"" />
-            <entry key=""servlet-name"" value=""CamelServlet""/>
-        </osgi:service-properties>
-    </osgi:service>
+            <entry key=""servlet-name"" value=""CamelServlet"" />
+        </service-properties>
+    </service>
 
-</beans>
+</blueprint>
 -------------------------------------------------------------------------
 
-Then use this service in your camel route like this:
+Then use this service in your Camel route like this:
 
 [source,xml]
 -------------------------------------------------------------------------
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:camel=""http://camel.apache.org/schema/spring""
-       xmlns:osgi=""http://www.springframework.org/schema/osgi""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://www.springframework.org/schema/osgi  http://www.springframework.org/schema/osgi/spring-osgi.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
-
-    <osgi:reference id=""servletref"" interface=""org.apache.camel.component.http.CamelServlet"">
-        <osgi:listener bind-method=""register"" unbind-method=""unregister"">
-            <ref bean=""httpRegistry""/>
-        </osgi:listener>
-    </osgi:reference>
-
-    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry""/>
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <reference id=""servletref"" ext:proxy-method=""classes"" interface=""org.apache.camel.http.common.CamelServlet"">
+        <reference-listener ref=""httpRegistry"" bind-method=""register"" unbind-method=""unregister"" />
+    </reference>
+
+    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry"" />
 
     <bean id=""servlet"" class=""org.apache.camel.component.servlet.ServletComponent"">
         <property name=""httpRegistry"" ref=""httpRegistry"" />
     </bean>
 
-    <bean id=""servletProcessor"" class=""org.apache.camel.itest.osgi.servlet.ServletProcessor"" />
+    <bean id=""servletProcessor"" class=""org.apache.camel.example.servlet.ServletProcessor"" />
 
-    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
         <route>
-            <!-- notice how we can use the servlet scheme which is that osgi:reference above -->
-            <from uri=""servlet:///hello""/>
-            <process ref=""servletProcessor""/>
+            <!-- Notice how we can use the servlet scheme which is that reference above -->
+            <from uri=""servlet://hello"" />
+            <process ref=""servletProcessor"" />
         </route>
     </camelContext>
 
-</beans>
+</blueprint>
 -------------------------------------------------------------------------
 
 For versions prior to Camel 2.6 you can use an `Activator` to publish
diff --git a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
index 980949bdd8b..6ec9847feb9 100644
--- a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
+++ b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java
@@ -20,14 +20,15 @@
 import org.apache.camel.http.common.HttpConsumer;
 
 /**
- * Keeps track of HttpConsumers and CamelServlets and 
+ * Keeps track of HttpConsumers and CamelServlets and
  * connects them to each other. In OSGi there should
  * be one HttpRegistry per bundle.
  * 
  * A CamelServlet that should serve more than one
  * bundle should be registered as an OSGi service.
- * The HttpRegistryImpl can then be configured to listen
- * to service changes. See /tests/camel-itest-osgi/../servlet
+ * The {@link DefaultHttpRegistry} can then be configured to listen
+ * to service changes.
+ * See /examples/camel-example-servlet-httpregistry-blueprint
  * for an example how to use this.
  */
 public interface HttpRegistry {
@@ -42,4 +43,4 @@
 
     CamelServlet getCamelServlet(String servletName);
 
-}
\ No newline at end of file
+}
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/README.md b/examples/camel-example-servlet-httpregistry-blueprint/README.md
new file mode 100644
index 00000000000..77467551ec0
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/README.md
@@ -0,0 +1,55 @@
+# Camel Servlet HttpRegistry Blueprint example
+
+### Introduction
+
+This example shows how to use `camel-servlet` [HttpRegistry](https://github.com/apache/camel/blob/master/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/HttpRegistry.java) so that a `CamelServlet` can serve multiple OSGi bundles.
+
+### Build
+
+You will need to compile this example first:
+
+    mvn install
+
+### Run
+
+To install Apache Camel in Karaf you type in the shell (we use version ${project.version}):
+
+    feature:repo-add camel ${project.version}
+    feature:install camel
+
+First you need to install the following features in Karaf/ServiceMix with:
+
+    feature:install camel-servlet
+    feature:install war
+
+Then you can install the example:
+
+    install -s mvn:org.apache.camel.example/camel-example-servlet-httpregistry-blueprint/${project.version}
+
+And you can see the application running by tailing the logs
+
+    log:tail
+
+And you can use <kbd>ctrl</kbd>+<kbd>c</kbd> to stop tailing the log.
+
+There is a servlet that supports the following operation:
+
+- POST /camel/services/hello - to echo the request body
+
+From the command shell you can use `curl` to post a request to the servlet as shown below:
+
+    curl -X POST -H ""Content-Type: text/plain"" -d ""Hello World"" http://localhost:8181/camel/services/hello
+
+
+### Configuration
+
+This example is implemented in XML DSL in the [src/main/resources/OSGI-INF/blueprint/camel-context.xml](src/main/resources/OSGI-INF/blueprint/camel-context.xml) file.
+
+
+### Forum, Help, etc
+
+If you hit problems please let us know on the Camel Forums:
+    <http://camel.apache.org/discussion-forums.html>
+
+Please help us make Apache Camel better - we appreciate any feedback you may
+have.  Enjoy!
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/pom.xml b/examples/camel-example-servlet-httpregistry-blueprint/pom.xml
new file mode 100644
index 00000000000..6b10a81407e
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/pom.xml
@@ -0,0 +1,82 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>org.apache.camel.example</groupId>
+    <artifactId>examples</artifactId>
+    <version>2.23.0-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>camel-example-servlet-httpregistry-blueprint</artifactId>
+  <name>Camel :: Example :: Servlet HttpRegistry Blueprint</name>
+  <description>An example using Servlet and HttpRegistry with OSGi Blueprint</description>
+  <packaging>jar</packaging>
+
+  <properties>
+    <category>OSGi</category>
+    <title>Servlet HttpRegistry Blueprint</title>
+
+    <camel.osgi.import.pkg>
+      *
+    </camel.osgi.import.pkg>
+    <camel.osgi.export.pkg>
+      *
+    </camel.osgi.export.pkg>
+  </properties>
+
+  <dependencies>
+
+    <!-- camel -->
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-core</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-blueprint</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-servlet</artifactId>
+    </dependency>
+    
+    <!-- logging -->
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-api</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-core</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.logging.log4j</groupId>
+      <artifactId>log4j-slf4j-impl</artifactId>
+      <scope>runtime</scope>
+    </dependency>
+  </dependencies>
+
+</project>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java b/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java
new file mode 100644
index 00000000000..a674b1e52c3
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/java/org/apache/camel/example/servlet/ServletProcessor.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example.servlet;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ServletProcessor implements Processor {
+
+    private static final Logger LOG = LoggerFactory.getLogger(ServletProcessor.class);
+
+    public void process(Exchange exchange) throws Exception {
+        String request = exchange.getIn().getBody(String.class);
+        LOG.info(""The request is: {}"", request);
+        exchange.getOut().setBody(""Echo "" + request);
+    }
+
+}
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt
new file mode 100644
index 00000000000..6b0b1270ff0
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/LICENSE.txt
@@ -0,0 +1,203 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt
new file mode 100644
index 00000000000..2e215bf2e6b
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/META-INF/NOTICE.txt
@@ -0,0 +1,11 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Camel distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Please read the different LICENSE files present in the licenses directory of
+   this distribution.
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml
new file mode 100644
index 00000000000..70adff3feff
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/camel-context.xml
@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <!-- availability=""optional"" is required only when the servlet service is packaged in the same bundle -->
+    <reference id=""servletRef"" ext:proxy-method=""classes"" interface=""org.apache.camel.http.common.CamelServlet""
+        availability=""optional"">
+        <reference-listener ref=""httpRegistry"" bind-method=""register"" unbind-method=""unregister"" />
+    </reference>
+
+    <bean id=""httpRegistry"" class=""org.apache.camel.component.servlet.DefaultHttpRegistry"" />
+
+    <bean id=""servlet"" class=""org.apache.camel.component.servlet.ServletComponent"">
+        <property name=""httpRegistry"" ref=""httpRegistry"" />
+    </bean>
+
+    <bean id=""servletProcessor"" class=""org.apache.camel.example.servlet.ServletProcessor"" />
+
+    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
+        <route>
+            <!-- Notice how we can use the servlet scheme which is that reference above -->
+            <from uri=""servlet://hello"" />
+            <process ref=""servletProcessor"" />
+        </route>
+    </camelContext>
+
+</blueprint>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml
new file mode 100644
index 00000000000..123e65cb26d
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/OSGI-INF/blueprint/servlet-service.xml
@@ -0,0 +1,45 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+    <bean id=""camelServlet"" class=""org.apache.camel.component.servlet.CamelHttpTransportServlet"" />
+
+    <!--
+        Enlist it in OSGi service registry.
+        This will cause two things:
+        1) As the pax web whiteboard extender is running the CamelServlet will
+           be registered with the OSGi HTTP Service
+        2) It will trigger the HttpRegistry in other bundles so the servlet is
+           made known there too
+    -->
+    <service ref=""camelServlet"">
+        <interfaces>
+            <value>javax.servlet.Servlet</value>
+            <value>org.apache.camel.http.common.CamelServlet</value>
+        </interfaces>
+        <service-properties>
+            <entry key=""alias"" value=""/camel/services"" />
+            <entry key=""matchOnUriPrefix"" value=""true"" />
+            <entry key=""servlet-name"" value=""CamelServlet"" />
+        </service-properties>
+    </service>
+
+</blueprint>
diff --git a/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties
new file mode 100644
index 00000000000..9deb51c460b
--- /dev/null
+++ b/examples/camel-example-servlet-httpregistry-blueprint/src/main/resources/log4j2.properties
@@ -0,0 +1,23 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the ""License""); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an ""AS IS"" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+
+appender.console.type = Console
+appender.console.name = console
+appender.console.layout.type = PatternLayout
+appender.console.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
+rootLogger.level = INFO
+rootLogger.appenderRef.console.ref = console
diff --git a/examples/camel-example-servlet-rest-blueprint/README.md b/examples/camel-example-servlet-rest-blueprint/README.md
index 16742d4779b..b3cc1470e8f 100644
--- a/examples/camel-example-servlet-rest-blueprint/README.md
+++ b/examples/camel-example-servlet-rest-blueprint/README.md
@@ -1,5 +1,4 @@
 # Camel Servlet REST and OSGi Blueprint example
-=============================================
 
 ### Introduction
 This example shows how to use Servlet REST to define REST endpoints in Camel routes using the Rest DSL
@@ -11,7 +10,7 @@ You will need to compile this example first:
 	mvn install
 
 
-### run
+### Run
 To install Apache Camel in Karaf you type in the shell (we use version ${project.version}):
 
 	feature:repo-add camel ${project.version}
@@ -35,9 +34,9 @@ And you can use <kbd>ctrl</kbd>+<kbd>c</kbd> to stop tailing the log.
 
 There is a user REST service that supports the following operations
 
- - GET /user/{id} - to view a user with the given id </li>
- - GET /user/final - to view all users</li>
- - PUT /user - to update/create an user</li>
+ - GET /user/{id} - to view a user with the given id
+ - GET /user/final - to view all users
+ - PUT /user - to update/create an user
 
 The view operations are HTTP GET, and update is using HTTP PUT.
 
@@ -54,12 +53,12 @@ From the command shell you can use curl to access the service as shown below:
 
 
 ### Configuration
-This example is implemented in XML DSL in the `src/main/resources/OSGI-INF/bluepring/camel.xml` file.
+This example is implemented in XML DSL in the `src/main/resources/OSGI-INF/blueprint/camel.xml` file.
 
 
 ### Forum, Help, etc
 
-If you hit an problems please let us know on the Camel Forums
+If you hit problems please let us know on the Camel Forums
 	<http://camel.apache.org/discussion-forums.html>
 
 Please help us make Apache Camel better - we appreciate any feedback you may
diff --git a/examples/pom.xml b/examples/pom.xml
index 80e6e4b6562..fea0e77ff41 100644
--- a/examples/pom.xml
+++ b/examples/pom.xml
@@ -97,6 +97,7 @@
     <module>camel-example-restlet-jdbc</module>
     <module>camel-example-route-throttling</module>
     <module>camel-example-scala</module>
+    <module>camel-example-servlet-httpregistry-blueprint</module>
     <module>camel-example-servlet-rest-blueprint</module>
     <module>camel-example-servlet-tomcat</module>
     <module>camel-example-servlet-tomcat-no-spring</module>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Oct/18 08:28;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2559
;;;",,,,,,,,,,,,,,,,,,,,,,
Camel-salesforce component drops the streaming topic,CAMEL-12871,13190298,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,hemangajmera,hemangajmera,09/Oct/18 06:56,18/Dec/20 12:11,13/Jul/23 08:31,18/Dec/20 12:11,2.21.1,3.7.0,,,,,,,,,,,,,,3.7.1,3.8.0,,,,camel-salesforce,,,,,,0,,,,"h1. Summary
Salesforce component tries to reconnect to salesforce, if it gets disconnect. Most of the time it is succeeded. However, there is case when re-connect does not work. At that time salesforce component drops the topic which is subscribe and reconnects back. Everything looks normal again, however, no new streaming messages are received, as the component has dropped the topic.

h1. Observation
Here is the logs which show good reconnect. We can see that camel attempts to subscribe to topic /topic/AccountOwner

{quote}
2018-09-12 02:54:23.530 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=410, error=403::Unknown client, successful=false}]
2018-09-12 02:54:23.531 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=410, error=403::Unknown client, successful=false}
2018-09-12 02:54:23.531  WARN 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=410, error=403::Unknown client, successful=false}
2018-09-12 02:54:23.588 DEBUG 1 --- [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=p1t17l7111gqk4p6eff60893qeev, supportedConnectionTypes=[Ljava.lang.Object;@471ebac8, channel=/meta/handshake, id=411, version=1.0, successful=true}]
2018-09-12 02:54:23.589 DEBUG 1 --- [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_HANDSHAKE]: {ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=p1t17l7111gqk4p6eff60893qeev, supportedConnectionTypes=[Ljava.lang.Object;@471ebac8, channel=/meta/handshake, id=411, version=1.0, successful=true}
2018-09-12 02:54:23.625 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=p1t17l7111gqk4p6eff60893qeev, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=412, successful=true}]
2018-09-12 02:54:23.625 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=p1t17l7111gqk4p6eff60893qeev, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=412, successful=true}
2018-09-12 02:54:23.625 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : Refreshing subscriptions to 1 channels on reconnect
2018-09-12 02:54:23.626  INFO 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : Set Replay extension to replay from `-2` for channel `/topic/AccountOwners`
2018-09-12 02:54:23.626  INFO 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper         : Subscribing to channel /topic/AccountOwners...
2018-09-12 02:54:23.693 DEBUG 1 --- [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=p1t17l7111gqk4p6eff60893qeev, channel=/meta/subscribe, id=413, subscription=/topic/AccountOwners, successful=true}]
2018-09-12 02:54:23.693 DEBUG 1 --- [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_SUBSCRIBE]: {clientId=p1t17l7111gqk4p6eff60893qeev, channel=/meta/subscribe, id=413, subscription=/topic/AccountOwners, successful=true}
2018-09-12 02:54:23.693  INFO 1 --- [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper         : Subscribed to channel /topic/AccountOwners
2018-09-12 02:54:25.453 DEBUG 1 --- [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages ....
{quote}


Here is the logs which shows connection fails. Camel tries to reconnect, but fails. Then camel reconnects after dropping the topic. After this incident, no new messages are received. 
{quote}
2018-09-22 05:26:17.121  WARN 1 --- [ent@2362f559-23] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=8770, error=403::Unknown client, successful=false}
2018-09-22 05:26:18.738 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=5vgmiblu8etx0q3typo6d5tgn, supportedConnectionTypes=[Ljava.lang.Object;@5814852c, channel=/meta/handshake, id=8771, version=1.0, successful=true}]
2018-09-22 05:26:18.738 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_HANDSHAKE]: {ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=5vgmiblu8etx0q3typo6d5tgn, supportedConnectionTypes=[Ljava.lang.Object;@5814852c, channel=/meta/handshake, id=8771, version=1.0, successful=true}
2018-09-22 05:26:18.775 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8772, successful=true}]
2018-09-22 05:26:18.776 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8772, successful=true}
2018-09-22 05:26:18.776 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : Refreshing subscriptions to 1 channels on reconnect
2018-09-22 05:26:18.776  INFO 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : Set Replay extension to replay from `-2` for channel `/topic/AccountOwners`
2018-09-22 05:26:18.776  INFO 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : Subscribing to channel /topic/AccountOwners...
2018-09-22 05:26:19.013 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{channel=/meta/disconnect}, {clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=none, interval=0}, channel=/meta/connect, id=8774, error=403::Unknown client, successful=false}]
2018-09-22 05:26:19.014  INFO 1 --- [ent@2362f559-22] o.a.c.c.s.i.s.SubscriptionHelper         : Restarting on unexpected disconnect from Salesforce...
2018-09-22 05:26:19.014 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=none, interval=0}, channel=/meta/connect, id=8774, error=403::Unknown client, successful=false}
2018-09-22 05:26:19.014  WARN 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=none, interval=0}, channel=/meta/connect, id=8774, error=403::Unknown client, successful=false}
2018-09-22 05:26:19.014 DEBUG 1 --- [ent@2362f559-22] o.a.c.c.s.i.s.SubscriptionHelper         : Waiting to disconnect...
2018-09-22 05:26:19.014 DEBUG 1 --- [ent@2362f559-22] o.a.c.c.s.i.s.SubscriptionHelper         : Pausing for 1000 msecs before restart attempt
2018-09-22 05:26:19.043 DEBUG 1 --- [ent@2362f559-23] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=handshake, interval=0}, channel=/meta/subscribe, id=8773, subscription=/topic/AccountOwners, error=403::Unknown client, successful=false}]
2018-09-22 05:26:19.043 DEBUG 1 --- [ent@2362f559-23] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_SUBSCRIBE]: {clientId=5vgmiblu8etx0q3typo6d5tgn, advice={reconnect=handshake, interval=0}, channel=/meta/subscribe, id=8773, subscription=/topic/AccountOwners, error=403::Unknown client, successful=false}
2018-09-22 05:26:19.054  WARN 1 --- [ent@2362f559-23] o.a.c.c.salesforce.SalesforceConsumer    : Error subscribing to AccountOwners: 403::Unknown client. Caused by: [org.apache.camel.component.salesforce.api.SalesforceException - Error subscribing to AccountOwners: 403::Unknown client]

org.apache.camel.component.salesforce.api.SalesforceException: Error subscribing to AccountOwners: 403::Unknown client
	at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7.onMessage(SubscriptionHelper.java:404) [camel-salesforce-2.21.1.jar!/:2.21.1]
	at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyOnMessage(AbstractClientSession.java:594) [cometd-java-common-3.1.2.jar!/:na]
	at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyMessageListeners(AbstractClientSession.java:579) [cometd-java-common-3.1.2.jar!/:na]
	at org.cometd.common.AbstractClientSession.notifyListeners(AbstractClientSession.java:291) [cometd-java-common-3.1.2.jar!/:na]
	at org.cometd.common.AbstractClientSession.receive(AbstractClientSession.java:257) [cometd-java-common-3.1.2.jar!/:na]
	at org.cometd.client.BayeuxClient.processMessage(BayeuxClient.java:822) [cometd-java-client-3.1.2.jar!/:na]
	at org.cometd.client.BayeuxClient.processMessages(BayeuxClient.java:618) [cometd-java-client-3.1.2.jar!/:na]
	at org.cometd.client.BayeuxClient.access$3100(BayeuxClient.java:100) [cometd-java-client-3.1.2.jar!/:na]
	at org.cometd.client.BayeuxClient$MessageTransportListener.onMessages(BayeuxClient.java:1189) [cometd-java-client-3.1.2.jar!/:na]
	at org.cometd.client.transport.LongPollingTransport$2.onComplete(LongPollingTransport.java:236) [cometd-java-client-3.1.2.jar!/:na]
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:464) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:410) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:301) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.http.HttpParser.handleContentMessage(HttpParser.java:628) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1594) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1442) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:173) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:134) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:72) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:319) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:175) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:133) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:754) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:672) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]

2018-09-22 05:26:20.070 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=91ffaqyez0nsf71n1yganknag4o, supportedConnectionTypes=[Ljava.lang.Object;@249260ff, channel=/meta/handshake, id=8775, version=1.0, successful=true}]
2018-09-22 05:26:20.070 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_HANDSHAKE]: {ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=91ffaqyez0nsf71n1yganknag4o, supportedConnectionTypes=[Ljava.lang.Object;@249260ff, channel=/meta/handshake, id=8775, version=1.0, successful=true}
2018-09-22 05:26:20.108 DEBUG 1 --- [ent@2362f559-23] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=91ffaqyez0nsf71n1yganknag4o, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8776, successful=true}]
2018-09-22 05:26:20.108 DEBUG 1 --- [ent@2362f559-23] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=91ffaqyez0nsf71n1yganknag4o, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8776, successful=true}
2018-09-22 05:26:20.108  INFO 1 --- [ent@2362f559-22] o.a.c.c.s.i.s.SubscriptionHelper         : Successfully restarted!
{quote}

Here are the logs afterward, where on getting 403 error camel tries to reconnect, but does not subscribe to topic
{quote}
2018-09-22 08:27:54.440  WARN 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=8876, error=403::Unknown client, successful=false}
2018-09-22 08:27:54.489 DEBUG 1 --- [ent@2362f559-19] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=8318v3qm6whrb71uj5d6w2qv97q, supportedConnectionTypes=[Ljava.lang.Object;@1b0b2091, channel=/meta/handshake, id=8877, version=1.0, successful=true}]
2018-09-22 08:27:54.489 DEBUG 1 --- [ent@2362f559-19] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_HANDSHAKE]: {ext={replay=true, payload.format=true}, minimumVersion=1.0, clientId=8318v3qm6whrb71uj5d6w2qv97q, supportedConnectionTypes=[Ljava.lang.Object;@1b0b2091, channel=/meta/handshake, id=8877, version=1.0, successful=true}
2018-09-22 08:27:54.526 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=8318v3qm6whrb71uj5d6w2qv97q, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8878, successful=true}]
2018-09-22 08:27:54.527 DEBUG 1 --- [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=8318v3qm6whrb71uj5d6w2qv97q, advice={reconnect=retry, interval=0, timeout=110000}, channel=/meta/connect, id=8878, successful=true}
2018-09-22 08:29:44.566 DEBUG 1 --- [ent@2362f559-19] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{clientId=8318v3qm6whrb71uj5d6w2qv97q, channel=/meta/connect, id=8879, successful=true}]
{quote}

h1. Desired functionality
Salesforce component to continue to try reconnect *without* dropping the topic",,hemangajmera,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 18 12:11:14 UTC 2020,,,,,,,,,,,"0|i3yz7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Oct/18 11:19;zregvart;[~hemangajmera] can you explain what do you mean by dropping a topic?;;;","10/Oct/18 16:47;hemangajmera;There are three set logs
 # Camel reconnection before it dropped
 # Camel error after which it could not reconnect
 # Camel reconnection after the error in log 2

If we compare the logs in section 1 and section 3, there is difference in reconnection.

In the first set of logs ( good re-connection ) I can see

2018-09-12 02:54:23.625 DEBUG 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : Refreshing subscriptions to 1 channels on reconnect
 2018-09-12 02:54:23.626 INFO 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : Set Replay extension to replay from `-2` for channel `/topic/AccountOwners`
 2018-09-12 02:54:23.626 INFO 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : *Subscribing to channel /topic/AccountOwners*...

 

This is missing in last sets of logs.

Camel is reconnecting to salesforce, but not subscibing to channel. However when we restart, it starts working fine.;;;","10/Oct/18 16:53;hemangajmera;One more point

I have just extracted relevant part of logs...

For e.g. every 2-3 hours camel gets disconnection, so the first type of logs is seen every 2-3 hours. Then there was issue ( 2nd type of log). After that 3rd type of log is seen to be repeating every 2-3 hours.

 

 ;;;","10/Oct/18 19:06;zregvart;[~hemangajmera] can you please explain what do you mean by ""it dropped"", *what dropped what*?

In the logs you provided I can see:

*The first log:*

{code}
2018-09-12 02:54:23.625 DEBUG 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : Refreshing subscriptions to 1 channels on reconnect
2018-09-12 02:54:23.626 INFO 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : Set Replay extension to replay from `-2` for channel `/topic/AccountOwners`
2018-09-12 02:54:23.626 INFO 1 — [ent@2362f559-20] o.a.c.c.s.i.s.SubscriptionHelper : Subscribing to channel /topic/AccountOwners...
2018-09-12 02:54:23.693 DEBUG 1 — [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper$5 : Received messages [
Unknown macro: {clientId=p1t17l7111gqk4p6eff60893qeev, channel=/meta/subscribe, id=413, subscription=/topic/AccountOwners, successful=true}

]
2018-09-12 02:54:23.693 DEBUG 1 — [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper : [CHANNEL:META_SUBSCRIBE]:

2018-09-12 02:54:23.693 INFO 1 — [ent@2362f559-21] o.a.c.c.s.i.s.SubscriptionHelper : Subscribed to channel /topic/AccountOwners
{code}

*And the second log:*

{code}
2018-09-22 05:26:18.776 DEBUG 1 — [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper : Refreshing subscriptions to 1 channels on reconnect
2018-09-22 05:26:18.776 INFO 1 — [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper : Set Replay extension to replay from `-2` for channel `/topic/AccountOwners`
2018-09-22 05:26:18.776 INFO 1 — [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper : Subscribing to channel /topic/AccountOwners...
2018-09-22 05:26:19.013 DEBUG 1 — [ent@2362f559-24] o.a.c.c.s.i.s.SubscriptionHelper$5 : Received messages [
Unknown macro: {channel=/meta/disconnect}

, {clientId=5vgmiblu8etx0q3typo6d5tgn, advice=
Unknown macro: {reconnect=none, interval=0}

, channel=/meta/connect, id=8774, error=403::Unknown client, successful=false}]
{code}

The only difference here is that Salesforce replied with an error: *{{error=403::Unknown client, successful=false}}*.

Can you explain why Salesforce issued a *403* error, this would help me reproduce the issue?

Are you saying that after Salesforce reports a *403* error that *the topic subscription is not performed on re-connect*?;;;","11/Oct/18 05:36;hemangajmera;Hi
 # From salesforce we get 403 error every 2-3 hours. We currently do not know the reason, and we are trying to seek help for sf.
 # In log one, upon 403 error, camel was able to reconnect back to salesforce. After that it was able to subscribed to the topic. This is repeated every 2-3 hours
 # As you rightly said, something went wrong during log 2, and camel was not able to subscribe to salesforce
 # In log three, camel tried to log in again to salesforce, but  this time camel is not trying to subscribe the topic at all.
 # So my question here is why is camel to trying to subscribe again after failure in log 2? Shouldn't it try to come out of error?
 # If I restart camel code, everything just works fine
 # I think when we get  error in log 2, camel maintains list of topics and replay id to be connected to salesforce. From that list this topic is removed. Thus in all future tried, camel does not have any topic to connect. What we should fix is that camel should continue to try to connect to topic and not drop it.

 ;;;","26/Oct/18 09:49;hemangajmera;Hi [~zregvart] & [~cibsen@e-ma.net]

   Any thoughts on this issue? I think camel got error which subscribing topic after successful handshake. After that camel stopped subscribing the topic. Can we add retry logic?;;;","31/Oct/18 09:29;zregvart;[~hemangajmera] I've made the change on my [github fork|https://github.com/zregvart/camel/tree/CAMEL-12871], but I'm struggling to create a test or to validate this in any other way.;;;","05/Nov/18 10:56;hemangajmera;Hi

   Is it possible for you to send me compiled jar file for this component. I will try to use your jar instead of original the keep it running for couple of days to see how it behaves.;;;","18/Dec/20 12:11;zregvart;Fix is targeted to be released in 3.7.1 and 3.8.0, in the interim I would appreciate anyone trying this out in their environment and reporting any issues so we get them fixed.;;;",,,,,,,,,,,,,,,,,,,,
make cxf consumer endpoints suspendable,CAMEL-12870,13190268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,09/Oct/18 00:56,09/Oct/18 01:08,13/Jul/23 08:31,09/Oct/18 01:08,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxf,camel-cxfrs,,,,,0,,,,"Currently both CxfConsumer and CxfRsConsumer are SuspendableService, however they don't implements Suspendable interface, which means in DefaultShutdownStrategy, when catching kill signal, those consumer endpoints will be shutdown immediately. So even though inflight and pending exchanges are completed, they have no change to return to client since CXF Consumer endpoints already shutdown. 

We should make cxf consumer endpoints suspendable to support graceful shutdown",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-09 00:56:28.0,,,,,,,,,,,"0|i3yz27:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Slack: Must configure Consumer before using it.,CAMEL-12867,13190041,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,08/Oct/18 09:33,08/Oct/18 09:37,13/Jul/23 08:31,08/Oct/18 09:37,,,,,,,,,,,,,,,,2.23.0,,,,,camel-slack,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-08 09:33:25.0,,,,,,,,,,,"0|i3yxpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS IAM: The accessKey delete operation need to specify an AccessKey Id instead of a username,CAMEL-12860,13189668,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,05/Oct/18 08:46,05/Oct/18 09:00,13/Jul/23 08:31,05/Oct/18 09:00,,,,,,,,,,,,,,,,2.23.0,,,,,camel-aws,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-05 08:46:54.0,,,,,,,,,,,"0|i3yven:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix unstable test PubNubPresenceTest,CAMEL-12852,13189100,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,apupier,apupier,03/Oct/18 09:10,03/Oct/18 17:05,13/Jul/23 08:31,03/Oct/18 09:30,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,tests,,,,,,0,,,,"sometimes it is failing with
https://fusesource-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/camel.redhat.pipeline/job/2.21.x.redhat-7-0-x/18/testReport/junit/org.apache.camel.component.pubnub/PubNubPresenceTest/testPresence/

{quote}Error Message

mock://result Received message count. Expected: <1> but was: <2>

Stacktrace

java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <2>
	at org.apache.camel.component.pubnub.PubNubPresenceTest.testPresence(PubNubPresenceTest.java:53){quote}

the problem is that in fact a lot of exchanges are created.
In org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(long), it is waiting to reach at least the given expected number in the provided timeout.
As soon as it is reached, it is doing the assertion.
But between the assertion done in the line just after, a new message may arrive.

You can notice it by putting a Thread.sleep(1000) for instance before the assertEquals, with PubNubTest it wil lalways fail and there will be a lo tmore messages.

So 3 possibilities:
- the test should expect a minimum number of messages
- the route used in test should be modified to trigger a single message
- the camel product should not create several messages and in this case it is a product bug",,apupier,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 03 17:05:32 UTC 2018,,,,,,,,,,,"0|i3yrwn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Oct/18 09:11;apupier;to help reproducing, here is the content of the method used:

{quote}protected void doAssertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {
        if (expectedCount == 0) {
            if (timeoutForEmptyEndpoints > 0) {
                LOG.debug(""Sleeping for: {} millis to check there really are no messages received"", timeoutForEmptyEndpoints);
                Thread.sleep(timeoutForEmptyEndpoints);
            }
            assertEquals(""Received message count"", expectedCount, getReceivedCounter());
        } else if (expectedCount > 0) {
        	waitForCompleteLatch();
            if (expectedCount != getReceivedCounter()) {
                waitForCompleteLatch();
            }
            Thread.sleep(1000);
            waitForCompleteLatch();
            assertEquals(""Incorrect received message count. Received exchanges are ""+ getReceivedExchanges(), expectedCount, getReceivedCounter());
        } else if (expectedMinimumCount > 0 && getReceivedCounter() < expectedMinimumCount) {
            waitForCompleteLatch();
        }

        if (expectedMinimumCount >= 0) {
            int receivedCounter = getReceivedCounter();
            assertTrue(""Received message count "" + receivedCounter + "", expected at least "" + expectedMinimumCount, expectedMinimumCount <= receivedCounter);
        }

        for (Runnable test : tests) {
            test.run();
        }

        for (Throwable failure : failures) {
            if (failure != null) {
                LOG.error(""Caught on "" + getEndpointUri() + "" Exception: "" + failure, failure);
                fail(""Failed due to caught exception: "" + failure);
            }
        }
    }{quote};;;","03/Oct/18 09:17;githubbot;apupier opened a new pull request #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548
 
 
   a lot of messages are generated, only the first oen is checked.
   
   please check comments on https://issues.apache.org/jira/browse/CAMEL-12852
   this PR is in case the tested routes is expected to generate several messages. If it is not normal, the fix will need to be different.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 09:17;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/2548

    CAMEL-12852 - use minimum expected message count

    a lot of messages are generated, only the first oen is checked.
    
    please check comments on https://issues.apache.org/jira/browse/CAMEL-12852
    this PR is in case the tested routes is expected to generate several messages. If it is not normal, the fix will need to be different.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-12852-useMinimumMessageCount

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2548.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2548
    
----
commit 41b52a131356981f7260a7d9c14d3c770390f894
Author: Aurélien Pupier <apupier@...>
Date:   2018-10-03T09:16:10Z

    CAMEL-12852 - use minimum expected message count
    
    a lot of messages are generated, only the first oen is checked.
    
    Signed-off-by: Aurélien Pupier <apupier@redhat.com>

----
;;;","03/Oct/18 09:30;githubbot;oscerd commented on issue #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548#issuecomment-426570871
 
 
   Thanks. Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 17:05;githubbot;oscerd closed pull request #2548: CAMEL-12852 - use minimum expected message count
URL: https://github.com/apache/camel/pull/2548
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java b/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
index dc83b819102..f89ebec2564 100644
--- a/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
+++ b/components/camel-pubnub/src/test/java/org/apache/camel/component/pubnub/PubNubPresenceTest.java
@@ -48,7 +48,7 @@ public void testPresence() throws Exception {
                           + ""{\""a\"":\""4\"",\""f\"":512,\""p\"":{\""t\"":\""14637536741726901\"",\""r\"":1},\""k\"":\""demo-36\"",\""c\"":\""mychannel-pnpres\"",\""d\"":{\""action\"": \""state-change\"", ""
                           + ""\""timestamp\"": 1463753674, \""data\"": {\""state\"": \""cool\""}, \""uuid\"": \""24c9bb19-1fcd-4c40-a6f1-522a8a1329ef\"", \""occupancy\"": 3},\""b\"":\""mychannel-pnpres\""}]}"")));
         context.startRoute(""presence-route"");
-        mockResult.expectedMessageCount(1);
+        mockResult.expectedMinimumMessageCount(1);
         mockResult.expectedHeaderReceived(PubNubConstants.CHANNEL, ""mychannel"");
         assertMockEndpointsSatisfied();
         PNPresenceEventResult presence = mockResult.getReceivedExchanges().get(0).getIn().getBody(PNPresenceEventResult.class);
@@ -67,7 +67,7 @@ public void testPresenceWithHereNowRefresh() throws Exception {
                           + ""\""d\"":{\""action\"": \""interval\"", \""timestamp\"": 1490124758, \""occupancy\"": 2, \""here_now_refresh\"": true, ""
                           + ""\""join\"": [\""2220E216-5A30-49AD-A89C-1E0B5AE26AD7\"", \""4262AE3F-3202-4487-BEE0-1A0D91307DEB\""]},\""b\"":\""mychannel-pnpres\""}]}"")));
         context.startRoute(""presence-route"");
-        mockResult.expectedMessageCount(1);
+        mockResult.expectedMinimumMessageCount(1);
         assertMockEndpointsSatisfied();
         PNPresenceEventResult presence = mockResult.getReceivedExchanges().get(0).getIn().getBody(PNPresenceEventResult.class);
         assertThat(presence.getHereNowRefresh(), equalTo(true));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 17:05;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2548
;;;",,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.validator.CustomSchemaFactoryFeatureTest.testCustomSchemaFactory() failing with JDK 10,CAMEL-12851,13189095,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,apupier,apupier,03/Oct/18 08:15,31/Jul/19 18:19,13/Jul/23 08:31,31/Jul/19 18:19,,,,,,,,,,,,,,,,3.0.0.RC1,,,,,tests,,,,,,0,,,,"creating an issue to discuss a bit more about it.

the code is:

{quote} ValidatorComponent v = new ValidatorComponent();
        v.setCamelContext(context);
        v.createEndpoint(""validator:org/apache/camel/component/validator/unsecuredSchema.xsd?schemaFactory=#MySchemaFactory"");
       
        try {
            v.createEndpoint(""validator:org/apache/camel/component/validator/unsecuredSchema.xsd"");
            // we should get an security exception in JDK 7 with Oracle or Sun JDK
            String jdkVendor = System.getProperty(""java.vm.vendor"");
            if (jdkVendor != null && (jdkVendor.indexOf(""Oracle"") > 0 || jdkVendor.indexOf(""Sun"") > 0)) {
                fail(""Expect exception here"");
            }
        } catch (Exception ex) {
            // do nothing here
        }{quote}

in fact, it seems that there is never an exception that is thrown. it is not failing because jdkVendor.indexOf(""oracle"") returns 0 and the check is against > 0. i think it should be > -1

So I would say that there is no exception thrown for a long time, perhaps even when it was added (would worth trying to set back to this almost years commit)

There is no bug number so don't know why an exception was expected exactly",,apupier,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 05 09:59:12 UTC 2018,,,,,,,,,,,"0|i3yrvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Oct/18 09:59;zregvart;Also noted here: https://issues.apache.org/jira/browse/CAMEL-12504?focusedCommentId=16531215&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16531215;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp tries reconnects twice as much as maximumReconnectAttempts,CAMEL-12850,13189043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,03/Oct/18 01:42,03/Oct/18 07:25,13/Jul/23 08:31,03/Oct/18 07:25,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-ftp,,,,,,0,,,,"When {{maximumReconnectAttempts > 0}} on the endpoint, both camel-ftp consumers and producers retry connecting to an unavailable FTP server twice as much as the number of {{maximumReconnectAttempts}}. It is because of the following logic in {{RemoteFileConsumer.prePollCheck()}} and {{RemoteFileProducer.preWriteCheck()}}:
{code:java}
                if (getEndpoint().getMaximumReconnectAttempts() > 0) {
                    // only use recoverable if we are allowed any re-connect attempts
                    recoverableConnectIfNecessary();
                } else {
                    connectIfNecessary();
                }
{code}
where {{recoverableConnectIfNecessary()}} retries {{RemoteFileOperations.connect()}} once in case of initial connection failure.

Digging into the commit history, this logic appears to be introduced due to CAMEL-2829 as a workaround. However, since the root cause NET-327 is already resolved the logic doesn't seem to be necessary any more. So probably we can remove the logic to avoid attempting reconnects twice as much as {{maximumReconnectAttempts}}.",,davsclaus,githubbot,hisao.furuichi,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Oct/18 01:19;tadayosi;FtpTimeoutWithMaximumReconnectAttemptsTest.java;https://issues.apache.org/jira/secure/attachment/12942224/FtpTimeoutWithMaximumReconnectAttemptsTest.java",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 03 07:25:41 UTC 2018,,,,,,,,,,,"0|i3yrjz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Oct/18 02:10;githubbot;tadayosi opened a new pull request #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545
 
 
   …nectAttempts
   
   https://issues.apache.org/jira/browse/CAMEL-12850
   
   Sent the pull req for reviewing purposes at this moment. Please do not merge this until we fully discuss it's a valid way to fix it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 02:10;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2545

    CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…

    …nectAttempts
    
    https://issues.apache.org/jira/browse/CAMEL-12850
    
    Sent the pull req for reviewing purposes at this moment. Please do not merge this until we fully discuss it's a valid way to fix it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12850

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2545.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2545
    
----
commit 1cd4268a33e65657f82df9c415d9c25727cea737
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-10-03T02:07:22Z

    CAMEL-12850: camel-ftp tries reconnects twice as much as maximumReconnectAttempts

----
;;;","03/Oct/18 02:13;githubbot;tadayosi commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426489836
 
 
   @davsclaus Can you please review?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 06:31;githubbot;davsclaus closed pull request #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
index f4e5c349565..8c18751d84d 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConsumer.java
@@ -55,12 +55,7 @@ protected boolean prePollCheck() throws Exception {
             log.trace(""prePollCheck on {}"", getEndpoint().getConfiguration().remoteServerInformation());
         }
         try {
-            if (getEndpoint().getMaximumReconnectAttempts() > 0) {
-                // only use recoverable if we are allowed any re-connect attempts
-                recoverableConnectIfNecessary();
-            } else {
-                connectIfNecessary();
-            }
+            connectIfNecessary();
         } catch (Exception e) {
             loggedIn = false;
 
@@ -183,37 +178,6 @@ protected void forceDisconnect() {
         }
     }
 
-    protected void recoverableConnectIfNecessary() throws Exception {
-        try {
-            connectIfNecessary();
-        } catch (Exception e) {
-            if (log.isDebugEnabled()) {
-                log.debug(""Could not connect to: "" + getEndpoint() + "". Will try to recover."", e);
-            }
-            loggedIn = false;
-        }
-
-        // recover by re-creating operations which should most likely be able to recover
-        if (!loggedIn) {
-            log.debug(""Trying to recover connection to: {} with a fresh client."", getEndpoint());
-            // we want to preserve last FTP activity listener when we set a new operations
-            if (operations instanceof FtpOperations) {
-                FtpOperations ftpOperations = (FtpOperations) operations;
-                FtpClientActivityListener listener = ftpOperations.getClientActivityListener();
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-                if (listener != null) {
-                    ftpOperations = (FtpOperations) getOperations();
-                    ftpOperations.setClientActivityListener(listener);
-                }
-            } else {
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-            }
-            connectIfNecessary();
-        }
-    }
-
     protected void connectIfNecessary() throws IOException {
         // We need to send a noop first to check if the connection is still open 
         boolean isConnected = false;
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
index 2f4c5b6582e..38ccdd1177e 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileProducer.java
@@ -20,7 +20,6 @@
 import org.apache.camel.ServicePoolAware;
 import org.apache.camel.component.file.GenericFileOperationFailedException;
 import org.apache.camel.component.file.GenericFileProducer;
-import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.URISupport;
 
 /**
@@ -128,12 +127,7 @@ public void preWriteCheck() throws Exception {
         // if not alive then reconnect
         if (!noop) {
             try {
-                if (getEndpoint().getMaximumReconnectAttempts() > 0) {
-                    // only use recoverable if we are allowed any re-connect attempts
-                    recoverableConnectIfNecessary();
-                } else {
-                    connectIfNecessary();
-                }
+                connectIfNecessary();
             } catch (Exception e) {
                 loggedIn = false;
 
@@ -179,47 +173,6 @@ protected void doStop() throws Exception {
         super.doStop();
     }
 
-    protected void recoverableConnectIfNecessary() throws Exception {
-        try {
-            connectIfNecessary();
-        } catch (Exception e) {
-            loggedIn = false;
-
-            // are we interrupted
-            InterruptedException ie = ObjectHelper.getException(InterruptedException.class, e);
-            if (ie != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug(""Interrupted during connect to: {}"", getEndpoint(), ie);
-                }
-                throw ie;
-            }
-
-            if (log.isDebugEnabled()) {
-                log.debug(""Could not connect to: "" + getEndpoint() + "". Will try to recover."", e);
-            }
-        }
-
-        // recover by re-creating operations which should most likely be able to recover
-        if (!loggedIn) {
-            log.debug(""Trying to recover connection to: {} with a new FTP client."", getEndpoint());
-            // we want to preserve last FTP activity listener when we set a new operations
-            if (operations instanceof FtpOperations) {
-                FtpOperations ftpOperations = (FtpOperations) operations;
-                FtpClientActivityListener listener = ftpOperations.getClientActivityListener();
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-                if (listener != null) {
-                    ftpOperations = (FtpOperations) getOperations();
-                    ftpOperations.setClientActivityListener(listener);
-                }
-            } else {
-                setOperations(getEndpoint().createRemoteFileOperations());
-                getOperations().setEndpoint(getEndpoint());
-            }
-            connectIfNecessary();
-        }
-    }
-
     protected void connectIfNecessary() throws GenericFileOperationFailedException {
         if (!loggedIn || !getOperations().isConnected()) {
             log.debug(""Not already connected/logged in. Connecting to: {}"", getEndpoint());
diff --git a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
index 332a43ce548..56b7227e14b 100644
--- a/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
+++ b/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpBadLoginInProducerConnectionLeakTest.java
@@ -59,9 +59,7 @@ public void testConnectionLeak() throws Exception {
             }
         }
 
-        // maximumReconnectAttempts is related to TCP connects, not to FTP login attempts
-        // but having this parameter > 0 leads to two connection attempts
-        assertEquals(""Expected 4 socket connections to be created"", 4, socketAudits.size());
+        assertEquals(""Expected 2 socket connections to be created"", 2, socketAudits.size());
 
         for (Map.Entry<Integer, boolean[]> socketStats : socketAudits.entrySet()) {
             assertTrue(""Socket should be connected"", socketStats.getValue()[0]);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 06:31;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2545
;;;","03/Oct/18 06:42;githubbot;tadayosi commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426528402
 
 
   @davsclaus Thanks for merge. So do you think this is ok?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 07:01;githubbot;davsclaus commented on issue #2545: CAMEL-12850: camel-ftp tries reconnects twice as much as maximumRecon…
URL: https://github.com/apache/camel/pull/2545#issuecomment-426532324
 
 
   @tadayosi yeah it seems that NET ticket fixed it after-all. The code in camel was a workaround.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Oct/18 07:25;davsclaus;Thanks for the PR and looking into this;;;",,,,,,,,,,,,,,,,,,,,,
camel-sftp : on windows stepwise = true change directory fails to change directory,CAMEL-12848,13188779,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,onders,onders,02/Oct/18 08:32,19/Dec/18 19:45,13/Jul/23 08:31,02/Oct/18 13:41,,,,,,,,,,,,,,,,2.23.0,,,,,camel-sftp,,,,,,0,,,,"2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - Testing: testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
2018-10-02 11:18:34,692 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:34,697 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is starting
2018-10-02 11:18:34,698 [main ] INFO DefaultManagementStrategy - JMX is disabled
2018-10-02 11:18:34,703 [main ] INFO DefaultTypeConverter - Type converters loaded (core: 195, classpath: 1)
2018-10-02 11:18:34,712 [main ] INFO DefaultCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Skipping starting of route foo as its configured with autoStartup=false
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Total 1 routes, of which 0 are started
2018-10-02 11:18:34,716 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) started in 0.019 seconds
2018-10-02 11:18:34,732 [main ] INFO SftpOperations - Known host file not configured, using user known host file: target/user-home/.ssh/known_hosts
2018-10-02 11:18:34,835 []-nio2-thread-1] INFO ServerUserAuthService - Session admin@/127.0.0.1:55121 authenticated
2018-10-02 11:18:34,871 [main ] INFO DefaultCamelContext - Route: foo started and consuming from: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin
2018-10-02 11:18:34,871 [main ] INFO MockEndpoint - Asserting: mock://result is satisfied
2018-10-02 11:18:35,975 [target/res/home] WARN ilePollingConsumerPollStrategy - Trying to recover by force disconnecting from remote server and re-connecting at next poll: sftp://admin@localhost:21000
2018-10-02 11:18:35,976 [target/res/home] WARN SftpConsumer - Consumer SftpConsumer[sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin] failed polling endpoint: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: C:]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: C:
 at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:644) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:632) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpOperations.changeToParentDirectory(SftpOperations.java:658) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollSubDirectory(SftpConsumer.java:98) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:177) ~[classes/:?]
 at org.apache.camel.component.file.remote.RemoteFileConsumer.doSafePollSubDirectory(RemoteFileConsumer.java:261) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollSubDirectory(SftpConsumer.java:95) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:177) ~[classes/:?]
 at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:86) ~[classes/:?]
 at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:128) ~[camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.23.0-SNAPSHOT.jar:2.23.0-SNAPSHOT]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_161]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [?:1.8.0_161]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_161]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [?:1.8.0_161]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_161]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_161]
 at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
Caused by: com.jcraft.jsch.SftpException: Invalid filename
 at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873) ~[jsch-0.1.54.jar:?]
 at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2367) ~[jsch-0.1.54.jar:?]
 at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:342) ~[jsch-0.1.54.jar:?]
 at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:642) ~[classes/:?]
 ... 18 more
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - Testing done: testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - Took: 10.157 seconds (10157 millis)
2018-10-02 11:18:44,873 [main ] INFO SftpSimpleConsumeRecursiveTest - ********************************************************************************
2018-10-02 11:18:44,874 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is shutting down
2018-10-02 11:18:44,874 [main ] INFO DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2018-10-02 11:18:44,875 [ - ShutdownTask] INFO DefaultShutdownStrategy - Route: foo shutdown complete, was consuming from: sftp://localhost:21000/target/res/home?delay=10s&disconnect=true&password=xxxxxx&recursive=true&username=admin
2018-10-02 11:18:44,876 [main ] INFO DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2018-10-02 11:18:44,878 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) uptime 10.181 seconds
2018-10-02 11:18:44,878 [main ] INFO DefaultCamelContext - Apache Camel 2.23.0-SNAPSHOT (CamelContext: camel-3) is shutdown in 0.004 seconds",Windows,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13017,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 02 13:38:51 UTC 2018,,,,,,,,,,,"0|i3ypxr:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,,"02/Oct/18 09:22;githubbot;onderson opened a new pull request #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544
 
 
   iling test case

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Oct/18 09:22;githubbot;GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2544

    CAMEL-12848 - handle differently on windows for fa

    iling test case

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-12848

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2544.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2544
    
----
commit bdbef1835b25de7b8b426bbf4cfda97b29fcc068
Author: önder sezgin <onders@...>
Date:   2018-10-02T09:22:17Z

    CAMEL-12848 - handle differently on windows for fa
    
    iling test case

----
;;;","02/Oct/18 09:28;githubbot;onderson commented on issue #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544#issuecomment-426208891
 
 
   guys, please wait before merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Oct/18 12:55;githubbot;onderson commented on issue #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544#issuecomment-426262525
 
 
   ok, i though there was a side affect in full tests. i could not reproduce. so it is ok to merge. sorry for another noise :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Oct/18 13:38;githubbot;onderson closed pull request #2544: CAMEL-12848 - handle differently on windows for fa
URL: https://github.com/apache/camel/pull/2544
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Oct/18 13:38;githubbot;Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2544
;;;",,,,,,,,,,,,,,,,,,,,,,,
splitter with grouping looses encoding property,CAMEL-12844,13188486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/18 11:18,01/Oct/18 11:19,13/Jul/23 08:31,01/Oct/18 11:19,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"Reported on user list and today also on gitter
http://camel.465427.n5.nabble.com/File-Encoding-falls-back-to-default-encoding-while-grouping-after-split-using-tokenize-td5797769.html

Jakob Krejberg Ørhøj @jakoborhoj_twitter Sep 28 12:30
Hello. I've been battling with some encoding issues when using split().tokenize() in Camel. I am having the same issue as described in: http://camel.465427.n5.nabble.com/File-Encoding-falls-back-to-default-encoding-while-grouping-after-split-using-tokenize-td5797769.html. Is it a bug that Camel does not pass the exchange to the converter so that it can get the encoding set in the exchange? Currently it will always default to UTF-8 as I see it.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-10-01 11:18:05.0,,,,,,,,,,,"0|i3yo4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext Start command shouldn't start a Suspended context,CAMEL-12843,13188361,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,ffang,ffang,30/Sep/18 01:28,08/Oct/18 02:05,13/Jul/23 08:31,08/Oct/18 02:05,2.21.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,karaf,,,,,,0,,,,"We found this problem in Karaf camel command, but think it should also exist in other camel command usecases.

In Karaf
{code:java}
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-1        Started                   0              0              0   1.366 seconds  
karaf@root()> camel:context-suspend camel-1
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime         
 -------        ------              -------       --------     ----------   ------         
 camel-1        Suspended                 0              0              0   7.554 seconds  
karaf@root()> camel:context-start camel-1 
karaf@root()> camel:context-list
 Context        Status              Total #       Failed #     Inflight #   Uptime        
 -------        ------              -------       --------     ----------   ------        
 camel-1        Started                   0              0              0   2 minutes
{code}
So after start a suspended context, there is still one in context-list. But in JMX tree there are two camel-1 context. This mismatch should be addressed. Either improve ContextList command or if it's a suspended context, throw a RuntimeException and let users resume it other than starting it.",,davsclaus,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Sep/18 01:30;ffang;CAMEL-12843.patch;https://issues.apache.org/jira/secure/attachment/12941847/CAMEL-12843.patch",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 08 00:13:53 UTC 2018,,,,,,,,,,,"0|i3yncv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"30/Sep/18 01:37;ffang;Attached a proposal fix.
[~davsclaus], is this change OK, would it affect other cases outside Karaf? Or instead of the RuntimeException, shall we just resume a suspended camelcontext when even users use  start command? 

Thanks!;;;","01/Oct/18 11:27;davsclaus;Thanks Freeman.

Hmm it would imho be better that the command was smarter and be able to just resume instead of starting if the state is suspended.
;;;","01/Oct/18 11:29;davsclaus;Okay I looked at how JMX is doing it, which I would suggest the Karaf command would do the same. See this class and then make the patch do like it does

org.apache.camel.management.mbean.ManagedCamelContext;;;","08/Oct/18 00:13;ffang;Thanks [~davsclaus]!

Will revise accordingly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"""-"" dash is not a valid characters for keys in JMS headers",CAMEL-12842,13188250,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,fgiloux,fgiloux,28/Sep/18 22:02,29/Sep/18 08:44,13/Jul/23 08:31,29/Sep/18 08:41,,,,,,,,,,,,,,,,2.23.0,,,,,camel-opentracing,,,,,,0,,,,"Hi

""-"", dash is not a valid character for keys in JMS headers. This gets encoded in OpenTracing java-jms client: DASH = ""_$dash$_""; see:

[https://github.com/opentracing-contrib/java-jms/blob/master/opentracing-jms-common/src/main/java/io/opentracing/contrib/jms/common/JmsTextMapInjectAdapter.java]

I am proposing to have the same approach in camel-opentracing. By doing so spans created by Camel can be seen under a trace created by java-jms. I have amended the code accordingly and will raise a pull request. I have extended the change to the abstract messaging class so that it also works when a peer is using JMS for amqp endpoint for instance. A configuration parameter allows to activate/deactivate encoding. If no parameter is provided the behavior is as before for backward compatibility.

Regards,

Frédéric",,aldettinger,fgiloux,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 29 08:44:30 UTC 2018,,,,,,,,,,,"0|i3ymo7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Sep/18 22:10;githubbot;GitHub user fgiloux opened a pull request:

    https://github.com/apache/camel/pull/2540

    ""-"" dash is not a valid characters for keys in JMS headers

    See Jira issue: https://issues.apache.org/jira/browse/CAMEL-12842


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fgiloux/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2540.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2540
    
----
commit 278dc03e62d73b00f6d689ad59bc31d37cdfcce8
Author: Frederic Giloux <fgiloux@...>
Date:   2018-09-28T14:23:41Z

    Added dash encoding for JMS and extensibility for other connectors

commit fcb4d0ae29c842994100ae17b7f8a06505ffa92f
Author: Frederic Giloux <fgiloux@...>
Date:   2018-09-28T17:35:23Z

    Makes encoding activation configuration

----
;;;","29/Sep/18 08:41;aldettinger;Merged on master.;;;","29/Sep/18 08:44;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2540
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Twitter Send Direct Message Endpoint not working,CAMEL-12838,13187812,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,sms0070,sms0070,27/Sep/18 06:47,28/Sep/18 07:53,13/Jul/23 08:31,28/Sep/18 07:36,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-twitter,,,,,,0,,,,"There has been a change in twitter APIs. On September 17^th^, twitter discontinued the legacy direct message endpoints.

[https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/guides/direct-message-migration.html]

There are three sendDirectMessage methods provided by twitter4j API.

[http://twitter4j.org/oldjavadocs/4.0.7/twitter4j/api/DirectMessagesResources.html#sendDirectMessage(long,%20java.lang.String,%20long)]

 

 
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-long-java.lang.String-]*(long userId, java.lang.String text)
Sends a new direct message to the specified user from the authenticating user.|
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-long-java.lang.String-long-]*(long userId, java.lang.String text, long mediaId)
Sends a new direct message to the specified user from the authenticating user.|
|[*DirectMessage*|http://twitter4j.org/javadoc/twitter4j/DirectMessage.html]|*[sendDirectMessage|http://twitter4j.org/javadoc/twitter4j/api/DirectMessagesResources.html#sendDirectMessage-java.lang.String-java.lang.String-]*(java.lang.String screenName, java.lang.String text)
Sends a new direct message to the specified user from the authenticating user.|

 

The first two methods use the new endpoints([direct_messages/events/new|https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event]), while the third one uses the old APIs([direct_messages/new|https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-message])

 

 

Camel twitter component uses the third method to send direct message (using screen name).

[https://github.com/apache/camel/blob/master/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/directmessage/DirectMessageProducer.java]

 

This needs to be changed in order to support direct message sending to twitter

 ",,acosentino,,,,,,,,,,,,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 28 07:51:37 UTC 2018,,,,,,,,,,,"0|i3yjzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Sep/18 07:33;sms0070;Hi,

 

This still doesn't work because of issues in twitter4j APIs.

[https://github.com/Twitter4J/Twitter4J/issues/297]

When they fix it in twitter4j, then version of twitter4j here need to be changed.

Right now, this issue is not fixed.

 

Regards,

Suyash;;;","28/Sep/18 07:35;acosentino;You are wrong. I moved the implementation to use a method in the library using the new endpoint. So this is fixed and already tested. If you want to have a test, you can build camel-twitter 2.23.0-SNAPSHOT and try to send a direct-message;;;","28/Sep/18 07:36;acosentino;Please, don't reopen this issue.;;;","28/Sep/18 07:42;sms0070;Hi,

I have tested after building it for 5 hours just to find that this issue is still happening.

I know that you are using the method which uses the new endpoint, but API is not working properly.

Check this issue : [https://github.com/Twitter4J/Twitter4J/issues/297]

 

Regards,

Suyash

 ;;;","28/Sep/18 07:46;acosentino;I don't think you are using the right version. I just sent a direct message to different users and I don't have problem. ;;;","28/Sep/18 07:51;acosentino;And also you just need to rebuild camel-twitter, you don't need to run a full build. ;;;","28/Sep/18 07:51;acosentino;I consider this fixed since it's tested and it works.

 

Also the fact that the API is not working as expected it's because the library still use an old endpoint, but Camel, inside, is calling a method pointing to the new endpoint, so I don't know what you're hitting but probably you're not using the last version and you're doing something wrong.;;;",,,,,,,,,,,,,,,,,,,,,,
Type Converter Loader Exception: Elasticsearch-Rest cannot find any in package defined,CAMEL-12836,13187478,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tim.sexton,tim.sexton,26/Sep/18 00:46,26/Sep/18 06:23,13/Jul/23 08:31,26/Sep/18 06:23,2.22.0,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,,,,,,,0,,,,"{code:java}
{{Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'routeControllerEndpoint' defined in class path resource [org/apache/camel/spring/boot/actuate/endpoint/CamelRouteControllerEndpointAutoConfiguration.class]: Unsatisfied dependency expressed through method 'routeControllerEndpoint' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.elasticsearch.converter] }}{code}
 

 

A possible solution to this is to use FQN class names instead of package name",Docker/K8s,tim.sexton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-09-26 00:46:31.0,,,,,,,,,,,"0|i3yhxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-json-validator - Potential issue with reading from streams,CAMEL-12835,13187202,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/18 07:15,02/Nov/18 14:18,13/Jul/23 08:31,02/Nov/18 14:18,2.22.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,,,,,,,0,,,,"See SO
https://stackoverflow.com/questions/52228692/camel-json-validator-throws-stream-closed-exception?noredirect=1#comment91912061_52228692",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-09-25 07:15:58.0,,,,,,,,,,,"0|i3yg8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-zipkin: useFallbackServiceNames leaks passwords,CAMEL-12831,13187095,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,24/Sep/18 17:53,24/Sep/18 19:07,13/Jul/23 08:31,24/Sep/18 19:07,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-zipkin,,,,,,0,,,,"If you do not define service names and useFallbackServiceNames is true (the default setting) camel uses endpoints URIs as services names.

Passwords in these URIs are not masked and therefore visible in Zipkin traces.",,githubbot,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 19:04:11 UTC 2018,,,,,,,,,,,"0|i3yflj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Sep/18 17:55;githubbot;PascalSchumacher opened a new pull request #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Sep/18 17:55;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2531

    CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel hide_passwords_in_zipkin_fallback_service_names

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2531.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2531
    
----
commit 74a5e078f41cfff9b3a606ba63d1d07093a75e91
Author: Pascal Schumacher <pascalschumacher@...>
Date:   2018-09-24T17:55:00Z

    CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords

----
;;;","24/Sep/18 19:04;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/2531
;;;","24/Sep/18 19:04;githubbot;PascalSchumacher commented on issue #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531#issuecomment-424088562
 
 
   Merged in https://github.com/apache/camel/commit/4b6773785e2031cf54485e4ad2c9634df3a10231
   
   @davsclaus Thanks for the review!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Sep/18 19:04;githubbot;PascalSchumacher closed pull request #2531: CAMEL-12831: Camel-zipkin: useFallbackServiceNames leaks passwords
URL: https://github.com/apache/camel/pull/2531
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
index f069c782e41..7314a5dfffa 100644
--- a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
+++ b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
@@ -61,6 +61,7 @@
 import org.apache.camel.util.IOHelper;
 import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.ServiceHelper;
+import org.apache.camel.util.URISupport;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
@@ -516,10 +517,11 @@ private String getServiceName(Exchange exchange, Endpoint endpoint, Map<String,
                     return null;
                 }
             }
-            if (LOG.isTraceEnabled() && key != null) {
-                LOG.trace(""Using serviceName: {} as fallback"", key);
+            String sanitizedKey = URISupport.sanitizeUri(key);
+            if (LOG.isTraceEnabled() && sanitizedKey != null) {
+                LOG.trace(""Using serviceName: {} as fallback"", sanitizedKey);
             }
-            return key;
+            return sanitizedKey;
         } else {
             if (LOG.isTraceEnabled() && answer != null) {
                 LOG.trace(""Using serviceName: {}"", answer);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,,
FTP producer stuck if timeout occurs just after connect,CAMEL-12830,13187062,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,lchdev,lchdev,24/Sep/18 15:19,02/Oct/18 07:08,13/Jul/23 08:31,02/Oct/18 07:08,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-ftp,,,,,,0,,,,"In our production systems, we had several threads stuck indefinitely while trying to send a file to an FtpEndpoint. We had both _connectTimeout_ and _soTimeout_ properties set so it surprised us a little bit.

After digging a bit, we found that the scenario is quite simple to reproduce: this happens every time the {{FTPClient}} establishes the TCP connection with a server that does not respond anything.

Here is a simplified view of what happens when establishing a connection using a {{FTPClient}}:
{code:java}
// within Socket Client
public void connect(InetAddress host, int port) throws SocketException,IOException {
    _socket_.connect(new InetSocketAddress(host, port), connectTimeout);
    _connectAction_();
}
protected void _connectAction_() throws IOException { 
    _socket_.setSoTimeout(_timeout_); // _timeout_ is the default timeout of the socket
}

// overridden within FTP
protected void _connectAction_() {
    super._connectAction_();
    if (connectTimeout > 0) {
        int original = _socket_.getSoTimeout();
        _socket_.setSoTimeout(connectTimeout);
        try {
            __getReply();
        } finally {
             _socket_.setSoTimeout(original);
        }
    }
}{code}
 A {{SocketTimeoutException}} can be thrown either during the initial socket _connect_ action, either during the ___getReply()_ where the FTPClient waits for the hello message from the server.  Both are using _connectTimeout_, after which the original (default) timeout is restored. The _soTimeout_ we specified in the URI is configured by FTPOperations only when the connection is successful. In this case, the Socket is connected, but an exception is thrown afterwards and the _soTimeout_ is left at 0. 

Within Camel, when the RemoteFileProducer encounters an exception while processing an Exchange, it tries to disconnect the endpoint properly with a _logout_ followed by a _disconnect_. 
{code:java}
// RemoteFileProducer
public void handleFailedWrite(Exchange exchange, Exception exception) throws Exception {
    try {
        if (getOperations().isConnected()) { // <== in our case, this returns true because the socket is actually connected
            getOperations().disconnect();
        }
    } catch (...) {
        ...
    }
}
// FTPOperations
protected void doDisconnect() throws GenericFileOperationFailedException {
    try {
        client.logout();
    } catch (IOException e) {
         throw new GenericFileOperationFailedException
    } finally {
        try {
            client.disconnect();
        } catch (IOException e) {
            throw new GenericFileOperationFailedException
        }
    }
}{code}
Unfortunately, at this point, the {{client.logout()}} sends the FTP {{QUIT}} command, then waits for the response still using the default timeout of the Socket. Since the misbehaving server/firewall never sent any form of response, the thread is left waiting forever.

I attached a simple test case to illustrate the scenario, simply using a ServerSocket that never accepts any connection. Also included is an easy workaround that uses a custom FTPClient on which the _default timeout_ is set. 

A possible fix would be to always set the _default timeout_ on the socket, before connecting it.",,davsclaus,lchdev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Sep/18 11:28;lchdev;FtpOperations.patch;https://issues.apache.org/jira/secure/attachment/12941377/FtpOperations.patch","24/Sep/18 15:29;lchdev;FtpSoTimeoutTest.java;https://issues.apache.org/jira/secure/attachment/12941065/FtpSoTimeoutTest.java",,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 26 11:35:07 UTC 2018,,,,,,,Patch Available,,,,"0|i3yfe7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Sep/18 18:31;davsclaus;Thanks for reporting. Can you maybe add a patch file with your suggested fix, or as a github PR;;;","26/Sep/18 11:35;lchdev;The suggestion I made was more a workaround than a true fix. I attached a patch with another fix that tackles the true issue: a _logout_ should not be performed if the _connect_ was not successful.

If an exception is raised during the _connect_ of the {{FtpClient}}, a _disconnect_ should be issued to ensure that the underlying {{Socket}} is properly closed and disposed. This also avoids potential resources leaks (in the situation of a server accepting connections without sending FTP replies, each reconnect attempt created and connected a new Socket without closing the previous one).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
An autocreated CXF Bus not shut down in CxfSpringEndpoint,CAMEL-12829,13187005,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,24/Sep/18 12:24,26/Sep/18 12:51,13/Jul/23 08:31,24/Sep/18 12:44,,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxf,,,,,,0,,,,"{{CxfSpringEndpoint.setApplicationContext(ApplicationContext)}} creates a {{org.apache.cxf.Bus}} [1] whose {{shutdown()}} method is never called. This is one of the causes for a memory leak in WildFly Camel (WFC) [2]. 

The steps to reproduce for WFC are as follows:

1. Start the WFC 
2. run the CXFWSConsumerIntegrationTest several times
3. Force GC on WFC
4. Get a heap dump
NOT OK: There are as many stale SpringBus instances as many times the test was run.
Expected: no SpringBus instances there 

[1] https://github.com/apache/camel/blob/c69affc49415b190645ce25536ffd62348c4fe34/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java#L251
[2] https://github.com/wildfly-extras/wildfly-camel/issues/2649",,davsclaus,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 26 12:51:42 UTC 2018,,,,,,,,,,,"0|i3yf1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Sep/18 12:36;githubbot;ppalaga opened a new pull request #2530: CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint
URL: https://github.com/apache/camel/pull/2530
 
 
   https://issues.apache.org/jira/browse/CAMEL-12829

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Sep/18 12:36;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2530

    CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint

    https://issues.apache.org/jira/browse/CAMEL-12829

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12829

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2530.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2530
    
----
commit 4a867ef5376932a78d2677785dd261e812b12c78
Author: Peter Palaga <ppalaga@...>
Date:   2018-09-24T06:00:53Z

    CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint

----
;;;","24/Sep/18 12:40;githubbot;davsclaus closed pull request #2530: CAMEL-12829: An autocreated CXF Bus not shut down in CxfSpringEndpoint
URL: https://github.com/apache/camel/pull/2530
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
index 25b72b70ce4..1247d4302a9 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
@@ -128,7 +128,7 @@
     protected Bus bus;
 
     private AtomicBoolean getBusHasBeenCalled = new AtomicBoolean(false);
-    private volatile boolean createBus;
+    protected volatile boolean createBus;
 
     private BindingConfiguration bindingConfig;
     private DataBinding dataBinding;
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
index 0671b1632cd..f837dd01ec2 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSpringEndpoint.java
@@ -248,6 +248,7 @@ public void setApplicationContext(ApplicationContext ctx) throws BeansException
         applicationContext = ctx;
 
         if (bus == null) {
+            createBus = true;
             bus = BusWiringBeanFactoryPostProcessor.addDefaultBus(ctx);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Sep/18 12:40;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2530
;;;","24/Sep/18 12:44;davsclaus;Thanks for reporting and the PR;;;","26/Sep/18 12:51;ppalaga;Cloned to https://issues.jboss.org/browse/ENTESB-9537;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-http-common HttpSendDynamicAware setting port to -1 when port is not defined in uri,CAMEL-12827,13186729,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bobpaulin,bobpaulin,21/Sep/18 21:24,23/Sep/18 14:27,13/Jul/23 08:31,23/Sep/18 14:27,2.22.0,2.22.1,2.23.0,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-http-common,,,,,,0,,,,"If the route qualifies for SendDyanamicAware processing within the camel-http or camel-http4 component and the route does not specify a port it is getting set to -1.  This should simply assume port 80 or 443 based on http vs https.  Logic exists to trim those ports if they are specified however if you omit them your get the following exception:

 
{code:java}
2018-09-21T16:20:32,797 | ERROR | Camel (camel-2) thread #10 - NettyEventExecutorGroup | AbstractErrorListProcessor       | 26 - com.somebundle - 1.0.76 | Error Handled for route: http://0.0.0.0:8880/%7BsiteId%7D/%7Bcountry%7D/somepath?httpMethodRestrict=GET
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: https4://somedomain.com:-1?bridgeEndpoint=true due to: Expected scheme-specific part at index 6: https:
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:758) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:91) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:239) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:132) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:181) ~[91:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.InterceptorToAsyncProcessorBridge.process(InterceptorToAsyncProcessorBridge.java:67) ~[91:org.apache.camel.camel-core:2.22.0]{code}",,bobpaulin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Sun Sep 23 14:27:27 UTC 2018,,,,,,,Patch Available,,,,"0|i3ydc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"21/Sep/18 21:59;githubbot;bobpaulin opened a new pull request #2528: CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.
URL: https://github.com/apache/camel/pull/2528
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","21/Sep/18 21:59;githubbot;GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/2528

    CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel CAMEL-12827

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2528.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2528
    
----
commit dffcfff129cdb9f5cb2fae984aabe4c8c761b96b
Author: Bob Paulin <bob@...>
Date:   2018-09-21T21:51:11Z

    CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.

commit 4a55d681648209341c076acce4bebf7a38bbed90
Author: Bob Paulin <bob@...>
Date:   2018-09-21T21:59:13Z

    CAMEL-12827 - Add Apache License Headers to test.

----
;;;","23/Sep/18 14:23;githubbot;davsclaus closed pull request #2528: CAMEL-12827 - HttpSendDynamicAware setting port to -1 when not defined.
URL: https://github.com/apache/camel/pull/2528
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
index 7968952c636..86fb192641a 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpSendDynamicAware.java
@@ -141,7 +141,7 @@ public Processor createPostProcessor(Exchange exchange, DynamicAwareEntry entry)
             // if the path is just a trailing slash then skip it (eg it must be longer than just the slash itself)
             if (path != null && path.length() > 1) {
                 int port = parse.getPort();
-                if (port != 80 && port != 443) {
+                if (port > 0 && port != 80 && port != 443) {
                     host += "":"" + port;
                 }
                 if (!httpComponent) {
diff --git a/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java
new file mode 100644
index 00000000000..71ec8f51374
--- /dev/null
+++ b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpSendDynamicAwareTest.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.http.common;
+
+import static org.junit.Assert.*;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.apache.camel.spi.SendDynamicAware.DynamicAwareEntry;
+
+public class HttpSendDynamicAwareTest {
+
+    private HttpSendDynamicAware httpSendDynamicAware;
+    @Before
+    public void setUp() throws Exception {
+        this.httpSendDynamicAware = new HttpSendDynamicAware();
+        
+    }
+
+    @Test
+    public void testHttpUndefinedPortWithPathParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if http and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsUndefinedPortParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if https and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttp4UndefinedPortWithPathParseUri() {
+        this.httpSendDynamicAware.setScheme(""http4"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http4://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if http4 and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttps4UndefinedPortParseUri() {
+        this.httpSendDynamicAware.setScheme(""https4"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https4://localhost/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not add port if https4 and not specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpPort80ParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost:80/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not port if http and port 80 specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsPort443ParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost:443/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should not port if https and port 443 specified"", ""localhost"", result[0]);
+    }
+    
+    @Test
+    public void testHttpPort8080ParseUri() {
+        this.httpSendDynamicAware.setScheme(""http"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""http://localhost:8080/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should add port if http and port other than 80 specified"", ""localhost:8080"", result[0]);
+    }
+    
+    @Test
+    public void testHttpsPort8443ParseUri() {
+        this.httpSendDynamicAware.setScheme(""https"");
+        DynamicAwareEntry entry = new DynamicAwareEntry(""https://localhost:8443/test"", null, null);
+        String[] result = httpSendDynamicAware.parseUri(entry);
+        assertEquals(""Parse should add port if https and port other than 443 specified"", ""localhost:8443"", result[0]);
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Sep/18 14:23;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2528
;;;","23/Sep/18 14:27;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel Grape component is missing documentation for some endpoints,CAMEL-12826,13186616,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Sep/18 12:56,24/Sep/18 07:34,13/Jul/23 08:31,24/Sep/18 07:34,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,"Daily build on the java-10 branch fails with:
{code:java}
[INFO] --- camel-package-maven-plugin:2.23.0-SNAPSHOT:validate-components (validate) @ camel-grape ---
[WARNING] The component: grape has validation errors
[WARNING] Missing component documentation for the following options:
	metaClass
	patchesRepository
[WARNING] Missing endpoint documentation for the following options:
	defaultCoordinates{code}",,davsclaus,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 07:34:27 UTC 2018,,,,,,,,,,,"0|i3ycnb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Sep/18 10:05;davsclaus;Okay I think we do something a bit special in this component as the json metadata is already hardcoded in the src/main/resources/..../grape.json file. Take a look in this file if it has some missing options. Then we need to add them manually there. ;;;","23/Sep/18 14:18;davsclaus;Got the others fixed, but the metaClass seems like something maybe only java 10 or newer JDK somehow reveal. We may need to exclude it specially in the maven validator logic.;;;","24/Sep/18 07:34;zregvart;[~davsclaus] I think with we [57533d4cf076ef0c1dc239fa1bc3085ee02297b4|https://gitbox.apache.org/repos/asf?p=camel.git;a=commitdiff;h=57533d4cf076ef0c1dc239fa1bc3085ee02297b4] have this fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix MQTT URI param typo,CAMEL-12821,13185839,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,philschaller,philschaller,18/Sep/18 15:53,19/Sep/18 07:21,13/Jul/23 08:31,19/Sep/18 07:21,2.22.1,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-mqtt,,,,,,0,,,,The URI params 'willQos' and 'qualityOfService' of the MQTT component have a typo in their enum description.,,davsclaus,philschaller,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 19 07:21:08 UTC 2018,,,,,,,Patch Available,,,,"0|i3y7vb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Sep/18 07:21;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SQS: Malformed queue URL due to bad region parsing,CAMEL-12820,13185787,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,edu2046,edu2046,18/Sep/18 12:00,18/Sep/18 13:22,13/Jul/23 08:31,18/Sep/18 13:22,2.22.1,,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-aws,,,,,,1,sqs,,,"h3. Diagnosis
When configuring the component with a queue ARN, for example:

{{aws-sqs://arn:aws:sqs:eu-west-1:account-number:queue-name}}

The region is being parsed as {{EU_WEST_1}}. See [https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java#L64]

The region is then used in the construction of the queue URL in https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java#L132

This creates a URL pointing to the wrong host: {{https://sqs.EU_WEST_1.amazonaws.com/account-number/queue-name}} when the right one should be {{https://sqs.eu-west-1.amazonaws.com/account-number/queue-name}} 

Subsequents polls of the sqs component failed due to to this host not being recognised:

{code}java.net.UnknownHostException: sqs.EU_WEST_1.amazonaws.com{code}

h3. Proposed solution
Invoke the {{getName}} method instead of {{toString}} the https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java#L64","AWS, Centos 7, Java 8, Spring boot 2",acosentino,candrews,edu2046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 12:40:33 UTC 2018,,,,,,,,,,,"0|i3y7jr:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"18/Sep/18 12:40;acosentino;Doing stuff in the way you suggest, will break the other part of regions support 

 

[https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java#L314]

 

So we need to find a different way.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Threading issues with the throttler when using a correlation key,CAMEL-12809,13185087,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,14/Sep/18 08:41,14/Sep/18 14:04,13/Jul/23 08:31,14/Sep/18 14:04,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,The Throttler has threading issues and some of the {{ThrottlingGroupingTest}} tests sometimes fail.,,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6840,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 14:04:33 UTC 2018,,,,,,,,,,,"0|i3y38f:",9223372036854775807,Regression,Unit Test Broken,,,,,,,,,,,,,,,,,,,"14/Sep/18 13:46;gnodet;CAMEL-6840 introduces a few problems which need to be fixed.;;;","14/Sep/18 14:04;gnodet;https://github.com/apache/camel/commit/8517fdfc2d934bc4bd1254dcd983e02b3ef4f5e8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid to use endpoint attribute when MqttConnectOptions is declared once,CAMEL-12807,13184904,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,fabryprog,fabryprog,fabryprog,13/Sep/18 13:27,14/Sep/18 13:41,13/Jul/23 08:31,14/Sep/18 13:41,2.22.2,,,,,,,,,,,,,,,2.23.0,,,,,camel-paho,,,,,,0,,,,"Hello,

In my system i have a default MqttConnectOptions declared into spring context and some other camel consumers/producers connected to others mqtt servers.

So today i cannot use endpoint parameters without declare an another mqttConnectOptions class because the endpoint code suppose that use ALWAYS MqttConnectOptions (if it is declared once)",,fabryprog,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 13:40:44 UTC 2018,,,,,,,,,,,"0|i3y23z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Sep/18 13:39;githubbot;Fabryprog opened a new pull request #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521
 
 
   …s declared once
   
   Hello, this is my propose patch to camel-paho endpoint
   
   Note is backward compatible!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Sep/18 13:39;githubbot;GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/2521

    CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…

    …s declared once
    
    Hello, this is my propose patch to camel-paho endpoint
    
    Note is backward compatible!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-12807

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2521.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2521
    
----
commit a962be45274d37d7610c6dd3bdfb90365b4a0d42
Author: Fabrizio Spataro <fabrizio.spataro@...>
Date:   2018-09-13T13:37:45Z

    CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions is declared once

----
;;;","14/Sep/18 13:40;githubbot;oscerd commented on issue #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521#issuecomment-421361753
 
 
   Merged on master. Thanks @Fabryprog 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Sep/18 13:40;githubbot;oscerd closed pull request #2521: CAMEL-12807 Avoid to use endpoint attribute when MqttConnectOptions i…
URL: https://github.com/apache/camel/pull/2521
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-paho/src/main/docs/paho-component.adoc b/components/camel-paho/src/main/docs/paho-component.adoc
index 723f883d736..0514235ac55 100644
--- a/components/camel-paho/src/main/docs/paho-component.adoc
+++ b/components/camel-paho/src/main/docs/paho-component.adoc
@@ -95,6 +95,7 @@ with the following path and query parameters:
 | *brokerUrl* (common) | The URL of the MQTT broker. | tcp://localhost:1883 | String
 | *clientId* (common) | MQTT client identifier. |  | String
 | *connectOptions* (common) | Client connection options |  | MqttConnectOptions
+| *resolveMqttConnectOptions* (common) | Auto Resolve Client connection options | true | boolean
 | *filePersistenceDirectory* (common) | Base directory used by the file persistence provider. |  | String
 | *password* (common) | Password to be used for authentication against the MQTT broker |  | String
 | *persistence* (common) | Client persistence to be used - memory or file. | MEMORY | PahoPersistence
diff --git a/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java b/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
index 8d858d5c6a5..6d58751d56c 100644
--- a/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
+++ b/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java
@@ -68,7 +68,8 @@
     private String userName; 
     @UriParam @Metadata(secret = true)
     private String password; 
-    
+    @UriParam(defaultValue = ""true"")
+    private boolean resolveMqttConnectOptions = true; 
 
     // Collaboration members
     @UriParam
@@ -135,13 +136,16 @@ protected MqttConnectOptions resolveMqttConnectOptions() {
         if (connectOptions != null) {
             return connectOptions;
         }
-        Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);
-        if (connectOptions.size() == 1) {
-            LOG.info(""Single MqttConnectOptions instance found in the registry. It will be used by the endpoint."");
-            return connectOptions.iterator().next();
-        } else if (connectOptions.size() > 1) {
-            LOG.warn(""Found {} instances of the MqttConnectOptions in the registry. None of these will be used by the endpoint. ""
-                     + ""Please use 'connectOptions' endpoint option to select one."", connectOptions.size());
+        
+        if(resolveMqttConnectOptions) {
+            Set<MqttConnectOptions> connectOptions = getCamelContext().getRegistry().findByType(MqttConnectOptions.class);
+            if (connectOptions.size() == 1) {
+                LOG.info(""Single MqttConnectOptions instance found in the registry. It will be used by the endpoint."");
+                return connectOptions.iterator().next();
+            } else if (connectOptions.size() > 1) {
+                LOG.warn(""Found {} instances of the MqttConnectOptions in the registry. None of these will be used by the endpoint. ""
+                         + ""Please use 'connectOptions' endpoint option to select one."", connectOptions.size());
+            }
         }
         
         MqttConnectOptions options = new MqttConnectOptions();
@@ -306,4 +310,12 @@ public void setPassword(String password) {
         this.password = password;
     }
 
+    public synchronized boolean isResolveMqttConnectOptions() {
+        return resolveMqttConnectOptions;
+    }
+
+    public synchronized void setResolveMqttConnectOptions(boolean resolveMqttConnectOptions) {
+        this.resolveMqttConnectOptions = resolveMqttConnectOptions;
+    }
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Sep/18 13:40;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2521
;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-restdsl-swagger-plugin doesn't convert integer default value to string,CAMEL-12805,13184733,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jcordes,jcordes,12/Sep/18 21:56,24/Sep/18 18:54,13/Jul/23 08:31,24/Sep/18 18:54,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,tooling,,,,,,0,,,,"When generating a RouteBuilder from a swagger that defines default parameter values of type integer, there is no conversion to a string when setting it:

Swagger:

""limit"":{
 ""name"":""limit"",
 ""in"":""query"",
 ""type"":""integer"",
 ""minimum"":1,
 ""default"":20,
 ""description"":""the limit of the results for the collections query""
 },

RouteBuilder:

.param()
 .name(""limit"")
 .type(RestParamType.query)
 .dataType(""integer"")
 .defaultValue(20)
 .required(false)
 .description(""the limit of the results for the collections query"")
 .endParam()

defaultValue only accepts parameters of type string and therefore the generated code can't be compiled and needs to be corrected manually.

 

 

 ",,davsclaus,jcordes,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 24 18:54:45 UTC 2018,,,,,,,,,,,"0|i3y12n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Sep/18 05:45;vrlgohel;Thanks for reporting. Can you attach the complete json file which you are using? From the snippets you provided, i am not getting the plugin to generate code,

>> Unable to generate REST DSL Swagger sources from specification: src/spec/example.json, make sure that the specification is available at the given URI,
{code:java}
{
 ""name"": ""limit"",
 ""in"": ""query"",
 ""type"": ""integer"",
 ""minimum"": 1,
 ""default"": 20,
 ""description"": ""the limit of the results for the collections query""
}{code};;;","24/Sep/18 18:54;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-k: Kamel install reports error,CAMEL-12801,13184246,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,11/Sep/18 07:15,11/Sep/18 08:01,13/Jul/23 08:31,11/Sep/18 08:01,,,,,,,,,,,,,,,,,,,,,camel-k,,,,,,0,,,,ERROR: logging before flag.Parse: W0911 07:07:50.460412 1 reflector.go:341] github.com/apache/camel-k/vendor/github.com/operator-framework/operator-sdk/pkg/sdk/informer.go:91: watch of *unstructured.Unstructured ended with: The resourceVersion for the provided watch is too old.,,acosentino,dmvolod,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 11 08:01:44 UTC 2018,,,,,,,,,,,"0|i3xy3b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Sep/18 07:57;dmvolod;[~ancosen], which version of kubernetes or openshift are you using?
I run on oc v3.9.0 and all is fine.;;;","11/Sep/18 08:01;acosentino;3.9.0, I updated with the latest code after a fix from Nicola and now it's working fine. Closing this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Accept header is not respected anymore in CXFRS consumer when POST,CAMEL-12787,13183611,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,xldai,xldai,07/Sep/18 11:36,10/Sep/18 06:41,13/Jul/23 08:31,10/Sep/18 06:31,2.21.1,2.21.2,2.22.0,2.22.1,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-cxfrs,,,,,,0,,,,"Given the camel route as a cxfrs server (test case is here: https://github.com/xldai/test/tree/master/cxfrs), Running the Route and send POST request from curl with ""Accept: application/json"", but the cxfrs server will always return  application/xml as Response.

Note this issue only happening on POST method, for GET, the Accept header is respected.

No this kind of issue on Camel 2.20.x, Camel 2.21.0.",,githubbot,vrlgohel,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 10 06:41:14 UTC 2018,,,,,,,,,,,"0|i3xu87:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Sep/18 04:01;xldai;Looks like we have this issue after this commit https://github.com/apache/camel/commit/4280d660ed7bdce2c79d7d5d3da8b63567391f5d, which try to fix the https://issues.apache.org/jira/browse/CAMEL-12428;;;","09/Sep/18 04:37;githubbot;xldai opened a new pull request #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513
 
 
   …mer when POST

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Sep/18 04:37;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2513

    fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…

    …mer when POST

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2513.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2513
    
----
commit b3b837a697943598bdd2a9ff4488d69a36f54d72
Author: Xilai Dai <xldai@...>
Date:   2018-09-09T04:36:44Z

    fix CAMEL-12787 Accept header is not respected anymore in CXFRS consumer when POST

----
;;;","09/Sep/18 04:38;xldai;As a quick fix, the PR is created https://github.com/apache/camel/pull/2513;;;","10/Sep/18 05:45;githubbot;oscerd commented on issue #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513#issuecomment-419794002
 
 
   I'm merging this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Sep/18 06:33;githubbot;oscerd commented on issue #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513#issuecomment-419803433
 
 
   Merged on master, 2.22.x and 2.21.x
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Sep/18 06:41;githubbot;oscerd closed pull request #2513: fix CAMEL-12787 Accept header is not respected anymore in CXFRS consu…
URL: https://github.com/apache/camel/pull/2513
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
index 1ae15e91fe3..8679bba6894 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
@@ -115,7 +115,7 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
             if (response.getHeader(Exchange.HTTP_RESPONSE_CODE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.RESPONSE_CODE)) {
                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));
             }
-            if (response.getHeader(Exchange.CONTENT_TYPE) != null) {
+            if (response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)) {
                 if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
                     cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Sep/18 06:41;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2513
;;;",,,,,,,,,,,,,,,,,,,,,
Option readLockLoggingLevel not working for SFTP changed read lock strategy,CAMEL-12786,13183571,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,dmvolod,kolas,kolas,07/Sep/18 07:23,04/Oct/18 13:12,13/Jul/23 08:31,04/Oct/18 13:12,2.19.0,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-ftp,,,,,,0,,,,"method setReadLockLoggingLevel is not invoked in class SftpProcessStrategyFactory so logging level is always set to default (WARN)

 
{code:java}
else if (""changed"".equals(readLock)) {
    SftpChangedExclusiveReadLockStrategy readLockStrategy = new SftpChangedExclusiveReadLockStrategy();
    Long timeout = (Long) params.get(""readLockTimeout"");
    if (timeout != null) {
        readLockStrategy.setTimeout(timeout);
    }
    Long checkInterval = (Long) params.get(""readLockCheckInterval"");
    if (checkInterval != null) {
        readLockStrategy.setCheckInterval(checkInterval);
    }
    Long minLength = (Long) params.get(""readLockMinLength"");
    if (minLength != null) {
        readLockStrategy.setMinLength(minLength);
    }
    Long minAge = (Long) params.get(""readLockMinAge"");
    if (null != minAge) {
        readLockStrategy.setMinAge(minAge);
    }
    Boolean fastExistsCheck = (Boolean) params.get(""fastExistsCheck"");
    if (fastExistsCheck != null) {
        readLockStrategy.setFastExistsCheck(fastExistsCheck);
    }
    return readLockStrategy;
}{code}",,githubbot,kolas,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 04 13:05:24 UTC 2018,,,,,,,,,,,"0|i3xtzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Sep/18 08:32;vrlgohel;Thanks for reporting. How are you trying to set the readLockLoggingLevel to something other than WARN ?;;;","07/Sep/18 09:10;kolas;{code:java}
sftp://localhost:2022/test/logs?delete=true&fastExistsCheck=true&moveFailed=.failed&readLock=changed&readLockLoggingLevel=INFO{code}
 ;;;","07/Sep/18 11:38;vrlgohel;Thanks. I will take a look.;;;","04/Oct/18 12:47;githubbot;dmvolod opened a new pull request #2551: CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy
URL: https://github.com/apache/camel/pull/2551
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Oct/18 12:47;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2551

    CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12786

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2551.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2551
    
----
commit a81ef66b8d50e605e4c0b2722eaecee774f88c4c
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-10-04T12:44:55Z

    CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed
    read lock strategy

----
;;;","04/Oct/18 13:05;githubbot;asfgit closed pull request #2551: CAMEL-12786: Option readLockLoggingLevel not working for SFTP changed read lock strategy
URL: https://github.com/apache/camel/pull/2551
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
index 0b245ab615c..39dfd0d24e1 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/FtpProcessStrategyFactory.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.Expression;
+import org.apache.camel.LoggingLevel;
 import org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy;
 import org.apache.camel.component.file.GenericFileProcessStrategy;
 import org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy;
@@ -115,6 +116,10 @@ private FtpProcessStrategyFactory() {
                 if (readLockMarkerFile != null) {
                     readLockStrategy.setMarkerFiler(readLockMarkerFile);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             } else if (""changed"".equals(readLock)) {
                 FtpChangedExclusiveReadLockStrategy readLockStrategy = new FtpChangedExclusiveReadLockStrategy();
@@ -142,6 +147,10 @@ private FtpProcessStrategyFactory() {
                 if (readLockMarkerFile != null) {
                     readLockStrategy.setMarkerFiler(readLockMarkerFile);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             }
         }
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
index 93e5048cf4a..57fcebf16af 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpProcessStrategyFactory.java
@@ -21,6 +21,7 @@
 import com.jcraft.jsch.ChannelSftp;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Expression;
+import org.apache.camel.LoggingLevel;
 import org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy;
 import org.apache.camel.component.file.GenericFileProcessStrategy;
 import org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategy;
@@ -111,6 +112,10 @@ private SftpProcessStrategyFactory() {
                 if (checkInterval != null) {
                     readLockStrategy.setCheckInterval(checkInterval);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             } else if (""changed"".equals(readLock)) {
                 SftpChangedExclusiveReadLockStrategy readLockStrategy = new SftpChangedExclusiveReadLockStrategy();
@@ -134,6 +139,10 @@ private SftpProcessStrategyFactory() {
                 if (fastExistsCheck != null) {
                     readLockStrategy.setFastExistsCheck(fastExistsCheck);
                 }
+                LoggingLevel readLockLoggingLevel = (LoggingLevel) params.get(""readLockLoggingLevel"");
+                if (readLockLoggingLevel != null) {
+                    readLockStrategy.setReadLockLoggingLevel(readLockLoggingLevel);
+                }
                 return readLockStrategy;
             }
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Oct/18 13:05;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2551
;;;",,,,,,,,,,,,,,,,,,,,,,
ServletComponent ignores httpBinding option,CAMEL-12785,13183443,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,vrlgohel,paulmcculloch,paulmcculloch,06/Sep/18 16:24,12/Sep/18 06:20,13/Jul/23 08:31,12/Sep/18 06:20,2.18.3,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-servlet,,,,,,0,,,,"ServletComponent.doCreateConsumer()  seems to consider the 'httpBindingRef' option when deciding whether or not to create a default HttpBinding. However this option was removed in 2.17 (https://github.com/apache/camel/commit/df701cc3776833c98a3e2b53f86dfd8f01eabe4b )

{{<restConfiguration component=""servlet"" enableCORS=""true"">}}
{{   <endpointProperty key=""servletName"" value=""MyCamelServlet""/>}}
{{   <endpointProperty key=""httpBinding"" value=""#MyHttpBinding""/>}}
{{</restConfiguration>}}

Doesn't use the custom binding. Providing a value for httpBindingRef causes the endpoint creation to fail (due to unknown parameters being included in the servlet:// URI.

 ",,githubbot,paulmcculloch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 06:20:47 UTC 2018,,,,,,,,,,,"0|i3xt73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Sep/18 18:00;githubbot;vrlgohel opened a new pull request #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517
 
 
   We dropped the **httpBindingRef** in http common and servlet component some time back. The Servlet Component had a regression where it wasn't taking into consideration a custom **httpBinding**, and instead always initialized a default instance of **ServletRestHttpBinding**, thereby ignoring the custom config. 
   This change now takes into effect **user's custom httpBinding**. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Sep/18 18:00;githubbot;GitHub user vrlgohel opened a pull request:

    https://github.com/apache/camel/pull/2517

    CAMEL-12785: ServletComponent ignores HttpBinding

    We dropped the **httpBindingRef** in http common and servlet component some time back. The Servlet Component had a regression where it wasn't taking into consideration a custom **httpBinding**, and instead always initialized a default instance of **ServletRestHttpBinding**, thereby ignoring the custom config. 
    This change now takes into effect **user's custom httpBinding**. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/vrlgohel/camel-1 CAMEL-12785

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2517.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2517
    
----
commit 8714e24a3fc0f50c92a5a2d3311129a5969e8302
Author: Viral Gohel <vrlgohel87@...>
Date:   2018-09-11T17:55:10Z

    CAMEL-12785: ServletComponent ignores HttpBinding

----
;;;","12/Sep/18 06:20;githubbot;oscerd commented on issue #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517#issuecomment-420525994
 
 
   Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Sep/18 06:20;githubbot;oscerd closed pull request #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
index 1ee0fdabff1..7c269db2991 100644
--- a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
+++ b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java
@@ -320,7 +320,7 @@ Consumer doCreateConsumer(CamelContext camelContext, Processor processor, String
         ServletEndpoint endpoint = camelContext.getEndpoint(url, ServletEndpoint.class);
         setProperties(camelContext, endpoint, parameters);
 
-        if (!map.containsKey(""httpBindingRef"")) {
+        if (!map.containsKey(""httpBinding"")) {
             // use the rest binding, if not using a custom http binding
             HttpBinding binding = new ServletRestHttpBinding();
             binding.setHeaderFilterStrategy(endpoint.getHeaderFilterStrategy());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Sep/18 06:20;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2517
;;;","12/Sep/18 06:20;githubbot;oscerd commented on issue #2517: CAMEL-12785: ServletComponent ignores HttpBinding
URL: https://github.com/apache/camel/pull/2517#issuecomment-420526020
 
 
   Thanks @vrlgohel 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
swagger-java - Provide more clear exception when model class is not visible to ClassResolver,CAMEL-12782,13183281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bobpaulin,bobpaulin,06/Sep/18 02:55,08/Sep/18 07:56,13/Jul/23 08:31,08/Sep/18 07:56,2.18.5,2.20.4,2.21.2,2.22.0,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-swagger,,,,,,0,,,,"Within an OSGi the camel-swagger-java component be run within a different bundle than the routes and models required to generate the swagger document.  In this case the swagger code may not be able to read the model.  Currently this generates a Nullpointer Exception and the swagger document does not get rendered. 

Would prefer that the exception be more specific to help developers with debugging.  Also toyed with the idea of converting to a LOG statement instead of an exception but it may be better to fail fast.

 
{code:java}
org.apache.camel.camel-swagger-java - 2.22.0 | Error rendering Swagger API due null
java.lang.NullPointerException: null
    at org.apache.camel.swagger.RestModelConverters.readClass(RestModelConverters.java:32) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.appendModels(RestSwaggerReader.java:755) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.parse(RestSwaggerReader.java:227) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerReader.read(RestSwaggerReader.java:113) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:210) ~[108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.swagger.RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) [108:org.apache.camel.camel-swagger-java:2.22.0]
    at org.apache.camel.component.rest.RestApiProducer.process(RestApiProducer.java:36) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:181) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [89:org.apache.camel.camel-core:2.22.0]
    at org.apache.camel.component.netty4.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:141) [105:org.apache.camel.camel-netty4:2.22.0]
    at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:112) [105:org.apache.camel.camel-netty4:2.22.0]
    at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:213) [106:org.apache.camel.camel-netty4-http:2.22.0]
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [55:io.netty.transport:4.1.25.Final]
    at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:113) [106:org.apache.camel.camel-netty4-http:2.22.0]
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:38) [55:io.netty.transport:4.1.25.Final]
    at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:353) [55:io.netty.transport:4.1.25.Final]
    at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66) [51:io.netty.common:4.1.25.Final]
    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) [51:io.netty.common:4.1.25.Final]
    at java.lang.Thread.run(Thread.java:748) [?:?]{code}","Apache Karaf

Apache Camel (Rest DSL with Swagger)",bobpaulin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Sat Sep 08 07:56:54 UTC 2018,,,,,,,,,,,"0|i3xs7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Sep/18 03:08;githubbot;bobpaulin opened a new pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 03:08;githubbot;GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/2509

    CAMEL-12782 - More specific error message for unresolved model classes.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel CAMEL-12782

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2509.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2509
    
----
commit b15546c6c748fb678cea7e46e8e39c05679f9573
Author: Bob Paulin <bob@...>
Date:   2018-09-06T03:08:13Z

    CAMEL-12782 - More specific error message for unresolved model classes.

----
;;;","06/Sep/18 05:15;githubbot;onderson commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215498161
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   i would suggest RuntimeCamelException

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 06:40;githubbot;davsclaus commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215510721
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   I think there is a resolveMandatoryClass method that should be used instead

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 14:32;githubbot;bobpaulin commented on a change in pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509#discussion_r215648721
 
 

 ##########
 File path: components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
 ##########
 @@ -224,6 +224,9 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
             Class<?> clazz = classResolver.resolveClass(type);
+            if (clazz == null) {
+                throw new RuntimeException(""The ClassResolver could not resolve the model class of type: "" + type);
 
 Review comment:
   Agree resolveMandatoryClass provides what I'm looking for.  Will update.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/Sep/18 07:54;githubbot;davsclaus closed pull request #2509: CAMEL-12782 - More specific error message for unresolved model classes.
URL: https://github.com/apache/camel/pull/2509
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
index cd3d58c70fa..c0631b4b778 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java
@@ -97,8 +97,9 @@
      * @param config            the swagger configuration
      * @param classResolver     class resolver to use
      * @return the swagger model
+     * @throws ClassNotFoundException 
      */
-    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {
+    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {
         Swagger swagger = new Swagger();
 
         for (RestDefinition rest : rests) {
@@ -118,7 +119,7 @@ public Swagger read(List<RestDefinition> rests, String route, BeanConfig config,
         return swagger;
     }
 
-    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) {
+    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {
         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());
         // must sort the verbs by uri so we group them together when an uri has multiple operations
         Collections.sort(verbs, new VerbOrdering());
@@ -223,7 +224,7 @@ private void parse(Swagger swagger, RestDefinition rest, String camelContextId,
 
         // use annotation scanner to find models (annotated classes)
         for (String type : types) {
-            Class<?> clazz = classResolver.resolveClass(type);
+            Class<?> clazz = classResolver.resolveMandatoryClass(type);
             appendModels(clazz, swagger);
         }
 
diff --git a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
index e3276a03cac..6672215945a 100644
--- a/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
+++ b/components/camel-swagger-java/src/test/java/org/apache/camel/swagger/RestSwaggerArrayEnumTest.java
@@ -36,7 +36,7 @@
 public class RestSwaggerArrayEnumTest {
 
     @Test
-    public void shouldGenerateEnumValuesForArraysAndNonArrays() {
+    public void shouldGenerateEnumValuesForArraysAndNonArrays() throws Exception {
         final RestSwaggerReader reader = new RestSwaggerReader();
 
         final RestDefinition restDefinition = new RestDefinition();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/Sep/18 07:54;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2509
;;;","08/Sep/18 07:56;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,
Regression in Camel Salesforce - consumer blocks producer in same route,CAMEL-12780,13183186,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,dhirajsb,dhirajsb,dhirajsb,05/Sep/18 16:49,18/Sep/18 10:23,13/Jul/23 08:31,06/Sep/18 18:56,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-salesforce,,,,,,0,salesforce,,,Salesforce consumer should use a non-blocking AsyncCallback when processing exchanges. ,,dhirajsb,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 18 10:23:40 UTC 2018,,,,,,,,,,,"0|i3xrmf:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"05/Sep/18 18:22;githubbot;dhirajsb opened a new pull request #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Sep/18 18:22;githubbot;GitHub user dhirajsb opened a pull request:

    https://github.com/apache/camel/pull/2508

    Salesforce consumer should use AyncCallback, fixes CAMEL-12780

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dhirajsb/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2508.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2508
    
----
commit 1e3ff96f5b65e09eafa6fbb837cead867cb207af
Author: Dhiraj Bokde <dhirajsb@...>
Date:   2018-09-05T18:14:50Z

    Salesforce consumer should use AyncCallback, fixes CAMEL-12780

----
;;;","05/Sep/18 18:23;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418831360
 
 
   @davsclaus, @oscerd can you add me for write access?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 04:59;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418964989
 
 
   I believe you need to follow the process on gitbox.apache.org

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 05:52;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-418973002
 
 
   I had started it earlier but I didn't get a confirmation or something. I'm trying to do it again. Hopefully it will work this time. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 08:13;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419005892
 
 
   Let us know if you're able to push @dhirajsb otherwise I can take care of your PR :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 18:38;githubbot;dhirajsb commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419198703
 
 
   Finally sorted it out and got through the gitbox process today. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 18:44;githubbot;dhirajsb closed pull request #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
index 8224d644c33..501c6d9d0a7 100644
--- a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
+++ b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java
@@ -22,6 +22,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import org.apache.camel.AsyncCallback;
 import org.apache.camel.Exchange;
 import org.apache.camel.Processor;
 import org.apache.camel.component.salesforce.api.SalesforceException;
@@ -144,7 +145,16 @@ public void processMessage(final ClientSessionChannel channel, final Message mes
         }
 
         try {
-            getAsyncProcessor().process(exchange);
+            getAsyncProcessor().process(exchange, new AsyncCallback() {
+                @Override
+                public void done(boolean doneSync) {
+                    // noop
+                    if (log.isTraceEnabled()) {
+                        log.trace(""Done processing event: {} {}"", channel.getId(),
+                                doneSync ? ""synchronously"" : ""asynchronously"");
+                    }
+                }
+            });
         } catch (final Exception e) {
             final String msg = String.format(""Error processing %s: %s"", exchange, e);
             handleException(msg, new SalesforceException(msg, e));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Sep/18 18:44;githubbot;Github user dhirajsb closed the pull request at:

    https://github.com/apache/camel/pull/2508
;;;","06/Sep/18 18:56;dhirajsb;It's not an issue for 2.20 or 2.21 since the PlatformEvent API support was only added to master, which had introduced this regression. ;;;","07/Sep/18 06:09;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419333354
 
 
   Salesforce tests are failing now.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Sep/18 06:38;githubbot;oscerd commented on issue #2508: Salesforce consumer should use AyncCallback, fixes CAMEL-12780
URL: https://github.com/apache/camel/pull/2508#issuecomment-419338610
 
 
   Fixed.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Sep/18 10:23;zregvart;Great find [~dhirajsb], thanks for the fix!;;;",,,,,,,,,,,,,,,,
camel-spring-redis - When stopping consumer it should stop the message listener,CAMEL-12779,13183110,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Sep/18 12:08,05/Sep/18 12:11,13/Jul/23 08:31,05/Sep/18 12:11,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-spring-redis,,,,,,0,,,,"The consumer needs to remove the message listener when its stopping so it wont continue to receive messages, which otherwise can happen when shutting down Camel graceful.

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-09-05 12:08:49.0,,,,,,,,,,,"0|i3xr5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelCatalog - Should be JMX compliant,CAMEL-12778,13183052,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Sep/18 06:55,05/Sep/18 07:23,13/Jul/23 08:31,05/Sep/18 07:23,2.21.2,2.22.0,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-catalog,,,,,,0,,,,"We have this error

Failed
org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter

Failing for the past 8 builds (Since Unstable#599 )
Took 7 ms.
Error Message
org.apache.camel.catalog.CamelCatalog: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
Stacktrace
javax.management.NotCompliantMBeanException: org.apache.camel.catalog.CamelCatalog: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: java.lang.IllegalArgumentException: Method org.apache.camel.catalog.CamelCatalog.setSuggestionStrategy has parameter or return type that cannot be translated into an open type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: javax.management.openmbean.OpenDataException: Cannot convert type: org.apache.camel.catalog.SuggestionStrategy
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)
Caused by: javax.management.openmbean.OpenDataException: Can't map org.apache.camel.catalog.SuggestionStrategy to an open data type
	at org.apache.camel.catalog.CamelCatalogMBeanExporterTest.testMBeanExporter(CamelCatalogMBeanExporterTest.java:35)",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 05 07:23:17 UTC 2018,,,,,,,,,,,"0|i3xqsn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Sep/18 07:23;davsclaus;As this is not in use we have deprecate it instead and will remove it in future release;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using StubComponent can block routes depending on MEP,CAMEL-12775,13182869,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,guido.schreuder@gmail.com,guido.schreuder@gmail.com,04/Sep/18 17:34,05/Sep/18 09:27,13/Jul/23 08:31,05/Sep/18 08:38,2.16.3,2.22.0,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"As the name implies and per the documentation 'stub:' should be a no-op.

However, if the exchange pattarn is InOut, routes are actually blocked waiting for a response.

Discovered against camel 2.16.3

Confirmed against Camel 2.22.0 (see attached test-case)

 ",,davsclaus,guido.schreuder@gmail.com,vrlgohel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Sep/18 17:32;guido.schreuder@gmail.com;StubTest.java;https://issues.apache.org/jira/secure/attachment/12938283/StubTest.java",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 05 09:27:05 UTC 2018,,,,,,,,,,,"0|i3xpt3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Sep/18 08:39;davsclaus;Thanks for reporting and providing the unit test;;;","05/Sep/18 09:27;guido.schreuder@gmail.com;You're welcome Claus, that was fast!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Error during type conversion from type: java.lang.String to the required type: org.elasticsearch.action.update.UpdateRequest,CAMEL-12774,13182841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,johnbolshakov,johnbolshakov,04/Sep/18 15:21,20/Nov/18 13:50,13/Jul/23 08:31,20/Nov/18 13:49,2.22.0,,,,,,,,,,,,,,,2.21.4,2.22.3,2.23.0,,,camel-elasticsearch-rest,,,,,,0,,,,"When I try to update es document using Update method of camel-elasticsearch-rest endpoint I got this error

*Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.elasticsearch.action.update.UpdateRequest with value \{teststringupdate-key2=teststringupdate-value2} due java.lang.IllegalArgumentException: The number of object passed must be even but was [1]*

This is because method {color:#353833}[doc|https://static.javadoc.io/org.elasticsearch/elasticsearch/5.0.0/org/elasticsearch/action/update/UpdateRequest.html#doc-java.lang.String-]{color}{color:#353833}(java.lang.String source){color} org.elasticsearch.action.update does not exist in

<{color:#000080}elasticsearch-rest-version{color}>6.1.1</{color:#000080}elasticsearch-rest-version{color}>.

In attach you can see test for this issue.",,acosentino,johnbolshakov,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Nov/18 11:45;johnbolshakov;ElasticsearchGetSearchDeleteExistsUpdateTest.java;https://issues.apache.org/jira/secure/attachment/12948862/ElasticsearchGetSearchDeleteExistsUpdateTest.java","04/Sep/18 15:20;johnbolshakov;ElasticsearchUpdateStringTest.java;https://issues.apache.org/jira/secure/attachment/12938269/ElasticsearchUpdateStringTest.java",,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 20 13:50:30 UTC 2018,,,,,,,,,,,"0|i3xpmv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Sep/18 06:20;acosentino;Thanks for spotting this.;;;","20/Nov/18 09:02;johnbolshakov;It look's like not fixed in version 2.22.2;;;","20/Nov/18 09:11;acosentino;[https://github.com/apache/camel/commit/a47434000734e384ecee746c7d1e30a3b0c1290f]

Here is the commit;;;","20/Nov/18 09:14;acosentino;and if you download the sources [http://repo2.maven.org/maven2/org/apache/camel/camel-elasticsearch-rest/2.22.2/]

In the ActionConverter there is the fix;;;","20/Nov/18 09:15;acosentino;the version used in 2.22.2 is still 6.1.1;;;","20/Nov/18 09:26;johnbolshakov;Andrea, thank you!;;;","20/Nov/18 09:36;acosentino;If you find any kind of problem, please report here, do you think we can close this or do you prefer to double check?;;;","20/Nov/18 11:44;johnbolshakov;Please review this test code

It looks like new Update adds some other content into ES document.;;;","20/Nov/18 11:45;johnbolshakov;[^ElasticsearchGetSearchDeleteExistsUpdateTest.java];;;","20/Nov/18 11:50;acosentino;That's the test we have in the repo. I don't get what you're asking for.. Does it work for you, I mean for your use case?;;;","20/Nov/18 12:07;johnbolshakov;I have added to this test additional strings:
{color:#4ec9b0}GetResponse{color} {color:#9cdcfe}response{color} {color:#d4d4d4}={color} {color:#9cdcfe}template{color}{color:#d4d4d4}.{color}{color:#dcdcaa}requestBody{color}{color:#d4d4d4}({color}{color:#ce9178}""direct:get""{color}{color:#d4d4d4}, indexId, {color}{color:#9cdcfe}GetResponse{color}{color:#d4d4d4}.{color}{color:#9cdcfe}class{color}{color:#d4d4d4});{color}
{color:#dcdcaa}assertEquals{color}{color:#d4d4d4}(body, {color}{color:#9cdcfe}response{color}{color:#d4d4d4}.{color}{color:#dcdcaa}getSource{color}{color:#d4d4d4}());{color}
{color:#333333}{color:#333333}Where I am checking that content of document in elasticksearch after update is{color}{color}{color:#008000}""{{color}{color:#000080}\""{color}{color:#008000}id{color}{color:#000080}\""{color}{color:#008000} : 1}""{color}.
{color:#333333}And it fails.{color};;;","20/Nov/18 13:50;acosentino;Thanks for spotting this, it was an error in the xcontentType parameter. My fault, I was passing the xcontent value as a key to use and the String as document.. Now it should work fine.;;;",,,,,,,,,,,,,,,,,
Combination of File consumer with charset and Split DSL with XPath doesn't parse XML correctly,CAMEL-12769,13182580,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,03/Sep/18 08:22,14/May/19 10:18,13/Jul/23 08:31,04/Sep/18 14:37,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,,,,,,0,,,,"This route:
{code:java}
from(""file:/...?charset=iso-8859-1&&include=.*\.xml"")
    .split(xpath(""/foo/bar""))
        ...
{code}
does not read and split XML like the following with the correct encoding:
{code:xml}
<?xml version=""1.0"" encoding=""ISO-8859-1""?>
<foo>
	<bar>abc</bar>
	<bar>xyz</bar>
	<bar>åäö</bar>
</root>
{code}
The root cause is due to the spec of {{IOConverter.toInputStream(File, String)}}:
 [https://github.com/apache/camel/blob/camel-2.22.1/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java#L84-L119]
 which was clarified at CAMEL-8346 and CAMEL-8356.

This method converts a {{File}} with a charset to an {{InputStream}} with the *JVM default charset* encoding whatever the format of the file is. However, in turn [XmlConverter.toDOMDocument(...)|https://github.com/apache/camel/blob/camel-2.22.1/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java#L870-L872] uses {{DocumentBuilder}} to convert the input stream to a DOM {{Document}} and {{DocumentBuilder}} is aware of the XML declaration:
{code:xml}
<?xml version=""1.0"" encoding=""ISO-8859-1""?>
{code}
to detect the file encoding, and there is a mismatch between the actual encoding of the input stream (JVM default) and the encoding declared in XML.",,davsclaus,githubbot,tadayosi,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13136,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 04 14:37:47 UTC 2018,,,,,,,,,,,"0|i3xo1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Sep/18 08:28;githubbot;tadayosi opened a new pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505
 
 
   …with XPath doesn't parse XML correctly
   
   https://issues.apache.org/jira/browse/CAMEL-12769

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 08:28;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2505

    CAMEL-12769: Combination of File consumer with charset and Split DSL …

    …with XPath doesn't parse XML correctly
    
    https://issues.apache.org/jira/browse/CAMEL-12769

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12769

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2505.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2505
    
----
commit b8dd9d2c9a4f9a0616ed3016b91fa547b138ae0f
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-09-03T08:24:05Z

    CAMEL-12769: Combination of File consumer with charset and Split DSL with XPath doesn't parse XML correctly

----
;;;","03/Sep/18 08:37;githubbot;oscerd commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418042984
 
 
   LGTM. I'd like to have feedback from @davsclaus and @onderson too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 08:49;githubbot;davsclaus commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418046264
 
 
   Have you run all the unit tests of camel-core, camel-spring and also since this is XML, then try camel-saxon and maybe camel-cxf.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 09:20;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214624570
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   isn't it still that the given `String charset` and defaultStreamCharset should match and default fileinputstream's encoding resolves it?
   and yes full CI test build would be good to see, before merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 09:21;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214624993
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
 ##########
 @@ -869,7 +870,14 @@ public Document toDOMDocument(InputStream in) throws IOException, SAXException,
     @Converter
     public Document toDOMDocument(InputStream in, Exchange exchange) throws IOException, SAXException, ParserConfigurationException {
         DocumentBuilder documentBuilder = createDocumentBuilder(getDocumentBuilderFactory(exchange));
-        return documentBuilder.parse(in);
+        if (in instanceof IOConverter.EncodingInputStream) {
+            // DocumentBuilder detects encoding from XML declaration, so we need to
+            // revert the converted encoding for the input stream
+            IOConverter.EncodingInputStream encIn = (IOConverter.EncodingInputStream) in;
 
 Review comment:
   as we have instance of, type casting is good. maybe objecthelper.cast can be used.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 09:35;githubbot;tadayosi commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214628894
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   If I understand your question correctly, I don't think it resolves the bug. We read files with encodings other than default and IIUC the purpose of `IOConverter.toInputStream(File, String)` is to convert a File with a charset to an InputStream with the JVM default charset encoding. So we should handle cases where the given charset and the default one differ.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 09:36;githubbot;tadayosi commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418059234
 
 
   I ran camel-core, camel-spring, camel-saxon, and camel-cxf, and all the unit tests passed. Should I run the full test suite locally?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 10:05;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214637601
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   yes, that's my point too. I am unsure if it is right approach. https://github.com/apache/camel/pull/2505/files#diff-cf527fa70918461b67c399c1a1be9f4eR508 encodes with the default charset even if you have BufferedReader with a given charset. or could it be the otherway around?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 10:06;githubbot;onderson commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214637601
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   yes, that's my point too. I am unsure if it is right approach. https://github.com/apache/camel/pull/2505/files#diff-cf527fa70918461b67c399c1a1be9f4eR508 encodes with the default charset even if you have BufferedReader with a given charset. or could it be the otherway around? if UTs are good, i think it is good to go.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 11:02;githubbot;tadayosi commented on a change in pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#discussion_r214651061
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
 ##########
 @@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
 
 Review comment:
   I didn't create this but the line came from the existing code. I just made the anonymous class in the method to a named static class. It was brought from https://issues.apache.org/jira/browse/CAMEL-8346 and https://issues.apache.org/jira/browse/CAMEL-8356 so we need to understand their backgrounds to see if it's really a right approach or not.
   
   My understanding is that we already have the other method  `IOConverter.toInputStream(File)` so unless the following is the specification of the method, there is no reason for the existence of `IOConverter.toInputStream(File, String)`:
   ```
       /**
        * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset
        *
        * @param file the file to be converted
        * @param charset the charset the file is read with
        * @return the input stream with the JVM default charset
        */
   ```
   Let's think that you have a file with `iso-8859-1` and want the input stream with `iso-8859-1` encoding. Then you can just use `IOConverter.toInputStream(File)`. `IOConverter.toInputStream(File, String)` is necessary only when you want the input stream with something other than `iso-8859-1`, but what encoding should the method return?  The only sensible choice would be `UTF-8` or the JVM default, but AFAIK `UTF-8` has a problem at CAMEL-8346.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 10:17;githubbot;tadayosi commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418315454
 
 
   I finally ran through `mvn clean install` on the project but got a few test failures on some components:
   ```
   [INFO] Camel :: ElasticSearch5 (deprecated) 2.23.0-SNAPSHOT FAILURE [05:10 min]
   [INFO] Camel :: Netty HTTP (deprecated) ................... FAILURE [05:05 min]
   [INFO] Camel :: Tika ...................................... FAILURE [  7.036 s]
   [INFO] Camel :: XChange ................................... FAILURE [  9.915 s]
   [INFO] Camel :: Zookeeper ................................. FAILURE [10:04 min]
   [INFO] Camel :: Zookeeper Master .......................... FAILURE [ 41.479 s]
   [INFO] Camel :: Platforms :: Camel Catalog ................ FAILURE [ 20.017 s]
   ```
   For camel-netty-http, camel-zookeeper, and camel-zookeeper-master, I re-ran their tests individually and they passed with my patch. For the others, I re-ran them without my patch and still got the same failures, so probably it's not my fault.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 10:57;githubbot;davsclaus commented on issue #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505#issuecomment-418324881
 
 
   The CI server also have some unit test failures in zookeeper etc.
   https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/
   
   LGTM

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 14:36;githubbot;davsclaus closed pull request #2505: CAMEL-12769: Combination of File consumer with charset and Split DSL …
URL: https://github.com/apache/camel/pull/2505
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
index 073547ea36c..ae02a2c8e39 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
@@ -81,40 +81,18 @@ public static InputStream toInputStream(File file) throws IOException {
         return IOHelper.buffered(new FileInputStream(file));
     }
 
+    /**
+     * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset
+     *
+     * @param file the file to be converted
+     * @param charset the charset the file is read with
+     * @return the input stream with the JVM default charset
+     */
     public static InputStream toInputStream(File file, String charset) throws IOException {
         if (charset != null) {
-            final BufferedReader reader = toReader(file, charset);
-            final Charset defaultStreamCharset = defaultCharset.get();
-            return new InputStream() {
-                private ByteBuffer bufferBytes;
-                private CharBuffer bufferedChars = CharBuffer.allocate(4096);
-
-                @Override
-                public int read() throws IOException {
-                    if (bufferBytes == null || bufferBytes.remaining() <= 0) {
-                        bufferedChars.clear();
-                        int len = reader.read(bufferedChars);
-                        bufferedChars.flip();
-                        if (len == -1) {
-                            return -1;
-                        }
-                        bufferBytes = defaultStreamCharset.encode(bufferedChars);
-                    }
-                    return bufferBytes.get();
-                }
-
-                @Override
-                public void close() throws IOException {
-                    reader.close();
-                }
-
-                @Override
-                public void reset() throws IOException {
-                    reader.reset();
-                }
-            };
+            return new EncodingInputStream(file, charset);
         } else {
-            return IOHelper.buffered(new FileInputStream(file));
+            return toInputStream(file);
         }
     }
 
@@ -500,6 +478,53 @@ public static String getCharsetName(Exchange exchange) {
         return getCharsetName(exchange, true);
     }
 
+    /**
+     * Encoding-aware input stream.
+     */
+    public static class EncodingInputStream extends InputStream {
+
+        private final File file;
+        private final BufferedReader reader;
+        private final Charset defaultStreamCharset;
+
+        private ByteBuffer bufferBytes;
+        private CharBuffer bufferedChars = CharBuffer.allocate(4096);
+
+        public EncodingInputStream(File file, String charset) throws IOException {
+            this.file = file;
+            reader = toReader(file, charset);
+            defaultStreamCharset = defaultCharset.get();
+        }
+
+        @Override
+        public int read() throws IOException {
+            if (bufferBytes == null || bufferBytes.remaining() <= 0) {
+                bufferedChars.clear();
+                int len = reader.read(bufferedChars);
+                bufferedChars.flip();
+                if (len == -1) {
+                    return -1;
+                }
+                bufferBytes = defaultStreamCharset.encode(bufferedChars);
+            }
+            return bufferBytes.get();
+        }
+
+        @Override
+        public void close() throws IOException {
+            reader.close();
+        }
+
+        @Override
+        public void reset() throws IOException {
+            reader.reset();
+        }
+
+        public InputStream toOriginalInputStream() throws FileNotFoundException {
+            return new FileInputStream(file);
+        }
+    }
+
     /**
      * Encoding-aware file reader. 
      */
diff --git a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
index f8a876637d4..6d7c06379a3 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
@@ -54,7 +54,6 @@
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
 
-import org.apache.camel.util.StringHelper;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -70,8 +69,10 @@
 import org.apache.camel.Converter;
 import org.apache.camel.Exchange;
 import org.apache.camel.StringSource;
+import org.apache.camel.converter.IOConverter;
 import org.apache.camel.util.IOHelper;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.StringHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -870,7 +871,14 @@ public Document toDOMDocument(InputStream in) throws IOException, SAXException,
     @Converter
     public Document toDOMDocument(InputStream in, Exchange exchange) throws IOException, SAXException, ParserConfigurationException {
         DocumentBuilder documentBuilder = createDocumentBuilder(getDocumentBuilderFactory(exchange));
-        return documentBuilder.parse(in);
+        if (in instanceof IOConverter.EncodingInputStream) {
+            // DocumentBuilder detects encoding from XML declaration, so we need to
+            // revert the converted encoding for the input stream
+            IOConverter.EncodingInputStream encIn = (IOConverter.EncodingInputStream) in;
+            return documentBuilder.parse(encIn.toOriginalInputStream());
+        } else {
+            return documentBuilder.parse(in);
+        }
     }
 
     /**
diff --git a/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java b/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
index 9d82ade477f..c192349b531 100644
--- a/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
+++ b/camel-core/src/test/java/org/apache/camel/converter/IOConverterCharsetTest.java
@@ -38,8 +38,8 @@ public void testToInputStreamFileWithCharsetUTF8() throws Exception {
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""UTF-8"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8)); 
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -52,8 +52,8 @@ public void testToInputStreamFileWithCharsetUTF8withOtherDefaultEncoding() throw
         switchToDefaultCharset(StandardCharsets.ISO_8859_1);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""UTF-8"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.ISO_8859_1));
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.ISO_8859_1));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -66,8 +66,8 @@ public void testToInputStreamFileWithCharsetLatin1() throws Exception {
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""ISO-8859-1"");
-        BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
+             BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -80,7 +80,7 @@ public void testToInputStreamFileDirectByteDumpWithCharsetLatin1() throws Except
         switchToDefaultCharset(StandardCharsets.UTF_8);
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (InputStream in = IOConverter.toInputStream(file, ""ISO-8859-1"");
-        InputStream naiveIn = Files.newInputStream(Paths.get(file.getAbsolutePath()))) {
+             InputStream naiveIn = Files.newInputStream(Paths.get(file.getAbsolutePath()))) {
             byte[] bytes = new byte[8192];
             in.read(bytes);
             byte[] naiveBytes = new byte[8192];
@@ -93,7 +93,7 @@ public void testToInputStreamFileDirectByteDumpWithCharsetLatin1() throws Except
     public void testToReaderFileWithCharsetUTF8() throws Exception {
         File file = new File(""src/test/resources/org/apache/camel/converter/german.utf-8.txt"");
         try (BufferedReader reader = IOConverter.toReader(file, ""UTF-8"");
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), StandardCharsets.UTF_8))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);
@@ -105,7 +105,7 @@ public void testToReaderFileWithCharsetUTF8() throws Exception {
     public void testToReaderFileWithCharsetLatin1() throws Exception {
         File file = new File(""src/test/resources/org/apache/camel/converter/german.iso-8859-1.txt"");
         try (BufferedReader reader = IOConverter.toReader(file, ""ISO-8859-1"");
-        BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
+             BufferedReader naiveReader = new BufferedReader(new InputStreamReader(Files.newInputStream(Paths.get(file.getAbsolutePath())), ""ISO-8859-1""))) {
             String line = reader.readLine();
             String naiveLine = naiveReader.readLine();
             assertEquals(naiveLine, line);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 14:36;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2505
;;;","04/Sep/18 14:37;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,
camel-http4: basic auth no longer working when used in combination with a dynamic to,CAMEL-12764,13181933,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,29/Aug/18 15:30,23/Mar/21 14:14,13/Jul/23 08:31,23/Mar/21 14:14,2.22.0,2.22.1,2.23.2,2.24.1,,,,,,,,,,,,3.10.0,,,,,camel-http4,,,,,,0,regresion,,,"After upgrading a Spring Boot Project from Camel 2.21.1 to Camel 2.22.0 basic authentication of the http4 component stopped working when it is used in combination with a dynamic to.

My (slightly simplified) route:

{code:java}
from(inUri)
    .setHeader(Exchange.CONTENT_TYPE, constant(MediaType.APPLICATION_JSON_VALUE))
    .setBody(constant(""{\""action\"":\""signal\""}""))
    .setHeader(Exchange.HTTP_METHOD, constant(HttpMethods.PUT))
    .toD(""http4://{{username}}:{{password}}@{{host}}:{{port}}/executions/${exchangeProperty.my_id}"");
{code}

When I change the route and remove the dynamic to everything works fine again:

{code:java}
from(inUri)
    .setHeader(Exchange.CONTENT_TYPE, constant(MediaType.APPLICATION_JSON_VALUE))
    .setBody(constant(""{\""action\"":\""signal\""}""))
    .setHeader(Exchange.HTTP_METHOD, constant(HttpMethods.PUT))
    .setHeader(Exchange.HTTP_PATH, exchangeProperty(""my_id""))
    .to(""http4://{{username}}:{{password}}@{{host}}:{{port}}/executions/"");
{code}

Maybe this regression was caused by CAMEL-12462?
",,acosentino,aldettinger,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13930,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 23 14:14:49 UTC 2021,,,,,,,,,,,"0|i3xk2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Sep/18 15:13;davsclaus;Yeah its possible a problem of that issue, can you try with 2.22.1 release when its GA. You can use recipientList instead of toD as workaround.;;;","07/Sep/18 12:36;pascalschumacher;Thanks for the reponse. Sadly the issue still exists in Camel 2.22.1.;;;","28/Sep/18 17:29;aldettinger;Actually, [SendDynamicProcessor|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/SendDynamicProcessor.java#L91] voids username and password from the uri. I think it could be ok as it prevents to end up with an endpoint instance per username/password provided. However, we would need a mechanism to delegate basic auth to the underlying component. For http4, [authUsername & authPassword|https://github.com/apache/camel/blob/master/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java#L161] may do the job but it may not work for other components.

I guess we could hack pre/post processors to enable send dynamic basic auth for http4 for now. But in the long run, I wonder if those pre/post processors should be offered by the underlying component itself.

Any thoughts ?;;;","29/Apr/19 07:09;davsclaus;Can you try with latest releases;;;","29/Apr/19 14:56;pascalschumacher;I tried with Camel 2.23.2 and it now works again.;;;","30/Apr/19 11:20;pascalschumacher;Sorry I messed up, it still does not work with Camel 2.23.2.;;;","16/May/19 10:11;davsclaus;Can you try with latest code on camel-2.x branch;;;","07/Jun/19 13:07;pascalschumacher;Is there a maven repository with 2.25.0-SNAPSHOT builds? https://repository.apache.org/content/repositories/snapshots/ does not contain 2.25.0-SNAPSHOT and building camel from source fails at work.;;;","07/Jun/19 13:09;acosentino;you need to do a full build on camel-2.x branch.;;;","07/Jun/19 14:29;davsclaus;You can build camel-2.x with 

mvn clean install -P fastinstall;;;","06/Aug/19 14:03;davsclaus;Did you test with latest code?;;;","23/Mar/21 13:16;davsclaus;In Camel 3.x the basic auth uses authUsername, authPassword as query parameters to specify those, instead of in the authority part. 
;;;","23/Mar/21 13:29;davsclaus;If you specify the username and password as query parameters then it works

{code}
                from(""direct:joes"")
                        .toD(""http://localhost:"" + localServer.getLocalPort()
                             + ""/joes?authMethod=Basic&authUsername={{myUsername}}&authPassword={{myPassword}}&authenticationPreemptive=true&throwExceptionOnFailure=false&drink=${header.drink}"");
{code}
;;;","23/Mar/21 14:14;davsclaus;Now it also works for the authority part of the uri as in the initial report;;;",,,,,,,,,,,,,,,
camel-sjms - MessageProducer is not closed when using shared session,CAMEL-12762,13181892,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,fogninid,fogninid,29/Aug/18 11:37,30/Aug/18 06:14,13/Jul/23 08:31,30/Aug/18 06:14,,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-sjms,,,,,,0,,,,,,fogninid,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 30 06:14:49 UTC 2018,,,,,,,,,,,"0|i3xjtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Aug/18 14:01;githubbot;fogninid opened a new pull request #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Aug/18 14:01;githubbot;GitHub user fogninid opened a pull request:

    https://github.com/apache/camel/pull/2498

    CAMEL-12762: close JMS producer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fogninid/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2498.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2498
    
----
commit e4de63b4fe82b4dae914bdb9661456ad4c700d53
Author: Daniele Fognini <daniele.fognini@...>
Date:   2018-08-27T13:41:18Z

    CAMEL-12762: close JMS producer

----
;;;","30/Aug/18 06:02;githubbot;oscerd commented on issue #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498#issuecomment-417199826
 
 
   I'm merging

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Aug/18 06:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2498
;;;","30/Aug/18 06:08;githubbot;oscerd closed pull request #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
index 594cf46e689..516a8dc5ba0 100644
--- a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
+++ b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsProducer.java
@@ -190,8 +190,10 @@ protected Session createSession() throws Exception {
         void release(MessageProducerResources producer) throws Exception;
     }
 
-    protected class NOOPReleaseProducerCallback implements ReleaseProducerCallback {
-        public void release(MessageProducerResources producer) throws Exception { /* no-op */ }
+    protected class CloseProducerCallback implements ReleaseProducerCallback {
+        public void release(MessageProducerResources producer) throws Exception {
+            producer.getMessageProducer().close();
+        }
     }
 
     protected class ReturnProducerCallback implements ReleaseProducerCallback {
@@ -209,15 +211,15 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
 
         try {
-            MessageProducerResources producer = null;
-            ReleaseProducerCallback releaseProducerCallback = null;
+            final MessageProducerResources producer;
+            final ReleaseProducerCallback releaseProducerCallback;
             if (isEndpointTransacted() && isSharedJMSSession()) {
                 Session session = exchange.getIn().getHeader(SjmsConstants.JMS_SESSION, Session.class);
                 if (session != null && session.getTransacted()) {
                     // Join existing transacted session - Synchronization must have been added
                     // by the session initiator
                     producer = doCreateProducerModel(session);
-                    releaseProducerCallback = new NOOPReleaseProducerCallback();
+                    releaseProducerCallback = new CloseProducerCallback();
                 } else {
                     // Propagate JMS session and register Synchronization as an initiator
                     producer = getProducers().borrowObject();
@@ -240,13 +242,11 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     if (log.isDebugEnabled()) {
                         log.debug(""  Sending message asynchronously: {}"", exchange.getIn().getBody());
                     }
-                    final MessageProducerResources finalProducer = producer;
-                    final ReleaseProducerCallback finalrpc = releaseProducerCallback;
                     getExecutor().execute(new Runnable() {
                         @Override
                         public void run() {
                             try {
-                                sendMessage(exchange, callback, finalProducer, finalrpc);
+                                sendMessage(exchange, callback, producer, releaseProducerCallback);
                             } catch (Exception e) {
                                 ObjectHelper.wrapRuntimeCamelException(e);
                             }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Aug/18 06:14;githubbot;oscerd commented on issue #2498: CAMEL-12762: close JMS producer
URL: https://github.com/apache/camel/pull/2498#issuecomment-417202093
 
 
   Thanks @fogninid 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
SOAP request causing null namespace URI in SimpleNsStreamWriter camel-cxf/woodstox,CAMEL-12758,13181598,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ramu11,juergen.fritz@irix.ch,juergen.fritz@irix.ch,28/Aug/18 13:19,04/Sep/18 08:03,13/Jul/23 08:31,04/Sep/18 08:03,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-core,camel-cxf,,,,,1,,,,"Getting NullPointer at com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134)+ because parameter nsURI is null. (full stack trace below)

First call of this method prefix=”soapenv”, nsURI=null

Second call: prefix=”soap”, nsURI==""[http://schemas.xmlsoap.org/soap/envelope/]"" (I changed the value of nsURI in the debugger in the first call to arrive here)

In general: if I change the nsURI in the debugger to the correct value or to an empty string,

the request goes through without any error.

Same SOAP request using SOAPUI 5.4 was working with the same application using an older version of camel-cxf (2.12.4) under Java 1.7

My SOAP request:

<soapenv:Envelope xmlns:soapenv=""[http://schemas.xmlsoap.org/soap/envelope/]"" xmlns:tss=""[http://axpo.ch/emis/v1/TimeseriesService]"">
       <soapenv:Header>
        <tss:sourceSystem>MySourceSystem</tss:sourceSystem>
    </soapenv:Header>
    <soapenv:Body>
           <tss:send>
                 <correlationId>IN1806141130169762894</correlationId>
                 <collectionIdentifier>NA</collectionIdentifier>
                 <timeseriesList>
                     <timeseries>
                         <identifier>1234</identifier>
                         <measurementUnit>MW</measurementUnit>
                         <resolution>PT15M</resolution>
                         <periodList>
                             <interval start=""2018-06-27T22:00:00Z"" quantity=""0.041"" status=""VALID""/>
                             <interval start=""2018-06-28T21:45:00Z"" quantity=""0.036"" status=""VALID""/>
                         </periodList>
                     </timeseries>
                 </timeseriesList>
           </tss:send>
    </soapenv:Body>
</soapenv:Envelope>

Error stack trace:


com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134+
10:27:09,294 WARNING [org.apache.cxf.phase.PhaseInterceptorChain] (default task-118) Application \{http://axpo.ch/emis/v1/TimeseriesService}TimeseriesService#\{http://axpo.ch/emis/v1/TimeseriesService}send has thrown exception, unwinding now: org.apache.cxf.interceptor.Fault: Error during type conversion from type: org.apache.camel.converter.jaxp.XMLStreamReaderInputStream to the required type: javax.xml.stream.XMLStreamReader with value [org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922|mailto:org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922] due +java.lang.NullPointerException+
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.checkFailure(+CxfConsumer.java:344+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.setResponseBack(+CxfConsumer.java:318+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.syncInvoke(+CxfConsumer.java:244+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.invoke(+CxfConsumer.java:162+) [camel-cxf-2.22.0.jar:2.22.0]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(+ServiceInvokerInterceptor.java:59+) [cxf-core-3.2.5.jar:3.2.5]
       at java.util.concurrent.Executors$RunnableAdapter.call(+Executors.java:511+) [rt.jar:1.8.0_144]
      at java.util.concurrent.FutureTask.run(+FutureTask.java:266+) [rt.jar:1.8.0_144]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(+ServiceInvokerInterceptor.java:126+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.workqueue.SynchronousExecutor.execute(+SynchronousExecutor.java:37+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(+ServiceInvokerInterceptor.java:131+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(+PhaseInterceptorChain.java:308+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.ChainInitiationObserver.onMessage(+ChainInitiationObserver.java:121+) [cxf-core-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(+AbstractHTTPDestination.java:267+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invokeDestination(+ServletController.java:234+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invoke(+ServletController.java:208+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.ServletController.invoke(+ServletController.java:160+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(+CXFNonSpringServlet.java:216+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(+AbstractHTTPServlet.java:301+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(+AbstractHTTPServlet.java:220+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at javax.servlet.http.HttpServlet.service(+HttpServlet.java:707+) [jboss-servlet-api_3.1_spec-1.0.0.Final-redhat-1.jar:1.0.0.Final-redhat-1]
      at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(+AbstractHTTPServlet.java:276+) [cxf-rt-transports-http-3.2.5.jar:3.2.5]
       at io.undertow.servlet.handlers.ServletHandler.handleRequest(+ServletHandler.java:74+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(+ServletSecurityRoleHandler.java:62+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.ServletChain$1.handleRequest(+ServletChain.java:65+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(+ServletDispatchingHandler.java:36+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(+SecurityContextAssociationHandler.java:78+)
       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]
       at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(+SSLInformationAssociationHandler.java:131+) [undertow-servlet-1.4.18.SP8-redhat-.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(+ServletAuthenticationCallHandler.java:57+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(+AbstractConfidentialityHandler.java:46+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(+ServletConfidentialityConstraintHandler.java:64+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(+AuthenticationMechanismsHandler.java:60+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(+CachedAuthenticatedSessionHandler.java:77+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(+NotificationReceiverHandler.java:50+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(+AbstractSecurityContextAssociationHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(+JACCContextIdHandler.java:61+)

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(+GlobalRequestControllerHandler.java:68+)

       at io.undertow.server.handlers.PredicateHandler.handleRequest(+PredicateHandler.java:43+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(+ServletInitialHandler.java:292+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.access$100(+ServletInitialHandler.java:81+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$2.call(+ServletInitialHandler.java:138+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$2.call(+ServletInitialHandler.java:135+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(+ServletRequestContextThreadSetupAction.java:48+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(+ContextClassLoaderSetupAction.java:43+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(+SecurityContextThreadSetupAction.java:105+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda{{monospaced text}}$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(+UndertowDeploymentInfoService.java:1501+)

       at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(+ServletInitialHandler.java:272+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler.access$000(+ServletInitialHandler.java:81+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(+ServletInitialHandler.java:104+) [undertow-servlet-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.Connectors.executeRootHandler(+Connectors.java:330+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at io.undertow.server.HttpServerExchange$1.run(+HttpServerExchange.java:812+) [undertow-core-1.4.18.SP8-redhat-1.jar:1.4.18.SP8-redhat-1]

       at java.util.concurrent.ThreadPoolExecutor.runWorker(+ThreadPoolExecutor.java:1149+) [rt.jar:1.8.0_144]

       at java.util.concurrent.ThreadPoolExecutor$Worker.run(+ThreadPoolExecutor.java:624+) [rt.jar:1.8.0_144]

       at java.lang.Thread.run(+Thread.java:748+) [rt.jar:1.8.0_144]

Caused by: +org.apache.camel.TypeConversionException+: Error during type conversion from type: org.apache.camel.converter.jaxp.XMLStreamReaderInputStream to the required type: javax.xml.stream.XMLStreamReader with value [org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922|mailto:org.apache.camel.converter.jaxp.XMLStreamReaderInputStream@9c55922] due +java.lang.NullPointerException+

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(+BaseTypeConverterRegistry.java:667+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:158+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:129+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(+JaxbDataFormat.java:273+) [camel-jaxb-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.UnmarshalProcessor.process(+UnmarshalProcessor.java:69+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.RedeliveryErrorHandler.process(+RedeliveryErrorHandler.java:548+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.CamelInternalProcessor.process(+CamelInternalProcessor.java:201+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.Pipeline.process(+Pipeline.java:138+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.Pipeline.process(+Pipeline.java:101+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.CamelInternalProcessor.process(+CamelInternalProcessor.java:201+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.processor.DelegateAsyncProcessor.process(+DelegateAsyncProcessor.java:97+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.syncInvoke(+CxfConsumer.java:238+) [camel-cxf-2.22.0.jar:2.22.0]

       ... 57 more

Caused by: +org.apache.camel.RuntimeCamelException+: +java.lang.NullPointerException+

       at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(+ObjectHelper.java:1830+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.util.ObjectHelper.invokeMethod(+ObjectHelper.java:1409+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(+InstanceMethodTypeConverter.java:79+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(+BaseTypeConverterRegistry.java:326+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(+BaseTypeConverterRegistry.java:141+) [camel-core-2.22.0.jar:2.22.0]

       ... 67 more

Caused by: +java.lang.NullPointerException+

       at com.ctc.wstx.sw.SimpleNsStreamWriter.writeNamespace(+SimpleNsStreamWriter.java:134+) [woodstox-core-5.0.3.jar:5.0.3]

       at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.ensureBuffering(+XMLStreamReaderInputStream.java:111+) [camel-core-2.22.0.jar:2.22.0]

       at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.read(+XMLStreamReaderInputStream.java:68+) [camel-core-2.22.0.jar:2.22.0]

       at java.io.BufferedInputStream.fill(+BufferedInputStream.java:246+) [rt.jar:1.8.0_144]

       at java.io.BufferedInputStream.read1(+BufferedInputStream.java:286+) [rt.jar:1.8.0_144]

       at java.io.BufferedInputStream.read(+BufferedInputStream.java:345+) [rt.jar:1.8.0_144]

       at com.ctc.wstx.io.StreamBootstrapper.ensureLoaded(+StreamBootstrapper.java:482+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.io.StreamBootstrapper.resolveStreamEncoding(+StreamBootstrapper.java:306+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.io.StreamBootstrapper.bootstrapInput(+StreamBootstrapper.java:167+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.doCreateSR(+WstxInputFactory.java:573+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createSR(+WstxInputFactory.java:633+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createSR(+WstxInputFactory.java:647+) [woodstox-core-5.0.3.jar:5.0.3]

       at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(+WstxInputFactory.java:334+) [woodstox-core-5.0.3.jar:5.0.3]

       at __redirected.__XMLInputFactory.createXMLStreamReader(+__XMLInputFactory.java:139+) [jboss-modules.jar:1.6.4.Final-redhat-1]

       at org.apache.camel.converter.jaxp.StaxConverter.createXMLStreamReader(+StaxConverter.java:170+) [camel-core-2.22.0.jar:2.22.0]

       at sun.reflect.NativeMethodAccessorImpl.invoke0(+Native Method+) [rt.jar:1.8.0_144]

       at sun.reflect.NativeMethodAccessorImpl.invoke(+NativeMethodAccessorImpl.java:62+) [rt.jar:1.8.0_144]

       at sun.reflect.DelegatingMethodAccessorImpl.invoke(+DelegatingMethodAccessorImpl.java:43+) [rt.jar:1.8.0_144]

       at java.lang.reflect.Method.invoke(+Method.java:498+) [rt.jar:1.8.0_144]

       at org.apache.camel.util.ObjectHelper.invokeMethod(+ObjectHelper.java:1405+) [camel-core-2.22.0.jar:2.22.0]
",,davsclaus,githubbot,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 04 08:03:08 UTC 2018,,,,,,,,,,,"0|i3xhzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Aug/18 15:24;davsclaus;Maybe you can try to provide a patch/fix - for example setting that null namespace to an empty string as workaround.

Also if possible an unit test or sample project that is easy to run to reproduce the issue would be good.;;;","31/Aug/18 17:06;ramu11;will look;;;","31/Aug/18 17:24;githubbot;ramu11 opened a new pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503
 
 
   
   CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Aug/18 17:24;githubbot;GitHub user ramu11 opened a pull request:

    https://github.com/apache/camel/pull/2503

    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…

    
    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramu11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2503.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2503
    
----
commit 19df98642031fe4c65b92500657169bff1253f61
Author: Ramu <kkakarla@...>
Date:   2018-08-31T17:20:49Z

    CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStreamWriter

----
;;;","31/Aug/18 17:31;ramu11;NUll check was already handled for 'NamespaceAttribute'

 [XMLStreamReaderInputStream|https://github.com/apache/camel/blob/apache-master/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java#L105-L109]  but was missing for NamespaceURI. 

Now the NamespaceURI also has the Null check done

 ;;;","03/Sep/18 08:24;githubbot;oscerd commented on a change in pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503#discussion_r214609631
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
 ##########
 @@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
 
 Review comment:
   Maybe it would be better to use the ObjectHelper isEmpty method

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Sep/18 09:36;githubbot;ramu11 commented on a change in pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503#discussion_r214629356
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
 ##########
 @@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
 
 Review comment:
   @oscerd  Actually the fix is to check for NULL for Namespace and substitute with empty.
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 07:54;githubbot;davsclaus closed pull request #2503: CAMEL-12758:SOAP request causing null namespace URI in SimpleNsStream…
URL: https://github.com/apache/camel/pull/2503
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
index 9601742dbec..6344d1dcc59 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/jaxp/XMLStreamReaderInputStream.java
@@ -108,7 +108,9 @@ private int ensureBuffering(int size) throws IOException {
                                                   reader.getAttributeValue(i));
                         }
                         for (int i = 0; i < reader.getNamespaceCount(); i++) {
-                            writer.writeNamespace(reader.getNamespacePrefix(i), reader.getNamespaceURI(i));
+                            String namespacePrefix = reader.getNamespacePrefix(i);
+                            String namespaceURI = reader.getNamespaceURI(i);
+                            writer.writeNamespace(namespacePrefix == null ? """" : namespacePrefix, namespaceURI == null ? """" : namespaceURI);
                         }
                         break;
                     case XMLStreamConstants.END_ELEMENT:


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Sep/18 07:54;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2503
;;;","04/Sep/18 08:03;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,
OPTIONS Http request on REST resource returns incorrect content of Allow header,CAMEL-12753,13181328,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/18 12:34,27/Aug/18 14:08,13/Jul/23 08:31,27/Aug/18 14:08,,,,,,,,,,,,,,,,2.23.0,,,,,camel-undertow,,,,,,0,,,,"I have a REST resource which consumes multiple Http methods (for example GET, POST and PUT). If I send OPTIONS request to resource and I expect to receive Allow Http header with this content:
Allow: GET,POST,PUT,OPTIONS
That does not happen because I receive header which contains only two methods one of them is OPTIONS.
Allow: GET,OPTIONS
I have try multiple implementations and only camel-restlet works as I expect. These components contain bug:
camel-undertow
camel-servlet
camel-jetty
camel-netty4-http",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 27 12:59:34 UTC 2018,,,,,,,,,,,"0|i3xgc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Aug/18 12:59;davsclaus;Okay have a fix for camel-undertow. This requires a bit of component specific fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty4 and Restlet components should support SSLContextParameters,CAMEL-12748,13180436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/Aug/18 10:14,31/Jan/19 06:43,13/Jul/23 08:31,22/Aug/18 11:06,,,,,,,,,,,,,,,,2.23.0,,,,,camel-netty4,camel-netty4-http,camel-restlet,,,,0,,,,"Currently we have no way to specify {{SSLContextParameters}} directly on Netty4 or Restlet components, leaving the only option to configure TLS/SSL via global {{SSLContextParameters}} or component specific configuration.",,zregvart,,,,,,,"tveskrna commented on pull request #2737: [CAMEL-12748] Test Restlet component support SSLContextParametr
URL: https://github.com/apache/camel/pull/2737
 
 
   https://issues.apache.org/jira/browse/CAMEL-12748
   
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/19 09:56;githubbot;600","oscerd commented on pull request #2737: [CAMEL-12748] Test Restlet component support SSLContextParametr
URL: https://github.com/apache/camel/pull/2737
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Jan/19 06:43;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-08-22 10:14:08.0,,,,,,,,,,,"0|i3xauf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary reply queues being created with main endpoint autoAck setting,CAMEL-12746,13180237,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Andersons,Andersons,21/Aug/18 15:49,22/Aug/18 10:28,13/Jul/23 08:31,22/Aug/18 10:28,2.20.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-rabbitmq,,,,,,0,rabbitmq,,,"As discussed here:

[http://camel.465427.n5.nabble.com/Camel-with-Rabbitmq-messages-in-temp-reply-queue-not-being-acked-td5822286.html]

When temporary reply queues are used on InOut capable routes with autoAck set to false on the main queue(s) the reply messages keep piling up in the temporary queue in an un-acked state until a consumer restart.

This can be prevented with a change to the TemporaryQueueReplyManager line 139 to always start the consumer of temprary queues with auto acknowledge mode of true.

Changing this:

    private void start() throws IOException {
        tag = channel.basicConsume(getReplyTo(), endpoint.isAutoAck(), this);
    }

To:

    private void start() throws IOException {
        tag = channel.basicConsume(getReplyTo(), *true*, this);
    }

 ",,Andersons,davsclaus,githubbot,,,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 10:28:41 UTC 2018,,,,,,,,,,,"0|i3x9mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Aug/18 07:19;davsclaus;Valdis, is working on a patch via a github PR

You can read here how to contribute
https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","22/Aug/18 08:55;githubbot;valdisa opened a new pull request #2490: Fix for CAMEL-12746 (temp reply queue autoAck)
URL: https://github.com/apache/camel/pull/2490
 
 
   https://issues.apache.org/jira/browse/CAMEL-12746
   
   This is a fix for the above issue of temporary reply queues getting stale un-acked messages. The fix ensures that temp reply queues will be always created with the autoAck setting set to true.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 08:55;githubbot;GitHub user valdisa opened a pull request:

    https://github.com/apache/camel/pull/2490

    Fix for CAMEL-12746 (temp reply queue autoAck)

    https://issues.apache.org/jira/browse/CAMEL-12746
    
    This is a fix for the above issue of temporary reply queues getting stale un-acked messages. The fix ensures that temp reply queues will be always created with the autoAck setting set to true.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdisa/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2490.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2490
    
----
commit 2970725878cae1f1c149ccda49bd17cf3a99ae12
Author: valdisa <valdis.andersons@...>
Date:   2018-08-22T08:37:25Z

    Update TemporaryQueueReplyManager.java

commit 7a505fe2ff381339f5e691ba21f1d132b1025f3a
Author: valdisa <valdis.andersons@...>
Date:   2018-08-22T08:51:36Z

    Merge pull request #1 from valdisa/CAMEL-12746
    
    Update TemporaryQueueReplyManager.java

----
;;;","22/Aug/18 10:26;githubbot;davsclaus closed pull request #2490: Fix for CAMEL-12746 (temp reply queue autoAck)
URL: https://github.com/apache/camel/pull/2490
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
index 842d43e1df7..760cc47455f 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/TemporaryQueueReplyManager.java
@@ -136,7 +136,7 @@ public void handleDelivery(String consumerTag, Envelope envelope,
          * Bind consumer to channel
          */
         private void start() throws IOException {
-            tag = channel.basicConsume(getReplyTo(), endpoint.isAutoAck(), this);
+            tag = channel.basicConsume(getReplyTo(), true, this);
         }
 
         /**


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 10:26;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2490
;;;","22/Aug/18 10:28;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in APT IOHelper,CAMEL-12745,13180215,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Aug/18 13:48,21/Aug/18 13:48,13/Jul/23 08:31,21/Aug/18 13:48,,,,,,,,,,,,,,,,2.23.0,,,,,tooling,,,,,,0,,,,Seems that some use cases pass {{null}} to {{IOHelper::close}}.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-08-21 13:48:19.0,,,,,,,,,,,"0|i3x9hj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet when used as client doesn't use the configured SSL properties,CAMEL-12744,13180207,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,21/Aug/18 13:07,22/Aug/18 09:01,13/Jul/23 08:31,22/Aug/18 09:01,,,,,,,,,,,,,,,,2.23.0,,,,,camel-restlet,,,,,,0,,,,We're missing configuration options needed for the Restlet client to use the configured SSL properties.,,davsclaus,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 07:19:52 UTC 2018,,,,,,,,,,,"0|i3x9fr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Aug/18 07:19;davsclaus;Is this implemented, if so this ticket can ber resolved;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SjmsMessage should set Exchange in copyFrom,CAMEL-12741,13179920,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Aug/18 09:46,22/Aug/18 21:57,13/Jul/23 08:31,22/Aug/18 10:25,,,,,,,,,,,,,,,,2.23.0,,,,,camel-sjms,,,,,,0,,,,When a copy of the {{SjmsMessage}} is created using {{copyFrom(Message)}} the resulting message copy doesn't have the {{Exchange}} set. This prevents the use of {{TypeConverter}} when {{Message:getBody(Class)}} is invoked.,,davsclaus,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 21:57:24 UTC 2018,,,,,,,,,,,"0|i3x7on:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Aug/18 09:51;zregvart;[~davsclaus] I need some help here, it's easy to set the {{Exchange}} in {{SjmsMessage::copyFrom(Message)}}, I'm not sure if this is the right thing to do. Perhaps we should support type conversion in {{Message:getBody(Class, Object)}} if no {{Exchange}} is set on the message and {{CamelContext}} is set i.e. perform type conversion without exchange.;;;","20/Aug/18 09:59;githubbot;zregvart opened a new pull request #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483
 
 
   If we don't copy Exchange in `SjmsMessage::copyFrom` then type conversion doesn't work.
   
   I'm not sure what approach to take for resolving [CAMEL-12741](https://issues.apache.org/jira/browse/CAMEL-12741). 
   
   I've created two commits with two options that could help here, not sure what option (or both?) should we implement.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Aug/18 09:59;githubbot;GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/2483

    CAMEL-12741: type conversion with SjmsMessage

    If we don't copy Exchange in `SjmsMessage::copyFrom` then type conversion doesn't work.
    
    I'm not sure what approach to take for resolving [CAMEL-12741](https://issues.apache.org/jira/browse/CAMEL-12741). 
    
    I've created two commits with two options that could help here, not sure what option (or both?) should we implement.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-12741

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2483.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2483
    
----
commit 8731e90d2ac680a40b90bb21406b688e95c8e5bd
Author: Zoran Regvart <zregvart@...>
Date:   2018-08-20T09:55:18Z

    Option A: set the Exchange of the original message

commit 6ac7c7b3cc4020f17a939d79d86b57d8abcde189
Author: Zoran Regvart <zregvart@...>
Date:   2018-08-20T09:55:39Z

    Option B: support type conversion without Exchange

----
;;;","20/Aug/18 11:16;davsclaus;Do you have an use-case where this happens?

Usually the exchange is set in the configureMessage method in DefaultExchange, so just wonder when you have this situation. We have a few other components that has special message like camel-jms, camel-mail (AFAIR) and a few others, and haven't heard of any issues before.

;;;","20/Aug/18 11:45;zregvart;In Syndesis to help Atlasmap access messages from all processors along the route we create a copy of the Message and store it in a Exchange property. I've workaround it in [Syndesis PR#3406|https://github.com/syndesisio/syndesis/pull/3406] to set the Exchange from the original message if not set, I wonder if this should be done always? I see several places where copy of the message is created via {{copyFrom}} (via {{grep -B 4 -A 4 -r --include='*.java' copyFrom}}), not sure if for all of those the copied message has {{Exchange}} set.;;;","20/Aug/18 13:08;davsclaus;Ah okay, yeah it should potentially have copied over the exchange from the beginning, but we had this behaviour in Camel since its creation. And the EIPs that create sub exchanges are using copy on exchange instead of message etc, so its likely not been an issue at all before this special use-case from atlastmap.

And yeah we could try to fix this in all those copyFrom methods on classes extending DefaultMessage and set the exchange as well, and on its base class too. They dont call super.copyFrom so we need to do it in both places.;;;","20/Aug/18 16:07;davsclaus;Okay so its 4 components and camel-core that needs an adjustment

- camel-core
- camel-jms
- camel-sjms
- camel-mail
- camel-spring-integration;;;","20/Aug/18 16:07;davsclaus;Working on an attempt fix and giving a test of those modules before doing a PR.;;;","20/Aug/18 17:03;githubbot;davsclaus opened a new pull request #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488
 
 
   …hange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Aug/18 17:03;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2488

    CAMEL-12741: The copy method on Message should by default set the exc…

    …hange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12741

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2488.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2488
    
----
commit fe75c444740fe48361c93decfe10ec508d95d566
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-20T17:02:40Z

    CAMEL-12741: The copy method on Message should by default set the exchange on the copied message to the same instance as from the source. If the copied message is re-attached to another exchange it will reset the exchange anyway.

----
;;;","20/Aug/18 17:03;davsclaus;A PR with a proposed implementation
https://github.com/apache/camel/pull/2488;;;","21/Aug/18 13:34;githubbot;davsclaus commented on issue #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488#issuecomment-414675545
 
 
   @zregvart here is a extended PR for this problem, you are welcome to take a look

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 06:49;githubbot;davsclaus commented on issue #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483#issuecomment-414929703
 
 
   This PR has more fixes than these here.
   https://github.com/apache/camel/pull/2488
   
   @zregvart could you take a quick look at that

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 07:23;githubbot;zregvart commented on issue #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483#issuecomment-414937362
 
 
   Closed in favour of #2488

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 07:23;githubbot;zregvart closed pull request #2483: CAMEL-12741: type conversion with SjmsMessage
URL: https://github.com/apache/camel/pull/2483
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java b/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
index a2ae7e73a2a..3307c145820 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java
@@ -94,6 +94,18 @@ public Object getMandatoryBody() throws InvalidPayloadException {
             if (answer != null) {
                 return answer;
             }
+        } else if (camelContext != null) {
+            TypeConverter converter = camelContext.getTypeConverter();
+
+            T answer = converter.convertTo(type, body);
+            if (answer != null) {
+                return answer;
+            }
+
+            answer = converter.tryConvertTo(type, this);
+            if (answer != null) {
+                return answer;
+            }
         }
 
         // not possible to convert
diff --git a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
index d3520346ccb..bdac87e6326 100644
--- a/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
+++ b/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsMessage.java
@@ -101,6 +101,8 @@ public void copyFrom(org.apache.camel.Message that) {
         if (that.hasAttachments()) {
             getAttachmentObjects().putAll(that.getAttachmentObjects());
         }
+
+        setExchange(that.getExchange());
     }
 
     public JmsBinding getBinding() {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 07:23;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2483
;;;","22/Aug/18 10:25;githubbot;davsclaus closed pull request #2488: CAMEL-12741: The copy method on Message should by default set the exc…
URL: https://github.com/apache/camel/pull/2488
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 10:25;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2488
;;;","22/Aug/18 21:57;zregvart;Thanks!;;;",,,,,,,,,,
Olingo4Component creates and ignores HttpAsyncClientBuilder,CAMEL-12740,13179585,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ninckblokje,ninckblokje,17/Aug/18 13:27,20/Aug/18 18:48,13/Jul/23 08:31,20/Aug/18 17:27,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-olingo2,camel-olingo4,,,,,0,,,,"The Olingo4Component will create an instance of HttpAsyncClientBuilder is the provided Olingo4Configuration does not contain one. The new instance of HttpAsyncClientBuilder will be configured with timeout settings, proxy and SSL, but will never be used.

Extract from Olingo4Component.createOlingo4App:
{code:java}
Object clientBuilder = configuration.getHttpAsyncClientBuilder();
if (clientBuilder == null) {
    HttpAsyncClientBuilder asyncClientBuilder = HttpAsyncClientBuilder.create();
    Builder requestConfigBuilder = RequestConfig.custom();
    requestConfigBuilder.setConnectTimeout(configuration.getConnectTimeout());
    requestConfigBuilder.setSocketTimeout(configuration.getSocketTimeout());
    HttpHost proxy = configuration.getProxy();
    if (proxy != null) {
        requestConfigBuilder.setProxy(proxy);
    }

    asyncClientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());
    SSLContextParameters sslContextParameters = configuration.getSslContextParameters();
    if (sslContextParameters == null) {
        sslContextParameters = this.retrieveGlobalSslContextParameters();
    }

    if (sslContextParameters == null) {
        sslContextParameters = new SSLContextParameters();
    }

    try {
        asyncClientBuilder.setSSLContext(sslContextParameters.createSSLContext(this.getCamelContext()));
    } catch (GeneralSecurityException var8) {
        throw ObjectHelper.wrapRuntimeCamelException(var8);
    } catch (IOException var9) {
        throw ObjectHelper.wrapRuntimeCamelException(var9);
    }
}

Olingo4AppImpl olingo4App;
if (clientBuilder != null && !(clientBuilder instanceof HttpAsyncClientBuilder)) {
    olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpClientBuilder)clientBuilder);
} else {
    olingo4App = new Olingo4AppImpl(configuration.getServiceUri(), (HttpAsyncClientBuilder)clientBuilder);
}
{code}
The class Olingo4AppImpl gets a null clientBuilder reference and then instantiates its own:
{code:java}
public Olingo4AppImpl(String serviceUri, HttpAsyncClientBuilder builder) {
    this.odataClient = ODataClientFactory.getClient();
    this.odataReader = this.odataClient.getReader();
    this.odataWriter = this.odataClient.getWriter();
    this.setServiceUri(serviceUri);
    CloseableHttpAsyncClient asyncClient;
    if (builder == null) {
        asyncClient = HttpAsyncClients.createDefault();
    } else {
        asyncClient = builder.build();
    }

    asyncClient.start();
    this.client = asyncClient;
    this.contentType = DEFAULT_CONTENT_TYPE;
}
{code}
Because of this, none of the Olingo4Configuration settings are used and for example connect and socket timeout defaults to -1.",,davsclaus,dmvolod,githubbot,ninckblokje,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 18:48:36 UTC 2018,,,,,,,,,,,"0|i3x5mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Aug/18 13:27;ninckblokje;I am working on a pull request for this issue.;;;","17/Aug/18 13:40;dmvolod;Thanks [~ninckblokje], the camel-olingo2 component need to be fixed too.;;;","20/Aug/18 14:45;githubbot;ninckblokje opened a new pull request #2487: CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…
URL: https://github.com/apache/camel/pull/2487
 
 
   I have changed the Olingo2 and Olingo4 components do use the created HttpAsyncClientBuilder when no builder is specified. In the previous scenario the created HttpAsyncClientBuilder was ignored.
   
   See CAMEL-12740

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Aug/18 14:45;githubbot;GitHub user ninckblokje opened a pull request:

    https://github.com/apache/camel/pull/2487

    CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…

    I have changed the Olingo2 and Olingo4 components do use the created HttpAsyncClientBuilder when no builder is specified. In the previous scenario the created HttpAsyncClientBuilder was ignored.
    
    See CAMEL-12740

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ninckblokje/camel CAMEL-12740

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2487.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2487
    
----
commit 602ba1c50a997b9bad7375a673b36a4fab8dbb4e
Author: ninckblokje <jeroen.ninckblok@...>
Date:   2018-08-19T16:09:21Z

    CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder is specified

----
;;;","20/Aug/18 17:23;githubbot;davsclaus closed pull request #2487: CAMEL-12740: HttpAsyncClientBuilder is now used when no ClientBuilder…
URL: https://github.com/apache/camel/pull/2487
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java b/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
index 4e7973df754..77b9864b078 100644
--- a/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
+++ b/components/camel-olingo2/camel-olingo2-component/src/main/java/org/apache/camel/component/olingo2/Olingo2Component.java
@@ -176,6 +176,8 @@ private Olingo2AppWrapper createOlingo2App(Olingo2Configuration configuration) {
             } catch (IOException e) {
                 throw ObjectHelper.wrapRuntimeCamelException(e);
             }
+
+            clientBuilder = asyncClientBuilder;
         }
 
         Olingo2AppImpl olingo2App;
diff --git a/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java b/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
index 0f17d73ed71..b6a7b442408 100644
--- a/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
+++ b/components/camel-olingo4/camel-olingo4-component/src/main/java/org/apache/camel/component/olingo4/Olingo4Component.java
@@ -162,6 +162,8 @@ private Olingo4AppWrapper createOlingo4App(Olingo4Configuration configuration) {
             } catch (IOException e) {
                 throw ObjectHelper.wrapRuntimeCamelException(e);
             }
+
+            clientBuilder = asyncClientBuilder;
         }
 
         Olingo4AppImpl olingo4App;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","20/Aug/18 17:23;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2487
;;;","20/Aug/18 17:27;davsclaus;Thanks for reporting and the PR;;;","20/Aug/18 18:48;ninckblokje;Thank you for accepting the PR :);;;",,,,,,,,,,,,,,,,,,,,,
TypeConverters are not registered to all contexts,CAMEL-12739,13179534,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fogninid,fogninid,17/Aug/18 08:31,17/Aug/18 09:14,13/Jul/23 08:31,17/Aug/18 09:14,,,,,,,,,,,,,,,,2.23.0,,,,,camel-cdi,,,,,,0,,,,"When using multiple Camel contexts in CDI, auto-discovered TypeConverters are registered only to the first encoutered context.",,davsclaus,fogninid,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 17 09:14:30 UTC 2018,,,,,,,Patch Available,,,,"0|i3x5b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Aug/18 08:38;githubbot;fogninid opened a new pull request #2480: CAMEL-12739: fix camel-cdi multi context type converter registration
URL: https://github.com/apache/camel/pull/2480
 
 
   while loading discovered type converters into the camel context a single instance of `CdiTypeConverterLoader` was used for all context, but the it only loads classes the first time and then caches the results.
   Changed to use one loader per context

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Aug/18 08:38;githubbot;GitHub user fogninid opened a pull request:

    https://github.com/apache/camel/pull/2480

    CAMEL-12739: fix camel-cdi multi context type converter registration

    while loading discovered type converters into the camel context a single instance of `CdiTypeConverterLoader` was used for all context, but the it only loads classes the first time and then caches the results.
    Changed to use one loader per context

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fogninid/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2480.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2480
    
----
commit 89ee831e6bf81f37a9ceb31fe1b872f30e7a0b6e
Author: Daniele Fognini <daniele.fognini@...>
Date:   2018-08-17T07:21:55Z

    CAMEL-12739: fix camel-cdi multi context type converter registration

----
;;;","17/Aug/18 09:14;githubbot;davsclaus closed pull request #2480: CAMEL-12739: fix camel-cdi multi context type converter registration
URL: https://github.com/apache/camel/pull/2480
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
index 1de2d725bb7..e4e4c845a08 100644
--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelExtension.java
@@ -379,9 +379,9 @@ private void afterDeploymentValidation(@Observes AfterDeploymentValidation adv,
         }
 
         // Add type converters to Camel contexts
-        CdiTypeConverterLoader loader = new CdiTypeConverterLoader();
-        for (Class<?> converter : converters) {
-            for (CamelContext context : contexts) {
+        for (CamelContext context : contexts) {
+            CdiTypeConverterLoader loader = new CdiTypeConverterLoader();
+            for (Class<?> converter : converters) {
                 loader.loadConverterMethods(context.getTypeConverterRegistry(), converter);
             }
         }
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java
new file mode 100644
index 00000000000..a0feffcf820
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/FirstCamelContextConvertingRoute.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.bean;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+
+@ContextName(""first"")
+public class FirstCamelContextConvertingRoute extends RouteBuilder {
+
+    @Override
+    public void configure() {
+        from(""direct:inbound"")
+                .setHeader(""context"").constant(""first"")
+                .convertBodyTo(TypeConverterOutput.class)
+                .to(""mock:outbound"");
+    }
+}
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java
new file mode 100644
index 00000000000..4bb9bcc0170
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/bean/SecondCamelContextConvertingRoute.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.bean;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+
+@ContextName(""second"")
+public class SecondCamelContextConvertingRoute extends RouteBuilder {
+
+    @Override
+    public void configure() {
+        from(""direct:inbound"")
+                .setHeader(""context"").constant(""second"")
+                .convertBodyTo(TypeConverterOutput.class)
+                .to(""mock:outbound"");
+    }
+}
diff --git a/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java b/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java
new file mode 100644
index 00000000000..c45770fd500
--- /dev/null
+++ b/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/InjectedTypeConverterMultipleContextsTest.java
@@ -0,0 +1,120 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.cdi.test;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.Converter;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.cdi.CdiCamelExtension;
+import org.apache.camel.cdi.ContextName;
+import org.apache.camel.cdi.Uri;
+import org.apache.camel.cdi.bean.FirstCamelContextConvertingRoute;
+import org.apache.camel.cdi.bean.SecondCamelContextConvertingRoute;
+import org.apache.camel.cdi.pojo.TypeConverterInput;
+import org.apache.camel.cdi.pojo.TypeConverterOutput;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.shrinkwrap.api.Archive;
+import org.jboss.shrinkwrap.api.ShrinkWrap;
+import org.jboss.shrinkwrap.api.asset.EmptyAsset;
+import org.jboss.shrinkwrap.api.spec.JavaArchive;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import javax.enterprise.context.ApplicationScoped;
+import javax.enterprise.inject.Produces;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.camel.cdi.expression.ExchangeExpression.fromCamelContext;
+import static org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
+@RunWith(Arquillian.class)
+public class InjectedTypeConverterMultipleContextsTest {
+
+    @Deployment
+    public static Archive<?> deployment() {
+        return ShrinkWrap.create(JavaArchive.class)
+                // Camel CDI
+                .addPackage(CdiCamelExtension.class.getPackage())
+                // Test class
+                .addClass(FirstCamelContextConvertingRoute.class)
+                .addClass(SecondCamelContextConvertingRoute.class)
+                // Type converter
+                .addClass(InjectedTypeConverter.class)
+                // No need as Camel CDI automatically registers the type converter bean
+                //.addAsManifestResource(new StringAsset(""org.apache.camel.cdi.se.converter""), ArchivePaths.create(""services/org/apache/camel/TypeConverter""))
+                // Bean archive deployment descriptor
+                .addAsManifestResource(EmptyAsset.INSTANCE, ""beans.xml"");
+    }
+
+    @Produces
+    @ContextName(""first"")
+    @ApplicationScoped
+    public CamelContext camelContextFoo() {
+        return new DefaultCamelContext();
+    }
+
+    @Produces
+    @ContextName(""second"")
+    @ApplicationScoped
+    public CamelContext camelContextBar() {
+        return new DefaultCamelContext();
+    }
+
+    @Test
+    public void sendMessageToInboundFirst(@ContextName(""first"") @Uri(""direct:inbound"") ProducerTemplate inbound,
+                                          @ContextName(""first"") @Uri(""mock:outbound"") MockEndpoint outbound) throws InterruptedException {
+        _sendMessageToInbound(inbound, outbound, ""first"");
+    }
+
+    @Test
+    public void sendMessageToInboundSecond(@ContextName(""second"") @Uri(""direct:inbound"") ProducerTemplate inbound,
+                                           @ContextName(""second"") @Uri(""mock:outbound"") MockEndpoint outbound) throws InterruptedException {
+        _sendMessageToInbound(inbound, outbound, ""second"");
+    }
+
+
+    private void _sendMessageToInbound(ProducerTemplate inbound, MockEndpoint outbound, String contextName) throws InterruptedException {
+        outbound.expectedMessageCount(1);
+        outbound.message(0).exchange().matches(fromCamelContext(contextName));
+
+        TypeConverterInput input = new TypeConverterInput();
+        input.setProperty(""test"");
+
+        inbound.sendBody(input);
+
+        assertIsSatisfied(2L, TimeUnit.SECONDS, outbound);
+        assertThat(outbound.getExchanges().get(0).getIn().getBody(TypeConverterOutput.class).getProperty(), is(equalTo(""test"")));
+    }
+
+    @Converter
+    public static final class InjectedTypeConverter {
+        @Converter
+        public TypeConverterOutput convert(TypeConverterInput input) throws Exception {
+            TypeConverterOutput output = new TypeConverterOutput();
+            output.setProperty(input.getProperty());
+            return output;
+        }
+    }
+
+}
+


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Aug/18 09:14;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2480
;;;","17/Aug/18 09:14;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-sftp : stepwise=false is not working on windows,CAMEL-12733,13179051,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,onders,onders,15/Aug/18 11:02,25/Apr/20 06:22,13/Jul/23 08:31,12/Sep/18 07:33,2.22.0,2.22.1,,,,,,,,,,,,,,2.22.2,2.23.0,,,,camel-ftp,,,,,,0,,,,"[ERROR] Failures:
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeNotStepwiseTest.testSftpSimpleConsume(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeNotStepwiseTest)
[ERROR] Run 1: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeNotStepwiseTest>SftpSimpleConsumeTest.testSftpSimpleConsume:47->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveNotStepwiseTest.testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveNotStepwiseTest)
[ERROR] Run 1: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeRecursiveNotStepwiseTest>SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive(org.apache.camel.component.file.remote.sftp.SftpSimpleConsumeRecursiveTest)
[ERROR] Run 1: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 2: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[ERROR] Run 3: SftpSimpleConsumeRecursiveTest.testSftpSimpleConsumeRecursive:46->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <4> but was: <0>
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpUseListFalseTest.testSftpUseListFalse(org.apache.camel.component.file.remote.sftp.SftpUseListFalseTest)
[ERROR] Run 1: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 2: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[ERROR] Run 3: SftpUseListFalseTest.testSftpUseListFalse:44->CamelTestSupport.assertMockEndpointsSatisfied:958 mock://result Received message count. Expected: <1> but was: <0>
[INFO]
[ERROR] Errors:
[ERROR] org.apache.camel.component.file.remote.sftp.SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise(org.apache.camel.component.file.remote.sftp.SftpProducerFileWithPathNoStepwiseTest)
[ERROR] Run 1: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[ERROR] Run 2: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[ERROR] Run 3: SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise:45 » CamelExecution
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleProduce:40 » CamelExecution Exc...
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleSubPathProduce:53 » CamelExecution
[INFO]
[ERROR] org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceNotStepwiseTest)
[ERROR] Run 1: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[ERROR] Run 2: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[ERROR] Run 3: SftpSimpleProduceNotStepwiseTest.testSftpSimpleTwoSubPathProduce:66 » CamelExecution
[INFO]
[INFO]",windows 10,davsclaus,evilball,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14947,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 12 07:34:06 UTC 2018,,,,,,,,,,,"0|i3x2c7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Aug/18 13:33;davsclaus;Anyone with a windows system, able to take a look and have some idea what is the problem?;;;","22/Aug/18 15:32;onders;Debugging through unit test, I was able to see channelsftp.cd method is ending up with invalid file. I am unable to test against real sftp server and windows client.;;;","23/Aug/18 12:10;davsclaus;You can try to change the pathSeparator option to windows / unix etc. I guess its a bit unusual to run a SFTP server on windows, and also the unit tests is using a java library to act as sftp server so its not a real server we test against.;;;","09/Sep/18 22:38;evilball;The problem is in method SftpOperations.buildDirectory(). We save an absolute path, then make cd to directory from route and then make cd to original directory in finally block.

 
{code:java}
  String originalDirectory = getCurrentDirectory();
  ...
  channel.cd(directory);
  ...
  if (originalDirectory != null) {
    changeCurrentDirectory(originalDirectory);
  }
{code}
 

Absolute path in Windows is not started from /, so we ended with cwd equals to originalDirectory + originalDirectory. Actually, we don't need to check if directory exist via cd, we can make it via ls. In this way, the following cd to original directory is unnecessary. I run the tests with this small fix on Windows and they all passed.;;;","10/Sep/18 06:36;onders;welcome to create a PR.;;;","10/Sep/18 10:37;githubbot;evilball opened a new pull request #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515
 
 
   …turn back to original dir later.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Sep/18 10:37;githubbot;GitHub user evilball opened a pull request:

    https://github.com/apache/camel/pull/2515

    CAMEL-12733. Check if directory exists via ls, so we don't need to re…

    …turn back to original dir later.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evilball/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2515.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2515
    
----
commit a3bc7af5fcff271f90d38b5aede7bebb02223f49
Author: evilball <evilball88@...>
Date:   2018-09-09T23:09:48Z

    CAMEL-12733. Check if directory exists via ls, so we don't need to return back to original dir later.

----
;;;","10/Sep/18 21:58;githubbot;onderson commented on issue #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515#issuecomment-420075255
 
 
   All is good on windows.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Sep/18 07:34;githubbot;oscerd commented on issue #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515#issuecomment-420543763
 
 
   Merged on master and camel-2.22.x. Thanks @evilball 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Sep/18 07:34;githubbot;oscerd closed pull request #2515: CAMEL-12733. Check if directory exists via ls, so we don't need to re…
URL: https://github.com/apache/camel/pull/2515
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 265bac8fc91..958210c97f0 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -501,11 +501,10 @@ public synchronized boolean buildDirectory(String directory, boolean absolute) t
         // ignore absolute as all dirs are relative with FTP
         boolean success = false;
 
-        String originalDirectory = getCurrentDirectory();
         try {
             // maybe the full directory already exists
             try {
-                channel.cd(directory);
+                channel.ls(directory);
                 success = true;
             } catch (SftpException e) {
                 // ignore, we could not change directory so try to create it instead
@@ -523,17 +522,9 @@ public synchronized boolean buildDirectory(String directory, boolean absolute) t
                     success = buildDirectoryChunks(directory);
                 }
             }
-        } catch (IOException e) {
-            throw new GenericFileOperationFailedException(""Cannot build directory: "" + directory, e);
-        } catch (SftpException e) {
+        } catch (IOException | SftpException e) {
             throw new GenericFileOperationFailedException(""Cannot build directory: "" + directory, e);
-        } finally {
-            // change back to original directory
-            if (originalDirectory != null) {
-                changeCurrentDirectory(originalDirectory);
-            }
         }
-
         return success;
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Sep/18 07:34;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2515
;;;",,,,,,,,,,,,,,,,,,
Kafka manual commit to file repository doesn't work properly (using Spring boot),CAMEL-12732,13179049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michael992,michael992,15/Aug/18 10:45,17/Aug/18 07:28,13/Jul/23 08:31,16/Aug/18 13:32,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-kafka,,,,,,0,,,,"I'im trying to save the Kafka offset into FileStateRepository, the offset is correctly writing but it is not reading at route start so camel will read all the topic every time

 
{code:java}
@Component
public class Route extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from(kafka())
                .to(""log:TEST?level=INFO"")
                .process(Route::commitKafka);
    }

    private String kafka() {

        String kafkaEndpoint = ""kafka:"";

        kafkaEndpoint += ""topictest"";
        kafkaEndpoint += ""?brokers="";
        kafkaEndpoint += ""localhost:9092"";
        kafkaEndpoint += ""&groupId="";
        kafkaEndpoint += ""TEST"";
        kafkaEndpoint += ""&autoOffsetReset="";
        kafkaEndpoint += ""earliest"";
        kafkaEndpoint += ""&autoCommitEnable="";
        kafkaEndpoint += false;
        kafkaEndpoint += ""&allowManualCommit="";
        kafkaEndpoint += true;
        kafkaEndpoint += ""&offsetRepository="";
        kafkaEndpoint += ""#fileStore"";

        return kafkaEndpoint;
    }

    @Bean(name = ""fileStore"")
    private FileStateRepository fileStateRepository() {
        FileStateRepository fileStateRepository = FileStateRepository.fileStateRepository(new File(""/kafka/offset_repo/repo.dat""));

        // This will be empty
        // System.out.println(fileStateRepository.getCache());
        return fileStateRepository;
    }

    private static void commitKafka(Exchange exchange) {

        KafkaManualCommit manual = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
        manual.commitSync();
    }
}

{code}
 ","Spring boot

kafka_2.11-1.1.0",davsclaus,dmvolod,githubbot,michael992,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12525,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 16 15:28:07 UTC 2018,,,,,,,,,,,"0|i3x2br:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Aug/18 10:54;michael992;There is a second point even if i don't do the manual commit
{code:java}
.process(Route::commitKafka){code}
camel will write into the repo file this is not supposed to happen i think.;;;","15/Aug/18 11:22;michael992;I finally found a solution for the first post i need to do this to start the repo with Spring
{code:java}
try {
    fileStateRepository.start();
} catch (Exception e) {
    e.printStackTrace();
}
{code}
But it does'nt appear in the documentation.

 ;;;","15/Aug/18 11:50;dmvolod;[~michael992], you are welcome to add this info to the camel-kafka docs, but usually you can get more use cases from the unit-test, like FileStateRepositoryTest.java and others.;;;","15/Aug/18 11:59;michael992;[~dmvolod], Done for the documentation, still have a bug with the autocommit even when i set autocommit to false the offset is still immediatly writing to the file and when i call to the commitSync() method it will be written again.;;;","15/Aug/18 12:06;dmvolod;[~michael992] could you please to create a simple JUnit test against your local Kafka server?;;;","15/Aug/18 13:56;michael992; 
{code:java}
import java.io.File;
import java.io.IOException;
import java.util.Properties;

import org.apache.camel.CamelContext;
import org.apache.camel.Endpoint;
import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.kafka.KafkaConstants;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.FileStateRepository;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RouteTest extends CamelTestSupport {
    public static final String TOPIC = ""some_topic"";
    public static final String TOPIC_PARTITION = TOPIC + ""/0"";
    public static final String BROKER = ""localhost:9092"";

    @EndpointInject(uri = ""kafka:"" + TOPIC
            + ""?brokers="" + BROKER + ""&groupId=group1&autoCommitEnable=false&allowManualCommit=true&offsetRepository=#offset&autoOffsetReset=earliest"")
    private Endpoint from;

    @EndpointInject(uri = ""mock:result"")
    private MockEndpoint to;

    private org.apache.kafka.clients.producer.KafkaProducer<String, String> producer;

    private FileStateRepository fileStateRepository;

    @Override
    protected void doPreSetup() throws Exception {
        fileStateRepository = new FileStateRepository();
        fileStateRepository.setFileStore(
                new File(getClass().getClassLoader().getResource(""repo.dat"").getPath())
        );
        fileStateRepository.start();
    }

    @Before
    public void before() {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_SERIALIZER);
        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, KafkaConstants.KAFKA_DEFAULT_PARTITIONER);
        props.put(ProducerConfig.ACKS_CONFIG, ""1"");
        producer = new org.apache.kafka.clients.producer.KafkaProducer<>(props);
    }

    @After
    public void after() {
        if (producer != null) {
            producer.close();
        }
    }

    @Override
    protected CamelContext createCamelContext() throws Exception {
        JndiRegistry registry = super.createRegistry();
        registry.bind(""offset"", fileStateRepository);

        DefaultCamelContext defaultCamelContext = new DefaultCamelContext(registry);
        return defaultCamelContext;
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(from).id(""foo"")
                        .to(to);
            }
        };
    }

    @Test
    public void autocommitDisabled() throws InterruptedException, IOException {
        int n = 1;
        to.expectedMessageCount(n);
        // The LAST_RECORD_BEFORE_COMMIT header should include a value as we use manual commit
        to.allMessages().header(KafkaConstants.LAST_RECORD_BEFORE_COMMIT).isNotNull();

        for (int k = 0; k < n; k++) {
            String msg = ""message"";
            ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, ""KAFKA_KEY_"" + k, msg);
            producer.send(data);
        }

        to.assertIsSatisfied(500);

        assertEquals(""Since no commit its performed the state should not change"", ""1"", fileStateRepository.getState(TOPIC_PARTITION));
    }
}

{code}
here the content of repo.dat in test/resources

 

some_topic/0=1

 ;;;","15/Aug/18 17:41;githubbot;mikadev opened a new pull request #2475: CAMEL-12732 Take into account autoCommitEnable
URL: https://github.com/apache/camel/pull/2475
 
 
   Check if autocommit is enabled before setting the state
   
   (Fix the manual commit for the state)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Aug/18 17:41;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2475

    CAMEL-12732 Take into account autoCommitEnable

    Check if autocommit is enabled before setting the state
    
    (Fix the manual commit for the state)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel patch-3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2475.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2475
    
----
commit 880656f64c35cb3f8cdac09236890917d2a0f2e9
Author: elbaz michael <michaelelbaz@...>
Date:   2018-08-15T17:40:22Z

    CAMEL-12732 Take into account autoCommitEnable
    
    Check if autocommit is enabled before setting the state
    
    (Fix the manual commit for the state)

----
;;;","15/Aug/18 19:25;githubbot;mikadev closed pull request #2475: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2475
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index 5f56270c4ab..5af185f9ffe 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -378,15 +378,19 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                boolean autoCommitEnable = endpoint.getConfiguration().isAutoCommitEnable();
+                Optional<StateRepository<String, String>> offsetRepositoryOptional = Optional.ofNullable(offsetRepository);
+                BiConsumer<TopicPartition, Long> topicPartitionLongBiConsumer = (partition1, partitionLastOffset1) -> consumer.commitSync(Collections.singletonMap(partition1, new OffsetAndMetadata(partitionLastOffset1 + 1)));
+
+                if (autoCommitEnable && offsetRepositoryOptional.isPresent()) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {
                     log.debug(""Forcing commitSync {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
-                    consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)));
-                } else if (endpoint.getConfiguration().isAutoCommitEnable()) {
+                    topicPartitionLongBiConsumer.accept(partition, partitionLastOffset);
+                } else if (autoCommitEnable) {
                     log.debug(""Auto commitSync {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
-                    consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(partitionLastOffset + 1)));
+                    topicPartitionLongBiConsumer.accept(partition, partitionLastOffset);
                 }
             }
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Aug/18 19:25;githubbot;Github user mikadev closed the pull request at:

    https://github.com/apache/camel/pull/2475
;;;","15/Aug/18 21:12;githubbot;mikadev opened a new pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476
 
 
   Check if autocommitstate is enabled before setting the state
   
   (Fix the manual commit for the state)
   
   Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Aug/18 21:12;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2476

    CAMEL-12732 Take into account autoCommitEnable for the state

    Check if autocommitstate is enabled before setting the state
    
    (Fix the manual commit for the state)
    
    Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2476
    
----
commit c3d89a59eb6bd9d78042e7e38972bc9d0ebd3dfc
Author: elbaz michael <elbazmichael92@...>
Date:   2018-08-15T21:02:39Z

    CAMEL-12732 Take into account autoCommitEnable for the state
    
    Check if autocommitstate is enabled before setting the state
    
    (Fix the manual commit for the state)
    
    Warning! if the AutoCommitStateEnable is true and manual.commitSync is called when AllowManualCommit is true the state will be committed twice

----
;;;","16/Aug/18 06:23;githubbot;dmvolod commented on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413438782
 
 
   If some parameters are incompatible you can detect this and raise an exception or waiting.
   Please also add a JUnit test for this option. You can add real test and mark it with @Ignored. I'm planning to add testcontainers option for Kafka component and able to run real test against container is possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 06:23;githubbot;dmvolod edited a comment on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413438782
 
 
   If some parameters are incompatible you can detect this and raise an exception or waiting.
   Please also add a JUnit test for this option. You can add real test and mark it with @Ignored. I'm planning to add testcontainers option for Kafka component and able to run real test against container if possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 07:20;githubbot;davsclaus commented on a change in pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#discussion_r210497745
 
 

 ##########
 File path: components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
 ##########
 @@ -403,6 +405,7 @@ public Properties createConsumerProperties() {
         addPropertyIfNotNull(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, getAutoOffsetReset());
         addPropertyIfNotNull(props, ConsumerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG, getConnectionMaxIdleMs());
         addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitEnable());
+        addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitStateEnable());
 
 Review comment:
   This is wrong where you override the same option

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 07:21;davsclaus;The file repo needs to be started / stopped as you found out.;;;","16/Aug/18 07:35;davsclaus;We can look at making camel-kafka automatic start/stop the repo if needed.;;;","16/Aug/18 08:17;githubbot;davsclaus commented on issue #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476#issuecomment-413464295
 
 
   @mikadev whats the reason for yet another option, can you try to explain a bit more about it? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 08:26;githubbot;mikadev closed pull request #2476: CAMEL-12732 Take into account autoCommitEnable for the state
URL: https://github.com/apache/camel/pull/2476
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/docs/kafka-component.adoc b/components/camel-kafka/src/main/docs/kafka-component.adoc
index 3a8cac53b8a..eef901ee3ea 100644
--- a/components/camel-kafka/src/main/docs/kafka-component.adoc
+++ b/components/camel-kafka/src/main/docs/kafka-component.adoc
@@ -86,6 +86,7 @@ with the following path and query parameters:
 | *autoCommitEnable* (consumer) | If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin. | true | Boolean
 | *autoCommitIntervalMs* (consumer) | The frequency in ms that the consumer offsets are committed to zookeeper. | 5000 | Integer
 | *autoCommitOnStop* (consumer) | Whether to perform an explicit auto commit when the consumer stops to ensure the broker has a commit from the last consumed message. This requires the option autoCommitEnable is turned on. The possible values are: sync, async, or none. And sync is the default value. | sync | String
+| *autoCommitStateEnable* (consumer) | If false this will disable the auto commit of the state. | true | boolean
 | *autoOffsetReset* (consumer) | What to do when there is no initial offset in ZooKeeper or if an offset is out of range: earliest : automatically reset the offset to the earliest offset latest : automatically reset the offset to the latest offset fail: throw exception to the consumer | latest | String
 | *breakOnFirstError* (consumer) | This options controls what happens when a consumer is processing an exchange and it fails. If the option is false then the consumer continues to the next message and processes it. If the option is true then the consumer breaks out, and will seek back to offset of the message that caused a failure, and then re-attempt to process this message. However this can lead to endless processing of the same message if its bound to fail every time, eg a poison message. Therefore its recommended to deal with that for example by using Camel's error handler. | false | boolean
 | *bridgeErrorHandler* (consumer) | Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored. | false | boolean
diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
index e58caee72cc..0425d21f715 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConfiguration.java
@@ -128,6 +128,8 @@
     //Consumer configuration properties
     @UriParam(label = ""consumer"", defaultValue = ""true"")
     private Boolean autoCommitEnable = true;
+    @UriParam(label = ""consumer"", defaultValue = ""true"")
+    private boolean autoCommitStateEnable = true;
     @UriParam(label = ""consumer"")
     private boolean allowManualCommit;
     @UriParam(label = ""consumer"", defaultValue = ""sync"", enums = ""sync,async,none"")
@@ -403,6 +405,7 @@ public Properties createConsumerProperties() {
         addPropertyIfNotNull(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, getAutoOffsetReset());
         addPropertyIfNotNull(props, ConsumerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG, getConnectionMaxIdleMs());
         addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitEnable());
+        addPropertyIfNotNull(props, ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, isAutoCommitStateEnable());
         addPropertyIfNotNull(props, ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, getPartitionAssignor());
         addPropertyIfNotNull(props, ConsumerConfig.RECEIVE_BUFFER_CONFIG, getReceiveBufferBytes());
         addPropertyIfNotNull(props, ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, getConsumerRequestTimeoutMs());
@@ -643,6 +646,17 @@ public void setAutoCommitEnable(Boolean autoCommitEnable) {
         this.autoCommitEnable = autoCommitEnable;
     }
 
+    public boolean isAutoCommitStateEnable() {
+        return autoCommitStateEnable;
+    }
+
+    /**
+     * If false this will disable the autocommit of the state
+     */
+    public void setAutoCommitStateEnable(boolean autoCommitStateEnable) {
+        this.autoCommitStateEnable = autoCommitStateEnable;
+    }
+
     public boolean isAllowManualCommit() {
         return allowManualCommit;
     }
diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index 5f56270c4ab..f6596daf3da 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -378,7 +378,7 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                if (endpoint.getConfiguration().isAutoCommitStateEnable() && offsetRepository != null) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 08:26;githubbot;Github user mikadev closed the pull request at:

    https://github.com/apache/camel/pull/2476
;;;","16/Aug/18 08:56;michael992;[~davsclaus] 'We can look at making camel-kafka automatic start/stop the repo if needed.' Yeah good idea;;;","16/Aug/18 10:52;githubbot;mikadev opened a new pull request #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478
 
 
   Check  isAllowManualCommit before setting the state
   
   (Fix the manual commit for the state)
   
   Sorry for my previous pull request i think now is the right solution without adding parameters to the component.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 10:52;githubbot;GitHub user mikadev opened a pull request:

    https://github.com/apache/camel/pull/2478

    CAMEL-12732 Take into account isAllowManualCommit

    Check  isAllowManualCommit before setting the state
    
    (Fix the manual commit for the state)
    
    Sorry for my previous pull request i think now is the right solution without adding parameters to the component.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikadev/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2478.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2478
    
----
commit c540332c5e0711d1533632f47ca5a302ec728583
Author: elbaz michael <michaelelbaz@...>
Date:   2018-08-16T10:51:07Z

    CAMEL-12732 Take into account isAllowManualCommit
    
    Check  isAllowManualCommit before setting the state
    
    (Fix the manual commit for the state)

----
;;;","16/Aug/18 13:28;githubbot;davsclaus closed pull request #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
index e6913f3c698..df3b4b5769f 100644
--- a/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
+++ b/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
@@ -399,7 +399,7 @@ protected boolean doRun() {
 
         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {
             if (partitionLastOffset != -1) {
-                if (offsetRepository != null) {
+                if (!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null) {
                     log.debug(""Saving offset repository state {} from topic {} with offset: {}"", threadId, topicName, partitionLastOffset);
                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));
                 } else if (forceCommit) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 13:28;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2478
;;;","16/Aug/18 13:32;davsclaus;Okay the manual commit fix for commitOffset has been backported, thanks for the PR.;;;","16/Aug/18 13:33;davsclaus;The auto startup of the offset repo has been introduced from Camel 2.23 onwards.;;;","16/Aug/18 15:02;githubbot;mikadev commented on issue #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478#issuecomment-413577033
 
 
   Thanks when it will be deployed on mvn repo ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/18 15:28;githubbot;davsclaus commented on issue #2478: CAMEL-12732 Take into account isAllowManualCommit
URL: https://github.com/apache/camel/pull/2478#issuecomment-413585763
 
 
   You mean a new release, then it take a bit we have new set of patch releases planned for Q3, you can find details in ASF JIRA.
   
   For SNAPSHOT then they are usually build overnight

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;"
Configured SSL Context on Undertow component not honored by camel-rest-swagger,CAMEL-12728,13178744,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,chirino,chirino,14/Aug/18 01:30,22/Aug/18 12:30,13/Jul/23 08:31,22/Aug/18 11:06,2.22.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-rest-swagger,,,,,,0,,,,"Say you have:
{code:java}
    <camel:sslContextParameters id=""sslContextParameters"">
        <camel:trustManagers>
            <camel:keyStore password=""redhat123"" type=""JKS"" ... />
        </camel:trustManagers>
    </camel:sslContextParameters>

.. and ..

    <bean id=""myundertow"" class=""org.apache.camel.component.undertow.UndertowComponent"">
        <property name=""sslContextParameters"" value=""#{sslContextParameters}""/>
    </bean>


.. and ..

    <to id=""_to1"" pattern=""InOut"" uri=""rest-swagger:swagger.json#getMembersList?basePath=/membersweb/rest/v2&amp;componentName=myundertow&amp;host=https://myapp.demolab.local:443”/>{code}

It will fail with

{code}
java.io.IOException: UT000065: SSL must be specified to connect to a https URL
	at io.undertow.client.http.HttpClientProvider.connect(HttpClientProvider.java:72)
	at io.undertow.client.http.HttpClientProvider.connect(HttpClientProvider.java:60)
	at io.undertow.client.UndertowClient.connect(UndertowClient.java:133)
	at org.apache.camel.component.undertow.UndertowProducer.process(UndertowProducer.java:165)
	at org.apache.camel.component.rest.RestProducer.process(RestProducer.java:86)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:197)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:79)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)
{code}",,j_ri,ramu11,tmielke,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 22 12:30:44 UTC 2018,,,,,,,,,,,"0|i3x0fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Aug/18 01:31;chirino;I took a peek and this seems smelly:
https://github.com/apache/camel/blob/master/components/camel-rest-swagger/src/main/java/org/apache/camel/component/rest/swagger/RestSwaggerEndpoint.java#L282
 
We create the endpoint and configure it there (skip starting the endpoint) and then create a Producer.  The configured SSLContext is created in the UndertowEndpoint doStart method:
 
https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java#L393
 ;;;","14/Aug/18 05:50;zregvart;I can take a look at this one.;;;","15/Aug/18 14:03;zregvart;[~chirino] naah, Undertow component implements the {{org.apache.camel.spi.RestProducerFactory}} contract, so it needs and does start the UndertowEndpoint in {{UndertowComponent::createProducer}}. I'll work on a test to see if this is something that we need to address in the {{camel-rest-swagger} or in {{camel-undertow}}.;;;","22/Aug/18 11:06;zregvart;Addressed this in three ways: added Camel's standard SSLContextParameters and useGlobalSSLContextParameters properties to {{camel-rest-swagger}}, modified supported delegate components to support SSLContextParameters where lacking, made sure that the configured properties on {{camel-rest-swagger}} are passed to the delegate component in case the component will be created as a side effect of the endpoint being created.

We now have tests that assert both globally configured and per component provided configurations.;;;","22/Aug/18 12:30;chirino;Fantastic! Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,
java.util.ConcurrentModificationException at org.apache.camel.impl.DefaultExchange.createProperties(DefaultExchange.java:550) in 2.20.1,CAMEL-12727,13178648,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,boutblock,boutblock,13/Aug/18 17:23,27/Aug/18 11:58,13/Jul/23 08:31,27/Aug/18 11:58,2.20.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-core,,,,,,0,,,,"A concurrent access exception occurs during our load tests while consuming messages from a rabbitmq queue.

The call stack embedded below shows that the issue is related to an ""optimization"" which was introduced in https://issues.apache.org/jira/browse/CAMEL-11330 to replace a ConcurrentHashMap with a regular one from version 2.19.5 to 2.20.0 onward.

The faulty code is still present in latest 2.22.0.

 

 ","Camel 2.20.1.

The exception occurs within a aggregation processor using a custom aggregation strategy and optimistic locking.",boutblock,davsclaus,dmvolod,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11330,,,,,,,"13/Aug/18 17:16;boutblock;dih-error.queue_2 (1).txt;https://issues.apache.org/jira/secure/attachment/12935407/dih-error.queue_2+%281%29.txt",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 27 11:58:45 UTC 2018,,,,,,,,,,,"0|i3wzun:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"14/Aug/18 08:16;dmvolod;[~boutblock], could you please provide a reproducer as simple as possible.;;;","14/Aug/18 08:45;davsclaus;Optimistick locking implies concurrent access and is not always safe to be used. We may need to do a synchronization point in the aggregator at a certain point;;;","14/Aug/18 08:50;boutblock;Hi, 

I'm sorry this cannot be easily reproduced with a simple unit test as it only occurs under heavy workload on our perf platform of test.

The route looks like this:

from(auditQueueProperties.getAuditQueueUri()) // rabbitmq queue
 .routeId(ROUTE_NAME)
 .autoStartup(true)
 .split().method(batchUnfoldPlugin) // extract individual xml audit messages from the input batch
 .aggregate(simple(""${header."" + AUDIT_TYPE + ""}""), aggregationStrategy) // aggregate the audit messages by appending them directly into files on disk, spread by type
 .optimisticLocking() // as exclusive pessimistic locking is directly managed by the file system for each individual file instead of a less efficient global lock.
 .completionSize(stagingAreaProperties.getCompletionSize())
 .completionInterval(stagingAreaProperties.getCompletionInterval())
 // copy each completed file to another location
 .process(ex -> stagingArea.push(ex.getIn().getHeader(TRANSACTION_TYPE).toString(), ex.getIn().getHeader(AUDIT_DATA_PATH).toString(), ex.getIn().getBody()))
 .end();

The custom aggregation strategy implements CompletionAwareAggregationStrategy and TimeoutAwareAggregationStrategy to save each incoming message by appending it to the correct file by type, date etc... protected by a FileLock and retries on OverlappingFileLockException.

We are currently in the process to downgrade from our current version 2.20.1 to version 2.19.5 to validate our assumption on the issue but we are facing other incompatibility problems doing so that needs to be fixed/circumvented.;;;","14/Aug/18 09:02;boutblock;You are certainly right as the lines of code where the exception occurs depends on tests on optimisticLocking and  aggregationRepository being in-memory (AggregateProcessor.java line 398 in 2.20.1):

// hack to support legacy AggregationStrategy's that modify and return the oldExchange, these will not
// working when using an identify based approach for optimistic locking like the MemoryAggregationRepository.
if (optimisticLocking && aggregationRepository instanceof MemoryAggregationRepository) {
 oldExchange = originalExchange.copy();
}

Please note that we did  not choose to follow the repository pattern to save each individual message to disk but we chose to directly save them in the aggregation strategy class we provided.

Actually, the default MemoryAggregationRepository is of no use in our use case and shall may be replaced by our own 'null repository' to not put pressure on the garbage collector for nothing. This may also workaround the issue as the conditional test would be false and the exchange would not be copied and would not crash.;;;","14/Aug/18 09:48;boutblock;So. I added a custom 'NullAggregationRepository' to my route which is a copy of the original MemoryAggregationRepository to avoid the internal copy of the exchange. I will unfortunately only have a result when our perf platform is ready to upgrade.

I'll give back more information ASAP.

Note that I couldn't avoid the in-memory cache of the exchanges in the repository without breaking the internal logic of the aggregator.;;;","15/Aug/18 12:23;davsclaus;Thanks, when you have feedback then provide it here for us;;;","15/Aug/18 12:40;davsclaus;We could synchronize that hack
{code}
                // need to synchronize this to avoid concurrency issue
                synchronized (this) {
                    oldExchange = originalExchange.copy();
                }
{code}

We could also consider going back to ConcurrentHashMap. The implementation in newer JVMs are much better now.;;;","22/Aug/18 14:05;davsclaus;Any feedback [~boutblock];;;","22/Aug/18 14:46;boutblock;No definitive results yet from our full perf platform. However, from our CI smaller stress test, after having integrated our own  aggregation repository bypassing the hack and therefore the copy, no more exception occurred for now. Which sounds good.

Now, IMHO, re-introducing the ConcurrentHashMap is the proper and safer solution. However, adding the lock within the hack only has less impacts on performances. Q: is this hack really still useful ?;;;","27/Aug/18 09:04;davsclaus;Yeah the hack would be needed as the locking is optimistick and therefore concurrent access on the copy method. But as you say the concurrent hash map smells like the better option and it was also what was used in the past.;;;","27/Aug/18 11:58;davsclaus;Okay going back to ConcurrentMap so its safe as it was in Camel 2.19.x and older.;;;",,,,,,,,,,,,,,,,,,
FindBugs warnings: Invocation of toString on an array,CAMEL-12726,13178408,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,hiroakiyoshida,hiroakiyoshida,11/Aug/18 01:30,11/Aug/18 17:21,13/Jul/23 08:31,11/Aug/18 17:20,,,,,,,,,,,,,,,,2.23.0,,,,,camel-box,camel-core,camel-jsch,,,,0,,,,"FindBugs-3.0.1 ([http://findbugs.sourceforge.net/]) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
{code:java}
H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
{code}
The description of the bug is as follows:
{quote}*USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)*
 The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
 [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY]
{quote}",,aldettinger,githubbot,hiroakiyoshida,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 11 17:20:12 UTC 2018,,,,,,,Patch Available,,,,"0|i3wydj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Aug/18 01:44;githubbot;hiroakiy opened a new pull request #2467: CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array
URL: https://github.com/apache/camel/pull/2467
 
 
   FindBugs-3.0.1 ([http://findbugs.sourceforge.net/](http://findbugs.sourceforge.net/)) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
   ```
   H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
   H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
   M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
   M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
   ```
   The description of the bug is as follows:
   > USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)
   >  The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
    [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY](http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Aug/18 01:44;githubbot;GitHub user hiroakiy opened a pull request:

    https://github.com/apache/camel/pull/2467

    CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array

    FindBugs-3.0.1 ([http://findbugs.sourceforge.net/](http://findbugs.sourceforge.net/)) reported 4 DMI_INVOKING_TOSTRING_ON_ARRAY warnings on master:
    ```
    H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemoveHeadersProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveHeaders(CamelContext, RemoveHeadersProcessor, ProcessorDefinition)  At ManagedRemoveHeaders.java:[line 37]
    H C USELESS_STRING: Invocation of toString on org.apache.camel.processor.RemovePropertiesProcessor.getExcludePattern() in new org.apache.camel.management.mbean.ManagedRemoveProperties(CamelContext, RemovePropertiesProcessor, ProcessorDefinition)  At ManagedRemoveProperties.java:[line 37]
    M C USELESS_STRING: Invocation of toString on ScpConfiguration.getPrivateKeyBytes() in org.apache.camel.component.scp.ScpOperations.createSession(ScpConfiguration)  At ScpOperations.java:[line 262]
    M C USELESS_STRING: Invocation of toString on path in org.apache.camel.component.box.api.BoxFoldersManager.createFolder(String, String[])  At BoxFoldersManager.java:[line 204]
    ```
    The description of the bug is as follows:
    > USELESS_STRING: Invocation of toString on an array (DMI_INVOKING_TOSTRING_ON_ARRAY)
    >  The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
     [http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY](http://findbugs.sourceforge.net/bugDescriptions.html#DMI_INVOKING_TOSTRING_ON_ARRAY)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hiroakiy/camel CAMEL-12726

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2467.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2467
    
----
commit 28627fe3301f8e5854194c92bdf4d961996d6e92
Author: Hiroaki Yoshida <hyoshida@...>
Date:   2018-08-11T01:33:09Z

    CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array

----
;;;","11/Aug/18 17:16;githubbot;aldettinger closed pull request #2467: CAMEL-12726: Fix FindBugs warnings: Invocation of toString on an array
URL: https://github.com/apache/camel/pull/2467
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
index 723e4d71703..ae5d333ebae 100644
--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveHeaders.java
@@ -16,6 +16,8 @@
  */
 package org.apache.camel.management.mbean;
 
+import java.util.Arrays;
+
 import org.apache.camel.CamelContext;
 import org.apache.camel.api.management.ManagedResource;
 import org.apache.camel.api.management.mbean.ManagedRemoveHeadersMBean;
@@ -34,7 +36,7 @@ public ManagedRemoveHeaders(CamelContext context, RemoveHeadersProcessor process
         super(context, processor, definition);
         this.processor = processor;
         if (processor.getExcludePattern() != null) {
-            exclude = processor.getExcludePattern().toString();
+            exclude = Arrays.toString(processor.getExcludePattern());
         } else {
             exclude = null;
         }
diff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
index f01a0a856a7..f843b77efba 100644
--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRemoveProperties.java
@@ -16,6 +16,8 @@
  */
 package org.apache.camel.management.mbean;
 
+import java.util.Arrays;
+
 import org.apache.camel.CamelContext;
 import org.apache.camel.api.management.ManagedResource;
 import org.apache.camel.api.management.mbean.ManagedRemovePropertiesMBean;
@@ -34,7 +36,7 @@ public ManagedRemoveProperties(CamelContext context, RemovePropertiesProcessor p
         super(context, processor, definition);
         this.processor = processor;
         if (processor.getExcludePattern() != null) {
-            exclude = processor.getExcludePattern().toString();
+            exclude = Arrays.toString(processor.getExcludePattern());
         } else {
             exclude = null;
         }
diff --git a/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java b/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
index 1fe7d99f993..eb2ed554505 100644
--- a/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
+++ b/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxFoldersManager.java
@@ -201,7 +201,7 @@ public BoxFolder createFolder(String parentFolderId, String folderName) {
      */
     public BoxFolder createFolder(String parentFolderId, String... path) {
         try {
-            LOG.debug(""Creating folder with path '"" + path + ""' in parent_folder(id="" + parentFolderId + "")"");
+            LOG.debug(""Creating folder with path '"" + Arrays.toString(path) + ""' in parent_folder(id="" + parentFolderId + "")"");
             if (parentFolderId == null) {
                 throw new IllegalArgumentException(""Parameter 'parentFolderId' can not be null"");
             }
diff --git a/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java b/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
index d0efd1487eb..a9ea3008cb1 100644
--- a/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
+++ b/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.Arrays;
 import java.util.Hashtable;
 import java.util.List;
 
@@ -259,7 +260,7 @@ private Session createSession(ScpConfiguration config) {
                 try {
                     jsch.addIdentity(""camel-jsch"", data, null, pkfp != null ? pkfp.getBytes() : null);
                 } catch (Exception e) {
-                    throw new GenericFileOperationFailedException(""Cannot load private key bytes: "" + config.getPrivateKeyBytes(), e);
+                    throw new GenericFileOperationFailedException(""Cannot load private key bytes: "" + Arrays.toString(config.getPrivateKeyBytes()), e);
                 }                
             }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Aug/18 17:16;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2467
;;;","11/Aug/18 17:20;aldettinger;Merged on master. Could arguably be a candidate to be back-ported in older branches (mainly the mbean part). Please re-open if needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,
"[ERROR] /sobject-pojo-optional.vm: Encountered ""("" at line 64, column 8.",CAMEL-12725,13178207,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,zregvart,tinusaan,tinusaan,10/Aug/18 07:37,10/Aug/18 08:45,13/Jul/23 08:31,10/Aug/18 08:45,2.21.0,2.21.1,2.21.2,2.22.0,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-salesforce,,,,,,0,,,,"When using ""optionals"" in the camel-salesforce-maven-plugin it will throw an error like the following:

{{[INFO] Generating Java Classes...}}
{{[ERROR] /sobject-pojo-optional.vm: Encountered ""("" at line 64, column 8.}}
{{Was expecting one of:}}
{{ <WHITESPACE> ...}}
{{ <NEWLINE> ...}}
{{ <IDENTIFIER> ...}}
{{ ""{"" ...}}

{{[ERROR] ResourceManager: parse exception: Encountered ""("" at /sobject-pojo-optional.vm[line 64, column 8]}}
{{Was expecting one of:}}
{{ <WHITESPACE> ...}}
{{ <NEWLINE> ...}}
{{ <IDENTIFIER> ...}}
{{ ""{"" ...}}

 

This is caused by a change in [https://github.com/apache/camel/commit/2a4038c66ddc86d081e96a69eb9200f9ff498fb4#diff-ecf95a5795fc049a5d3c45ffcaf5ef00] which sets the following line:

#set ( ($fieldType = $utility.getFieldType($desc, $field)) && ($fieldType) )

 ",,githubbot,tinusaan,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 10 08:45:18 UTC 2018,,,,,,,,,,,"0|i3wx4v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/18 07:37;githubbot;tinusn opened a new pull request #2464: CAMEL-12725: [ERROR] /sobject-pojo-optional.vm
URL: https://github.com/apache/camel/pull/2464
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Aug/18 07:37;githubbot;GitHub user tinusn opened a pull request:

    https://github.com/apache/camel/pull/2464

    CAMEL-12725: [ERROR] /sobject-pojo-optional.vm

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tinusn/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2464.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2464
    
----
commit b0652d9707cbd4696d31467b258c2bd61f784980
Author: Tinus Aamand Norstved <tinus@...>
Date:   2018-08-10T07:13:05Z

    Update sobject-pojo-optional.vm
    
    Fixed error in setting the $fieldType - the syntax in the template document throws the  following error upon running:
    
    [ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0:generate (executable pom) on project test-project: Execution executable pom of goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.21.0:generate failed: Encountered ""("" at /sobject-pojo-optional.vm[line 64, column 8]
    [ERROR] Was expecting one of:
    [ERROR]     <WHITESPACE> ...
    [ERROR]     <NEWLINE> ...
    [ERROR]     <IDENTIFIER> ...
    [ERROR]     ""{"" ...
    
    
    This change fixes that.

commit 3aa87a7d67332139e69085881d55c7914a7b8efd
Author: Tinus Aamand Norstved <tinus@...>
Date:   2018-08-10T07:30:00Z

    Merge pull request #1 from tinusn/tinusn-patch-1
    
    Update sobject-pojo-optional.vm

----
;;;","10/Aug/18 07:37;tinusaan;Created a pull request at github: [https://github.com/apache/camel/pull/2464];;;","10/Aug/18 07:45;githubbot;zregvart closed pull request #2464: CAMEL-12725: [ERROR] /sobject-pojo-optional.vm
URL: https://github.com/apache/camel/pull/2464
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
index 3caea042b82..55d9ce16255 100644
--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm
@@ -61,7 +61,7 @@ import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 public class ${desc.Name}Optional extends AbstractSObjectBase {
 
 #foreach ( $field in $desc.Fields )
-#set ( ($fieldType = $utility.getFieldType($desc, $field)) && ($fieldType) )
+#set ( $fieldType = $utility.getFieldType($desc, $field) )
 #if ( $utility.notBaseField($field.Name) )
 #set ( $fieldName = $field.Name )
 #set ( $isMultiSelectPicklist = $utility.isMultiSelectPicklist($field) )


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Aug/18 07:45;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2464
;;;","10/Aug/18 08:45;zregvart;Thanks for the pull request!;;;",,,,,,,,,,,,,,,,,,,,,,,
Simple SFTP-to-File integration with charset options fails,CAMEL-12724,13178204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,10/Aug/18 07:21,25/Aug/21 10:34,13/Jul/23 08:31,10/Aug/18 07:46,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,camel-ftp,,,,,0,,,,"Simple SFTP-to-File integrations with {{charset}} conversion like:
{code:java}
from(""sftp://sample@localhost:2222/in?password=password&delete=true&charset=ISO-8859-1"")
    .to(""file:/tmp/samples-camel/SftpToFileTest/out?charset=UTF-8"");
{code}
fails to output a file in {{/tmp/samples-camel/SftpToFileTest/out/}} correctly. Depending on the combinations, it sometimes converts the charset wrongly and sometimes it simply doesn't output a file to the target dir.

The root cause is that {{SftpOperations}} puts {{ByteArrayOutputStream}} instead of {{byte[]}} or {{InputStream}} to the exchange file body when retrieving a file:
https://github.com/apache/camel/blob/camel-2.22.0/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java#L718-L720
which then results in no converter from {{OutputStream}} to {{java.io.Reader}} being found in {{GenericFileConverter}} downstream, and thus the File producer handles a {{RemoteFile}} awkwardly when outputting a file.",,acosentino,cgiera,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Aug/18 07:26;tadayosi;SftpToFileTest.zip;https://issues.apache.org/jira/secure/attachment/12935091/SftpToFileTest.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 25 10:34:19 UTC 2021,,,,,,,,,,,"0|i3wx47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/18 07:31;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2463
;;;","25/Aug/21 09:49;cgiera;Is it possible to downgrade it to 2.20.x too?;;;","25/Aug/21 09:53;acosentino;No, because there won't be a new 2.20.x release;;;","25/Aug/21 10:34;cgiera;:(;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Krati implementation does not work properly persistence after put operation.,CAMEL-12720,13177920,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,vcibulka,vcibulka,09/Aug/18 09:30,14/Aug/18 08:39,13/Jul/23 08:31,14/Aug/18 08:35,,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-krati,,,,,,0,,,,"In KratiProducer class 

} else {
           Object value = getValue(exchange);
           //Its required to have only one thread putting stuff there at any given time per store.
            synchronized (endpoint.getPath().intern()) {
            dataStore.put(key, value);

            {color:#FF0000}dataStore.persist();  {color:#d04437}// Here should be this{color}{color}
           }
 }",,davsclaus,dmvolod,vcibulka,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 08:39:20 UTC 2018,,,,,,,,,,,"0|i3wvd3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Aug/18 07:04;dmvolod;[~vcibulka], you are welcome to provide a fix and fix/add JUnit test.

However, Krati is not updated for more than 5 years and we need to understand is this component still actual or not.

[~davsclaus], [~ancosen] what do you think about this component deprecation?;;;","10/Aug/18 07:25;davsclaus;Yes its deprecated. But if we can fix bugs in it then that is okay also.;;;","14/Aug/18 08:39;dmvolod;[~vcibulka] Thanks for fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
relative paths can remove scheme from xslt URI,CAMEL-12713,13177335,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pvdbosch,pvdbosch,07/Aug/18 08:58,07/Aug/18 12:07,13/Jul/23 08:31,07/Aug/18 12:07,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,xslt,,,"When using relative paths in an XSLT referenced from another one, the used URI scheme may be ignored.

e.g. in case of an XSLT specified by URI ""classpath:location/master.xsl"",  that includes another one:  <xsl:include href=""../child.xsl""/>

In this case, the URI of child.xsl is resolved as just ""child.xsl"" instead of ""classpath:child.xsl"", omitting the URI scheme.

The cause is XsltUriResolver, in which FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:location"" as a single path part.

I'm creating a pull request which passes the URI without scheme to FileUtil.compactPath().",,davsclaus,githubbot,pvdbosch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Tue Aug 07 12:07:46 UTC 2018,,,,,,,Patch Available,,,,"0|i3wrr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Aug/18 09:05;githubbot;pvdbosch opened a new pull request #2456: CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 
URL: https://github.com/apache/camel/pull/2456
 
 
   fix for CAMEL-12713
   
   FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:directory"" as a single path part. 
   
   This patch passes the URI without its scheme to FileUtil.compactPath() and attaches it again to the result. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Aug/18 09:05;githubbot;GitHub user pvdbosch opened a pull request:

    https://github.com/apache/camel/pull/2456

    CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 

    fix for CAMEL-12713
    
    FileUtil.compactPath() is used to calculate the relative URI, but this call ignores the colon separator and considers ""classpath:directory"" as a single path part. 
    
    This patch passes the URI without its scheme to FileUtil.compactPath() and attaches it again to the result. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kszbcss/camel xslt-resolver-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2456.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2456
    
----
commit 4b957bd345a38a4cadd9e492b0ea7a9325c2a551
Author: pvdbosch <peter.vandenbosch@...>
Date:   2018-08-06T15:58:56Z

    CAMEL-12713 - XsltUriResolver fix: relative paths can remove scheme from XSLT URI

----
;;;","07/Aug/18 12:02;githubbot;davsclaus closed pull request #2456: CAMEL-12713 - XsltUriResolver fix: relative imports can ignore URI scheme 
URL: https://github.com/apache/camel/pull/2456
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
index 2520d7f1382..7c302d91021 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
@@ -27,6 +27,7 @@
 import org.apache.camel.util.FileUtil;
 import org.apache.camel.util.ObjectHelper;
 import org.apache.camel.util.ResourceHelper;
+import org.apache.camel.util.StringHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -74,14 +75,16 @@ public Source resolve(String href, String base) throws TransformerException {
         LOG.trace(""Resolving URI with href: {} and base: {}"", href, base);
 
         String scheme = ResourceHelper.getScheme(href);
+
         if (scheme != null) {
             // need to compact paths for file/classpath as it can be relative paths using .. to go backwards
+            String hrefPath = StringHelper.after(href, scheme);
             if (""file:"".equals(scheme)) {
                 // compact path use file OS separator
-                href = FileUtil.compactPath(href);
+                href = scheme + FileUtil.compactPath(hrefPath);
             } else if (""classpath:"".equals(scheme)) {
                 // for classpath always use /
-                href = FileUtil.compactPath(href, '/');
+                href = scheme + FileUtil.compactPath(hrefPath, '/');
             }
             LOG.debug(""Resolving URI from {}: {}"", scheme, href);
 
diff --git a/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java b/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java
new file mode 100644
index 00000000000..6d4df9e5a37
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/builder/xml/XsltUriResolverTest.java
@@ -0,0 +1,18 @@
+package org.apache.camel.builder.xml;
+
+import junit.framework.TestCase;
+import org.apache.camel.CamelContext;
+import org.apache.camel.impl.DefaultCamelContext;
+
+import javax.xml.transform.Source;
+
+public class XsltUriResolverTest extends TestCase {
+
+    public void testResolveUri() throws Exception {
+        CamelContext context = new DefaultCamelContext();
+        XsltUriResolver xsltUriResolver = new XsltUriResolver(context, ""classpath:xslt/staff/staff.xsl"");
+        Source source = xsltUriResolver.resolve(""../../xslt/common/staff_template.xsl"", ""classpath:xslt/staff/staff.xsl"");
+        assertNotNull(source);
+        assertEquals(""classpath:xslt/common/staff_template.xsl"", source.getSystemId());
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Aug/18 12:02;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2456
;;;","07/Aug/18 12:07;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
UseOriginalAggregationStrategy in outer loops,CAMEL-12709,13176707,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Matthi,Matthi,03/Aug/18 13:26,20/Aug/18 07:26,13/Jul/23 08:31,07/Aug/18 13:41,2.21.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"Using splitters with the UseOriginalAggregationStrategy +in a loop+ causes the splitter to return always the same original exchange.

 
{code:java}
// my code is similar to the following one:
from(""direct:myLoop"")
  .loop(simple(""{{export.maxLoopsPerRun}}""))
    .setHeader(...) // changing header fields
    .split(body(), new UseOriginalAggregationStrategy(null, false))
      .to(""direct:handleRecord"")
    .end()
    .log(""${in.headers}"") // the headers of the exchange of the very first loop iteration
  .end()
{code}
Reason: Once the original exchange is set by UseOriginalAggregationStrategy#setOriginal(Exchange), it is not updated any more for loop iterations > 1.

 ",,davsclaus,folschewski,Matthi,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 07:26:50 UTC 2018,,,,,,,,,,,"0|i3wnvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Aug/18 21:03;onders;i think this is on purpose. what loop-eip and split-eip with UseOriginalAggregationStrategy do it is right with the route definition you have given. i think this is not a bug, this is your routing design issue.;;;","07/Aug/18 13:37;davsclaus;Thanks for reporting. There is an issue with concurrency as the strategy can be shared on the splitter with multiple exchanges and that is not good.

The original that is being set would be set as the same instance. I am not sure what you do in your use-case that would set a clone of the exchange as Camel routes the same exchange instance for its lifecycle.

But the concurrency issue should be fixed.;;;","14/Aug/18 14:41;Matthi;Thank you for the fix (my use case should now work too according to the new code on gitlab).;;;","16/Aug/18 09:36;Matthi;Hi

Do you already know when the bug fix release is planned?

Thanks, Matthias;;;","16/Aug/18 13:36;davsclaus;In Q3 2018. The next expected patch release is 2.22.1, and then some times later 2.21.3 or a 2.22.2 which ones come first.;;;","17/Aug/18 09:08;folschewski;I think you missed the ShareUnitOfWorkAggregationStrategy in your fix.

it should be like this:
{code:java}
AggregationStrategy strategy = getAggregationStrategy();

if (strategy == null) {
    AggregationStrategy original = new UseOriginalAggregationStrategy(exchange, true);
    if (isShareUnitOfWork()) {
        original = new ShareUnitOfWorkAggregationStrategy(original);
    }
    setAggregationStrategyOnExchange(exchange, original);
} else {
    if (DelegateAggregationStrategy.class.isAssignableFrom(strategy)) {
       strategy = ((DelegateAggregationStrategy) strategy).getDelegate();
    }
    if (UseOriginalAggregationStrategy.class.isAssignableFrom(strategy)) {
        UseOriginalAggregationStrategy original = (UseOriginalAggregationStrategy) strategy;
        AggregationStrategy clone = original.newInstance(exchange);
        if (isShareUnitOfWork()) {
            clone = new ShareUnitOfWorkAggregationStrategy(clone);
        }
        setAggregationStrategyOnExchange(exchange, clone);
    }
}
return super.process(exchange, callback);
{code};;;","17/Aug/18 10:41;davsclaus;Thanks Frank, would you be able to provide a PR on github with this fix?;;;","17/Aug/18 11:45;folschewski;Unfortunately not. I'm not deeply enough involved in Camel to contribute.;;;","20/Aug/18 07:26;davsclaus;Thanks I have updated the code a bit;;;",,,,,,,,,,,,,,,,,,,,
Optimising toD via SendDynamicAware component removes the 3rd octet from IP address,CAMEL-12705,13176242,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Frasineanu,Frasineanu,01/Aug/18 21:12,02/Aug/18 12:44,13/Jul/23 08:31,02/Aug/18 12:44,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-core,,,,,,0,,,,"IP address 10.192.1.10 is optimized as 10.192.10
{code:java}
DEBUG in SendDynamicProcessor:264 [main] - DynamicSendTo sendTo(netty4-http:http://10.192.1.10:8080/client/alerts/summary?throwExceptionOnFailure=false) using ProducerCache with default cache size

DEBUG in SendDynamicProcessor:125 [Camel (camel-1) thread #6 - seda://alertSummary] - Optimising toD via SendDynamicAware component: netty4-http to use static uri: netty4-http:http:10.192.10:8080/path?throwExceptionOnFailure=false
{code}
The issue seems to be in AbstractCamelCatalog class, method ""doAsEndpointUri(String scheme, Map<String, String> properties, String ampersand, boolean encode) throws URISyntaxException""","Java 8, Camel 2.22.0, Spring Boot 2.0.3",davsclaus,Frasineanu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 02 12:25:08 UTC 2018,,,,,,,,,,,"0|i3wlan:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Aug/18 08:44;davsclaus;Yes this is an issue with camel-netty4, you can use either recipient list instead of toD or use another http component until this is fixed;;;","02/Aug/18 12:20;davsclaus;Okay have a potential fix;;;","02/Aug/18 12:25;Frasineanu;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
servicenow: meta data serivce ignores tables without parent when retrieving table list,CAMEL-12701,13175817,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,31/Jul/18 12:04,31/Jul/18 12:49,13/Jul/23 08:31,31/Jul/18 12:05,,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-servicenow,,,,,,0,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-31 12:04:35.0,,,,,,,,,,,"0|i3wiof:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Annotation processors used in build should error out,CAMEL-12690,13174857,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,26/Jul/18 14:07,26/Jul/18 14:10,13/Jul/23 08:31,26/Jul/18 14:10,2.23.0,,,,,,,,,,,,,,,2.23.0,,,,,build system,,,,,,0,,,,"The annotation processors generate a log if they fail, but they do not fail the build. They should fail the build along with the log needed for debugging. Tracing issues due to missing JSON descriptors not generated by annotation processors back to the apt project is quite difficult otherwise.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-26 14:07:57.0,,,,,,,,,,,"0|i3wcrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"EndpointRegistry, TransformerRegistry and ValidatorRegistry use wrong generics",CAMEL-12689,13174826,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,gnodet,gnodet,26/Jul/18 12:50,26/Jul/18 16:20,13/Jul/23 08:31,26/Jul/18 16:20,,,,,,,,,,,,,,,,2.23.0,,,,,,,,,,,0,,,,,,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 26 16:20:11 UTC 2018,,,,,,,,,,,"0|i3wckf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Jul/18 16:20;gnodet;https://github.com/apache/camel/commit/6512ee08cf4dba1cfb65df13f06a7420a061d3cb;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
relative references for nested xslt inclusions don't get resolved,CAMEL-12685,13174348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,pvdbosch,pvdbosch,25/Jul/18 11:54,23/Aug/18 07:07,13/Jul/23 08:31,25/Jul/18 14:12,2.22.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"If an XSLT A includes XSLT B which includes XSLT C using relative references, XSLT C is resolved relative to A instead of B.

The attached PR provides a unit test and fix for the described scenario. It changes the behavior to the expected one, i.e. resolve relative references based on the location of the direct parent XSLT.

 

 ",,githubbot,pvdbosch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 14:11:05 UTC 2018,,,,,,,,,,,"0|i3w9mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jul/18 12:09;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407732596
 
 
   Yes, but in the commit message too, that way we can track the change.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 13:38;githubbot;pvdbosch commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407757090
 
 
   OK, I rebased and squashed the commits with a new commit message.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 13:41;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407757846
 
 
   Great thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 14:10;githubbot;oscerd closed pull request #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
index c7d528c8bd3..2520d7f1382 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/XsltUriResolver.java
@@ -91,7 +91,7 @@ public Source resolve(String href, String base) throws TransformerException {
             } catch (IOException e) {
                 throw new TransformerException(e);
             }
-            return new StreamSource(is);
+            return new StreamSource(is, href);
         }
 
         // if href and location is the same, then its the initial resolve
@@ -100,8 +100,8 @@ public Source resolve(String href, String base) throws TransformerException {
             return resolve(path, base);
         }
 
-        // okay then its relative to the starting location from the XSLT component
-        String path = FileUtil.onlyPath(location);
+        // okay then its relative to the starting location from the XSLT importing this one
+        String path = FileUtil.onlyPath(base);
         if (ObjectHelper.isEmpty(path)) {
             path = baseScheme + href;
             return resolve(path, base);
diff --git a/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
index c9b0a0721d8..dc1e2a80f17 100644
--- a/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java
@@ -416,7 +416,6 @@ protected void loadResource(String resourceUri) throws TransformerException, IOE
         if (source == null) {
             throw new IOException(""Cannot load schema resource "" + resourceUri);
         } else {
-            source.setSystemId(resourceUri);
             xslt.setTransformerSource(source);
         }
         // now loaded so clear flag
diff --git a/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java b/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java
new file mode 100644
index 00000000000..2b9d53ee8b3
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/xslt/XsltIncludeRelativeNestedTest.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.xslt;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+
+/**
+ *
+ */
+public class XsltIncludeRelativeNestedTest extends ContextTestSupport {
+
+    public void testXsltIncludeRelativeNested() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedMessageCount(1);
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file:src/test/data/?fileName=staff.xml&noop=true&initialDelay=0&delay=10"")
+                    .to(""xslt:org/apache/camel/component/xslt/staff_include_relative_nested.xsl"")
+                    .to(""log:foo"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+}
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl
new file mode 100644
index 00000000000..ae635a206f8
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/included/staff_included_nested_level_1.xsl
@@ -0,0 +1,41 @@
+<?xml version=""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+
+    <xsl:include href=""../staff_included_nested_level_2.xsl"" />
+
+    <xsl:template match=""staff/programmer"">
+        <html>
+            <body>
+                <xsl:apply-templates select=""age""/>
+                <br/>
+            </body>
+        </html>
+    </xsl:template>
+
+    <xsl:template match=""age"">
+        AGE:
+        <span style=""color:yellow;"">
+            <xsl:value-of select="".""/>
+        </span>
+        <br/>
+    </xsl:template>
+
+</xsl:stylesheet>
\ No newline at end of file
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl
new file mode 100644
index 00000000000..cba77400d6f
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_include_relative_nested.xsl
@@ -0,0 +1,33 @@
+<?xml version=""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+
+    <xsl:include href=""included/staff_included_nested_level_1.xsl""/>
+
+    <xsl:template match=""staff/programmer"" priority=""2"">
+        <html>
+            <body>
+                <xsl:apply-templates select=""age""/>
+                <br/>
+            </body>
+        </html>
+    </xsl:template>
+
+</xsl:stylesheet>
\ No newline at end of file
diff --git a/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl
new file mode 100644
index 00000000000..8ec82a37c49
--- /dev/null
+++ b/camel-core/src/test/resources/org/apache/camel/component/xslt/staff_included_nested_level_2.xsl
@@ -0,0 +1,26 @@
+<?xml version = ""1.0""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
+
+  <xsl:template match=""hello"">
+    <goodbye/>
+  </xsl:template>
+
+</xsl:stylesheet>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 14:10;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2440
;;;","25/Jul/18 14:11;githubbot;oscerd commented on issue #2440: CAMEL-12685: fix xslt nested relative refs
URL: https://github.com/apache/camel/pull/2440#issuecomment-407767997
 
 
   Thanks. Merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
BreadcrumbId not required for aws-sqs aws-sns endpoints,CAMEL-12681,13174208,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,saravanakumar,saravanakumar,24/Jul/18 21:27,25/Jul/18 08:09,13/Jul/23 08:31,25/Jul/18 08:09,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-aws,,,,,,0,,,,"Currently in each message sent through aws-sqs aws-sns endpoints, there is an extra message attribute 'breadcrumbId' appears.

BreadcrumbId need not be passed to aws-sqs aws-sns producer endpoints.",,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 08:08:09 UTC 2018,,,,,,,,,,,"0|i3w8rb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Jul/18 21:30;githubbot;saravanakumar1987 opened a new pull request #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439
 
 
   PR for https://issues.apache.org/jira/browse/CAMEL-12681
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 21:30;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2439

    CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints

    PR for https://issues.apache.org/jira/browse/CAMEL-12681
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2439.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2439
    
----
commit e9fa4ebce80a6dd8b02a519c7c2cb345ea63e616
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-07-24T21:26:57Z

    CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints

----
;;;","25/Jul/18 08:08;githubbot;oscerd commented on issue #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439#issuecomment-407670764
 
 
   Merged on master, 2.22.x and 2.21.x. Thanks

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 08:08;githubbot;oscerd closed pull request #2439: CAMEL-12681 : BreadcrumbId not required for aws-sqs aws-sns endpoints
URL: https://github.com/apache/camel/pull/2439
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
index fb51835a5b4..1aa2e06b981 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsHeaderFilterStrategy.java
@@ -25,6 +25,6 @@ public SnsHeaderFilterStrategy() {
 
     protected void initialize() {
         // filter headers begin with ""Camel"" or ""org.apache.camel""
-        setOutFilterPattern(""(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
+        setOutFilterPattern(""(breadcrumbId|Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
     }
 }
diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
index fb5f425ba2e..78fea47052f 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsHeaderFilterStrategy.java
@@ -25,6 +25,6 @@ public SqsHeaderFilterStrategy() {
 
     protected void initialize() {
         // filter headers begin with ""Camel"" or ""org.apache.camel""
-        setOutFilterPattern(""(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
+        setOutFilterPattern(""(breadcrumbId|Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*""); 
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Jul/18 08:08;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2439
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for micrometer endpoint,CAMEL-12680,13174084,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,apupier,apupier,24/Jul/18 11:54,24/Jul/18 12:23,13/Jul/23 08:31,24/Jul/18 12:23,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,,,,,,,0,,,,"provided syntax is micrometer:metricsType:meterName but it should be micrometer:metricsType:metricsName

(the component camel-micrometer is missing)",,apupier,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-24 11:54:04.0,,,,,,,,,,,"0|i3w7zj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpServerConsumer logging failure to set HL7 headers even when setting HL7 headers is disabled,CAMEL-12659,13172647,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,17/Jul/18 13:25,17/Jul/18 19:50,13/Jul/23 08:31,17/Jul/18 19:50,2.20.3,2.21.1,2.22.0,,,,,,,,,,,,,2.20.4,2.21.2,2.22.1,2.23.0,,camel-mllp,,,,,,0,,,,"In the process of setting Camel message headers from the payload, the MllpTcpServerConsumer is logging an error when it fails to identify the MSH segment of the message.  This error is logged before the hl7Headers configuration option is checked, so the error is always logged - even if setting the HL7 headers is disabled (i.e. hl7Headers=false).

This is a minor issue, but it effects edge cases where non-HL7 payloads are sent with the MLLP protocol.

The logic should be changed such that if the hl7Headers option is false, don't do anything (i.e. no log statement).",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 17 19:50:06 UTC 2018,,,,,,,,,,,"0|i3vz53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Jul/18 19:50;hqstevenson;Correct on master w/commit 130a42223171a39cbe3d77021b2ecf15a21036f8.

Back-ported to 2.22.x w/commit fc069058dbf283e5b72e58d6c3e3f438c8c34ec0
Back-ported to 2.21.x w/commit 9d8f7c662562f17ad9d0282fbfae7fb585fd4d11
Back-ported to 2.20.x w/commit b7281f1eda9c5a4dd7328c3e4d55142f45737a22;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zipkin - Root Span Id is not reported if the route calls multiple route,CAMEL-12656,13172420,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,st2654,st2654,16/Jul/18 14:59,01/Aug/18 08:48,13/Jul/23 08:31,01/Aug/18 08:48,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-zipkin,,,,,,0,,,,"Camel-Zipkin does not report traces with root span id when there are multiple routes. 

For example: 

 
{code:java}
from(""direct:foo"")
        .delay(1000)
        .to(""direct:bar"")
        .to(""direct:moo"")
        .to(""direct:tar"");

from(""direct:bar"")
        .delay(2000);

from(""direct:moo"")
        .delay(1000);

from(""direct:tar"")
        .delay(3000);
{code}
Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png

I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.

Class Name: ZipkinTracer.ZipkinRoutePolicy
Inside onExchangeBegin() method 

 
{code:java}
// add on completion after the route is done, but before the consumer writes the response
// this allows us to track the zipkin event before returning the response which is the right time
exchange.addOnCompletion(new SynchronizationAdapter() {
    @Override
    public void onAfterRoute(Route route, Exchange exchange) {
        String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
        Brave brave = getBrave(serviceName);
        if (brave != null) {
            serverResponse(brave, serviceName, exchange);
        }
    }

    @Override
    public String toString() {
        return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
    }
});
{code}
 

 

Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.

I have fix for it: 
If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.

[https://zipkin.io/pages/instrumenting.html]

*Note* This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.",,acosentino,davsclaus,githubbot,st2654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jul/18 14:32;st2654;Traces breaking.png;https://issues.apache.org/jira/secure/attachment/12931805/Traces+breaking.png","16/Jul/18 14:32;st2654;Traces fixed 1.png;https://issues.apache.org/jira/secure/attachment/12931806/Traces+fixed+1.png","16/Jul/18 14:32;st2654;Traces fixed 2.png;https://issues.apache.org/jira/secure/attachment/12931807/Traces+fixed+2.png",,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 01 08:48:26 UTC 2018,,,,,,,,,,,"0|i3vxqn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Jul/18 15:01;st2654;[~cibsen@e-ma.net] How can I assign this issue to me?;;;","16/Jul/18 15:15;acosentino;You can't. It's sufficient to leave a comment.

Also, test your app with the camel master code where we updated camel-zipkin. 

If you're breaking the normal behavior then your fix can be only be merged on master.;;;","18/Jul/18 07:24;davsclaus;Yeah this seems more correct, thanks for the suggested fix. The root id should be used to group all of that activity on the exchange together, and your screenshots with the fix shows that.

You are welcome to provide a github PR with the fix
https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","01/Aug/18 03:54;githubbot;st2654 opened a new pull request #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448
 
 
   https://issues.apache.org/jira/browse/CAMEL-12656
   I have added screenshots in Jira already.
   Camel-Zipkin does not report traces with root span id when there are multiple routes. 
   
   For example: 
   `from(""direct:foo"")
           .delay(1000)
           .to(""direct:bar"")
           .to(""direct:moo"")
           .to(""direct:tar"");
   
   from(""direct:bar"")
           .delay(2000);
   
   from(""direct:moo"")
           .delay(1000);
   
   from(""direct:tar"")
           .delay(3000);`
   
   Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png
   
   I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.
   
   Class Name: ZipkinTracer.ZipkinRoutePolicy
   Inside onExchangeBegin() method 
   
    
   
   // add on completion after the route is done, but before the consumer writes the response
   // this allows us to track the zipkin event before returning the response which is the right time
   exchange.addOnCompletion(new SynchronizationAdapter() {
       @Override
       public void onAfterRoute(Route route, Exchange exchange) {
           String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
           Brave brave = getBrave(serviceName);
           if (brave != null) {
               serverResponse(brave, serviceName, exchange);
           }
       }
   
       @Override
       public String toString() {
           return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
       }
   });
    
   
    
   
   Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.
   
   I have fix for it: 
   If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.
   
   https://zipkin.io/pages/instrumenting.html
   
   Note This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 03:54;githubbot;GitHub user st2654 opened a pull request:

    https://github.com/apache/camel/pull/2448

    CAMEL-12656: Fixed root span id for multiple routes.

    https://issues.apache.org/jira/browse/CAMEL-12656
    I have added screenshots in Jira already.
    Camel-Zipkin does not report traces with root span id when there are multiple routes. 
    
    For example: 
    `from(""direct:foo"")
            .delay(1000)
            .to(""direct:bar"")
            .to(""direct:moo"")
            .to(""direct:tar"");
    
    from(""direct:bar"")
            .delay(2000);
    
    from(""direct:moo"")
            .delay(1000);
    
    from(""direct:tar"")
            .delay(3000);`
    
    Root SpanId(TraceId) should be for service-name = direct:foo and the trace in UI should show all the 4 routes in one sequence. But it breaks. Check the attached screenshot: Traces Breaking.png
    
    I looked into the code and figured out why its happening. Here is the code which is breaking the functionality.
    
    Class Name: ZipkinTracer.ZipkinRoutePolicy
    Inside onExchangeBegin() method 
    
     
    
    // add on completion after the route is done, but before the consumer writes the response
    // this allows us to track the zipkin event before returning the response which is the right time
    exchange.addOnCompletion(new SynchronizationAdapter() {
        @Override
        public void onAfterRoute(Route route, Exchange exchange) {
            String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
            Brave brave = getBrave(serviceName);
            if (brave != null) {
                serverResponse(brave, serviceName, exchange);
            }
        }
    
        @Override
        public String toString() {
            return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
        }
    });
     
    
     
    
    Using onAfterRoute() :  if the exchange is being routed through multiple routes, there will be callbacks for each route.
    
    I have fix for it: 
    If I use onExchangeDone() instead of above code. The traces are reported properly.  Check screenshots.
    
    https://zipkin.io/pages/instrumenting.html
    
    Note This process must be repeated if the service makes multiple downstream calls. That is each subsequent span will have the same trace id and parent id, but a new and different span id.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/st2654/camel CAMEL-12656

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2448.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2448
    
----
commit ca7fdaecc6645506a81c24409602ba3819b169b5
Author: Sourabh Taletiya <st2654@...>
Date:   2018-08-01T03:49:24Z

    CAMEL-12656: Fixed root span id for multiple routes.

----
;;;","01/Aug/18 04:02;githubbot;st2654 commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409442095
 
 
   @oscerd @davsclaus How can I add you as reviewers??

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 04:13;githubbot;st2654 commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409443582
 
 
   I want it to be part of SpringBoot 1.X and camel release 2.21.3 if possible.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 08:38;githubbot;davsclaus commented on issue #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448#issuecomment-409497470
 
 
   Thanks as the master branch has changed a bit with zipkin upgrades, then I can manually port it upwards.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 08:38;githubbot;davsclaus closed pull request #2448: CAMEL-12656: Fixed root span id for multiple routes.
URL: https://github.com/apache/camel/pull/2448
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
index fa6d8d2101f..401b14d9e09 100644
--- a/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
+++ b/components/camel-zipkin/src/main/java/org/apache/camel/zipkin/ZipkinTracer.java
@@ -757,24 +757,16 @@ public void onExchangeBegin(Route route, Exchange exchange) {
                     serverRequest(brave, serviceName, exchange);
                 }
             }
+        }
 
-            // add on completion after the route is done, but before the consumer writes the response
-            // this allows us to track the zipkin event before returning the response which is the right time
-            exchange.addOnCompletion(new SynchronizationAdapter() {
-                @Override
-                public void onAfterRoute(Route route, Exchange exchange) {
-                    String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
-                    Brave brave = getBrave(serviceName);
-                    if (brave != null) {
-                        serverResponse(brave, serviceName, exchange);
-                    }
-                }
-
-                @Override
-                public String toString() {
-                    return ""ZipkinTracerOnCompletion["" + routeId + ""]"";
-                }
-            });
+        // Report Server send after route has completed processing of the exchange.
+        @Override
+        public void onExchangeDone(Route route, Exchange exchange) {
+            String serviceName = getServiceName(exchange, route.getEndpoint(), true, false);
+            Brave brave = getBrave(serviceName);
+            if (brave != null) {
+                serverResponse(brave, serviceName, exchange);
+            }
         }
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 08:38;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2448
;;;","01/Aug/18 08:48;davsclaus;Thanks for the PR.;;;",,,,,,,,,,,,,,,,,,
RabbitMQ Headers - Headers with null value are skipped.,CAMEL-12654,13172363,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,Srivastav,Srivastav,16/Jul/18 10:34,24/Jul/18 11:07,13/Jul/23 08:31,24/Jul/18 11:07,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-rabbitmq,,,,,,0,headers,rabbitmq,,"Reference: Conversation with Claus Ibsen on [Stackoverflow|https://stackoverflow.com/questions/50583749/apache-camel-how-to-setheader-value-as-null]

org.apache.camel.component.rabbitmq.RabbitMQMessageConverter.buildProperties() skips the headers which have value null. The actual java client for RabbitMQ does not have this check. It accepts a basic Map<String,Object> which can accept null value. [Reference|https://rabbitmq.github.io/rabbitmq-java-client/api/current/com/rabbitmq/client/AMQP.BasicProperties.Builder.html] . Check the definition of headers() method

*The business scenario where we use it*. On the RabbitMQ, we accept messages from multiple sources. Depending on whether a specific header is null or not, we route these message downstream in our processing pipeline.

If required, I could provide a working example of rabbitmq java-client to demonstrate that the headers with null value are not skipped",,dmvolod,githubbot,Srivastav,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 24 09:11:02 UTC 2018,,,,,,,,,,,"0|i3vxdz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Jul/18 12:12;dmvolod;[~Srivastav] you can check if the header not found this means it's a null. Could you please provide an example where null header values are required but header absence is not enough.;;;","20/Jul/18 14:39;Srivastav;Consider this scenario.

System A produces a message (For example Customer submitting his electric meter reading) to rabbitmq exchange. This message is passed in sequence through 3 systems
--> System 1 (performs a check if submitted through the Online interface)
     --> Adds header (Online : <online-case-id>/null)
--> System 2 (more checks...)
     --> Adds header (PreviousBalance : <some_id>/null)
--> System 3 (more chesks)
     --> Adds header (ClearByInvoiceService : <some_other_id>/null)
...
...
...
--> System B
    --> Does final processing

System B processes this message. If either of the headers is set, it does a microservice lookup to get more details to enrich the base message. This works fine until we started reading the message from another system C. System C can directly send this message to System B, but it needs to setup headers with a null value.

So far we have been using a set of POJO based rabbit-mq consumers and producers to read messages and do ETL operations. Now we have started porting many of our integrations to apache camel, but we are not able to use camel-rabbitmq component, because headers with null values are skipped. It would be good to have camel-rabbitmq not to filter out the header with null values like the original rabbitmq java-client does.

Another factor which adds to the complexity is, there are multiple systems similar to System A, owned by different IT teams (and different programming languages). Making changes to System B would mean breaking message structure for rest of the parties which is additional cost and effort.

We can actually fork the camel-rabbitmq component and fix the changes. But that would mean, we have to maintain this fork for all the versions that we would use.;;;","20/Jul/18 14:51;dmvolod;[~Srivastav], thanks for explanation. Looks like this is useful feature, but it must be added as an option (allowNullHeaders or something else) to provide backward compatibility.;;;","23/Jul/18 07:56;Srivastav;[~dmvolod] Yes I agree. Something like setNullHeader('headerName') should suffice. We don't need to pass any value, as it would be null anyway.;;;","23/Jul/18 08:47;dmvolod;[~Srivastav] I've done some unit test with the headers (null and non-null values) and logger info if following:

AMQP.BasicProperties: #contentHeader<basic>(content-type=null, content-encoding=null, headers=\{breadcrumbId=ID-dvolodin-redhat-local-1532335144940-0-1, CustomHeader=customheader}, delivery-mode=null, priority=null, correlation-id=null, reply-to=null, expiration=null, message-id=null, timestamp=null, type=null, user-id=null, app-id=null, cluster-id=null)

You can see that's possible to pass null values in headers which are mapped to the AMQP properties, i.e. user-id, app-id, etc. but not custom headers or RabbitMQ specific headers, for example rabbitmq.EXCHANGE_NAME.

We will continue to work on unit tests and add allowNullHeaders to the endpoint property to implement your requirements.;;;","23/Jul/18 10:17;Srivastav;[~dmvolod] Yes, actually I should have mentioned that specifically that this problem occurs for the custom headers. Proposal for allowNullHeaders looks good.;;;","24/Jul/18 08:12;githubbot;dmvolod opened a new pull request #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 08:12;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2436

    CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12654

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2436.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2436
    
----
commit fddedbc44de60ccc214c0c40be420dad7e1d13da
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-07-24T08:08:45Z

    CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped

----
;;;","24/Jul/18 08:16;githubbot;dmvolod commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407321828
 
 
   @oscerd what do you think about backport this component to 2.21 and 2.22. I've added a new option but it doesn't change the default behaviour? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 08:20;githubbot;oscerd commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407322949
 
 
   Should be fine if the behavior doesn't change it would be good.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 08:21;githubbot;dmvolod commented on issue #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436#issuecomment-407323263
 
 
   @oscerd , thanks. Will do it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 08:26;githubbot;asfgit closed pull request #2436: CAMEL-12654: RabbitMQ Headers - Headers with null value are skipped
URL: https://github.com/apache/camel/pull/2436
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc b/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
index e6e330c384e..823f22b7fbc 100644
--- a/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
+++ b/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc
@@ -47,14 +47,14 @@ exchange name determines which exchange the queue will bind to.
 === Options
 
 // component options: START
-The RabbitMQ component supports 49 options, which are listed below.
+The RabbitMQ component supports 50 options, which are listed below.
 
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
-| *hostname* (common) | The hostname of the running rabbitmq instance or cluster. |  | String
+| *hostname* (common) | The hostname of the running RabbitMQ instance or cluster. |  | String
 | *portNumber* (common) | Port number for the host with the running rabbitmq instance or cluster. | 5672 | int
 | *username* (security) | Username in case of authenticated access | guest | String
 | *password* (security) | Password for authenticated access | guest | String
@@ -102,6 +102,7 @@ The RabbitMQ component supports 49 options, which are listed below.
 | *deadLetterQueue* (common) | The name of the dead letter queue |  | String
 | *deadLetterRoutingKey* (common) | The routing key for the dead letter exchange |  | String
 | *deadLetterExchangeType* (common) | The type of the dead letter exchange | direct | String
+| *allowNullHeaders* (producer) | Allow pass null values to header | false | boolean
 | *resolveProperty Placeholders* (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |===
 // component options: END
@@ -126,7 +127,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (61 parameters):
+==== Query Parameters (62 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -163,6 +164,7 @@ with the following path and query parameters:
 | *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler
 | *exchangePattern* (consumer) | Sets the exchange pattern when the consumer creates an exchange. |  | ExchangePattern
 | *threadPoolSize* (consumer) | The consumer uses a Thread Pool Executor with a fixed number of threads. This setting allows you to set that number of threads. | 10 | int
+| *allowNullHeaders* (producer) | Allow pass null values to header | false | boolean
 | *bridgeEndpoint* (producer) | If the bridgeEndpoint is true, the producer will ignore the message header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY | false | boolean
 | *channelPoolMaxSize* (producer) | Get maximum number of opened channel in pool | 10 | int
 | *channelPoolMaxWait* (producer) | Set the maximum number of milliseconds to wait for a channel from the pool | 1000 | long
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
index 96c1ac8dfac..69a3e8ac34d 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java
@@ -81,6 +81,8 @@
     private String deadLetterQueue;
     @Metadata(label = ""common"", defaultValue = ""direct"", enums = ""direct,fanout,headers,topic"")
     private String deadLetterExchangeType = ""direct"";
+    @Metadata(label = ""producer"")
+    private boolean allowNullHeaders;
     @Metadata(label = ""security"")
     private String sslProtocol;
     @Metadata(label = ""security"")
@@ -241,6 +243,7 @@ protected RabbitMQEndpoint createEndpoint(String uri,
         endpoint.setDeadLetterExchangeType(getDeadLetterExchangeType());
         endpoint.setDeadLetterQueue(getDeadLetterQueue());
         endpoint.setDeadLetterRoutingKey(getDeadLetterRoutingKey());
+        endpoint.setAllowNullHeaders(isAllowNullHeaders());
         setProperties(endpoint, params);
 
         if (LOG.isDebugEnabled()) {
@@ -262,6 +265,8 @@ protected RabbitMQEndpoint createEndpoint(String uri,
         endpoint.getExchangeArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, EXCHANGE_ARG_PREFIX));
         endpoint.getQueueArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, QUEUE_ARG_PREFIX));
         endpoint.getBindingArgs().putAll(IntrospectionSupport.extractProperties(argsCopy, BINDING_ARG_PREFIX));
+        // Change null headers processing for message converter
+        endpoint.getMessageConverter().setAllowNullHeaders(endpoint.isAllowNullHeaders());
 
         return endpoint;
     }
@@ -271,7 +276,7 @@ public String getHostname() {
     }
 
     /**
-     * The hostname of the running rabbitmq instance or cluster.
+     * The hostname of the running RabbitMQ instance or cluster.
      */
     public void setHostname(String hostname) {
         this.hostname = hostname;
@@ -859,4 +864,14 @@ public void setDeadLetterExchangeType(String deadLetterExchangeType) {
         this.deadLetterExchangeType = deadLetterExchangeType;
     }
 
+    /**
+     * Allow pass null values to header
+     */
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
 }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
index 837ca59def6..9cdbf341b98 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java
@@ -175,6 +175,8 @@
     private long publisherAcknowledgementsTimeout;
     @UriParam(label = ""producer"")
     private boolean guaranteedDeliveries;
+    @UriParam(label = ""producer"")
+    private boolean allowNullHeaders;
     // camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
     private boolean useMessageIDAsCorrelationID = true;
     // camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
@@ -999,6 +1001,17 @@ public void setExclusiveConsumer(boolean exclusiveConsumer) {
         this.exclusiveConsumer = exclusiveConsumer;
     }
 
+    /**
+     * Allow pass null values to header
+     */
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
+
     public boolean isPassive() {
         return passive;
     }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
index 6cb535e988e..07902ca14ee 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQMessageConverter.java
@@ -37,6 +37,8 @@
 public class RabbitMQMessageConverter {
     protected static final Logger LOG = LoggerFactory.getLogger(RabbitMQMessageConverter.class);
 
+    private boolean allowNullHeaders;
+    
     /**
      * Will take an {@link Exchange} and add header values back to the {@link Exchange#getIn()}
      */
@@ -165,7 +167,8 @@ public void mergeAmqpProperties(Exchange exchange, AMQP.BasicProperties properti
         for (Map.Entry<String, Object> header : headers.entrySet()) {
             // filter header values.
             Object value = getValidRabbitMQHeaderValue(header.getValue());
-            if (value != null) {
+            
+            if (value != null || isAllowNullHeaders()) {
                 filteredHeaders.put(header.getKey(), header.getValue());
             } else if (LOG.isDebugEnabled()) {
                 if (header.getValue() == null) {
@@ -305,4 +308,12 @@ private boolean hasHeaders(final AMQP.BasicProperties properties) {
     private Object isSerializeHeaderEnabled(final AMQP.BasicProperties properties) {
         return properties.getHeaders().get(RabbitMQEndpoint.SERIALIZE_HEADER);
     }
+
+    public boolean isAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
 }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
index 15b990a7c2c..1ddf056385e 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/reply/ReplyManagerSupport.java
@@ -224,6 +224,7 @@ protected void doStart() throws Exception {
         ObjectHelper.notNull(executorService, ""executorService"", this);
         ObjectHelper.notNull(endpoint, ""endpoint"", this);
 
+        messageConverter.setAllowNullHeaders(endpoint.isAllowNullHeaders());
         // timeout map to use for purging messages which have timed out, while waiting for an expected reply
         // when doing request/reply over JMS
         log.debug(""Using timeout checker interval with {} millis"", endpoint.getRequestTimeoutCheckerInterval());
diff --git a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
index 4b594432529..f732e6e38f5 100644
--- a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
+++ b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQComponentTest.java
@@ -45,6 +45,7 @@ public void testDefaultProperties() throws Exception {
         assertEquals(true, endpoint.isAutoDelete());
         assertEquals(true, endpoint.isDurable());
         assertEquals(false, endpoint.isExclusiveConsumer());
+        assertEquals(false, endpoint.isAllowNullHeaders());
         assertEquals(""direct"", endpoint.getExchangeType());
         assertEquals(ConnectionFactory.DEFAULT_CONNECTION_TIMEOUT, endpoint.getConnectionTimeout());
         assertEquals(ConnectionFactory.DEFAULT_CHANNEL_MAX, endpoint.getRequestedChannelMax());
@@ -70,6 +71,7 @@ public void testPropertiesSet() throws Exception {
         params.put(""requestedFrameMax"", 789);
         params.put(""requestedHeartbeat"", 321);
         params.put(""exclusiveConsumer"", true);
+        params.put(""allowNullHeaders"", true);
 
         RabbitMQEndpoint endpoint = createEndpoint(params);
 
@@ -89,6 +91,7 @@ public void testPropertiesSet() throws Exception {
         assertEquals(789, endpoint.getRequestedFrameMax());
         assertEquals(321, endpoint.getRequestedHeartbeat());
         assertEquals(true, endpoint.isExclusiveConsumer());
+        assertEquals(true, endpoint.isAllowNullHeaders());
     }
 
     private RabbitMQEndpoint createEndpoint(Map<String, Object> params) throws Exception {
diff --git a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
index 77bb1c1b321..d91bcc4bf73 100644
--- a/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
+++ b/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/RabbitMQProducerIntTest.java
@@ -18,7 +18,9 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.concurrent.TimeoutException;
 
 import com.rabbitmq.client.AMQP;
@@ -30,15 +32,22 @@
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.RuntimeCamelException;
 import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.util.ObjectHelper;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class RabbitMQProducerIntTest extends AbstractRabbitMQIntTest {
+    private static final Logger LOGGER = LoggerFactory.getLogger(RabbitMQProducerIntTest.class);
+    
     private static final String EXCHANGE = ""ex1"";
     private static final String ROUTE = ""route1"";
+    private static final String CUSTOM_HEADER = ""CustomHeader"";
     private static final String BASIC_URI_FORMAT = ""rabbitmq:localhost:5672/%s?routingKey=%s&username=cameltest&password=cameltest&skipQueueDeclare=true"";
     private static final String BASIC_URI = String.format(BASIC_URI_FORMAT, EXCHANGE, ROUTE);
+    private static final String ALLOW_NULL_HEADERS = BASIC_URI + ""&allowNullHeaders=true"";
     private static final String PUBLISHER_ACKNOWLEDGES_URI = BASIC_URI + ""&mandatory=true&publisherAcknowledgements=true"";
     private static final String PUBLISHER_ACKNOWLEDGES_BAD_ROUTE_URI = String.format(BASIC_URI_FORMAT, EXCHANGE, ""route2"") + ""&publisherAcknowledgements=true"";
     private static final String GUARANTEED_DELIVERY_URI = BASIC_URI + ""&mandatory=true&guaranteedDeliveries=true"";
@@ -47,6 +56,9 @@
 
     @Produce(uri = ""direct:start"")
     protected ProducerTemplate template;
+    
+    @Produce(uri = ""direct:start-allow-null-headers"")
+    protected ProducerTemplate templateAllowNullHeaders;
 
     @Produce(uri = ""direct:start-with-confirms"")
     protected ProducerTemplate templateWithConfirms;
@@ -73,6 +85,7 @@ protected RouteBuilder createRouteBuilder() throws Exception {
             @Override
             public void configure() throws Exception {
                 from(""direct:start"").to(BASIC_URI);
+                from(""direct:start-allow-null-headers"").to(ALLOW_NULL_HEADERS);
                 from(""direct:start-with-confirms"").to(PUBLISHER_ACKNOWLEDGES_URI);
                 from(""direct:start-with-confirms-bad-route"").to(PUBLISHER_ACKNOWLEDGES_BAD_ROUTE_URI);
                 from(""direct:start-with-guaranteed-delivery"").to(GUARANTEED_DELIVERY_URI);
@@ -105,6 +118,38 @@ public void producedMessageIsReceived() throws InterruptedException, IOException
 
         assertThatBodiesReceivedIn(received, ""new message"");
     }
+    
+    @Test
+    public void producedMessageWithNotNullHeaders() throws InterruptedException, IOException, TimeoutException {
+        final List<String> received = new ArrayList<>();
+        final Map<String, Object> receivedHeaders = new HashMap<String, Object>();
+        Map<String, Object> headers = new HashMap<String, Object>();
+        
+        headers.put(RabbitMQConstants.EXCHANGE_NAME, EXCHANGE);
+        headers.put(CUSTOM_HEADER, CUSTOM_HEADER.toLowerCase());
+        
+        channel.basicConsume(""sammyq"", true, new ArrayPopulatingConsumer(received, receivedHeaders));
+
+        template.sendBodyAndHeaders(""new message"", headers);
+
+        assertThatBodiesAndHeadersReceivedIn(receivedHeaders, headers, received, ""new message"");
+    }
+    
+    @Test
+    public void producedMessageAllowNullHeaders() throws InterruptedException, IOException, TimeoutException {
+        final List<String> received = new ArrayList<>();
+        final Map<String, Object> receivedHeaders = new HashMap<String, Object>();
+        Map<String, Object> headers = new HashMap<String, Object>();
+        
+        headers.put(RabbitMQConstants.EXCHANGE_NAME, null);
+        headers.put(CUSTOM_HEADER, null);
+        
+        channel.basicConsume(""sammyq"", true, new ArrayPopulatingConsumer(received, receivedHeaders));
+
+        templateAllowNullHeaders.sendBodyAndHeaders(""new message"", headers);
+
+        assertThatBodiesAndHeadersReceivedIn(receivedHeaders, headers, received, ""new message"");
+    }
 
     private void assertThatBodiesReceivedIn(final List<String> received, final String... expected) throws InterruptedException {
         Thread.sleep(500);
@@ -114,6 +159,25 @@ private void assertThatBodiesReceivedIn(final List<String> received, final Strin
             assertEquals(body, received.get(0));
         }
     }
+    
+    private void assertThatBodiesAndHeadersReceivedIn(Map<String, Object> receivedHeaders, Map<String, Object> expectedHeaders,
+                                                      final List<String> received, final String... expected) throws InterruptedException {
+        Thread.sleep(500);
+
+        assertListSize(received, expected.length);
+        for (String body : expected) {
+            assertEquals(body, received.get(0));
+        }
+        
+        for (Map.Entry<String, Object> headers : expectedHeaders.entrySet()) {
+            Object receivedValue = receivedHeaders.get(headers.getKey());
+            Object expectedValue = headers.getValue();
+            
+            assertTrue(""Header key "" + headers.getKey() + "" not found"", receivedHeaders.containsKey(headers.getKey()));
+            assertEquals(0, ObjectHelper.compare(receivedValue == null ? """" : receivedValue.toString(), expectedValue == null ? """" : expectedValue.toString()));
+        }
+        
+    }
 
     @Test
     public void producedMessageIsReceivedWhenPublisherAcknowledgementsAreEnabled() throws InterruptedException, IOException, TimeoutException {
@@ -162,10 +226,18 @@ public void shouldSuccessfullyProduceMessageWhenGuaranteedDeliveryIsActivatedOnA
 
     private class ArrayPopulatingConsumer extends DefaultConsumer {
         private final List<String> received;
+        private final Map<String, Object> receivedHeaders;
 
         ArrayPopulatingConsumer(final List<String> received) {
             super(RabbitMQProducerIntTest.this.channel);
             this.received = received;
+            receivedHeaders = new HashMap<String, Object>();
+        }
+        
+        ArrayPopulatingConsumer(final List<String> received, Map<String, Object> receivedHeaders) {
+            super(RabbitMQProducerIntTest.this.channel);
+            this.received = received;
+            this.receivedHeaders = receivedHeaders;
         }
 
         @Override
@@ -173,6 +245,9 @@ public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body) throws IOException {
+            LOGGER.info(""AMQP.BasicProperties: {}"", properties);
+            
+            receivedHeaders.putAll(properties.getHeaders());
             received.add(new String(body));
         }
     }
diff --git a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
index b2a40b24c3f..d9da3f6dde9 100644
--- a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentConfiguration.java
@@ -38,7 +38,7 @@
      */
     private Boolean enabled;
     /**
-     * The hostname of the running rabbitmq instance or cluster.
+     * The hostname of the running RabbitMQ instance or cluster.
      */
     private String hostname;
     /**
@@ -281,6 +281,10 @@
      * The type of the dead letter exchange
      */
     private String deadLetterExchangeType = ""direct"";
+    /**
+     * Allow pass null values to header
+     */
+    private Boolean allowNullHeaders = false;
     /**
      * Whether the component should resolve property placeholders on itself when
      * starting. Only properties which are of String type can use property
@@ -675,6 +679,14 @@ public void setDeadLetterExchangeType(String deadLetterExchangeType) {
         this.deadLetterExchangeType = deadLetterExchangeType;
     }
 
+    public Boolean getAllowNullHeaders() {
+        return allowNullHeaders;
+    }
+
+    public void setAllowNullHeaders(Boolean allowNullHeaders) {
+        this.allowNullHeaders = allowNullHeaders;
+    }
+
     public Boolean getResolvePropertyPlaceholders() {
         return resolvePropertyPlaceholders;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Jul/18 08:26;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2436
;;;","24/Jul/18 08:47;Srivastav;[~dmvolod]. Amazing work. Few questions?
* These updates would be available for which camel versions?
* Could you please provide quick steps on how to use this feature. I will update the original question on StackOverflow.;;;","24/Jul/18 09:11;dmvolod;[~Srivastav], I will backport this feature to the 2.22.1 and 2.21.3 versions.

To be able pass null values to the headers the allowNullHeaders endpoint and component parameters were introduced.

Please see following test file as sample config [RabbitMQProducerIntTest.java|https://github.com/apache/camel/commit/fddedbc44de60ccc214c0c40be420dad7e1d13da#diff-24dcd05dc15db65884aaba68ed79880b];;;",,,,,,,,,,,,,,
Problem in setting region for camel AWS-SQS endpoint,CAMEL-12647,13171831,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,saravanakumar,saravanakumar,12/Jul/18 21:18,11/Aug/20 20:25,13/Jul/23 08:31,18/Jul/18 09:26,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-aws,,,,,,0,,,,"It gives FailedToCreateRouteException while creating camel AWS-SQS endpoint with ARN.

For example, below producer or consumer endpoint is not being created.
{code:java}
uri=""aws-sqs://arn:aws:sqs:us-east-2:account:MyQueue?accessKey=xxx&secretKey=yyy&region=US_EAST_2""{code}
And it throws error as follows.
{code:java}
Caused by: java.lang.IllegalArgumentException: No enum constant com.amazonaws.regions.Regions.us-east-2
	at java.lang.Enum.valueOf(Enum.java:238)
	at com.amazonaws.regions.Regions.valueOf(Regions.java:26)
	at org.apache.camel.component.aws.sqs.SqsEndpoint.createClient(SqsEndpoint.java:310)
{code}",,githubbot,saravanakumar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15395,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 13 12:16:08 UTC 2018,,,,,,,,,,,"0|i3vubb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Jul/18 21:45;githubbot;saravanakumar1987 opened a new pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424
 
 
   PR created for Bug : https://issues.apache.org/jira/browse/CAMEL-12647
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Jul/18 21:45;githubbot;GitHub user saravanakumar1987 opened a pull request:

    https://github.com/apache/camel/pull/2424

    CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint

    PR created for Bug : https://issues.apache.org/jira/browse/CAMEL-12647
    
    Thanks,
    Saravanakumar

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/saravanakumar1987/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2424.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2424
    
----
commit 9a2ce74a208f8df622536202acf3c2e26ef417a6
Author: Saravanakumar Selvaraj <saravanakumar.java@...>
Date:   2018-07-12T21:40:57Z

    CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint

----
;;;","13/Jul/18 05:10;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202245127
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Should not this assert be null before this change?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 05:21;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202246177
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Region value was taken from ARN which was wrong. Take a look at the source file changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 05:24;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202246177
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Region value was taken from ARN which is wrong. Take a look at the source file changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 05:33;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202247330
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Why not? sqs://arn:aws:sqs:US_EAST_2:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 05:58;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734149
 
 
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in Aws and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API directly and gives problem in enum. Check the error message I posted in CAMEL-12647.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 05:59;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734327
 
 
   aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:02;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202260036
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in AWS and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API and gives problem in enum. Check the error message I posted in CAMEL-12647. Also aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:02;githubbot;saravanakumar1987 removed a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734149
 
 
   ARN is actually created like “arn:aws:sqs:us-east-2:account:MyQueue”. You can try creating a SQS Queue in Aws and check the syntax of ARN. It’s not the right place to get Region. Later the value is directly used in com.amazonaws API directly and gives problem in enum. Check the error message I posted in CAMEL-12647.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:02;githubbot;saravanakumar1987 removed a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404734327
 
 
   aws-sns does not have this problem.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:09;githubbot;onderson commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202261323
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   In this case, region in ARN on sqs component possibly becomes irrelevant. Doesn't it? Maybe number of parts in ARN would require extre length checks and conditions control by this [line](https://github.com/apache/camel/pull/2424/files#diff-b27317b097ef229e2092bebe046882f9R60). What do you think @oscerd ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:31;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202265472
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Yes. camel aws-sql component uses com.amazonaws.AmazonWebServiceClient and it does not require ARN to get instance of it. The required parameters are parsed by camel from the given ARN.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 07:31;githubbot;saravanakumar1987 commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202265472
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   Yes. camel aws-sqs component uses com.amazonaws.AmazonWebServiceClient and it does not require ARN to get instance of it. The required parameters are parsed by camel from the given ARN.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:00;githubbot;oscerd commented on a change in pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#discussion_r202272063
 
 

 ##########
 File path: components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
 ##########
 @@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy&region=US_EAST_2"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
 
 Review comment:
   The example of arn for an sqs endpoint is arn:aws:sqs:us-east-1:123456789012:MyQueue. The problem is that we are using the enum value of the Regions class, so probably we may need to double check if the region is specified as arn, then we need to manipulate it to use it and make it compliant to be used for the enum.  In my opinion the PR must be reviewed in this way.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:13;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404760977
 
 
   @oscerd Do you say the region should be picked from ARN and deprecate the URI option ""region"" for the endpoint ? It can not be used for creating client com.amazonaws.AmazonWebServiceClient though. Because the enum expects the region to be in correct format.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:19;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404762327
 
 
   No. Arn is a thing, while endpoint region option is different stuff. If you use an arn, you don't need to specify a region as endpoint option, because the configuration will be populated starting from the arn. In case the region is obtained from the arn we need to make his value good for the enum. We don't have to deprecate anything.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:29;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404764996
 
 
   Hi @oscerd ,
   
   In that case, it can not be fixed in our camel code. Because the Region is the class from AWS SDK : https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/regions/Regions.html
   
   I have actually made changes in this commit similar to how AWS-SNS component works. 
   
   Could you clarify what code changes can be performed here in this PR?
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:30;githubbot;saravanakumar1987 edited a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404764996
 
 
   Hi @oscerd ,
   
   In that case, it can not be fixed in our camel code. Because the Regions is the enum from AWS SDK : https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/regions/Regions.html
   
   I have actually made changes in this commit similar to how AWS-SNS component works. 
   
   Could you clarify what code changes can be performed here in this PR?
   
   Thanks,
   Saravanakumar

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:34;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404766244
 
 
   Suppose you have the parts[3] of the arn, that is ""us-east-1""
   
   On line 63 of the SQSComponent class you need to do:
   
   `configuration.setRegion(Regions.fromName(parts[3]).toString())`
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 08:35;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404766382
 
 
   In this way you'll be able to use the region in the following code

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 10:57;githubbot;saravanakumar1987 commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404800303
 
 
   @oscerd I updated the PR with new changes. Please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 10:58;githubbot;saravanakumar1987 edited a comment on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404800303
 
 
   @oscerd @onderson I updated the PR with new changes. Please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 12:16;githubbot;oscerd commented on issue #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424#issuecomment-404816081
 
 
   Thanks. Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 12:16;githubbot;oscerd closed pull request #2424: CAMEL-12647 : Problem in setting region for camel AWS-SQS endpoint
URL: https://github.com/apache/camel/pull/2424
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
index 655f92e5b55..89a0e92ba5b 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsComponent.java
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import com.amazonaws.regions.Regions;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
 import org.apache.camel.impl.DefaultComponent;
@@ -54,7 +55,12 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
             throw new IllegalArgumentException(""Topic name must be specified."");
         }
         if (remaining.startsWith(""arn:"")) {
+            String[] parts = remaining.split("":"");
+            if (parts.length != 6 || !parts[2].equals(""sns"")) {
+                throw new IllegalArgumentException(""Topic arn must be in format arn:aws:sns:region:account:name."");
+            }
             configuration.setTopicArn(remaining);
+            configuration.setRegion(Regions.fromName(parts[3]).toString());
         } else {
             configuration.setTopicName(remaining);
         }
diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
index e21610b0dc7..e09f76cbad8 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsComponent.java
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import com.amazonaws.regions.Regions;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
 import org.apache.camel.impl.DefaultComponent;
@@ -60,7 +61,7 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
             if (parts.length != 6 || !parts[2].equals(""sqs"")) {
                 throw new IllegalArgumentException(""Queue arn must be in format arn:aws:sqs:region:account:name."");
             }
-            configuration.setRegion(parts[3]);
+            configuration.setRegion(Regions.fromName(parts[3]).toString());
             configuration.setQueueOwnerAWSAccountId(parts[4]);
             configuration.setQueueName(parts[5]);
         } else {
diff --git a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
index 329263ff63a..0e564698407 100644
--- a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
+++ b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sns/SnsComponentConfigurationTest.java
@@ -61,10 +61,10 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSNSClient"", mock);
         SnsComponent component = new SnsComponent(context);
-        SnsEndpoint endpoint = (SnsEndpoint) component.createEndpoint(""aws-sns://arn:aws:sns:region:account:MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy"");
+        SnsEndpoint endpoint = (SnsEndpoint) component.createEndpoint(""aws-sns://arn:aws:sns:us-east-1:account:MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy"");
 
         assertNull(endpoint.getConfiguration().getTopicName());
-        assertEquals(""arn:aws:sns:region:account:MyTopic"", endpoint.getConfiguration().getTopicArn());
+        assertEquals(""arn:aws:sns:us-east-1:account:MyTopic"", endpoint.getConfiguration().getTopicArn());
     }
 
     @Test
diff --git a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
index 240a48b2a31..2699482d716 100644
--- a/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
+++ b/components/camel-aws/src/test/java/org/apache/camel/component/aws/sqs/SqsComponentConfigurationTest.java
@@ -73,9 +73,9 @@ public void createEndpointWithMinimalArnConfiguration() throws Exception {
         
         ((JndiRegistry) ((PropertyPlaceholderDelegateRegistry) context.getRegistry()).getRegistry()).bind(""amazonSQSClient"", mock);
         SqsComponent component = new SqsComponent(context);
-        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:region:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
+        SqsEndpoint endpoint = (SqsEndpoint) component.createEndpoint(""aws-sqs://arn:aws:sqs:us-east-1:account:MyQueue?amazonSQSClient=#amazonSQSClient&accessKey=xxx&secretKey=yyy"");
 
-        assertEquals(""region"", endpoint.getConfiguration().getRegion());
+        assertEquals(""US_EAST_1"", endpoint.getConfiguration().getRegion());
         assertEquals(""account"", endpoint.getConfiguration().getQueueOwnerAWSAccountId());
         assertEquals(""MyQueue"", endpoint.getConfiguration().getQueueName());
         assertEquals(""xxx"", endpoint.getConfiguration().getAccessKey());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 12:16;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2424
;;;",,,
DefaultFluentProducerTemplate is not thread safe,CAMEL-12638,13171366,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lucas_,lucas_,11/Jul/18 10:02,25/Feb/20 15:36,13/Jul/23 08:31,08/Aug/18 12:01,2.20.2,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,1,,,,"I think we have rediscovered the CAMEL-10820 bug. A body of one request gets replaced with a body of proceeding request, in our case we use *request()* method instead of *asyncSend()*.

We use camel together with spring-boot. Consider following code:

 
{code:java}
@Service
public class UseCamelService {

   private FluentProducerTemplate producer;

   @Autowired
   public UseCamelService(FluentProducerTemplate producer) {
      this.producer = producer;
   }

   public String getValueFromCamel(String body) {
      return producer.to(""route"").withBody(body).request(String.class);
   }

}
{code}
If *UseCamelService.getValueFromCamel()* gets called from two different threads it is possible for the latter one to override the body of the first one.",,davsclaus,githubbot,lucas_,mario.papandrea,Neffez,neildrummonddorado,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Jul/18 15:58;mario.papandrea;image-2018-07-12-17-58-09-225.png;https://issues.apache.org/jira/secure/attachment/12931349/image-2018-07-12-17-58-09-225.png",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 25 15:36:26 UTC 2020,,,,,,,,,,,"0|i3vrfz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Jul/18 20:37;neildrummonddorado;We just ran into this on a project I am currently working on.

Looking at the {{DefaultFluentProducerTemplate}} class, it looks like it mutates it's internal state in it's implementation of the methods of the {{FluentProducerTemplate}} interface. Because the builder isn't immutable, it would appear that any two threads using the same {{DefaultFluentProducerTemplate}} instance (as in the example in the description) would allow for any state changes from one thread to leak into the other.

In my case, it looks like the body is often getting swapped out with one from another thread, but it looks like any of the internal state could get mixed up since this class isn't immutable.  I'm not sure what the performance implications of making this class immutable would be, but that would definitely appear to be one way to solve the problem.;;;","12/Jul/18 07:25;lucas_;I came up with the same conclusion as you [~neildrummonddorado]. There is no mention about this in the _DefaultFluentProducerTemplate_ javadoc, but the one for _FluentProducerTemplate_ clearly states that the producer is threadsafe and I would kind of expect that the same should apply for its implementations.;;;","12/Jul/18 09:09;njiang;The FluentProducerTemplate works as the Builder class with the fluent API to setup the internal states which  is not thread safe. You may need to use the DefaultProducerTemplate to do the job.;;;","12/Jul/18 12:37;lucas_;I'm not really convinced by that [~njiang]. Even in the _Camel in Action (Second Edition)_ book, [~davsclaus] and [~janstey] use it as a standard bean that can be called to execute a service, not as a builder (see _Listing 7.12 JAX-RS_ _REST implementation_)_:_
{code:java}
@ApplicationScoped
@Path ( ""/api"" )
public class RulesController {
   @Inject
   @Uri ( ""direct:inventory"" )
   private FluentProducerTemplate producer;

   @GET
   @Produces ( MediaType.APPLICATION_JSON )
   @Path ( ""/rules/{cartIds}"" )
   public List<ItemDto> rules( @PathParam ( ""cartIds"" ) String cartIds ) {
      List<ItemDto> answer = new ArrayList<>();
      ItemsDto inventory = producer.request( ItemsDto.class );
      [...]
   }
}{code}
 Obviously they don't refer to a specific implementation but we can all imagine which implementation is provided by default. Also if it was supposed to be *just* a builder I find it misleading that the class actually implements a _Service_ interface.

 ;;;","12/Jul/18 15:57;mario.papandrea;Moreover the api doc clearly state  that this object is ""thread safe"" 

[http://static.javadoc.io/org.apache.camel/camel-core/2.19.3/org/apache/camel/FluentProducerTemplate.html] 

  !image-2018-07-12-17-58-09-225.png!;;;","13/Jul/18 14:55;njiang;OK, I saw the java doc. Normally the template send, request method are thread safe, but withBody() is not thread safe, we can fix it by declare the body as thread local , but there are some other settings such as endpoint, processorSupplier which are not thread safe. So I just add a comment that we need treat FluentProducerTemplate as a Builder.

{code:java}
public class DefaultFluentProducerTemplate extends ServiceSupport implements FluentProducerTemplate {
    private final CamelContext context;
    private final ClassValue<ConvertBodyProcessor> resultProcessors;
    private Map<String, Object> headers;
    private Object body;
    private Optional<Consumer<ProducerTemplate>> templateCustomizer;
    private Optional<Supplier<Exchange>> exchangeSupplier;
    private Optional<Supplier<Processor>> processorSupplier;
    private Optional<Endpoint> endpoint;
    private Optional<Endpoint> defaultEndpoint;
    private int maximumCacheSize;
    private boolean eventNotifierEnabled;
    private volatile ProducerTemplate template;

...{code};;;","13/Jul/18 15:57;mario.papandrea;i suggest also to remove the singleton from the camel-spring-boot-starter cause is misleading. 

Or maybe  the scope of the bean can be changed to be Request Scoped
{code:java}
@Scope(""request"") 
{code}
. But I 'm not sure it will do the job..;;;","13/Jul/18 16:46;neildrummonddorado;[~mario.papandrea] I don't think that will fix the issue.

Consider the case of a service that injects {{FluentProducerTemplate}}:
{code:java}
@Service
public class MyService {

    @Inject
    private FluentProducerTemplate fluentProducerTemplate

    public void useProducerTemplate() {
        ....
    }
}{code}
In this case, if {{useProducerTemplate()}} is called from multiple threads, and it uses the {{fluentProducerTemplate}}, then even if you give it prototype scope, some instances may still be used in a multithreaded way, and may still run into this issue.  (It might make this happen less often, and fix it in some cases, but not in all cases).

I think any proper solution that doesn't break the API of {{FluentProducerTemplate}} will need {{DefaultFluentProducerTemplate}} to be a proper thread-safe class, such that a single instance can be used in multiple threads at the same time.

Right now, because {{DefaultFluentProducerTemplate}} implements {{FluentProducerTemplate}}, it really ought to be thread-safe, as is guaranteed in the javadocs of the {{FluentProducerTemplate}} interface.;;;","13/Jul/18 19:29;mario.papandrea;Ah yes sure, sorry! I was hoping exists some scope crating a new instance for each call, but is not like this. Anyway my suggestion to remove from the camel-spring-boot-starter configuration as a singleton is still valid. It shouldn't be used that way and the fact that you can find it in the spring context available for injection is error prone. This class must be instantiated each time is used so there is no need to be provided by the container;;;","24/Jul/18 18:12;lucas_;{quote}So I just add a comment that we need treat FluentProducerTemplate as a Builder.
{quote}
[~njiang] I kind of feel like this is not enough... If we want to avoid further confusion and potential production issues (our case) I think the class should be either made thread-safe for all operations *or* **it should not be possible to use it as a _ProducerTemplate_ (and don't create a singleton of this class as part of spring-boot-starter).;;;","27/Jul/18 10:07;njiang;If we set the property to be thread local, we can make it thread-safe, but it may introduce some memory leak if we don't use it rightly.
;;;","08/Aug/18 08:00;githubbot;davsclaus opened a new pull request #2459:  CAMEL-12638: FluentProducerTemplate should be thread-safe
URL: https://github.com/apache/camel/pull/2459
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/Aug/18 08:00;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2459

     CAMEL-12638: FluentProducerTemplate should be thread-safe

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12638

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2459.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2459
    
----
commit afedbc78afde861075ec218e50eaff12e2b9c7fc
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-08T07:57:57Z

    CAMEL-12638: FluentProducerTemplate should be thread-safe.

commit efc0e955139565f49f3f6ffd357ba78fa288efcc
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-08T07:59:46Z

    CAMEL-12638: FluentProducerTemplate should be thread-safe.

----
;;;","08/Aug/18 08:00;davsclaus;I created a PR with a potential fix
https://github.com/apache/camel/pull/2459;;;","08/Aug/18 11:58;githubbot;davsclaus closed pull request #2459:  CAMEL-12638: FluentProducerTemplate should be thread-safe
URL: https://github.com/apache/camel/pull/2459
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/Aug/18 11:58;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2459
;;;","08/Aug/18 12:01;davsclaus;Thanks for reporting;;;","08/Aug/18 13:01;lucas_;The fix looks good to me, thank you!;;;","25/Feb/20 13:41;Neffez;We are using Camel 2.24.2 and the FluentProducerTemplate is definitely still not thread-safe (using withExchange()). Should I create a new bug ticket?;;;","25/Feb/20 15:36;davsclaus;Try with latest 2.25.x release. Or 3.x if possible;;;",,,,,,,,,
XmlConverter can't transform StAXSource when external xalan lib available,CAMEL-12637,13171328,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,11/Jul/18 07:57,11/Jul/18 08:21,13/Jul/23 08:31,11/Jul/18 08:21,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"since external xalan impl doesn't support StAXSource, we should convert StAXSource to SAXSource firstly when external xalan is used

Otherwise we will see exception like

{code}

javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource

{code}",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-11 07:57:58.0,,,,,,,,,,,"0|i3vr7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in CamelEndpointDetails.hashCode method,CAMEL-12635,13171158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,onders,apupier,apupier,10/Jul/18 13:51,11/Jul/18 13:55,13/Jul/23 08:31,11/Jul/18 13:55,2.22.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,tooling,,,,,,0,,,,"in case className is null, there is an NPE

 
{noformat}
java.lang.NullPointerException
at org.apache.camel.parser.model.CamelEndpointDetails.hashCode(CamelEndpointDetails.java:153)
at java.util.HashMap.hash(HashMap.java:338)
at java.util.HashMap.put(HashMap.java:611)
at com.github.cameltooling.lsp.internal.CamelTextDocumentService.didSave(CamelTextDocumentService.java:223){noformat}

it is also possible with endpointURi but i think that endpointURi is always not null (but maybe worth checking for non null in hashCode method",,acosentino,apupier,davsclaus,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 11 13:55:01 UTC 2018,,,,,,,,,,,"0|i3vq5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jul/18 20:08;davsclaus;You are welcome to provide a PR;;;","11/Jul/18 08:45;apupier;see https://github.com/apache/camel/pull/2419;;;","11/Jul/18 13:54;acosentino;[~onders] please update the Jira here with the commit ref and backport to 2.22.x too, when you have time. Thanks.;;;","11/Jul/18 13:55;onders;[https://gitbox.apache.org/repos/asf?p=camel.git;a=commit;h=7c6e2da40dc9fc2fb20eddd384e08002d33d24ac];;;",,,,,,,,,,,,,,,,,,,,,,,,,
Better attachment handling in camel-mail component,CAMEL-12630,13170790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/Jul/18 07:18,09/Jul/18 08:28,13/Jul/23 08:31,09/Jul/18 08:28,2.21.1,2.22.0,2.23.0,,,,,,,,,,,,,2.20.4,2.21.2,2.22.1,2.23.0,,camel-mail,,,,,,0,,,,Attachment handling in camel-mail component should be improved.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-09 07:18:26.0,,,,,,,,,,,"0|i3vnw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Tracing is not working for route with redelivery strategy,CAMEL-12626,13170277,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marvinstorage,marvinstorage,05/Jul/18 14:01,24/Oct/18 11:07,13/Jul/23 08:31,09/Jul/18 13:21,2.20.2,,,,,,,,,,,,,,,2.21.4,2.22.2,2.23.0,,,,,,,,,0,camel,"camel-core,",tracer,"Camel Tracing is not being executed if there is redelivery strategy defined.
 In our context we have switched on the camel Tracer with the following:
{code:java}
    public static void main(String[] args) throws Exception {
        DefaultCamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                // If errorHandler with redelivery is removed then tracer output is visible again.
                errorHandler(new DefaultErrorHandlerBuilder().maximumRedeliveries(3).redeliveryDelay(2000L));

                from(""direct:start"").process(new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        System.out.println(""PROCESSED"");
                    }
                });
            }
        });

        // Enable Tracer.
        context.setTracing(true);
        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        template.sendBody(""direct:start"", ""foo"");
    }
{code}
We noticed that we were missing output from the tracer that we were excepting.
If you remove the errohandler with redelivery you can see the output we expected:

 
{code:java}
[main] INFO org.apache.camel.processor.interceptor.Tracer - ID-rmm-xxx-xxx-x-x >>> (route1) from(direct://start) --> Processor@0x130d63be <<< Pattern:InOnly, Headers:{breadcrumbId=ID-rmm-xxx-xxx-x-x}, BodyType:String, Body:foo
{code}
 ",,davsclaus,marvinstorage,NickUK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 24 11:07:05 UTC 2018,,,,,,,,,,,"0|i3vkt3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Jul/18 12:49;davsclaus;CAMEL-11483 did some internal optimisation that cause this;;;","24/Oct/18 07:41;NickUK;Would it be possible to get this in one of the camel 2.21.x (pre spring boot 2) releases? 

We can no longer use the tracer as we have a re-delivery strategy defined.;;;","24/Oct/18 10:01;davsclaus;Yeah I backported this;;;","24/Oct/18 11:07;NickUK;Great (y);;;",,,,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ Artemis AMQP integration issue with topic prefix hardcode,CAMEL-12624,13170139,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,open_matt_nz,open_matt_nz,04/Jul/18 21:44,18/Jul/18 03:44,13/Jul/23 08:31,13/Jul/18 15:29,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-amqp,,,,,,0,,,,"Currently we are running Camel AMQP component against Active MQ 5 (Amazon MQ) we want to move to an Artemis solution but this hasn't worked seamlessly.

In CAMEL-9204 I believe a hardcoded topic prefix of ""topic://"" was introduced I think for a workaround of an Active MQ 5 bug. 

In Artemis this means Camel connects to a topic named ""topic://example.topic.event"" instead of ""example.topic.event"" and therefore receives no events.

The only possible workaround is to manually create the connection factory which means then the topic prefix is not set. 

My believe is that the hardcoded topic prefix is a bug and should be removed or an option to override at the AMQP component level should be introduced.

Bug location: AMQPComponent.java line 59
{code}
@Override
protected void doStart() throws Exception {
    Set<AMQPConnectionDetails> connectionDetails = getCamelContext().getRegistry().findByType(AMQPConnectionDetails.class);
    if (connectionDetails.size() == 1) {
        AMQPConnectionDetails details = connectionDetails.iterator().next();
        JmsConnectionFactory connectionFactory = new JmsConnectionFactory(details.username(), details.password(), details.uri());
        connectionFactory.setTopicPrefix(""topic://"");
        setConnectionFactory(connectionFactory);
    }
    super.doStart();
}
{code}

Workaround:
{code}
@Bean
public ConnectionFactory amqpConnectionFactory() {
    return new JmsConnectionFactory(username, password, url);
}
{code}
 

 

 

 ",,dmvolod,githubbot,open_matt_nz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 18 03:44:00 UTC 2018,,,,,,,,,,,"0|i3vjyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Jul/18 10:21;dmvolod;hardcoded topic prefix is not a bug and need for backward compatibility with ActiveMQ 5.

Yes, it's possible to add property to the AMQPConnectionDetails which will skip setTopicPrefix if needed.;;;","13/Jul/18 15:00;githubbot;dmvolod opened a new pull request #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425
 
 
   hardcode

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 15:00;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2425

    CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded

    hardcode

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12624

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2425.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2425
    
----

----
;;;","13/Jul/18 15:19;githubbot;dmvolod commented on issue #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425#issuecomment-404864833
 
 
   Thanks, @oscerd . Merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 15:19;githubbot;dmvolod closed pull request #2425: CAMEL-12624: ActiveMQ Artemis AMQP integration issue with topic prefix hardcoded
URL: https://github.com/apache/camel/pull/2425
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-amqp/pom.xml b/components/camel-amqp/pom.xml
index 28e85b0e000..92b3bf2fd15 100644
--- a/components/camel-amqp/pom.xml
+++ b/components/camel-amqp/pom.xml
@@ -96,6 +96,18 @@
       <artifactId>activemq-broker</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.apache.activemq</groupId>
+      <artifactId>artemis-server</artifactId>
+      <version>${activemq-artemis-version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.activemq</groupId>
+      <artifactId>artemis-amqp-protocol</artifactId>
+      <version>${activemq-artemis-version}</version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>org.apache.activemq</groupId>
       <artifactId>activemq-amqp</artifactId>
diff --git a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
index 43aebab1d86..cc1bda660bb 100644
--- a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
+++ b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPComponent.java
@@ -56,7 +56,9 @@ protected void doStart() throws Exception {
         if (connectionDetails.size() == 1) {
             AMQPConnectionDetails details = connectionDetails.iterator().next();
             JmsConnectionFactory connectionFactory = new JmsConnectionFactory(details.username(), details.password(), details.uri());
-            connectionFactory.setTopicPrefix(""topic://"");
+            if (details.setTopicPrefix()) {
+                connectionFactory.setTopicPrefix(""topic://"");
+            }
             setConnectionFactory(connectionFactory);
         }
         super.doStart();
diff --git a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
index 029e17b781b..66732e6c1f9 100644
--- a/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
+++ b/components/camel-amqp/src/main/java/org/apache/camel/component/amqp/AMQPConnectionDetails.java
@@ -28,17 +28,29 @@
     public static final String AMQP_USERNAME = ""AMQP_SERVICE_USERNAME"";
 
     public static final String AMQP_PASSWORD = ""AMQP_SERVICE_PASSWORD"";
+    
+    public static final String AMQP_SET_TOPIC_PREFIX = ""AMQP_SET_TOPIC_PREFIX"";
 
     private final String uri;
 
     private final String username;
 
     private final String password;
+    
+    private final boolean setTopicPrefix;
 
     public AMQPConnectionDetails(String uri, String username, String password) {
         this.uri = uri;
         this.username = username;
         this.password = password;
+        this.setTopicPrefix = true; 
+    }
+    
+    public AMQPConnectionDetails(String uri, String username, String password, boolean setTopicPrefix) {
+        this.uri = uri;
+        this.username = username;
+        this.password = password;
+        this.setTopicPrefix = setTopicPrefix;
     }
 
     public AMQPConnectionDetails(String uri) {
@@ -53,8 +65,9 @@ public static AMQPConnectionDetails discoverAMQP(CamelContext camelContext) {
             int port = Integer.parseInt(property(propertiesComponent, AMQP_PORT, ""5672""));
             String username = property(propertiesComponent, AMQP_USERNAME, null);
             String password = property(propertiesComponent, AMQP_PASSWORD, null);
+            boolean setTopicPrefix = Boolean.parseBoolean(property(propertiesComponent, AMQP_SET_TOPIC_PREFIX, ""true""));
 
-            return new AMQPConnectionDetails(""amqp://"" + host + "":"" + port, username, password);
+            return new AMQPConnectionDetails(""amqp://"" + host + "":"" + port, username, password, setTopicPrefix);
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -71,6 +84,10 @@ public String username() {
     public String password() {
         return password;
     }
+    
+    public boolean setTopicPrefix() {
+        return setTopicPrefix;
+    }
 
     // Helpers
 
diff --git a/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java b/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java
new file mode 100644
index 00000000000..563aa466735
--- /dev/null
+++ b/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/artemis/AMQPEmbeddedBrokerTest.java
@@ -0,0 +1,117 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.amqp.artemis;
+
+import org.apache.activemq.artemis.api.core.RoutingType;
+import org.apache.activemq.artemis.core.config.Configuration;
+import org.apache.activemq.artemis.core.config.CoreAddressConfiguration;
+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;
+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;
+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.EndpointInject;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.amqp.AMQPComponent;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.JndiRegistry;
+import org.apache.camel.impl.PropertyPlaceholderDelegateRegistry;
+import org.apache.camel.test.AvailablePortFinder;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.AMQP_PORT;
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.AMQP_SET_TOPIC_PREFIX;
+import static org.apache.camel.component.amqp.AMQPConnectionDetails.discoverAMQP;
+
+public class AMQPEmbeddedBrokerTest extends CamelTestSupport {
+    
+    static int amqpPort = AvailablePortFinder.getNextAvailable();
+    
+    static EmbeddedActiveMQ server = new EmbeddedActiveMQ();
+    
+    @EndpointInject(uri = ""mock:result"")
+    MockEndpoint resultEndpoint;
+
+    String expectedBody = ""Hello there!"";
+
+    @BeforeClass
+    public static void beforeClass() throws Exception {
+        Configuration config = new ConfigurationImpl();
+        AddressSettings addressSettings = new AddressSettings();
+        // Disable auto create address to make sure that topic name is correct without prefix
+        addressSettings.setAutoCreateAddresses(false);
+        config.addAcceptorConfiguration(""amqp"", ""tcp://0.0.0.0:"" + amqpPort 
+                                        + ""?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300"");
+        config.setPersistenceEnabled(false);
+        config.addAddressesSetting(""#"", addressSettings);
+        config.setSecurityEnabled(false);
+        
+        // Set explicit topic name
+        CoreAddressConfiguration pingTopicConfig = new CoreAddressConfiguration();
+        pingTopicConfig.setName(""topic.ping"");
+        pingTopicConfig.addRoutingType(RoutingType.MULTICAST);
+        
+        config.addAddressConfiguration(pingTopicConfig);
+        
+        server.setConfiguration(config);
+        server.start();
+        System.setProperty(AMQP_PORT, amqpPort + """");
+        System.setProperty(AMQP_SET_TOPIC_PREFIX, ""false"");
+    }
+
+    @AfterClass
+    public static void afterClass() throws Exception {
+        server.stop();
+    }
+    
+    @Test
+    public void testTopicWithoutPrefix() throws Exception {
+        resultEndpoint.expectedMessageCount(1);
+        template.sendBody(""direct:send-topic"", expectedBody);
+        resultEndpoint.assertIsSatisfied();
+    }
+    
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry registry = super.createRegistry();
+        return registry;
+    }
+
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext camelContext = super.createCamelContext();
+        JndiRegistry registry = (JndiRegistry)((PropertyPlaceholderDelegateRegistry)camelContext.getRegistry()).getRegistry();
+        registry.bind(""amqpConnection"", discoverAMQP(camelContext));
+        camelContext.addComponent(""amqp-customized"", new AMQPComponent());
+        return camelContext;
+    }
+    
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            public void configure() throws Exception {
+                from(""direct:send-topic"")
+                    .to(""amqp-customized:topic:topic.ping"");
+                
+                from(""amqp-customized:topic:topic.ping"")
+                    .to(""log:routing"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jul/18 15:19;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/2425
;;;","18/Jul/18 03:44;open_matt_nz;Thanks for the quick action [~dmvolod]. I do believe newer versions of Active MQ no longer need the topic prefix but agree that maintaining backwards compatibility is on balance more important than a seamless experience with the Artemis replacement.;;;",,,,,,,,,,,,,,,,,,,,,,
"Rest DSL with Jetty9|netty4-http components returns 404 instead of 405, when http method is not supported",CAMEL-12621,13169981,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,04/Jul/18 02:44,04/Jul/18 09:37,13/Jul/23 08:31,04/Jul/18 03:00,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,,,,,,,0,,,,"For example when a GET request is expected but client send a POST, currently it returns 404, however, it should return 405 instead, as resource actually exists and just the HTTP method mismatch",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-07-04 02:44:14.0,,,,,,,,,,,"0|i3vizb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel file endpoint loses modification date and length information when preMove is used,CAMEL-12613,13169536,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,02/Jul/18 13:49,04/Jul/18 07:01,13/Jul/23 08:31,03/Jul/18 14:43,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I'll work on a PR with a unit test, thanks!",,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9970,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 03 14:42:15 UTC 2018,,,,,,,,,,,"0|i3vg8f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Jul/18 14:39;githubbot;johnpoth opened a new pull request #2405: [CAMEL-12613] Use GenericFile's absolute path when updating file head…
URL: https://github.com/apache/camel/pull/2405
 
 
   …ers as it is updated when the underlying file is moved
   
   https://issues.apache.org/jira/browse/CAMEL-12613
   
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 14:39;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/2405

    [CAMEL-12613] Use GenericFile's absolute path when updating file head…

    …ers as it is updated when the underlying file is moved
    
    https://issues.apache.org/jira/browse/CAMEL-12613
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-12613

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2405.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2405
    
----
commit 77b24cde0ee5e6fb53f3510399cbfce3192f4eed
Author: jpoth <poth.john@...>
Date:   2018-07-02T14:10:04Z

    [CAMEL-12613] Use GenericFile's absolute path when updating file headers as it is updated when the underlying file is moved

----
;;;","03/Jul/18 14:42;githubbot;johnpoth closed pull request #2405: [CAMEL-12613] Use GenericFile's absolute path when updating file head…
URL: https://github.com/apache/camel/pull/2405
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
index ccf73e7cef7..c984d6644c9 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
@@ -241,8 +241,12 @@ protected boolean isMatched(GenericFile<File> file, String doneFileName, List<Fi
 
     @Override
     protected void updateFileHeaders(GenericFile<File> file, Message message) {
-        long length = file.getFile().length();
-        long modified = file.getFile().lastModified();
+        File upToDateFile = file.getFile();
+        if (fileHasMoved(file)) {
+            upToDateFile = new File(file.getAbsoluteFilePath());
+        }
+        long length = upToDateFile.length();
+        long modified = upToDateFile.lastModified();
         file.setFileLength(length);
         file.setLastModified(modified);
         if (length >= 0) {
@@ -257,4 +261,9 @@ protected void updateFileHeaders(GenericFile<File> file, Message message) {
     public FileEndpoint getEndpoint() {
         return (FileEndpoint) super.getEndpoint();
     }
+
+    private boolean fileHasMoved(GenericFile<File> file) {
+        // GenericFile's absolute path is always up to date whereas the underlying file is not
+        return !file.getFile().getAbsolutePath().equals(file.getAbsoluteFilePath());
+    }
 }
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java
new file mode 100644
index 00000000000..719145d1f13
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerPreMoveLastModifiedTest.java
@@ -0,0 +1,61 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+
+public class FileConsumerPreMoveLastModifiedTest extends ContextTestSupport {
+
+    @Override
+    protected void setUp() throws Exception {
+        deleteDirectory(""target/premove"");
+        super.setUp();
+    }
+
+    public void testPreMoveLastModified() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedMessageCount(1);
+        template.sendBodyAndHeader(""file://target/premove"", ""Hello World"", Exchange.FILE_NAME, ""hello.txt"");
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""file://target/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10&keepLastModified=true"")
+                        .process(new LastModifiedCheckerProcessor())
+                        .log(""Got file ${file:name} modified=${file:modified}"")
+                        .to(""mock:result"");
+            }
+        };
+    }
+
+    private static class LastModifiedCheckerProcessor implements Processor {
+
+        public void process(Exchange exchange) throws Exception {
+            assertTrue(exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class) > 0L);
+            assertTrue(exchange.getIn().getHeader(Exchange.FILE_LENGTH, Long.class) > 0L);
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 14:42;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/2405
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel bean component invokes cached instance of bean (that impl processor) in Registry,CAMEL-12610,13169403,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bedla,bedla,01/Jul/18 14:17,24/Aug/18 09:46,13/Jul/23 08:31,24/Aug/18 09:46,2.20.3,2.21.1,2.22.0,,,,,,,,,,,,,2.23.0,,,,,camel-core,,,,,,0,,,,"Related SO question: [https://stackoverflow.com/questions/51108913/camel-bean-component-invokes-cached-instance-of-named-dependent-bean]

Every invocation of bean component should query Registry for actual instance. Now it is cached in {{BeanProcessor#delegate}} variable, even if endpoint parameter {{cache=false}} specified.

This behavior breaks java-ee compliance: [https://docs.oracle.com/javaee/7/api/javax/enterprise/context/Dependent.html]
{quote}Every invocation of the [{{Context.get(Contextual, CreationalContext)}}|https://docs.oracle.com/javaee/7/api/javax/enterprise/context/spi/Context.html#get-javax.enterprise.context.spi.Contextual-javax.enterprise.context.spi.CreationalContext-] operation of the context object for the {{@Dependent}} scope returns a new instance of the given bean.
{quote}
Marking this as Major, because upgrading of Camel from 2.19.x to 2.2x.x leads to unpredictable results in CDI environment. Since this is tied to CDI environment, this issue is hard to notice even in well junit covered application and can result in major issues in pre-production or production environment.

Full reproducible project with unit test and deployable WAR package, which passes with 2.19.x and lower. Fails with 2.20.x and higher [on Github|https://github.com/bedlaj/camel-dependent-bean]. 

Attachments are based on version 2.21.1",N/A,bedla,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Jul/18 17:07;bedla;Referring objects for originalInstance.png;https://issues.apache.org/jira/secure/attachment/12929877/Referring+objects+for+originalInstance.png","01/Jul/18 17:06;bedla;Stack during second invocation of SomeDependentBean.txt;https://issues.apache.org/jira/secure/attachment/12929875/Stack+during+second+invocation+of+SomeDependentBean.txt",,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 24 09:44:30 UTC 2018,,,,,,,,,,,"0|i3vfev:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"08/Jul/18 01:56;njiang;This issue is caused by the recent change of CAMEL-11375, camel always try to get the processor from bean instance and the processor is is cached no matter the ""cache"" option is set or not. The quick fix could be avoiding using processor usage when the cached option is set.;;;","08/Jul/18 03:16;njiang;Applied patch into master, camel-2.22.x and camel-2.21.x branches.;;;","08/Jul/18 03:20;njiang;The workaround could be let the bean don't implement the Processor interface.;;;","09/Jul/18 08:06;davsclaus;This cause test failures. Please run a full test of camel-core next time before committing.;;;","09/Jul/18 08:07;davsclaus;The CI server also reports this error

https://builds.apache.org/job/Camel/job/master/455/;;;","10/Jul/18 07:34;davsclaus;Okay so the problem is that this is only because of the bean implements Camel's Proccessor instance as Willem writes - you should not really do that - eithers its a POJO bean or its a processor with the .process EIP.

Going to revert this as this breaks stuff, and the reporter can fix his pojo bean;;;","10/Jul/18 08:19;davsclaus;Okay had to revert to keep existing behaviour. ;;;","10/Jul/18 08:45;bedla;Understand [~davsclaus]. Thanks. Our application relies on that. We have implemented hundreds of plugins, which are called dynamically with dynamicRouter based on rules defined in database. Every plugin is CDI bean and implements Processor interface. Because of the dynamicRouter it is not so easy replace bean component with .process EIP. I was thinking about replacing .to(""bean:something"") with .to(""something""), as described in Processor documentation, but it invokes the same instance too.;;;","10/Jul/18 09:07;njiang;I'm sorry the fix break the build(my bad), the issue is caused by the processor which is converted from bean should not be cached. If we set the cached option to false , it should get the new instance from the registry.  If we want to the POJO bean has nothing to do with the Processor converter, we may need to provide other way for use to inject their customer processor.

 ;;;","10/Jul/18 09:52;njiang;Just found the current camel bean cached option is false by default ,  but it doesn't make sense that we keep the converted processor by default in AbstractBeanProcessor.  Can we set the default camel bean cached option to be true? ;;;","10/Jul/18 12:41;njiang;When I changed the default cached option to true,  a very old bug of test org.apache.camel.spring.config.ErrorHandlerTest just came out. As there is no exceptionProcessor bean in the registry, the test should failed. But as the deadLetterErrorHandler uses the RegistryBean by default, it doesn't find out the bean lookup issue when the service is started.;;;","22/Jul/18 17:16;bedla;I dont think, this is resolved. Specially when title and severity of this issue changed. Just telling, that Processor cannot be bean is IMHO only shortcut, not real solution. But if this is expected behavior, that Processor is suposed to be singleton scope, it should be at least mentioned in documentation/javadoc. Maybe in Release Notes too, because it has been changed suddenly without notice.;;;","22/Jul/18 17:53;bedla;The next thing. Right now, it looks, there is no way of using process EIP (as suggested by Claus), with registry lookup and without cache. {{.processRef(""something"")}}, {{.process(""something"")}}, {{.to(""something"")}}, {{.toD(""${header.destination}"")}}, {{.recipientList(simple(${header.destination}))}} and {{dynamicRouter}}. All of these methods invokes cached bean instance with header {{destination=""something""}}. 

The {{.processRef(""something"")}} is recomended way in [Processor docs|http://camel.apache.org/processor.html] 
{quote}If you need to lookup the processor in the Registry then you should use the processRef DSL:{quote}
and it is deprecated in master, but the cache is there too.;;;","24/Aug/18 08:39;davsclaus;Trying to see if we can get a fix for this, so if you set cache=true. We can make it a global option on bean component so you can configure it once.;;;","24/Aug/18 09:44;davsclaus;Okay got a fix, and also adding a global option on bean component to explicit turn on|off cache;;;",,,,,,,,,,,,,,
When using Tokenizer skipFirst - java.util.NoSuchElementException if only one element,CAMEL-12607,13169169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,ssavenko,ssavenko,29/Jun/18 14:07,05/Jul/18 09:00,13/Jul/23 08:31,05/Jul/18 09:00,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I use {{.split().tokenize(""\n"", 10000, true).streaming()}} to stream csv file with header row and skip first line.
 When file contains ONLY header row - {{java.util.NoSuchElementException}} is thrown in [https://github.com/apache/camel/blob/camel-2.21.1/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java#L158], because when it skips first line - it does not check if it has next line and just calls next().",,dmvolod,githubbot,ssavenko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 09:00:04 UTC 2018,,,,,,,,,,,"0|i3vdz3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Jun/18 16:46;githubbot;dmvolod opened a new pull request #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 16:46;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2402

    CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12607

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2402.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2402
    
----
commit 6c634aa249c4ca788cda6f77ffe87d9b6ec48e9a
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-06-29T16:43:12Z

    CAMEL-12607: When using Tokenizer skipFirst -
    java.util.NoSuchElementException if only one element

----
;;;","29/Jun/18 17:14;githubbot;oscerd commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401417881
 
 
   LGTM l'età wait for release

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 17:14;githubbot;oscerd edited a comment on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401417881
 
 
   LGTM lets wait for release

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 17:17;githubbot;dmvolod commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-401418510
 
 
   Thanks, @oscerd , yes, will wait for release to avoid conflicts with build process

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 09:13;githubbot;oscerd commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-402069131
 
 
   You can merge it, I guess.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 09:22;githubbot;dmvolod commented on issue #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402#issuecomment-402073041
 
 
   @oscerd , thanks, merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 09:22;githubbot;dmvolod closed pull request #2402: CAMEL-12607: When using Tokenizer skipFirst java.util.NoSuchElementException if only one element [will merge after 2.22.0 release]
URL: https://github.com/apache/camel/pull/2402
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java b/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
index 0bfd2689a4b..2f05116d8f0 100644
--- a/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
+++ b/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java
@@ -50,7 +50,7 @@
     private final ByteArrayOutputStream bos = new ByteArrayOutputStream();
     
     /**
-     * Creates a new token based group titerator
+     * Creates a new token based group iterator
      *
      * @param camelContext  the camel context
      * @param it            the iterator to group
@@ -155,7 +155,12 @@ private Object doNext() throws IOException, NoTypeConversionAvailableException {
             data = it.next();
 
             if (skipFirst && hasSkipFirst.compareAndSet(false, true)) {
-                data = it.next();
+                if (it.hasNext()) {
+                    data = it.next();
+                } else {
+                    // Content with header only which is marked to skip
+                    data = """";
+                }
             }
 
             // include token in between
diff --git a/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java b/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
index d85cac27c21..5c09847c27e 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/SplitGroupSkipFirstTest.java
@@ -31,6 +31,14 @@ public void testSplitSkipFirst() throws Exception {
 
         assertMockEndpointsSatisfied();
     }
+    
+    public void testSplitSkipFirstOnlyHeader() throws Exception {
+        getMockEndpoint(""mock:group"").expectedBodiesReceived("""");
+
+        template.sendBody(""direct:start"", ""##comment\n"");
+
+        assertMockEndpointsSatisfied();
+    }
 
     @Override
     protected RouteBuilder createRouteBuilder() throws Exception {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 09:22;githubbot;Github user dmvolod closed the pull request at:

    https://github.com/apache/camel/pull/2402
;;;","03/Jul/18 09:30;dmvolod;Waiting until camel-2.22.x branch will create;;;","05/Jul/18 09:00;dmvolod;Thanks [~ssavenko] for reporting.;;;",,,,,,,,,,,,,,,,,,
regression in camel test blueprint behaviour,CAMEL-12606,13169168,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,29/Jun/18 14:01,02/Jul/18 08:04,13/Jul/23 08:31,02/Jul/18 08:04,,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,,,,"This commit https://github.com/apache/camel/commit/1a73fa61a6e0f1125e516798d0cabc1198328684 introduced a regression on how camel test blue print behaves regarding loading of TypeConverters only defined in {{META-INF/services/org/apache/camel/TypeConverter}}:
before the commit such a converter would be loaded because the felix.connect bundle would see the descriptor (i.e. {{META-INF/services/org/apache/camel/TypeConverter}} ) after that commit the TypeConverter is ignored.

",,githubbot,valdar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 29 15:18:21 UTC 2018,,,,,,,,,,,"0|i3vdyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Jun/18 14:47;githubbot;valdar opened a new pull request #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 14:47;githubbot;GitHub user valdar opened a pull request:

    https://github.com/apache/camel/pull/2400

    CAMEL-12606: Fixed regression in camel test blueprint behaviour.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/valdar/camel CAMEL-12606

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2400.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2400
    
----
commit 8d9a2f4c38865e3ef6c629fbb2a75caea1525ef5
Author: Andrea Tarocchi <atarocch@...>
Date:   2018-06-29T14:36:52Z

    CAMEL-12606: Fixed regression in camel test blueprint behaviour.

----
;;;","29/Jun/18 14:49;githubbot;oscerd commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401377742
 
 
   @gzurowski are you already cutting the release? This should be useful for blueprint testing to have in.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 14:55;githubbot;gzurowski commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401379610
 
 
   Not yet, please merge it into `master` so that it will be part of the 2.22.0 release.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 15:15;githubbot;oscerd closed pull request #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java b/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
index 40b5b52ef81..0b1f9156967 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java
@@ -254,7 +254,7 @@ protected boolean canSee(Bundle bundle, Class<?> clazz) {
 
         // it may be running outside real OSGi container such as when unit testing with camel-test-blueprint
         // then we need to use a different canSee algorithm that works outside real OSGi
-        if (bundle.getBundleId() > 0) {
+        if (bundle.getBundleId() >= 0) {
             Bundle root = bundle.getBundleContext().getBundle(0);
             if (root != null && ""org.apache.felix.connect"".equals(root.getSymbolicName())) {
                 return checkCompat(bundle, clazz);
diff --git a/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java
new file mode 100644
index 00000000000..369cc6007a0
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.blueprint.converter;
+
+import org.apache.camel.test.blueprint.CamelBlueprintTestSupport;
+import org.apache.camel.test.blueprint.Foo;
+import org.junit.Test;
+
+public class CustomConverterRegressionTest extends CamelBlueprintTestSupport {
+    
+    @Override
+    protected String getBlueprintDescriptor() {
+        return ""org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml"";
+    }
+
+    @Test
+    public void testCustomConverter() throws Exception {
+        getMockEndpoint(""mock:result"").expectedMessageCount(1);
+        getMockEndpoint(""mock:result"").message(0).body().isInstanceOf(Foo.class);
+
+        template.sendBody(""direct:start"", ""John,Doe"");
+
+        assertMockEndpointsSatisfied();
+
+        Foo foo = getMockEndpoint(""mock:result"").getReceivedExchanges().get(0).getIn().getBody(Foo.class);
+        assertEquals(""John"", foo.getFirst());
+        assertEquals(""Doe"", foo.getLast());
+    }
+
+}
diff --git a/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java
new file mode 100644
index 00000000000..26c2ba3d7ad
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/converter/FooConverterRegression.java
@@ -0,0 +1,37 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.test.blueprint.converter;
+
+import org.apache.camel.Converter;
+import org.apache.camel.TypeConverters;
+import org.apache.camel.test.blueprint.Foo;
+
+public class FooConverterRegression {
+
+    public FooConverterRegression() {
+    }
+    
+    @Converter
+    public Foo convertToFoo(String data) {
+        String[] s = data.split("","");
+        Foo foo = new Foo();
+        foo.setFirst(s[0]);
+        foo.setLast(s[1]);
+        return foo;
+    }
+
+}
diff --git a/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter b/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
index 2b0f5e590bf..ae8dad18d1c 100644
--- a/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
+++ b/components/camel-test-blueprint/src/test/resources/META-INF/services/org/apache/camel/TypeConverter
@@ -15,4 +15,4 @@
 # limitations under the License.
 #
 
-org.apache.camel.test.blueprint.converter.MyConverter
\ No newline at end of file
+org.apache.camel.test.blueprint.converter.FooConverterRegression
\ No newline at end of file
diff --git a/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml b/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml
new file mode 100644
index 00000000000..8548e3e9c6b
--- /dev/null
+++ b/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/converter/CustomConverterRegressionTest.xml
@@ -0,0 +1,36 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
+           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+           xsi:schemaLocation=""
+             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">
+
+  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
+
+    <route>
+      <from uri=""direct:start""/>
+      <convertBodyTo type=""org.apache.camel.test.blueprint.Foo""/>
+      <to uri=""mock:result""/>
+    </route>
+
+  </camelContext>
+
+</blueprint>
+


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 15:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2400
;;;","29/Jun/18 15:18;githubbot;oscerd commented on issue #2400: CAMEL-12606: Fixed regression in camel test blueprint behaviour.
URL: https://github.com/apache/camel/pull/2400#issuecomment-401386315
 
 
   This is merged, I'll leave the JIRA open to backport, but for 2.22.0 we are already fine. Thanks @valdar @gzurowski 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,
Thread stuck in re-delivery loop after interrupting it,CAMEL-12603,13168795,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,NickUK,NickUK,28/Jun/18 07:55,04/Jul/18 08:15,13/Jul/23 08:31,04/Jul/18 08:15,,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"I have experienced an issue where we could not cancel a message stuck in a re-delivery cycle. I was using Jolokia and calling the interrupt method on the DefaultAsyncProcessorAwaitManager for the blocked exchange and I had expected the re-delivery cycle to stop.

This does not happen, and the blocked message continues to get executed and re-delivered. The mapping does get removed from the in-flight messages though. I can see also that the RejectedExecutionException set by the interrupt is also overwritten by the exception thrown by our failing bean. I think the problem here is that there are no checks for this RejectedExecutionException during the re-delivery cycle.

It seems like the following part of the RedeliveryErrorHandler::call should pick up the fact that the exchange has been interrupted:
{code:java}
// only process if the exchange hasn't failed
// and it has not been handled by the error processor
if (isDone(exchange)) {
 callback.done(false);
 return;
}{code}
This is an issue if you have configured a long re-delivery cycle and you have a message retrying that you know will never succeed. ",,githubbot,NickUK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 04 08:15:27 UTC 2018,,,,,,,,,,,"0|i3vbnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Jul/18 12:07;githubbot;davsclaus commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402132134
 
 
   Lets wait to merge this until we get the 2.22.x branch

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 12:12;githubbot;dmvolod commented on a change in pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#discussion_r199783067
 
 

 ##########
 File path: camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
 ##########
 @@ -0,0 +1,136 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            System.out.println(""In-flight messages: "" + size);
 
 Review comment:
   Please avoid using System.out.println if it's not required for use-case. Use logs for it. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Jul/18 13:21;githubbot;NickUK commented on a change in pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#discussion_r199804106
 
 

 ##########
 File path: camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
 ##########
 @@ -0,0 +1,136 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            System.out.println(""In-flight messages: "" + size);
 
 Review comment:
   I have removed these

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jul/18 06:33;githubbot;oscerd commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402377752
 
 
   I'm preparing to merge this one.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jul/18 08:15;githubbot;oscerd commented on issue #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396#issuecomment-402401097
 
 
   Merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jul/18 08:15;githubbot;oscerd closed pull request #2396: CAMEL-12603 - Interrupt fix for messages stuck in a re-delivery loop
URL: https://github.com/apache/camel/pull/2396
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
index c8dafaa19d7..4a9ef4ddf53 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultAsyncProcessorAwaitManager.java
@@ -161,6 +161,7 @@ public void interrupt(Exchange exchange) {
                     interruptedCounter.incrementAndGet();
                 }
                 exchange.setException(new RejectedExecutionException(""Interrupted while waiting for asynchronous callback for exchangeId: "" + exchange.getExchangeId()));
+                exchange.setProperty(Exchange.INTERRUPTED, Boolean.TRUE);
                 entry.getLatch().countDown();
             }
         }
diff --git a/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java b/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
new file mode 100644
index 00000000000..c400d4d9756
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/async/AsyncProcessorAwaitManagerInterruptWithRedeliveryTest.java
@@ -0,0 +1,134 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor.async;
+
+import org.apache.camel.CamelExecutionException;
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.spi.AsyncProcessorAwaitManager;
+import org.apache.camel.util.jndi.JndiContext;
+
+import javax.naming.Context;
+import java.util.Collection;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+
+import static org.mockito.Mockito.atMost;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+
+public class AsyncProcessorAwaitManagerInterruptWithRedeliveryTest extends ContextTestSupport {
+    private CountDownLatch latch;
+    private MyBean bean;
+
+    @Override
+    protected void setUp() throws Exception {
+        latch = new CountDownLatch(2);
+        bean = spy(new MyBean(latch));
+        super.setUp();
+    }
+
+    public void testAsyncAwaitInterrupt() throws Exception {
+        context.getAsyncProcessorAwaitManager().getStatistics().setStatisticsEnabled(true);
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+
+        getMockEndpoint(""mock:before"").expectedBodiesReceived(""Hello Camel"");
+        getMockEndpoint(""mock:result"").expectedMessageCount(0);
+        getMockEndpoint(""mock:error"").expectedMessageCount(0);
+
+        createThreadToInterrupt();
+        try {
+            template.sendBody(""direct:start"", ""Hello Camel"");
+            fail(""Should throw exception"");
+        } catch (CamelExecutionException e) {
+            RejectedExecutionException cause = assertIsInstanceOf(RejectedExecutionException.class, e.getCause());
+            assertTrue(cause.getMessage().startsWith(""Interrupted while waiting for asynchronous callback""));
+        }
+
+        assertMockEndpointsSatisfied();
+
+        // Check we have not reached the full 5 re-deliveries
+        verify(bean, atMost(4)).callMe();
+
+        assertEquals(0, context.getAsyncProcessorAwaitManager().size());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsBlocked());
+        assertEquals(1, context.getAsyncProcessorAwaitManager().getStatistics().getThreadsInterrupted());
+    }
+
+    private void createThreadToInterrupt() {
+        new Thread(() -> {
+            // Allow some time for camel exchange to enter the re-deliveries
+            try {
+                latch.await(1, TimeUnit.SECONDS);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            // Get our blocked thread
+            int size = context.getAsyncProcessorAwaitManager().size();
+            assertEquals(1, size);
+
+            Collection<AsyncProcessorAwaitManager.AwaitThread> threads = context.getAsyncProcessorAwaitManager().browse();
+            AsyncProcessorAwaitManager.AwaitThread thread = threads.iterator().next();
+
+            // Interrupt it
+            String id = thread.getExchange().getExchangeId();
+            context.getAsyncProcessorAwaitManager().interrupt(id);
+        }).start();
+    }
+
+    @Override
+    protected Context createJndiContext() throws Exception {
+        JndiContext jndiContext = new JndiContext();
+
+        jndiContext.bind(""myBean"", bean);
+        return jndiContext;
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() {
+                errorHandler(deadLetterChannel(""mock:error"")
+                    .maximumRedeliveries(5)
+                    .redeliveryDelay(100)
+                    .asyncDelayedRedelivery());
+
+                from(""direct:start"").routeId(""myRoute"")
+                    .to(""mock:before"")
+                    .bean(""myBean"", ""callMe"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+
+    public static class MyBean {
+        private CountDownLatch latch;
+
+        public MyBean(CountDownLatch latch) {
+            this.latch = latch;
+        }
+
+        public void callMe() throws Exception {
+            latch.countDown();
+            throw new Exception();
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jul/18 08:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2396
;;;",,,,,,,,,,,,,,,,,,,,,,
Camel Wordpress don't set basic authentication even if user and password are provided,CAMEL-12602,13168716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,ricardozanini,ricardozanini,27/Jun/18 20:22,29/Jun/18 13:32,13/Jul/23 08:31,28/Jun/18 06:06,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-wordpress,,,,,,0,,,,"When setting user/password for Basic Authentication, the component misses adding the HTTP headers to perform the actual authentication.

Users should see the following message in logs, even though the user/pass properties are set:

{{2018-06-27 17:20:16 [main] WARN o.a.c.c.w.p.WordpressPostProducer - Wordpress Producer hasn't authentication. This may lead to errors during route execution. Wordpress writing operations need authentication.}}

 ",,githubbot,ricardozanini,,,,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 29 13:32:37 UTC 2018,,,,,,,,,,,"0|i3vb6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Jun/18 23:53;githubbot;ricardozanini opened a new pull request #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Jun/18 23:53;githubbot;GitHub user ricardozanini opened a pull request:

    https://github.com/apache/camel/pull/2397

    CAMEL-12602: Fixing issue with basic authentication

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ricardozanini/camel CAMEL-12602

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2397.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2397
    
----
commit e58aefe150c335e60f785426834f62375b0ce3c8
Author: Ricardo Zanini <ricardozanini@...>
Date:   2018-06-27T23:50:04Z

    CAMEL-12602: Fixing issue with basic authentication

----
;;;","28/Jun/18 06:07;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-400921166
 
 
   Thanks. The PR has been merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/Jun/18 06:07;githubbot;oscerd closed pull request #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-wordpress/src/main/docs/wordpress-component.adoc b/components/camel-wordpress/src/main/docs/wordpress-component.adoc
index 54fb3183118..0c1e575a2b2 100644
--- a/components/camel-wordpress/src/main/docs/wordpress-component.adoc
+++ b/components/camel-wordpress/src/main/docs/wordpress-component.adoc
@@ -77,7 +77,7 @@ The `WordpressConfiguration` class can be used to set initial properties configu
 ----
 public void configure() {
     final WordpressConfiguration configuration = new WordpressConfiguration();
-    final WordpressComponent component = new WordpressComponent();
+    final WordpressComponentConfiguration component = new WordpressComponentConfiguration();
     configuration.setApiVersion(""2"");
     configuration.setUrl(""http://yoursite.com/wp-json/"");
     component.setConfiguration(configuration);
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
index 4954623cb34..98c827c9e17 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/WordpressServiceProvider.java
@@ -71,6 +71,7 @@ public void init(WordpressAPIConfiguration config) {
         this.services = new HashMap<>();
         this.services.put(WordpressServicePosts.class, servicePosts);
         this.services.put(WordpressServiceUsers.class, serviceUsers);
+        this.configuration = config;
 
         LOGGER.info(""Wordpress Service Provider initialized using base URL: {}, API Version {}"", config.getApiUrl(), config.getApiVersion());
     }
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
index 6f63c48be59..78b92aa8090 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/auth/WordpressBasicAuthentication.java
@@ -19,6 +19,8 @@
 import org.apache.cxf.common.util.Base64Utility;
 import org.apache.cxf.jaxrs.client.ClientConfiguration;
 import org.apache.cxf.jaxrs.client.WebClient;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Basic Authentication implementation for Wordpress authentication mechanism. Should be used only on tested environments due to lack of security. Be aware that credentials will be passed over each
@@ -30,6 +32,8 @@
  */
 public class WordpressBasicAuthentication extends BaseWordpressAuthentication {
 
+    private static final Logger LOGGER = LoggerFactory.getLogger(BaseWordpressAuthentication.class);
+
     public WordpressBasicAuthentication() {
     }
 
@@ -45,8 +49,11 @@ public WordpressBasicAuthentication(String username, String password) {
     @Override
     public void configureAuthentication(Object api) {
         if (isCredentialsSet()) {
-            final String authorizationHeader = String.format(""Basic "", Base64Utility.encode(String.format(""%s:%s"", this.username, this.password).getBytes()));
+            final String authorizationHeader = String.format(""Basic %s"", Base64Utility.encode(String.format(""%s:%s"", this.username, this.password).getBytes()));
+            LOGGER.info(""Credentials set for user {}"", username);
             WebClient.client(api).header(""Authorization"", authorizationHeader);
+        } else {
+            LOGGER.warn(""Credentials not set because username or password are empty."");
         }
     }
 
diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
index 59037e807b5..5ba844f6b2c 100644
--- a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/service/impl/AbstractWordpressServiceAdapter.java
@@ -57,10 +57,6 @@
         WebClient.getConfig(spi).getInInterceptors().add(new LoggingInInterceptor());
         WebClient.getConfig(spi).getOutInterceptors().add(new LoggingOutInterceptor());
 
-        if (this.authentication != null) {
-            this.authentication.configureAuthentication(spi);
-        }
-
         LOGGER.info(""******* {} API initialized *********"", spi.getClass().getSimpleName());
     }
 
@@ -77,5 +73,8 @@ protected final String getApiVersion() {
     @Override
     public final void setWordpressAuthentication(WordpressAuthentication authentication) {
         this.authentication = authentication;
+        if (this.authentication != null) {
+            this.authentication.configureAuthentication(spi);
+        }
     }
 }
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
index 9adfd6a06ff..ca49e6eb18b 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServicePostsAdapterTest.java
@@ -17,12 +17,14 @@
 package org.apache.camel.component.wordpress.api.service.impl;
 
 import java.util.List;
+import org.apache.camel.component.wordpress.api.auth.WordpressBasicAuthentication;
 import org.apache.camel.component.wordpress.api.model.Content;
 import org.apache.camel.component.wordpress.api.model.Format;
 import org.apache.camel.component.wordpress.api.model.Post;
 import org.apache.camel.component.wordpress.api.model.PostSearchCriteria;
 import org.apache.camel.component.wordpress.api.service.WordpressServicePosts;
 import org.apache.camel.component.wordpress.api.test.WordpressMockServerTestSupport;
+import org.apache.camel.component.wordpress.api.test.WordpressServerHttpRequestHandler;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.hamcrest.CoreMatchers.is;
@@ -39,6 +41,7 @@
     @BeforeClass
     public static void before() {
         servicePosts = serviceProvider.getService(WordpressServicePosts.class);
+        servicePosts.setWordpressAuthentication(new WordpressBasicAuthentication(WordpressServerHttpRequestHandler.USERNAME, WordpressServerHttpRequestHandler.PASSWORD));
     }
 
     @Test
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
similarity index 87%
rename from components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java
rename to components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
index c4ba5a5610b..c9c69c19597 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/ignored/WordpressServiceUsersAdapterTest.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/service/impl/WordpressServiceUsersAdapterTest.java
@@ -14,13 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.camel.component.wordpress.api.service.impl.ignored;
+package org.apache.camel.component.wordpress.api.service.impl;
 
 import java.util.List;
+import org.apache.camel.component.wordpress.api.auth.WordpressBasicAuthentication;
 import org.apache.camel.component.wordpress.api.model.User;
 import org.apache.camel.component.wordpress.api.model.UserSearchCriteria;
 import org.apache.camel.component.wordpress.api.service.WordpressServiceUsers;
 import org.apache.camel.component.wordpress.api.test.WordpressMockServerTestSupport;
+import org.apache.camel.component.wordpress.api.test.WordpressServerHttpRequestHandler;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.hamcrest.CoreMatchers.is;
@@ -37,6 +39,7 @@
     @BeforeClass
     public static void before() {
         serviceUsers = serviceProvider.getService(WordpressServiceUsers.class);
+        serviceUsers.setWordpressAuthentication(new WordpressBasicAuthentication(WordpressServerHttpRequestHandler.USERNAME, WordpressServerHttpRequestHandler.PASSWORD));
     }
 
     @Test
diff --git a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
index 4d5482b2c83..d68c693ac62 100644
--- a/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
+++ b/components/camel-wordpress/src/test/java/org/apache/camel/component/wordpress/api/test/WordpressServerHttpRequestHandler.java
@@ -17,9 +17,12 @@
 package org.apache.camel.component.wordpress.api.test;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.Map;
 import org.apache.cxf.helpers.IOUtils;
+import org.apache.http.Header;
 import org.apache.http.HttpException;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
@@ -33,6 +36,9 @@
 import org.slf4j.LoggerFactory;
 
 public class WordpressServerHttpRequestHandler implements HttpRequestHandler {
+    
+    public static final String USERNAME = ""ben"";
+    public static final String PASSWORD = ""password123"";
 
     private static final Logger LOGGER = LoggerFactory.getLogger(WordpressServerHttpRequestHandler.class);
 
@@ -50,6 +56,12 @@ public WordpressServerHttpRequestHandler(Map<String, String> mockResourceJsonRes
     public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {
         LOGGER.debug(""received request {}"", request);
         final HttpRequestWrapper requestWrapper = HttpRequestWrapper.wrap(request);
+        // make sure that our writing operations have authentication header
+        if (!authenticate(requestWrapper)) {
+            response.setStatusCode(HttpStatus.SC_FORBIDDEN);
+            response.setEntity(new StringEntity(""Forbidden"", ContentType.TEXT_PLAIN));
+            return;
+        }
         final String responseBody = IOUtils.toString(this.getClass().getResourceAsStream(mockResourceJsonResponse.get(requestWrapper.getMethod())));
         if (responseBody == null) {
             LOGGER.warn(""Resource not found on {}. Response body null."", mockResourceJsonResponse);
@@ -58,4 +70,19 @@ public void handle(HttpRequest request, HttpResponse response, HttpContext conte
         response.setEntity(new StringEntity(responseBody, ContentType.APPLICATION_JSON));
     }
 
+    private boolean authenticate(HttpRequestWrapper request) {
+        // read operations don't need to authenticate
+        if (request.getMethod().contentEquals(""GET"")) {
+            return true;
+        }
+        for (Header authorizationHeader : request.getHeaders(""Authorization"")) {
+            // Authorization: Basic base64credentials
+            String base64Credentials = authorizationHeader.getValue().substring(""Basic"".length()).trim();
+            String credentials = new String(Base64.getDecoder().decode(base64Credentials), Charset.forName(""UTF-8""));
+            // credentials = username:password
+            final String[] values = credentials.split("":"", 2);
+            return USERNAME.equals(values[0]) && PASSWORD.equals(values[1]);
+        }
+        return false;
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/Jun/18 06:07;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2397
;;;","29/Jun/18 13:26;githubbot;ricardozanini commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401353495
 
 
   Hi @oscerd! Is it possible to merge this one if 2.21.x branch as well? :fearful: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 13:27;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401353914
 
 
   Yeah, seems I forgot about backporting, thanks for spotting.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Jun/18 13:32;githubbot;oscerd commented on issue #2397: CAMEL-12602: Fixing issue with basic authentication
URL: https://github.com/apache/camel/pull/2397#issuecomment-401355290
 
 
   Backported, sorry

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,
camel-bindy: DefaultFactoryRegistry.unregister throws ConcurrentModificationException,CAMEL-12601,13168630,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,ssavenko,ssavenko,27/Jun/18 13:24,27/Jun/18 20:24,13/Jul/23 08:31,27/Jun/18 20:24,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-bindy,,,,,,0,,,,"When calling new DefaultFactoryRegistry().unregister(StringFormatFactory.class) - java.util.ConcurrentModificationException is thrown. 

Because remove on list is called while streaming this list.",,dmvolod,ssavenko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 27 20:24:00 UTC 2018,,,,,,,,,,,"0|i3vanj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/Jun/18 20:24;dmvolod;Thanks, [~ssavenko], fixed.

Please check.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest Producer - Query Parameters : Wrong query parameter name is used when header substitution is performed ,CAMEL-12594,13167859,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,leonidre,leonidre,24/Jun/18 07:40,09/Jul/18 08:20,13/Jul/23 08:31,09/Jul/18 08:20,2.22.0,,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,rest,,,"CAMEL-11050 [https://github.com/apache/camel/commit/35638b280be7ca43031ea4c5d937590f30495e70]

Introduced a bug in this line 

[https://github.com/apache/camel/blob/6938a4ea6b68e295fae48f52e8e7cb2628f161a3/camel-core/src/main/java/org/apache/camel/component/rest/RestProducer.java#L409]

 

The fix is (probably) to replace the line with :

params.put(entry.getKey(), value);

 

 

 ",,dmvolod,githubbot,leonidre,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11050,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 09 08:20:48 UTC 2018,,,,,,,,,,,"0|i3v653:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"25/Jun/18 06:29;dmvolod;You are welcome to provide PR and JUnit test for it.;;;","05/Jul/18 12:28;githubbot;leonidr opened a new pull request #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409
 
 
   CAMEL-12594 repro

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Jul/18 12:28;githubbot;GitHub user leonidr opened a pull request:

    https://github.com/apache/camel/pull/2409

    CAMEL-12594 repro

    CAMEL-12594 repro

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/leonidr/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2409.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2409
    
----
commit 850681be7b9da8aaf80a7ae4e21b83e3bca13911
Author: leonidr <leonidre@...>
Date:   2018-07-05T12:27:50Z

    CAMEL-12594 repro
    
    CAMEL-12594 repro

----
;;;","05/Jul/18 12:30;leonidre;[~dmvolod] - please find repro JUnit modification here - [https://github.com/apache/camel/pull/2409]

The code fix was already provided.

 

Repro was blind coded in github editor - so I hope it compiles at all ;)

 ;;;","05/Jul/18 13:38;githubbot;dmvolod commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-402724567
 
 
   @leonidr could you please to add fix also to this PR and wait for community review and merge

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Jul/18 13:39;githubbot;dmvolod edited a comment on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-402724567
 
 
   @leonidr could you please to add a fix also to this PR and wait for community review and merge

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Jul/18 07:54;githubbot;davsclaus commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-403392020
 
 
   Thanks for the PR, I am working on getting the fix and merged today

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Jul/18 08:20;githubbot;davsclaus commented on issue #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409#issuecomment-403399015
 
 
   PR merged and a fix applied. Thanks for reporting.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Jul/18 08:20;githubbot;davsclaus closed pull request #2409: CAMEL-12594 repro
URL: https://github.com/apache/camel/pull/2409
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java b/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
index 0145e2bfa89..50ce9428467 100644
--- a/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
+++ b/camel-core/src/test/java/org/apache/camel/component/rest/RestProducerTest.java
@@ -40,17 +40,17 @@ public void shouldCreateDefinedQueryParameters() throws UnsupportedEncodingExcep
     public void shouldCreateOptionalPlaceholderQueryParametersForPresentValues()
         throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""param"", ""header"");
+        message.setHeader(""paramPlaceholderName"", ""paramValue"");
 
-        assertEquals(""param=header"", RestProducer.createQueryParameters(""param={param?}"", message));
+        assertEquals(""param=paramValue"", RestProducer.createQueryParameters(""param={paramPlaceholderName?}"", message));
     }
 
     @Test
     public void shouldCreatePlaceholderQueryParameters() throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""param"", ""header"");
+        message.setHeader(""paramPlaceholderName"", ""paramValue"");
 
-        assertEquals(""param=header"", RestProducer.createQueryParameters(""param={param}"", message));
+        assertEquals(""param=paramValue"", RestProducer.createQueryParameters(""param={paramPlaceholderName}"", message));
     }
 
     @Test
@@ -63,17 +63,17 @@ public void shouldNotCreateOptionalPlaceholderQueryParametersForMissingValues()
         throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
 
-        assertEquals("""", RestProducer.createQueryParameters(""param={param?}"", message));
+        assertEquals("""", RestProducer.createQueryParameters(""param={paramPlaceholderName?}"", message));
     }
 
     @Test
     public void shouldSupportAllCombinations() throws UnsupportedEncodingException, URISyntaxException {
         final DefaultMessage message = new DefaultMessage(camelContext);
-        message.setHeader(""required"", ""header_required"");
-        message.setHeader(""optional_present"", ""header_optional_present"");
+        message.setHeader(""requiredParamPlaceholder"", ""header_required_value"");
+        message.setHeader(""optionalPresentParamPlaceholder"", ""header_optional_present_value"");
 
-        assertEquals(""given=value&required=header_required&optional_present=header_optional_present"",
+        assertEquals(""given=value&required=header_required_value&optional_present=header_optional_present_value"",
             RestProducer.createQueryParameters(
-                ""given=value&required={required}&optional={optional?}&optional_present={optional_present?}"", message));
+                ""given=value&required={requiredParamPlaceholder}&optional={optionalParamPlaceholder?}&optional_present={optionalPresentParamPlaceholder?}"", message));
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Jul/18 08:20;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2409
;;;",,,,,,,,,,,,,,,,,,,
Type converter confusion when camel-cxf and camel-mail are in same classpath,CAMEL-12590,13166965,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,afbagwe@sandia.gov,afbagwe@sandia.gov,19/Jun/18 15:34,07/Aug/18 11:14,13/Jul/23 08:31,07/Aug/18 11:14,2.18.5,,,,,,,,,,,,,,,2.23.0,,,,,camel-cxf,camel-mail,,,,,0,,,,"The CxfRsProducer needs to find a converter to take the String body of an exchange message and turn it into an Object[]. However when camel-mail is present in the classpath the converter search method picks: 
 
 com.sun.mail.imap.SortTerm[] org.apache.camel.component.mail.MailConverters.toSortTerm(String msg) 
 
This causes the CxfRsProducer to bomb on a NoSuchMethodException. 
 
 If camel-mail is removed, the CxfRsProducer client works, finding the right String -> Object[] converter.

[Issue discussed here on Camel user mailing list|http://camel.465427.n5.nabble.com/Type-converter-misbehavior-with-camel-cxf-and-camel-mail-td5820546.html]

 ",,afbagwe@sandia.gov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 07 11:14:44 UTC 2018,,,,,,,,,,,"0|i3v0mv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Aug/18 11:14;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Surviving Header AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE affects following aggregations,CAMEL-12589,13166953,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,grigoni,grigoni,19/Jun/18 14:23,30/Jul/18 11:46,13/Jul/23 08:31,05/Jul/18 12:57,2.21.0,2.21.1,,,,,,,,,,,,,,2.21.2,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"When AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE is once set true it survives current aggregation processing and affects in unexpected way following aggregation by triggering ""forceCompletionOfAllGroups()"" again

in next code snippet might be needed some additional handling when the header is true:
{code:java}
protected void doProcess(Exchange exchange) throws Exception {
...
        // check for the special header to force completion of all groups (inclusive of the message)
        boolean completeAllGroupsInclusive = exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE, false, boolean.class);
        if (completeAllGroupsInclusive) {
            forceCompletionOfAllGroups();
        }
...

{code}
this consideration is made by analysing similar behavior and lifecycle of header AGGREGATION_COMPLETE_ALL_GROUPS:
{code:java}
private List<Exchange> doAggregation(String key, Exchange newExchange) throws CamelExchangeException {
...
...        
        // check for the special exchange property to force completion of all groups
        boolean completeAllGroups = answer.getProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, false, boolean.class);
        if (completeAllGroups) {
            // remove the exchange property so we do not complete again
            answer.removeProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS);
            forceCompletionOfAllGroups();
        } else if (isCompletionOnNewCorrelationGroup() && originalExchange == null) {
            // its a new group so force complete of all existing groups
            forceCompletionOfAllGroups();
        }
...
{code}",,davsclaus,grigoni,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 13:04:14 UTC 2018,,,,,,,,,,,"0|i3v0k7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Jul/18 05:50;grigoni;changed to major because _any_ aggregation following the one using this header is affected. the workaround I use is to filter the header out. When you are unaware of this behavior you just loose control of next aggregations;;;","05/Jul/18 12:28;davsclaus;Okay it was not a minor as you cannot easily workaround this in the custom aggregation repository, where you can remove these headers yourself.

 ;;;","05/Jul/18 12:57;davsclaus;Thanks for reporting;;;","05/Jul/18 13:04;grigoni;your careful reviewing is always appreciated, thx!;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel-google-mail: Remove scopes from configuration. This option is never really used.,CAMEL-12581,13166281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,15/Jun/18 07:29,15/Jun/18 07:46,13/Jul/23 08:31,15/Jun/18 07:46,,,,,,,,,,,,,,,,2.22.0,,,,,camel-google-mail,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-06-15 07:29:59.0,,,,,,,,,,,"0|i3uwf3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-apply CAMEL-12104 Unintuitive default cxf timeout behavior,CAMEL-12577,13166048,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,14/Jun/18 09:16,14/Jun/18 11:52,13/Jul/23 08:31,14/Jun/18 11:52,,,,,,,,,,,,,,,,2.22.0,,,,,camel-cxf,,,,,,0,,,,CAMEL-12104 was temporarily reverted via CAMEL-12409. We can re-apply CAMEL-12104 through reverting CAMEL-12409 now.,,acosentino,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 14 11:52:23 UTC 2018,,,,,,,,,,,"0|i3uupj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Jun/18 09:56;githubbot;ppalaga opened a new pull request #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374
 
 
   behavior

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Jun/18 09:56;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2374

    CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout

    behavior

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12577

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2374.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2374
    
----
commit ebbf89550078b4f99f30804c89296a0e56612c57
Author: Peter Palaga <ppalaga@...>
Date:   2018-06-14T09:32:16Z

    CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
    behavior

----
;;;","14/Jun/18 10:11;acosentino;May I ask you why CAMEL-12104 can be re-applied?;;;","14/Jun/18 11:40;ppalaga;CAMEL-12104 was temporarily reverted - see CAMEL-12409 It was actually a favor made towards us in WFC till we are able to consume CXF 3.2.4 via WF 13. WF 13 appeared recently so the revert of CAMEL-12104 can be undone now. ;;;","14/Jun/18 11:41;acosentino;Sorry, thanks for explaining. I didn't remember about this.;;;","14/Jun/18 11:52;githubbot;oscerd closed pull request #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
index 3ba12bf138a..95705c7a83d 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
@@ -191,7 +191,7 @@ public void done(boolean doneSync) {
                         }
                     });
 
-                } else if (continuation.isResumed()) {
+                } else if (!continuation.isTimeout() && continuation.isResumed()) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         setResponseBack(cxfExchange, camelExchange);
@@ -199,7 +199,8 @@ public void done(boolean doneSync) {
                         CxfConsumer.this.doneUoW(camelExchange);
                         throw ex;
                     }
-                } else if (!continuation.isResumed() && !continuation.isPending()) {
+
+                } else if (continuation.isTimeout() || (!continuation.isResumed() && !continuation.isPending())) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         if (!continuation.isPending()) {
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
index 29d9fa3eb90..fef3818f43a 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
@@ -104,7 +104,7 @@ public void done(boolean doneSync) {
                 });
                 return null;
             }
-            if (continuation.isResumed()) {
+            if (!continuation.isTimeout() && continuation.isResumed()) {
                 cxfExchange.put(SUSPENED, Boolean.FALSE);
                 org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                 try {
@@ -114,7 +114,7 @@ public void done(boolean doneSync) {
                     throw ex;
                 }
             } else {
-                if (!continuation.isPending()) {
+                if (continuation.isTimeout() || !continuation.isPending()) {
                     cxfExchange.put(SUSPENED, Boolean.FALSE);
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     camelExchange.setException(new ExchangeTimedOutException(camelExchange, endpoint.getContinuationTimeout()));
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
index cfe31bde6e5..d628501ddb3 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
@@ -25,7 +25,6 @@
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.camel.util.AsyncProcessorHelper;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class CxfConsumerContinuationTimeoutTest extends CamelTestSupport {
@@ -114,7 +113,6 @@ public void testNoTimeout() throws Exception {
     }
 
     @Test
-    @Ignore(""CAMEL-12104"")
     public void testTimeout() throws Exception {
         String out = template.requestBodyAndHeader(""direct:start"", ""Bye World"", ""priority"", ""slow"", String.class);
         assertTrue(out.contains(""The OUT message was not received within: 5000 millis.""));


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","14/Jun/18 11:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2374
;;;","14/Jun/18 11:52;githubbot;oscerd commented on issue #2374: CAMEL-12577: Re-apply CAMEL-12104 Unintuitive default cxf timeout
URL: https://github.com/apache/camel/pull/2374#issuecomment-397267577
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,
camel-cxfrs: NPE on GET request with Content-Type header,CAMEL-12575,13165641,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ramu11,chribble,chribble,12/Jun/18 18:15,01/Aug/18 07:24,13/Jul/23 08:31,01/Aug/18 07:24,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-cxfrs,,,,,,0,,,,"This commit  [https://github.com/apache/camel/commit/e4ad40f2eebb68cfde175b171538e26b278f63f6] modified DefaultCxfRsBinding.populateCxfRsResponseFromExchange in a way that causes an NPE on line #116 when a GET request is made with the Content-Type header set. Since Camel copies the request headers into the response, this causes the check for Content-Type to find the header and the code after that assumes that cxfExchange.getOutMessage() is non-null.

I can work around this by asking clients not to send the Content-Type header (which is generally meaningless for a GET), but I cannot force them not to send it. I think I can also add header filtering before the endpoint is executed to strip the Content-Type header for GET requests, but ideally DefaultCxfRsBinding.populateCxfRsResponseFromExchange would not call cxfExchange.getOutMessage().putIfAbsent if getOutMessage returns null.",,chribble,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 01 07:24:36 UTC 2018,,,,,,,,,,,"0|i3us73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"18/Jun/18 11:20;davsclaus;Are you able to work on a PR / patch to help fix this?

https://github.com/apache/camel/blob/master/CONTRIBUTING.md;;;","31/Jul/18 12:12;githubbot;ramu11 opened a new pull request #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446
 
 
   CAMEL-12575:NPE on GET request with Content-Type header

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/18 12:12;githubbot;GitHub user ramu11 opened a pull request:

    https://github.com/apache/camel/pull/2446

    CAMEL-12575:NPE on GET request with Content-Type header

    CAMEL-12575:NPE on GET request with Content-Type header

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramu11/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2446.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2446
    
----
commit f967f06d029a3ae8f008d13fbe8a392f1e5706d2
Author: Ramu <kkakarla@...>
Date:   2018-07-31T12:10:45Z

    CAMEL-12575:NPE on GET request with Content-Type header

----
;;;","31/Jul/18 14:58;githubbot;oscerd commented on issue #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446#issuecomment-409252000
 
 
   And maybe it would be good to use ObjectHelper too to check for null

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 07:24;githubbot;oscerd commented on issue #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446#issuecomment-409476750
 
 
   Thanks, merged on master, 2.22.x and 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 07:24;githubbot;oscerd closed pull request #2446: CAMEL-12575:NPE on GET request with Content-Type header
URL: https://github.com/apache/camel/pull/2446
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
index 0ecfd7b4972..1ae15e91fe3 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
@@ -40,6 +40,7 @@
 import org.apache.camel.spi.HeaderFilterStrategy;
 import org.apache.camel.spi.HeaderFilterStrategyAware;
 import org.apache.camel.util.ExchangeHelper;
+import org.apache.camel.util.ObjectHelper;
 import org.apache.cxf.helpers.CastUtils;
 import org.apache.cxf.helpers.HttpHeaderHelper;
 import org.apache.cxf.jaxrs.impl.MetadataMap;
@@ -92,8 +93,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
             
             if (response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS) != null) {
                 Map<String, Object> headers = CastUtils.cast((Map<?, ?>)response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));
+                }
                 final Map<String, List<String>> cxfHeaders =
                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
                 
@@ -113,8 +116,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,
                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));
             }
             if (response.getHeader(Exchange.CONTENT_TYPE) != null) {
-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {
+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, 
                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));
+                }
                 final Map<String, List<String>> cxfHeaders =
                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/18 07:24;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2446
;;;",,,,,,,,,,,,,,,,,,,,,,
ClassCastException thrown KafkaSpanDecorator,CAMEL-12573,13165602,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,akhettar,akhettar,12/Jun/18 15:41,14/Jun/18 08:25,13/Jul/23 08:31,13/Jun/18 06:19,,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-opentracing,,,,,,0,,,,"ClassCastException is thrown by `KafkaSpanDecorator` for the Partition and the Offset header values. The fix to this is to cast the partition to an Integer and the Offset to a Long. I have got a fix for it and here is a pull request for it: https://github.com/apache/camel/pull/2372 
{code:java}
2018-06-12 16:36:26.224 WARN 34820 --- [kaConsumer[ocr]] o.a.camel.opentracing.OpenTracingTracer : OpenTracing: Failed to capture tracing data

java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
at org.apache.camel.opentracing.decorators.KafkaSpanDecorator.pre(KafkaSpanDecorator.java:61) ~[camel-opentracing-2.21.0.jar:2.21.0]
at org.apache.camel.opentracing.OpenTracingTracer$OpenTracingRoutePolicy.onExchangeBegin(OpenTracingTracer.java:297) ~[camel-opentracing-2.21.0.jar:2.21.0]
at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:495) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:149) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.21.0.jar:2.21.0]
at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.doRun(KafkaConsumer.java:295) [camel-kafka-2.21.0.jar:2.21.0]
at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:187) [camel-kafka-2.21.0.jar:2.21.0]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_151]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_151]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_151]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_151]
at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]
{code}
{code:java}
 {code}",,acosentino,akhettar,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 14 08:25:30 UTC 2018,,,,,,,,,,,"0|i3uryf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Jun/18 15:47;githubbot;akhettar opened a new pull request #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372
 
 
   I have introduced a generic method which extracts the values of the `Partition` and the `Offset` from the Exchange headers according to their corresponding types.
   
   Here is the Jira ticket for it.https://issues.apache.org/jira/browse/CAMEL-12573

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Jun/18 15:47;githubbot;GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/2372

    CAMEL-12573: Fixing class cast exception

    I have introduced a generic method which extracts the values of the `Partition` and the `Offset` from the Exchange headers according to their corresponding types.
    
    Here is the Jira ticket for it.https://issues.apache.org/jira/browse/CAMEL-12573

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2372.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2372
    
----
commit aa9464cdd8a30ff9a88bf893999158ec7c8ae40e
Author: akhettar <ayache@...>
Date:   2018-06-12T15:31:12Z

    Fixing class cast exception. Handling kafka.Partition as Integer and kafka.Offset as a Long.

----
;;;","12/Jun/18 15:48;akhettar;Can anyone review this for me, please? Pull request: [https://github.com/apache/camel/pull/2372] ;;;","12/Jun/18 15:49;githubbot;oscerd commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396639580
 
 
   Can you please add the Jira number to the commit message? Otherwise it looks good.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Jun/18 16:10;githubbot;akhettar commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396646766
 
 
   @oscerd I've just amended the commit with the Jira nunber

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Jun/18 16:11;githubbot;akhettar commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396646766
 
 
   @oscerd I've just amended the commit with the Jira number

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jun/18 06:19;githubbot;oscerd commented on issue #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372#issuecomment-396826349
 
 
   Merged on master, 2.21.x and 2.20.x, thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jun/18 06:19;githubbot;oscerd closed pull request #2372: CAMEL-12573: Fixing class cast exception
URL: https://github.com/apache/camel/pull/2372
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java b/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
index ecc92797d58..1ec0a6886eb 100644
--- a/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
+++ b/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java
@@ -58,7 +58,7 @@ public String getDestination(Exchange exchange, Endpoint endpoint) {
     public void pre(Span span, Exchange exchange, Endpoint endpoint) {
         super.pre(span, exchange, endpoint);
 
-        String partition = (String)exchange.getIn().getHeader(PARTITION);
+        String partition = getValue(exchange, PARTITION, Integer.class);
         if (partition != null) {
             span.setTag(KAFKA_PARTITION_TAG, partition);
         }
@@ -73,10 +73,22 @@ public void pre(Span span, Exchange exchange, Endpoint endpoint) {
             span.setTag(KAFKA_KEY_TAG, key);
         }
 
-        String offset = (String)exchange.getIn().getHeader(OFFSET);
+        String offset = getValue(exchange, OFFSET, Long.class);
         if (offset != null) {
             span.setTag(KAFKA_OFFSET_TAG, offset);
         }
     }
 
+    /**
+     * Extracts header value from the exchange for given header
+     * @param exchange the {@link Exchange}
+     * @param header the header name
+     * @param type the class type of the exchange header
+     * @return
+     */
+    private <T> String getValue(final Exchange exchange, final String header, Class<T> type) {
+         T partition = exchange.getIn().getHeader(header, type);
+         return partition != null ? String.valueOf(partition) : exchange.getIn().getHeader(header, String.class);
+    }
+
 }
diff --git a/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java b/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
index b3eda9c3770..2c51def5b47 100644
--- a/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
+++ b/components/camel-opentracing/src/test/java/org/apache/camel/opentracing/decorators/KafkaSpanDecoratorTest.java
@@ -19,6 +19,7 @@
 import io.opentracing.mock.MockSpan;
 import io.opentracing.mock.MockTracer;
 
+import jdk.nashorn.internal.IntDeque;
 import org.apache.camel.Endpoint;
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
@@ -59,7 +60,7 @@ public void testGetDestinationNoHeaderTopic() {
     }
 
     @Test
-    public void testPre() {
+    public void testPreOffsetAndPartitionAsStringHeader() {
         String testKey = ""TestKey"";
         String testOffset = ""TestOffset"";
         String testPartition = ""TestPartition"";
@@ -72,8 +73,8 @@ public void testPre() {
         Mockito.when(endpoint.getEndpointUri()).thenReturn(""test"");
         Mockito.when(exchange.getIn()).thenReturn(message);
         Mockito.when(message.getHeader(KafkaSpanDecorator.KEY)).thenReturn(testKey);
-        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET)).thenReturn(testOffset);
-        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION)).thenReturn(testPartition);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET, String.class)).thenReturn(testOffset);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION, String.class)).thenReturn(testPartition);
         Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION_KEY)).thenReturn(testPartitionKey);
 
         SpanDecorator decorator = new KafkaSpanDecorator();
@@ -89,4 +90,29 @@ public void testPre() {
         assertEquals(testPartitionKey, span.tags().get(KafkaSpanDecorator.KAFKA_PARTITION_KEY_TAG));
     }
 
+    @Test
+    public void testPrePartitionAsIntegerHeaderAndOffsetAsLongHeader() {
+        Long testOffset = 4875454l;
+        Integer testPartition = 0;
+
+        Endpoint endpoint = Mockito.mock(Endpoint.class);
+        Exchange exchange = Mockito.mock(Exchange.class);
+        Message message = Mockito.mock(Message.class);
+
+        Mockito.when(endpoint.getEndpointUri()).thenReturn(""test"");
+        Mockito.when(exchange.getIn()).thenReturn(message);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.OFFSET, Long.class)).thenReturn(testOffset);
+        Mockito.when(message.getHeader(KafkaSpanDecorator.PARTITION, Integer.class)).thenReturn(testPartition);
+
+        SpanDecorator decorator = new KafkaSpanDecorator();
+
+        MockTracer tracer = new MockTracer();
+        MockSpan span = tracer.buildSpan(""TestSpan"").start();
+
+        decorator.pre(span, exchange, endpoint);
+
+        assertEquals(String.valueOf(testOffset), span.tags().get(KafkaSpanDecorator.KAFKA_OFFSET_TAG));
+        assertEquals(String.valueOf(testPartition), span.tags().get(KafkaSpanDecorator.KAFKA_PARTITION_TAG));
+    }
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Jun/18 06:19;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2372
;;;","13/Jun/18 16:29;akhettar;[~ancosen] any idea in which release this fix is going to be?

Thanks;;;","13/Jun/18 16:32;acosentino;2.22.0,2.21.2 and 2.20.4;;;","14/Jun/18 08:25;akhettar;Many thanks;;;",,,,,,,,,,,,,,,,,
Seda component forgets URI setting when duplicates are present,CAMEL-12571,13165276,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,grigoni,grigoni,11/Jun/18 08:57,30/Jul/18 11:46,13/Jul/23 08:31,05/Jul/18 14:19,2.21.0,,,,,,,,,,,,,,,2.23.0,,,,,camel-core,,,,,,0,,,,"when {color:#008000}blockWhenFull=true&blockWhenFull=true {color}{color:#333333}is set twice the option is not set at all{color}

{color:#333333}it might out of context but from my point of view the last one should win (as it is in a properties file){color}

{color:#333333}of if an error should be thrown could also be welcome{color}

 

{color:#333333}I quickly adapted{color} SedaComponentConfigurationAndDocumentationTest (I know, it uses now deprecated stuff) and the result is an array of set values ( 2 in this case) and the test fails.

kind regards

G.

 ",,davsclaus,grigoni,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 05 13:49:01 UTC 2018,,,,,,,,,,,"0|i3upy7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Jun/18 09:04;davsclaus;What web ui are you referring to?

 ;;;","11/Jun/18 10:44;grigoni;Hi Claus,

my wording was wrong, I meant like properties were last one wins

 ;;;","18/Jun/18 11:27;davsclaus;Thanks I have reproduced the issue;;;","19/Jun/18 14:10;grigoni;happy to contribute, I thank you;;;","05/Jul/18 13:49;davsclaus;A fix for this has a potential fix in default component so will only do this on master onwards. Its not a big bug or issue as its end user that has misconfigured camel.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Support fixed property placeholders from Aries blueprint,CAMEL-12570,13165271,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,11/Jun/18 08:48,19/Dec/19 17:36,13/Jul/23 08:31,11/Jun/18 10:04,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-blueprint,,,,,,0,,,,,,acosentino,ggrzybek,githubbot,,,,,"valdar commented on pull request #2997: CAMEL-12570: fixed Camel-FTP component does not set CamelFtpReplyCode…
URL: https://github.com/apache/camel/pull/2997
 
 
   … in some case(ex 530)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jun/19 12:03;githubbot;600","valdar commented on pull request #2997: CAMEL-12570: fixed Camel-FTP component does not set CamelFtpRep…
URL: https://github.com/apache/camel/pull/2997
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jun/19 12:44;githubbot;600",,,,,,0,1200,,,0,1200,,,KARAF-5776,,,,,,,,ARIES-1858,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 23 12:30:07 UTC 2018,,,,,,,,,,,"0|i3upx3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Jun/18 08:51;acosentino;Please first merge on master for 2.22.0 release.;;;","11/Jun/18 09:52;githubbot;grgrzybek opened a new pull request #2369: [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…
URL: https://github.com/apache/camel/pull/2369
 
 
   …ries.proxy 1.1.1

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jun/18 09:52;githubbot;GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/2369

    [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…

    …ries.proxy 1.1.1

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-12570-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2369.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2369
    
----
commit dfe81111eeaa55a4ea2b792b9541706a06d67bbd
Author: Grzegorz Grzybek <gr.grzybek@...>
Date:   2018-06-11T09:45:17Z

    [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, aries.proxy 1.1.1

----
;;;","11/Jun/18 09:57;githubbot;grgrzybek closed pull request #2369: [CAMEL-12570] Upgrade to blueprint.core 1.10.0, blueprint.cm 1.3.0, a…
URL: https://github.com/apache/camel/pull/2369
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
index ad9a5cafaa21..ac1ff46352e2 100644
--- a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
+++ b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintPropertiesParser.java
@@ -26,7 +26,9 @@
 
 import org.apache.aries.blueprint.ExtendedBeanMetadata;
 import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder;
+import org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt;
 import org.apache.aries.blueprint.ext.PropertyPlaceholder;
+import org.apache.aries.blueprint.ext.PropertyPlaceholderExt;
 import org.apache.camel.component.properties.DefaultPropertiesParser;
 import org.apache.camel.component.properties.PropertiesComponent;
 import org.apache.camel.component.properties.PropertiesParser;
@@ -47,8 +49,9 @@
     private final PropertiesComponent propertiesComponent;
     private final BlueprintContainer container;
     private final PropertiesParser delegate;
-    private final Set<AbstractPropertyPlaceholder> placeholders = new LinkedHashSet<>();
+    private final Set<PropertyPlaceholderWrapper> placeholders = new LinkedHashSet<PropertyPlaceholderWrapper>();
     private Method method;
+    private Method oldMethod;
 
     public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, BlueprintContainer container, PropertiesParser delegate) {
         super(propertiesComponent);
@@ -71,7 +74,8 @@ public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, Bluepr
             ComponentMetadata meta = container.getComponentMetadata(id);
             if (meta instanceof ExtendedBeanMetadata) {
                 Class<?> clazz = ((ExtendedBeanMetadata) meta).getRuntimeClass();
-                if (clazz != null && AbstractPropertyPlaceholder.class.isAssignableFrom(clazz)) {
+                if (clazz != null && (AbstractPropertyPlaceholder.class.isAssignableFrom(clazz)
+                        || AbstractPropertyPlaceholderExt.class.isAssignableFrom(clazz))) {
                     ids.add(id);
                 }
             }
@@ -88,15 +92,16 @@ public BlueprintPropertiesParser(PropertiesComponent propertiesComponent, Bluepr
     public void addPropertyPlaceholder(String id) {
         Object component = container.getComponentInstance(id);
 
-        if (component instanceof AbstractPropertyPlaceholder) {
-            AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;
-            placeholders.add(placeholder);
+        // new API
+        if (component instanceof AbstractPropertyPlaceholderExt) {
+            AbstractPropertyPlaceholderExt placeholder = (AbstractPropertyPlaceholderExt) component;
+            placeholders.add(new AbstractPropertyPlaceholderExtWrapper(placeholder));
 
             log.debug(""Adding Blueprint PropertyPlaceholder: {}"", id);
 
             if (method == null) {
                 try {
-                    method = AbstractPropertyPlaceholder.class.getDeclaredMethod(""retrieveValue"", String.class);
+                    method = AbstractPropertyPlaceholderExt.class.getDeclaredMethod(""retrieveValue"", String.class);
                     method.setAccessible(true);
                 } catch (NoSuchMethodException e) {
                     throw new IllegalStateException(""Cannot add blueprint property placeholder: "" + id
@@ -104,6 +109,24 @@ public void addPropertyPlaceholder(String id) {
                 }
             }
         }
+
+        // old, deprecated API
+        if (component instanceof AbstractPropertyPlaceholder) {
+            AbstractPropertyPlaceholder placeholder = (AbstractPropertyPlaceholder) component;
+            placeholders.add(new AbstractPropertyPlaceholderWrapper(placeholder));
+
+            log.debug(""Adding Blueprint PropertyPlaceholder: {}"", id);
+
+            if (oldMethod == null) {
+                try {
+                    oldMethod = AbstractPropertyPlaceholder.class.getDeclaredMethod(""retrieveValue"", String.class);
+                    oldMethod.setAccessible(true);
+                } catch (NoSuchMethodException e) {
+                    throw new IllegalStateException(""Cannot add blueprint property placeholder: "" + id
+                            + "" as the method retrieveValue is not accessible"", e);
+                }
+            }
+        }
     }
 
     @Override
@@ -122,12 +145,15 @@ public String parseProperty(String key, String value, Properties properties) {
 
         // lookup key in blueprint and return its value
         if (answer == null && key != null) {
-            for (AbstractPropertyPlaceholder placeholder : placeholders) {
+            for (PropertyPlaceholderWrapper placeholder : placeholders) {
                 boolean isDefault = false;
                 if (placeholders.size() > 1) {
                     // okay we have multiple placeholders and we want to return the answer that
                     // is not the default placeholder if there is multiple keys
-                    if (placeholder instanceof PropertyPlaceholder) {
+                    if (placeholder instanceof PropertyPlaceholderExt) {
+                        Map map = ((PropertyPlaceholderExt) placeholder).getDefaultProperties();
+                        isDefault = map != null && map.containsKey(key);
+                    } else if (placeholder instanceof PropertyPlaceholder) {
                         Map map = ((PropertyPlaceholder) placeholder).getDefaultProperties();
                         isDefault = map != null && map.containsKey(key);
                     }
@@ -135,7 +161,7 @@ public String parseProperty(String key, String value, Properties properties) {
                 }
                 
                 try {
-                    String candidate = (String) ObjectHelper.invokeMethod(method, placeholder, key);
+                    String candidate = placeholder.retrieveValue(key);
     
                     if (candidate != null) {
                         if (answer == null || !isDefault) {
@@ -164,4 +190,44 @@ public String parseProperty(String key, String value, Properties properties) {
         return answer;
     }
 
+    private interface PropertyPlaceholderWrapper {
+
+        /**
+         * Retrieves the String value (or {@code null}) from underlying placeholder
+         * @param key
+         * @return
+         */
+        String retrieveValue(String key);
+    }
+
+    private class AbstractPropertyPlaceholderExtWrapper implements PropertyPlaceholderWrapper {
+
+        private AbstractPropertyPlaceholderExt delegate;
+
+        public AbstractPropertyPlaceholderExtWrapper(AbstractPropertyPlaceholderExt delegate) {
+            this.delegate = delegate;
+        }
+
+        @Override
+        public String retrieveValue(String key) {
+            Object v = ObjectHelper.invokeMethod(method, delegate, key);
+            return v == null ? null : v.toString();
+        }
+    }
+
+    private class AbstractPropertyPlaceholderWrapper implements PropertyPlaceholderWrapper {
+
+        private AbstractPropertyPlaceholder delegate;
+
+        public AbstractPropertyPlaceholderWrapper(AbstractPropertyPlaceholder delegate) {
+            this.delegate = delegate;
+        }
+
+        @Override
+        public String retrieveValue(String key) {
+            Object v = ObjectHelper.invokeMethod(oldMethod, delegate, key);
+            return v == null ? null : v.toString();
+        }
+    }
+
 }
diff --git a/components/camel-test-blueprint/pom.xml b/components/camel-test-blueprint/pom.xml
index 8b351f3310ed..b33ac4d6b470 100644
--- a/components/camel-test-blueprint/pom.xml
+++ b/components/camel-test-blueprint/pom.xml
@@ -66,14 +66,9 @@
              with felix-connect, and you may get a weird error if wrong order -->
         <dependency>
             <groupId>org.apache.aries.proxy</groupId>
-            <artifactId>org.apache.aries.proxy.api</artifactId>
+            <artifactId>org.apache.aries.proxy</artifactId>
             <version>${aries-blueprint-proxy-version}</version>
         </dependency>
-        <dependency>
-            <groupId>org.apache.aries.proxy</groupId>
-            <artifactId>org.apache.aries.proxy.impl</artifactId>
-            <version>${aries-blueprint-proxy-impl-version}</version>
-        </dependency>
         <dependency>
             <groupId>org.apache.aries.blueprint</groupId>
             <artifactId>org.apache.aries.blueprint.api</artifactId>
diff --git a/parent/pom.xml b/parent/pom.xml
index c8e26665ba2d..5b63fd2a5f4e 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -53,10 +53,10 @@
     <apache-gora-version>0.8</apache-gora-version>
     <apache-mime4j-version>0.7.2</apache-mime4j-version>
     <aries-blueprint-api-version>1.0.1</aries-blueprint-api-version>
-    <aries-blueprint-cm-version>1.0.6</aries-blueprint-cm-version>
-    <aries-blueprint-core-version>1.4.4</aries-blueprint-core-version>
-    <aries-blueprint-proxy-version>1.0.1</aries-blueprint-proxy-version>
-    <aries-blueprint-proxy-impl-version>1.0.6</aries-blueprint-proxy-impl-version>
+    <aries-blueprint-cm-version>1.3.0</aries-blueprint-cm-version>
+    <aries-blueprint-core-version>1.10.0</aries-blueprint-core-version>
+    <aries-blueprint-proxy-version>1.1.1</aries-blueprint-proxy-version>
+    <aries-blueprint-proxy-impl-version>1.1.1</aries-blueprint-proxy-impl-version>
     <aries-spifly-version>1.0.8</aries-spifly-version>
     <aries-util-version>1.1.3</aries-util-version>
     <arquillian-container-se-managed-version>1.0.0.Final</arquillian-container-se-managed-version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Jun/18 09:57;githubbot;Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/2369
;;;","12/Jun/18 08:13;ggrzybek;[~ancosen], [~gnodet], [~jbonofre], with this fix, Camel will work with blueprint.core 1.10.0, *but* if we upgrade Karaf 4.2.1 to blueprint.core 1.10.0 / blueprint.cm 1.3.0, existing Camel applications will stop working (expecting {{org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder}} to be derived from {{org.apache.aries.blueprint.ext.AbstractPropertyPlaceholder}} and not from new {{org.apache.aries.blueprint.ext.AbstractPropertyPlaceholderExt}}).

The only backward compatible change I can think of is to have (in blueprint.cm 1.3.1):
* org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholderExt and
* org.apache.aries.blueprint.compendium.cm.CmPropertyPlaceholder

Which instance should be created by {{org.apache.aries.blueprint.compendium.cm.CmNamespaceHandler#parsePropertyPlaceholder()}} should actually depend on XSD of {{http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.*}} version used - existing (before blueprint.core 1.10.0) cm XSD versions should fallback to {{CmPropertyPlaceholder}} derived from {{AbstractPropertyPlaceholder}}, so existing Camel applications work after upgrading blueprint.core to 1.10.0 (new 1.10.1 actually). WDYT?;;;","12/Jun/18 09:04;acosentino;I think is the best solution to allow backward compatibility.;;;","23/Oct/18 12:30;ggrzybek;Final commit that makes camel work with aries blueprint 1.4.4+: https://github.com/apache/camel/commit/7fe62296f83;;;",,,,,,,,,,,,,,,,,,,,,
camel-univocity-parsers: Upgrade to version 2.6.4 once released,CAMEL-12568,13165178,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,aldettinger,aldettinger,10/Jun/18 11:43,12/Jul/18 16:36,13/Jul/23 08:31,12/Jul/18 16:36,2.22.0,,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,Version 2.6.4 would contain a lot of bug fixes. And correct a regression that prevented the upgrade to univocity-parsers 2.4.0.,,aldettinger,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://github.com/uniVocity/univocity-parsers/issues/238,,,,,,,,,,9223372036854775807,,,2018-06-10 11:43:56.0,,,,,,,,,,,"0|i3upcf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
outputTypeWithValidate (or inputTypeWithValidate) + validator()... doesn't work as expected,CAMEL-12565,13165107,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michaeldz,michaeldz,09/Jun/18 12:27,06/Aug/18 18:09,13/Jul/23 08:31,06/Aug/18 18:09,2.21.1,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-core,,,,,,0,,,,"{code:java}
package org.mike.tests;

import org.apache.camel.ValidationException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class ValidatorTests extends CamelTestSupport {
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                validator()
                        .type(String.class)
                        .withExpression(bodyAs(String.class).isEqualToIgnoreCase(""valid""));

                onException(ValidationException.class)
                        .handled(true)
                        .log(""Invalid predicate: ${exception.message}"")
                        .to(""mock:invalid"");

                from(""direct:in"")
                        //.validate(bodyAs(String.class).isEqualToIgnoreCase(""valid""))
                        .outputTypeWithValidate(String.class) // or .inputTypeWithValidate(String.class)
                        .to(""mock:out"");
            }
        };
    }

    @Test
    public void testValid() throws InterruptedException {

        getMockEndpoint(""mock:out"").expectedMessageCount(1);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(0);

        template.sendBody(""direct:in"", ""valid"");

        assertMockEndpointsSatisfied();
    }

    @Test
    public void testInvalid() throws InterruptedException {
        getMockEndpoint(""mock:out"").expectedMessageCount(0);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(1);

        template.sendBody(""direct:in"", ""wrong"");

        assertMockEndpointsSatisfied();
    }
}


{code}
Expected result: both tests pass

Actual result: 'testValid' - passed, 'testInvalid' - failed

If uncomment line 25 & comment 26
{code:java}
.validate(bodyAs(String.class).isEqualToIgnoreCase(""valid""))
//.inputTypeWithValidate(String.class)
{code}
tests will OK

 

Other test case with same results

 
{code:java}
package org.mike.tests;

import org.apache.camel.Message;
import org.apache.camel.ValidationException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.spi.DataType;
import org.apache.camel.spi.Validator;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BeanValidatorTest extends CamelTestSupport {
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                validator()
                        .type(""toValidate"")
                        .withBean(""testValidator"");

                onException(ValidationException.class)
                        .handled(true)
                        .log(""Invalid validation: ${exception.message}"")
                        .to(""mock:invalid"");

                from(""direct:in"")
                        .outputTypeWithValidate(""toValidate"")
                        .to(""mock:out"");
            }
        };
    }

    public static class TestValidator extends Validator {
        private static final Logger LOG = LoggerFactory.getLogger(TestValidator.class);

        @Override
        public void validate(Message message, DataType type) throws ValidationException {
            Object body = message.getBody();
            LOG.info(""Validating : [{}]"", body);
            if (body instanceof String && body.equals(""valid"")) {
                LOG.info(""OK"");
            } else {
                throw new ValidationException(message.getExchange(), ""Wrong content"");
            }
        }
    }


    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();

        registry.bind(""testValidator"", new TestValidator());

        return registry;
    }

    @Test
    public void testValid() throws InterruptedException {

        getMockEndpoint(""mock:out"").expectedMessageCount(1);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(0);

        template.sendBody(""direct:in"", ""valid"");

        assertMockEndpointsSatisfied();
    }

    @Test
    public void testInvalid() throws InterruptedException {
        getMockEndpoint(""mock:out"").expectedMessageCount(0);
        getMockEndpoint(""mock:invalid"").expectedMessageCount(1);

        template.sendBody(""direct:in"", ""wrong"");

        assertMockEndpointsSatisfied();
    }
}

{code}","Tested on camel 2.21.1, Java 8, Win",davsclaus,michaeldz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 06 18:09:07 UTC 2018,,,,,,,,,,,"0|i3uown:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Aug/18 17:30;davsclaus;Okay so this is expected to happen, because the validation is at the output, which happens after the message has completed being routed. So any error handler with onException does not apply here. (chicken and egg).

;;;","06/Aug/18 17:34;davsclaus;However there was a little bug in the validator somewhere else which I have fixed.;;;","06/Aug/18 18:09;davsclaus;Thanks for the unit test its been added to the source code and also a input validation variation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: serviceCall EIP throws NullPointerException,CAMEL-12561,13164961,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,nferraro,nferraro,08/Jun/18 16:03,08/Jun/18 21:55,13/Jul/23 08:31,08/Jun/18 21:55,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-kubernetes,,,,,,0,,,,"I've written the following route:

 
{code:java}
rest().get(""/purchases"")
  .route()
  .serviceCall().name(""inventory/api/purchases"")
    .kubernetesServiceDiscovery();{code}
But when I run the service inside Openshift I get:
{code:java}
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.component.kubernetes.cloud.KubernetesEnvServiceDiscovery.getServices(KubernetesEnvServiceDiscovery.java:44)
	at org.apache.camel.impl.cloud.DefaultServiceLoadBalancer.process(DefaultServiceLoadBalancer.java:132)
	at org.apache.camel.impl.cloud.DefaultServiceCallProcessor.process(DefaultServiceCallProcessor.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:208)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:78)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:64)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.kubernetes.cloud.KubernetesEnvServiceDiscovery.getServices(KubernetesEnvServiceDiscovery.java:38)
	... 55 more{code}",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-06-08 16:03:15.0,,,,,,,,,,,"0|i3uo07:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kubernetes: serviceCall EIP configuration is not read from application.properties,CAMEL-12560,13164959,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,nferraro,nferraro,08/Jun/18 15:56,08/Jun/18 21:55,13/Jul/23 08:31,08/Jun/18 21:55,,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,,,,,,,0,,,,"Configuration of servicecall eip is not read by any starter in camel-kubernetes.

 

I've put configuration under:
{code:java}
camel.cloud.kubernetes.service-discovery...{code}
 

But service-call eip ignores it.

 ",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-06-08 15:56:53.0,,,,,,,,,,,"0|i3unzr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog - Transacted and Policy should not have outputs,CAMEL-12558,13164860,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Jun/18 06:11,24/Jul/18 12:35,13/Jul/23 08:31,08/Jun/18 07:09,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-catalog,,,,,,0,,,,"These 2 eips should not have output: true in the camel-catalog json meta-data.

For Camel 3.0 we will change their base class in the model so they are no outputs",,apupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 24 12:35:51 UTC 2018,,,,,,,,,,,"0|i3undr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/Jul/18 12:06;apupier;Can you precise a bit more the reasons why they should not have outputs?
They were previously ignored when there was some?;;;","24/Jul/18 12:35;apupier;Shouldn't the xsd updated too?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
saga-eip: do not hang if option cannot be computed,CAMEL-12555,13163826,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,04/Jun/18 12:44,07/Jun/18 14:57,13/Jul/23 08:31,07/Jun/18 14:57,2.21.0,2.21.1,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,"Saga-enabled exchanges hang if the expression associated with a option fails. We should throw a error and conclude the saga with failure instead.
{code:java}
from(""timer:tick"")
  .saga().option(""data"", simple(""${something / fails}""))
      .log(""exchange and saga hang...""){code}
 ",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-06-04 12:44:46.0,,,,,,,,,,,"0|i3uh0f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel does not have logic that checks that it should only retry when its a new/changed file,CAMEL-12551,13163201,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,RedaBalkouch,RedaBalkouch,31/May/18 16:54,05/Jun/18 12:09,13/Jul/23 08:31,05/Jun/18 12:07,2.20.2,,,,,,,,,,,,,,,2.22.0,,,,,camel-stream,,,,,,0,,,,"Hello,

I am reading a file using the stream camel component. The behaviour expected is the following :
 # Read the stream
 # When the file roll over, start the reading the file from the begining

My code :

{{from(""stream:file?fileName=myfile&scanStream=true&scanStreamDelay=1000&retry=true"") }}

The problem with the code above is that the same file is read every 1000ms. The component don't check is the file was rolled over.

Thanks in advance.",,davsclaus,RedaBalkouch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 05 12:09:22 UTC 2018,,,,,,,,,,,"0|i3ud5r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Jun/18 12:40;davsclaus;Okay taking a look at this, and its a bit more tricky to roll-over the file when its changed. So we need to add some more logic to make this more reliable.;;;","04/Jun/18 14:51;davsclaus;Hmm we may need to either hash the file to know if it was changed / rollover. Or try to use the java nio api with the file event watcher (a bit cumbersome code). However the latter would assume that when a file rollover, then its deleted and created again, so we have a deleted (or created) event to listen to.;;;","05/Jun/18 12:09;davsclaus;There is a new fileWatcher=true option you need to turn on as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Twilio: Karaf feature is not working,CAMEL-12550,13163172,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,31/May/18 14:31,31/May/18 14:44,13/Jul/23 08:31,31/May/18 14:44,2.20.0,2.20.1,2.20.2,2.20.3,2.21.0,2.21.1,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,karaf,,,,,,0,,,,Caused by: java.lang.ClassNotFoundException: org.apache.http.ProtocolVersion not found by wrap_file__home_jbouska_.m2_repository_com_twilio_sdk_twilio_7.9.1_twilio-7.9.1.jar [224],,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-05-31 14:31:51.0,,,,,,,,,,,"0|i3uczb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in camel-cmis when using wrong credentials,CAMEL-12548,13163121,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,31/May/18 11:41,04/Jun/18 05:55,13/Jul/23 08:31,04/Jun/18 05:55,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,2.23.0,,,camel-cmis,,,,,,0,,,,"If you try to send something via cmis (uri in blueprint: {{""cmis:// ... ""}}) and you use a wrong password then on the second (and all subsequent) tries you will get a {{NullPointerExceptionException}}.

Stacktrace:
{code}
java.lang.NullPointerException
 at org.apache.camel.component.cmis.CMISSessionFacade.getCMISTypeFor(CMISSessionFacade.java:221)
 at org.apache.camel.component.cmis.CMISProducer.isFolder(CMISProducer.java:146)
 at org.apache.camel.component.cmis.CMISProducer.parentFolderPathFor(CMISProducer.java:132)
 at org.apache.camel.component.cmis.CMISProducer.createNode(CMISProducer.java:101)
 at org.apache.camel.component.cmis.CMISProducer.process(CMISProducer.java:62)
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
 at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:113)
 at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:84)
 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)
 at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.asyncInvoke(CxfConsumer.java:165)
 at org.apache.camel.component.cxf.CxfConsumer$CxfConsumerInvoker.invoke(CxfConsumer.java:144)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)
 at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
 at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)
 at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
 at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
 at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:254)
 at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234)
 at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208)
 at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
 at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:180)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:299)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:218)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
 at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:274)
 at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
 at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
 at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:201)
 at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
 at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
 at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:72)
 at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
 at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
 at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
 at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
 at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:287)
 at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
 at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
 at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
 at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
 at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80)
 at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
 at org.eclipse.jetty.server.Server.handle(Server.java:499)
 at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
 at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:258)
 at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
 at java.lang.Thread.run(Thread.java:748)
{code}

The {{CMISProducer}} creates a {{CMISSessionFacade}} ({{CMISProducer.getSessionFacade()}}), delegates the initialization of a session to the facade ({{CMISSessionFacade.initSession()}}) and stores the facade inside a member variable. The {{CMISSessionFacade}} creates a Session, tries to connect to the remote system and stores the created Session object inside a member variable. If the provided password for the remote system is wrong then at this point a {{CmisUnauthorizedException}} (basically a {{RuntimeException}}) is thrown.

({{org.apache.chemistry.opencmis.commons.exceptions.CmisUnauthorizedException: Unauthorized}})

This behavior is ok but the consequence is that a member variable inside the {{CMISSessionFacade}} (called ""session"") is still null.

Camel caches the {{CMISProducer}} with its reference to {{CMISSessionFacade}} whose ""session"" is set to null. If you try to send something else via cmis then you get the {{NullPointerException}} as described above.",,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 04 05:55:37 UTC 2018,,,,,,,,,,,"0|i3ucnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Jun/18 02:50;githubbot;tadayosi opened a new pull request #2357: CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…
URL: https://github.com/apache/camel/pull/2357
 
 
   …entials
   
   It makes sure the sessionFacade is assgined to the field only after the session is successfully initialised, so that the sessionFacade never dangles in an incomplete state.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jun/18 02:50;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/2357

    CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…

    …entials
    
    It makes sure the sessionFacade is assgined to the field only after the session is successfully initialised, so that the sessionFacade never dangles in an incomplete state.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-12548

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2357.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2357
    
----
commit 08aa6124bc710179b608ed1538d966ea91b1f39b
Author: Tadayoshi Sato <sato.tadayoshi@...>
Date:   2018-06-04T02:46:53Z

    CAMEL-12548: NullPointerException in camel-cmis when using wrong credentials

----
;;;","04/Jun/18 05:40;githubbot;davsclaus closed pull request #2357: CAMEL-12548: NullPointerException in camel-cmis when using wrong cred…
URL: https://github.com/apache/camel/pull/2357
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java b/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
index 4097260ef7d..dc927020e2d 100644
--- a/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
+++ b/components/camel-cmis/src/main/java/org/apache/camel/component/cmis/CMISProducer.java
@@ -195,8 +195,11 @@ private String getMimeType(Message message) throws NoSuchHeaderException {
 
     private CMISSessionFacade getSessionFacade() throws Exception {
         if (sessionFacade == null) {
-            sessionFacade = sessionFacadeFactory.create(getEndpoint());
+            CMISSessionFacade sessionFacade = sessionFacadeFactory.create(getEndpoint());
             sessionFacade.initSession();
+            // make sure to set sessionFacade to the field after successful initialisation
+            // so that it has a valid session
+            this.sessionFacade = sessionFacade;
         }
 
         return sessionFacade;


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jun/18 05:40;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2357
;;;","04/Jun/18 05:55;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
"camel-cxfrs - rsClient does not work programmatically, only with XML",CAMEL-12541,13162298,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,Willian Antunes,Willian Antunes,Willian Antunes,27/May/18 14:09,31/May/18 03:40,13/Jul/23 08:31,31/May/18 03:40,2.21.1,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-cxfrs,,,,,,0,,,,"As described in the documentation you can use [camel-cxfrs as producer|https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/docs/cxfrs-component.adoc#how-to-configure-the-rest-endpoint-in-camel]. You have some approaches like using a proxy created from a interface which maps all the services available in the targeted REST web service (sample [here|https://github.com/willianantunes/honesto-sqn/blob/d4bf48257fc64a4725894c7f07c24bb1a516d410/src/main/java/br/com/willianantunes/serenata/JarbasAPI.java#L14]). As I'm using Spring Boot and Apache Camel I may create a bean through XML or programmatically.
h4. Creating the test sample

I'm testing with the following:

[https://gist.github.com/willianantunes/58979bfb91ee30c7ff4e235940e60880]

You can find a copy of JarbasAPI [here|https://github.com/willianantunes/honesto-sqn/blob/d4bf48257fc64a4725894c7f07c24bb1a516d410/src/main/java/br/com/willianantunes/serenata/JarbasAPI.java#L14].
h4. When rsClient producer works as expected

When I do using the first approach using the configuration below everything works fine:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
       xmlns:util=""http://www.springframework.org/schema/util""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <cxf:rsClient id=""serviceEndpointViaXML""
                  address=""https://jarbas.serenata.ai"" 
                  serviceClass=""br.com.willianantunes.serenata.JarbasAPI""/>
</beans>
{code}
h4. When rsClient producer does not work as expected

XML works fine, but when I do the same thing programmatically it doesn't.
{code:java}
    @Bean(""serviceEndpoint"")
    public SpringJAXRSClientFactoryBean serviceEndpoint() {

        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
        clientFactoryBean.setAddress(""https://jarbas.serenata.ai"");
        clientFactoryBean.setServiceClass(JarbasAPI.class);

        return clientFactoryBean;
    }
{code}
Although it has no difference compared to XML, it does not work.
h4. When does it fail?

Debugging you can see the following:
 * The bean is correctly got [here|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76] is CxfRsComponent.
 * When a message is sent and there is a _to_ command with the URI *cxfrs:bean:serviceEndpoint,* I see the message arriving [here|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L94] in CxfRsProducer.
 * The method [invokeProxyClient|https://github.com/apache/camel/blob/a4cfea6823d31eacf57489ffffe1ffeead9a256b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L103] is called.
 * The SpringJAXRSClientFactoryBean which I provided as bean is ignored. A new one is created [here|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java#L414] and when it arrives to the next line the method invoked is from [CxfRsSpringEndpoint|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java] which uses [configurer.ConfigureBean|https://github.com/apache/camel/blob/834a59910e4b6b8d089e229b39f6c8673e7c3f9a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L77] that only works with XML.

h4. Versions used
 * Spring Boot: 1.5.12.RELEASE
 * Apache Camel: 2.21.1

h4. Proposal to make it works

The idea obviously is to make both approaches work, maybe merging the configuration or as long as the user is providing a custom SpringJAXRSClientFactoryBean then making it the standard instead of creating a new one for each request as it is available in the CxfRsSpringEndpoint from the start.
----
If you want to understand more, read from [here|https://gitter.im/apache/apache-camel?at=5b09f7a54eaffb692d5adb43] until the [end of conversation|https://gitter.im/apache/apache-camel?at=5b0a13cb54ce23136159a2c0] on Gitter.",,githubbot,njiang,Willian Antunes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 31 03:40:06 UTC 2018,,,,,,,,,,,"0|i3u7lb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/May/18 16:32;githubbot;willianantunes opened a new pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350
 
 
   When the endpoint is created with the bean (see [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76) how it's found) is always available and is used for the consumer approach (see the method [newJAXRSServerFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L65)). 
   
   Now the [same behavior](https://github.com/willianantunes/camel/blob/30a4bdbf0975c8efc06d504b751e88ec4af5e64a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71) is used for producer approach as nowadays [we always return a new instance of SpringJAXRSClientFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/May/18 16:32;githubbot;GitHub user willianantunes opened a pull request:

    https://github.com/apache/camel/pull/2350

    CAMEL-12541: rsClient does not work programmatically, only with XML

    When the endpoint is created with the bean (see [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsComponent.java#L76) how it's found) is always available and is used for the consumer approach (see the method [newJAXRSServerFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L65)). 
    
    Now the [same behavior](https://github.com/willianantunes/camel/blob/30a4bdbf0975c8efc06d504b751e88ec4af5e64a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71) is used for producer approach as nowadays [we always return a new instance of SpringJAXRSClientFactoryBean](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L71).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/willianantunes/camel cxfrs-bean-programmatically

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2350.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2350
    
----
commit 30a4bdbf0975c8efc06d504b751e88ec4af5e64a
Author: Willian Antunes <willian.lima.antunes@...>
Date:   2018-05-27T16:20:53Z

    CAMEL-12541: Use configured bean instead of creating a new
    
    When the endpoint is created the bean is always available and is used
    for the consumer approach (newJAXRSServerFactoryBean). Now the same
    behavior is used for producer approach (newJAXRSClientFactoryBean).

----
;;;","27/May/18 17:10;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392348111
 
 
   Before creating this PR I'd run the tests and re-ran after inserting the fix to make sure if it was OK. 
   
   I believe [CxfRsProducerAddressOverrideTest.testAddressMultiOverride](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L155) is now breaking because LRUSoftCache is return the wrong stored object [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L862) when the test execute [line 166](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L166).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/May/18 17:35;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392349806
 
 
   When the cache works properly it has the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@625487a6, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@36224f93
   }
   ```
   See that each value is a different object (625487a6 and 36224f93). But when I run a test with this PR I get the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1
   }
   ```
   Both keys have the same object. That's why the test is breaking.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/May/18 17:36;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392349806
 
 
   When the cache works properly it has the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@625487a6, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@36224f93
   }
   ```
   See that each value is a different object (625487a6 and 36224f93). But when I run a test with this PR I get the following:
   ```
   {
       http://localhost:1101/CxfRsProducerNonExistingAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1, 
       http://localhost:1101/CxfRsProducerAddressOverrideTest=org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean@ab58eea1
   }
   ```
   Both keys have the same object (ab58eea1). That's why the test is breaking.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/May/18 02:26;githubbot;WillemJiang commented on a change in pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#discussion_r191099821
 
 

 ##########
 File path: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
 ##########
 @@ -62,13 +69,51 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
+        
+        assertEquals(""Got the wrong address"", BEAN_SERVICE_ADDRESS, cfb.getAddress());
+        assertNotNull(""Service class must not be null"", cfb.getServiceClass());
+        assertEquals(""Got the wrong ServiceClass"", CustomerService.class, cfb.getServiceClass());
+        assertEquals(""Got the wrong username"", BEAN_SERVICE_USERNAME, cfb.getUsername());
+        assertEquals(""Got the wrong password"", BEAN_SERVICE_PASSWORD, cfb.getPassword());
+    }
+
+    public static SpringJAXRSClientFactoryBean serviceEndpoint() {
+
+        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
+        clientFactoryBean.setAddress(BEAN_SERVICE_ADDRESS);
+        clientFactoryBean.setServiceClass(CustomerService.class);
+        clientFactoryBean.setUsername(BEAN_SERVICE_USERNAME);
+        clientFactoryBean.setPassword(BEAN_SERVICE_PASSWORD);
+
+        return clientFactoryBean;
+    }    
+    
     @Override
     protected AbstractXmlApplicationContext createApplicationContext() {
         String version = Version.getCurrentVersion();
+        
+        ClassPathXmlApplicationContext applicationContext = null;
+        
         if (version.startsWith(""2"") && (version.contains(""2.5"") || version.contains(""2.4""))) {
 
 Review comment:
   This version check could be removed as we already move to 2.6.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/May/18 02:26;githubbot;WillemJiang commented on a change in pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#discussion_r191099881
 
 

 ##########
 File path: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
 ##########
 @@ -62,13 +69,51 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
 
 Review comment:
   we may need to check the instance of cfb is not the one we set before.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/May/18 11:36;githubbot;willianantunes commented on issue #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350#issuecomment-392348111
 
 
   Before creating this PR I'd run the tests and re-ran after inserting the fix to make sure if it was OK or not. 
   
   I believe [CxfRsProducerAddressOverrideTest.testAddressMultiOverride](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L155) is now breaking because LRUSoftCache returns the wrong stored object [here](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L862) when the test executes [line 166](https://github.com/apache/camel/blob/39c0d63d923bfe9236834ecb1c4470bb7e9e7eaa/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java#L166).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/May/18 12:59;githubbot;WillemJiang closed pull request #2350: CAMEL-12541: rsClient does not work programmatically, only with XML
URL: https://github.com/apache/camel/pull/2350
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
index 954d9842679..46b235a3bd7 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
@@ -25,6 +25,7 @@
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
 import org.springframework.context.ApplicationContext;
+import org.springframework.util.ReflectionUtils;
 
 public class CxfRsSpringEndpoint extends CxfRsEndpoint implements BeanIdAware {
     private AbstractJAXRSFactoryBean bean;
@@ -69,7 +70,8 @@ protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
 
     @Override
     protected JAXRSClientFactoryBean newJAXRSClientFactoryBean() {
-        return new SpringJAXRSClientFactoryBean();
+        checkBeanType(bean, JAXRSClientFactoryBean.class);
+        return newInstanceWithCommonProperties();
     }
 
     @Override
@@ -88,4 +90,14 @@ public String getBeanId() {
     public void setBeanId(String id) {
         this.beanId = id;
     }
-}
+    
+    private JAXRSClientFactoryBean newInstanceWithCommonProperties() {
+        SpringJAXRSClientFactoryBean cfb = new SpringJAXRSClientFactoryBean();
+        
+        if (bean instanceof SpringJAXRSClientFactoryBean) {
+            ReflectionUtils.shallowCopyFieldState(bean, cfb);
+        }
+
+        return cfb;
+    }    
+}
\ No newline at end of file
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
index 977d7dca3e3..5e1c10925d1 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointTest.java
@@ -22,13 +22,19 @@
 import org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean;
 import org.apache.camel.component.cxf.spring.SpringJAXRSServerFactoryBean;
 import org.apache.camel.test.spring.CamelSpringTestSupport;
-import org.apache.cxf.version.Version;
 import org.junit.Test;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 import org.springframework.context.support.AbstractXmlApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 public class CxfRsSpringEndpointTest extends CamelSpringTestSupport {
     
+    private static final String BEAN_SERVICE_ENDPOINT_NAME = ""serviceEndpoint"";
+    private static final String BEAN_SERVICE_ADDRESS = ""http://localhost/programmatically"";
+    private static final String BEAN_SERVICE_USERNAME = ""BEAN_SERVICE_USERNAME"";
+    private static final String BEAN_SERVICE_PASSWORD = ""BEAN_SERVICE_PASSWORD"";
+    
     @Test
     public void testCreateCxfRsServerFactoryBean() {
         CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://rsServer"", CxfRsEndpoint.class);
@@ -62,13 +68,44 @@ public void testCreateCxfRsClientFactoryBean() {
 
     }
     
+    @Test
+    public void testCreateCxfRsClientFactoryBeanProgrammatically() {
+        
+        CxfRsEndpoint endpoint = resolveMandatoryEndpoint(""cxfrs://bean://"" + BEAN_SERVICE_ENDPOINT_NAME, CxfRsEndpoint.class);
+        SpringJAXRSClientFactoryBean cfb = (SpringJAXRSClientFactoryBean)endpoint.createJAXRSClientFactoryBean();
+        
+        assertNotSame(""Got the same object but must be different"", super.applicationContext.getBean(BEAN_SERVICE_ENDPOINT_NAME), cfb);
+        assertEquals(""Got the wrong address"", BEAN_SERVICE_ADDRESS, cfb.getAddress());
+        assertNotNull(""Service class must not be null"", cfb.getServiceClass());
+        assertEquals(""Got the wrong ServiceClass"", CustomerService.class, cfb.getServiceClass());
+        assertEquals(""Got the wrong username"", BEAN_SERVICE_USERNAME, cfb.getUsername());
+        assertEquals(""Got the wrong password"", BEAN_SERVICE_PASSWORD, cfb.getPassword());                
+    }
+
+    public static SpringJAXRSClientFactoryBean serviceEndpoint() {
+
+        SpringJAXRSClientFactoryBean clientFactoryBean = new SpringJAXRSClientFactoryBean();
+        clientFactoryBean.setAddress(BEAN_SERVICE_ADDRESS);
+        clientFactoryBean.setServiceClass(CustomerService.class);
+        clientFactoryBean.setUsername(BEAN_SERVICE_USERNAME);
+        clientFactoryBean.setPassword(BEAN_SERVICE_PASSWORD);
+
+        return clientFactoryBean;
+    }    
+    
     @Override
-    protected AbstractXmlApplicationContext createApplicationContext() {
-        String version = Version.getCurrentVersion();
-        if (version.startsWith(""2"") && (version.contains(""2.5"") || version.contains(""2.4""))) {
-            return new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml""));
-        }
-        return new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml""));
+    protected AbstractXmlApplicationContext createApplicationContext() {      
+        
+        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(new String(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml""));        
+        emulateBeanRegistrationProgrammatically(applicationContext);
+        
+        return applicationContext;
     }
 
-}
+    private void emulateBeanRegistrationProgrammatically(ClassPathXmlApplicationContext applicationContext) {
+        
+        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext.getBeanFactory();
+        BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(CxfRsSpringEndpointTest.class.getName()).setFactoryMethod(""serviceEndpoint"");
+        beanFactory.registerBeanDefinition(BEAN_SERVICE_ENDPOINT_NAME, definitionBuilder.getBeanDefinition());
+    }
+}
\ No newline at end of file
diff --git a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml
deleted file mode 100644
index 8b0ca34cfed..00000000000
--- a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans-2.6.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-<!--
-
-    Licensed to the Apache Software Foundation (ASF) under one or more
-    contributor license agreements.  See the NOTICE file distributed with
-    this work for additional information regarding copyright ownership.
-    The ASF licenses this file to You under the Apache License, Version 2.0
-    (the ""License""); you may not use this file except in compliance with
-    the License.  You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an ""AS IS"" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
-
--->
-<beans xmlns=""http://www.springframework.org/schema/beans""
-       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-       xmlns:cxf=""http://camel.apache.org/schema/cxf""
-       xsi:schemaLocation=""
-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
-
-
-  <cxf:rsServer id=""rsServer"" address=""http://localhost:9000/router""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""
-    loggingFeatureEnabled=""true"" loggingSizeLimit=""200"">
-    <cxf:properties>
-        <entry key=""aKey"" value=""aValue""/>
-    </cxf:properties>
-    <cxf:providers>
-       <ref bean=""jsonProvider""/>
-    </cxf:providers>
-    <cxf:inInterceptors>
-        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
-    </cxf:inInterceptors>
-  </cxf:rsServer>
-
-  <cxf:rsClient id=""rsClient"" address=""http://localhost:9002/helloworld""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"">
-    <cxf:inInterceptors>
-        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
-    </cxf:inInterceptors>
-  </cxf:rsClient>
-
-  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.json.JSONProvider""/>
-
-  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
-  </camelContext>
-  
-  
-
-</beans>
diff --git a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
index fcd0e8238fe..8b0ca34cfed 100644
--- a/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
+++ b/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpointBeans.xml
@@ -23,22 +23,31 @@
        xsi:schemaLocation=""
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
-       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
-    "">
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
 
 
   <cxf:rsServer id=""rsServer"" address=""http://localhost:9000/router""
     serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""
     loggingFeatureEnabled=""true"" loggingSizeLimit=""200"">
+    <cxf:properties>
+        <entry key=""aKey"" value=""aValue""/>
+    </cxf:properties>
     <cxf:providers>
        <ref bean=""jsonProvider""/>
     </cxf:providers>
+    <cxf:inInterceptors>
+        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
+    </cxf:inInterceptors>
   </cxf:rsServer>
 
   <cxf:rsClient id=""rsClient"" address=""http://localhost:9002/helloworld""
-    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""/>
+    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"">
+    <cxf:inInterceptors>
+        <bean class=""org.apache.camel.component.cxf.jaxrs.TestInInterceptor""/>
+    </cxf:inInterceptors>
+  </cxf:rsClient>
 
-  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.JSONProvider""/>
+  <bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.json.JSONProvider""/>
 
   <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
   </camelContext>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/May/18 12:59;githubbot;Github user WillemJiang closed the pull request at:

    https://github.com/apache/camel/pull/2350
;;;","31/May/18 03:40;njiang;Merged the patches into master, camel-2.21.x and camel-2.20.x branches.;;;",,,,,,,,,,,,,,,,,,
We should avoid the address setting of CxfRsEndpointConfigurer ,CAMEL-12540,13162267,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/May/18 02:09,27/May/18 07:07,13/Jul/23 08:31,27/May/18 07:07,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-cxfrs,,,,,,0,,,,"When using the CxfRsEndpointConfigurer to do the setting, the address setting from the Message header could be override.  We just need to make sure the address can be override from message header.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12399,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 27 07:07:45 UTC 2018,,,,,,,,,,,"0|i3u7ef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"27/May/18 07:07;njiang;Merged the patch into master and camel-2.21.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-google-mail: adding the camel component to a spring boot project leads to java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;",CAMEL-12536,13161803,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,lb,lb,24/May/18 15:21,01/Jun/18 07:20,13/Jul/23 08:31,01/Jun/18 07:20,2.21.1,2.22.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,,,,"I've created a very simple spring boot (1.x) which includes camel-google-mail as dependency and when running the application, the following exception is thrown:

{code}
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)
Caused by: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh (EmbeddedWebApplicationContext.java:137)
    at org.springframework.context.support.AbstractApplicationContext.refresh (AbstractApplicationContext.java:537)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh (EmbeddedWebApplicationContext.java:122)
    at org.springframework.boot.SpringApplication.refresh (SpringApplication.java:693)
    at org.springframework.boot.SpringApplication.refreshContext (SpringApplication.java:360)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:303)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1118)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1107)
    at test.Application.main (Application.java:9)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)
Caused by: java.lang.NoSuchMethodError: javax.servlet.ServletContext.getClassLoader()Ljava/lang/ClassLoader;
    at io.undertow.websockets.jsr.Bootstrap.handleDeployment (Bootstrap.java:92)
    at io.undertow.servlet.core.DeploymentManagerImpl.handleExtensions (DeploymentManagerImpl.java:263)
    at io.undertow.servlet.core.DeploymentManagerImpl.deploy (DeploymentManagerImpl.java:153)
    at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createDeploymentManager (UndertowEmbeddedServletContainerFactory.java:412)
    at org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.getEmbeddedServletContainer (UndertowEmbeddedServletContainerFactory.java:234)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer (EmbeddedWebApplicationContext.java:164)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh (EmbeddedWebApplicationContext.java:134)
    at org.springframework.context.support.AbstractApplicationContext.refresh (AbstractApplicationContext.java:537)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh (EmbeddedWebApplicationContext.java:122)
    at org.springframework.boot.SpringApplication.refresh (SpringApplication.java:693)
    at org.springframework.boot.SpringApplication.refreshContext (SpringApplication.java:360)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:303)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1118)
    at org.springframework.boot.SpringApplication.run (SpringApplication.java:1107)
    at test.Application.main (Application.java:9)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:527)
    at java.lang.Thread.run (Thread.java:748)

{code}

Sample project included in the attached reproducer",,acosentino,lb,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/May/18 15:20;lb;project.tgz;https://issues.apache.org/jira/secure/attachment/12924961/project.tgz",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 01 07:20:00 UTC 2018,,,,,,,,,,,"0|i3u4k7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"24/May/18 22:09;njiang;It is caused by the servlet API conflict which is introduced by camel-google-mail.
You can work around this issue by excluding the servlet-api from jetty just like this.
{code}
  <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-google-mail</artifactId>
      <version>${camel.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
{code}
It's strange that google mail API still has this kind of 10 years old API, I will dig more about shortly. ;;;","24/May/18 22:46;njiang;Just go through the [document|https://developers.google.com/api-client-library/java/google-oauth-java-client/setup#google-oauth-client-jetty], it looks like we don't need to use the google-oauth-client-jetty module, as when using google mail component we already provide the authorization code. 
[~lb]Could you double check with it?;;;","25/May/18 06:47;lb;I'm not very familiar with the component so [~ancosen] [~janstey] what do you think ?;;;","25/May/18 08:20;acosentino;I'm not completely sure we can get rid of that dependency, we can try by removing that, but since the fix is needed also on 2.21.x maybe I would go with the exclusions for the moment and after that we can take a look at a different solution;;;","25/May/18 09:34;njiang;[~ancosen] 
+1 for exclusion of the google-oauth-client-jetty as it has some old jetty jars which could introduce some issue here.
We may upgrade the version of google mail client in the master branch at the same time.;;;","25/May/18 09:39;acosentino;So you'll exclude the servlet-api from Jetty for the moment? For me it's fine.;;;","28/May/18 08:02;acosentino;Excluding the servlet-api dependency from jetty is the best solution. [~njiang] can you please do this on master and 2.21.x and probably 2.20.x?;;;","28/May/18 08:05;njiang;OK, I will work on this later today.;;;","01/Jun/18 07:20;acosentino;I took the liberty to fix this one, since I was taking a look at google-mail. Thanks [~njiang];;;",,,,,,,,,,,,,,,,,,,,
Fix syntax for wordpress component,CAMEL-12535,13161697,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,apupier,apupier,24/May/18 08:41,24/May/18 08:50,13/Jul/23 08:31,24/May/18 08:50,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-wordpress,,,,,,0,,,,it is wordpress:operation but it should be wordpress:operationDetail,,apupier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-05-24 08:41:09.0,,,,,,,,,,,"0|i3u3wn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content Based Router in Java DSL may not resolve property placeholders in when predicates,CAMEL-12532,13161547,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/May/18 18:25,23/May/18 19:15,13/Jul/23 08:31,23/May/18 19:15,2.20.3,2.21.1,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-core,,,,,,0,,,,Reported on gitter,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-05-23 18:25:57.0,,,,,,,,,,,"0|i3u2zj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka component commits the offset as soon as it is retrieved,CAMEL-12525,13160708,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Chandwani,Chandwani,21/May/18 14:16,17/Aug/18 07:29,13/Jul/23 08:31,17/Aug/18 07:29,2.21.0,,,,,,,,,,,,,,,2.22.1,2.23.0,,,,camel-kafka,,,,,,0,,,,"I am trying the maual commit from consumer below is the code snippet, i want to consume and  commit the message after 2 mins of its arrival in the topic. My consumer retrieves and checks the time difference if it is above 2 mins then it should commit. But message once retrieved and not committed manually. I am expecting it to come back but it does not comeback ever.  when i try creating kafka consumer it works fine

public void configure() throws Exception {
from(""kafka:BENEFITSLOADER.LOAD?brokers=xxxx:9092,xxxx:9092,xxxx:9092&groupId=BENEFITSLOADER&consumersCount=1&pollTimeoutMs=1000&autoCommitEnable=false&allowManualCommit=true&maxPollRecords=1"")
.process(new Processor() {
 @Override
 public void process(Exchange exchange) throws Exception {

 Long msgDateTime = (Long) exchange.getIn().getHeaders().get(KafkaConstants.TIMESTAMP);
 System.out.println(""Message : "" + (exchange.getIn().getHeaders()));
 System.out.println(""Message : "" + (exchange.getIn().getBody()));
 Date msgDate = new Date(msgDateTime);
 Date currentDate = new Date();
 long diff = currentDate.getTime() - msgDate.getTime();
 long diffMinutes = diff / (60 * 1000) % 60;
 System.out.println(""Difference in Minutes "" + diffMinutes);
 KafkaManualCommit manualCommit = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
if(diffMinutes > 2)
 {
 System.out.println(""Commiting Message "" + exchange.getIn().getBody()); 
 manualCommit.commitSync(); 
 } 
 }
 });
 }
 }

 

 

Code that works fine

 

public class TestKafkaConsumer {
 static Consumer<String, String> consumer = null;
 static ConsumerRecord<String,String> fetchedRecord; 
 static ConsumerRecords<String, String> records;
 public static void main(String... args) {


String topicName = ""BENEFITSLOADER.LOAD"";
 consumer = createConsumer();
 consumer.subscribe(Collections.singletonList(topicName));

try {
 while (true) {
 
 if(fetchedRecord == null)
 records = consumer.poll(1000);
 
 
 records.forEach(record -> { 
 fetchedRecord = record; 
 });
 
 if(fetchedRecord != null)
 {
 Date msgDate = new Date(fetchedRecord.timestamp());
 Date date = new Date(System.currentTimeMillis());
 long diff = date.getTime() - msgDate.getTime();
 long diffMinutes = diff / (60 * 1000) % 60;
 
 System.out.printf(""Consumer Record:(%s, %s, %d, %d)\n"",
 fetchedRecord.key(), fetchedRecord.value(),
 fetchedRecord.partition(), fetchedRecord.offset());
 if(diffMinutes > 2)
 {
 System.out.printf(""Consumer Record Commiting:(%s, %s, %d, %d)\n"",
 fetchedRecord.key(), fetchedRecord.value(),
 fetchedRecord.partition(), fetchedRecord.offset());
 consumer.commitSync();
 System.out.println(""Commited"");
 fetchedRecord = null;
 }
 } 
 }
 }

catch (Exception ex) {
 ex.printStackTrace();
 } finally { 
 consumer.close();
 }

}

private static Consumer<String, String> createConsumer() {
 Properties props = new Properties();
 props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, ""xxx:9092,xxx:9092,xxx:9093"");
 props.put(ConsumerConfig.GROUP_ID_CONFIG, ""BENEFITSLOADER"");
 props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
 props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
 props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
 props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 1);
 return new KafkaConsumer<>(props);
 }

}",Linux,Chandwani,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12732,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 17 07:29:13 UTC 2018,,,,,,,,,,,"0|i3ty6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Aug/18 14:14;davsclaus;Can you try with a newer Camel version;;;","17/Aug/18 07:29;davsclaus;We fixed CAMEL-12732 which is related to this, when doing manual commit. 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-consul - NPE on ConsulEventConsumer start,CAMEL-12511,13159114,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,14/May/18 14:28,15/May/18 12:52,13/Jul/23 08:31,15/May/18 12:52,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-consul,,,,,,0,,,,"When _doStart_ is called on ConsulEventConsumer it first [calls|https://github.com/apache/camel/blob/camel-2.21.1/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L54] _doStart_ of a superclass _AbstractConsulConsumer_ when _scheduledExecutorService_ is not initialized yet.

EventWatcher run [is allowed|https://github.com/apache/camel/blob/camel-2.21.1/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/AbstractConsulConsumer.java#L95]. Thus _EventWatcher.watch_ is called with uninitialized _scheduledExecutorService_ and failing with NPE.

{quote}
 Caused by: java.lang.NullPointerException: null
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer$EventWatcher.watch(ConsulEventConsumer.java:76)
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer$EventWatcher.watch(ConsulEventConsumer.java:68)
         at org.apache.camel.component.consul.endpoint.AbstractConsulConsumer$AbstractWatcher.run(AbstractConsulConsumer.java:96)
         at org.apache.camel.component.consul.endpoint.AbstractConsulConsumer.doStart(AbstractConsulConsumer.java:56)
         at org.apache.camel.component.consul.endpoint.ConsulEventConsumer.doStart(ConsulEventConsumer.java:54)
         at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
         at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3705)
         at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4023)
         at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3958)
         at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3878)
         at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3642)
         at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3494)
         at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209)
         at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3253)
         at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3249)
         at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3272)
         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3249)
         at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
         at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3165)
         at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133)
		 ...
{quote}",,githubbot,lb,Viachaslau.Tsikhanovich,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 15 12:22:46 UTC 2018,,,,,,,,,,,"0|i3toef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/May/18 14:43;lb;Yeah I saw that, [~Viachaslau.Tsikhanovich] do you want to work on a fix ?;;;","14/May/18 15:39;Viachaslau.Tsikhanovich;I believe [https://github.com/apache/camel/commit/cd0d07d1745cbf153881160d73e28b2abc240ebb] could be reverted to fix this.
 However I am not sure if it would be a right approach because of this [comment|https://github.com/apache/camel/pull/2283#discussion_r182332929].

As I can see for consumers of other components it is OK to [pass _scheduledExecutorService_ to a constructor|https://github.com/apache/camel/blob/camel-2.21.1/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java#L77]

If some alternative solution (instead of reverting) is required I could try to work on it.;;;","14/May/18 15:46;lb;A quick fix would be to initialize the executor service before super.doStart(), isn't it ?;;;","15/May/18 12:15;githubbot;viachka opened a new pull request #2342: CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run
URL: https://github.com/apache/camel/pull/2342
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/May/18 12:15;githubbot;GitHub user viachka opened a pull request:

    https://github.com/apache/camel/pull/2342

    CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/viachka/camel camel-12511-npe-on-consuleventconsumer-start

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2342.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2342
    
----
commit 851f6208fc208427f02a44adc4bce1f0e6d0ff34
Author: Viachaslau Tsikhanovich <viachaslau_tsikhanovich@...>
Date:   2018-05-15T12:07:54Z

    CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run

----
;;;","15/May/18 12:22;githubbot;lburgazzoli closed pull request #2342: CAMEL-12511: Init scheduledExecutorService before ConsulEventConsumer's watcher run
URL: https://github.com/apache/camel/pull/2342
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
index b74615b40fe..13753c23003 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
@@ -51,8 +51,8 @@ protected Runnable createWatcher(EventClient client) throws Exception {
 
     @Override
     protected void doStart() throws Exception {
-        super.doStart();
         this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
+        super.doStart();
     }
 
     @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/May/18 12:22;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2342
;;;",,,,,,,,,,,,,,,,,,,,,,
SqsProducer doesn't support Boolean attributes,CAMEL-12506,13158808,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,candrews,candrews,11/May/18 21:10,13/May/18 18:23,13/Jul/23 08:31,13/May/18 18:23,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-aws,,,,,,0,,,,SqsProducer doesn't support Boolean attributes.,,aldettinger,candrews,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 13 18:19:01 UTC 2018,,,,,,,Patch Available,,,,"0|i3tmiv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/May/18 21:15;githubbot;candrews opened a new pull request #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337
 
 
   https://issues.apache.org/jira/browse/CAMEL-12506 SqsProducer doesn't support Boolean attributes
   https://issues.apache.org/jira/browse/CAMEL-12507 SqsProducer support for Number custom data types

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/May/18 21:15;githubbot;GitHub user candrews opened a pull request:

    https://github.com/apache/camel/pull/2337

    CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types

    https://issues.apache.org/jira/browse/CAMEL-12506 SqsProducer doesn't support Boolean attributes
    https://issues.apache.org/jira/browse/CAMEL-12507 SqsProducer support for Number custom data types

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/candrews/camel patch-3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2337
    
----
commit c13ea12e60c8a3b366a4a654a9371ad94ec3c1e6
Author: Craig Andrews <candrews@...>
Date:   2018-05-11T20:50:17Z

    CAMEL-12506: SQS Producer support for boolean attributes
    
    If a header of type `Boolean` is provided, map it to an SQS `MessageAttributeValue` of type ""Number"" with the`MessageAttributeValue`'s StringValue being ""1"" for true and ""0"" for false.
    
    This behavior matches that of amazon-sqs-java-messaging-lib: https://github.com/awslabs/amazon-sqs-java-messaging-lib/blob/1.0.4/src/main/java/com/amazon/sqs/javamessaging/message/SQSMessage.java#L1146
    
    See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html

commit 09ff0f0713f597c9b22714d843d2f5f5cf259340
Author: Craig Andrews <candrews@...>
Date:   2018-05-11T21:00:23Z

    CAMEL-12507: SQS Producer support for number custom types
    
    If a header of type `Number` is provided, set the dataType to ""Number."" + an appropriate identifier
    
    These dataType values match those used by amazon-sqs-java-messaging-lib: https://github.com/awslabs/amazon-sqs-java-messaging-lib/blob/1.0.4/src/main/java/com/amazon/sqs/javamessaging/SQSMessagingClientConstants.java#L39
    
    See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html

----
;;;","11/May/18 21:15;candrews;https://github.com/apache/camel/pull/2337;;;","12/May/18 15:22;githubbot;aldettinger commented on issue #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337#issuecomment-388562339
 
 
   Merged on master. Thanks @candrews. Please find a trick above in order to prevent further checkstyle issues in PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/May/18 15:22;githubbot;aldettinger closed pull request #2337: CAMEL-12506 and CAMEL-12507: SQS support for boolean and custom number types
URL: https://github.com/apache/camel/pull/2337
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
index 1ec145b3697..7fe85a989a7 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
@@ -135,9 +135,30 @@ public String toString() {
                     mav.setDataType(""Binary"");
                     mav.withBinaryValue((ByteBuffer)value);
                     result.put(entry.getKey(), mav);
+                } else if (value instanceof Boolean) {
+                    MessageAttributeValue mav = new MessageAttributeValue();
+                    mav.setDataType(""Number.Boolean"");
+                    mav.withStringValue(((Boolean)value)?""1"":""0"");
+                    result.put(entry.getKey(), mav);
                 } else if (value instanceof Number) {
                     MessageAttributeValue mav = new MessageAttributeValue();
-                    mav.setDataType(""Number"");
+                    final String dataType;
+                    if(value instanceof Integer) {
+                        dataType = ""Number.int"";
+                    } else if (value instanceof Byte) {
+                        dataType = ""Number.byte"";
+                    } else if (value instanceof Double) {
+                        dataType = ""Number.double"";
+                    } else if (value instanceof Float) {
+                        dataType = ""Number.float"";
+                    } else if (value instanceof Long) {
+                        dataType = ""Number.long"";
+                    } else if (value instanceof Short) {
+                        dataType = ""Number.short"";
+                    } else {
+                        dataType = ""Number"";
+                    }
+                    mav.setDataType(dataType);
                     mav.withStringValue(((Number)value).toString());
                     result.put(entry.getKey(), mav);
                 } else {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/May/18 15:22;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2337
;;;","12/May/18 15:26;aldettinger;Just merged on master at this stage.;;;","13/May/18 18:19;aldettinger;merged on master, camel-2.21.x, camel-2.20.x;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect URL for AWS SQS queues,CAMEL-12500,13158191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,candrews,candrews,09/May/18 13:16,09/May/18 13:42,13/Jul/23 08:31,09/May/18 13:39,,,,,,,,,,,,,,,,2.22.0,,,,,camel-aws,,,,,,0,,,,"There should be a . between the region and the host. The queueUrl is, for example, {{https://sqs.sqs.us-gov-west-1amazonaws.com}} - it should be {{https://sqs.sqs.us-gov-west-1.amazonaws.com}}.

 

This bug was caused by https://github.com/apache/camel/commit/6bb9f5559145bfc1f9db6718192e86c2a09a4e07",,candrews,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://github.com/apache/camel/pull/2329,,Patch,,,,,,,,9223372036854775807,,,Wed May 09 13:42:41 UTC 2018,,,,,,,Patch Available,,,,"0|i3tir3:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"09/May/18 13:22;githubbot;candrews commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387736596
 
 
   > We'll wait for the JIRA and the commit amend.
   
   Done

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/May/18 13:26;githubbot;oscerd commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387737598
 
 
   Thanks
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/May/18 13:38;githubbot;oscerd commented on issue #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329#issuecomment-387741466
 
 
   Thanks this has been merged on master

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/May/18 13:42;githubbot;oscerd closed pull request #2329: CAMEL-12500: Add missing . between region and host in SqsEndpoint
URL: https://github.com/apache/camel/pull/2329
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
index 7f3ab4d203d..45067347daf 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
@@ -129,7 +129,7 @@ protected void doStart() throws Exception {
             if (configuration.getRegion() != null && configuration.getQueueOwnerAWSAccountId() != null) {
                 String host = configuration.getAmazonAWSHost();
                 host = FileUtil.stripTrailingSeparator(host);
-                queueUrl = ""https://sqs."" + configuration.getRegion() + host + ""/""
+                queueUrl = ""https://sqs."" + configuration.getRegion() + ""."" + host + ""/""
                         + configuration.getQueueOwnerAWSAccountId() + ""/"" + configuration.getQueueName();
             } else if (configuration.getQueueOwnerAWSAccountId() != null) {
                 GetQueueUrlRequest getQueueUrlRequest = new GetQueueUrlRequest();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/May/18 13:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2329
;;;",,,,,,,,,,,,,,,,,,,,,,,,
One of the camel-jcache tests is failing,CAMEL-12498,13158186,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/18 12:37,17/May/18 11:40,13/Jul/23 08:31,17/May/18 11:40,,,,,,,,,,,,,,,,2.22.0,,,,,camel-jcache,,,,,,0,,,,"Seems that one of camel-jcache tests started failing.

[Test results|https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel/job/master/289/testReport/org.apache.camel.component.jcache/JCacheConsumerTest/testFilters/]",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-05-09 12:37:46.0,,,,,,,,,,,"0|i3tipz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix CXF-Blueprint tests,CAMEL-12497,13158184,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,09/May/18 12:35,17/May/18 11:41,13/Jul/23 08:31,17/May/18 11:41,,,,,,,,,,,,,,,,2.22.0,,,,,,,,,,,0,,,,"A number of tests in {{tests/camel-blueprint-cxf-test}} are failing on CI.

[Test results|https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel/job/master/289/testReport/]",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-05-09 12:35:31.0,,,,,,,,,,,"0|i3tipj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
route-coverage : report summary problem,CAMEL-12491,13157553,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smor,smor,07/May/18 10:14,24/May/18 17:17,13/Jul/23 08:31,24/May/18 17:17,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,tooling,,,,,,0,,,,"Consider the example code given in CAMEL-12483

When running camel:route-coverage the report show to many passes for the routes. It looks like the RouteCoverageEventNotifier files holds the sum of all tests, and not just the values for the single test method. 
 
{code:java}
Class:  dk.smor.MySpringBootRouter
Route:  myRouteId

  Line #      Count   Route
  ------      -----   -----
      11          8   from
      13          8     log
      15          8     choice
      16          2       setBody
      18          2       log
      20          2       setBody
      22          2       log
      24          2       setBody
      26          2       log
      28          2       setBody
      30          2       log

Coverage: 11 out of 11 (100.0%)
{code}

each log statement should only have been passed 1 time. And a total for 4 passes for the whole route. 
 ",,davsclaus,smor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 24 17:17:54 UTC 2018,,,,,,,,,,,"0|i3tetj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/May/18 11:28;davsclaus;Okay so the issue is that you have 2 unit tests, and that when you run both of them then the JMX state of the previous test is not cleared, eg if you add the spring annotation @DirtiesContext to ensure spring is cleanly shutdown between each test, you get the expected result.

However we can maybe detect this in the route coverage dumper - so the saved statistics do not include the previous data. It may be a bit tricky.;;;","23/May/18 06:19;smor;Spot on [~davsclaus] Thanks for helping.
 I added
{code:java}
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
{code}
and now I get the expected result. ;;;","24/May/18 17:17;davsclaus;Was a bit tricker to get resolved so it works with and without setting springs @DirtiesContext. Now it works without having to do so.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-jms: ClassNotFoundException: org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory in Spring-Boot,CAMEL-12490,13157524,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,07/May/18 07:54,16/May/18 07:53,13/Jul/23 08:31,16/May/18 07:53,2.21.1,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,camel-jms,camel-spring-boot-starters,,,,,0,,,,"Not sure if this is a Camel bug, but I'm using activemq-camel 5.14.5 in a spring-boot 1.5.12 application.

After upgrading from Camel 2.21.0 to 2.21.1 start-up fails with:

{noformat}
2018-05-07 09:45:34.213 ERROR 7992 --- [  restartedMain] o.s.boot.SpringApplication               : Application startup failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.jms.config.internalJmsListenerAnnotationProcessor' defined in class path resource [org/springframework/jms/annotation/JmsBootstrapConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor]: Factory method 'jmsListenerAnnotationProcessor' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1071) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:225) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:703) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:528) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.12.RELEASE.jar:1.5.12.RELEASE]
	at de.telekom.dms.FlexKommBusinessServicesApplication.main(FlexKommBusinessServicesApplication.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.12.RELEASE.jar:1.5.12.RELEASE]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor]: Factory method 'jmsListenerAnnotationProcessor' threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	... 22 common frames omitted
Caused by: java.lang.NoClassDefFoundError: org/springframework/messaging/handler/annotation/support/MessageHandlerMethodFactory
	at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_121]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_121]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.8.0_121]
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) ~[na:1.8.0_121]
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73) ~[na:1.8.0_121]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:368) ~[na:1.8.0_121]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:362) ~[na:1.8.0_121]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_121]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:361) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_121]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_121]
	at org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.<init>(JmsListenerAnnotationBeanPostProcessor.java:103) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration.jmsListenerAnnotationProcessor(JmsBootstrapConfiguration.java:47) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d.CGLIB$jmsListenerAnnotationProcessor$1(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d$$FastClassBySpringCGLIB$$265c8d54.invoke(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) ~[spring-context-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at org.springframework.jms.annotation.JmsBootstrapConfiguration$$EnhancerBySpringCGLIB$$1878cc3d.jmsListenerAnnotationProcessor(<generated>) ~[spring-jms-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.3.16.RELEASE.jar:4.3.16.RELEASE]
	... 23 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_121]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) ~[na:1.8.0_121]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_121]
	... 47 common frames omitted
{noformat}

The cause is https://issues.apache.org/jira/browse/CAMEL-12447, because when I add

{code}
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-messaging</artifactId>
</dependency>
{code}

everything works fine again.

",,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12447,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 16 07:53:22 UTC 2018,,,,,,,,,,,"0|i3ten3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/May/18 12:29;davsclaus;Ah okay, so it sounds like spring-messaging should be added in camel-jms-starter or if spring had some jms-starter of its own.;;;","16/May/18 07:53;davsclaus;Okay its better to just revert CAMEL-12447 then it works as before. We could have added spring-messaging to only camel-jms-starter also. But maybe its safter to just let it be part of camel-jms by default so its always on the classpath.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
S3Producer must close the streams it opens,CAMEL-12487,13157426,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,damien_b,damien_b,06/May/18 09:31,08/May/18 08:52,13/Jul/23 08:31,08/May/18 08:51,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-aws,,,,,,0,,,,"We've got a busy route with high memory pressure, we found out it was due to S3Producer not closing the streams it opened in some cases. See [MR|https://github.com/apache/camel/pull/2321]",,damien_b,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 08 08:52:14 UTC 2018,,,,,,,Patch Available,,,,"0|i3te1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/May/18 11:32;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-386872733
 
 
   See https://issues.apache.org/jira/browse/CAMEL-12487

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 08:59;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387003326
 
 
   Can you please rebase?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 15:11;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387097397
 
 
   Could you be more precise? I don't understand what you're asking ^^;

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 15:21;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387100516
 
 
   You need to align the code to the master branch with a git pull --rebase origin master

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 15:39;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387106398
 
 
   It was created directly from the GitHub editor, I didn't check out the repo. Let's see.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 15:47;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387109038
 
 
   Ok, GitHub documentation says you need to do it from a Git client, but you should have a button ""rebase and merge"" on your side https://blog.github.com/2016-09-26-rebase-and-merge-pull-requests/ .

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 15:49;githubbot;oscerd commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387109762
 
 
   I know it but your PR has conflicts even when rebasing. So I can't use it directly. By the way I'll create a commit with your fix and let you know.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/May/18 16:16;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387118634
 
 
   My bad, thought apache-master was the logical master for an Apache project.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:34;githubbot;damienb-opt opened a new pull request #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326
 
 
   See https://issues.apache.org/jira/browse/CAMEL-12487

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:34;githubbot;GitHub user damienb-opt opened a pull request:

    https://github.com/apache/camel/pull/2326

    CAMEL-12487: S3Producer must close the streams it opens

    See https://issues.apache.org/jira/browse/CAMEL-12487

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/damienb-opt/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2326.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2326
    
----
commit d14f5b173d063f24872f0c80af98937fbf8f2212
Author: damienb-opt <36661255+damienb-opt@...>
Date:   2018-05-08T08:34:09Z

    CAMEL-12487: S3Producer must close the streams it opens
    
    See https://issues.apache.org/jira/browse/CAMEL-12487

----
;;;","08/May/18 08:35;githubbot;oscerd commented on issue #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326#issuecomment-387327792
 
 
   Thanks, I'm merging.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:35;githubbot;damienb-opt closed pull request #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
index bb5847c28bb..2af5742450a 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
@@ -242,10 +242,11 @@ public void processSingleOp(final Exchange exchange) throws Exception {
             message.setHeader(S3Constants.VERSION_ID, putObjectResult.getVersionId());
         }
 
+        // close streams
+        IOHelper.close(putObjectRequest.getInputStream());
+        IOHelper.close(is);
+
         if (getConfiguration().isDeleteAfterWrite() && filePayload != null) {
-            // close streams
-            IOHelper.close(putObjectRequest.getInputStream());
-            IOHelper.close(is);
             FileUtil.deleteFile(filePayload);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:35;githubbot;damienb-opt commented on issue #2321: CAMEL-12487 S3Producer must close the streams it opens 
URL: https://github.com/apache/camel/pull/2321#issuecomment-387327925
 
 
   Replaced by https://github.com/apache/camel/pull/2326

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:35;githubbot;Github user damienb-opt closed the pull request at:

    https://github.com/apache/camel/pull/2321
;;;","08/May/18 08:49;githubbot;oscerd closed pull request #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
index fc5c2354945..159eff64175 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/s3/S3Producer.java
@@ -276,10 +276,11 @@ public void processSingleOp(final Exchange exchange) throws Exception {
             message.setHeader(S3Constants.VERSION_ID, putObjectResult.getVersionId());
         }
 
+        // close streams
+        IOHelper.close(putObjectRequest.getInputStream());
+        IOHelper.close(is);
+
         if (getConfiguration().isDeleteAfterWrite() && filePayload != null) {
-            // close streams
-            IOHelper.close(putObjectRequest.getInputStream());
-            IOHelper.close(is);
             FileUtil.deleteFile(filePayload);
         }
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/May/18 08:49;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2326
;;;","08/May/18 08:52;githubbot;oscerd commented on issue #2326: CAMEL-12487: S3Producer must close the streams it opens
URL: https://github.com/apache/camel/pull/2326#issuecomment-387332457
 
 
   Thanks for the PR. It has been merged on master, 2.21.x and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,
Camel-salesforce component does not try to reconnect on specific error,CAMEL-12484,13157121,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,hemangajmera,hemangajmera,04/May/18 11:35,05/Oct/18 10:42,13/Jul/23 08:31,05/Oct/18 09:49,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.2,2.23.0,,,camel-salesforce,,,,,,0,,,,"The issue is very much identical to CAMEL-10238 where camel component does not try to reconnect. It was resolved for that particular case, however there is additional scenario where we are facing exactly similar problem.

Here is the key log message after which component stops retrying

{{2018-05-03 17:19:50.257 WARN 7636 — [nt@911561694-23] o.a.c.c.s.i.s.SubscriptionHelper : Connect failure: {clientId=3qi3g4psrtqrntt15ockewu0a59q, advice=

{reconnect=none, interval=0}

, channel=/meta/connect, id=154, error=403::Unknown client, successful=false}}}

Please note that we are getting Connect failure multiple times but it is able to reconnect where there is exception or when the advice is to do handshake again. Here are those sample which works...
 * The one with exceptions

{quote}2018-05-03 17:19:17.965  WARN 7636 — [nt@911561694-23] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure: {failure=
Unknown macro: \{exception=java.io.EOFException}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser
Unknown macro: \{s=CLOSED,0 of -1}
]]<-DecryptedEndPoint@245db684
Unknown macro: \{telia-fi--dev.cs88.my.salesforce.com/85.222.137.144}
->HttpConnectionOverHTTP@69f41507(l:/0:0:0:0:0:0:0:1:60369 <-> r:telia-fi--dev.cs88.my.salesforce.com/85.222.137.144:443,closed=false)=>HttpChannelOverHTTP@3109c579(exchange=HttpExchange@76b96e24 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@5d6efa04(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@43ac2f18
Unknown macro: \{s=START}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser

]]->SocketChannelEndPoint@6b93b346
Unknown macro: \{telia-fi--dev.cs88.my.salesforce.com/85.222.137.144}
Unknown macro: \{io=0/0,kio=0,kro=1}
 ->SslConnection@53bc7193\{NEED_WRAP,eio=-1/-1,di=-1}=>HttpConnectionOverHTTP@69f41507(l:/0:0:0:0:0:0:0:1:60369 <-> r:telia-fi--dev.cs88.my.salesforce.com/85.222.137.144:443,closed=false)=>HttpChannelOverHTTP@3109c579(exchange=HttpExchange@76b96e24 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@5d6efa04(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@43ac2f18
Unknown macro: \{s=START}
],recv=HttpReceiverOverHTTP@144e8ebb(rsp=IDLE,failure=null)[HttpParser
Unknown macro: \{s=CLOSED,0 of -1}
]], message=\{clientId=3qi3g4psrtqrntt15ockewu0a59q, channel=/meta/connect, id=153, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=153, successful=false}
{quote}
 
 * The one with advice for new handshake

{quote}2018-05-03 16:31:08.970  WARN 7636 — [nt@911561694-21] o.a.c.c.s.i.s.SubscriptionHelper         : Connect failure:
Unknown macro: \{advice=Unknown macro}
, channel=/meta/connect, id=83, error=403::Unknown client, successful=false}
{quote}
 

One more thing, this log is coming from line 168 {{LOG.warn(""Connect failure: {}"", message);}} of the [https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L168]. I see that there is no attempt to reconnect. If this information helps move things faster...

 ",,2billy,davsclaus,githubbot,hemangajmera,sowjanya.mudimala@gmail.com,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Aug/18 12:06;hemangajmera;logs.zip;https://issues.apache.org/jira/secure/attachment/12935360/logs.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 05 09:49:42 UTC 2018,,,,,,,,,,,"0|i3tchj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/May/18 11:38;hemangajmera;Hi [~dhirajsb] and [~zregvart]

 

Can you please have a look that this ticket if time permits.

 

Thanks;;;","09/May/18 09:54;hemangajmera;[~dhirajsb], [~zregvart], can you please look into this one.;;;","09/May/18 10:10;zregvart;[~hemangajmera] can you provide details on how to reproduce this issue? I see that you're getting a 403 error with unknown client, potentially in this case until authentication information is updated reconnecting wont help.;;;","06/Aug/18 14:20;davsclaus;Any update on this, or we will have to close it with cannot reproduce;;;","13/Aug/18 10:31;hemangajmera;We have being running this component with debug logging for org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper

I have two logs, one before restart and one after restart...

Here are my observations.
 # In the logs before restart the component is running but not picking up message.We can see that after every 110 seconds it is polling message. However there are not messages being picked after 2018-08-06 02:01:36.024. Message with replayId = 11341 is the last one, after which it has not been able to pick any message.
 # Logs after restart where component picks up the messages without any changes. Since the component was started after 4 days there are few messages which are missing and the first message which it could get is 11485 and we have lost all the messages in between.
 # We are using camel springboot starter component for salesforce
 # We are using initial replay is as -2 and we are saving all the replayid to avoid duplicates.
 ;;;","14/Aug/18 13:46;2billy;[~zregvart] [~davsclaus]

I am also getting a similar error. The scenario is as follows:
 # Successfully getting a token and hitting the Salesforce Composite API
 # Wait for ~5-6 minutes
 # executing the same call as in step (1) and the following error happens (after ~20 seconds).
 # executing the same call as in step (1) and it works.

It seems that camel-salesforce is keeping the HTTP connection open, but for some reason after ~5-6 minutes the connection is terminated and the first request after that point it fails with: 
{code:java}
java.io.EOFException: HttpConnectionOverHTTP@6bea0fd0{code}
This is a blocker for me as well.. :(

Error that occurs at step (3):

 
{code:java}
// Caused by: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected error {0:null} executing {GET:https://blabla.salesforce.com/services/data/v43.0/sobjects/Blabla__c/Blabla__c/GB}
at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:199)
at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:216)
at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:208)
at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470)
at org.eclipse.jetty.client.HttpReceiver.abort(HttpReceiver.java:552)
at org.eclipse.jetty.client.HttpReceiver.responseFailure(HttpReceiver.java:442)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.failAndClose(HttpReceiverOverHTTP.java:369)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.earlyEOF(HttpReceiverOverHTTP.java:338)
at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1557)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.shutdown(HttpReceiverOverHTTP.java:209)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:147)
at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73)
at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133)
at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155)
at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)
at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)
at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291)
at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151)
at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)
at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)
at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762)
at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680)
... 1 common frames omitted
Caused by: java.io.EOFException: HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:saas-power.my.salesforce.com/:443,closed=false)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]<-DecryptedEndPoint@211a7fce{saas-power.my.salesforce.com/:443<->/,OPEN,fill=-,flush=-,to=1222972/0}->HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:saas-power.my.salesforce.com/:443,closed=false)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]->SocketChannelEndPoint@66327f41{saas-powermy.salesforce.com/:443<->/:56790,ISHUT,fill=-,flush=-,to=18913/0}{io=0/0,kio=0,kro=1}->SslConnection@55f5fe56{NEED_WRAP,eio=-1/-1,di=-1}=>HttpConnectionOverHTTP@6bea0fd0(l:/:56790 <-> r:<http://saas-power.my.salesforce.com/85.222.132.58:443,closed=false|saas-power.my.salesforce.co:443,closed=false>)=>HttpChannelOverHTTP@3b5b76fa(exchange=HttpExchange@79e09003 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@6df54357(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator@7a3939a8{s=START}],recv=HttpReceiverOverHTTP@41163db0(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]
... 16 common frames omitted
{code}
 

 ;;;","14/Aug/18 15:30;2billy;In my case there is no bug! So what was happening is that the ""idleTimeout"" (with default value 0) was not expiring before SalesForce closed the connection (~5-6 minutes). The solution is to set
{code:java}
 clientProperties.put(""idleTimeout"", ""5000"");
 // ...
 component.setHttpClientProperties(clientProperties);
{code}
so as to make sure it expires before SF forcefully terminates the connection.

 

Thanks

 ;;;","14/Aug/18 15:36;2billy;Actually, Camel Salesforce should set a reasonable default ""idleTimeout"" and not leave the jetty default 0 value (which if I am not wrong is ""never timeout""). As it is reasonable for SalesForce to eventually terminate the connection.

Thanks again!;;;","15/Aug/18 11:30;zregvart;[~hemangajmera] can you see if the solution proposed by [~2billy] helps in your case? If it helps I would resolve this by setting the {{idleTimeout}} to a value other than {{0.}} Thanks :);;;","20/Aug/18 06:37;hemangajmera;I will try out and let you know;;;","20/Aug/18 10:13;hemangajmera;I am using camel-salesforce-starter with springboot. Can I set the timeout by setting application.properties

{{camel.component.salesforce.httpClientProperties.idleTimeout=5000}};;;","20/Aug/18 10:16;hemangajmera;Also the first exception (line number 1530) after the last time it was able to receive message(line number 1282) is bit different

 
{code:java}
2018-08-06 05:03:18.822  INFO 9 --- [ent@710f4dc7-25] o.eclipse.jetty.client.ResponseNotifier  : Exception while notifying listener org.cometd.client.transport.LongPollingTransport$2@53962c22 java.lang.NullPointerException: null     at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936) ~[na:1.8.0_151]     at org.cometd.common.AbstractClientSession.getReleasableChannel(AbstractClientSession.java:320) ~[cometd-java-common-3.1.2.jar!/:na]     at org.cometd.common.AbstractClientSession.receive(AbstractClientSession.java:240) ~[cometd-java-common-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.processMessage(BayeuxClient.java:822) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.processMessages(BayeuxClient.java:618) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient.access$3100(BayeuxClient.java:100) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.BayeuxClient$MessageTransportListener.onMessages(BayeuxClient.java:1189) ~[cometd-java-client-3.1.2.jar!/:na]     at org.cometd.client.transport.LongPollingTransport$2.onComplete(LongPollingTransport.java:236) ~[cometd-java-client-3.1.2.jar!/:na]     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:464) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:410) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:301) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.handleContentMessage(HttpParser.java:628) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1594) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1442) [jetty-http-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:173) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:134) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:72) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155) [jetty-client-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) [jetty-io-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:319) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:175) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:133) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:754) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:672) [jetty-util-9.4.9.v20180320.jar!/:9.4.9.v20180320]     at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]
{code};;;","14/Sep/18 10:52;hemangajmera;After adding below line in applications.properties, we have not faced the issue so far. 

{{camel.component.salesforce.httpClientProperties.idleTimeout=5000}}

It seems setting idleTimeout resolves the issue. 

From my end the issue is resolved, and if issue resurface, I will create another ticket.

However, before we close this ticket, we should set default value for this and add this information in the documentation.
;;;","04/Oct/18 18:46;sowjanya.mudimala@gmail.com;I am willing to make a code fix to set a default value for idleTimeout. I am new to the process, let me know how I can get the ticket assigned to myself. 
Trying to create a patch as suggested here. https://github.com/apache/camel/blob/master/CONTRIBUTING.md#creating-patches;;;","04/Oct/18 19:09;githubbot;sowjanyamudimala opened a new pull request #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552
 
 
    setting default idletimeout as per the suggestion in the ticket. 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Oct/18 19:09;githubbot;GitHub user sowjanyamudimala opened a pull request:

    https://github.com/apache/camel/pull/2552

    CAMEL-12484: setting default idletimeout for httpclient

     setting default idletimeout as per the suggestion in the ticket. 


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sowjanyamudimala/camel CAMEL-12484

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2552.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2552
    
----
commit 526e2164c1b29eccd21c966592c948adcf3f869e
Author: Sowjanya Mudimala <smudimala@...>
Date:   2018-10-04T19:03:56Z

    setting default idletimeout for httpclient

----
;;;","04/Oct/18 19:22;githubbot;oscerd commented on issue #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552#issuecomment-427139203
 
 
   @zregvart can you have a look?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Oct/18 09:47;githubbot;zregvart closed pull request #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
index 7ced1a0fc9c..daa0f130026 100644
--- a/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
+++ b/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java
@@ -80,6 +80,7 @@
     public static final String HTTP_PROXY_REALM = ""httpProxyRealm"";
 
     static final int CONNECTION_TIMEOUT = 60000;
+    static final int IDLE_TIMEOUT = 5000;
     static final Pattern SOBJECT_NAME_PATTERN = Pattern.compile(""^.*[\\?&]sObjectName=([^&,]+).*$"");
     static final String APEX_CALL_PREFIX = OperationName.APEX_CALL.value() + ""/"";
 
@@ -116,7 +117,7 @@
         label = ""common,security"", secret = true)
     private String refreshToken;
 
-    @Metadata(description = ""Username used in OAuth flow to gain access to access token. It's easy to get started with"" 
+    @Metadata(description = ""Username used in OAuth flow to gain access to access token. It's easy to get started with""
         + "" password OAuth flow, but in general one should avoid it as it is deemed less secure than other flows."",
         label = ""common,security"")
     private String userName;
@@ -716,6 +717,7 @@ static SalesforceHttpClient createHttpClient(final SslContextFactory sslContextF
         // default settings, use httpClientProperties to set other
         // properties
         httpClient.setConnectTimeout(CONNECTION_TIMEOUT);
+        httpClient.setIdleTimeout(IDLE_TIMEOUT);
 
         return httpClient;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Oct/18 09:47;githubbot;Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/2552
;;;","05/Oct/18 09:47;githubbot;zregvart commented on issue #2552: CAMEL-12484: setting default idletimeout for httpclient
URL: https://github.com/apache/camel/pull/2552#issuecomment-427307407
 
 
   Thanks for the PR @sowjanyamudimala :100: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Oct/18 09:49;zregvart;Thanks to [~sowjanya.mudimala@gmail.com] for pull request!;;;",,,,,,,,
route-coverage : endChoice() problem,CAMEL-12483,13157108,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smor,smor,04/May/18 10:33,06/May/18 08:33,13/Jul/23 08:31,06/May/18 08:33,2.21.0,,,,,,,,,,,,,,,2.21.2,2.22.0,,,,tooling,,,,,,0,,,,"When running 
{code:java}
mvn camel:route-coverage{code}
on routes that use endChoice() you get a NullPointerException. 
{code:java}
[WARNING] Error parsing java file c:\workspace\kk\coverage\src\main\java\dk\smor\MySpringBootRouter.java code due null
java.lang.NullPointerException
at org.apache.camel.parser.helper.CamelJavaTreeParserHelper.parseCamelRouteTree(CamelJavaTreeParserHelper.java:132)
at org.apache.camel.parser.RouteBuilderParser.parseRouteBuilderTree(RouteBuilderParser.java:80)
at org.apache.camel.maven.RouteCoverageMojo.execute(RouteCoverageMojo.java:158)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
{code}

I have attached a zip file with some example code to re-produce the problem.
The example code has 2 routes, 1 with endChoice() and 1 without. The 2 route should behave equally.
",,davsclaus,smor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/May/18 10:31;smor;coverage.zip;https://issues.apache.org/jira/secure/attachment/12921918/coverage.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 06 08:33:19 UTC 2018,,,,,,,,,,,"0|i3tcen:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/May/18 08:33;davsclaus;Thanks for reporting and with the sample project - that was great help to reproduce and fix the bug;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpOperationFailedException exposes password when using basic auth with user:password@host notation,CAMEL-12480,13156847,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,03/May/18 11:50,06/May/18 11:59,13/Jul/23 08:31,06/May/18 11:58,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,camel-ahc,camel-http-common,camel-netty-http,camel-netty4-http,camel-undertow,,0,,,,"Simplified route:

{code}
from(inUri)
            .toD(""http4://user:password@host:port/path"");
{code}

When a HttpOperationFailedException occurs the message contains the unmasked password e.g. ""HTTP operation failed invoking http://user:password@host:port/path ...""

I guess Camel should mask the password.
",,davsclaus,githubbot,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 06 11:59:47 UTC 2018,,,,,,,,,,,"0|i3taun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/May/18 07:27;davsclaus;Yeah good point, its also in camel-ahc, camel-netty-http netty4-http. There is URISupport that has a method to mask, which we use in other places.

A PR to fix this is welcome;;;","04/May/18 17:57;githubbot;PascalSchumacher opened a new pull request #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317
 
 
   … basic auth with user:password@host notation
   
   Sanitize URI in HttpOperationFailedException constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/May/18 17:57;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/2317

    CAMEL-12480: HttpOperationFailedException exposes password when using…

    … basic auth with user:password@host notation
    
    Sanitize URI in HttpOperationFailedException constructor.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel HttpOperationFailedException_exposes_password

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2317.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2317
    
----
commit fa9062d25ec8a229e2ce2407653bb1886045da71
Author: Pascal Schumacher <pascalschumacher@...>
Date:   2018-05-04T17:56:53Z

    CAMEL-12480: HttpOperationFailedException exposes password when using basic auth with user:password@host notation
    
    Sanitize URI in HttpOperationFailedException constructor.

----
;;;","05/May/18 05:52;githubbot;davsclaus commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386781964
 
 
   You need to do the same for other components as well
   ```
   workspace/camel/components (master)/$ git grep ""HTTP operation failed""
   camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java:        super(""HTTP operation failed invoking "" + url + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java:        super(""HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java: * Exception when a Netty HTTP operation failed.
   camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java:        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java: * Exception when a Netty HTTP operation failed.
   camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java:        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/May/18 08:16;githubbot;davsclaus commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386862365
 
 
   Looks goos, this can be merged to master and older branches

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/May/18 11:59;githubbot;PascalSchumacher commented on issue #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317#issuecomment-386874216
 
 
   Done.
   
   @davsclaus Thanks for the reviews!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/May/18 11:59;githubbot;PascalSchumacher closed pull request #2317: CAMEL-12480: HttpOperationFailedException exposes password when using…
URL: https://github.com/apache/camel/pull/2317
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java b/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
index 7505a1c072f..86fb2ea6f50 100644
--- a/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
+++ b/components/camel-ahc/src/main/java/org/apache/camel/component/ahc/AhcOperationFailedException.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 public class AhcOperationFailedException extends CamelException {
     private static final long serialVersionUID = -6731281444593522633L;
@@ -31,8 +32,9 @@
     private final String responseBody;
 
     public AhcOperationFailedException(String url, int statusCode, String statusText, String location, Map<String, String> responseHeaders, String responseBody) {
-        super(""HTTP operation failed invoking "" + url + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.url = url;
+        // sanitize url so we do not show sensitive information such as passwords
+        super(""HTTP operation failed invoking "" + URISupport.sanitizeUri(url) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.url = URISupport.sanitizeUri(url);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java b/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..1e1a0e12440
--- /dev/null
+++ b/components/camel-ahc/src/test/java/org/apache/camel/component/ahc/AhcOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.ahc;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class AhcOperationFailedExceptionTest {
+
+    @Test
+    public void testUrlIsSanitized() {
+        AhcOperationFailedException ahcOperationFailedException = new AhcOperationFailedException(""http://user:password@host"", 500, """", """", null, """");
+
+        assertThat(ahcOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(ahcOperationFailedException.getUrl(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
index 20086583ca8..4701783136d 100644
--- a/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
+++ b/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpOperationFailedException.java
@@ -20,6 +20,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 public class HttpOperationFailedException extends CamelException {
     private static final long serialVersionUID = -8721487434390572634L;
@@ -31,8 +32,9 @@
     private final String responseBody;
 
     public HttpOperationFailedException(String uri, int statusCode, String statusText, String location, Map<String, String> responseHeaders, String responseBody) {
-        super(""HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..49d98bb2d27
--- /dev/null
+++ b/components/camel-http-common/src/test/java/org/apache/camel/http/common/HttpOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.http.common;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class HttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        HttpOperationFailedException httpOperationFailedException = new HttpOperationFailedException(""http://user:password@host"", 500, """", """", null, """");
+
+        assertThat(httpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(httpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java b/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
index cf8722a5b97..fda18207efe 100644
--- a/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
+++ b/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedException.java
@@ -18,6 +18,7 @@
 
 import org.apache.camel.CamelException;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 import org.jboss.netty.handler.codec.http.HttpResponse;
 
 /**
@@ -32,8 +33,9 @@
     private final transient HttpResponse response;
 
     public NettyHttpOperationFailedException(String uri, int statusCode, String statusText, String location, HttpResponse response) {
-        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""Netty HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java b/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..8bdd6d0ad8c
--- /dev/null
+++ b/components/camel-netty-http/src/test/java/org/apache/camel/component/netty/http/NettyHttpOperationFailedExceptionTest.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.netty.http;
+
+import org.junit.Test;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class NettyHttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        NettyHttpOperationFailedException nettyHttpOperationFailedException = new NettyHttpOperationFailedException(""http://user:password@host"", 500, """", """", null);
+
+        assertThat(nettyHttpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(nettyHttpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}
diff --git a/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java b/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
index 5baceeb9a60..32ea065dabc 100644
--- a/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
+++ b/components/camel-netty4-http/src/main/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedException.java
@@ -22,6 +22,7 @@
 import org.apache.camel.CamelException;
 import org.apache.camel.component.netty4.NettyConverter;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.URISupport;
 
 /**
  * Exception when a Netty HTTP operation failed.
@@ -36,8 +37,9 @@
     private final String contentAsString;
 
     public NettyHttpOperationFailedException(String uri, int statusCode, String statusText, String location, HttpContent content) {
-        super(""Netty HTTP operation failed invoking "" + uri + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
-        this.uri = uri;
+        // sanitize uri so we do not show sensitive information such as passwords
+        super(""Netty HTTP operation failed invoking "" + URISupport.sanitizeUri(uri) + "" with statusCode: "" + statusCode + (location != null ? "", redirectLocation: "" + location : """"));
+        this.uri = URISupport.sanitizeUri(uri);
         this.statusCode = statusCode;
         this.statusText = statusText;
         this.redirectLocation = location;
diff --git a/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java b/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java
new file mode 100644
index 00000000000..db83dfbe8e1
--- /dev/null
+++ b/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpOperationFailedExceptionTest.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.netty4.http;
+
+import org.junit.Test;
+
+import io.netty.handler.codec.http.DefaultLastHttpContent;
+
+import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.core.StringContains.containsString;
+import static org.junit.Assert.assertThat;
+
+public class NettyHttpOperationFailedExceptionTest {
+
+    @Test
+    public void testUriIsSanitized() {
+        NettyHttpOperationFailedException nettyHttpOperationFailedException = new NettyHttpOperationFailedException(""http://user:password@host"", 500, """", """", new DefaultLastHttpContent());
+
+        assertThat(nettyHttpOperationFailedException.getMessage(), not(containsString(""password"")));
+        assertThat(nettyHttpOperationFailedException.getUri(), not(containsString(""password"")));
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/May/18 11:59;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/2317
;;;",,,,,,,,,,,,,,,,,,,,,
Undertow consumer with http4 producer results in Undertow throwing NullPointerException,CAMEL-12475,13156319,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dentych,dentych,01/May/18 10:39,03/May/18 03:22,13/Jul/23 08:31,03/May/18 03:22,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.2,2.22.0,,,,,,,,,0,component,,,"I have a very simple setup of Camel (standalone).

My route is as follows:
{code:java}
public class Application {
    public static void main(String... args) throws Exception {
        Main main = new Main();

        main.addRouteBuilder(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                restConfiguration().port(8080);

                rest(""/pi"")
                        .get()
                        .route()
                        .setExchangePattern(ExchangePattern.InOut)
                        .to(""https4://api.pi.delivery/v1/pi?bridgeEndpoint=true"");
            }
        });

        main.run();
    }
}{code}
Call the endpoint with: 
{noformat}
curl ""http://localhost:8080/pi?start=0&numberOfDigits=10""{noformat}
 

When using camel-undertow for consumer and camel-http4 for producer, I get a NullPointerException.
{code:java}
java.lang.NullPointerException: null
at io.undertow.io.AsyncSenderImpl.send(AsyncSenderImpl.java:141) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at io.undertow.io.AsyncSenderImpl.send(AsyncSenderImpl.java:285) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:142) ~[camel-undertow-2.21.0.jar:2.21.0]
at io.undertow.server.Connectors.executeRootHandler(Connectors.java:336) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) ~[undertow-core-1.4.23.Final.jar:1.4.23.Final]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_102]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_102]
at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_102]
{code}
However, if I switch out the camel-undertow dependency with camel-jetty, the above route configuration works just fine.","Operating System: Windows 8

Java version: 1.8

Camel version: 2.21.0",dentych,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 03 03:22:16 UTC 2018,,,,,,,,,,,"0|i3t7lz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/May/18 12:39;njiang;[~dentych] How can you access the route? I'm trying to reproduce the error.
It could be great if you can past the curl command to access the camel route.;;;","02/May/18 12:54;dentych;[~njiang] I have added the cURL command I used to the description. Sorry about that.;;;","02/May/18 15:04;njiang;This issue is caused by the camel cannot find a right type convert from InputStream to ByteBuffer.
You can workaround this issue by adding the convertTo(byte[].class) just like this 
{code}
  rest(""/pi"")
            .get()
            .route()
            .setExchangePattern(ExchangePattern.InOut)
            .to(""https4://api.pi.delivery/v1/pi?bridgeEndpoint=true"").convertBodyTo(byte[].class);
{code} ;;;","03/May/18 02:41;njiang;[~dentych] You can also add a [type converter|http://camel.apache.org/type-converter.html] from the InputStream to ByteBuffer to fix the NPE without changing the route. I will commit a quick fix for this issue shortly.

 ;;;","03/May/18 03:22;njiang;Applied the patch into master, camel-2.21.x and camel-2.20.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Remove servicemix repository,CAMEL-12474,13156313,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,oflebbe,oflebbe,01/May/18 08:30,02/May/18 20:10,13/Jul/23 08:31,02/May/18 06:19,,,,,,,,,,,,,,,,2.22.0,,,,,camel-script,,,,,,0,,,,"I did research on insecure development practises and tripped of the usage of

<url>http://svn.apache.org/repos/asf/servicemix/m2-repo</url>

in camel-script.

I checked servicemix repositories: It either contains duplicates of maven central (some with invalid poms) or original content.

Network traces while compiling camel suggest that mvn only pulls these artifacts from servicemix maven repository:
{code:java}
1525026026.300329	CW4Snp4aVItMFgPff9	172.17.0.2	38354	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/mozilla/rhino/1.7.7.1/rhino-1.7.7.1.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	270	404	Not Found	-	-	(empty)	-	-Fl1CyF3Qpey4VRjMaf	-	text/html
1525026026.756122	CzWVcz4DWIH77Wsfg2	172.17.0.2	38356	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/python/jython/2.5.3/jython-2.5.3.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	267	404	Not Found	-	-	(empty)	-	-FE4nRr2km9bJj89ff6	-	text/html
1525026027.180905	CFlRQ818nO5cbbbsTl	172.17.0.2	38358	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/codehaus/groovy/groovy-jsr223/2.4.12/groovy-jsr223-2.4.12.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	292	404	Not Found	-	-(empty)	-	-	-	-	-	-	F1QpLz2VRydzyYntF4	-	text/html
1525026027.647593	CX5M1E1hyxPYAoyL8i	172.17.0.2	38360	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	278	404	Not Found	-	-	(empty)	-FuD9RLFHEi17eOUkh	-	text/html
1525026028.094818	CiIO7oAUfj4tscfX5	172.17.0.2	38366	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/codehaus/groovy/groovy-jsr223/2.4.12/groovy-jsr223-2.4.12.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	292	404	Not Found	-	-(empty)	-	-	-	-	-	-	FyVPyfu1Y3DFkNgJ2	-	text/html
1525026028.099453	CUh1fW3Dl62XKXPLX2	172.17.0.2	38364	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/python/jython/2.5.3/jython-2.5.3.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	267	404	Not Found	-	-	(empty)	-	-F7x74522BvGw3zS7Eh	-	text/html
1525026028.099309	ClETpU2KKP8Ne1p6yh	172.17.0.2	38362	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/mozilla/rhino/1.7.7.1/rhino-1.7.7.1.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	270	404	Not Found	-	-	(empty)	-	-FbZ0xi2NtRzDdBk0Bb	-	text/html
1525026028.102116	CFCPI51JMEeZ5XVLz	172.17.0.2	38368	209.188.14.144	80	1	GET	svn.apache.org	/repos/asf/servicemix/m2-repo/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar	-	1.1	Apache-Maven/3.5.2 (Java 1.8.0_151; Linux 4.9.87-linuxkit-aufs)	0	278	404	Not Found	-	-	(empty)	-Fahqzk1hqZbMkcZZY5	-	text/html{code}
In a nutshell: rhino js engine, jython and beanshell.  This is provided by maven central as well.

 

So I suggest to remove that repository here.

Will provide a patch by a github pull request ",,githubbot,oflebbe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 02 20:10:46 UTC 2018,,,,,,,,,,,"0|i3t7kn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"01/May/18 08:39;githubbot;GitHub user oflebbe opened a pull request:

    https://github.com/apache/camel/pull/2311

    Remove servicemix repository

    See https://issues.apache.org/jira/browse/CAMEL-12474 for motivation and analysis.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oflebbe/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2311.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2311
    
----
commit 3c927ea43cd6b328b477e2bb3b17688403f023d9
Author: Olaf Flebbe <oflebbe@...>
Date:   2018-05-01T08:33:37Z

    Remove servicemix repository

----
;;;","02/May/18 06:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2311
;;;","02/May/18 20:10;oflebbe;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Downloading a large file with streamDownload and stepwise hangs ,CAMEL-12472,13155669,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karol.koltun,karol.koltun,27/Apr/18 09:53,23/Mar/21 12:48,13/Jul/23 08:31,23/Mar/21 12:48,2.21.0,,,,,,,,,,,,,,,3.10.0,,,,,camel-ftp,,,,,,0,,,,"*Downloading a file exceeding certain, system-dependent size with streamDownload and stepwise options turned on hangs and causes timeout.*

I prepared a test which triggers the error. The patch file is pretty big, as I had to make a file enough big to make the timeout happen. Basing on my predictions, the size of the file triggering the error depends on FTP configuration and Java caching policy (no proof available yet). Working with plain Vsftpd server even 1mb files triggered timeouts. In the test environment the limit on my desktop is 5 mb. If the test passes, please make the file bigger.

My intepretation of the problem:
 # Start downloading a file with size exceeding InputStream cache (on my pc approx. 1mb is the limit).
 [FtpOperations.java:373|https://github.com/apache/camel/blob/dc6caa696255240a2a27c3bf229fc3aac9014401/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java#L423]
{code:java}
InputStream is = this.client.retrieveFileStream(remoteName);
{code}
 #  The server responds 150 and opens data connection.
{code:java}
[user_ftp] FTP response: Client ""127.0.0.1"", ""150 Opening BINARY mode data connection for x (1048576 bytes).""
{code}
 # The data connection does not end because InputStream is waiting for reads and it has not cached whole file. No ""226 Transfer complete"" response from server.
 # Try to change directory as stepwise is turned on.
 [FtpOperations.java:387|https://github.com/apache/camel/blob/dc6caa696255240a2a27c3bf229fc3aac9014401/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java#L443]
{code:java}
this.changeCurrentDirectory(currentDir);
{code}
 # Camel hangs as the server is still in the data connection and we are waiting for response from CWD command.","* Camel versions: 2.17.0 and 2.21.0
 * Ftp servers: plain vsftpd server, org.apache.ftpserver as a mock, Camel test environment ftp.
 * Files: depending on configuration from 1mb to 5mb file is vital for error to happen. ",davsclaus,karol.koltun,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14506,,"27/Apr/18 09:42;karol.koltun;0001-FtpSimpleConsumeStreamingStepwiseTest.patch;https://issues.apache.org/jira/secure/attachment/12920989/0001-FtpSimpleConsumeStreamingStepwiseTest.patch",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 23 12:48:48 UTC 2021,,,,,,,,,,,"0|i3t3lr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"22/Aug/18 13:33;davsclaus;Okay thanks for reporting. I think this is a corner-case or limitations when you use streamDownload as then as you say cannot potentially do other FTP opertaions afterwards, until you have read the data stream. 

Anyone got thoughts if there is something we can do, or if not we can add some notes in the documentation about this issue;;;","23/Mar/21 12:48;davsclaus;This has been fixed by CAMEL-14506 where we does not allow to use stepwise with stream download.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Dots in RabbitMQ-component headers do not work,CAMEL-12471,13155402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,Ploef,Ploef,26/Apr/18 12:52,04/Sep/19 17:42,13/Jul/23 08:31,04/Sep/19 17:42,2.21.0,,,,,,,,,,,,,,,2.23.4,2.24.2,2.25.0,3.0.0,3.0.0.RC2,camel-rabbitmq,,,,,,1,,,,"Setting Exchange headers does not work for all the constants. E.g.:

.setHeader(RabbitMQConstants.DELIVERY_MODE, constant(""2""))
 .setHeader(RabbitMQConstants.EXCHANGE_OVERRIDE_NAME, constant(""test""))
 .setHeader(RabbitMQConstants.ROUTING_KEY, simple(""${header.msgType}""))

Only the header for routingkey is set as header. If I set the headers like this, so without using a dot (.) then all get set, but are useless ofcourse:

.setHeader(""rabbitmq_DELIVERY_MODE"", constant(""2""))
 .setHeader(""rabbitmq_EXCHANGE_OVERRIDE_NAME"", constant(""test""))
 .setHeader(RabbitMQConstants.ROUTING_KEY, simple(""${header.msgType}""))

 So only the ROUTING_KEY header exists in the function ""publishToRabbitMQ"" of the ""RabbitMQMessagePublisher"".

I'm still checking but for now I have no idea why the header for the routingkey is working as expected but the others not.

 ",,davsclaus,koscejev,onders,Ploef,,,,"hedgy commented on pull request #3131: CAMEL-12471: Fix overriding rabbitmq exchange name with EXCHANGE_OVERRIDE_NAME header
URL: https://github.com/apache/camel/pull/3131
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Aug/19 16:16;githubbot;600","oscerd commented on pull request #3131: CAMEL-12471: Fix overriding rabbitmq exchange name with EXCHANGE_OVERRIDE_NAME header
URL: https://github.com/apache/camel/pull/3131
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Sep/19 06:34;githubbot;600","hedgy commented on pull request #3134: CAMEL-12471: Fix overriding rabbit mq exchange name with EXCHANGE_OVE…
URL: https://github.com/apache/camel/pull/3134
 
 
   …RRIDE_NAME header.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;02/Sep/19 22:21;githubbot;600","davsclaus commented on pull request #3134: CAMEL-12471: Fix overriding rabbit mq exchange name with EXCHANGE_OVE…
URL: https://github.com/apache/camel/pull/3134
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Sep/19 17:40;githubbot;600",,,,0,2400,,,0,2400,,CAMEL-12455,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 20 15:36:23 UTC 2018,,,,,,,,,,,"0|i3t21j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Apr/18 17:38;onders;this is user's forum question but i would suggest you to try like this.

.setHeader(RabbitMQConstants.DELIVERY_MODE, constant(2))

 

and for other headers considering types of the headers.

 

 ;;;","26/Apr/18 18:06;Ploef;Hi Önder,

Thanks for the response. That is what I tried also. Using an integer for the constant does not solve the problem. The headers did not get set, or are removed, before the component is publishing. 

The only one that is still there is the rabbitmq.ROUTING_KEY header which was set just like the others.

 ;;;","26/Apr/18 18:14;Ploef;It looks like only the ""RabbitMQConstants.EXCHANGE_OVERRIDE_NAME"" header is removed before it can be used for publishing.

This is done in the RabbitMQProducer class:
{code:java}
String exchangeName = (String)exchange.getIn().removeHeader(""rabbitmq.EXCHANGE_OVERRIDE_NAME"");
{code}
But later the RabbitMQMessagePublisher class is also trying to get this header but it's already removed in the RabbitMQProducer class.;;;","26/Apr/18 18:16;Ploef;I'm afraid it seems to be a bug in the code. I tried to give some more info in another comment . Could you please reopen this issue?;;;","26/Apr/18 20:13;onders;for delivery_node, see this PR.–> [https://github.com/apache/camel/pull/2309]

for EXCHANGE_OVERRIDE_NAME, it is recently introduced by [~davsclaus]. He could confirm on it.;;;","22/Aug/18 11:40;davsclaus;The override header is not intended to be propagated, and it will be resolved to the exchangeName in the producer where to send the message. 

And what do you mean does not work. Can you be more specific. ;;;","20/Nov/18 15:36;koscejev;The {{EXCHANGE_OVERRIDE_NAME}} header is first handled (and removed to avoid propagation) in {{RabbitMQProducer}}, but is subsequently completely ignored - see {{rabbitExchange}} parameter:
{code:java}
    /**
     * Send a message borrowing a channel from the pool.
     */
    private void basicPublish(final Exchange camelExchange, final String rabbitExchange, final String routingKey) throws Exception {
        if (channelPool == null) {
            // Open connection and channel lazily if another thread hasn't
            checkConnectionAndChannelPool();
        }
        execute(new ChannelCallback<Void>() {
            @Override
            public Void doWithChannel(Channel channel) throws Exception {
                getEndpoint().publishExchangeToChannel(camelExchange, channel, routingKey);
                return null;
            }
        });
    }
{code}
 
 The 2nd time this header is checked in {{RabbitMQMessagePublisher#publishToRabbitMQ}}, but by that time it's already removed by RabbitMQProducer, so it can actually never be there. This means the header basically doesn't do anything.;;;",,,,,,,,,,,,,,,,,,,,,,
Don't carry soapAction forward if operationName is specified explicitly for the CxfProducer,CAMEL-12465,13154383,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,23/Apr/18 06:32,23/Apr/18 06:50,13/Jul/23 08:31,23/Apr/18 06:50,,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-cxf,,,,,,0,,,,So that the outgoing soap message get chance to calculate soapAction from the operationName,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-04-23 06:32:22.0,,,,,,,,,,,"0|i3svrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file consumer - Should not use readlock by default,CAMEL-12457,13153605,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Apr/18 06:55,19/Apr/18 07:13,13/Jul/23 08:31,19/Apr/18 07:13,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-core,,,,,,0,,,,"The file consumer should use readLock=none by default, which is also what the documentation says. However its reconfigured to markerFile which is a little mistake.

 ",,davsclaus,lichtin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 19 06:56:15 UTC 2018,,,,,,,,,,,"0|i3sr0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Apr/18 06:56;davsclaus;See

http://camel.465427.n5.nabble.com/Question-about-Exchange-properties-when-using-File-component-tp5819311.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka - AutoCommitEnabled=false should not auto commit,CAMEL-12454,13153265,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Apr/18 07:21,28/Jan/19 10:48,13/Jul/23 08:31,18/Apr/18 07:26,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-kafka,,,,,,0,,,,"Reported on gitter

John Culleton @jcullet Apr 17 17:22
Hi All - I'm running into an issue with the camel-kafka component when attempting to disable auto commit behavior. On camel 2.21, I'm finding that the offset is being committed even when ""autoCommitEnable=false"" is specified. When running through a debugger, I see that the offset commit is happening here: https://github.com/apache/camel/blob/0f98938e3b6ea15a2e022c707bf21a2af4ed7e0d/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java#L382. Based on the conditional, I think it would always evaluate to true when autoCommitEnable is set to false?",,avasilevskii,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 28 10:39:10 UTC 2019,,,,,,,,,,,"0|i3sox3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Jan/19 10:39;avasilevskii;[~davsclaus] Sorry for digging out this old ticket, but I just upgraded from Camel 2.20.3 to 2.23.1 and it seems there is a problem with this fix. When using auto commit enabled this code would commit for every complete exchange with no regard to the auto.commit.interval.ms setting. Here is an example with debugging turned on for org.apache.camel.component.kafka.KafkaConsumer, as you can see Kafka consumer commits every 10-500 ms instead of once per 5 seconds:
{code:java}
2019-01-28 10:46:55.025  INFO 3324 --- [ontext_Worker-3] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [192.168.56.10:9093]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = service_new
	heartbeat.interval.ms = 3000
	interceptor.classes = null
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 1000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 40000
	retry.backoff.ms = 100
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.mechanism = GSSAPI
	security.protocol = SSL
	send.buffer.bytes = 131072
	session.timeout.ms = 30000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = /usr/files/server.jks
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JCEKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = /usr/files/truststore.jks
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JCEKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.kafka.common.utils.AppInfoParser     : Kafka version : 1.0.2
2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId : 2a121f7b1d402825
2019-01-28 10:46:55.160  INFO 3324 --- [ontext_Worker-3] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: kafka:topic1,topic2,topic3?brokers=192.168.56.10:9093
2019-01-28 10:46:55.161  INFO 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing topic1,topic2,topic3-Thread 0 to topic topic1,topic2,topic3
2019-01-28 10:46:55.161  INFO 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing topic1,topic2,topic3-Thread 0 to topic topic1,topic2,topic3
2019-01-28 10:46:55.313  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Discovered group coordinator 192.168.56.10:9093 (id: 2147483646 rack: null)
2019-01-28 10:46:55.315  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Revoking previously assigned partitions []
2019-01-28 10:46:55.316  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] (Re-)joining group
2019-01-28 10:46:58.469  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Successfully joined group with generation 3
2019-01-28 10:46:58.470  INFO 3324 --- [uponassignment]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-1, groupId=service_new] Setting newly assigned partitions [topic3-1, topic3-0, topic2-1, topic1-0, topic2-0, topic1-1]
2019-01-28 10:47:24.953 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3221
2019-01-28 10:47:24.953 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3221
2019-01-28 10:47:24.957 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3222
2019-01-28 10:47:24.957 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3222
2019-01-28 10:47:24.964 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3325
2019-01-28 10:47:24.964 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3325
2019-01-28 10:47:25.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3223
2019-01-28 10:47:25.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3223
2019-01-28 10:47:25.515 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3326
2019-01-28 10:47:25.515 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3326
2019-01-28 10:47:26.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3224
2019-01-28 10:47:26.005 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3224
2019-01-28 10:47:26.528 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3327
2019-01-28 10:47:26.528 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3327
2019-01-28 10:47:27.014 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3225
2019-01-28 10:47:27.014 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3225
2019-01-28 10:47:27.512 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3328
2019-01-28 10:47:27.512 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3328
2019-01-28 10:47:28.001 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3226
2019-01-28 10:47:28.001 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3226
2019-01-28 10:47:28.497 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3329
2019-01-28 10:47:28.497 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3329
2019-01-28 10:47:29.024 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3330
2019-01-28 10:47:29.024 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3330
2019-01-28 10:47:29.521 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3227
2019-01-28 10:47:29.521 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3227
2019-01-28 10:47:30.012 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3228
2019-01-28 10:47:30.012 DEBUG 3324 --- [uponassignment]] o.a.camel.component.kafka.KafkaConsumer  : Auto commitSync topic1,topic2,topic3-Thread 0 from topic topic1,topic2,topic3 with offset: 3228
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Memory leak: camel-cxf componet don't release UoW  in case of using ""robust"" property",CAMEL-12451,13152941,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,mfilippov,mfilippov,17/Apr/18 09:13,20/Apr/18 05:09,13/Jul/23 08:31,20/Apr/18 05:09,2.20.2,2.20.3,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-cxf,,,,,,0,,,,"In case of using ""org.apache.cxf.oneway.robust"" property camel-cxf component doesn't release UoW that leads to huge memory leak. I think it's relied with  the feature of output chain of cxf framwork which doesn't invoke additional interceptors in case of oneway operation.

in other words, this code is not called:

https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java

 
{code:java}


private class UnitOfWorkCloserInterceptor extends AbstractPhaseInterceptor<Message> {
   public UnitOfWorkCloserInterceptor() {
      super(Phase.POST_LOGICAL_ENDING);
}
@Override
public void handleMessage(Message message) throws Fault {
      Exchange cxfExchange = null;
      if ((cxfExchange = message.getExchange()) != null) {
         org.apache.camel.Exchange exchange =             cxfExchange.get(org.apache.camel.Exchange.class);
         if (exchange != null) {
            doneUoW(exchange);
   }
   }
   }
}
{code}
minimal example:

 

 
{code:java}
<cxf:cxfEndpoint id=""soap_in1"" 
   address=""/service1"" 
   xmlns:tns=""urn:api:service1"" 
   wsdlURL=""wsdl/service1.wsdl"" 
   serviceName=""tns:service1"" 
   endpointName=""tns:HTTP_Port"">
   <cxf:properties>
      <entry key=""dataFormat"" value=""PAYLOAD""/>
      <entry key=""org.apache.cxf.oneway.robust"" value=""true""/>
   </cxf:properties>
</cxf:cxfEndpoint>
<camelContext xmlns=""http://camel.apache.org/schema/blueprint""   id=""context1"">
   <route id=""loadTest1"">
      <from uri=""cxf:bean:soap_in1""/>
      <to uri=""log:end""/>
   </route> 
</camelContext>
{code}
 

 

 ",,davsclaus,mfilippov,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 20 05:09:19 UTC 2018,,,,,,,,,,,"0|i3smxb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Apr/18 09:47;davsclaus;Try with synchronous=true on the cxf endpoint.;;;","17/Apr/18 10:38;mfilippov;This has been tried. The result has not changed.;;;","18/Apr/18 07:46;davsclaus;Its not recommended to use these seldom used options like oneway and roboust. ;;;","18/Apr/18 08:46;mfilippov;Thank you for the answer, unfortunately we can not abandon this option. At the moment, a workaround is used to clean up the ""onExchangeDone"" event. Is it possible to hope that this problem will be solved in closest future?;;;","18/Apr/18 12:11;davsclaus;It helps if you have the time to dive into and try to find a solution. For example an unit test that reproduces the issue that we can add to camel-cxf would be a good start.;;;","18/Apr/18 14:35;njiang;For the oneway request, CXF [OutgoingChainInterceptor|https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/interceptor/OutgoingChainInterceptor.java#L66] just close steam, so the UnitOfWorkCloserInterceptor never has a chance to be called.  We may need to install another interceptor to handle the oneway calling in the CxfConsumer.;;;","20/Apr/18 05:09;njiang;Committed patch into master, camel-2.21.x and camel-2.20.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,
DefaultServiceLoadBalancer throws IndexOutOfBoundsException after applying ServiceFilter,CAMEL-12449,13152741,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Vadim R,Vadim R,16/Apr/18 14:41,17/Apr/18 08:31,13/Jul/23 08:31,17/Apr/18 07:58,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.",,davsclaus,githubbot,Vadim R,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 17 08:31:50 UTC 2018,,,,,,,,,,,"0|i3slpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Apr/18 14:45;githubbot;player13 opened a new pull request #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297
 
 
   If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 14:45;githubbot;GitHub user player13 opened a pull request:

    https://github.com/apache/camel/pull/2297

    CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException

    If no services remains after applying ServiceFilter in DefaultServiceLoadBalancer, expecting exception RejectedExecutionException(""No active services with name "" + serviceName), but throws IndexOutOfBoundsException.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/player13/camel CAMEL-12449

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2297.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2297
    
----
commit d7e85d89f1d2469862c9eadd5ecd82cb4a7aea8f
Author: Vadim R <8365723+player13@...>
Date:   2018-04-16T14:43:33Z

    CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException after applying ServiceFilter

----
;;;","17/Apr/18 07:53;githubbot;davsclaus closed pull request #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java b/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
index 19a55fa31a0..51d33cd0c59 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/cloud/DefaultServiceLoadBalancer.java
@@ -136,7 +136,7 @@ protected void doStop() throws Exception {
             // filter services
             services = serviceFilter.apply(services);
             // let the client service chooser find which server to use
-            service = services.size() > 1 ? serviceChooser.choose(services) : services.get(0);
+            service = services.isEmpty() ? null : services.size() > 1 ? serviceChooser.choose(services) : services.get(0);
             if (service == null) {
                 throw new RejectedExecutionException(""No active services with name "" + serviceName);
             }
diff --git a/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java b/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
index a78c291c582..1b30c29f324 100644
--- a/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
+++ b/camel-core/src/test/java/org/apache/camel/impl/cloud/LoadBalancerTest.java
@@ -16,22 +16,31 @@
  */
 package org.apache.camel.impl.cloud;
 
+import java.util.concurrent.RejectedExecutionException;
 import java.util.stream.Collectors;
 
-import org.apache.camel.ContextTestSupport;
+import org.apache.camel.impl.DefaultCamelContext;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class LoadBalancerTest extends ContextTestSupport {
-    @Test
-    public void testLoadBalancer() throws Exception {
-        StaticServiceDiscovery serviceDiscovery = new StaticServiceDiscovery();
+import static junit.framework.TestCase.assertEquals;
+
+public class LoadBalancerTest {
+
+    private static StaticServiceDiscovery serviceDiscovery = new StaticServiceDiscovery();
+
+    @BeforeClass
+    public static void setUp() {
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 2001);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 2002);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 1001);
         serviceDiscovery.addServer(""no-name"", ""127.0.0.1"", 1002);
+    }
 
+    @Test
+    public void testLoadBalancer() throws Exception {
         DefaultServiceLoadBalancer loadBalancer = new DefaultServiceLoadBalancer();
-        loadBalancer.setCamelContext(context);
+        loadBalancer.setCamelContext(new DefaultCamelContext());
         loadBalancer.setServiceDiscovery(serviceDiscovery);
         loadBalancer.setServiceFilter(services -> services.stream().filter(s -> s.getPort() < 2000).collect(Collectors.toList()));
         loadBalancer.setServiceChooser(new RoundRobinServiceChooser());
@@ -44,4 +53,14 @@ public void testLoadBalancer() throws Exception {
             return false;
         });
     }
+
+    @Test(expected = RejectedExecutionException.class)
+    public void testNoActiveServices() throws Exception {
+        DefaultServiceLoadBalancer loadBalancer = new DefaultServiceLoadBalancer();
+        loadBalancer.setCamelContext(new DefaultCamelContext());
+        loadBalancer.setServiceDiscovery(serviceDiscovery);
+        loadBalancer.setServiceFilter(services -> services.stream().filter(s -> s.getPort() < 1000).collect(Collectors.toList()));
+        loadBalancer.setServiceChooser(new RoundRobinServiceChooser());
+        loadBalancer.process(""no-name"", service -> false);
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Apr/18 07:53;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2297
;;;","17/Apr/18 07:58;davsclaus;Thanks for the PR. I fixed the checkstyle issue.;;;","17/Apr/18 08:31;githubbot;player13 commented on issue #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297#issuecomment-381898820
 
 
   @davsclaus Tnx!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Apr/18 08:31;githubbot;player13 commented on issue #2297: CAMEL-12449: DefaultServiceLoadBalancer throws IndexOutOfBoundsException
URL: https://github.com/apache/camel/pull/2297#issuecomment-381898820
 
 
   @davsclaus Thx!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,
camel-consul - service health state calculated from all services with same name,CAMEL-12448,13152697,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Vadim R,Vadim R,16/Apr/18 11:56,19/Apr/18 07:51,13/Jul/23 08:31,19/Apr/18 07:51,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-consul,,,,,,0,,,,"In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

I've make some changes in ConsulServiceDiscoveryTest to show up this bug, and fix it in ConsulServiceDiscovery.",,githubbot,Vadim R,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 13:18:32 UTC 2018,,,,,,,,,,,"0|i3slfj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Apr/18 12:00;githubbot;player13 opened a new pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296
 
 
   In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 12:00;githubbot;GitHub user player13 opened a pull request:

    https://github.com/apache/camel/pull/2296

    CAMEL-12448  - camel-consul: filter health checks by service id

    In Consul catalog registered two instances of one service. Health check for first instance have ""passed"" state, and for second instance - ""critical"". Camel returns both service instances with healty checks, which method ""isHealthy"" returns ""false"".

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/player13/camel CAMEL-12448

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2296.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2296
    
----
commit 4a521a1fba5ea432838d2d168f72bb7a2eec53b8
Author: Vadim R <8365723+player13@...>
Date:   2018-04-16T11:58:44Z

    CAMEL-12448  - camel-consul: filter health checks by service id

----
;;;","16/Apr/18 12:05;githubbot;davsclaus commented on issue #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#issuecomment-381576196
 
 
   lgtm
   
   @lburgazzoli wonder if you could take a peak as well.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 13:02;githubbot;lburgazzoli commented on a change in pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#discussion_r181725231
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
 ##########
 @@ -62,7 +62,12 @@ public ConsulServiceDiscovery(ConsulConfiguration configuration) throws Exceptio
             .getResponse();
 
         return services.stream()
-            .map(service -> newService(name, service, healths))
+            .map(service -> newService(
+                    name,
+                    service,
+                    healths.stream()
+                            .filter(serviceHealth -> serviceHealth.getService().getId().equals(service.getServiceId()))
+                            .collect(Collectors.toList())))
 
 Review comment:
   Wondering if this can be moved inside `newService`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 13:16;githubbot;player13 commented on a change in pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#discussion_r181729271
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
 ##########
 @@ -62,7 +62,12 @@ public ConsulServiceDiscovery(ConsulConfiguration configuration) throws Exceptio
             .getResponse();
 
         return services.stream()
-            .map(service -> newService(name, service, healths))
+            .map(service -> newService(
+                    name,
+                    service,
+                    healths.stream()
+                            .filter(serviceHealth -> serviceHealth.getService().getId().equals(service.getServiceId()))
+                            .collect(Collectors.toList())))
 
 Review comment:
   Done!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 13:18;githubbot;lburgazzoli closed pull request #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
index e7cfd5f7430..74b7c006c35 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java
@@ -99,7 +99,11 @@ private ServiceDefinition newService(String serviceName, CatalogService service,
             service.getServiceAddress(),
             service.getServicePort(),
             meta,
-            new DefaultServiceHealth(serviceHealthList.stream().allMatch(this::isHealthy))
+            new DefaultServiceHealth(
+                    serviceHealthList.stream()
+                            .filter(h -> ObjectHelper.equal(h.getService().getId(), service.getServiceId()))
+                            .allMatch(this::isHealthy)
+            )
         );
     }
 }
diff --git a/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java b/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
index 2523ad74017..119e85b68fd 100644
--- a/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
+++ b/components/camel-consul/src/test/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscoveryTest.java
@@ -21,6 +21,7 @@
 
 import com.orbitz.consul.AgentClient;
 import com.orbitz.consul.Consul;
+import com.orbitz.consul.model.agent.ImmutableRegCheck;
 import com.orbitz.consul.model.agent.ImmutableRegistration;
 import com.orbitz.consul.model.agent.Registration;
 import org.apache.camel.cloud.ServiceDefinition;
@@ -44,7 +45,12 @@ public void setUp() throws Exception {
         client = Consul.builder().build().agentClient();
         registrations = new ArrayList<>(3);
 
-        for (int i = 0; i < 3; i++) {
+        for (int i = 0; i < 6; i++) {
+            Registration.RegCheck c = ImmutableRegCheck.builder()
+                .ttl(""1m"")
+                .status(i < 3 ? ""passing"" : ""critical"")
+                .build();
+
             Registration r = ImmutableRegistration.builder()
                 .id(""service-"" + i)
                 .name(""my-service"")
@@ -53,6 +59,7 @@ public void setUp() throws Exception {
                 .addTags(""key1=value1"")
                 .addTags(""key2=value2"")
                 .port(9000 + i)
+                .check(c)
                 .build();
 
             client.register(r);
@@ -76,7 +83,7 @@ public void testServiceDiscovery() throws Exception {
 
         List<ServiceDefinition> services = discovery.getServices(""my-service"");
         assertNotNull(services);
-        assertEquals(3, services.size());
+        assertEquals(6, services.size());
 
         for (ServiceDefinition service : services) {
             assertFalse(service.getMetadata().isEmpty());
@@ -85,6 +92,7 @@ public void testServiceDiscovery() throws Exception {
             assertTrue(service.getMetadata().containsKey(""a-tag""));
             assertTrue(service.getMetadata().containsKey(""key1""));
             assertTrue(service.getMetadata().containsKey(""key2""));
+            assertTrue(service.getPort() < 9003 ? service.getHealth().isHealthy() : !service.getHealth().isHealthy());
         }
     }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 13:18;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2296
;;;","16/Apr/18 13:18;githubbot;lburgazzoli commented on issue #2296: CAMEL-12448  - camel-consul: filter health checks by service id
URL: https://github.com/apache/camel/pull/2296#issuecomment-381596076
 
 
   Thx @player13 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,
spring-boot-rest-swagger example does not compile due to missing servlet-api dependendency,CAMEL-12445,13152660,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,16/Apr/18 09:36,16/Apr/18 10:39,13/Jul/23 08:31,16/Apr/18 10:39,2.21.1,,,,,,,,,,,,,,,2.21.1,,,,,examples,,,,,,0,,,,"camel-example-spring-boot-rest-swagger in camel-2.21.x branch does not compile due to missing servlet-api dep. Comparing with master, spring-boot-starter-undertow dep seems to be missing there. PR follows.",,davsclaus,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 10:39:43 UTC 2018,,,,,,,,,,,"0|i3sl7b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Apr/18 09:40;githubbot;ppalaga opened a new pull request #2295: CAMEL-12445: spring-boot-rest-swagger example does not compile due to
URL: https://github.com/apache/camel/pull/2295
 
 
   missing servlet-api dependendency

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 09:40;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2295

    CAMEL-12445: spring-boot-rest-swagger example does not compile due to

    missing servlet-api dependendency

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12445

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2295.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2295
    
----
commit 930f1307df2eb0d8e4326770de465b1c8f8047d3
Author: Peter Palaga <ppalaga@...>
Date:   2018-04-16T09:38:55Z

    CAMEL-12445: spring-boot-rest-swagger example does not compile due to
    missing servlet-api dependendency

----
;;;","16/Apr/18 10:39;githubbot;davsclaus closed pull request #2295: CAMEL-12445: spring-boot-rest-swagger example does not compile due to
URL: https://github.com/apache/camel/pull/2295
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/examples/camel-example-spring-boot-rest-swagger/pom.xml b/examples/camel-example-spring-boot-rest-swagger/pom.xml
index d97db33772b..1ddeabf0670 100644
--- a/examples/camel-example-spring-boot-rest-swagger/pom.xml
+++ b/examples/camel-example-spring-boot-rest-swagger/pom.xml
@@ -67,6 +67,10 @@
         </exclusion>
       </exclusions>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-undertow</artifactId>
+    </dependency>
 
     <!-- Camel -->
     <dependency>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 10:39;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2295
;;;","16/Apr/18 10:39;davsclaus;A Jira ticket was not needed for a trivial thing like this as it was not a bug in a released version;;;",,,,,,,,,,,,,,,,,,,,,,,,
MulticastProcessor doProcessParallel blocks indefinitly if exception occurs in it.next(),CAMEL-12441,13152202,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,shellysoft,shellysoft,13/Apr/18 08:00,16/Apr/18 09:00,13/Jul/23 08:31,16/Apr/18 08:32,2.20.3,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"After upgrading from camel 2.17.5 to 2.21.0 the following problem was encountered:

Context:
A camel RouteBuilder with a split :

{code:title=MyRouteBuilder.java|borderStyle=solid}
public class MyRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception {
         from(""direct:in"")
                 .split()
                      .xtokenize(""//someTocken"", 'i', NAMESPACES)
                      .aggregationStrategy(nw UseLatestAggregationStrategy())
                      .stopOnException()
                      .parallelAggregate()
                      .parallelProcessing()
                      .executorServiceRef(""splitExecutorService"").stopOnException()
                      .streaming().stopOnException()
                      .id(""xml-splitter"")
                .to(""direct:out"")
                .routeId(getClass().getSimpleName());
    } 
}
{code}

Problem encountered:
A malformed xml arrives on this route. it.hasNext() returns true but it.next() throws an exception. This causes an indefinite wait in MulticastProcessor at line 374.

Reason:
A call to countDown on aggregationOnTheFlyDone is never performed and thus the latch waits indefinitely.

Possible solution:
A call to aggregationOnTheFlyDone .countDown inside the catch corresponding to the try surrounding the while.

","Windows 8, java 1.8.0_162, camel 2.21.0",davsclaus,shellysoft,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 09:00:52 UTC 2018,,,,,,,,,,,"0|i3sien:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Apr/18 07:51;davsclaus;Can you post your XML sample;;;","15/Apr/18 08:54;shellysoft;I've created an example on my github account:

[https://github.com/shellysoft/CAMEL-12441]

I've tried to mirror the context I have in my project where I discovered the issue. As javax.xml.stream.XMLInputFactory I use com.ctc.wstx.stax.WstxInputFactory.

Please do not hesitate if you have any questions.

Thank you!;;;","16/Apr/18 08:22;davsclaus;Thanks I have reproduced the issue and have a fix. Mind that this problem is only on the first next call.;;;","16/Apr/18 08:32;davsclaus;Thanks for the sample project.;;;","16/Apr/18 09:00;shellysoft;You are most welcome!

Ah, yes! Because after the first call the aggregateOnTheFlyTask is submitted to the aggregateExecutorService and the allTaskSubmitted flag does it's job.

Thank you!

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow - should extract body message from PATCH request,CAMEL-12436,13151944,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tturek,tturek,12/Apr/18 11:49,12/Apr/18 14:07,13/Jul/23 08:31,12/Apr/18 14:07,2.21.0,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-undertow,,,,,,0,,,,Undertow component should process body message of HTTP PATCH request.,,davsclaus,githubbot,tturek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 12 14:07:24 UTC 2018,,,,,,,,,,,"0|i3sgtj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Apr/18 11:53;githubbot;osmman opened a new pull request #2289: CAMEL-12436: Fix Undertow to extract body message from PATCH request
URL: https://github.com/apache/camel/pull/2289
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Apr/18 11:53;githubbot;GitHub user osmman opened a pull request:

    https://github.com/apache/camel/pull/2289

    CAMEL-12436: Fix Undertow to extract body message from PATCH request

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/osmman/camel undertow-patch-method

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2289.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2289
    
----
commit 3dfd992e7a262f4c917351f1ba535e4d3d59d2a9
Author: Tomas Turek <tturek@...>
Date:   2018-04-11T14:35:46Z

    CAMEL-12436: Fix Undertow to extract body message from PATCH request

----
;;;","12/Apr/18 14:04;githubbot;davsclaus closed pull request #2289: CAMEL-12436: Fix Undertow to extract body message from PATCH request
URL: https://github.com/apache/camel/pull/2289
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
index 91bd8522205..ae1f6fe6e45 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
@@ -124,7 +124,7 @@ public Message toCamelMessage(HttpServerExchange httpExchange, Exchange exchange
         } else {
             //extract body by myself if undertow parser didn't handle and the method is allowed to have one
             //body is extracted as byte[] then auto TypeConverter kicks in
-            if (Methods.POST.equals(httpExchange.getRequestMethod()) || Methods.PUT.equals(httpExchange.getRequestMethod())) {
+            if (Methods.POST.equals(httpExchange.getRequestMethod()) || Methods.PUT.equals(httpExchange.getRequestMethod()) || Methods.PATCH.equals(httpExchange.getRequestMethod())) {
                 result.setBody(readFromChannel(httpExchange.getRequestChannel()));
             } else {
                 result.setBody(null);
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java
new file mode 100644
index 00000000000..bfbd59fca2b
--- /dev/null
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/rest/RestUndertowProducerPatchTest.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.undertow.rest;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.component.undertow.BaseUndertowTest;
+import org.junit.Test;
+
+public class RestUndertowProducerPatchTest extends BaseUndertowTest {
+
+    @Test
+    public void testUndertowProducerPatch() throws Exception {
+        String body = ""Donald Duck"";
+        String id = ""123"";
+
+        MockEndpoint mock = getMockEndpoint(""mock:input"");
+        mock.message(0).body().isEqualTo(body);
+        mock.message(0).header(""id"").isEqualTo(id);
+
+        fluentTemplate.withBody(body).withHeader(""id"", id).to(""direct:start"").send();
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                // configure to use localhost with the given port
+                restConfiguration().component(""undertow"").host(""localhost"").port(getPort());
+
+                from(""direct:start"")
+                        .to(""rest:patch:users/{id}"");
+
+                // use the rest DSL to define the rest services
+                rest(""/users/"")
+                        .patch(""{id}"")
+                        .to(""mock:input"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","12/Apr/18 14:04;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2289
;;;","12/Apr/18 14:07;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-netty4 - Shared connection pool should re-create connection if its no longer valid,CAMEL-12435,13151943,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Apr/18 11:44,12/Apr/18 11:48,13/Jul/23 08:31,12/Apr/18 11:48,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-netty4,,,,,,0,,,,"If you turn of the connection pooling on the producer and use the shared single instance for multiplexing then if the connection becomes invalid such as read time triggered by netty that then closes the connection.

Then we should re-create the connection, like the pooling does with test on borrow.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-04-12 11:44:47.0,,,,,,,,,,,"0|i3sgtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Limits can not be deserialized in API versions >= 41.0,CAMEL-12434,13151728,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,clromack,clromack,11/Apr/18 18:24,16/Apr/18 09:50,13/Jul/23 08:31,16/Apr/18 09:50,2.20.1,2.20.2,2.21.0,,,,,,,,,,,,,2.22.0,,,,,camel-salesforce,,,,,,0,,,,"Starting with Salesforce REST API 41.0, it appears that they have made a breaking change to the Limits json payload.  Jackson can no longer deserialize.

 

Error is

2018-04-11T13:02:45.644-0500 ERROR [dispatcherServlet] http-nio-8080-exec-3 [] Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-isdv183994l-containerstore-com-1523469717836-0-13]] with root cause
com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize Map key of type org.apache.camel.component.salesforce.api.dto.Limits$Operation from String ""PermissionSets"": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Can not deserialize Map key of type org.apache.camel.component.salesforce.api.dto.Limits$Operation from String ""PermissionSets"": not one of values excepted for Enum class: [DailyApiRequests, DailyDurableGenericStreamingApiEvents, ConcurrentAsyncGetReportInstances, DailyGenericStreamingApiEvents, DailyStreamingApiEvents, DailyWorkflowEmails, HourlyDashboardStatuses, HourlySyncReportRuns, DataStorageMB, SingleEmail, HourlyTimeBasedWorkflow, ConcurrentSyncReportRuns, DurableStreamingApiConcurrentClients, DailyBulkApiRequests, FileStorageMB, DailyAsyncApexExecutions, MassEmail, StreamingApiConcurrentClients, HourlyDashboardResults, HourlyAsyncReportRuns, HourlyDashboardRefreshes, HourlyODataCallout, DailyDurableStreamingApiEvents]
 at [Source: java.io.ByteArrayInputStream@215469a9; line: 1, column: 6646]
 at [Source: java.io.ByteArrayInputStream@215469a9; line: 1, column: 6646]
 at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:74)
 at com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(DeserializationContext.java:1389)
 at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(DeserializationContext.java:880)
 at com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.deserializeKey(StdKeyDeserializer.java:130)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(MapDeserializer.java:445)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:365)
 at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:27)
 at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3786)
 at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2139)
 at com.fasterxml.jackson.core.JsonParser.readValueAs(JsonParser.java:1650)
 at org.apache.camel.component.salesforce.api.dto.Limits$LimitsDeserializer.deserialize(Limits.java:55)
 at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3814)
 at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2924)
 at org.apache.camel.component.salesforce.internal.processor.JsonRestProcessor.processResponse(JsonRestProcessor.java:197)
 at org.apache.camel.component.salesforce.internal.processor.AbstractRestProcessor.lambda$processWithResponseCallback$5(AbstractRestProcessor.java:783)
 at org.apache.camel.component.salesforce.internal.client.DefaultRestClient$DelegatingClientCallback.onResponse(DefaultRestClient.java:502)
 at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:235)
 at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:193)
 at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:185)
 at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:459)
 at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:405)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:297)
 at org.eclipse.jetty.http.HttpParser.parseFields(HttpParser.java:1068)
 at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1393)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:170)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:131)
 at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:70)
 at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:130)
 at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:116)
 at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)
 at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
 at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:289)
 at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:149)
 at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
 at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140)
 at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
 at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:243)
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:679)
 at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:597)
 at java.lang.Thread.run(Thread.java:748)
2018-04-11T13:14:21.737-0500 WARN SubscriptionHelper HttpClient@2040015820-scheduler [] Connect failure: {failure={exception=java.util.concurren",,clromack,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 16 09:50:41 UTC 2018,,,,,,,,,,,"0|i3sfhz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Apr/18 09:50;zregvart;[~clromack] thank you for reporting this! I've fixed this in 2.22 by adding the {{PermissionSets}} to the list of supported operations. And I've also future-proofed the implementation so that it won't break if Salesforce changes the Limits API again.

With this I had to do a slight API change on the Limits DTO, now the constructor needs to accept {{Map<?, Usage>}} instead of {{Map<Operation, Usage>}} as the type erasure doesn't allow to have two constructors that accept a {{Map}} object. It's a slight API change and coupled with my gut feeling that not a lot of users use the Limits API I'm a little hesitant to backport this to 2.21. But feel free to mention if this is a big issue for your use case and I can backport it so it gets released in the next 2.21 patch version.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SqsProducer doesn't support Number attributes,CAMEL-12425,13150440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,candrews,candrews,05/Apr/18 21:13,06/Apr/18 08:15,13/Jul/23 08:31,06/Apr/18 08:14,2.20.2,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-aws,,,,,,0,,,,SqsProducer doesn't support Number attributes. It only supports attributes with a value of type String or ByteBuffer.,,candrews,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 06 08:15:14 UTC 2018,,,,,,,Patch Available,,,,"0|i3s7jz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Apr/18 21:13;candrews;[https://github.com/apache/camel/pull/2282];;;","06/Apr/18 08:15;githubbot;oscerd commented on issue #2282: CAMEL-12425 SQS Producer support for numeric attributes
URL: https://github.com/apache/camel/pull/2282#issuecomment-379182020
 
 
   Thanks. Merged on master, 2.21.x and 2.20.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Apr/18 08:15;githubbot;oscerd closed pull request #2282: CAMEL-12425 SQS Producer support for numeric attributes
URL: https://github.com/apache/camel/pull/2282
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
index 04a66e0ca88..231f9b6b7ff 100644
--- a/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsProducer.java
@@ -135,6 +135,11 @@ public String toString() {
                     mav.setDataType(""Binary"");
                     mav.withBinaryValue((ByteBuffer)value);
                     result.put(entry.getKey(), mav);
+                } else if (value instanceof Number) {
+                    MessageAttributeValue mav = new MessageAttributeValue();
+                    mav.setDataType(""Number"");
+                    mav.withStringValue(((Number)value).toString());
+                    result.put(entry.getKey(), mav);
                 } else {
                     // cannot translate the message header to message attribute value
                     LOG.warn(""Cannot put the message header key={}, value={} into Sqs MessageAttribute"", entry.getKey(), entry.getValue());


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Apr/18 08:15;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2282
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
HTTPHelper.setCharsetFromContentType can't properly extract the charset if it isn't the last parameter,CAMEL-12424,13150428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fabricio.pellegrini,fabricio.pellegrini,05/Apr/18 20:45,13/Apr/18 07:02,13/Jul/23 08:31,13/Apr/18 07:02,2.19.2,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-http-common,,,,,,0,easyfix,,,"When our application recieves the Content-Type: application/json;charset=utf-8;profile=""http://my.company.profile.errorSchema.4.json#"", the HTTPHelper sets the wrong value for the Exchange.CHARSET_NAME in the Exchange.
{quote} @SuppressWarnings(""deprecation"")
     public static void setCharsetFromContentType(String contentType, Exchange exchange) {
         if (contentType != null) {
             // find the charset and set it to the Exchange
             int index = contentType.indexOf(""charset="");
             if (index > 0) {

                 String charset = contentType.substring(index + 8); //HERE IS THE PROBLEM                 exchange.setProperty(Exchange.CHARSET_NAME, IOConverter.normalizeCharset(charset));             }

        }
     }
{quote}
Because of that, when the HTTPProducer tries to load the body we get the following error:
{quote}Exception: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
 org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) [178:org.apache.camel.camel-core:2.19.2]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) [178:org.apache.camel.camel-core:2.19.2]
         at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:120) [176:org.apache.camel.camel-blueprint:2.19.2]
         at org.apache.camel.component.http4.HttpProducer.populateHttpOperationFailedException(HttpProducer.java:305) [182:org.apache.camel.camel-http4:2.19.2]
         at org.apache.camel.component.http4.HttpProducer.process(HttpProducer.java:207) [182:org.apache.camel.camel-http4:2.19.2]

Caused by: org.apache.camel.RuntimeCamelException: java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1774) ~[?:?]
         at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1355) ~[?:?]
         at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[?:?]
         ... 70 more
 Caused by: java.io.UnsupportedEncodingException: utf-8;profile=""http://my.company.profile.errorSchema.4.json#
         at sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71) ~[?:?]
         at java.io.InputStreamReader.<init>(InputStreamReader.java:100) ~[?:?]
         at org.apache.camel.converter.IOConverter.toReader(IOConverter.java:179) ~[?:?]
         at org.apache.camel.converter.IOConverter.toString(IOConverter.java:364) ~[?:?]
         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
         at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
         at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1351) ~[?:?]
         at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[?:?]
         at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[?:?]
{quote}
 ","Apache Camel 2.19.2

Karaf 4.1.2

JDK 1.8.0_161",davsclaus,fabricio.pellegrini,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 13 07:02:28 UTC 2018,,,,,,,,,,,"0|i3s7hb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Apr/18 08:33;fabricio.pellegrini;This is the temporary patch that I made locally to fix the issue.

    @SuppressWarnings(""deprecation"")
    public static void setCharsetFromContentType(String contentType, Exchange exchange) {
        if (contentType != null) {
            String charset = getCharsetFromContentType(contentType);
            exchange.setProperty(Exchange.CHARSET_NAME, charset);
        }
    };;;","13/Apr/18 07:02;davsclaus;Thanks for reporting and providing the suggested patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong language syntax declarations for code samples in documentation,CAMEL-12422,13150021,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,fbolton,fbolton,04/Apr/18 14:45,05/Apr/18 07:15,13/Jul/23 08:31,05/Apr/18 05:53,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,documentation,,,,,,0,,,,"AsciiDoc has the ability to support syntax highlighting, which can be enabled by putting the following line before a code sample (e.g. for Java code):
{code:java}
[source,java]{code}

However, there are some places in the documentation where this declaration is used, but the code sample that follows is _not_ Java. This can cause incorrect syntax highlighting or (more seriously) can sometimes cause a documentation build to crash. The following doc files are affected:
* {{csv-dataformat.adoc}}
* {{mime-multipart-dataformat.adoc}}
* {{mongodb-gridfs-component.adoc}}
* {{snmp-component.adoc}}

I plan to submit a PR to fix these files.",,fbolton,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 05 07:15:15 UTC 2018,,,,,,,,,,,"0|i3s4zr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Apr/18 15:20;githubbot;fbolton opened a new pull request #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280
 
 
   …tion

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Apr/18 15:20;githubbot;GitHub user fbolton opened a pull request:

    https://github.com/apache/camel/pull/2280

    CAMEL-12422 Fixed language declaration for code snippets in documenta…

    …tion

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fbolton/camel camel-12422

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2280.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2280
    
----
commit 6d9e172de7572038529b394f4159f5693225389c
Author: Fintan Bolton <fbolton@...>
Date:   2018-04-04T15:18:22Z

    CAMEL-12422 Fixed language declaration for code snippets in documentation

----
;;;","05/Apr/18 05:52;githubbot;oscerd closed pull request #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-csv/src/main/docs/csv-dataformat.adoc b/components/camel-csv/src/main/docs/csv-dataformat.adoc
index bae6f163f18..6cd2d973038 100644
--- a/components/camel-csv/src/main/docs/csv-dataformat.adoc
+++ b/components/camel-csv/src/main/docs/csv-dataformat.adoc
@@ -89,12 +89,12 @@ or this XML route definition
 </route>
 -------------------------------------------------------
 
+
 then it will produce 
 
-[source,java]
--------------------------------------------------------
+----
 abc,123
--------------------------------------------------------
+----
 
 ### Unmarshalling a CSV message into a Java List
 
@@ -178,6 +178,7 @@ body.put(""foo"", ""abc"");
 body.put(""bar"", 123);
 ------------------------------------------------------- 
 
+
 and this Java route definition 
 
 [source,java]
@@ -210,7 +211,6 @@ or this XML route definition
 
 then it will produce 
 
-[source,java]
 -------------------------------------------------------
 abc|123
 ------------------------------------------------------- 
@@ -358,7 +358,7 @@ If you use Maven you can just add the following to your pom.xml,
 substituting the version number for the latest and greatest release (see
 the download page for the latest versions).
 
-[source,java]
+[source,xml]
 -------------------------------------
 <dependency>
   <groupId>org.apache.camel</groupId>
diff --git a/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc b/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
index d7cf6a9ea43..49fbe2638e4 100644
--- a/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
+++ b/components/camel-mail/src/main/docs/mime-multipart-dataformat.adoc
@@ -116,7 +116,6 @@ Message with the following message Camel headers:
 
 *Camel Message Headers*
 
-[source,java]
 -------------------------------------------------------------------------------
 Content-Type=multipart/mixed; \n boundary=""----=_Part_0_14180567.1447658227051""
 Message-Id=<...>
@@ -129,7 +128,6 @@ The message body will be:
 
 *Camel Message Body*
 
-[source,java]
 ----------------------------------------------------------------
 ------=_Part_0_14180567.1447658227051
 Content-Type: application/octet-stream
@@ -158,7 +156,6 @@ original message starting with ""x-"" and the header with name ""included"":
 
 *Camel Message Body*
 
-[source,java]
 ----------------------------------------------------------------
 Message-ID: <...>
 MIME-Version: 1.0
diff --git a/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc b/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
index d51fef7091f..6b005a47b1c 100644
--- a/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
+++ b/components/camel-mongodb-gridfs/src/main/docs/mongodb-gridfs-component.adoc
@@ -18,7 +18,6 @@ for this component:
 
 ### URI format
 
-[source,java]
 ------------------------------------------------------------------------------
 mongodb-gridfs:connectionBean?database=databaseName&bucket=bucketName[&moreOptions...]
 ------------------------------------------------------------------------------
@@ -121,8 +120,7 @@ The following route defined in Spring XML executes the operation
 #### count
 
 Returns the total number of file in the collection, returning an Integer
-as the OUT message body. +
- +
+as the OUT message body.
 
 [source,java]
 ---------------------------------------------------------------------------------
@@ -146,7 +144,6 @@ Integer count = template.requestBodyAndHeaders(""direct:count"", query, headers);
 Returns an Reader that lists all the filenames and their IDs in a tab
 separated stream.
 
-[source,java]
 ----------------------------------------------------------------------------------
 // from(""direct:listAll"").to(""mongodb-gridfs?database=tickets&operation=listAll"");
 Reader result = template.requestBodyAndHeader(""direct:listAll"", ""irrelevantBody"");
diff --git a/components/camel-snmp/src/main/docs/snmp-component.adoc b/components/camel-snmp/src/main/docs/snmp-component.adoc
index 9298f77ca20..e80f4657103 100644
--- a/components/camel-snmp/src/main/docs/snmp-component.adoc
+++ b/components/camel-snmp/src/main/docs/snmp-component.adoc
@@ -21,7 +21,6 @@ for this component:
 
 ### URI format
 
-[source,java]
 --------------------------------
 snmp://hostname[:port][?Options]
 --------------------------------
@@ -118,7 +117,6 @@ Given the situation, that I poll for the following OIDs:
 
 *OIDs*
 
-[source,java]
 -------------------------
 1.3.6.1.2.1.1.3.0
 1.3.6.1.2.1.25.3.2.1.5.1
@@ -167,14 +165,12 @@ requested...be prepared.
 
 Polling a remote device:
 
-[source,java]
 ---------------------------------------------------------------------
 snmp:192.168.178.23:161?protocol=udp&type=POLL&oids=1.3.6.1.2.1.1.5.0
 ---------------------------------------------------------------------
 
 Setting up a trap receiver (*Note that no OID info is needed here!*):
 
-[source,java]
 -----------------------------------------
 snmp:127.0.0.1:162?protocol=udp&type=TRAP
 -----------------------------------------


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Apr/18 05:52;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2280
;;;","05/Apr/18 05:55;githubbot;oscerd commented on issue #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280#issuecomment-378828030
 
 
   Thanks. Merged on master and backported to 2.21.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Apr/18 07:15;githubbot;fbolton commented on issue #2280: CAMEL-12422 Fixed language declaration for code snippets in documenta…
URL: https://github.com/apache/camel/pull/2280#issuecomment-378842094
 
 
   That's great. Thanks very much, @oscerd !

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
Swagger definition broken when working with dataType array,CAMEL-12420,13149989,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zregvart,hochas,hochas,04/Apr/18 12:46,05/Apr/18 11:43,13/Jul/23 08:31,05/Apr/18 11:43,2.21.0,,,,,,,,,,,,,,,2.22.0,,,,,camel-swagger,,,,,,0,,,,"I've created two gists. 

[This first gist|https://gist.github.com/hochas/10e1f65531211672de03d018e42447df] is generated by _camel-swagger-java:2.21.0_ and is broken
Copy the contents and paste into the [Swagger Editor|http://editor.swagger.io/]. See field _identification_ under _/classifier_ which according to the editor is broken.

[This second gist](https://gist.github.com/hochas/1218ef7a14da509f7079c1f5e098b53c) is modified by hand and displays the field _identification_ as expected. 

The difference is at [line 74|https://gist.github.com/hochas/1218ef7a14da509f7079c1f5e098b53c#file-camel-swagger-working-json-L74]. The enum type in the broken version, [line 76|https://gist.github.com/hochas/10e1f65531211672de03d018e42447df#file-camel-swagger-broken-json-L76], should be inside  the `items` object, according to [this issue|https://github.com/swagger-api/swagger-ui/issues/4400] at swagger-ui.

This current behavior [seems to have been correct|https://github.com/swagger-api/swagger-ui/issues/685] some time back.

This is the related parameter that I am creating in my camel route using the DSL:

{code:java}
parameters.add(new RestOperationParamDefinition()
		.name(""identification"")
		.type(RestParamType.query)
		.required(true)
		.description(""The types of identification to include"")
		.allowableValues(IdentificationType.getAllTypes())
		.collectionFormat(CollectionFormat.csv)
		.dataType(""array"")
		.arrayType(""string""));
{code}

If it helps, here is the entirety of the route:

{code:java}
public class ClassifierRoute extends RouteBuilder {
	
	@Override
	public void configure() throws Exception {
		rest(""/classifier"")
			.description(""MatchX Classifier REST API"")
			.id(""Classifier route"")
			.get()
				.description(""Gets classifiers based on supplied parameters"")
				.produces(MediaType.APPLICATION_JSON)
				.outType(Identification.class)
				.responseMessage()
					.code(200)
					.message(""Returns a result set in JSON format"")
					.endResponseMessage()
				.responseMessage()
					.code(400)
					.message(""The supplied query is invalid"")
					.endResponseMessage()
				.params(addParameters())
				.to(""direct:algorithmMatch"");
		
		from(""direct:algorithmMatch"")
			.bean(ClassifierMediator.class, ""getAlgorithmMatchCount"")
			.marshal()
				.json(JsonLibrary.Jackson);
	}

	private List<RestOperationParamDefinition> addParameters() {
		List<RestOperationParamDefinition> parameters = Lists.newArrayList();
		
		parameters.add(new RestOperationParamDefinition()
				.name(""feature"")
				.type(RestParamType.query)
				.required(false)
				.description(""The classifier feature type."")
				.allowableValues(FeatureType.getAllTypes()));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""rating"")
				.type(RestParamType.query)
				.required(true)
				.description(""The rating of the associated classifier. Takes everything up to and including this number."")
				.allowableValues(""0"", ""1"", ""2"", ""3"", ""4"")
				.dataType(""integer""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""identification"")
				.type(RestParamType.query)
				.required(true)
				.description(""The types of identification to include"")
				.allowableValues(IdentificationType.getAllTypes())
				.collectionFormat(CollectionFormat.csv)
				.dataType(""array"")
				.arrayType(""string""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""from"")
				.type(RestParamType.query)
				.required(true)
				.dataType(""string"")
				.dataFormat(""date"")
				.description(""yyyy-MM-dd""));
		
		parameters.add(new RestOperationParamDefinition()
				.name(""to"")
				.type(RestParamType.query)
				.required(true)
				.dataType(""string"")
				.dataFormat(""date"")
				.description(""yyyy-MM-dd""));

		return parameters;
	}

}
{code}","
{code:xml}
<spring-boot.version>1.5.10.RELEASE</spring-boot.version>

<camel.version>2.21.0</camel.version>

<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-spring-boot-starter</artifactId>
	<version>${camel.version}</version>
</dependency>
<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-swagger-java-starter</artifactId>
	<version>${camel.version}</version>
</dependency>
{code}


{code:sh}
java -version
openjdk version ""1.8.0_162""
OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-0ubuntu0.16.04.2-b12)
OpenJDK 64-Bit Server VM (build 25.162-b12, mixed mode)
{code}",hochas,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 05 11:43:47 UTC 2018,,,,,,,,,,,"0|i3s4sv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Apr/18 11:43;zregvart;Now {{camel-swagger-java}} will generate Swagger specification that includes {{enum}} property in the {{items}} property if the type of the parameter is {{array}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-consul - High CPU load on events watching,CAMEL-12418,13149955,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,04/Apr/18 10:48,18/Apr/18 07:39,13/Jul/23 08:31,18/Apr/18 07:39,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-consul,,,,,,0,,,,"Camel-Consul library expects EventClient to block requests and [passes number of seconds to block request to EventClient|https://github.com/apache/camel/blob/camel-2.21.0/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L59].
 However Event HTTP Endpoint [does not support Blocking Queries|https://www.consul.io/api/event.html] and EventClient [ignores passed queryOptions|https://github.com/rickfast/consul-client/blob/1.1.1/src/main/java/com/orbitz/consul/EventClient.java#L164].
 This results in high CPU usage because ConsulEventConsumer constantly makes requests to Consul without any delay or blocking.
 Maybe some _Thread.sleep_ could be added to _EventWatcher.watch(EventClient client)_ before _client.listEvents_ call or any other fix to introduce delay between _listEvents_ requests.",,davsclaus,dmvolod,githubbot,lb,Viachaslau.Tsikhanovich,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 18 07:39:54 UTC 2018,,,,,,,,,,,"0|i3s4lb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Apr/18 07:40;davsclaus;Yeah that sounds like a good idea. Contributions is welcome to add an option to configure the sleep delay, and have a resonable default of maybe 500 millis or something.;;;","08/Apr/18 22:44;githubbot;Gr1f0n6x opened a new pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283
 
 
   I believe that scheduledExecutorService with schedule method will be a little better then Thread.sleep(mills) (maybe i'm wrong).
   
   Also, i didn't add default value as proposed in description of this problem beecause as i found in `ConsulClientConfiguration` the default value of  `blockSeconds` is 10:
   ```
   @UriParams
   public class ConsulClientConfiguration implements Cloneable {
       . . . 
       @UriParam(label = ""consumer,watch"", defaultValue = ""10"")
       private Integer blockSeconds = 10;
       . . . 
   }
   ```
   
   ## Check style
   Result of `mvn clean install -Psourcecheck`:
   ```
   [INFO] Scanning for projects...
   [INFO]                                                                         
   [INFO] ------------------------------------------------------------------------
   [INFO] Building Camel :: Consul 2.22.0-SNAPSHOT
   [INFO] ------------------------------------------------------------------------
   [INFO] 
   [INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ camel-consul ---
   [INFO] Deleting D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target
   [INFO] 
   [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-bundle-plugin:3.5.0:cleanVersions (versions) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) @ camel-consul ---
   [INFO] Starting audit...
   Audit done.
   [INFO] 
   [INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ camel-consul ---
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-components (prepare) @ camel-consul ---
   [INFO] Generated D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\components\META-INF\services\org\apache\camel\component.properties containing 1 Camel component: consul
   [INFO] 
   [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ camel-consul ---
   [INFO] Using 'UTF-8' encoding to copy filtered resources.
   [INFO] Copying 4 resources
   [INFO] Copying 3 resources
   [INFO] Copying 1 resource
   [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\dataformats
   [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\languages
   [INFO] 
   [INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ camel-consul ---
   [INFO] Changes detected - recompiling the module!
   [INFO] Compiling 37 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\classes
   [INFO] 
   [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ camel-consul ---
   [INFO] Using 'UTF-8' encoding to copy filtered resources.
   [INFO] Copying 4 resources
   [INFO] Copying 3 resources
   [INFO] 
   [INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ camel-consul ---
   [INFO] Changes detected - recompiling the module!
   [INFO] Compiling 23 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\test-classes
   [INFO] 
   [INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ camel-consul ---
   [INFO] Tests are skipped.
   [INFO] 
   [INFO] --- maven-bundle-plugin:3.5.0:manifest (bundle-manifest) @ camel-consul ---
   [WARNING] Manifest org.apache.camel:camel-consul:jar:2.22.0-SNAPSHOT : Unused Import-Package instructions: [org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.apache.xmlbeans.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*] 
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:validate-components (validate) @ camel-consul ---
   [INFO] Validation complete
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-starter (validate) @ camel-consul ---
   [INFO] Spring-Boot-Starter: starter dir for the component is: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter
   [INFO] Reusing the existing pom.xml for the starter
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-auto-configuration (validate) @ camel-consul ---
   [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentConfiguration.java
   [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentAutoConfiguration.java
   [INFO] 
   [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ camel-consul ---
   [INFO] Building jar: D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar
   [INFO] 
   [INFO] --- maven-site-plugin:3.5.1:attach-descriptor (attach-descriptor) @ camel-consul ---
   [INFO] 
   [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:update-readme (readme) @ camel-consul ---
   [INFO] 
   [INFO] --- maven-install-plugin:2.5.2:install (default-install) @ camel-consul ---
   [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.jar
   [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\pom.xml to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.pom
   [INFO] ------------------------------------------------------------------------
   [INFO] BUILD SUCCESS
   [INFO] ------------------------------------------------------------------------
   [INFO] Total time: 16.378 s
   [INFO] Finished at: 2018-04-09T01:29:11+03:00
   [INFO] Final Memory: 53M/553M
   [INFO] ------------------------------------------------------------------------
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","08/Apr/18 22:44;githubbot;GitHub user Gr1f0n6x opened a pull request:

    https://github.com/apache/camel/pull/2283

    CAMEL-12418: High CPU load on events watching

    I believe that scheduledExecutorService with schedule method will be a little better then Thread.sleep(mills) (maybe i'm wrong).
    
    Also, i didn't add default value as proposed in description of this problem beecause as i found in `ConsulClientConfiguration` the default value of  `blockSeconds` is 10:
    ```
    @UriParams
    public class ConsulClientConfiguration implements Cloneable {
        . . . 
        @UriParam(label = ""consumer,watch"", defaultValue = ""10"")
        private Integer blockSeconds = 10;
        . . . 
    }
    ```
    
    ## Check style
    Result of `mvn clean install -Psourcecheck`:
    ```
    [INFO] Scanning for projects...
    [INFO]                                                                         
    [INFO] ------------------------------------------------------------------------
    [INFO] Building Camel :: Consul 2.22.0-SNAPSHOT
    [INFO] ------------------------------------------------------------------------
    [INFO] 
    [INFO] --- maven-clean-plugin:3.0.0:clean (default-clean) @ camel-consul ---
    [INFO] Deleting D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target
    [INFO] 
    [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-bundle-plugin:3.5.0:cleanVersions (versions) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) @ camel-consul ---
    [INFO] Starting audit...
    Audit done.
    [INFO] 
    [INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ camel-consul ---
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-components (prepare) @ camel-consul ---
    [INFO] Generated D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\components\META-INF\services\org\apache\camel\component.properties containing 1 Camel component: consul
    [INFO] 
    [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ camel-consul ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] Copying 4 resources
    [INFO] Copying 3 resources
    [INFO] Copying 1 resource
    [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\dataformats
    [INFO] skip non existing resourceDirectory D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\generated\camel\languages
    [INFO] 
    [INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ camel-consul ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 37 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\classes
    [INFO] 
    [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ camel-consul ---
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] Copying 4 resources
    [INFO] Copying 3 resources
    [INFO] 
    [INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ camel-consul ---
    [INFO] Changes detected - recompiling the module!
    [INFO] Compiling 23 source files to D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\test-classes
    [INFO] 
    [INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ camel-consul ---
    [INFO] Tests are skipped.
    [INFO] 
    [INFO] --- maven-bundle-plugin:3.5.0:manifest (bundle-manifest) @ camel-consul ---
    [WARNING] Manifest org.apache.camel:camel-consul:jar:2.22.0-SNAPSHOT : Unused Import-Package instructions: [org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.apache.xmlbeans.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*] 
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:validate-components (validate) @ camel-consul ---
    [INFO] Validation complete
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-starter (validate) @ camel-consul ---
    [INFO] Spring-Boot-Starter: starter dir for the component is: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter
    [INFO] Reusing the existing pom.xml for the starter
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:prepare-spring-boot-auto-configuration (validate) @ camel-consul ---
    [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentConfiguration.java
    [INFO] Updated existing file: D:\Program Files\WORK\WORK_Java\camel\platforms\spring-boot\components-starter\camel-consul-starter\src\main\java\org\apache\camel\component\consul\springboot\ConsulComponentAutoConfiguration.java
    [INFO] 
    [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ camel-consul ---
    [INFO] Building jar: D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar
    [INFO] 
    [INFO] --- maven-site-plugin:3.5.1:attach-descriptor (attach-descriptor) @ camel-consul ---
    [INFO] 
    [INFO] --- camel-package-maven-plugin:2.22.0-SNAPSHOT:update-readme (readme) @ camel-consul ---
    [INFO] 
    [INFO] --- maven-install-plugin:2.5.2:install (default-install) @ camel-consul ---
    [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\target\camel-consul-2.22.0-SNAPSHOT.jar to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.jar
    [INFO] Installing D:\Program Files\WORK\WORK_Java\camel\components\camel-consul\pom.xml to C:\Users\GrIfOn\.m2\repository\org\apache\camel\camel-consul\2.22.0-SNAPSHOT\camel-consul-2.22.0-SNAPSHOT.pom
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD SUCCESS
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 16.378 s
    [INFO] Finished at: 2018-04-09T01:29:11+03:00
    [INFO] Final Memory: 53M/553M
    [INFO] ------------------------------------------------------------------------
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Gr1f0n6x/camel CAMEL-12418

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2283.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2283
    
----
commit 5ea5cbda3a52948669e7a2fe00eacb577dd674ba
Author: Nick <grifon52@...>
Date:   2018-04-08T22:30:46Z

    Add delay between listEvents requests

----
;;;","09/Apr/18 07:13;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-379656748
 
 
   We should have code that shutdown that executor service - also the executor service should be created via Camel's API for that, see `ExecutorServiceManager` you can get via `CamelContext`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Apr/18 07:14;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-379656748
 
 
   We should have code that shutdown that executor service - also the executor service should be created via Camel's API for that, see `ExecutorServiceManager` you can get via `CamelContext`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Apr/18 07:39;lb;maybe the issue should also be reported against the underlying consul library so this may get fixed on their side;;;","10/Apr/18 17:30;githubbot;Gr1f0n6x commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-380183508
 
 
   Ok, i'll fix it 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Apr/18 10:42;githubbot;davsclaus commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-381557484
 
 
   @Gr1f0n6x let us know how it goes for you

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Apr/18 01:20;githubbot;Gr1f0n6x commented on issue #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#issuecomment-381799061
 
 
   @davsclaus, I tried to use `ConsulEndpoint` for getting `CamelContext` as it implemented `CamelContextAware`.
   Also, i move field `scheduledExecutorService` to the `ConsulEventConsumer` class from the inner class `EventWatcher` because otherwise it will created more than one thread for this background work. 
   I'm not sure about `doStop` but i overrided it and shutdown executor there.
   
   Sorry for delay. I had some problems with building the project 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Apr/18 08:38;githubbot;dmvolod commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r181994251
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -33,32 +36,46 @@
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.scheduledExecutorService = endpoint.getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
     protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        scheduledExecutorService.shutdown();
 
 Review comment:
   @Gr1f0n6x , please use ExecutorServiceManager.shutdownGraceful there

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Apr/18 13:26;githubbot;Gr1f0n6x commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r182071274
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -33,32 +36,46 @@
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.scheduledExecutorService = endpoint.getCamelContext().getExecutorServiceManager().newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
     protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        scheduledExecutorService.shutdown();
 
 Review comment:
   @dmvolod, did it. Thank you for hint, didn't notice this method before

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Apr/18 07:34;githubbot;davsclaus commented on a change in pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283#discussion_r182332929
 
 

 ##########
 File path: components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
 ##########
 @@ -28,37 +30,54 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
 import org.apache.camel.Processor;
+import org.apache.camel.spi.ExecutorServiceManager;
 import org.apache.camel.component.consul.ConsulConfiguration;
 import org.apache.camel.component.consul.ConsulConstants;
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ExecutorServiceManager executorServiceManager;
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.executorServiceManager = endpoint.getCamelContext().getExecutorServiceManager();
+        this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
 
 Review comment:
   We create these in the doStart method, so we have start/stop logic together, and the constructors are light-weight

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Apr/18 07:35;githubbot;davsclaus closed pull request #2283: CAMEL-12418: High CPU load on events watching
URL: https://github.com/apache/camel/pull/2283
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
index 2e8a141e0bb..7133fec5df3 100644
--- a/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
+++ b/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java
@@ -18,6 +18,8 @@
 
 import java.math.BigInteger;
 import java.util.List;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 
 import com.orbitz.consul.Consul;
 import com.orbitz.consul.EventClient;
@@ -28,14 +30,19 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
 import org.apache.camel.Processor;
+import org.apache.camel.spi.ExecutorServiceManager;
 import org.apache.camel.component.consul.ConsulConfiguration;
 import org.apache.camel.component.consul.ConsulConstants;
 import org.apache.camel.component.consul.ConsulEndpoint;
 
 public final class ConsulEventConsumer extends AbstractConsulConsumer<EventClient> {
+    private ExecutorServiceManager executorServiceManager;
+    private ScheduledExecutorService scheduledExecutorService;
 
     public ConsulEventConsumer(ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor) {
         super(endpoint, configuration, processor, Consul::eventClient);
+        this.executorServiceManager = endpoint.getCamelContext().getExecutorServiceManager();
+        this.scheduledExecutorService = this.executorServiceManager.newSingleThreadScheduledExecutor(this, ""ConsulEventConsumer"");
     }
 
     @Override
@@ -43,22 +50,34 @@ protected Runnable createWatcher(EventClient client) throws Exception {
         return new EventWatcher(client);
     }
 
+    @Override
+    protected void doStop() throws Exception {
+        executorServiceManager.shutdownGraceful(scheduledExecutorService);
+        super.doStop();
+    }
+
     // *************************************************************************
     // Watch
     // *************************************************************************
 
     private class EventWatcher extends AbstractWatcher implements EventResponseCallback {
+
         EventWatcher(EventClient client) {
             super(client);
         }
 
         @Override
-        public void watch(EventClient client) {
-            client.listEvents(
-                key,
-                QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(),
-                this
-            );
+        public void watch(final EventClient client) {
+            scheduledExecutorService.schedule(new Runnable() {
+                @Override
+                public void run() {
+                    client.listEvents(
+                        key,
+                        QueryOptions.blockSeconds(configuration.getBlockSeconds(), index.get()).build(),
+                        EventWatcher.this
+                    );
+                }
+            }, configuration.getBlockSeconds(), TimeUnit.SECONDS);
         }
 
         @Override


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Apr/18 07:35;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2283
;;;","18/Apr/18 07:39;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,
"Camel-jaxb option ""encoding"" with option ""filterNonXmlChars"" generate wrong data",CAMEL-12415,13148933,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,MadMod,MadMod,29/Mar/18 16:28,07/Apr/18 15:46,13/Jul/23 08:31,07/Apr/18 15:46,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-jaxb,,,,,,0,,,,"When using the jaxb-component to marshal.

The properties:
 * Encoding
 * FilterNonXmlChars

do not work together correctly.

FilterNonXmlChars will ignore the set encoding, and make the output bytes UTF-8 encoded.
 I would either expect this to just work, and by that I mean bytes should be encoded as the set encoding, or minimally fail during startup of the route with an exception explaining that these properties does not work together. I'd really prefer the first, since I want to use the functionality of both.

I have provided a patch which makes this work.I have done a small refactoring to not have to duplicate more code. I can rewrite this if it is a problem.

Below is a test which will reproduce the problem.
{code:java}
public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {

    @Override
    public void setUp() throws Exception {
        deleteDirectory(""target/charset"");
        super.setUp();
    }

    @Test
    public void testIsoAndCharacterFiltering() throws Exception {
        PurchaseOrder order = new PurchaseOrder();
        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
        order.setName(name);
        order.setAmount(123.45);
        order.setPrice(2.22);

        MockEndpoint result = getMockEndpoint(""mock:file"");
        result.expectedFileExists(""target/charset/output.xml"");

        template.sendBody(""direct:start"", order);
        assertMockEndpointsSatisfied();

        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
        assertEquals(expected, obj.getName());
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
                jaxb.setFilterNonXmlChars(true);
                jaxb.setEncoding(""iso-8859-1"");

                from(""direct:start"")
                        .marshal(jaxb)
                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
            }
        };
    }

{code}
 ","OS X 13.3, Java 8",aldettinger,davsclaus,githubbot,MadMod,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Sat Apr 07 15:46:26 UTC 2018,,,,,,,Patch Available,,,,"0|i3rybj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Mar/18 16:54;githubbot;IIlllII opened a new pull request #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276
 
 
   Please tell me if anything needs to be changed.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Mar/18 16:54;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2276

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

    Please tell me if anything needs to be changed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2276.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2276
    
----
commit 64169aed7e0c8f07853565fac4e9822f26c83647
Author: Jonas Waage <jonas.h.waage@...>
Date:   2017-12-04T23:34:55Z

    CAMEL-12062 Propagate encoding in property

commit 8c387e4f40ea13f61fe7cb6c87ea3d6f4f91f4b1
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-20T19:13:40Z

    Merge remote-tracking branch 'upstream/master'

commit ae41f78bb38f3402fbbf386057f14bd4187cf768
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-29T16:33:44Z

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

----
;;;","29/Mar/18 17:06;githubbot;IIlllII commented on issue #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276#issuecomment-377304454
 
 
   Got some other commits in here, sorry I'll make a new one

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Mar/18 17:06;githubbot;IIlllII closed pull request #2276: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars
URL: https://github.com/apache/camel/pull/2276
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
index 8283af650a4..24e51ed537f 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
@@ -295,11 +295,13 @@ protected void doStop() throws Exception {
             Marshaller marshaller = context.createMarshaller();
             Writer buffer = new StringWriter();
 
+
             if (isPrettyPrint()) {
                 marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
             }
-            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {
-                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));
+            String charset = exchange != null ? exchange.getProperty(Exchange.CHARSET_NAME, String.class) : null;
+            if (charset != null) {
+                marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
             }
             Object toMarshall = value;
             if (objectFactoryMethod != null) {
@@ -314,7 +316,7 @@ protected void doStop() throws Exception {
             }
             if (needFiltering(exchange)) {
                 XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);
-                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);
+                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer, charset);
                 marshaller.marshal(toMarshall, filteringWriter);
             } else {
                 marshaller.marshal(toMarshall, buffer);
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
index 7af3d727702..49e0df3c2cc 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
@@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
     }
 
     /**
@@ -181,7 +186,11 @@ public void writeProcessingInstruction(String target) throws XMLStreamException
     }
 
     public void writeStartDocument() throws XMLStreamException {
-        writer.writeStartDocument();
+        if (encoding != null) {
+            this.writeStartDocument(encoding, null);
+        } else {
+            writer.writeStartDocument();
+        }
     }
 
     public void writeStartDocument(String encoding, String version) throws XMLStreamException {
@@ -189,7 +198,11 @@ public void writeStartDocument(String encoding, String version) throws XMLStream
     }
 
     public void writeStartDocument(String version) throws XMLStreamException {
-        writer.writeStartDocument(version);
+        if (encoding != null) {
+            this.writeStartDocument(encoding, version);
+        } else {
+            writer.writeStartDocument(version);
+        }
     }
 
     public void writeStartElement(String prefix, String localName, String namespaceURI)
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index ea74d37dad5..0500210261c 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -205,18 +205,8 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
 
         // only marshal if its possible
         if (introspector.isElement(element)) {
-            if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
-                if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
-                }
-                if (xmlStreamWriterWrapper != null) {
-                    writer = xmlStreamWriterWrapper.wrapWriter(writer);
-                }
-                marshaller.marshal(element, writer);
-            } else {
-                marshaller.marshal(element, stream);
-            }
+            XMLStreamWriter writer = getWriter(exchange, stream);
+            performWrite(exchange, stream, writer, marshaller, element);
             return;
         } else if (objectFactory && element != null) {
             Method objectFactoryMethod = JaxbHelper.getJaxbElementFactoryMethod(camelContext, element.getClass());
@@ -225,18 +215,8 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     Object instance = objectFactoryMethod.getDeclaringClass().newInstance();
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
-                        if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
-                            if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
-                            }
-                            if (xmlStreamWriterWrapper != null) {
-                                writer = xmlStreamWriterWrapper.wrapWriter(writer);
-                            }
-                            marshaller.marshal(toMarshall, writer);
-                        } else {
-                            marshaller.marshal(toMarshall, stream);
-                        }
+                        XMLStreamWriter writer = getWriter(exchange, stream);
+                        performWrite(exchange, stream, writer, marshaller, toMarshall);
                         return;
                     }
                 } catch (Exception e) {
@@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
+    private XMLStreamWriter getWriter(Exchange exchange, OutputStream stream) {
+        XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
+        if (needFiltering(exchange)) {
+            String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
+            writer = new FilteringXmlStreamWriter(writer, charset);
+        }
+        if (xmlStreamWriterWrapper != null) {
+            writer = xmlStreamWriterWrapper.wrapWriter(writer);
+        }
+        return writer;
+    }
+
+
     private boolean asXmlStreamWriter(Exchange exchange) {
         return needFiltering(exchange) || (xmlStreamWriterWrapper != null);
     }
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
index b8b38016783..59d164bc5f9 100644
--- a/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
@@ -42,7 +42,7 @@
 
     @Before
     public void setUp() {
-        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock);
+        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock, null);
         filteringXmlStreamWriter.nonXmlCharFilterer = nonXmlCharFiltererMock;
 
         when(nonXmlCharFiltererMock.filter(""value"")).thenReturn(""filteredValue"");
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
new file mode 100644
index 00000000000..3adb9c3b252
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
+        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
+        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
+        assertEquals(expected, obj.getName());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setFilterNonXmlChars(true);
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Mar/18 17:07;githubbot;Github user IIlllII closed the pull request at:

    https://github.com/apache/camel/pull/2276
;;;","29/Mar/18 19:01;githubbot;IIlllII opened a new pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","29/Mar/18 19:01;githubbot;GitHub user IIlllII opened a pull request:

    https://github.com/apache/camel/pull/2277

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/IIlllII/camel CAMEL-12415-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2277.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2277
    
----
commit 9e1b372bc8cff1b9189bd4319ea8ea6b085a7e56
Author: Jonas Waage <jonas.h.waage@...>
Date:   2018-03-29T16:33:44Z

    CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNonXmlChars

----
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178342671
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
 ##########
 @@ -295,11 +295,13 @@ protected void doStop() throws Exception {
             Marshaller marshaller = context.createMarshaller();
             Writer buffer = new StringWriter();
 
+
 
 Review comment:
   No big deal, but if you could avoid introducing blank line.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341639
 
 

 ##########
 File path: components/camel-jaxb/src/test/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriterTest.java
 ##########
 @@ -42,7 +42,7 @@
 
     @Before
     public void setUp() {
-        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock);
+        filteringXmlStreamWriter = new FilteringXmlStreamWriter(xmlStreamWriterMock, null);
 
 Review comment:
   Could be avoided by removing the API break mentioned earlier.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178342501
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
 
 Review comment:
   At first read, I interpreted 'header' as 'camel header'. Did you mean xml prolog instead ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341246
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
 
 Review comment:
   With the proposed refactoring, getWriter is called at each marshall attempt (performance) and even when `asXmlStreamWriter(exchange)` is false (behavior change). I would not include this change.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178340769
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   Could you please explain why we would need to store it upper case please ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178340643
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
 
 Review comment:
   Keeping the old constructor along with the new one would avoid an API break. This way you would leverage the good implementation you have done in `writeStartDocument` overloads.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341934
 
 

 ##########
 File path: components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
 ##########
 @@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
 
 Review comment:
   And indeed the resulting file does not contain the spouting whale anymore with your fix. Seems that it was UTF-8 encoded before. Good catch :+1:.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 18:29;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178341456
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
+    private XMLStreamWriter getWriter(Exchange exchange, OutputStream stream) {
+        XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
+        if (needFiltering(exchange)) {
 
 Review comment:
   Moreover, it hides the interesting changes (I mean the 2 lines above)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 20:42;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178374103
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   It is nicer for consumers of the produced XML. While lowercase is allowed by the standard and parsers should support it, there are parsers that break on lowercase. None I know of that break on uppercase.
   
   Standard also uses uppercase.
   https://www.iana.org/assignments/character-sets/character-sets.xhtml
   
   This might break the users expectation though, but in this case it might be nice to help the user do what will cause them the least pain. What do you think?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 20:50;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178376173
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -258,6 +238,27 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         }
     }
 
+    private void performWrite(Exchange exchange, OutputStream stream, XMLStreamWriter writer, Marshaller marshaller, Object toMarshall) throws JAXBException {
+        if (asXmlStreamWriter(exchange)) {
+            marshaller.marshal(toMarshall, writer);
+        } else {
+            marshaller.marshal(toMarshall, stream);
+        }
+    }
+
 
 Review comment:
   Thanks, missed that. I'll revert it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Mar/18 22:45;githubbot;IIlllII commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178374103
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
 ##########
 @@ -36,13 +36,18 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
      *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in header
+     *
      */
-    public FilteringXmlStreamWriter(XMLStreamWriter writer) {
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
         this.writer = writer;
+        this.encoding = encoding != null ? encoding.toUpperCase() : null;
 
 Review comment:
   I thought it would nicer for consumers of the produced XML. While lowercase is allowed by the standard and parsers should support it, there are parsers that break on lowercase. None I know of that break on uppercase (this could be because I never have used Shift_JIS, or other encodings with lowercase IANA names, so I can see why forcing uppercase might be a bad idea).
   
   I originally thought all IANA names were uppercase, which they are not. And this will take the choice out of the users hands. I'll remove it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Apr/18 17:26;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178595397
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -226,9 +227,10 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
                         if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                             if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
+                                String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
 
 Review comment:
   Same here , we could also remove this line.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Apr/18 17:26;githubbot;aldettinger commented on a change in pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#discussion_r178595038
 
 

 ##########
 File path: components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
 ##########
 @@ -206,9 +206,10 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         // only marshal if its possible
         if (introspector.isElement(element)) {
             if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                 if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
+                    String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);
 
 Review comment:
   Could you please change the method signature to `doMarshal(..., OutputStream stream, String charset, ...)` and get the charset from there ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Apr/18 20:09;githubbot;IIlllII commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378029387
 
 
   Added requested changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Apr/18 12:29;githubbot;oscerd commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378232536
 
 
   @aldettinger can you review? It looks good to me.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Apr/18 20:23;githubbot;aldettinger commented on issue #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277#issuecomment-378385093
 
 
   Merged into master. Thanks for contribution :+1: .

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Apr/18 20:23;githubbot;aldettinger closed pull request #2277: CAMEL-12415 - camel-jaxb, fix options combination: encoding,filterNon…
URL: https://github.com/apache/camel/pull/2277
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
index 8283af650a4..b2ec41bd23f 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java
@@ -298,8 +298,9 @@ protected void doStop() throws Exception {
             if (isPrettyPrint()) {
                 marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
             }
-            if (exchange != null && exchange.getProperty(Exchange.CHARSET_NAME, String.class) != null) {
-                marshaller.setProperty(Marshaller.JAXB_ENCODING, exchange.getProperty(Exchange.CHARSET_NAME, String.class));
+            String charset = exchange != null ? exchange.getProperty(Exchange.CHARSET_NAME, String.class) : null;
+            if (charset != null) {
+                marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);
             }
             Object toMarshall = value;
             if (objectFactoryMethod != null) {
@@ -314,7 +315,7 @@ protected void doStop() throws Exception {
             }
             if (needFiltering(exchange)) {
                 XMLStreamWriter writer = parentTypeConverter.convertTo(XMLStreamWriter.class, buffer);
-                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer);
+                FilteringXmlStreamWriter filteringWriter = new FilteringXmlStreamWriter(writer, charset);
                 marshaller.marshal(toMarshall, filteringWriter);
             } else {
                 marshaller.marshal(toMarshall, buffer);
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
index 7af3d727702..3a82b1443cd 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FilteringXmlStreamWriter.java
@@ -36,6 +36,7 @@
     NonXmlCharFilterer nonXmlCharFilterer = new NonXmlCharFilterer();
 
     private XMLStreamWriter writer;
+    private String encoding;
 
     /**
      * @param writer
@@ -45,6 +46,18 @@ public FilteringXmlStreamWriter(XMLStreamWriter writer) {
         this.writer = writer;
     }
 
+    /**
+     * @param writer
+     *            target writer to wrap.
+     * @param encoding
+     *            the encoding to write in the xml prolog.
+     *
+     */
+    public FilteringXmlStreamWriter(XMLStreamWriter writer, String encoding) {
+        this.writer = writer;
+        this.encoding = encoding;
+    }
+
     /**
      * This method applies filtering before delegating call to {@link #writer}.
      */
@@ -181,7 +194,11 @@ public void writeProcessingInstruction(String target) throws XMLStreamException
     }
 
     public void writeStartDocument() throws XMLStreamException {
-        writer.writeStartDocument();
+        if (encoding != null) {
+            this.writeStartDocument(encoding, null);
+        } else {
+            writer.writeStartDocument();
+        }
     }
 
     public void writeStartDocument(String encoding, String version) throws XMLStreamException {
@@ -189,7 +206,11 @@ public void writeStartDocument(String encoding, String version) throws XMLStream
     }
 
     public void writeStartDocument(String version) throws XMLStreamException {
-        writer.writeStartDocument(version);
+        if (encoding != null) {
+            this.writeStartDocument(encoding, version);
+        } else {
+            writer.writeStartDocument(version);
+        }
     }
 
     public void writeStartElement(String prefix, String localName, String namespaceURI)
diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
index ea74d37dad5..35a208aa4e2 100644
--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java
@@ -168,7 +168,7 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
                     marshaller.setProperty(property.getKey(), property.getValue());
                 }
             }
-            doMarshal(exchange, graph, stream, marshaller);
+            doMarshal(exchange, graph, stream, marshaller, charset);
 
             if (contentTypeHeader) {
                 if (exchange.hasOut()) {
@@ -182,7 +182,7 @@ public void marshal(Exchange exchange, Object graph, OutputStream stream) throws
         }
     }
 
-    void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller) throws Exception {
+    void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller marshaller, String charset) throws Exception {
 
         Object element = graph;
         QName partNamespaceOnDataFormat = getPartNamespace();
@@ -206,9 +206,9 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
         // only marshal if its possible
         if (introspector.isElement(element)) {
             if (asXmlStreamWriter(exchange)) {
-                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                 if (needFiltering(exchange)) {
-                    writer = new FilteringXmlStreamWriter(writer);
+                    writer = new FilteringXmlStreamWriter(writer, charset);
                 }
                 if (xmlStreamWriterWrapper != null) {
                     writer = xmlStreamWriterWrapper.wrapWriter(writer);
@@ -226,9 +226,9 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
                     if (instance != null) {
                         Object toMarshall = objectFactoryMethod.invoke(instance, element);
                         if (asXmlStreamWriter(exchange)) {
-                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, stream);
+                            XMLStreamWriter writer = typeConverter.convertTo(XMLStreamWriter.class, exchange, stream);
                             if (needFiltering(exchange)) {
-                                writer = new FilteringXmlStreamWriter(writer);
+                                writer = new FilteringXmlStreamWriter(writer, charset);
                             }
                             if (xmlStreamWriterWrapper != null) {
                                 writer = xmlStreamWriterWrapper.wrapWriter(writer);
@@ -257,7 +257,7 @@ void doMarshal(Exchange exchange, Object graph, OutputStream stream, Marshaller
             throw new InvalidPayloadException(exchange, JAXBElement.class);
         }
     }
-
+    
     private boolean asXmlStreamWriter(Exchange exchange) {
         return needFiltering(exchange) || (xmlStreamWriterWrapper != null);
     }
diff --git a/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
new file mode 100644
index 00000000000..3adb9c3b252
--- /dev/null
+++ b/components/camel-jaxb/src/test/java/org/apache/camel/example/ExplicitEncodingAndXMLCharFilteringTest.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example;
+
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.Unmarshaller;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.converter.jaxb.JaxbDataFormat;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.junit.Test;
+
+
+/**
+ * @version 
+ */
+public class ExplicitEncodingAndXMLCharFilteringTest extends CamelTestSupport {
+
+    @Override
+    public void setUp() throws Exception {
+        deleteDirectory(""target/charset"");
+        super.setUp();
+    }
+
+    @Test
+    public void testIsoAndCharacterFiltering() throws Exception {
+        PurchaseOrder order = new PurchaseOrder();
+        //Data containing characters ÆØÅæøå that differ in utf-8 and iso + a spouting whale
+        String name = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5\uD83D\uDC33\uFFFD"";
+        String expected = ""\u00c6\u00d8\u00C5\u00e6\u00f8\u00e5  \uFFFD""; //Spouting whale has become spaces
+        order.setName(name);
+        order.setAmount(123.45);
+        order.setPrice(2.22);
+
+        MockEndpoint result = getMockEndpoint(""mock:file"");
+        result.expectedFileExists(""target/charset/output.xml"");
+
+        template.sendBody(""direct:start"", order);
+        assertMockEndpointsSatisfied();
+
+        JAXBContext jaxbContext = JAXBContext.newInstance(""org.apache.camel.example"");
+        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
+        InputStream inputStream = new FileInputStream(""target/charset/output.xml"");
+        Reader reader = new InputStreamReader(inputStream, ""ISO-8859-1"");
+        PurchaseOrder obj = (PurchaseOrder) unmarshaller.unmarshal(reader);
+        assertEquals(expected, obj.getName());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                JaxbDataFormat jaxb = new JaxbDataFormat(""org.apache.camel.example"");
+                jaxb.setFilterNonXmlChars(true);
+                jaxb.setEncoding(""iso-8859-1"");
+
+                from(""direct:start"")
+                        .marshal(jaxb)
+                        .to(""file:target/charset/?fileName=output.xml&charset=iso-8859-1"");
+            }
+        };
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","03/Apr/18 20:23;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2277
;;;","07/Apr/18 07:41;davsclaus;I wonder if this is a candidate to backport to 2.21.x branch ?;;;","07/Apr/18 15:35;aldettinger;Indeed, it's safe. I will backport.;;;","07/Apr/18 15:41;aldettinger;Will backport to maintenance branches 2.21.x.;;;","07/Apr/18 15:46;aldettinger;ok, merged into master and camel-2.21.x;;;"
camel-jclouds - Fallback type converter is wrong,CAMEL-12412,13148577,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Mar/18 13:52,28/Mar/18 14:08,13/Jul/23 08:31,28/Mar/18 14:06,2.20.2,2.21.0,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-jclouds,,,,,,0,,,,"Reported on user forum

http://camel.465427.n5.nabble.com/java-lang-ClassCastException-org-jclouds-io-payloads-ByteSourcePayload-cannot-be-cast-to-org-apache-e-tp5818904.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-03-28 13:52:45.0,,,,,,,,,,,"0|i3rw4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No type converter from java.lang.String to java.math.BigInteger required for firstIndex,CAMEL-12410,13148171,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Viachaslau.Tsikhanovich,Viachaslau.Tsikhanovich,27/Mar/18 09:16,14/Aug/18 08:52,13/Jul/23 08:31,14/Aug/18 08:52,2.21.0,,,,,,,,,,,,,,,2.21.3,2.22.1,2.23.0,,,camel-consul,,,,,,0,,,,"After CAMEL-12065 fix the type of _firstIndex_ parameter became _java.math.BigInteger_.
However _org.apache.camel.impl.converter.OptimisedTypeConverter_ has no converter from java.lang.String to java.math.BigInteger.
As result _firstIndex_ parameter fails to be set and enpoint creation fails with the following exception:
{quote}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: consul://event?firstIndex=0&key=EVENT_ID1&url=http%3A%2F%2Fconsul-client%3A8500 due to: Could not find a suitable setter for property: firstIndex as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: java.math.BigInteger with value 0
{quote}",,davsclaus,dmvolod,Viachaslau.Tsikhanovich,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12065,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 08:52:43 UTC 2018,,,,,,,,,,,"0|i3rtmf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Mar/18 08:24;davsclaus;The firstIndex is 0 by default, so you dont need to set it to 0 as well. But yeah if you set it to some other value then there is no type converter.

 ;;;","28/Mar/18 09:00;davsclaus;Thanks for reporting;;;","28/Mar/18 09:19;Viachaslau.Tsikhanovich;Thank you for your response. 0 was used just as an example of the issue.
Also I have doubts if firstIndex should have a default value.Seems it should be null to avoid filtering during the first grab of events - https://github.com/apache/camel/blob/camel-2.21.0/components/camel-consul/src/main/java/org/apache/camel/component/consul/endpoint/ConsulEventConsumer.java#L117;;;","10/Aug/18 12:27;Viachaslau.Tsikhanovich;[Added logic|https://github.com/apache/camel/commit/13451671ffdcb748aeb708a46b3346521dea726c] for conversion to BigInteger doesn't work correctly. For example, for input string ""14350442579497085228"" it first will try to convert to Long and fail with NumberFormatException:
{quote}
Caused by: java.lang.NumberFormatException: For input string: ""14350442579497085228""
      at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
      at java.lang.Long.parseLong(Long.java:592)
      at java.lang.Long.valueOf(Long.java:803)
      at org.apache.camel.converter.ObjectConverter.toBigInteger(ObjectConverter.java:210)
{quote};;;","14/Aug/18 08:52;davsclaus;Thanks, fixed the string issue;;;",,,,,,,,,,,,,,,,,,,,,,,,
camel-olingo4-api should explicitly depend on commons-io,CAMEL-12407,13147917,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,ppalaga,ppalaga,26/Mar/18 11:49,26/Mar/18 12:59,13/Jul/23 08:31,26/Mar/18 12:59,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-olingo4,,,,,,0,,,,"Otherwise, routes fail with ClassNotFoundException IOUtils, e.g. when running Olingo4IntegrationTest in WildFly Camel",,githubbot,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 26 12:57:58 UTC 2018,,,,,,,,,,,"0|i3rs2v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Mar/18 12:56;githubbot;ppalaga opened a new pull request #2270: CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io
URL: https://github.com/apache/camel/pull/2270
 
 
   This should please be ported to `camel-2.21.x` too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Mar/18 12:56;githubbot;GitHub user ppalaga opened a pull request:

    https://github.com/apache/camel/pull/2270

    CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io

    This should please be ported to `camel-2.21.x` too

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ppalaga/camel CAMEL-12407

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2270.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2270
    
----
commit c20cf523de8af4a74442afe2f1f520666681443c
Author: Peter Palaga <ppalaga@...>
Date:   2018-03-26T11:53:57Z

    CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io

----
;;;","26/Mar/18 12:57;githubbot;davsclaus closed pull request #2270: CAMEL-12407: camel-olingo4-api should explicitly depend on commons-io
URL: https://github.com/apache/camel/pull/2270
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-olingo4/camel-olingo4-api/pom.xml b/components/camel-olingo4/camel-olingo4-api/pom.xml
index 30a6220efba..d41bfb94d3d 100644
--- a/components/camel-olingo4/camel-olingo4-api/pom.xml
+++ b/components/camel-olingo4/camel-olingo4-api/pom.xml
@@ -58,17 +58,22 @@
       <artifactId>odata-server-core</artifactId>
       <version>${olingo4-version}</version>
     </dependency>
-    
+
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-core</artifactId>
     </dependency>
-    
+
     <dependency>
       <groupId>org.apache.httpcomponents</groupId>
       <artifactId>httpasyncclient</artifactId>
     </dependency>
 
+    <dependency>
+      <groupId>commons-io</groupId>
+      <artifactId>commons-io</artifactId>
+    </dependency>
+
     <!-- logging -->
     <dependency>
       <groupId>org.apache.logging.log4j</groupId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Mar/18 12:57;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2270
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-dropbox - Need to use force to check for file/folder exists,CAMEL-12406,13147863,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Mar/18 07:56,26/Mar/18 08:00,13/Jul/23 08:31,26/Mar/18 08:00,,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-dropbox,,,,,,0,,,,"See this PR

https://github.com/apache/camel/pull/2269",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-03-26 07:56:24.0,,,,,,,,,,,"0|i3rrqv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer doesn't configure CxfRsEndpointConfigurer while using the Proxy API,CAMEL-12399,13147406,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,mikeschippers,mikeschippers,23/Mar/18 09:21,27/May/18 06:17,13/Jul/23 08:31,27/Mar/18 05:53,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-cxfrs,,,,,,0,,,,"The CxfRsProducer doesn't configure a CxfRsEndpointConfigurer on the client while using the Proxy API. When using the HTTP API this is working fine.

So when i create an endpoint like this:

 
{code:java}
CxfRsEndpoint endpoint = new CxfRsEndpoint(); endpoint.setCxfRsEndpointConfigurer(new MyCxfRsEndpointConfigurer());
{code}
 
{code:java}
public static class MyCxfRsEndpointConfigurer implements CxfRsEndpointConfigurer {

    @Override
    public void configure(AbstractJAXRSFactoryBean factoryBean) {
    }

    @Override
    public void configureClient(Client client) {
        client.header(""foo"", ""bar"");
    }

    @Override
    public void configureServer(Server server) {
    }
}
{code}
In case i use the HTTP API the header ""foo"" is sent but not when i use the Proxy API.",,ffang,githubbot,mikeschippers,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12540,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 27 05:42:30 UTC 2018,,,,,,,,,,,"0|i3roxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Mar/18 09:22;mikeschippers;I'm working on a PR;;;","23/Mar/18 10:05;githubbot;mikeschippers opened a new pull request #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265
 
 
   With this change CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API (invokeProxyClient)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Mar/18 10:05;githubbot;GitHub user mikeschippers opened a pull request:

    https://github.com/apache/camel/pull/2265

    CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API

    With this change CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API (invokeProxyClient)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mikeschippers/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2265
    
----
commit b1ad26ab133b50d91c298fbb82113f5ecc9b79cb
Author: Schippers <mike.schippers@...>
Date:   2018-03-23T09:51:14Z

    CAMEL-12399: fix CxfRsProducer doesn't configure CxfRsEndpointConfigurer while using Proxy API

----
;;;","23/Mar/18 11:04;githubbot;davsclaus commented on issue #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265#issuecomment-375624531
 
 
   @ffang would you mind taking a look at this PR?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Mar/18 05:39;githubbot;ffang closed pull request #2265: CAMEL-12399: CxfRsProducer configures CxfRsEndpointConfigurer while using the Proxy API
URL: https://github.com/apache/camel/pull/2265
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index fa9978c71b3..7edd0ba83e3 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -200,6 +200,8 @@ protected void invokeAsyncProxyClient(Exchange exchange, final AsyncCallback cal
             target = cfb.createWithValues(varValues);
         }
 
+        ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target);
+
         setupClientHeaders(target, exchange);
 
         // find out the method which we want to invoke
@@ -421,7 +423,9 @@ protected void invokeProxyClient(Exchange exchange) throws Exception {
         } else {
             target = cfb.createWithValues(varValues);
         }
-        
+
+        ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target);
+
         setupClientHeaders(target, exchange);
         
         // find out the method which we want to invoke
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java
new file mode 100644
index 00000000000..035a79aede0
--- /dev/null
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerEndpointConfigurerTest.java
@@ -0,0 +1,103 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.cxf.jaxrs;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.ExchangePattern;
+import org.apache.camel.Message;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.cxf.common.message.CxfConstants;
+import org.apache.camel.component.cxf.jaxrs.testbean.Customer;
+import org.apache.camel.component.cxf.jaxrs.testbean.CustomerService;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
+import org.apache.cxf.jaxrs.client.Client;
+import org.apache.cxf.message.MessageContentsList;
+import org.junit.Test;
+
+import javax.ws.rs.HttpMethod;
+
+public class CxfRsProducerEndpointConfigurerTest extends CamelTestSupport {
+
+    protected RouteBuilder createRouteBuilder() {
+        return new RouteBuilder() {
+            public void configure() {
+                CxfRsEndpoint endpoint = new CxfRsEndpoint();
+                endpoint.setAddress(""http://localhost:8000"");
+                endpoint.setCamelContext(context);
+                endpoint.setResourceClasses(CustomerService.class);
+                endpoint.setEndpointUriIfNotSpecified(""cxfrs:simple"");
+                endpoint.setCxfRsEndpointConfigurer(new MyCxfRsEndpointConfigurer());
+
+                from(""direct:start"")
+                        .to(endpoint)
+                        .to(""mock:end"");
+
+                from(""jetty:http://localhost:8000?matchOnUriPrefix=true"")
+                        .to(""mock:result"")
+                        .process(exchange -> exchange.getIn().setBody(new Customer()));
+            }
+        };
+    }
+
+    @Test
+    public void testCxfRsEndpoinConfigurerProxyApi() throws InterruptedException {
+        template.send(""direct:start"", exchange -> {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            inMessage.setHeader(CxfConstants.OPERATION_NAME, ""getCustomer"");
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE);
+            MessageContentsList messageContentsList = new MessageContentsList();
+            messageContentsList.add(""1"");
+            inMessage.setBody(messageContentsList);
+        });
+        getMockEndpoint(""mock:result"").expectedHeaderReceived(""foo"", ""bar"");
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testCxfRsEndpointConfigurerHttpApi() throws InterruptedException {
+        template.send(""direct:start"", exchange -> {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/1"");
+            inMessage.setHeader(Exchange.HTTP_METHOD, HttpMethod.GET);
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+        });
+        getMockEndpoint(""mock:result"").expectedHeaderReceived(""foo"", ""bar"");
+        assertMockEndpointsSatisfied();
+    }
+
+    public static class MyCxfRsEndpointConfigurer implements CxfRsEndpointConfigurer {
+
+        @Override
+        public void configure(AbstractJAXRSFactoryBean factoryBean) {
+        }
+
+        @Override
+        public void configureClient(Client client) {
+            client.header(""foo"", ""bar"");
+        }
+
+        @Override
+        public void configureServer(Server server) {
+        }
+    }
+
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","27/Mar/18 05:39;githubbot;Github user ffang closed the pull request at:

    https://github.com/apache/camel/pull/2265
;;;","27/Mar/18 05:42;ffang;patch applied on behalf of Mike Schippers  with thanks!;;;",,,,,,,,,,,,,,,,,,,,,,
HttpProducer cookie handling broken,CAMEL-12395,13147296,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kbrooks,kbrooks,22/Mar/18 22:00,13/Apr/18 07:22,13/Jul/23 08:31,13/Apr/18 07:22,2.20.2,,,,,,,,,,,,,,,2.20.4,2.21.1,2.22.0,,,camel-http,,,,,,0,,,,"Assumptions from https://tools.ietf.org/html/rfc6265
When a host response contains multiple headers with the same key, each with different values, the HttpProducer overwrites the value, effectively last-in-wins, extracted problem code below
{code:java}
protected void populateResponse(Exchange exchange, HttpRequestBase httpRequest, HttpResponse httpResponse,
Message in, HeaderFilterStrategy strategy, int responseCode) throws IOException, ClassNotFoundException {
  ...
  // propagate HTTP response headers
  Header[] headers = httpResponse.getAllHeaders();
  Map<String, List<String>> m = new HashMap<String, List<String>>();
  for (Header header : headers) {
    String name = header.getName();
    String value = header.getValue();
    m.put(name, Collections.singletonList(value)); //<--- This is the problem
    if (name.toLowerCase().equals(""content-type"")) {
      name = Exchange.CONTENT_TYPE;
      exchange.setProperty(Exchange.CHARSET_NAME, IOHelper.getCharsetNameFromContentType(value));
    }
    // use http helper to extract parameter value as it may contain multiple values
    Object extracted = HttpHelper.extractHttpParameterValue(value);
    if (strategy != null && !strategy.applyFilterToExternalHeaders(name, extracted, exchange)) {
     HttpHelper.appendHeader(answer.getHeaders(), name, extracted);
    }
  }
  // handle cookies
  if (getEndpoint().getCookieHandler() != null) {
  //if host responded with multiple Set-Cookie headers, only last cookie is presented
  getEndpoint().getCookieHandler().storeCookies(exchange, httpRequest.getURI(), m);
  }
...
{code}

A simple fix ->
{code:java}
...
for (Header header : headers) {
  String name = header.getName();
  String value = header.getValue();
  List<String> values = m.computeIfAbsent(name, k -> new ArrayList<>()).add(value);
...
{code}

On the flip side, when the client responds, the cookies pulled from the handler are not formatted correctly, broken code snippet from HttpProducer.process()

{code:java}
    if (getEndpoint().getCookieHandler() != null) {
            Map<String, List<String>> cookieHeaders = getEndpoint().getCookieHandler().loadCookies(exchange, httpRequest.getURI());
            for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
                String key = entry.getKey();
                if (entry.getValue().size() > 0) {
                    // use the default toString of a ArrayList to create in the form [xxx, yyy]
                    // if multi valued, for a single value, then just output the value as is
                    String s = entry.getValue().size() > 1 ? entry.getValue().toString() : entry.getValue().get(0);//<--- This is a problem
                    httpRequest.addHeader(key, s);
                }
            }
        }
{code}

This can be fixed simply
{code:java}
    if (getEndpoint().getCookieHandler() != null) {
            Map<String, List<String>> cookieHeaders = getEndpoint().getCookieHandler().loadCookies(exchange, httpRequest.getURI());
            for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
                String key = entry.getKey();
                if (entry.getValue().size() > 0) {
                    httpRequest.addHeader(key, entry.getValue().stream().collect(Collectors.joining("";""))); //semi-colon, not comma...
                }
            }
        }
{code}

Additionally, the CookieHandler.loadCookies method is not properly constructing the Cookie values, as it calls HttpCookie.toString - which represents the host's _Set-Cookie_ value, not the client's _Cookie_ value
",,davsclaus,kbrooks,,,,,,,,,,,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 13 07:22:09 UTC 2018,,,,,,,,,,,"0|i3ro9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"28/Mar/18 08:26;davsclaus;You are welcome to provide a PR or patch file;;;","13/Apr/18 07:22;davsclaus;Thanks for reporting and the suggested patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-influxdb Query ,CAMEL-12384,13146518,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,andyflatt,andyflatt,20/Mar/18 11:28,20/Mar/18 14:46,13/Jul/23 08:31,20/Mar/18 14:46,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-influxdb,,,,,,0,,,,"In [https://github.com/apache/camel/blob/master/components/camel-influxdb/src/main/java/org/apache/camel/component/influxdb/InfluxDbProducer.java]

on line 108, the out message on the exchange is mutated with the result.  These means that the messages headers and attachments are lost when querying.   

 

 
{code:java}
private void doQuery(Exchange exchange, String dataBaseName, String retentionPolicy) {
  String query = calculateQuery(exchange);
  Query influxdbQuery = new Query(query, dataBaseName);
  QueryResult resultSet = connection.query(influxdbQuery);
  exchange.getOut().setBody(resultSet);
}
{code}
 

I suggest that line 108 is changed to:
{code:java}
 exchange.getIn().setBody(resultSet);{code}
 

 ",,acosentino,andyflatt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 20 14:46:43 UTC 2018,,,,,,,,,,,"0|i3rjhj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Mar/18 14:46;acosentino;Now the headers are copied from in to out;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shutdown only AWS clients owned by the context,CAMEL-12379,13146261,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,ppalaga,ppalaga,19/Mar/18 14:47,20/Mar/18 07:18,13/Jul/23 08:31,20/Mar/18 07:18,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-aws,,,,,,0,,,,"This is caused by https://github.com/apache/camel/commit/0a34a3ccfdf487b2e855c0ed567b479a49bcd51e that calls {{ddbClient.shutdown()}} on endpoint shutdown.

As it happens we have a test in WildFly Camel that does roughly the following;
 * It first binds a client instance we claim to own (because we created it ourselves) to a camelctx
 * It does some route invocations and assertions
 * It stops the camelctx
 * And finally it wants to delete all Dynamo tables it has created

The last point cannot succeed because the client is closed.

The test is here https://github.com/wildfly-extras/wildfly-camel/blob/7c9c67362b324043f6ad95e4233330c2d160e9c3/itests/standalone/extra/src/test/java/org/wildfly/camel/test/aws/DynamoDBIntegrationTest.java#L58

We tend to think that camel should only close the resources it owns. It it is us who created a resource and bound it manually to a name, we expect not to loose the ownership by that. Camel should thus destroy only resources it has created itself.

 ",,ppalaga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 19 15:57:23 UTC 2018,,,,,,,,,,,"0|i3rhwf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Mar/18 15:57;ppalaga;Looks like we have the same problem also for at least ec2, kinesis, s3, SNS and SQS.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-SFTP: errors in SSH routes after changes in read-lock  ,CAMEL-12370,13146225,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acosentino,acosentino,19/Mar/18 13:40,20/Mar/18 09:39,13/Jul/23 08:31,20/Mar/18 09:39,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-sftp,,,,,,1,,,,"{code:java}
2018-03-17 12:39:37.411 WARN 1 — [OUT/compressed] o.a.c.c.file.remote.SftpConsumer : sftp://username@hostname.com/OUT/compressed?binary=true&delay=5m&greedy=true&idempotentKey=%24%7Bfile%3Aname%7D-%24%7Bfile%3Asize%7D&idempotentRepository=%23theRepo&include=filename.*zip&maxMessagesPerPoll=10&noop=true&password=xxxxxx&readLock=changed&streamDownload=true cannot begin processing file: RemoteFile[filename.zip] due to: org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry. Caused by: [java.lang.ClassCastException - org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry] java.lang.ClassCastException: org.apache.camel.component.file.remote.SftpRemoteFileJCraft cannot be cast to com.jcraft.jsch.ChannelSftp$LsEntry at org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy.acquireExclusiveReadLock(SftpChangedExclusiveReadLockStrategy.java:97) ~[camel-ftp-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:49) ~[camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:37) ~[camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:360) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:137) [camel-ftp-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:219) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:183) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.21.0.jar!/:2.21.0] at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.21.0.jar!/:2.21.0] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_151] at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_151] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_151] at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_151] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_151] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_151] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_151]{code}",,acosentino,micke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 19 13:43:37 UTC 2018,,,,,,,,,,,"0|i3rhof:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"19/Mar/18 13:43;micke;In case it helps, when troubleshooting this issue it seems to work fine on Windows but I get this error on Linux;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ensure a SOAP 1.2 enabled camel-cxf consumer endpoint can handle SOAP 1.1 request  correctly,CAMEL-12364,13146111,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,19/Mar/18 04:49,19/Mar/18 06:34,13/Jul/23 08:31,19/Mar/18 06:34,,,,,,,,,,,,,,,,2.20.3,2.21.1,2.22.0,,,camel-cxf,,,,,,0,,,,"The expected behavior for a SOAP 1.2 enabled camel-cxf consumer endpoint should be that
when the request is SOAP1.2, response SOAP 1.2 message, when the request is SOAP 1.1, response SOAP 1.1 message. 
The CXF ReadHeadersInterceptor can check the actual request soap version, we should keep this soap version when create CXF response from the Camel Exchange.",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-03-19 04:49:06.0,,,,,,,,,,,"0|i3rgzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
withAdvice() + weaveById() failing for global onException() route definitions,CAMEL-12359,13145846,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nkhalasi,nkhalasi,16/Mar/18 20:12,21/Mar/18 12:14,13/Jul/23 08:31,21/Mar/18 12:14,2.19.4,2.20.0,2.20.1,2.20.2,2.21.0,,,,,,,,,,,2.19.5,2.20.3,2.22.0,,,camel-core,,,,,,0,,,,"weaveById() when invoked in the context of withAdvise() for global routes defined for generic exception handling.

Attached is a demo code containing a single test case. It works upto 2.19.3 release and then fails with the error given below.

To reproduce the error, update the came version in build.gradle to 2.19.4 and higher.

 

{{java.lang.IllegalArgumentException: There are no outputs which matches: handle-http-host-connect-exception in the route: Route[[From[direct:dummy]] -> [OnException[[class org.apache.http.conn.HttpHostConnectException] -> [process[Processor@0x51cb5d8d], To[log://camelLogger?level=INFO&showHeaders=true]]], OnException[[class org.apache.camel.http.common.HttpOperationFailedException] -> [process[Processor@0x7dbfd5a2], To[log://camelLogger?level=INFO&showHeaders=true]]], OnException[[class java.lang.Throwable] -> [process[Processor@0x4b675ceb], To[log://camelLogger?level=INFO&showHeaders=true]]], process[Processor@0x6eb9ac40], To[mock:dummy-route-end]]] at org.apache.camel.builder.AdviceWithTasks$2.task(AdviceWithTasks.java:244) at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.java:288) at com.vayana.vnet.cameldemo.base.CamelDemoRoutesTestSupport.setUp(base.kt:12)}}",,nkhalasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11962,,,,"16/Mar/18 20:09;nkhalasi;camel-kotlin-demo.zip;https://issues.apache.org/jira/secure/attachment/12914922/camel-kotlin-demo.zip",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 16 20:16:07 UTC 2018,,,,,,,,,,,"0|i3rfc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Mar/18 20:16;nkhalasi;https://github.com/apache/camel/commit/f3f0c70e97c35f4734569303535b423403d186e0#diff-eeb47c7593aa57d32b6071108ee43a51;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Claim Check EPI: ManagedManagementStrategy: Can not register service: ClaimCheck[*] as Service MBean,CAMEL-12356,13145656,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,16/Mar/18 10:52,16/Mar/18 12:55,13/Jul/23 08:31,16/Mar/18 12:28,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-core,,,,,,0,,,,"I using the new Claim Check EIP (great new features by the way) in a Spring Boot 1.5.10 application.

The EIP works fine, but on application start-up these warnings are logged:

{noformat}
2018-03-16 11:28:50.418  INFO 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-03-16 11:28:51.037  WARN 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : Cannot check whether the managed object is registered. This exception will be ignored.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.isManaged(ManagedManagementStrategy.java:174) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:437) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.038  WARN 16020 --- [  restartedMain] a.c.m.DefaultManagementLifecycleStrategy : Could not register service: ClaimCheck[Push] as Service MBean.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:78) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:74) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:894) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:443) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.042  WARN 16020 --- [  restartedMain] o.a.c.m.ManagedManagementStrategy        : Cannot check whether the managed object is registered. This exception will be ignored.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.isManaged(ManagedManagementStrategy.java:174) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:437) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]

2018-03-16 11:28:51.042  WARN 16020 --- [  restartedMain] a.c.m.DefaultManagementLifecycleStrategy : Could not register service: ClaimCheck[Pop] as Service MBean.

java.lang.ClassCastException: org.apache.camel.model.ClaimCheckDefinition cannot be cast to org.apache.camel.model.ExpressionNode
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:40) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.mbean.ManagedClaimCheck.getDefinition(ManagedClaimCheck.java:29) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:122) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.getObjectName(ManagedManagementStrategy.java:198) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:78) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:74) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:894) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onServiceAdd(DefaultManagementLifecycleStrategy.java:443) ~[camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:368) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3947) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3854) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3640) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3492) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:209) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3251) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3270) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3247) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3163) [camel-core-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.21.0.jar:2.21.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.21.0.jar:2.21.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.10.RELEASE.jar:1.5.10.RELEASE]
	at company.Application.main(Application.java:10) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.10.RELEASE.jar:1.5.10.RELEASE]
{noformat}

My (simplified) route:

{code}
from(IN_URL)
    .claimCheck(ClaimCheckOperation.Push, null, ""body"")
    .to(SMPP_ENDPOINT_URL)
    .claimCheck(ClaimCheckOperation.Pop)
    .to(ExchangePattern.InOnly, OUT_URL);
{code}",,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 16 12:55:45 UTC 2018,,,,,,,,,,,"0|i3re5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"16/Mar/18 11:18;davsclaus;Ah in the ManagedClaimCheck you can delete the @override method that causes the class cast exception as it should not be there.

A commit / PR is welcome. Remember to backport to 2.21.x branch.;;;","16/Mar/18 12:55;pascalschumacher;Thanks for fixing!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
simple - Body.ognl function should validate that OGNL starts with a dot,CAMEL-12355,13145623,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Mar/18 08:56,16/Mar/18 13:25,13/Jul/23 08:31,16/Mar/18 08:58,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.1,2.22.0,,,camel-core,,,,,,0,,,,"So that bodyxxx is reported as invalid, as it should be body.xxx etc",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-03-16 08:56:40.0,,,,,,,,,,,"0|i3rdyn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Potential NPE in ExchangeHelper.isStreamCaching,CAMEL-12348,13144343,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Mar/18 15:34,17/Mar/18 13:10,13/Jul/23 08:31,17/Mar/18 13:10,2.20.2,2.21.0,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.1,2.22.0,,camel-core,,,,,,1,,,,"See SO

https://stackoverflow.com/questions/49235152/defaultcamelcontext-getroutes-is-empty-so-exchangehelper-isstreamcachingenable",,adrianhopebailie,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 12 20:46:18 UTC 2018,,,,,,,,,,,"0|i3r6i7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Mar/18 16:37;davsclaus;Need to cherry-pick to 2.21.x branch when its created;;;","12/Mar/18 20:46;adrianhopebailie;This can be re-created using the following project by replacing the inline processor definition with the commented out ""marshal()"" call:

[https://github.com/adrianhopebailie/ilp-node]

 

Incoming connections can be simulated using the ""example.js"" sample in [https://github.com/interledgerjs/ilp-protocol-psk2] and twerakign this to use the same address configured in the server (wss://localhost:9090/btp).

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
LinkedIn component throws IllegalArgumentException on API requests,CAMEL-12345,13144281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,jamesnetherton,jamesnetherton,12/Mar/18 12:15,23/Mar/18 03:42,13/Jul/23 08:31,23/Mar/18 03:42,2.21.0,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,,,,,,,0,,,,"Almost all of the camel-linkedin integration tests are failing on master and for the 2.21.0 tag. The error is pretty much the same for all of them. For example SearchResourceIntegrationTest.testSearchCompanies:

 
{code:java}
Caused by: org.apache.camel.RuntimeCamelException: Error invoking searchCompanies with {keywords=linkedin, fields=}: Value for fields is not specified
at org.apache.camel.util.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:514)
at org.apache.camel.util.component.AbstractApiProducer.doInvokeMethod(AbstractApiProducer.java:120)
at org.apache.camel.component.linkedin.LinkedInProducer.doInvokeMethod(LinkedInProducer.java:43)
at org.apache.camel.util.component.AbstractApiProducer$1.run(AbstractApiProducer.java:86)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Value for fields is not specified
at org.apache.cxf.jaxrs.client.AbstractClient.convertParamValue(AbstractClient.java:824)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.getPathParamValues(ClientProxyImpl.java:452)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:179)
at com.sun.proxy.$Proxy54.searchCompanies(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.camel.util.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:506)
... 10 more{code}
 

I tried setting the CamelLinkedIn.fields header, but this leads to further errors. The CXF 3.2.2 upgrade may be the culprit here. The tests run fine on Camel 2.20.x with CXF 3.2.1.",,davsclaus,ffang,jamesnetherton,neoxu999,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 23 03:37:08 UTC 2018,,,,,,,,,,,"0|i3r64f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"15/Mar/18 01:36;neoxu999;[~jamesnetherton]

 

Can you please attach your testing project?  It works for me.

{code}

INFO] 
[INFO] Camel :: LinkedIn :: Parent ........................ SUCCESS [ 2.923 s]
[INFO] Camel :: LinkedIn :: API ........................... SUCCESS [ 13.740 s]
[INFO] Camel :: LinkedIn :: Component ..................... SUCCESS [ 6.515 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.659 s
[INFO] Finished at: 2018-03-15T12:55:03+11:00
[INFO] Final Memory: 46M/153M

{code};;;","15/Mar/18 08:09;jamesnetherton;[~neoxu999] the integration tests are disabled by default. You'll need a LinkedIn Developer account so that you can configure the properties in this file:

 

https://github.com/apache/camel/blob/master/components/camel-linkedin/camel-linkedin-component/src/test/resources/test-options.properties;;;","16/Mar/18 12:34;davsclaus;I wonder if you could run the test on master branch and then the only change would be to change the CXF version in the pom.xml to 3.2.1 vs 3.2.2 so we know its only that change that may affect this.;;;","16/Mar/18 13:56;jamesnetherton;Ran against master with the CXF 3.2.1 downgrade and the tests pass. Reverting back to 3.2.2 makes them fail again.;;;","16/Mar/18 13:58;davsclaus;Thanks a lot. Maybe [~ffang] can take a look at CXF and try to find out why its causing this problem? ;;;","19/Mar/18 04:57;ffang;Is there a  LinkedIn Developer account  I can use to reproduce this?

Thanks!;;;","20/Mar/18 06:03;davsclaus;There is a CXF 3.2.3 release out, can we try testing with that version?;;;","20/Mar/18 08:19;ffang;should be caused by this change

CXF-7584;;;","23/Mar/18 03:37;ffang;CXF-7584 restrict the proxies (by default) from accidentally supplying empty path template values, but seems camel-linkedIn component still need the ability to input empty path. Fortunately CXF-7584 also introduce a property ""allow.empty.path.template.value"" from which we can switch off this check, so that keep the CXF jaxrs proxy client behavior as is.;;;",,,,,,,,,,,,,,,,,,,,
Camel-weather: freegeoip.io has been moved to freegeoip.net,CAMEL-12342,13144062,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,10/Mar/18 16:25,10/Mar/18 16:31,13/Jul/23 08:31,10/Mar/18 16:31,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-weather,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 10 16:30:53 UTC 2018,,,,,,,,,,,"0|i3r4rz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Mar/18 16:30;acosentino;[~davsclaus] [~gzurowski] last commit from me for 2.21.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms - Potential NPE in consumer,CAMEL-12335,13143474,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Mar/18 07:54,08/Mar/18 08:05,13/Jul/23 08:31,08/Mar/18 08:05,2.20.1,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-sjms,,,,,,0,,,,"{{ | Caused by: java.lang.NullPointerException: null   | at org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage(AbstractMessageHandler.java:88) ~[camel-sjms-2.20.1.jar!/:2.20.1]   | ... 8 common frames omitted}}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 08 08:05:27 UTC 2018,,,,,,,,,,,"0|i3r15b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"08/Mar/18 08:05;davsclaus;The NPE is if you set synchronous=true;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpServerConsumer resetting connections on idleTimout,CAMEL-12333,13143281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,07/Mar/18 17:56,07/Mar/18 21:51,13/Jul/23 08:31,07/Mar/18 21:51,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"If an idleTimeout is specified, the MllpTcpServerConsumer is resetting client connections after the idleTimeout - regardless of whether or not there has been any activity on the connection.

This causes serious issues with upstream components that are very connection sensitive.",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 07 21:51:17 UTC 2018,,,,,,,,,,,"0|i3qzyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Mar/18 21:51;hqstevenson;Resolved w/commit 89bcfa0753233f8b576154486a89a2677d9d3efd;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Headers getting lost after calling kubernetes-services API,CAMEL-12328,13143129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,pmanayangath,pmanayangath,07/Mar/18 07:30,07/Mar/18 12:59,13/Jul/23 08:31,07/Mar/18 12:59,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-kubernetes,,,,,,0,,,,Header set by user is getting removed after calling Kubernetes-services API.,,acosentino,pmanayangath,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 07 07:37:44 UTC 2018,,,,,,,,,,,"0|i3qz0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Mar/18 07:37;acosentino;Yes, the copy headers like other resources already use is missing in services Producers.

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java#L119]

I'll fix this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
lastConnectionActivityTicks is not getting updated by MllpTcpClientProducer,CAMEL-12325,13143003,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,06/Mar/18 22:06,23/Mar/18 16:25,13/Jul/23 08:31,23/Mar/18 16:25,,,,,,,,,,,,,,,,2.21.1,2.22.0,,,,camel-mllp,,,,,,0,,,,"The producer is not updating the last activity timestamp, which is causing idleTimeout to not work.",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 23 16:25:22 UTC 2018,,,,,,,,,,,"0|i3qy8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"06/Mar/18 22:10;hqstevenson;Fixed with commit e2b10183ba735986102799e8d1be28111f11cfc6;;;","23/Mar/18 16:25;hqstevenson;Commits for 2.22

14d2cf99cd0fbd85ab5a8383e4516acdffb65a7b

97ae6103acd5c28626d14045502e42df4e0b91af

 

Commits for 2.21.1

b782d2eead7d72b5ab3703495343c89954589651

5fa2f4f9ba203cca61687b34bc8b3b2d32c291d2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mllp - AutoAcknowledgement issues,CAMEL-12315,13142282,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,03/Mar/18 15:37,04/Mar/18 08:49,13/Jul/23 08:31,03/Mar/18 16:53,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"Several minor issues were discovered with the automatic acknowledgment functionality.
 * autoAck = false is ignored (the component still attempts to generate an acknowledgement if one is not found on the exchage
 * acknowledgment generation exceptions are not passed to the error handler when bridgeErrorHander=true
 * invalid acknowledgment exceptions are not passed to the error handler when bridgeErrorHander=true
 * the automatically generated acknowledgement uses the same timestamp as the message
 * the automatically generated acknowledgement uses the same message control id as the message
 * the automatically generated acknowledgment includes MSH-8 if present, which should not be passed on
 * automatically generated negative acknowledgments do not include any information about the failure",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 03 16:53:17 UTC 2018,,,,,,,,,,,"0|i3qts7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Mar/18 16:53;hqstevenson;Corrected issues w/commit 9b19e60dbe42df472aefa45e10fbfd1f3436a43e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SnsProducer/SqsProducer setting MessageAttributes with empty values which causes errors,CAMEL-12292,13140812,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Feb/18 21:45,03/Mar/18 16:53,13/Jul/23 08:31,03/Mar/18 16:53,2.19.4,2.20.2,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-aws,,,,,,0,,,,"If we send MessageAttributes to AWS where the value is null, it causes the following excheption:

{code}

com.amazonaws.services.sns.model.InvalidParameterValueException: The message attribute 'JMSType' must contain non-empty message attribute value for message attribute type 'String'. (Service: AmazonSNS; Status Code: 400; Error Code: ParameterValueInvalid; Request ID: d3ab2323-b70d-5d11-b466-702f48b02816)

{code}",,davsclaus,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 28 18:13:08 UTC 2018,,,,,,,,,,,"0|i3qkrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Feb/18 08:48;davsclaus;So maybe it should skip those headers that has null values.;;;","28/Feb/18 16:02;davsclaus;Christian how soon can you get this fixed as we will cut the new release end of next week;;;","28/Feb/18 18:13;muellerc;Will fix it by end of the week...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"Blueprint error: ""name is already instanciated as null and cannot be removed""",CAMEL-12291,13140594,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alex.soto,alex.soto,23/Feb/18 19:33,05/Mar/18 14:34,13/Jul/23 08:31,05/Mar/18 12:07,2.19.4,2.20.2,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-blueprint,,,,,,1,,,,"The error ""name is already instanciated (sic) as null and cannot be removed"" is thrown when configuring a component in Blueprint using property placeholders.

I noticed when trying to migrate my project to Camel 2.20.2 (from 2.17.4) 
 Example:
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
xmlns:camel=""http://camel.apache.org/schema/blueprint""
xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0""
xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
xsi:schemaLocation=""
              http://www.osgi.org/xmlns/blueprint/v1.0.0 
     https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd”>
 
<cm:property-placeholder 
   persistent-id=""audit.log""
   update-strategy=""reload” 
   placeholder-prefix=""#{"" placeholder-suffix=""}"">

   <cm:default-properties>
      <cm:property name=""audit-log.reaper.cron"" value=""0 0/30 * * * ?"" />
      <cm:property name=""startDelaySeconds"" value=""600"" />
   </cm:default-properties>
</cm:property-placeholder>

 <bean id=""audit-log-reaper-quartz"" 
       class=""org.apache.camel.component.quartz2.QuartzComponent"">

    <property name=""startDelayedSeconds"" value=""#{startDelaySeconds}"" />
</bean>{code}
  
 The bean is referenced in a Camel route:
{code:java}
<route id=""reaper-scheduler"">
     <from uri=""[audit-log-reaper-quartz://reaper?cron=\{{cron}}]"" />
{code}
Throws exception:
{quote}org.osgi.service.blueprint.container.ComponentDefinitionException: Name audit-log-reaper-quartz is already +instanciated+ as null and cannot be removed.
 at org.apache.aries.blueprint.container.BlueprintRepository.removeRecipe(BlueprintRepository.java:131) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.updateUninstantiatedRecipes(BlueprintContainerImpl.java:572) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:559) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:394) [38:org.apache.aries.blueprint.core:1.8.3]
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:275) [38:org.apache.aries.blueprint.core:1.8.3]
{quote}
 
  
 Removing the property placeholder fixes the issue:
  
{code:java}
<bean id=""audit-log-reaper-quartz"" 
      class=""org.apache.camel.component.quartz2.QuartzComponent"">
  
      <property name=""startDelayedSeconds"" value=""600"" />
</bean>
{code}
 
 According to Guillaume Nodet, this seems to have been introduced by this pull request:

[https://github.com/apache/camel/commit/a4e94f036d02943814c84195d73837cf607c8c20]

Solution proposed by Guillaume Nodet is to change line 1056 of /camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java

to
{code:java}
 if (camelContext.getComponent(component, false) == null) {
{code}
I tested this change locally and it seems to work, however I don't know if this can cause other problems.","Mac OSX, {color:#000000}Karaf 4.2.5{color}",acosentino,alex.soto,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,CAMEL-12251,,,,CAMEL-12251,,,CAMEL-10394,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://camel.465427.n5.nabble.com/Re-Blueprint-property-place-holder-error-name-is-already-instanciated-as-null-and-cannot-be-removed-td5817866.html,,,,,,,,,,9223372036854775807,,,Mon Mar 05 11:42:34 UTC 2018,,,,,,,,,,,"0|i3qjfb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Feb/18 20:25;acosentino;The fix for 12251will be in 2.20.3, but it doesn't help ;;;","24/Feb/18 06:17;ggrzybek;The fix for CAMEL-12251 should not help with original problem - it should just make it visible in logs ;);;;","24/Feb/18 10:50;acosentino;Yeah, I was on a train and I messed up with the issue.;;;","05/Mar/18 11:42;davsclaus;Yeah the proposed solution by gnodet is good, lets use that.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
URISyntaxException in AbstractSpanDecorator,CAMEL-12289,13140526,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cipous,cipous,23/Feb/18 15:36,26/Feb/18 13:09,13/Jul/23 08:31,26/Feb/18 08:46,2.20.2,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-opentracing,,,,,,0,,,,"Fix provided in CAMEL-12098 does not solve whole problem. As there are still curly brackets in URL, it fails  in AbstractDecorator in method pre(...), where is again used URI.createSchema().

I checked and URI.create(endpoint.getEndpointUri()) is also in 2 other decorators, but there is probably not happening that {} are used in path..

 ",,cipous,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12098,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 26 13:09:37 UTC 2018,,,,,,,,,,,"0|i3qj07:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"23/Feb/18 15:39;cipous;I can submit fix with only changes in AbstractSpanDecorator:
{code:java}
Index: components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java    (revision 65b5394ff4645cb47e1bdd6060d100bfe4293a09)
+++ components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/AbstractSpanDecorator.java    (date 1519316576424)
@@ -27,6 +27,7 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.opentracing.SpanDecorator;
 import org.apache.camel.util.URISupport;
+import org.apache.camel.util.StringHelper;
 
 /**
  * An abstract base implementation of the {@link SpanDecorator} interface.
@@ -69,11 +70,13 @@
 
     @Override
     public void pre(Span span, Exchange exchange, Endpoint endpoint) {
-        span.setTag(Tags.COMPONENT.getKey(), CAMEL_COMPONENT + URI.create(endpoint.getEndpointUri()).getScheme());
+        String endpointUri = endpoint.getEndpointUri();
+        endpointUri = endpointUri.replace(""{"",""("").replace(""}"","")"");
+        span.setTag(Tags.COMPONENT.getKey(), CAMEL_COMPONENT + URI.create(endpointUri).getScheme());
 
         // Including the endpoint URI provides access to any options that may have been provided, for
         // subsequent analysis
-        span.setTag(""camel.uri"", URISupport.sanitizeUri(endpoint.getEndpointUri()));
+        span.setTag(""camel.uri"", URISupport.sanitizeUri(endpointUri));
     }
 
     @Override

{code}
This solves my problem with restlet component, but not sure if it is optimal solution...;;;","26/Feb/18 08:46;davsclaus;Thanks I found a little different way to grab the component name from the uri, they way its done in camel-core;;;","26/Feb/18 13:09;cipous;This shoud be working as well... But again 
URI.create(endpoint.getEndpointUri())
is used in other decorators I am not aware of..

 

Thank you.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Allow overriding the server reported endpoint,CAMEL-12287,13140505,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dentrassi,ctron,ctron,23/Feb/18 14:04,26/Feb/18 09:27,13/Jul/23 08:31,26/Feb/18 08:59,2.19.0,2.20.2,,,,,,,,,,,,,,2.21.0,,,,,camel-milo,,,,,,0,,,,"When the client connects to the server it asks the server first for available endpoints. The server should report back with a set of endpoints, which again contain the hostname to connect to.

If the server reports back with a hostname which the client cannot look up, it is currently not possible to connect to the server with camel-milo.

I did prepare a PR which adds a boolean flag to the endpoint, allowing to override the host of reported endpoint with the one originally provided. This is disabled by default, but can be enabled when necessary.",,ctron,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 26 09:27:51 UTC 2018,,,,,,,,,,,"0|i3qivj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"26/Feb/18 08:41;githubbot;ctron opened a new pull request #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237
 
 
   This change adds the ability to override the server reported
   hostname/IP with the originally provided host/IP when connecting
   to the server.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Feb/18 08:41;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/2237

    CAMEL-12287: Allow overriding the endpoint host

    This change adds the ability to override the server reported
    hostname/IP with the originally provided host/IP when connecting
    to the server.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_12287_1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2237.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2237
    
----
commit b365e14e852f56e60ad1744908b5bf9f035a0d14
Author: Jens Reimann <jreimann@...>
Date:   2018-02-22T09:30:17Z

    CAMEL-12287: Allow overriding the endpoint host
    
    This change adds the ability to override the server reported
    hostname/IP with the originally provided IP when connecting
    to the server.

----
;;;","26/Feb/18 08:59;githubbot;oscerd commented on issue #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237#issuecomment-368431918
 
 
   Thanks for the PR, it has been merged.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Feb/18 08:59;githubbot;oscerd closed pull request #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc
index eb3e2b5db37..ea1f48a3320 100644
--- a/components/camel-milo/src/main/docs/milo-client-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc
@@ -95,7 +95,7 @@ with the following path and query parameters:
 | *endpointUri* | *Required* The OPC UA server endpoint |  | String
 |===
 
-==== Query Parameters (23 parameters):
+==== Query Parameters (24 parameters):
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
@@ -119,6 +119,7 @@ with the following path and query parameters:
 | *keyStoreUrl* (client) | The URL where the key should be loaded from |  | URL
 | *maxPendingPublishRequests* (client) | The maximum number of pending publish requests |  | Long
 | *maxResponseMessageSize* (client) | The maximum number of bytes a response message may have |  | Long
+| *overrideHost* (client) | Override the server reported endpoint host with the host from the endpoint URI. | false | boolean
 | *productUri* (client) | The product URI | http://camel.apache.org/EclipseMilo | String
 | *requestTimeout* (client) | Request timeout in milliseconds |  | Long
 | *sessionName* (client) | Session name |  | String
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
index 1a78648a93c..75743ea4009 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
@@ -85,6 +85,9 @@
     @UriParam(label = ""client"", javaType = ""java.lang.String"")
     private Set<String> allowedSecurityPolicies = new HashSet<>();
 
+    @UriParam(label = ""client"")
+    private boolean overrideHost;
+
     public MiloClientConfiguration() {
     }
 
@@ -95,6 +98,7 @@ public MiloClientConfiguration(final MiloClientConfiguration other) {
         this.productUri = other.productUri;
         this.requestTimeout = other.requestTimeout;
         this.allowedSecurityPolicies = allowedSecurityPolicies != null ? new HashSet<>(other.allowedSecurityPolicies) : null;
+        this.overrideHost = other.overrideHost;
     }
 
     public void setEndpointUri(final String endpointUri) {
@@ -316,7 +320,19 @@ public void setAllowedSecurityPolicies(final String allowedSecurityPolicies) {
     }
 
     public Set<String> getAllowedSecurityPolicies() {
-        return allowedSecurityPolicies;
+        return this.allowedSecurityPolicies;
+    }
+
+    /**
+     * Override the server reported endpoint host with the host from the
+     * endpoint URI.
+     */
+    public void setOverrideHost(boolean overrideHost) {
+        this.overrideHost = overrideHost;
+    }
+
+    public boolean isOverrideHost() {
+        return overrideHost;
     }
 
     @Override
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
index f2d31025a4b..904217ddc19 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
@@ -17,6 +17,7 @@
 package org.apache.camel.component.milo.client.internal;
 
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -416,7 +417,11 @@ private Connected performConnect() throws Exception {
                 }
             }
 
-            return findEndpoint(endpoints);
+            try {
+                return findEndpoint(endpoints);
+            } catch (final URISyntaxException e) {
+                throw new RuntimeException(""Failed to find endpoints"", e);
+            }
         }).get();
 
         LOG.debug(""Selected endpoint: {}"", endpoint);
@@ -495,7 +500,7 @@ private synchronized void triggerReconnect(final boolean immediate) {
         }
     }
 
-    private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) {
+    private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) throws URISyntaxException {
 
         final Predicate<String> allowed;
         final Set<String> uris = this.configuration.getAllowedSecurityPolicies();
@@ -517,7 +522,55 @@ private EndpointDescription findEndpoint(final EndpointDescription[] endpoints)
                 best = ep;
             }
         }
-        return best;
+
+        // return result, might override the host part
+
+        return overrideHost(best);
+    }
+
+    /**
+     * Optionally override the host of the endpoint URL with the configured one.
+     * <br>
+     * The method will call {@link #overrideHost(String)} if the endpoint is not
+     * {@code null} and {@link MiloClientConfiguration#isOverrideHost()} returns
+     * {@code true}.
+     * 
+     * @param desc The endpoint descriptor to work on
+     * @return Either the provided or updated endpoint descriptor. Only returns
+     *         {@code null} when the input was {@code null}.
+     * @throws URISyntaxException on case the URI is malformed
+     */
+    private EndpointDescription overrideHost(final EndpointDescription desc) throws URISyntaxException {
+        if (desc == null) {
+            return null;
+        }
+
+        if (!this.configuration.isOverrideHost()) {
+            return desc;
+        }
+
+        return new EndpointDescription(overrideHost(desc.getEndpointUrl()), desc.getServer(), desc.getServerCertificate(), desc.getSecurityMode(), desc.getSecurityPolicyUri(),
+                                       desc.getUserIdentityTokens(), desc.getTransportProfileUri(), desc.getSecurityLevel());
+    }
+
+    /**
+     * Override host part of the endpoint URL with the configured one.
+     * 
+     * @param endpointUrl the server provided endpoint URL
+     * @return A new endpoint URL with the host part exchanged by the configured
+     *         host. Will be {@code null} when the input is {@code null}.
+     * @throws URISyntaxException on case the URI is malformed
+     */
+    private String overrideHost(final String endpointUrl) throws URISyntaxException {
+
+        if (endpointUrl == null) {
+            return null;
+        }
+
+        final URI uri = URI.create(endpointUrl);
+        final URI originalUri = URI.create(configuration.getEndpointUri());
+
+        return new URI(uri.getScheme(), uri.getUserInfo(), originalUri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment()).toString();
     }
 
     protected synchronized void whenConnected(final Worker<Connected> worker) {
diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
index cd194aa1384..2abe2102d3e 100644
--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
@@ -175,6 +175,11 @@ public void setResolvePropertyPlaceholders(
          * use the highest.
          */
         private Set allowedSecurityPolicies;
+        /**
+         * Override the server reported endpoint host with the host from the
+         * endpoint URI.
+         */
+        private Boolean overrideHost = false;
 
         public String getEndpointUri() {
             return endpointUri;
@@ -303,5 +308,13 @@ public Set getAllowedSecurityPolicies() {
         public void setAllowedSecurityPolicies(Set allowedSecurityPolicies) {
             this.allowedSecurityPolicies = allowedSecurityPolicies;
         }
+
+        public Boolean getOverrideHost() {
+            return overrideHost;
+        }
+
+        public void setOverrideHost(Boolean overrideHost) {
+            this.overrideHost = overrideHost;
+        }
     }
 }
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","26/Feb/18 08:59;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2237
;;;","26/Feb/18 09:27;githubbot;ctron commented on issue #2237: CAMEL-12287: Allow overriding the endpoint host
URL: https://github.com/apache/camel/pull/2237#issuecomment-368439261
 
 
   Awesome. Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,,,,,,
Milo client broken,CAMEL-12286,13140164,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dentrassi,ctron,ctron,22/Feb/18 10:59,23/Feb/18 14:50,13/Jul/23 08:31,23/Feb/18 14:06,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,camel-milo,,,,,,0,,,,"It looks to me as if the camel-milo client is broken in the most recent version of camel (2.21.x). Running a working example from camel 2.20.x (and 2.19.x) with Camel 2.21-SNAPSHOT results in:
{code:java}
2018-02-22 11:56:45.248  INFO 30400 --- [           main] o.e.milo.opcua.sdk.client.OpcUaClient    : Eclipse Milo OPC UA Stack version: 0.2.1
2018-02-22 11:56:45.248  INFO 30400 --- [           main] o.e.milo.opcua.sdk.client.OpcUaClient    : Eclipse Milo OPC UA Client SDK version: 0.2.1
2018-02-22 11:56:45.407  INFO 30400 --- [           main] o.a.c.c.m.c.i.SubscriptionManager        : Failed to connect

java.util.concurrent.ExecutionException: UaException: status=Bad_SessionClosed, message=The session was closed by the client.
    at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357) ~[na:1.8.0_161]
    at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895) ~[na:1.8.0_161]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performConnect(SubscriptionManager.java:450) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performAndEvalConnect(SubscriptionManager.java:375) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.connect(SubscriptionManager.java:370) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.<init>(SubscriptionManager.java:340) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.init(MiloClientConnection.java:52) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.checkInit(MiloClientConnection.java:69) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConnection.monitorValue(MiloClientConnection.java:86) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.component.milo.client.MiloClientConsumer.doStart(MiloClientConsumer.java:57) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3701) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:4019) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3954) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3874) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3638) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3490) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:208) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3249) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3245) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3268) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3245) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3168) [camel-core-2.20.2.jar:2.20.2]
    at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) [camel-spring-2.20.2.jar:2.20.2]
    at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:174) [camel-spring-2.20.2.jar:2.20.2]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.12.RELEASE.jar:4.3.12.RELEASE]
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.8.RELEASE.jar:1.5.8.RELEASE]
    at de.dentrassi.bcx18.opcua.Application.main(Application.java:19) [classes/:na]
Caused by: org.eclipse.milo.opcua.stack.core.UaException: status=Bad_SessionClosed, description=The session was closed by the client.
    at org.eclipse.milo.opcua.stack.core.util.FutureUtils.failedUaFuture(FutureUtils.java:100) ~[stack-core-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.stack.core.util.FutureUtils.failedUaFuture(FutureUtils.java:88) ~[stack-core-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.session.states.Inactive.<init>(Inactive.java:28) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.session.SessionFsm.<init>(SessionFsm.java:69) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.eclipse.milo.opcua.sdk.client.OpcUaClient.<init>(OpcUaClient.java:159) ~[sdk-client-0.2.1.jar:0.2.1]
    at org.apache.camel.component.milo.client.internal.SubscriptionManager.performConnect(SubscriptionManager.java:447) [camel-milo-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
    ... 36 common frames omitted

{code}

And no more connections are possible.",,acosentino,ctron,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 23 14:50:04 UTC 2018,,,,,,,,,,,"0|i3qgrr:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"22/Feb/18 11:02;acosentino;[~ctron] can you please take a look?;;;","22/Feb/18 11:54;ctron;I am already on it. I think a few things changed here (to the better), but it broke the integration.

I will submit a PR for this next week. I am currently at BCX and will be able to test the PR I am currently creating.;;;","22/Feb/18 12:00;acosentino;Thanks a lot.;;;","23/Feb/18 13:58;githubbot;ctron opened a new pull request #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233
 
 
   This change adapts the client to the changed behavior of
   Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
   to configure the allowed security policies in order to still support
   anonymous access when no keys are used.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Feb/18 13:58;githubbot;GitHub user ctron opened a pull request:

    https://github.com/apache/camel/pull/2233

    CAMEL-12286: Fix camel-milo client component

    This change adapts the client to the changed behavior of
    Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
    to configure the allowed security policies in order to still support
    anonymous access when no keys are used.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ctron/camel feature/fix_issue_12286_1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2233.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2233
    
----
commit e92e8e73b4997026a5c28859569e767da8dcdb15
Author: Jens Reimann <jreimann@...>
Date:   2018-02-22T11:55:38Z

    CAMEL-12286: Fix camel-milo client component
    
    This change adapts the client to the changed behavior of
    Eclipse Milo 0.2.x. It does an explicit call to connect and also allows
    to configure the allowed security policies in order to still support
    anonymous access when no keys are used.

----
;;;","23/Feb/18 14:05;githubbot;oscerd closed pull request #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc
index a911e3f306f..eb3e2b5db37 100644
--- a/components/camel-milo/src/main/docs/milo-client-component.adoc
+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc
@@ -95,7 +95,7 @@ with the following path and query parameters:
 | *endpointUri* | *Required* The OPC UA server endpoint |  | String
 |===
 
-==== Query Parameters (22 parameters):
+==== Query Parameters (23 parameters):
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
@@ -108,6 +108,7 @@ with the following path and query parameters:
 | *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler
 | *exchangePattern* (consumer) | Sets the exchange pattern when the consumer creates an exchange. |  | ExchangePattern
 | *synchronous* (advanced) | Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported). | false | boolean
+| *allowedSecurityPolicies* (client) | A set of allowed security policy URIs. Default is to accept all and use the highest. |  | String
 | *applicationName* (client) | The application name | Apache Camel adapter for Eclipse Milo | String
 | *applicationUri* (client) | The application URI | http://camel.apache.org/EclipseMilo/Client | String
 | *channelLifetime* (client) | Channel lifetime in milliseconds |  | Long
@@ -161,6 +162,15 @@ However Camel allows to wrap the actual value inside `RAW(…)`, which makes esc
 milo-client://user:password@localhost:12345?node=RAW(nsu=http://foo.bar;s=foo/bar)
 ------------------------
 
+==== Security policies
+
+When setting the allowing security policies is it possible to use the well known OPC UA URIs (e.g. `http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15`)
+or to use the Milo enum literals (e.g. `None`). Specifying an unknown security policy URI or enum is an error.
+
+The known security policy URIs and enum literals are can be seen here: https://github.com/eclipse/milo/blob/master/opc-ua-stack/stack-core/src/main/java/org/eclipse/milo/opcua/stack/core/security/SecurityPolicy.java[SecurityPolicy.java] 
+
+**Note:** In any case security policies are considered case sensitive.
+
 === See Also
 
 * Configuring Camel
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
index 8f1e1847961..1a78648a93c 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientConfiguration.java
@@ -18,10 +18,13 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.apache.camel.component.milo.KeyStoreLoader;
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
+import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;
 
 @UriParams
 public class MiloClientConfiguration implements Cloneable {
@@ -79,6 +82,9 @@
     @UriParam(label = ""client"", secret = true)
     private String keyPassword;
 
+    @UriParam(label = ""client"", javaType = ""java.lang.String"")
+    private Set<String> allowedSecurityPolicies = new HashSet<>();
+
     public MiloClientConfiguration() {
     }
 
@@ -88,6 +94,7 @@ public MiloClientConfiguration(final MiloClientConfiguration other) {
         this.applicationName = other.applicationName;
         this.productUri = other.productUri;
         this.requestTimeout = other.requestTimeout;
+        this.allowedSecurityPolicies = allowedSecurityPolicies != null ? new HashSet<>(other.allowedSecurityPolicies) : null;
     }
 
     public void setEndpointUri(final String endpointUri) {
@@ -263,6 +270,55 @@ public String getKeyPassword() {
         return this.keyPassword;
     }
 
+    /**
+     * A set of allowed security policy URIs. Default is to accept all and use
+     * the highest.
+     */
+    public void setAllowedSecurityPolicies(final Set<String> allowedSecurityPolicies) {
+        this.allowedSecurityPolicies = allowedSecurityPolicies;
+    }
+
+    public void setAllowedSecurityPolicies(final String allowedSecurityPolicies) {
+
+        // check if we are reset or set
+
+        if (allowedSecurityPolicies == null) {
+            // resetting to null
+            this.allowedSecurityPolicies = null;
+            return;
+        }
+
+        // split and convert
+
+        this.allowedSecurityPolicies = new HashSet<>();
+        final String[] policies = allowedSecurityPolicies.split("","");
+        for (final String policy : policies) {
+
+            String adding = null;
+            try {
+                adding = SecurityPolicy.fromUri(policy).getSecurityPolicyUri();
+            } catch (Exception e) {
+            }
+            if (adding == null) {
+                try {
+                    adding = SecurityPolicy.valueOf(policy).getSecurityPolicyUri();
+                } catch (Exception e) {
+                }
+            }
+
+            if (adding == null) {
+                throw new RuntimeException(""Unknown security policy: "" + policy);
+            }
+
+            this.allowedSecurityPolicies.add(adding);
+        }
+
+    }
+
+    public Set<String> getAllowedSecurityPolicies() {
+        return allowedSecurityPolicies;
+    }
+
     @Override
     public MiloClientConfiguration clone() {
         return new MiloClientConfiguration(this);
diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
index 877bf084df8..f2d31025a4b 100644
--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java
@@ -23,6 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
@@ -31,6 +32,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 
 import org.apache.camel.component.milo.NamespaceId;
 import org.apache.camel.component.milo.PartialNodeId;
@@ -445,6 +447,7 @@ private Connected performConnect() throws Exception {
         cfg.setEndpoint(endpoint);
 
         final OpcUaClient client = new OpcUaClient(cfg.build());
+        client.connect().get();
 
         try {
             final UaSubscription manager = client.getSubscriptionManager().createSubscription(1_000.0).get();
@@ -493,8 +496,23 @@ private synchronized void triggerReconnect(final boolean immediate) {
     }
 
     private EndpointDescription findEndpoint(final EndpointDescription[] endpoints) {
+
+        final Predicate<String> allowed;
+        final Set<String> uris = this.configuration.getAllowedSecurityPolicies();
+
+        if (this.configuration.getAllowedSecurityPolicies() == null || this.configuration.getAllowedSecurityPolicies().isEmpty()) {
+            allowed = uri -> true;
+        } else {
+            allowed = uris::contains;
+        }
+
         EndpointDescription best = null;
         for (final EndpointDescription ep : endpoints) {
+
+            if (!allowed.test(ep.getSecurityPolicyUri())) {
+                continue;
+            }
+
             if (best == null || ep.getSecurityLevel().compareTo(best.getSecurityLevel()) > 0) {
                 best = ep;
             }
diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
index b653f8b6836..cd194aa1384 100644
--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java
@@ -16,6 +16,7 @@
  */
 package org.apache.camel.component.milo.client.springboot;
 
+import java.util.Set;
 import javax.annotation.Generated;
 import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
 import org.springframework.boot.context.properties.ConfigurationProperties;
@@ -169,6 +170,11 @@ public void setResolvePropertyPlaceholders(
          * The key password
          */
         private String keyPassword;
+        /**
+         * A set of allowed security policy URIs. Default is to accept all and
+         * use the highest.
+         */
+        private Set allowedSecurityPolicies;
 
         public String getEndpointUri() {
             return endpointUri;
@@ -289,5 +295,13 @@ public String getKeyPassword() {
         public void setKeyPassword(String keyPassword) {
             this.keyPassword = keyPassword;
         }
+
+        public Set getAllowedSecurityPolicies() {
+            return allowedSecurityPolicies;
+        }
+
+        public void setAllowedSecurityPolicies(Set allowedSecurityPolicies) {
+            this.allowedSecurityPolicies = allowedSecurityPolicies;
+        }
     }
 }
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Feb/18 14:05;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2233
;;;","23/Feb/18 14:05;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368017694
 
 
   This time I was faster than @davsclaus 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Feb/18 14:05;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368017714
 
 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Feb/18 14:47;githubbot;ctron commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368029151
 
 
   Thanks again for the quick merge!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Feb/18 14:50;githubbot;oscerd commented on issue #2233: CAMEL-12286: Fix camel-milo client component
URL: https://github.com/apache/camel/pull/2233#issuecomment-368029846
 
 
   Thanks for your help!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;",,,,,,,,,,,,,,,,,,
camel-beanio - Set encoding option does not work,CAMEL-12284,13139889,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/18 12:31,21/Feb/18 12:43,13/Jul/23 08:31,21/Feb/18 12:43,2.20.2,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-beanio,,,,,,0,,,,Reported on user forum,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-02-21 12:31:37.0,,,,,,,,,,,"0|i3qf33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rest-dsl - Inlined route has route id wrongly assigned,CAMEL-12282,13139845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/18 09:21,21/Feb/18 10:34,13/Jul/23 08:31,21/Feb/18 10:34,,,,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,,,,Id is wrongly assigned on the first output instead of the route element itself.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-02-21 09:21:06.0,,,,,,,,,,,"0|i3qetb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
convertBodyTo w/Charset removes existing Charset from Exchange,CAMEL-12279,13139464,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,19/Feb/18 15:38,20/Feb/18 01:19,13/Jul/23 08:31,20/Feb/18 01:19,,,,,,,,,,,,,,,,2.21.0,,,,,camel-core,,,,,,0,,,,"When covertBodyTo is used with both a target type and a Charset for an Exchange that already has the CamelCharsetName Exchange property set, the Exchange property is deleted.

The original value of the CamelCharsetName exchange property should be restored after the conversion.",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 20 01:19:51 UTC 2018,,,,,,,,,,,"0|i3qcgn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"20/Feb/18 01:19;hqstevenson;Resolved w/commit  c7b93d9d4cdccf34fb543272c7bd9e507e2eb474;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jsonpath - Should allow to load jackson adapter in OSGi,CAMEL-12278,13139446,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/18 14:33,19/Feb/18 14:38,13/Jul/23 08:31,19/Feb/18 14:38,2.20.1,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-jsonpath,,,,,,0,,,,Reported on user forum,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-02-19 14:33:57.0,,,,,,,,,,,"0|i3qccn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default value for String field results in null for CSV / Bindy,CAMEL-12260,13138135,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,boro,boro,13/Feb/18 11:18,21/Dec/20 09:46,13/Jul/23 08:31,21/Dec/20 09:46,2.20.2,,,,,,,,,,,,,,,2.21.0,,,,,camel-bindy,,,,,,0,,,,"**CAMEL-5018 added ""support the set the default value on the field of bindy CVS"", which is nice, but the default value is useless for Strings, because BindyCSVFactory turns the empty value to null even when defaultValue = """", see

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java#L230]

and

[https://github.com/apache/camel/blob/camel-2.20.x/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java#L234]",,acosentino,boro,davsclaus,dmvolod,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 09 07:47:49 UTC 2020,,,,,,,,,,,"0|i3q49j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Feb/18 14:07;davsclaus;Contributions is welcome

http://camel.apache.org/contributing;;;","16/Feb/18 14:58;githubbot;dmvolod opened a new pull request #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228
 
 
   The DataField.defaultValue always """" for String by default.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Feb/18 14:58;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2228

    CAMEL-12260: Default value for String field results is null for CSV/Bindy

    The DataField.defaultValue always """" for String by default.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12260

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2228.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2228
    
----
commit e16251daa7ed03c9fd4ffef54a03c1947bad5e03
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-02-16T14:55:00Z

    CAMEL-12260: Default value for String field results is null for
    CSV/Bindy

----
;;;","16/Feb/18 15:01;githubbot;oscerd commented on issue #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228#issuecomment-366259140
 
 
   LGTM, since this is a change in the current behavior of 2.20.x I'll merge this one only on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Feb/18 15:07;githubbot;oscerd commented on issue #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228#issuecomment-366260532
 
 
   Thanks for the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Feb/18 15:07;githubbot;oscerd closed pull request #2228: CAMEL-12260: Default value for String field results is null for CSV/Bindy
URL: https://github.com/apache/camel/pull/2228
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
index f0bc611708c..fd1c1490209 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyAbstractFactory.java
@@ -79,6 +79,7 @@ public void initModel() throws Exception {
      *  
      * @param root
      */
+    @SuppressWarnings(""rawtypes"")
     private void loadModels(Class<?> root) {
         models.add(root);
         modelClassNames.add(root.getName());
@@ -231,6 +232,8 @@ public static Object getDefaultValueForPrimitive(Class<?> clazz) throws Exceptio
             return Character.MIN_VALUE;
         } else if (clazz == boolean.class) {
             return false;
+        } else if (clazz == String.class) {
+            return """"; 
         } else {
             return null;
         }
diff --git a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
index 5585abb5cd2..d5c9799bd88 100644
--- a/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
+++ b/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/fixed/BindyFixedLengthDataFormat.java
@@ -313,6 +313,7 @@ private boolean isTrimmingNeededAndEnabled(BindyFixedLengthFactory factory, Stri
         return factory.isIgnoreTrailingChars() && myLine.length() > factory.recordLength();
     }
 
+    @SuppressWarnings(""unused"")
     private String rightPad(String myLine, int length) {
         return String.format(""%1$-"" + length + ""s"", myLine);
     }
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
index bee2c7b1659..144429f704f 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyRecordFieldStartingWithSeperatorCharTest.java
@@ -61,7 +61,7 @@ public void testUnmarshallCsvRecordFieldStartingWithSeparatorChar() throws Excep
         assertEquals(BigDecimal.valueOf(3), row.getNumber());
 
         row = mockEndPoint.getExchanges().get(3).getIn().getBody(BindyCsvRowFormat.class);
-        assertEquals(null, row.getFirstField());
+        assertEquals("""", row.getFirstField());
         assertEquals("",val2,"", row.getSecondField());
         assertEquals(BigDecimal.valueOf(4), row.getNumber());
     }
@@ -79,6 +79,7 @@ public void configure() throws Exception {
     }
 
     //from https://issues.apache.org/jira/browse/CAMEL-11065
+    @SuppressWarnings(""serial"")
     @CsvRecord(separator = "","", quote = ""'"")
     public static class BindyCsvRowFormat implements Serializable {
 
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
index 277c26c0b98..d507c3f2e99 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
@@ -25,6 +25,7 @@
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.dataformat.bindy.annotation.DataField;
 import org.apache.camel.dataformat.bindy.format.FormatException;
 import org.apache.camel.dataformat.bindy.model.simple.oneclass.Order;
 import org.apache.camel.processor.interceptor.Tracer;
@@ -127,8 +128,13 @@ public void testUnMarshallMessageWithMissingFields() throws Exception {
 
         assertNotNull(orders);
         // As the @DataField defines a default value for the firstName, the
-        // value might not be empty
+        // value might not be empty and equal to defaultValue property 
+        // inside @DataField annotation
         assertFalse(orders.get(0).getFirstName().isEmpty());
+        assertEquals(""Joe"", orders.get(0).getFirstName());
+        
+        // Check default String value set to empty ("""") for the skipped clientNr field
+        assertEquals("""", orders.get(0).getClientNr());
     }
     
     public static class ContextConfig extends RouteBuilder {
diff --git a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
index 9e3e1740853..8ba38f9ddb6 100644
--- a/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
+++ b/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/BindyPaddingAndTrimmingTest.java
@@ -26,8 +26,6 @@
 import org.hamcrest.core.Is;
 import org.junit.Test;
 
-import static org.hamcrest.core.IsNull.nullValue;
-
 public class BindyPaddingAndTrimmingTest extends CamelTestSupport {
 
     private static final String URI_DIRECT_UNMARSHAL = ""direct:unmarshall"";
@@ -56,7 +54,7 @@ public void testUnmarshal() throws Exception {
         unmarhsalResult.assertIsSatisfied();
         MyBindyModel myBindyModel = unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class);
         assertEquals(""foo  "", myBindyModel.foo);
-        assertThat(myBindyModel.bar, Is.is(nullValue()));
+        assertThat(myBindyModel.bar, Is.is(""""));
     }
 
     @Test


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Feb/18 15:07;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2228
;;;","09/Apr/20 07:09;boro;This fix is backwards incompatible and the change was something very different than the problem I reported. The change may cause a lot of problems for Camel users when upgrading.

Before the change the default value for Strings was {{null}}, which was ok. The problem I stumbled upon was that setting {{defaultValue = """"}} in field's binding annotation did not change the default value to empty string, but the *field specific* default value remained {{null}}.

Now the default value has been changed to empty string and there seems to be no way of making it {{null}} again. This means a lot of changes to the existing implementations using Camel!;;;","09/Apr/20 07:15;acosentino;2.21.0 is an old version for the fix, I don't know what version are you using, but while we were working on 2.x, since it was a longtime existing project we decided to introduce breaking change between 2.x and 2.x + 1 version, so the backward compatibility is not guaranteed anyway.;;;","09/Apr/20 07:19;dmvolod;The minimal Camel 2.x version we are maintaining is 2.25.x. You are welcome to provide PR on top of master and backport it to the 2.25.1.;;;","09/Apr/20 07:26;boro;We will adjust to the change, but I am worried about other users who will stumble upon this change. ""We decided to introduce breaking change"" - is this breaking change mentioned in the release notes / migration or upgrade guide?;;;","09/Apr/20 07:28;acosentino;""We decided to introduce breaking change"" is a general statement. You can expect breaking changes between 2.20.0 and 2.21.0 (for example). For Camel 2.x it has been like that from the beginning.;;;","09/Apr/20 07:29;acosentino;2.x has been around for more than 10 years, if couldn't allow breaking changes this project couldn't evolve like it did.;;;","09/Apr/20 07:38;boro;I don't argue against making breaking changes. But we should
 # identify these breaking changes and provide information to the users about them and
 # when possible, provide an easy migration path. A possibility to configure these default values for types would be a great solution.

As an example of no 1 is that this bug/change should be labeled as a breaking change -> ability to automatically provide users a list of changes that introduce a breaking change.;;;","09/Apr/20 07:47;acosentino;You're welcome to help. In the old website we tried to track this stuff, but with 250 components is not as easy as it seems. With the new website the situation is different as we are able to autogenerate some documentation and we have a migration guide for 2.x-> 3.x and 3.1.x -> 3.2.x;;;",,,,,,,,,,,,,,
use configured readTimeout for initial message,CAMEL-12258,13137930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,12/Feb/18 18:32,12/Feb/18 22:35,13/Jul/23 08:31,12/Feb/18 22:35,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"The camel-mllp component checks for load balancer probes by using a slightly different Runnable for processing the first message.  This runnable uses a short receiveTimeout as is should.  However, it should use the configured readTimeout.  Failure to use this configured timeout causes large messages to fail when they are the first messages received on the TCP Socket, and the camel-mllp component subsequently resets the TCP connection - so messages can never flow.",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 12 22:35:47 UTC 2018,,,,,,,,,,,"0|i3q2zz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Feb/18 22:35;hqstevenson;Resolved w/commit 5884ab755731d40a1d3d00153cc776fb0c068936.

Also improved the logging to make it easier to diagnose issues with the initial read/validation Runnable.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AWS S3 Consumer does not return custom headers in S3 Headers,CAMEL-12256,13137854,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,noel.aranha,noel.aranha,12/Feb/18 12:58,13/Feb/18 08:30,13/Jul/23 08:31,12/Feb/18 14:03,2.19.2,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-aws,,,,,,0,,,,"We can add custom user given metadata in AWS S3 as part of S3Headers in S3 Producer. However, the same user provided meta data cannot be retrieved via S3 Consumer.

Amazon SDK S3 Object provides two types of meta data:

1) Raw Meta Data
2) User Meta Data

In S3Endpoint.java, you can either set User Meta Data instead of Raw Meta Data for S3 Headers or provide another key like S3UserMetaData and provide this User Meta Data as value for that key.

Currently, there seems to be no way to access this User provided custom headers using Camel.",,acosentino,noel.aranha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 08:30:05 UTC 2018,,,,,,,,,,,"0|i3q2j3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"12/Feb/18 13:05;acosentino;I'll add an header for userMetadata with the Map from the S3Object.getMetadata.getUserMetadata;;;","13/Feb/18 07:30;noel.aranha;Thank you. The fix looks good. Do you have any idea on when these Fix versions (2.19.5, 2.20.3) will be released?;;;","13/Feb/18 08:30;acosentino;We released 2.20.2 in the last months, so I believe a couple of months or less.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger-java - Body parameter fails to output type,CAMEL-12255,13137700,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Feb/18 12:31,11/Feb/18 12:37,13/Jul/23 08:31,11/Feb/18 12:37,2.20.2,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-swagger,,,,,,0,,,,"See SO

[https://stackoverflow.com/questions/48452734/swagger-yaml-generated-by-camel-not-compatible-with-swagger-editor-and-ui?noredirect=1#comment84416840_48452734]

 

 ",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-02-11 12:31:33.0,,,,,,,,,,,"0|i3q1kv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic setting the DESTINATION_OVERRIDE_URL doesn't work on CXFRS producer,CAMEL-12252,13137609,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,aldettinger,xldai,xldai,10/Feb/18 06:40,11/Jul/19 02:24,13/Jul/23 08:31,18/Mar/18 22:44,2.17.0,2.18.5,2.19.4,2.20.2,,,,,,,,,,,,2.20.3,2.21.1,2.22.0,,,camel-cxfrs,,,,,,0,,,,"Given the sample MyProcessor, setting the DESTINATION_OVERRIDE_URL dynamically during the invoke:
{code}
public void process(Exchange exchange) throws Exception {
    String env = (String)exchange.getIn().getHeader(""Environnement"");
    if (env.equalsIgnoreCase(""DEV"")) {
        exchange.getIn().setHeader(exchange.DESTINATION_OVERRIDE_URL,
            ""http://esbdev11.local:8080/server1/metaServlet"");
    } else {
        exchange.getIn().setHeader(exchange.DESTINATION_OVERRIDE_URL,
            ""http://esblab11.local:8080/server2/metaServlet"");
    }
}
{code}

Given the sample Route:
{code}
        from(""cxfrs:bean:MyREST"")
        .process(new HeaderProcessor())
        .setHeader(""Environnement"")
        .simple(""${header.http_query[env][0]}"")
        .process(new MyProcessor())
        .setHeader(org.apache.camel.Exchange.HTTP_METHOD, constant(""GET""))
        .setHeader(org.apache.camel.Exchange.ACCEPT_CONTENT_TYPE, constant(""*/*""))
        .setHeader(org.apache.camel.Exchange.HTTP_PATH, constant(""/""))
        .to(""cxfrs:bean:restClient?maxClientCacheSize=5"");
{code}

Send request to cxfrs:bean:MyREST with different http header ""dev"", then the cxfrs:bean:restClient always make call to the last setting Address.

(Only it works as expected when setting maxClientCacheSize=0 on the cxfrs:bean:restClient)

There is no this issue on Camel 2.16.x, but start problem from Camel 2.17.x and later versions. Investigations show that the CxfRsEndpoint becoming Singleton after CAMEL-9628, that explain why the last Address setting always applied.",Java 8,aldettinger,coheigea,githubbot,nannou9,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 11 02:24:02 UTC 2019,,,,,,,,,,,"0|i3q10n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Feb/18 06:47;xldai;To fix it, the address has to be set on the JAXRSClientFactoryBean object of the ClientFactoryBeanCache of the CxfRsProducer, then even the Endpoint is Singleton, the Address still can be set dynamiclly.;;;","10/Feb/18 06:47;githubbot;xldai opened a new pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Feb/18 06:47;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2218

    fix CAMEL-12252 and add test case for it

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2218.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2218
    
----
commit 80be0842ea7696066c7d570cc537e270d738d503
Author: xldai <xldai@...>
Date:   2018-02-10T06:41:24Z

    fix CAMEL-12252 and add test case for it

----
;;;","12/Feb/18 21:23;githubbot;aldettinger commented on a change in pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#discussion_r167690712
 
 

 ##########
 File path: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
 ##########
 @@ -865,6 +865,7 @@ public JAXRSClientFactoryBean get(String address) throws Exception {
                     LOG.trace(""Created client factory bean and add to cache for address '{}'"", address);
                     
                 } else {
+                    retVal.setAddress(address);
 
 Review comment:
   I don't think that the `ClientFactoryBeanCache` would be responsible to mutate its content. However, I've noticed that the `ClientFactoryBeanCache` contains multiple soft references to the same underlying object and I wonder if it could be the cause of the issue.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Feb/18 21:45;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-367832813
 
 
   In the case at hand, each call to [createJAXRSClientFactoryBean(...)](https://github.com/apache/camel/blob/d577c2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L861) always return the same client factory bean instance but with an overridden address. We end up in a situation where [ClientFactoryBeanCache.get(address)](https://github.com/apache/camel/blob/d577c2b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java#L855) could serve a factory bean with another address than requested.
   
   The `createJAXRSClientFactoryBean(...)` implementation was tweaked when [the rsClient scope changed to prototype](https://issues.apache.org/jira/browse/CAMEL-4648). But now, we have a single client factory bean since [the SpringRsEndpoint became a singleton](https://issues.apache.org/jira/browse/CAMEL-9176).
   
   Keeping in mind thread safety, I would explore how to change [newJAXRSClientFactoryBean(...)`](https://github.com/apache/camel/blob/f8b6d5b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L62) in order to make the cache keep references to immutable client factory bean**s**.
   
   Does it make sense ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","24/Feb/18 17:59;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-368246840
 
 
   @xldai, would you like to explore changing [newJAXRSClientFactoryBean(...)](https://github.com/apache/camel/blob/f8b6d5b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java#L62) ?
   
   Otherwise, I should be able to take a look next week.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","25/Feb/18 03:14;githubbot;xldai commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-368279488
 
 
   @aldettinger Sorry for delay I was on vacation and thanks for your finding out I will looking into the SpringRsEndpoint (as I remember, even the JAXRSClientFactoryBean is created from java code still got this issue but anyway I will look into it again)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/Feb/18 10:09;githubbot;xldai commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-369190830
 
 
   @aldettinger Unfortunately, I got no success after tried to adapt the newJAXRSClientFactoryBean() of the CxfRsSpringEndpoint, could you pls looking into it?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","28/Feb/18 17:55;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-369325411
 
 
   @xldai, few things to polish and I'll take a look then.
   
   On Wed, Feb 28, 2018 at 11:10 AM, Xilai Dai <notifications@github.com>
   wrote:
   
   > @aldettinger <https://github.com/aldettinger> Unfortunately, I got no
   > success after tried to adapt the newJAXRSClientFactoryBean() of the
   > CxfRsSpringEndpoint, could you pls looking into it?
   >
   > —
   > You are receiving this because you were mentioned.
   > Reply to this email directly, view it on GitHub
   > <https://github.com/apache/camel/pull/2218#issuecomment-369190830>, or mute
   > the thread
   > <https://github.com/notifications/unsubscribe-auth/AVIAtRkW_HItcX2_STdnn68jhsKoq_ZKks5tZSX6gaJpZM4SA1KP>
   > .
   >
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Mar/18 19:29;githubbot;aldettinger opened a new pull request #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256
 
 
   More context in [CAMEL-12252](https://issues.apache.org/jira/browse/CAMEL-12252) and the [initial PR](https://github.com/apache/camel/pull/2218).
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Mar/18 19:29;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/2256

    CAMEL-12252: Corrected a bug in the URL override mechanism

    More context in [CAMEL-12252](https://issues.apache.org/jira/browse/CAMEL-12252) and the [initial PR](https://github.com/apache/camel/pull/2218).


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2256.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2256
    
----
commit ed07bef9b521133abb7dd20c2b0e698eaad4b053
Author: aldettinger <aldettinger@...>
Date:   2018-03-15T19:19:02Z

    CAMEL-12252: Corrected a bug in the URL override mechanism

----
;;;","15/Mar/18 19:29;githubbot;aldettinger commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373495840
 
 
   @xldai: I've setup a proposal which is working against camel tests. It would be great if you could check it against your environment.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","15/Mar/18 19:30;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-373496151
 
 
   @xldai I would propose to close this PR and move forward in [another](https://github.com/apache/camel/pull/2256)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 13:12;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 13:13;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
   ``
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   ``
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 13:17;githubbot;xldai commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373919087
 
 
   @aldettinger yes I confirm the test cases passed with your changes! Thanks!
   (Actually I did all most of the same changes than yours only except
   ```
       @Override
       protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
   -        checkBeanType(bean, JAXRSServerFactoryBean.class);
   -        return (JAXRSServerFactoryBean)bean;
   +      return new JAXRSServerFactoryBean();
       }
   ```
   that's why I got many of the test caces failed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 17:42;githubbot;aldettinger commented on issue #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218#issuecomment-373938830
 
 
   Closing as the bug has been corrected in [another PR](https://github.com/apache/camel/pull/2256).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 17:42;githubbot;aldettinger closed pull request #2218: fix CAMEL-12252 and add test case for it
URL: https://github.com/apache/camel/pull/2218
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index fa9978c71b3..b04a6a7be92 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -865,6 +865,7 @@ public JAXRSClientFactoryBean get(String address) throws Exception {
                     LOG.trace(""Created client factory bean and add to cache for address '{}'"", address);
                     
                 } else {
+                    retVal.setAddress(address);
                     LOG.trace(""Retrieved client factory bean from cache for address '{}'"", address);
                 }
             }
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
index 4690778bcd2..9c5f0083e4b 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
@@ -149,4 +149,47 @@ public void process(Exchange exchange) throws Exception {
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
+
+    @Test
+    public void testAddressMultiOverride() {
+        // First call with override url
+        Exchange exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        Customer response = (Customer) exchange.getOut().getBody();
+        assertNotNull(""The response should not be null "", response);
+
+        // Second call with override url
+        exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerNonExistingAddressOverrideTest""));
+
+        // Third call with override url
+        exchange = template.send(""direct://http"",
+            new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        response = (Customer) exchange.getOut().getBody();
+        assertNotNull(""The response should not be null "", response);
+    }
+
+    class SendProcessor implements Processor {
+        private String address;
+
+        public SendProcessor(String address) {
+            this.address = address;
+        }
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+            // Specify the response class , cxfrs will use InputStream as the response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address);
+        }
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 17:42;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2218
;;;","17/Mar/18 18:29;githubbot;aldettinger commented on issue #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256#issuecomment-373942167
 
 
   Thanks all. I've merged on master.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 18:29;githubbot;aldettinger closed pull request #2256: CAMEL-12252: Corrected a bug in the URL override mechanism
URL: https://github.com/apache/camel/pull/2256
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
index fa96d3c874c..d10d6c52848 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsSpringEndpoint.java
@@ -18,25 +18,31 @@
 package org.apache.camel.component.cxf.jaxrs;
 
 import org.apache.camel.Component;
+import org.apache.camel.component.cxf.spring.SpringJAXRSClientFactoryBean;
+import org.apache.camel.spring.SpringCamelContext;
+import org.apache.cxf.configuration.spring.ConfigurerImpl;
 import org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean;
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;
+import org.springframework.context.ApplicationContext;
 
 public class CxfRsSpringEndpoint extends CxfRsEndpoint implements BeanIdAware {
     private AbstractJAXRSFactoryBean bean;
+    private ConfigurerImpl configurer;
     private String beanId;
-    
-    @Deprecated 
+
+    @Deprecated
     /**
      * It will be removed in Camel 3.0
+     * 
      * @param comp
      * @param bean
      */
     public CxfRsSpringEndpoint(Component component, AbstractJAXRSFactoryBean bean) throws Exception {
-        super(bean.getAddress(), component);        
+        super(bean.getAddress(), component);
         init(bean);
     }
-    
+
     public CxfRsSpringEndpoint(Component component, String uri, AbstractJAXRSFactoryBean bean) throws Exception {
         super(uri, component);
         setAddress(bean.getAddress());
@@ -44,31 +50,40 @@ public CxfRsSpringEndpoint(Component component, String uri, AbstractJAXRSFactory
         bean.setAddress(getAddress());
         init(bean);
     }
-    
+
     private void init(AbstractJAXRSFactoryBean bean) {
         this.bean = bean;
         if (bean instanceof BeanIdAware) {
             setBeanId(((BeanIdAware)bean).getBeanId());
         }
+
+        ApplicationContext applicationContext = ((SpringCamelContext)getCamelContext()).getApplicationContext();
+        configurer = new ConfigurerImpl(applicationContext);
     }
-    
+
     @Override
     protected JAXRSServerFactoryBean newJAXRSServerFactoryBean() {
         checkBeanType(bean, JAXRSServerFactoryBean.class);
         return (JAXRSServerFactoryBean)bean;
     }
-    
+
     @Override
     protected JAXRSClientFactoryBean newJAXRSClientFactoryBean() {
-        checkBeanType(bean, JAXRSClientFactoryBean.class);
-        return (JAXRSClientFactoryBean)bean;
+        return new SpringJAXRSClientFactoryBean();
     }
-    
+
+    @Override
+    protected void setupJAXRSClientFactoryBean(JAXRSClientFactoryBean cfb, String address) {
+        configurer.configureBean(beanId, cfb);
+        cfb.setAddress(address);
+        cfb.setThreadSafe(true);
+    }
+
     public String getBeanId() {
         return beanId;
     }
-    
-    public void setBeanId(String id) {        
+
+    public void setBeanId(String id) {
         this.beanId = id;
     }
 }
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
index 4690778bcd2..9f9d5c360cf 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerAddressOverrideTest.java
@@ -30,7 +30,7 @@
 
 public class CxfRsProducerAddressOverrideTest extends CamelSpringTestSupport {
     private static int port1 = CXFTestSupport.getPort1();
-    private static int port2 = CXFTestSupport.getPort(""CxfRsProducerAddressOverrideTest.jetty""); 
+    private static int port2 = CXFTestSupport.getPort(""CxfRsProducerAddressOverrideTest.jetty"");
     public int getPort1() {
         return port1;
     }
@@ -39,7 +39,7 @@ public int getPort2() {
     }
 
     @Override
-    protected AbstractXmlApplicationContext createApplicationContext() {       
+    protected AbstractXmlApplicationContext createApplicationContext() {
         return new ClassPathXmlApplicationContext(""org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerAddressOverride.xml"");
     }
     
@@ -84,7 +84,7 @@ public void process(Exchange exchange) throws Exception {
                 // set the Http method
                 inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                 // set the relative path
-                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");                
+                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
                 // Specify the response class , cxfrs will use InputStream as the response object type 
                 inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
                 setupDestinationURL(inMessage);
@@ -115,7 +115,7 @@ public void process(Exchange exchange) throws Exception {
                 setupDestinationURL(inMessage);
             }
         });
-     
+        
         // get the response message 
         Customer response = (Customer) exchange.getOut().getBody();
         
@@ -123,7 +123,7 @@ public void process(Exchange exchange) throws Exception {
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
-    
+
     @Test
     public void testGetCustomerWithAsyncHttpAPIByOverrideDest() {
         Exchange exchange = template.send(""cxfrs:bean:rsClientHttp"", new Processor() {
@@ -135,18 +135,61 @@ public void process(Exchange exchange) throws Exception {
                 // set the Http method
                 inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                 // set the relative path
-                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");                
-                // Specify the response class , cxfrs will use InputStream as the response object type 
+                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+                // Specify the response class , cxfrs will use InputStream as
+                // the response object type
                 inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
                 setupDestinationURL(inMessage);
             }
         });
-     
-        // get the response message 
-        Customer response = (Customer) exchange.getOut().getBody();
-        
+
+        // get the response message
+        Customer response = (Customer)exchange.getOut().getBody();
+
         assertNotNull(""The response should not be null"", response);
         assertEquals(""Get a wrong customer id "", 123, response.getId());
         assertEquals(""Get a wrong customer name"", ""John"", response.getName());
     }
+
+    @Test
+    public void testAddressMultiOverride() {
+        // First call with override url
+        Exchange exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        Customer response = exchange.getOut().getBody(Customer.class);
+        assertNotNull(""The response should not be null "", response);
+
+        // Second call with override url
+        exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerNonExistingAddressOverrideTest""));
+
+        // Third call with override url ( we reuse the first url there )
+        exchange = template.send(""direct://http"", new SendProcessor(""http://localhost:"" + getPort1() + ""/CxfRsProducerAddressOverrideTest""));
+        // get the response message
+        response = exchange.getOut().getBody(Customer.class);
+        assertNotNull(""The response should not be null "", response);
+    }
+
+    class SendProcessor implements Processor {
+        private String address;
+
+        public SendProcessor(String address) {
+            this.address = address;
+        }
+
+        public void process(Exchange exchange) throws Exception {
+            exchange.setPattern(ExchangePattern.InOut);
+            Message inMessage = exchange.getIn();
+
+            // using the http central client API
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
+            // set the Http method
+            inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
+            // set the relative path
+            inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/customers/123"");
+            // Specify the response class , cxfrs will use InputStream as the
+            // response object type
+            inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class);
+            inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address);
+        }
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Mar/18 18:29;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/2256
;;;","17/Mar/18 18:33;aldettinger;The cache is now behaving correctly.;;;","18/Mar/18 00:58;xldai;[~aldettinger] Could you please backport the fixes to the camel-2.21.x branch (or even earlier branches)?;;;","18/Mar/18 22:15;aldettinger;Ok, I will backport to older branches.;;;","18/Mar/18 22:16;aldettinger;Backported to camel-2.21.x;;;","18/Mar/18 22:44;aldettinger;So, merged in master, camel-2.21.x and camel-2.20.x.;;;","19/Mar/19 07:49;nannou9;This change has introduced an inconsistency in the behaviour of Spring and Blueprint endpoints.
Also, Spring endpoint now ignores custom JAXRSClientFactoryBeans, correctly resolved by the CxfRsComponent.

Will raise separate issue.;;;","11/Jul/19 02:24;xldai;[~nannou9], Could you please link to the separate issue if you created already?;;;"
Camel-JMS: transferExchange - send ExchangeProperties can not be accessed before first endpoint in route,CAMEL-12249,13137401,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pascalschumacher,pascalschumacher,09/Feb/18 10:27,13/Feb/18 17:24,13/Jul/23 08:31,13/Feb/18 15:26,2.20.2,,,,,,,,,,,,,,,2.21.0,,,,,came-jms,,,,,,0,,,,"I am using Camel 2.20.2 and ActiveMQ 5.14.5 with the _transferExchange_ option enabled. When I read a message from a queue the send custom _ExchangeProperties_ are not set. After the exchange is routed to the first endpoint the send _ExchangeProperties_ are set.

Unittest to replicate:

{code:java}
public class JmsTransferExchangeAccessExchangePropertiesBeforeFirstEndpointTest extends CamelTestSupport {

    @Test
    public void testSendExchangeAndAccessExchangePropertiesBeforeFirstEndpoint() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hello World"");
        mock.expectedPropertyReceived(""bar"", 123);

        template.send(""direct:start"", new Processor() {

            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(""Hello World"");
                exchange.setProperty(""bar"", 123);
            }
        });

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:start"").to(getUri());
                from(getUri())
                        // .to(""log:debug"") this line has uncommented to make the test pass
                        .choice().when(exchangeProperty(""bar"").isEqualTo(123)).to(""mock:result"");
            }
        };
    }
    
    protected String getUri() {
        return ""activemq:queue:foo?transferExchange=true"";
    }

    protected CamelContext createCamelContext() throws Exception {
        CamelContext camelContext = super.createCamelContext();

        ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory();
        camelContext.addComponent(""activemq"", jmsComponentAutoAcknowledge(connectionFactory));
        return camelContext;
    }
}
{code}

The test fails, but if I uncomment the _.to(""log:debug"")_ line it passes.

The test also fails with current master of camel.",,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 17:24:34 UTC 2018,,,,,,,,,,,"0|i3pzqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"13/Feb/18 14:40;davsclaus;You need then to turn on eagerLoadingOfProperties=true;;;","13/Feb/18 15:22;davsclaus;Okay just looked in the source that option only triggers the headers, and the transferExchange is unmarshalled when accessing the body, so will get that improved so the eager option works for that too.;;;","13/Feb/18 17:24;pascalschumacher;Thank you very much, Claus!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow not compatible with ahc-version 2.3.0,CAMEL-12247,13137258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tcunning,tcunning,08/Feb/18 20:54,09/Feb/18 06:39,13/Jul/23 08:31,09/Feb/18 06:39,,,,,,,,,,,,,,,,2.21.0,,,,,camel-undertow,,,,,,0,,,,"camel-undertow isn't compatible with the new ahc-version (2.3.0) configured here 

[https://github.com/apache/camel/commit/684ef5786838e051cece2f510d9dafabdc310d02]

Getting a lot of compile errors trying to build it - multiple classes WebSocketByteListener, WebSocketTextListener have been removed, the WebSocketListener interface has different methods, etc
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project camel-undertow: Compilation failure: Compilation failure:
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[31,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketByteListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[32,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[123,51] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: class TestClient
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java:[123,74] error: cannot find symbol
[ERROR] symbol:   class WebSocketByteListener
[ERROR] location: class TestClient
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java:[29,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java:[43,29] error: cannot find symbol
[ERROR] symbol:   class DefaultWebSocketListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java:[32,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java:[47,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java:[29,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java:[28,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] /home/jenkins/camel/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java:[33,29] error: cannot find symbol
[ERROR] symbol:   class WebSocketTextListener
[ERROR] location: package org.asynchttpclient.ws
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project camel-undertow: Compilation failure
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.compiler.CompilationFailureException: Compilation failure
	at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:1029)
	at org.apache.maven.plugin.compiler.TestCompilerMojo.execute(TestCompilerMojo.java:170)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	... 20 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] 
[http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException]
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-undertow",,acosentino,githubbot,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 09 06:39:02 UTC 2018,,,,,,,,,,,"0|i3pyun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Feb/18 04:52;githubbot;cunningt opened a new pull request #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214
 
 
   https://issues.apache.org/jira/browse/CAMEL-12247

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 04:52;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/2214

    [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0

    https://issues.apache.org/jira/browse/CAMEL-12247

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-12247

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2214.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2214
    
----
commit b70dfdceae0abe6070e25a15f02da0d647c4264f
Author: Tom Cunningham <tcunning@...>
Date:   2018-02-09T04:50:45Z

    [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0

----
;;;","09/Feb/18 06:37;githubbot;oscerd closed pull request #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
index b2d5a89a7b5..7a235a1ac64 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/TestClient.java
@@ -28,8 +28,7 @@
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketByteListener;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -69,11 +68,11 @@ public void connect() throws InterruptedException, ExecutionException, IOExcepti
     }
 
     public void sendTextMessage(String message) {
-        websocket.sendMessage(message);
+        websocket.sendTextFrame(message);
     }
 
     public void sendBytesMessage(byte[] message) {
-        websocket.sendMessage(message);
+        websocket.sendBinaryFrame(message);
     }
 
     public boolean await(int secs) throws InterruptedException {
@@ -116,11 +115,11 @@ public void reset(int count) {
     }
     
     public void close() throws IOException {
-        websocket.close();
+        websocket.sendCloseFrame();
         client.close();
     }
 
-    private class TestWebSocketListener implements WebSocketTextListener, WebSocketByteListener {
+    private class TestWebSocketListener implements WebSocketListener {
 
         @Override
         public void onOpen(WebSocket websocket) {
@@ -128,8 +127,8 @@ public void onOpen(WebSocket websocket) {
         }
 
         @Override
-        public void onClose(WebSocket websocket) {
-            LOG.info(""[ws] closed"");
+        public void onClose(WebSocket websocket, int code, String reason) {
+            LOG.info(""[ws] closed, code "" + code + "" reason "" + reason);
         }
 
         @Override
@@ -138,15 +137,14 @@ public void onError(Throwable t) {
         }
 
         @Override
-        public void onMessage(byte[] message) {
+        public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
             received.add(message);
             LOG.info(""[ws] received bytes --> "" + Arrays.toString(message));
             latch.countDown();
         }
 
-        
         @Override
-        public void onMessage(String message) {
+        public void onTextFrame(String message, boolean finalFragment, int rsv) {
             received.add(message);
             LOG.info(""[ws] received --> "" + message);
             latch.countDown();
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
index b1df0a47d01..94a96d0a081 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsConsumerRouteTest.java
@@ -40,7 +40,7 @@
 import org.apache.camel.converter.IOConverter;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
-import org.asynchttpclient.ws.DefaultWebSocketListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocket;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Assert;
@@ -56,13 +56,21 @@ public void wsClientSingleText() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -73,12 +81,12 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result1"");
         result.expectedBodiesReceived(""Test"");
 
-        websocket.sendMessage(""Test"");
+        websocket.sendTextFrame(""Test"");
 
         result.await(60, TimeUnit.SECONDS);
         result.assertIsSatisfied();
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -87,13 +95,21 @@ public void wsClientSingleTextStreaming() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app2"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -104,7 +120,7 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result2"");
         result.expectedMessageCount(1);
 
-        websocket.sendMessage(""Test"");
+        websocket.sendTextFrame(""Test"");
 
         result.await(60, TimeUnit.SECONDS);
         List<Exchange> exchanges = result.getReceivedExchanges();
@@ -114,7 +130,7 @@ public void onError(Throwable t) {
         Reader r = (Reader) body;
         Assert.assertEquals(""Test"", IOConverter.toString(r));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -123,7 +139,15 @@ public void wsClientSingleBytes() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
+
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
 
                     @Override
                     public void onError(Throwable t) {
@@ -131,7 +155,7 @@ public void onError(Throwable t) {
                     }
 
                     @Override
-                    public void onMessage(byte[] message) {
+                    public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
                         System.out.println(""got byte[] message"");
                     }
                 }).build()).get();
@@ -140,11 +164,11 @@ public void onMessage(byte[] message) {
         final byte[] testmessage = ""Test"".getBytes(""utf-8"");
         result.expectedBodiesReceived(testmessage);
 
-        websocket.sendMessage(testmessage);
+        websocket.sendBinaryFrame(testmessage);
 
         result.assertIsSatisfied();
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -153,13 +177,21 @@ public void wsClientSingleBytesStreaming() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/app2"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(byte[] message) {
+                    public void onBinaryFrame(byte[] message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -171,7 +203,7 @@ public void onError(Throwable t) {
         result.expectedMessageCount(1);
 
         final byte[] testmessage = ""Test"".getBytes(""utf-8"");
-        websocket.sendMessage(testmessage);
+        websocket.sendBinaryFrame(testmessage);
 
         result.await(60, TimeUnit.SECONDS);
         List<Exchange> exchanges = result.getReceivedExchanges();
@@ -181,7 +213,7 @@ public void onError(Throwable t) {
         InputStream in = (InputStream) body;
         Assert.assertArrayEquals(testmessage, IOConverter.toBytes(in));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
@@ -190,13 +222,21 @@ public void wsClientMultipleText() throws Exception {
         AsyncHttpClient c1 = new DefaultAsyncHttpClient();
 
         WebSocket websocket1 = c1.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -206,13 +246,21 @@ public void onError(Throwable t) {
         AsyncHttpClient c2 = new DefaultAsyncHttpClient();
 
         WebSocket websocket2 = c2.prepareGet(""ws://localhost:"" + getPort() + ""/app1"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new DefaultWebSocketListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         System.out.println(""got message "" + message);
                     }
 
+                    @Override
+                    public void onOpen(WebSocket webSocket) {
+                    }
+
+                    @Override
+                    public void onClose(WebSocket webSocket, int code, String reason) {
+                    }
+
                     @Override
                     public void onError(Throwable t) {
                         t.printStackTrace();
@@ -223,8 +271,8 @@ public void onError(Throwable t) {
         MockEndpoint result = getMockEndpoint(""mock:result1"");
         result.expectedMessageCount(2);
 
-        websocket1.sendMessage(""Test1"");
-        websocket2.sendMessage(""Test2"");
+        websocket1.sendTextFrame(""Test1"");
+        websocket2.sendTextFrame(""Test2"");
 
         result.await(60, TimeUnit.SECONDS);
         result.assertIsSatisfied();
@@ -234,8 +282,8 @@ public void onError(Throwable t) {
         actual.add(exchanges.get(1).getIn().getBody(String.class));
         Assert.assertEquals(new HashSet<String>(Arrays.asList(""Test1"", ""Test2"")), actual);
 
-        websocket1.close();
-        websocket2.close();
+        websocket1.sendCloseFrame();
+        websocket2.sendCloseFrame();
         c1.close();
         c2.close();
     }
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
index 3f45f827fc0..e625c9b2bbc 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteRestartTest.java
@@ -29,7 +29,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -69,9 +69,9 @@ private void doTestWSHttpCall() throws Exception {
         AsyncHttpClient c = new DefaultAsyncHttpClient();
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/shop"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {
-                    @Override
-                    public void onMessage(String message) {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
+					@Override
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         received.add(message);
                         log.info(""received --> "" + message);
                         latch.countDown();
@@ -82,7 +82,7 @@ public void onOpen(WebSocket websocket) {
                     }
 
                     @Override
-                    public void onClose(WebSocket websocket) {
+                    public void onClose(WebSocket websocket, int code, String reason) {
                     }
 
                     @Override
@@ -101,7 +101,7 @@ public void onError(Throwable t) {
         assertTrue(r instanceof String);
         assertEquals(""Beer on stock at Apache Mall"", r);
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
 
     }
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
index f089813f6ba..e33896191bc 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsProducerRouteTest.java
@@ -4,6 +4,7 @@
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the ""License""); you may not use this file except in compliance with
+
  * the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
@@ -30,7 +31,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -47,10 +48,10 @@ public void testWSHttpCall() throws Exception {
         final List<Object> received = Collections.synchronizedList(new ArrayList<Object>());
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/shop"")
-                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketTextListener() {
+                .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(new WebSocketListener() {
 
                     @Override
-                    public void onMessage(String message) {
+                    public void onTextFrame(String message, boolean finalFragment, int rsv) {
                         received.add(message);
                         log.info(""received --> "" + message);
                         latch.countDown();
@@ -61,7 +62,7 @@ public void onOpen(WebSocket websocket) {
                     }
 
                     @Override
-                    public void onClose(WebSocket websocket) {
+                    public void onClose(WebSocket websocket, int code, String reason) {
                     }
 
                     @Override
@@ -80,7 +81,7 @@ public void onError(Throwable t) {
         assertTrue(r instanceof String);
         assertEquals(""Beer on stock at Apache Mall"", r);
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
index cf091c89dd3..475fbd341e0 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesTest.java
@@ -26,7 +26,7 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -42,9 +42,9 @@ public void testWSHttpCallEcho() throws Exception {
             final AsyncHttpClient c = new DefaultAsyncHttpClient();
             final WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                    .addWebSocketListener(new WebSocketTextListener() {
+                    .addWebSocketListener(new WebSocketListener() {
                         @Override
-                        public void onMessage(String message) {
+                        public void onTextFrame(String message, boolean finalFragment, int rsv) {
                             received.add(message);
                             log.info(""received --> "" + message);
                             latch.countDown();
@@ -55,7 +55,7 @@ public void onOpen(WebSocket websocket) {
                         }
 
                         @Override
-                        public void onClose(WebSocket websocket) {
+                        public void onClose(WebSocket websocket, int code, String reason) {
                         }
 
                         @Override
@@ -64,13 +64,13 @@ public void onError(Throwable t) {
                         }
                     }).build()).get();
 
-            websocket.sendMessage(""Beer"");
+            websocket.sendTextFrame(""Beer"");
             assertTrue(latch.await(10, TimeUnit.SECONDS));
 
             assertEquals(1, received.size());
             assertEquals(""The bar has Beer"", received.get(0));
 
-            websocket.close();
+            websocket.sendCloseFrame();
             c.close();
         }
 
@@ -82,9 +82,9 @@ public void onError(Throwable t) {
             final AsyncHttpClient c = new DefaultAsyncHttpClient();
             final WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/pub"").execute(
                     new WebSocketUpgradeHandler.Builder()
-                            .addWebSocketListener(new WebSocketTextListener() {
+                            .addWebSocketListener(new WebSocketListener() {
                                 @Override
-                                public void onMessage(String message) {
+                                public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                     received.add(message);
                                     log.info(""received --> "" + message);
                                     latch.countDown();
@@ -96,7 +96,7 @@ public void onOpen(WebSocket websocket) {
                                 }
 
                                 @Override
-                                public void onClose(WebSocket websocket) {
+                                public void onClose(WebSocket websocket, int code, String reason) {
                                 }
 
                                 @Override
@@ -105,13 +105,13 @@ public void onError(Throwable t) {
                                 }
                             }).build()).get();
 
-            websocket.sendMessage(""wine"");
+            websocket.sendTextFrame(""wine"");
             assertTrue(latch.await(10, TimeUnit.SECONDS));
 
             assertEquals(1, received.size());
             assertEquals(""The pub has wine"", received.get(0));
 
-            websocket.close();
+            websocket.sendCloseFrame();
             c.close();
         }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
index 3b67a8a878e..0235ad2b69c 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointSendToAllHeaderTest.java
@@ -26,7 +26,7 @@
 import org.apache.camel.component.undertow.UndertowConstants;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -44,9 +44,9 @@ public void testWSHttpCallEcho() throws Exception {
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -57,7 +57,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -66,7 +66,7 @@ public void onError(Throwable t) {
                             }
                         }).build()).get();
 
-        websocket.sendMessage(""Beer"");
+        websocket.sendTextFrame(""Beer"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertEquals(2, received.size());
@@ -75,7 +75,7 @@ public void onError(Throwable t) {
         assertTrue(received.contains(""The bar has Beer""));
         assertTrue(received.contains(""Broadcasting to Bar""));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
index f6e1ed0a226..d1a3b29a3ae 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWsTwoRoutesToSameEndpointTest.java
@@ -25,7 +25,7 @@
 import org.apache.camel.component.undertow.BaseUndertowTest;
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.Test;
 
@@ -43,9 +43,9 @@ public void testWSHttpCallEcho() throws Exception {
 
         WebSocket websocket = c.prepareGet(""ws://localhost:"" + getPort() + ""/bar"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -56,7 +56,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -65,7 +65,7 @@ public void onError(Throwable t) {
                             }
                         }).build()).get();
 
-        websocket.sendMessage(""Beer"");
+        websocket.sendTextFrame(""Beer"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertEquals(2, received.size());
@@ -74,7 +74,7 @@ public void onError(Throwable t) {
         assertTrue(received.contains(""The bar has Beer""));
         assertTrue(received.contains(""Broadcasting to Bar""));
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
index bd4152d6b15..413ae5ff631 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/ws/UndertowWssRouteTest.java
@@ -44,7 +44,7 @@
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClientConfig;
 import org.asynchttpclient.ws.WebSocket;
-import org.asynchttpclient.ws.WebSocketTextListener;
+import org.asynchttpclient.ws.WebSocketListener;
 import org.asynchttpclient.ws.WebSocketUpgradeHandler;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -105,7 +105,7 @@ protected AsyncHttpClient createAsyncHttpSSLClient() throws IOException, General
                 .trustManager(InsecureTrustManagerFactory.INSTANCE)
                 .build();
         builder.setSslContext(sslContext);
-        builder.setAcceptAnyCertificate(true);
+        builder.setUseInsecureTrustManager(true);
         config = builder.build();
         c = new DefaultAsyncHttpClient(config);
 
@@ -120,9 +120,9 @@ public void testWSHttpCall() throws Exception {
         AsyncHttpClient c = createAsyncHttpSSLClient();
         WebSocket websocket = c.prepareGet(""wss://localhost:"" + getPort() + ""/test"").execute(
                 new WebSocketUpgradeHandler.Builder()
-                        .addWebSocketListener(new WebSocketTextListener() {
+                        .addWebSocketListener(new WebSocketListener() {
                             @Override
-                            public void onMessage(String message) {
+                            public void onTextFrame(String message, boolean finalFragment, int rsv) {
                                 received.add(message);
                                 log.info(""received --> "" + message);
                                 latch.countDown();
@@ -133,7 +133,7 @@ public void onOpen(WebSocket websocket) {
                             }
 
                             @Override
-                            public void onClose(WebSocket websocket) {
+                            public void onClose(WebSocket websocket, int code, String reason) {
                             }
 
                             @Override
@@ -144,7 +144,7 @@ public void onError(Throwable t) {
 
         getMockEndpoint(""mock:client"").expectedBodiesReceived(""Hello from WS client"");
 
-        websocket.sendMessage(""Hello from WS client"");
+        websocket.sendTextFrame(""Hello from WS client"");
         assertTrue(latch.await(10, TimeUnit.SECONDS));
 
         assertMockEndpointsSatisfied();
@@ -154,7 +154,7 @@ public void onError(Throwable t) {
             assertEquals("">> Welcome on board!"", received.get(i));
         }
 
-        websocket.close();
+        websocket.sendCloseFrame();
         c.close();
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 06:38;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2214
;;;","09/Feb/18 06:38;githubbot;oscerd commented on issue #2214: [CAMEL-12247] camel-undertow not compatible with ahc-version 2.3.0
URL: https://github.com/apache/camel/pull/2214#issuecomment-364348819
 
 
   Thanks for the PR :-) Merged!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 06:39;acosentino;Thanks Tom for the PR!;;;",,,,,,,,,,,,,,,,,,,,,,,
New AsciiDoc documentation has many broken links,CAMEL-12246,13137197,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,fbolton,fbolton,08/Feb/18 17:12,10/Feb/18 09:42,13/Jul/23 08:31,09/Feb/18 13:26,2.21.0,,,,,,,,,,,,,,,2.21.0,,,,,documentation,,,,,,0,,,,"There are a fair number of broken links in the new AsciiDoc documentation (in the main Camel repo). In other words, links like {{link:LINKNAME.html[Link Text]}} ought to have a matching target ID, {{[[LINKNAME]]}}, in the AsciiDoc source. But I found 245 LINKNAMEs in links that have no corresponding target ID defined.",,fbolton,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 10 09:42:12 UTC 2018,,,,,,,,,,,"0|i3pyh3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"09/Feb/18 12:56;githubbot;fbolton opened a new pull request #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215
 
 
   @davsclaus and @oscerd, here are the changes to the AsciiDoc linking that we discussed. Here's a summary of what was done:
   
   * Resolve the duplicate IDs (can't do any harm, and is actually required for our downstream builds)
   * Take into account the -eip suffix, which might reduce the number of unresolved links.
   * All resolvable links to be transformed to AsciiDoc cross-reference format, as follows:
   ```
   link:LINKNAME.html[Text of Link]  =>  <<LINKNAME, Text of Link>>
   ```
     Where, in some cases, `LINKNAME` might be augmented by a `-component`, `-dataformat`, `-language`, or `-eip` suffix.
   * Identify the broken EIP links and leave them alone. These will continue to show up as broken links, but we can easily fix them later.
   * All other unresolved links will be removed. Probably do this by replacing:
   ```
   link:LINKNAME.html[Text of Link]   =>  Text of Link
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 12:56;githubbot;GitHub user fbolton opened a pull request:

    https://github.com/apache/camel/pull/2215

    CAMEL-12246 Fix broken links

    @davsclaus and @oscerd, here are the changes to the AsciiDoc linking that we discussed. Here's a summary of what was done:
    
    * Resolve the duplicate IDs (can't do any harm, and is actually required for our downstream builds)
    * Take into account the -eip suffix, which might reduce the number of unresolved links.
    * All resolvable links to be transformed to AsciiDoc cross-reference format, as follows:
    ```
    link:LINKNAME.html[Text of Link]  =>  <<LINKNAME, Text of Link>>
    ```
      Where, in some cases, `LINKNAME` might be augmented by a `-component`, `-dataformat`, `-language`, or `-eip` suffix.
    * Identify the broken EIP links and leave them alone. These will continue to show up as broken links, but we can easily fix them later.
    * All other unresolved links will be removed. Probably do this by replacing:
    ```
    link:LINKNAME.html[Text of Link]   =>  Text of Link
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fbolton/camel fix-broken-links

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2215.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2215
    
----
commit 9641a6edb74138dc8313deba80a0a46d4236a6e4
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-08T17:13:29Z

    CAMEL-12246 Fixed a duplicate ID in the AsciiDoc source

commit b61b7a18999594a32c67061eb41c3d6762db756a
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T10:56:09Z

    CAMEL-12246 Replaced file links with AsciiDoc internal cross references

commit 5b6d0a8fcb2c36216d812d8c0bac77262f9fe743
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T12:18:06Z

    CAMEL-12246 Replaced file links that were split over two lines (manually)

commit 8b850266f845e42901005cee568c68f73ed58661
Author: Fintan Bolton <fbolton@...>
Date:   2018-02-09T12:38:18Z

    CAMEL-12246 Replaced bad links with plain text, except for the files in camel-core/src/main/docs/eips/, which will be fixed later

----
;;;","09/Feb/18 13:25;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364432933
 
 
   Thanks for the PR :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 13:34;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364434924
 
 
   This will work once the docs will be generated, but actually with this the link won't work in Github.
   
   @davsclaus do we have to revert?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 13:54;githubbot;fbolton commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364439529
 
 
   @oscerd yes, but I have the impression that most links were already broken in GitHub anyway. For example, if you look at the camel-http doc page in the commit *before* this PR was merged:
   https://github.com/apache/camel/blob/ee26d31bcc10fad113fa46cbf0bf4b36f9f0cfbc/components/camel-http/src/main/docs/http-component.adoc
   
   Search for the link to ""Jetty Component"". When you click on it, you get a 404. My impression is that this is fairly typical of the links that were already there.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Feb/18 13:57;githubbot;oscerd commented on issue #2215: CAMEL-12246 Fix broken links
URL: https://github.com/apache/camel/pull/2215#issuecomment-364440428
 
 
   Yeah, true. You're right.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","10/Feb/18 09:42;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2215
;;;",,,,,,,,,,,,,,,,,,,,,,
"RemoteFileProducer stopped instead of being released to the pool when ""interceptSendToEndpoint"" is used",CAMEL-12244,13137160,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kszafran,kszafran,08/Feb/18 14:27,14/Feb/18 14:34,13/Jul/23 08:31,14/Feb/18 14:34,2.19.0,,,,,,,,,,,,,,,2.21.0,,,,,,,,,,,0,,,,"In our application we're using an SFTP producer with ""fileExist=Move"" and a specific ""moveExisting"" expression. I encountered a problem where this would sometimes work, and sometimes not (i.e. there would be no "".archived"" file). Upon further investigation I found the problem and it seems to be a bug in Camel.

Our SFTP endpoint looks like this:
{code:none}
sftp://...:.../...?username=...&privateKeyPassphrase=...&privateKeyFile=...&useUserKnownHostsFile=false&jschLoggingLevel=ERROR&fileExist=Move&moveExisting=${file:name}.archived${date:now:yyyyMMddHHmmssSSS}
{code}

We also have an interceptor:
{code:none}
route.interceptSendToEndpoint(""sftp://.*"").process(exchange -> LOG.info(""Sending file {} to {}"", ...));
{code}

As I discovered, using the interceptor wraps the RemoteFileProducer with InterceptSendToEndpoint. This however changes the behavior of the ProducerCache:
{code}
public boolean doInAsyncProducer(...) {
    ...
    return producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, doneSync -> {
        ...
        if (producer instanceof ServicePoolAware) {
            // release back to the pool
            pool.release(endpoint, producer);
        } else if (!producer.isSingleton()) {
            // stop and shutdown non-singleton producers as we should not leak resources
            try {
                ServiceHelper.stopAndShutdownService(producer);
            } catch (Exception e) {
                ...
            }
        }
        ...
    });
    ...
}
{code}

RemoteFileProducer implements ServicePoolAware so it would normally go back to the pool, but InterceptSendToEndpoint _does not_. As a result, our producers keep getting stopped (note that RemoteFileProducer#isSingleton always returns false).

What's more, somehow they _are_ being reused and in the end we run into situations, where one thread is closing a producer, while another thread is trying to write with it.

I set up some breakpoints that log the thread name and System#identityHashCode of the producer:
{code}
2018-02-08 15:05:25.070 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Starting producer: RemoteFileProducer[...]
2018-02-08 15:05:25.073 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Processing file: [my_file] for exchange: ...
2018-02-08 15:05:25.073 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Not already connected/logged in. Connecting to: ...
doStop(), time: 1518098725112,  thread [Camel (camel-1) thread #35 - CamelInvocationHandler], producer: 889747012
	at org.apache.camel.component.file.remote.RemoteFileProducer.doStop(RemoteFileProducer.java:175)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:142)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.stop(InterceptSendToEndpoint.java:196)
	at org.apache.camel.support.ServiceSupport.shutdown(ServiceSupport.java:164)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:211)
	at org.apache.camel.impl.ProducerCache.lambda$doInAsyncProducer$2(ProducerCache.java:450)
	at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:178)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:171)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)
	at org.apache.camel.processor.Splitter.process(Splitter.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.DeferProducer.process(DeferProducer.java:72)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler$1.call(AbstractCamelInvocationHandler.java:192)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.Executors$RunnableAdapter.call$$$capture(Executors.java:511)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
2018-02-08 15:05:25.966 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Connected and logged in to: ...
2018-02-08 15:05:25.966 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Disconnecting from: ...
2018-02-08 15:05:25.973 TRACE o.a.c.c.file.remote.RemoteFileProducer     : About to write [my_file] to [...] from exchange [...]
2018-02-08 15:05:25.974 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Stopping producer: RemoteFileProducer[...]
2018-02-08 15:05:25.974 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Starting
2018-02-08 15:05:25.974 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Starting producer: RemoteFileProducer[...]
2018-02-08 15:05:25.977 TRACE o.a.c.c.file.remote.RemoteFileProducer     : Processing file: [another_file] for exchange: Exchange[...]
2018-02-08 15:05:25.977 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Not already connected/logged in. Connecting to: ...
handleFailedWrite(), time: 1518098726072, thread [Camel (camel-1) thread #37 - CamelInvocationHandler], producer: 889747012
	at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:81)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:227)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:167)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)
	at org.apache.camel.processor.Splitter.process(Splitter.java:114)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.DeferProducer.process(DeferProducer.java:72)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler$1.call(AbstractCamelInvocationHandler.java:192)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.Executors$RunnableAdapter.call$$$capture(Executors.java:511)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: [my_directory]
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:596)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:584)
	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:830)
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)
	... 39 more
Caused by: 4:
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:359)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:594)
	... 43 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:307)
	at com.jcraft.jsch.Channel$MyPipedInputStream.updateReadSide(Channel.java:362)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:337)
	... 44 more
2018-02-08 15:05:26.186 DEBUG o.a.c.c.file.remote.RemoteFileProducer     : Exception occurred during stopping: Cannot change directory to: [my_directory]
{code}
So thread #35 stopped the producer, while thread #37 was trying to use it.

One more ugly thing about it is that when SftpOperations fail due to a closed pipe, by the time we get to RemoteFileProducer#handleFailedWrite:
{code}
public void handleFailedWrite(...) throws Exception {
    ...
    if (isStopping() || isStopped()) {
        // if we are stopping then ignore any exception during a poll
        log.debug(""Exception occurred during stopping: "" + exception.getMessage());
    } else {
        log.warn(""Writing file failed with: "" + exception.getMessage());
        ...
        throw exception;
    }
}
{code}
the producer is already stopped, *so the exception is logged on DEBUG and not rethrown*.

Note that I'm writing multiple files in parallel (three in my case), I'm using this to send data to the route ending in the SFTP endpoint:
{code}
@Produce(uri = ""direct:myDir"")
private MyDir myDir;
...
myDir.sendAsync(...)
{code}
where
{code}
public interface MyDir {
    Future<?> sendAsync(...);
}
{code}

We're using Camel 2.19.0, but so far that I've looked at the github repository, the issue is most likely present in the current version too.",,davsclaus,kszafran,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 14 14:34:56 UTC 2018,,,,,,,,,,,"0|i3py8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"14/Feb/18 14:34;davsclaus;Thanks for reporting and diving into the source code and finding the problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS SWF: Region is not set during client creation,CAMEL-12236,13136802,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,07/Feb/18 09:54,07/Feb/18 10:02,13/Jul/23 08:31,07/Feb/18 10:02,,,,,,,,,,,,,,,,2.21.0,,,,,camel-aws,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-02-07 09:54:56.0,,,,,,,,,,,"0|i3pw1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some RabbitMQ channels are never started when target queue doesn't exist during component startup,CAMEL-12229,13136276,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vbystricky,vbystricky,05/Feb/18 13:59,23/Aug/18 12:09,13/Jul/23 08:31,23/Aug/18 12:09,2.20.2,,,,,,,,,,,,,,,2.23.0,,,,,camel-rabbitmq,,,,,,0,,,,"Commit 8311af003ab888ca53a042ce5e9955b7cd5a845b reveals previously hidden bug.

*Steps to reproduce*:
 # configure rabbitmq consumer to connect to existing rabbitmq server but to non existing queue Q1
 # start rabbitmq consumer with several channels.
 # after some time create Q1 on target rabbitmq server

*Expected result*:

All channels are connected to  rabbitmq server and can consume messages from Q1

 

*Actual result*:

All channels are connected to  rabbitmq server and but only one channel can consume messages from Q1

 

Note:

Separation on channels creating and their starting causes that channels are not started in reconnect loop if  they were successfully created in createConsumer but not started in startConsumers().

 ",,davsclaus,dmvolod,githubbot,hveiga,vbystricky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 23 12:09:10 UTC 2018,,,,,,,,,,,"0|i3pst3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"07/Feb/18 08:42;davsclaus;You are welcome to attempt to work on a patch for this which you can also test with your rabbit mq broker;;;","09/Mar/18 08:18;davsclaus;Can you possible provide some details on how to create Q1 on the rabbitmq server. We have an instance running via Docker and the integration test suite we have runs automatic and have the queues auto-created. But if we can find a way to reproduce this either auto or manually it would be good to help track down and implement a fix for this.;;;","22/Aug/18 13:26;githubbot;davsclaus opened a new pull request #2491: CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…
URL: https://github.com/apache/camel/pull/2491
 
 
   …ting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/18 13:26;githubbot;GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2491

    CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…

    …ting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-12229

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2491.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2491
    
----
commit f081f6328c9559a32f9d8ae88c06c7cb7d168e58
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-08-22T13:26:13Z

    CAMEL-12229: camel-rabbitmq consumer should be more resilient on starting. There may be a situation where a connection is created but cannot be started, and then the reconnect logic would reconnect but not start the consumer. Now we have logic that calls the start method, and we leverage Camels ServiceSupport for lifecycle of start/stop.

----
;;;","22/Aug/18 13:26;davsclaus;Okay I looked at this a bit and have a potential fix in a PR
https://github.com/apache/camel/pull/2491

Feedback and review is welcome.;;;","23/Aug/18 12:08;githubbot;davsclaus closed pull request #2491: CAMEL-12229: camel-rabbitmq consumer should be more resilient on star…
URL: https://github.com/apache/camel/pull/2491
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","23/Aug/18 12:08;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2491
;;;","23/Aug/18 12:09;davsclaus;We have tried to fix this;;;",,,,,,,,,,,,,,,,,,,,,
Print command fails in case of multiple copies,CAMEL-12228,13136223,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dmvolod,rvanderhallen,rvanderhallen,05/Feb/18 09:24,06/Feb/18 06:50,13/Jul/23 08:31,06/Feb/18 06:50,2.18.1,2.19.0,2.20.0,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-printer,,,,,,0,,,,"When the printer component is configured to print multiple copies, two print jobs are created. The first one runs OK, the second one fails.

{code}
lpr://localhost/printer?copies=2&mediaSize=ISO_A4&flavor=DocFlavor.INPUT_STREAM
{code}

{code}
org.apache.camel.component.printer.PrinterOperations DEBUG Issuing Job 0 to Printer: printer
org.apache.camel.component.printer.PrinterOperations DEBUG Issuing Job 1 to Printer: printer
ERROR ID-47935-1516954952584-8-4
java.io.IOException: error=1 running: '/usr/bin/lpr' '-Pprinter' '-J file.pdf' '-#2' '-o media=A4 sides=one-sided' '/opt/tomcat/temp/javaprint7376295310894617090'
               /usr/bin/lpr: No file in print request.
javax.print.PrintException: java.io.IOException: error=1 running: '/usr/bin/lpr' '-PBriefing' '-J file.pdf' '-#2' '-o media=A4 sides=one-sided' '/opt/tomcat/temp/javaprint7376295310894617090'
               /usr/bin/lpr: No file in print request.
       at sun.print.UnixPrintJob$PrinterSpooler.run(UnixPrintJob.java:1017)
       at java.security.AccessController.doPrivileged(Native Method)
       at sun.print.UnixPrintJob.print(UnixPrintJob.java:608)
       at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:109)
       at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:99)
       at org.apache.camel.component.printer.PrinterProducer.print(PrinterProducer.java:57)
       at org.apache.camel.component.printer.PrinterProducer.process(PrinterProducer.java:51)
       at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
       at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:124)
       at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:436)
       at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:119)
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
       at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
       at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
       at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:827)
       at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:85)
       at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:320)
       at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:305)
       at java.util.concurrent.FutureTask.run(FutureTask.java:266)
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
       at java.lang.Thread.run(Thread.java:745)
{code}

The second job should not be created because the -#2 parameter in the lpr command already schedules the desired number of copies.",,davsclaus,dmvolod,githubbot,rvanderhallen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 06 06:50:42 UTC 2018,,,,,,,,,,,"0|i3pshb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"05/Feb/18 17:16;dmvolod;Yes, thanks [~rvanderhallen] for reporting. It's a bug, the [PrinterOperations.print|https://github.com/apache/camel/blob/664130ece8e23e137118e974158282d570d169c8/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java#L70] creates printing jobs which are equivalent to number of copies with -# num-copies parameters inside.

But we need to decide which strategy to use for fix: pass num of copies in a single job parameter or schedule a set of jobs as copies count with a num-copies=1. And this issue unable to reproduce without real or virtual PDF printer setup. [~davsclaus] what do you think about this?

 ;;;","05/Feb/18 17:30;rvanderhallen;[~dmvolod] In our use case, we need a single job with x number of copies. This defines a single unit of work and has to appear as one task on the print queue.;;;","05/Feb/18 20:12;davsclaus;I would rather let the printer know the number of copies in one job. That is how I see it would work normally. I wasn't aware of this loop. Also if we loop then we have the ""streaming problem"" where the message body may only be readable once. ;;;","05/Feb/18 20:32;githubbot;dmvolod opened a new pull request #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","05/Feb/18 20:32;githubbot;GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/2208

    CAMEL-12228: Print command fails in case of multiple copies

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-12228

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2208.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2208
    
----
commit 834679911b817fcc7c81e43b521e486a73dee637
Author: Dmitry Volodin <dmvolod@...>
Date:   2018-02-05T20:30:44Z

    CAMEL-12228: Print command fails in case of multiple copies

----
;;;","06/Feb/18 06:50;githubbot;oscerd commented on issue #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208#issuecomment-363327696
 
 
   Thanks for the PR. It has been merged on master,2.20.x and 2.19.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Feb/18 06:50;githubbot;oscerd closed pull request #2208: CAMEL-12228: Print command fails in case of multiple copies
URL: https://github.com/apache/camel/pull/2208
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
index 85cbd550535..5e7aecf2914 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterConfiguration.java
@@ -28,7 +28,7 @@
 import org.apache.camel.spi.UriParam;
 import org.apache.camel.spi.UriParams;
 import org.apache.camel.spi.UriPath;
-import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.StringHelper;
 import org.apache.camel.util.URISupport;
 
 @UriParams
@@ -85,8 +85,8 @@ public void parseURI(URI uri) throws Exception {
 
         // use path as printer name, but without any leading slashes
         String path = uri.getPath();
-        path = ObjectHelper.removeStartingCharacters(path, '/');
-        path = ObjectHelper.removeStartingCharacters(path, '\\');
+        path = StringHelper.removeStartingCharacters(path, '/');
+        path = StringHelper.removeStartingCharacters(path, '\\');
         setPrintername(path);
 
         Map<String, Object> printSettings = URISupport.parseParameters(uri);
diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
index 20750028627..bed8be27ab7 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterOperations.java
@@ -45,7 +45,7 @@
     private PrintRequestAttributeSet printRequestAttributeSet;
     private Doc doc;
 
-    public PrinterOperations() throws PrintException {        
+    public PrinterOperations() throws PrintException {
         printService = PrintServiceLookup.lookupDefaultPrintService();
         if (printService == null) {
             throw new PrintException(""Printer lookup failure. No default printer set up for this host"");
@@ -63,46 +63,42 @@ public PrinterOperations(PrintService printService, DocFlavor flavor, PrintReque
         this.setPrintRequestAttributeSet(printRequestAttributeSet);
     }
 
-    public void print(Doc doc, int copies, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {
+    public void print(Doc doc, boolean sendToPrinter, String mimeType, String jobName) throws PrintException {
         LOG.trace(""Print Service: "" + this.printService.getName());
-        LOG.trace(""About to print "" + copies + "" copy(s)"");
-        
-        for (int i = 0; i < copies; i++) {
-            if (!sendToPrinter) {
-                LOG.debug(""Print flag is set to false. This job will not be printed until this setting remains in effect.""
-                        + "" Please set the flag to true or remove the setting."");
-
-                File file;
-                if (mimeType.equalsIgnoreCase(""GIF"") || mimeType.equalsIgnoreCase(""RENDERABLE_IMAGE"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".gif"");
-                } else if (mimeType.equalsIgnoreCase(""JPEG"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".jpeg"");
-                } else if (mimeType.equalsIgnoreCase(""PDF"")) {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".pdf"");
-                } else {
-                    file = new File(""./target/TestPrintJobNo"" + i + ""_"" + UUID.randomUUID() + "".txt"");
-                }
-
-                LOG.debug(""Writing print job to file: "" + file.getAbsolutePath());
-                try {
-                    InputStream in = doc.getStreamForBytes();
-                    FileOutputStream fos = new FileOutputStream(file);
-                    IOHelper.copyAndCloseInput(in, fos);
-                    IOHelper.close(fos);
-                } catch (Exception e) {
-                    throw new PrintException(""Error writing Document to the target file "" + file.getAbsolutePath());
-                }    
+
+        if (!sendToPrinter) {
+            LOG.debug(""Print flag is set to false. This job will not be printed until this setting remains in effect."" + "" Please set the flag to true or remove the setting."");
+
+            File file;
+            if (mimeType.equalsIgnoreCase(""GIF"") || mimeType.equalsIgnoreCase(""RENDERABLE_IMAGE"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".gif"");
+            } else if (mimeType.equalsIgnoreCase(""JPEG"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".jpeg"");
+            } else if (mimeType.equalsIgnoreCase(""PDF"")) {
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".pdf"");
             } else {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug(""Issuing Job {} to Printer: {}"", i, this.printService.getName());
-                }
-                print(doc, jobName);
+                file = new File(""./target/PrintOutput_"" + UUID.randomUUID() + "".txt"");
+            }
+
+            LOG.debug(""Writing print job to file: "" + file.getAbsolutePath());
+            try {
+                InputStream in = doc.getStreamForBytes();
+                FileOutputStream fos = new FileOutputStream(file);
+                IOHelper.copyAndCloseInput(in, fos);
+                IOHelper.close(fos);
+            } catch (Exception e) {
+                throw new PrintException(""Error writing Document to the target file "" + file.getAbsolutePath());
             }
+        } else {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug(""Issuing Job to Printer: {}"", this.printService.getName());
+            }
+            print(doc, jobName);
         }
     }
-        
+
     public void print(Doc doc, String jobName) throws PrintException {
-        // we need create a new job for each print 
+        // we need create a new job for each print
         DocPrintJob job = getPrintService().createPrintJob();
         PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet(printRequestAttributeSet);
         attrs.add(new JobName(jobName, Locale.getDefault()));
@@ -116,7 +112,7 @@ public PrintService getPrintService() {
     public void setPrintService(PrintService printService) {
         this.printService = printService;
     }
-    
+
     public DocFlavor getFlavor() {
         return flavor;
     }
diff --git a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
index ea8fd99c872..7e69aa7759b 100644
--- a/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
+++ b/components/camel-printer/src/main/java/org/apache/camel/component/printer/PrinterProducer.java
@@ -53,8 +53,8 @@ public void process(Exchange exchange) throws Exception {
     
     private void print(InputStream body, String jobName) throws PrintException { 
         if (printerOperations.getPrintService().isDocFlavorSupported(printerOperations.getFlavor())) {
-            PrintDocument printDoc = new PrintDocument(body, printerOperations.getFlavor());        
-            printerOperations.print(printDoc, config.getCopies(), config.isSendToPrinter(), config.getMimeType(), jobName); 
+            PrintDocument printDoc = new PrintDocument(body, printerOperations.getFlavor());
+            printerOperations.print(printDoc, config.isSendToPrinter(), config.getMimeType(), jobName); 
         }
     }
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Feb/18 06:50;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2208
;;;",,,,,,,,,,,,,,,,,,,,,
ResrSwaggerServlet removes last part of context root,CAMEL-12222,13135655,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dariusx,dariusx,02/Feb/18 00:53,13/Feb/18 14:32,13/Jul/23 08:31,13/Feb/18 14:32,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-swagger,,,,,,0,,,,"The method within RestSwaggerServlet, looks for the last ""/"" in the context root, and drops anything after that slash.
{code:java}
private String translateContextPath(HttpServletRequest request) {
  String path = request.getContextPath();
  if (path.isEmpty() || path.equals(""/"")) {
      return """";
  } else {
     int idx = path.lastIndexOf(""/"");
     if (idx > 0) {
         return path.substring(0, idx);
     }
  }
  return path;
}{code}
Even though this has been deprecated, it would be good to fix it. 

An approach could be to add a servlet init parameter named ""translateContextPath"" which would default to true, and would work exactly as it does today by default. if set to false, it would return whatever value is in request.getContextPath() , with no translation.

Also, to avoid the NPE thrown, pass in an empty RestConfiguration to RestSwaggerSupport.renderResourceListing() 

(See: https://issues.apache.org/jira/browse/CAMEL-12038) 

I plan on working on this. Creating a Jira to get feedback on the approach",,dariusx,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 13 14:32:13 UTC 2018,,,,,,,,,,,"0|i3pozb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"11/Feb/18 17:37;githubbot;DariusX opened a new pull request #2220: CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…
URL: https://github.com/apache/camel/pull/2220
 
 
   Added an option to suppress ""translateContextPath""
   Also, added a fix to allow this class to be used in the 2.20.1 version, even though it is deprecated

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","11/Feb/18 17:37;githubbot;GitHub user DariusX opened a pull request:

    https://github.com/apache/camel/pull/2220

    CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…

    Added an option to suppress ""translateContextPath""
    Also, added a fix to allow this class to be used in the 2.20.1 version, even though it is deprecated

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DariusX/camel CAMEL-12222-Rest-Swagger-Context

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2220.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2220
    
----
commit ec87c965f92ca04e874bae115f16f01c5034985e
Author: realistTheorist <realisttheorist@...>
Date:   2018-02-11T17:35:22Z

    CAMEL-12222: RestSwaggerServlet - added option to suppress ""translateContextPath""

----
;;;","13/Feb/18 14:27;githubbot;davsclaus closed pull request #2220: CAMEL-12222: RestSwaggerServlet - added option to suppress ""translate…
URL: https://github.com/apache/camel/pull/2220
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
index 51ca3d2e0d7..15f9d001627 100644
--- a/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
+++ b/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/servlet/RestSwaggerServlet.java
@@ -34,6 +34,7 @@
 import org.apache.camel.Exchange;
 import org.apache.camel.impl.DefaultClassResolver;
 import org.apache.camel.spi.ClassResolver;
+import org.apache.camel.spi.RestConfiguration;
 import org.apache.camel.swagger.RestApiResponseAdapter;
 import org.apache.camel.swagger.RestSwaggerSupport;
 import org.apache.camel.util.EndpointHelper;
@@ -61,6 +62,19 @@
 
     private String apiContextIdPattern;
     private boolean apiContextIdListing;
+    private boolean translateContextPath = true;
+
+
+    public boolean isTranslateContextPath() { return translateContextPath; }
+
+    /**
+     * Sets whether the context path of the request should be translated (true) or used as-is (false)
+     * Optional, Defaults to true
+     * @param translateContextPath
+     */
+    public void setTranslateContextPath(boolean translateContextPath) { this.translateContextPath = translateContextPath; }
+
+
 
     public String getApiContextIdPattern() {
         return apiContextIdPattern;
@@ -115,6 +129,11 @@ public void init(final ServletConfig config) throws ServletException {
         if (listing != null) {
             apiContextIdListing = Boolean.valueOf(listing.toString());
         }
+        Object translate = parameters.remove(""translateContextPath"");
+        if (translate != null) {
+            translateContextPath = Boolean.valueOf(translate.toString());
+        }
+
     }
 
     @Override
@@ -192,7 +211,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response) t
                 if (!match) {
                     adapter.noContent();
                 } else {
-                    support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, classResolver, null);
+                    support.renderResourceListing(adapter, swaggerConfig, name, route, json, yaml, classResolver, new RestConfiguration());
                 }
             }
         } catch (Exception e) {
@@ -229,6 +248,9 @@ private void initBaseAndApiPaths(HttpServletRequest request) throws MalformedURL
      */
     private String translateContextPath(HttpServletRequest request) {
         String path = request.getContextPath();
+        if (!translateContextPath) {
+            return path;
+        }
         if (path.isEmpty() || path.equals(""/"")) {
             return """";
         } else {
@@ -240,4 +262,4 @@ private String translateContextPath(HttpServletRequest request) {
         return path;
     }
 
-}
+}
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","13/Feb/18 14:27;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2220
;;;","13/Feb/18 14:32;davsclaus;Thanks for the PR.

I fixed the checkstyle issue

http://camel.apache.org/building.html;;;",,,,,,,,,,,,,,,,,,,,,,,,
End of HL7 Message not always detected correctly,CAMEL-12210,13134525,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,29/Jan/18 18:45,29/Jan/18 23:00,13/Jul/23 08:31,29/Jan/18 23:00,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"The MllpTcpServerConsumer is not always detecting the end of the MLLP envelope correctly, resulting in unpredictable route behavior (empty messages being delivered to route, exceptions generating acknowledgments, etc).",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 29 23:00:20 UTC 2018,,,,,,,,,,,"0|i3pi0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Jan/18 23:00;hqstevenson;Resolved w/commit c8f24cac46f9c4a02a869597a0e7ba03565aa9fd;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mllp - Fix IndexOutOfBounds exception when generating acknowledgment,CAMEL-12200,13134049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,26/Jan/18 16:49,29/Jan/18 18:39,13/Jul/23 08:31,29/Jan/18 18:39,,,,,,,,,,,,,,,,2.21.0,,,,,camel-mllp,,,,,,0,,,,"Under certain circumstances, generating acknowledgements will fail with an IndexOutOfBounds exception.",,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 29 18:39:23 UTC 2018,,,,,,,,,,,"0|i3pf33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"29/Jan/18 18:39;hqstevenson;fixed w/commit c7c9ea1d26011e24ccdd4aa84219625d41a56584;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mock endpoint - message().body().matches().simple - Does not work,CAMEL-12196,13133992,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jan/18 11:57,26/Jan/18 13:03,13/Jul/23 08:31,26/Jan/18 13:03,2.19.4,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-core,,,,,,0,,,,"Reported on gitter

https://gitter.im/apache/apache-camel?at=5a6604ab5ade18be39aa9ca7",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-01-26 11:57:28.0,,,,,,,,,,,"0|i3peqn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThrowException DSL should support no-arg constructors,CAMEL-12193,13133625,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jan/18 08:46,25/Jan/18 09:05,13/Jul/23 08:31,25/Jan/18 09:05,,,,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-core,,,,,,0,,,,"If you do 

<throwException exceptionType=""java.lang.IllegalArgumentException""/>

Then it because a null exception",,davsclaus,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-01-25 08:46:32.0,,,,,,,,,,,"0|i3pchb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Signature: '#' missing in ObjectReference attribute of XADES element DataObjectFormat,CAMEL-12181,13133052,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,23/Jan/18 13:32,01/Feb/18 09:02,13/Jul/23 08:31,01/Feb/18 09:02,2.18.5,2.19.4,2.20.1,,,,,,,,,,,,,2.19.5,2.20.3,2.21.0,,,camel-xmlsecurity,,,,,,0,,,,"If you create an XML Signature with a XADES element DataObjectFormat then you get currently an XML which is similar as shown in the following snippet:

<ds:Reference Id=""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"" URI=""#_4dccda23-2c67-487b-b7f2-30188bb089f7"">
...
 </ds:Reference>

...

{color:#000000}<etsi:DataObjectFormat ObjectReference=""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"">{color}

{color:#000000}        …{color}

{color:#000000}</etsi:DataObjectFormat>{color}

 

{color:#000000}The ObjectReference value ""_1a612e6b-0da6-4695-a8f7-d189a47a7e05"" is not a valid URI. The  character '#' is missing at the beginning of the value{color}",,forsthofer,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 01 08:53:40 UTC 2018,,,,,,,,,,,"0|i3p8yf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"31/Jan/18 06:58;githubbot;GitHub user forsthofer opened a pull request:

    https://github.com/apache/camel/pull/2203

    CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute 

    of XADES element DataObjectFormat

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/forsthofer/camel CAMEL-12181

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2203.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2203
    
----
commit e983854ebae91beabaf6b6c969bc76a53692d14d
Author: Franz Forsthofer <franz.forsthofer@...>
Date:   2018-01-31T06:56:23Z

    CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute of
    XADES element DataObjectFormat

----
;;;","01/Feb/18 08:53;githubbot;davsclaus closed pull request #2203: CAMEL-12181: XML Signature: '#' missing in ObjectReference attribute 
URL: https://github.com/apache/camel/pull/2203
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
index 06ef1c7c9e3..da263dd9847 100644
--- a/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
+++ b/components/camel-xmlsecurity/src/main/java/org/apache/camel/component/xmlsecurity/api/XAdESSignatureProperties.java
@@ -740,7 +740,7 @@ protected String addDataObjectFormat(Element signedDataObjectProperties, Documen
         Element dataObjectFormat = createElement(""DataObjectFormat"", doc, input);
         signedDataObjectProperties.appendChild(dataObjectFormat);
         String contentReferenceId = ""_"" + UUID.randomUUID().toString();
-        setAttribute(dataObjectFormat, ""ObjectReference"", contentReferenceId);
+        setAttribute(dataObjectFormat, ""ObjectReference"", ""#"" + contentReferenceId);
 
         if (getDataObjectFormatDescription() != null && !getDataObjectFormatDescription().isEmpty()) {
             Element description = createElement(""Description"", doc, input);
diff --git a/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java b/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
index 5a75256c0b0..eb64c1afd3c 100644
--- a/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
+++ b/components/camel-xmlsecurity/src/test/java/org/apache/camel/component/xmlsecurity/XAdESSignaturePropertiesTest.java
@@ -223,6 +223,7 @@ public void envelopingAllParameters() throws Exception {
         //DataObjectFormat
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:Description/text()"", prefix2Namespace, ""invoice"");
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:MimeType/text()"", prefix2Namespace, ""text/xml"");
+        checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/@ObjectReference"", prefix2Namespace, ""#"", true);
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/text()"",
                 prefix2Namespace, ""1.2.840.113549.1.9.16.6.2"");
         checkXpath(doc, pathToDataObjectProperties + ""etsi:DataObjectFormat/etsi:ObjectIdentifier/etsi:Identifier/@Qualifier"",
@@ -834,11 +835,18 @@ private void validateAgainstSchema(Document doc) throws Exception {
 
     static void checkXpath(Document doc, String xpathString, final Map<String, String> prefix2Namespace, String expectedResult)
         throws XPathExpressionException {
+        checkXpath(doc, xpathString, prefix2Namespace, expectedResult, false);
+    }
+        
+   static void checkXpath(Document doc, String xpathString, final Map<String, String> prefix2Namespace, String expectedResult, boolean startsWith)
+            throws XPathExpressionException {
 
         XPathExpression expr = getXpath(xpathString, prefix2Namespace);
         String result = (String) expr.evaluate(doc, XPathConstants.STRING);
         assertNotNull(""The xpath "" + xpathString + "" returned a null value"", result);
-        if (NOT_EMPTY.equals(expectedResult)) {
+        if (startsWith) {
+            assertTrue(result.startsWith(expectedResult));
+        } else if (NOT_EMPTY.equals(expectedResult)) {
             assertTrue(""Not empty result for xpath "" + xpathString + "" expected"", !result.isEmpty());
         } else {
             assertEquals(expectedResult, result);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Feb/18 08:53;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2203
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Dropbox /search and /get are not working,CAMEL-12176,13132780,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eximius,eximius,22/Jan/18 16:06,02/Feb/18 14:36,13/Jul/23 08:31,02/Feb/18 09:51,2.20.1,,,,,,,,,,,,,,,2.20.3,2.21.0,,,,camel-dropbox,,,,,,0,,,,"First of all, [documentation|https://github.com/apache/camel/blob/master/components/camel-dropbox/src/main/docs/dropbox-component.adoc] states that ""query"" property in ""search"" operation is not mandatory, but:
{code:java}
from(""direct:dropboxSearch"").to(""dropbox://search?remotePath=/&accessToken={{dropbox.key}}""){code}
throws:
{code:java}
java.lang.IllegalArgumentException: Required value for 'query' is null
 at com.dropbox.core.v2.files.SearchArg.<init>(SearchArg.java:59) ~[dropbox-core-sdk-3.0.4.jar:na]
 at com.dropbox.core.v2.files.SearchArg.<init>(SearchArg.java:93) ~[dropbox-core-sdk-3.0.4.jar:na]
 at com.dropbox.core.v2.files.DbxUserFilesRequests.search(DbxUserFilesRequests.java:2416) ~[dropbox-core-sdk-3.0.4.jar:na]
 at org.apache.camel.component.dropbox.core.DropboxAPIFacade.search(DropboxAPIFacade.java:270) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.component.dropbox.integration.producer.DropboxSearchProducer.process(DropboxSearchProducer.java:43) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370) [camel-core-2.20.1.jar:2.20.1]{code}
On the other hand, when I put query=* like this:
{code:java}
from(""direct:dropboxSearch"").to(""dropbox://search?remotePath=/&query=*&accessToken={{dropbox.key}}""){code}
it throws:
{code:java}
org.apache.camel.component.dropbox.util.DropboxException: / does not exist or can't obtain metadata
 at org.apache.camel.component.dropbox.core.DropboxAPIFacade.search(DropboxAPIFacade.java:283) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.component.dropbox.integration.producer.DropboxSearchProducer.process(DropboxSearchProducer.java:43) ~[camel-dropbox-2.20.1.jar:2.20.1]
 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161) [camel-core-2.20.1.jar:2.20.1]
 at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370) [camel-core-2.20.1.jar:2.20.1]
 
{code}
 

Additionally, the same exception is thrown when I try to download *anything* using:
{code:java}
from(""direct:dropboxGet"")
 .to(""dropbox://get?remotePath=/&accessToken={{dropbox.key}}"");{code}
 

Dropbox:put is working without any problems...",,davsclaus,eximius,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 14:36:58 UTC 2018,,,,,,,,,,,"0|i3p7a7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"02/Feb/18 09:51;davsclaus;Maybe you cannot use the root path for remotePath. I have added the caused exception in the stacktrace in the future so you can see the error from dropbox itself.

The doc has been fixed also.;;;","02/Feb/18 13:41;eximius;[~davsclaus], what I learnt from using pure dropbox API is that indeed, you can not use ""/"", but you can access ""root"" using empty string """".

Therefore I'm using this simple method just before I pass path to Dropbox:
{code:java}
private String cleanPath(final String path) {
   return ""/"".equals(path) ? StringUtils.EMPTY : path; //dropbox workaround
}
{code}
I think it would be much better to use this approach instead of force users to wonder ""how the heck I can access root folder"";;;","02/Feb/18 14:36;davsclaus;Kamil, ah thanks.

If  you want to try you are welcome to provide this code in a github PR

[http://camel.apache.org/contributing]

If not then we can also fix it ourselves, but its a good way to learn how to  contribute to Apache Camel if you want to try.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Websocket Karaf feature installs bundles with different version of Jetty (9.4 and 9.3),CAMEL-12157,13131880,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,18/Jan/18 13:20,18/Jan/18 13:31,13/Jul/23 08:31,18/Jan/18 13:31,,,,,,,,,,,,,,,,2.21.0,,,,,karaf,,,,,,0,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-01-18 13:20:08.0,,,,,,,,,,,"0|i3p2av:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to invoke camel cxfrs client due to Content-Type header couldn't be retrieved and passed,CAMEL-12149,13131489,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,17/Jan/18 07:46,18/Jan/18 09:55,13/Jul/23 08:31,18/Jan/18 09:55,2.19.4,2.20.1,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-cxfrs,,,,,,0,,,,"As of Camel 2.19.x, async support is added by default in the CxfRsProducer. Considering this simple rsClient:
{code:java}
<camel-cxf:rsClient id=""restClient""
        address=""http://localhost:8040/services/eventlogging/events"" serviceClass=""org.talend.esb.eventlogging.sender.rest.EventLogging""
        loggingFeatureEnabled=""true"">
    <camel-cxf:providers>
        <ref component-id=""jsonProvider"" />
    </camel-cxf:providers>

    <camel-cxf:headers>
         <entry key=""Content-Encoding"" value=""UTF-8"" />
         <entry key=""Content-Type"" value=""application/json"" />
    </camel-cxf:headers>
</camel-cxf:rsClient>

<camel:camelContext>

    <camel:route>
        <camel:from uri=""timer://foo?repeatCount=1"" />

        <camel:process ref=""marshallingPreparationProcessor"" />

        <camel:to uri=""cxfrs://bean://restClient"" />
    </camel:route>

</camel:camelContext>{code}
It works well with the right Content-Type setting in Camel 2.17.x/Camel.2.18.x, but the Content-Type will be wildcard and ""No message body writer has been found ..."" will be thrown when invoke the restClient in Camel 2.19.x/2.20.x.
{code:java}
----------------------------
ID: 1
Address: http://localhost:8040/services/eventlogging/events
Http-Method: POST
Content-Type: */*
Headers: {Content-Encoding=[UTF-8], Content-Type=[*/*], Content-Language=[en_US], Accept=[*/*]}
--------------------------------------
[mel-1) thread #0 - timer://foo] CxfRsProducer                  ERROR Failed request
javax.ws.rs.ProcessingException: No message body writer has been found for class org.talend.esb.eventlogging.sender.rest.EventList
, ContentType: */*
        at org.apache.cxf.jaxrs.client.AbstractClient.reportMessageHandlerProblem(AbstractClient.java:810)
        at org.apache.cxf.jaxrs.client.AbstractClient.writeBody(AbstractClient.java:497)
        at org.apache.cxf.jaxrs.client.WebClient$BodyWriter.doWriteBody(WebClient.java:1178)
        at org.apache.cxf.jaxrs.client.AbstractClient$AbstractBodyWriter.handleMessage(AbstractClient.java:1174)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
        at org.apache.cxf.jaxrs.client.AbstractClient.doRunInterceptorChain(AbstractClient.java:677)
        at org.apache.cxf.jaxrs.client.WebClient.doInvokeAsync(WebClient.java:952)
        at org.apache.cxf.jaxrs.client.WebClient.doInvokeAsyncCallback(WebClient.java:915)
        at org.apache.cxf.jaxrs.client.WebClient$AsyncInvokerImpl.method(WebClient.java:1440)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeAsyncHttpClient(CxfRsProducer.java:175)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:116){code}
([https://github.com/xldai/test/tree/master/test-cxfrs] is created for easily reproduce this issue)

A PR is created for fixing this issue.",,davsclaus,githubbot,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 18 09:55:42 UTC 2018,,,,,,,,,,,"0|i3ozwv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"17/Jan/18 07:49;githubbot;xldai opened a new pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Jan/18 07:49;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/2179

    fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2179.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2179
    
----
commit 7cb52a1c658439ce9b1f46199db005ee3a98efc2
Author: xldai <xldai@...>
Date:   2018-01-17T07:47:46Z

    fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved

----
;;;","17/Jan/18 07:52;githubbot;davsclaus commented on a change in pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#discussion_r161976364
 
 

 ##########
 File path: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
 ##########
 @@ -164,6 +164,12 @@ protected void invokeAsyncHttpClient(Exchange exchange, final AsyncCallback call
         setupClientMatrix(client, exchange);
         setupClientQueryAndHeaders(client, exchange);
 
+        // ensure the CONTENT_TYPE header can be retrieved
 
 Review comment:
   We have the `null` on the other side as out standard with the Apache Camel code. Do you mind flipping them around.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Jan/18 07:57;githubbot;oscerd commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358225657
 
 
   Can't we use ObjectHelper?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Jan/18 07:59;githubbot;davsclaus commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358226089
 
 
   Yeah ObjectHelper.isEmpty would also check for an empty string, however not sure if you would have a Content-Type header that would be a `""""`. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Jan/18 02:20;githubbot;xldai commented on issue #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179#issuecomment-358516398
 
 
   Claus, I made minor changes by using ObjectHelper, is that OK? or other concerns you may have?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Jan/18 09:52;githubbot;davsclaus closed pull request #2179: fix CAMEL-12149 ensure the CONTENT_TYPE header can be retrieved
URL: https://github.com/apache/camel/pull/2179
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
index 50aece0fd8c..4a1d3d333ca 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
@@ -164,6 +164,12 @@ protected void invokeAsyncHttpClient(Exchange exchange, final AsyncCallback call
         setupClientMatrix(client, exchange);
         setupClientQueryAndHeaders(client, exchange);
 
+        // ensure the CONTENT_TYPE header can be retrieved
+        if (ObjectHelper.isEmpty(inMessage.getHeader(Exchange.CONTENT_TYPE, String.class)) &&
+                ObjectHelper.isNotEmpty(client.getHeaders().get(Exchange.CONTENT_TYPE))) {
+            inMessage.setHeader(Exchange.CONTENT_TYPE, client.getHeaders().get(Exchange.CONTENT_TYPE).get(0));
+        }
+
         //Build message entity
         Entity<Object> entity = binding.bindCamelMessageToRequestEntity(body, inMessage, exchange);
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","18/Jan/18 09:52;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2179
;;;","18/Jan/18 09:55;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,
camel-saxon - dump namespaces may cause a ClassCastException,CAMEL-12136,13130475,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Jan/18 09:49,12/Jan/18 13:47,13/Jul/23 08:31,12/Jan/18 13:47,,,,,,,,,,,,,,,,2.21.0,,,,,camel-saxon,,,,,,0,,,,"Noticed this from the test logs

2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - ********************************************************************************
2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - Testing: testSpringDSLXPathSaxonFlag(org.apache.camel.language.xpath.XPathLanguageTest)
2018-01-12 10:43:29,972 [main           ] INFO  XPathLanguageTest              - ********************************************************************************
2018-01-12 10:43:30,126 [main           ] INFO  SpringCamelContext             - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-7) is starting
2018-01-12 10:43:30,126 [main           ] INFO  DefaultManagementStrategy      - JMX is disabled
2018-01-12 10:43:30,129 [main           ] INFO  DefaultTypeConverter           - Type converters loaded (core: 193, classpath: 5)
2018-01-12 10:43:30,144 [main           ] INFO  SpringCamelContext             - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-12 10:43:30,146 [main           ] INFO  XPathBuilder                   - Using objectModelUri http://saxon.sf.net/jaxp/xpath/om when created XPathFactory net.sf.saxon.xpath.XPathFactoryImpl@6b63e6ad
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route13 started and consuming from: direct://testSaxonWithFlag
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route14 started and consuming from: direct://testSaxonWithFactory
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route15 started and consuming from: direct://testSaxonWithFlagPredicate
2018-01-12 10:43:30,147 [main           ] INFO  SpringCamelContext             - Route: route16 started and consuming from: direct://testSaxonWithFactoryPredicate
2018-01-12 10:43:30,148 [main           ] INFO  SpringCamelContext             - Total 4 routes, of which 4 are started
2018-01-12 10:43:30,148 [main           ] INFO  SpringCamelContext             - Apache Camel 2.21.0-SNAPSHOT (CamelContext: camel-7) started in 0.022 seconds
2018-01-12 10:43:30,149 [main           ] INFO  XPathBuilder                   - Using objectModelUri http://saxon.sf.net/jaxp/xpath/om when created XPathFactory net.sf.saxon.xpath.XPathFactoryImpl@17410c07
2018-01-12 10:43:30,149 [main           ] INFO  XPathBuilder                   - Creating new XPath expression in pool. Namespaces on XPath expression: [me: {system -> http://camel.apache.org/xml/variables/system-properties},{in -> http://camel.apache.org/xml/in/},{function -> http://camel.apache.org/xml/function/},{env -> http://camel.apache.org/xml/variables/environment-variables},{out -> http://camel.apache.org/xml/out/},{xsi -> http://www.w3.org/2001/XMLSchema-instance}], [parent: net.sf.saxon.xpath.JAXPXPathStaticContext$MinimalNamespaceContext@6ee99964]
2018-01-12 10:43:30,156 [main           ] WARN  XPathBuilder                   - Unable to trace discovered namespaces in XPath expression
java.lang.ClassCastException: java.util.ArrayList cannot be cast to org.w3c.dom.NodeList
	at org.apache.camel.builder.xml.XPathBuilder.logNamespaces(XPathBuilder.java:885) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:847) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:819) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:181) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.SetBodyProcessor.process(SetBodyProcessor.java:49) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
	at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53) [camel-core-2.21.0-SNAPSHOT.jar:2.21.0-SNAPSHOT]
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2018-01-12 09:49:01.0,,,,,,,,,,,"0|i3oufj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot: two camel contexts created when using xml configuration,CAMEL-12134,13129821,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,10/Jan/18 11:14,11/Jan/18 07:35,13/Jul/23 08:31,10/Jan/18 13:21,2.20.0,2.20.1,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-spring-boot,,,,,,0,,,,"When running the camel-example-spring-boot-xml, or any spring-boot camel application using xml route definition, camel seems to create 2 contexts.

It seems to happen only when using spring xml routes.

The second one has no routes. Camel fails to register it to jmx and adds a ""-1"" to its name.

{code}
a.c.m.DefaultManagementLifecycleStrategy : This CamelContext(SampleCamel) will be registered using the name: SampleCamel-1 due to clash with an existing name already registered in MBeanServer.
{code}

The relevant parts of the trace:

{code}
2018-01-10 12:00:26.538  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) is starting
2018-01-10 12:00:26.539  INFO 11245 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-01-10 12:00:26.700  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-10 12:00:26.740  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: hello started and consuming from: timer://hello?period=2000
2018-01-10 12:00:26.742  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 1 routes, of which 1 are started
2018-01-10 12:00:26.743  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) started in 0.204 seconds
2018-01-10 12:00:26.757  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) is starting
2018-01-10 12:00:26.757  INFO 11245 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2018-01-10 12:00:26.757  WARN 11245 --- [           main] a.c.m.DefaultManagementLifecycleStrategy : This CamelContext(SampleCamel) will be registered using the name: SampleCamel-1 due to clash with an existing name already registered in MBeanServer.
2018-01-10 12:00:26.762  INFO 11245 --- [           main] o.a.c.i.converter.DefaultTypeConverter   : Type converters loaded (core: 193, classpath: 1)
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 0 routes, of which 0 are started
2018-01-10 12:00:26.770  INFO 11245 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.21.0-SNAPSHOT (CamelContext: SampleCamel) started in 0.013 seconds
{code}",,kalusn,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 11 07:35:12 UTC 2018,,,,,,,,,,,"0|i3oqh3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jan/18 12:57;nferraro;This was probably introduced with CAMEL-11752, in https://github.com/apache/camel/blob/4f65a942465d82acea52a5012c00bec81d1183e6/components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java#L452-L463.

We call the configurer from within the context creation, but if the configurer finds CamelContextAware beans in the registry, the CamelBeanPostProcessor looks up the CamelContext from the registry again, resulting in another creation.

Splitting creation from initialization may solve the issue.;;;","10/Jan/18 14:07;kalusn;We experienced the same issue at our organization, and I came here to make the issue until I found out someone had already created it. Nice!

The issue showed itself to us when injecting a ProducerTemplate in a bean after injecting a CamelContext. The ProducerTemplate would then have a reference to the wrong (contextName-1) camelContext. Ironically, making sure that the CamelContext is injected *after* the ProducerTemplate solves the issue when working with Camel 2.20.1.

I'll try out your patch and ensure it solves the issue.;;;","10/Jan/18 14:38;kalusn;I can confirm that the patch solves the problem with a ProducerTemplate having a ""dead"" CamelContext attached.;;;","11/Jan/18 07:35;nferraro;Thank you [~kalusn]! Version 2.20.2 is expected to be released shortly (next week most probably).;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"CacheProducer should not put services in Camel context, that are not singletons and are not ServicePoolAware",CAMEL-12131,13129507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rgala,rgala,09/Jan/18 12:04,10/Jan/18 14:02,13/Jul/23 08:31,10/Jan/18 14:02,,,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,,camel-core,,,,,,0,,,,"When the org.apache.camel.impl.ProducerCache *doGetProducer* method is called from *org.apache.camel.processor.SendProcessor's doStart()* method, it will create new instance of a Producer, and put it into Camel context by calling *getCamelContext().addService(answer, false);*. However, it will not put the object into producers or the pool map, because it is not ServicePoolAware and is not a singleton. This results in a service that will later be started by *DeferServiceStartupListener* and will stay started until the whole context is closed. 

{code:java}
    protected synchronized Producer doGetProducer(Endpoint endpoint, boolean pooled) {
        String key = endpoint.getEndpointUri();
        Producer answer = producers.get(key);
        if (pooled && answer == null) {
            // try acquire from connection pool
            answer = pool.acquire(endpoint);
        }

        if (answer == null) {
            // create a new producer
            try {
                answer = endpoint.createProducer();
                // add as service which will also start the service
                // (false => we and handling the lifecycle of the producer in this cache)
                getCamelContext().addService(answer, false);
            } catch (Throwable e) {
                throw new FailedToCreateProducerException(endpoint, e);
            }

            // add producer to cache or pool if applicable
            if (pooled && answer instanceof ServicePoolAware) {
                LOG.debug(""Adding to producer service pool with key: {} for producer: {}"", endpoint, answer);
                answer = pool.addAndAcquire(endpoint, answer);
            } else if (answer.isSingleton()) {
                LOG.debug(""Adding to producer cache with key: {} for producer: {}"", endpoint, answer);
                producers.put(key, answer);
            }
        }

        if (answer != null) {
            // record statistics
            if (extendedStatistics) {
                statistics.onHit(key);
            }
        }

        return answer;
    }

{code}

Here is the part of *doStart()* method from *SendProcessor* class. The producer is acquired and after that is immediately released in *ProducerCache*, however it is not removed from Camel context and stays there as a Service and will later by started by *DeferServiceStartupListener*

{code:java}
        Producer producer = producerCache.acquireProducer(destination);
        if (producer instanceof ServicePoolAware || !producer.isSingleton()) {
            // no we cannot optimize it - so release the producer back to the producer cache
            // and use the producer cache for sending
            producerCache.releaseProducer(destination, producer);
        } else {
            // yes we can optimize and use the producer directly for sending
            this.producer = AsyncProcessorConverterHelper.convert(producer);
        }
{code}




",,davsclaus,rgala,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 10 12:40:39 UTC 2018,,,,,,,,,,,"0|i3oojb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"10/Jan/18 12:24;davsclaus;Do you have a custom component or what use-case do you have for a producer that is neither singleton, nor service poll aware?;;;","10/Jan/18 12:31;rgala;This issue occurs for me on jt400 component used as destination endpoint (Jt400Endpoint class). It uses Jt400PgmProducer class as a producer.
;;;","10/Jan/18 12:40;davsclaus;Ah thanks, yeah that component is a bit unusual, ideally it should have been implemented a bit different so the endpoint could be singleton and producers thread-safe or something.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Http proxy support uses two inconsistent methods and is broken,CAMEL-12123,13128505,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,mabroukb,mabroukb,04/Jan/18 14:32,27/Feb/18 13:38,13/Jul/23 08:31,27/Feb/18 13:38,2.20.1,,,,,,,,,,,,,,,2.21.0,,,,,camel-salesforce,,,,,,0,proxy,salesforce,,"in the SalesforceComponent class, there is two ways to configure a http proxy :
- using  setHttpProxyHost method and others alike
- using httpClientProperties map with proxy keys (HTTP_PROXY_HOST and others ...)

but instance variables set by setHttpProxyXXX methods are not used and should be considered as dead code. 
one can have a look at the setupHttpClient() method to figure out that the proxy variables are not used, but only the properties map is.

This bug was discovered while proceeding to an upgrade from 2.19.x to 2.20.1.
",,mabroukb,ricardozanini,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 27 13:38:59 UTC 2018,,,,,,,,,,,"0|i3oien:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,"08/Jan/18 12:38;ricardozanini;I could work on this. Waiting for triage. :);;;","27/Feb/18 13:38;zregvart;Fixed to take both methods of configuring HTTP proxy under consideration.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ErrorHandler is closed after failure in RoutingSlip ,CAMEL-12120,13128293,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sycyhy,sycyhy,03/Jan/18 19:04,05/Jan/18 11:41,13/Jul/23 08:31,04/Jan/18 18:52,2.18.0,2.18.1,2.18.2,2.18.3,2.18.4,2.18.5,2.19.0,2.19.1,2.19.2,2.19.3,2.19.4,2.19.5,2.20.0,2.20.1,2.20.2,2.21.0,,,,,camel-core,,,,,,0,,,,"It seems that if further down the line after {{RoutingSlip}} or {{DynamicRouter}} there is a failure in a Route {{ErrorHandler}} always will be closed. 

This results in a situation where if similar route defined in the same place will fail - there won't be any errorHandler opened and we will get 

{{New exception occurred during processing by the DeadLetterChannel due SendProcessor has not been started: sendTo(mock://result)}}

Test case which shows the problems in attachment.
 
Problem started occurring after release 2.18.0 - responsible commit {{7c4dd0b4f6ecd4840e4ccdbf1d7c28f2e8cb5691}} 

I was looking for some workarounds/solutions but nothing comes to mind yet so any ideas are welcomed :)

",,davsclaus,sycyhy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10048,,"03/Jan/18 18:46;sycyhy;TestCase.java;https://issues.apache.org/jira/secure/attachment/12904444/TestCase.java",,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 05 11:41:14 UTC 2018,,,,,,,,,,,"0|i3oh3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"04/Jan/18 18:52;davsclaus;Thanks for reporting and the test-case.

This took a bit longer to fix but we now have a better solution. As its a bit of code change we will keep this change for master branch only.;;;","05/Jan/18 08:59;sycyhy;No problem  [~davsclaus]  and thanks for such a fast fix.

So I'm assuming it's only gonna be in release 2.21.0 because it's only on master. It is expected for Q1 2018 as far I can see :) - do you guys have any specific month in mind?:)
;;;","05/Jan/18 11:41;davsclaus;Not yet its to early to tell. When we get closer to a release its discussed on the Camel @dev mailing list.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Reconnect doesn't work if camel is started with rabbit broker initially inaccessible and automaticRecoveryEnabled=true or not set,CAMEL-12111,13128065,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jisikoff,jisikoff,02/Jan/18 20:09,06/Jan/18 12:03,13/Jul/23 08:31,06/Jan/18 12:03,2.20.1,,,,,,,,,,,,,,,2.20.2,2.21.0,,,,camel-rabbitmq,,,,,,0,,,,"Starting a camel rabbit consumer with the rabbitmq broker down and then bringing the broker up used to work before 2.20.1 with automaticRecoveryEnabled=true.  

The logic added in line 298 of the RabbitConsumer and line 301 now only will recover in the case if automaticRecoveryEnabled=false by allowing it through to line 303 and opening a connection for the FIRST TIME.  

 In addition line 298 null pointers on '&& null' if automaticRecoveryEnabled wasn't specified at all.

https://github.com/apache/camel/blob/bad9ed4bb2ce1e258039d96ac80c71a746b0520d/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java#L298

As of now you can not have automaticRecoveryEnabled either not set or true and handle have camel work in the startup with broker down and then up use case.",,davsclaus,githubbot,jisikoff,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 06 12:03:55 UTC 2018,,,,,,,,,,,"0|i3ofpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,"03/Jan/18 11:32;davsclaus;You are welcome to work on a fix/patch, such as a github PR
http://camel.apache.org/contributing;;;","04/Jan/18 15:28;githubbot;jisikoff opened a new pull request #2164: CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…
URL: https://github.com/apache/camel/pull/2164
 
 
   … channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","04/Jan/18 15:28;githubbot;GitHub user jisikoff opened a pull request:

    https://github.com/apache/camel/pull/2164

    CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…

    … channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cinch-financial/camel feature/CAMEL-12111-reconnect-on-start

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2164.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2164
    
----
commit 17216a11c6996992a64e3f254c48a5e82b50c12d
Author: Jeremy Isikoff <jisikoff@...>
Date:   2018-01-04T14:42:37Z

    CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so channels share connections again.  Also fix consumers getting started twice on reconnect at startup.  Also fix null pointers if automaticRecoveryEnabled is not set on the endpoint.

----
;;;","06/Jan/18 12:02;githubbot;davsclaus closed pull request #2164: CAMEL-12111: Fix reconnect if broker is down on startup.  Also fix so…
URL: https://github.com/apache/camel/pull/2164
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
index e96367c6e2f..ffef62d003c 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitConsumer.java
@@ -295,10 +295,10 @@ public void reconnect() throws IOException, TimeoutException {
         if (isChannelOpen()) {
             // The connection is good, so nothing to do
             return;
-        } else if (!isChannelOpen() && this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {
+        } else if (channel != null && !channel.isOpen() && isAutomaticRecoveryEnabled()) {
             // Still need to wait for channel to re-open
             throw new IOException(""Waiting for channel to re-open."");
-        } else if (!this.consumer.getEndpoint().getAutomaticRecoveryEnabled()) {
+        } else if (channel == null || !isAutomaticRecoveryEnabled()) {
             log.info(""Attempting to open a new rabbitMQ channel"");
             Connection conn = consumer.getConnection();
             channel = openChannel(conn);
@@ -307,6 +307,11 @@ public void reconnect() throws IOException, TimeoutException {
         }
     }
 
+    private boolean isAutomaticRecoveryEnabled() {
+        return this.consumer.getEndpoint().getAutomaticRecoveryEnabled() != null
+            && this.consumer.getEndpoint().getAutomaticRecoveryEnabled();
+    }
+
     private boolean isChannelOpen() {
         return channel != null && channel.isOpen();
     }
diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
index 95a660925ee..c0aaa6d5d03 100644
--- a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQConsumer.java
@@ -74,7 +74,7 @@ protected synchronized Connection getConnection() throws IOException, TimeoutExc
         if (this.conn == null) {
             openConnection();
             return this.conn;
-        } else if (!this.conn.isOpen() && this.endpoint.getAutomaticRecoveryEnabled()) {
+        } else if (this.conn.isOpen() || (!this.conn.isOpen() && isAutomaticRecoveryEnabled())) {
             return this.conn;
         } else {
             log.debug(""The existing connection is closed"");
@@ -83,16 +83,24 @@ protected synchronized Connection getConnection() throws IOException, TimeoutExc
         }
     }
 
-
+    private boolean isAutomaticRecoveryEnabled() {
+        return this.endpoint.getAutomaticRecoveryEnabled() != null
+            && this.endpoint.getAutomaticRecoveryEnabled();
+    }
     /**
-     * Add a consumer thread for given channel
+     * Create the consumers but don't start yet
      */
-    private void startConsumers() throws IOException {
-
+    private void createConsumers() throws IOException {
         // Create consumers but don't start yet
         for (int i = 0; i < endpoint.getConcurrentConsumers(); i++) {
             createConsumer();
         }
+    }
+
+    /**
+     * Start the consumers (already created)
+     */
+    private void startConsumers() {
 
         // Try starting consumers (which will fail if RabbitMQ can't connect)
         try {
@@ -160,6 +168,7 @@ protected void doResume() throws Exception {
     protected void doStart() throws Exception {
         executor = endpoint.createExecutor();
         log.debug(""Using executor {}"", executor);
+        createConsumers();
         startConsumers();
     }
 
@@ -211,9 +220,6 @@ public Void call() throws Exception {
                     Thread.sleep(connectionRetryInterval);
                 }
             }
-            if (!connectionFailed) {
-                startConsumers();
-            }
             stop();
             return null;
         }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","06/Jan/18 12:02;githubbot;Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2164
;;;","06/Jan/18 12:03;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,
