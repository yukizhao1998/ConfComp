Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Log Work,Log Work,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Outward issue link (Incorporates),Inward issue link (Problem/Incident),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Required),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
URISupport have an bug in method doFastNormalizeUri for normalize EndpointKey ,CAMEL-15983,13347469,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kmanzxbin,kmanzxbin,23/Dec/20 03:24,23/Dec/20 05:46,13/Jul/23 08:32,23/Dec/20 05:46,3.6.0,,,3.7.1,3.8.0,,,,camel-core,,,,0,,,,,"Did not set prev with key after compareTo, and prev value is always the first item of parameter.keySet(), if keyset like this: a, c, b, and the value of sort after for loop is false, but its shoud be true. 

!image-2020-12-23-11-15-49-815.png!

when I build two routes with similar to-endpoint, build 2nd route will trigger registerEndpointCallback method, this makes AbstractCamelContext have two endpoint with similar endpointkey in endpoints(EndpointRegistry), then if I remove one of them by removeRoute method, camel context will invoke removeEndpoints by matchEndpoint at line 742, camel will stop all of them(include its connection pool) but did not remove from EndpointRegistry(key is not match), then when new exchange passing to to-endpoint, connection pool shut down exception is arised.

!image-2020-12-23-11-17-24-982.png!

plz have alook about this issue.

 ",,kmanzxbin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Dec/20 03:15;kmanzxbin;image-2020-12-23-11-15-49-815.png;https://issues.apache.org/jira/secure/attachment/13017547/image-2020-12-23-11-15-49-815.png","23/Dec/20 03:17;kmanzxbin;image-2020-12-23-11-17-24-982.png;https://issues.apache.org/jira/secure/attachment/13017546/image-2020-12-23-11-17-24-982.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-23 03:24:29.0,,,,,,,,,,,"0|z0lrg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpSendDynamicAware doesn't resolve RAW properties,CAMEL-15974,13346787,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,iliya.gr,iliya.gr,18/Dec/20 12:47,23/Dec/20 08:08,13/Jul/23 08:33,20/Dec/20 09:23,2.25.2,,,2.25.4,3.7.1,3.8.0,,,camel-http-common,,,,0,,,,,"Dynamic parameters enclosed inside RAW are not resolved inside _HttpSendDynamicAware.createPreProcessor_ method and get passed to CamelHttpQuery enclosed to RAW.
 
Endpoint example:

{code:xml}
<toD uri=""https4://example.com/path?parameter=RAW(${headers.a}-${headers.b})""/>
{code}

The actual query request will be: {code}https4://example.com/path?parameter=RAW(a-b){code}",,davsclaus,iliya.gr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 22 11:53:00 UTC 2020,,,,,,,,,,,"0|z0ln8g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Dec/20 09:19;davsclaus;On Camel 2.x you can try without the RAW();;;","22/Dec/20 11:53;iliya.gr;It will work without placing RAW in most cases, only case I can imagine: {code}https4://example.com/path?parameter=RAW(${headers.a}&${headers.b}){code} (the & will break URL in that case).

I can provide patch for Camel 2.x;;;",,,,,,,,,,,,,,,,,,
SimpleFileLanguage always null due to DummyExchange,CAMEL-15971,13346772,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kstam,kstam,18/Dec/20 11:25,20/Dec/20 16:19,13/Jul/23 08:33,20/Dec/20 16:19,2.23.2,,,2.25.4,3.7.1,3.8.0,,,came-core,,,,0,,,,,"I'm trying to use the File component to move all *.txt files from the 'source' to the 'target' directory. 

{code:java}
        public void configure() throws Exception {
            from(""file://source?fileName=%24%7Bfile%3Aonlyname.noext%7D.txt"")
                .to(""log://org.apache.camel.howto?showAll=true"")
                .to(""file://target"");
        }
{code}

I'm configuring the fileName as ${file:onlyname.noext}.txt. 

https://github.com/apache/camel/blob/camel-2.25.x/camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java#L85

However, not any file names match ever because the ${file:onlyname.noext} is always null because it's trying to obtain the file name from the exchange which is completely empty.

It seems to me that you should not create a DummyExchange:
https://github.com/apache/camel/blob/camel-2.25.x/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java#L701

Please find a demo project attached.



",,davsclaus,kstam,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15979,,,,,"18/Dec/20 11:25;kstam;camelftp.tgz;https://issues.apache.org/jira/secure/attachment/13017365/camelftp.tgz",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 20 16:19:53 UTC 2020,,,,,,,,,,,"0|z0ln54:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Dec/20 11:32;davsclaus;If you only want to include .txt files, then use include option. 
https://camel.apache.org/components/2.x/file-component.html

Mind include is a regexp pattern, so use include=.*txt;;;","18/Dec/20 12:30;kstam;We don't support that feature in Syndesis (yet). I can't do it this way?;;;","20/Dec/20 16:19;davsclaus;Okay fixed this in 2.25.x branch;;;",,,,,,,,,,,,,,,,,
mimeMultipart dataformat is not included in the XML DSL for marshal/unmarshal,CAMEL-15962,13346734,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Dec/20 08:24,18/Dec/20 08:49,13/Jul/23 08:33,18/Dec/20 08:49,2.25.2,,,2.25.3,3.5.0,,,,camel-blueprint,camel-spring,,,0,,,,,Its fixed in Camel 3.5.0 onwards.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 18 08:49:47 UTC 2020,,,,,,,,,,,"0|z0lmwo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Dec/20 08:45;davsclaus;There are a few others as well - adding all of them;;;","18/Dec/20 08:49;davsclaus;The fix for 2.x is here
https://github.com/apache/camel/commit/c72c86fb884832b9d5575203162979f44c07fe9a;;;",,,,,,,,,,,,,,,,,,
Incorrect value getSupportExtendedInformation for ManagedPollEnricher,CAMEL-15949,13346174,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ncasaux,ncasaux,15/Dec/20 18:07,16/Dec/20 15:07,13/Jul/23 08:33,16/Dec/20 15:07,3.6.0,,,3.7.1,3.8.0,,,,camel-core,,,,0,managedbeans,,,,"The value is {code:java}false{code}
However it should be {code:java}true{code}, as there some extended information available for this processor.

",,davsclaus,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 16 15:07:17 UTC 2020,,,,,,,,,,,"0|z0ljg8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Dec/20 18:08;ncasaux;I can work on this and submit a PR, can someone assign it to me ?;;;","16/Dec/20 09:11;davsclaus;Its fine to say in a comment you work on it. When you have done some more work then we can give your JIRA account self assign rights;;;","16/Dec/20 15:07;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,
Hazelcast : client mode : search hazelcast client by name doesn't work,CAMEL-15947,13345918,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zbendhiba,zbendhiba,zbendhiba,14/Dec/20 18:04,15/Dec/20 15:51,13/Jul/23 08:33,15/Dec/20 15:51,3.6.0,,,3.7.1,3.8.0,,,,camel-hazelcast,,,,0,,,,,"Using Hazelcast component with client mode, the search for the hazelcast instance by name doesn't work because we don't use the right class for search.
Use HazelcastClient.getHazelcastClientByName instead of Hazelcast.getHazelcastInstanceByName

",,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-14 18:04:51.0,,,,,,,,,,,"0|z0lhvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't require sObjectName or sObjectClass when streaming with raw payload,CAMEL-15945,13345855,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,14/Dec/20 12:43,17/Dec/20 15:02,13/Jul/23 08:33,17/Dec/20 15:02,,,,3.7.1,3.8.0,,,,camel-salesforce,,,,0,,,,,We should not require {{sObjectName}} and {{sObjectClass}} parameters if {{rawPayload}} is set to {{true}}.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-14 12:43:24.0,,,,,,,,,,,"0|z0lhhc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Edit this page link no longer takes page-source attribute to account,CAMEL-15944,13345837,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,14/Dec/20 12:06,14/Dec/20 12:18,13/Jul/23 08:33,14/Dec/20 12:18,,,,,,,,,website,,,,0,,,,,"Seems that we no longer look at {{page-source}} attribute to point to the correct document to edit from the ""Edit this page"" link on the website.

For example if I click on ""Edit this page"" on https://camel.apache.org/components/latest/telegram-component.html I'm taken to https://github.com/apache/camel/edit/master/docs/components/modules/ROOT/pages/telegram-component.adoc, I should have been taken to https://github.com/apache/camel/edit/master/components/camel-telegram/src/main/docs/telegram-component.adoc",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 14 12:18:33 UTC 2020,,,,,,,,,,,"0|z0lhdc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Dec/20 12:18;zregvart;Should be fixed in couple of mins.;;;",,,,,,,,,,,,,,,,,,,
spring xml on camel-spring-boot may add route policy factory twice,CAMEL-15942,13345800,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Dec/20 09:06,14/Dec/20 09:43,13/Jul/23 08:33,14/Dec/20 09:43,,,,3.7.1,3.8.0,,,,camel-spring,camel-spring-boot,,,0,,,,,Because spring xml and also spring boot adds the factory. However its not really recommended to use spring xml on spring boot (eg <beans> via spring import annotation).,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-14 09:06:18.0,,,,,,,,,,,"0|z0lh54:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Issue with property placeholder in an example,CAMEL-15940,13345673,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/20 10:42,14/Dec/20 08:21,13/Jul/23 08:33,14/Dec/20 08:21,3.7.0,,,3.8.0,,,,,camel-spring-boot,examples,,,0,,,,,"camel-example-spring-boot-clustered-route-controller

the random.uuid is a problem, and after hardcoding that to 123 you get another problem.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15930,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 13 12:46:14 UTC 2020,,,,,,,,,,,"0|z0lgcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Dec/20 12:46;davsclaus;Okay so have a fix for this, but note that resolving ${random.uuid} from both spring boot and camel, causes two lookup and therefore a new uuid to be generated.;;;",,,,,,,,,,,,,,,,,,,
camel-netty - WARN logging with disconnect=true,CAMEL-15937,13345517,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Dec/20 13:18,11/Dec/20 14:40,13/Jul/23 08:33,11/Dec/20 14:40,3.6.0,3.7.0,,3.4.5,3.7.1,3.8.0,,,camel-netty,,,,0,,,,,"Reported on chat
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Camel.20Rest.20.2B.20Netty.3A.20Result.20is.20already.20complete.3A.20succeeded/near/219601702",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-11 13:18:25.0,,,,,,,,,,,"0|z0lfe8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel 3.6 fails to resolve #bean:name notation for camel.component.pulsar.pulsar-client,CAMEL-15931,13345103,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,diemscott,diemscott,09/Dec/20 15:37,10/Dec/20 06:41,13/Jul/23 08:33,09/Dec/20 16:05,3.6.0,,,3.7.0,,,,,camel-pulsar,,,,0,,,,,"Our system is configured with spring boot and there is a bean named pulsarClient in the context. In camel pre 3.6, this configuration works:

camel:
  component:
  pulsar:
    enabled: true
    subscription-type: SHARED
    pulsar-client: '#bean:pulsarClient'

In camel 3.6, it throws an exception:

Property: camel.component.pulsar.pulsar-client
 Value: #bean:pulsarClient
 Origin: class path resource [application-default.yml]:112:22
 Reason: No converter found capable of converting from type [java.lang.String] to type [org.apache.pulsar.client.api.PulsarClient]

 ","Spring boot 2.3.3
Java 14",davsclaus,diemscott,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 10 06:41:49 UTC 2020,,,,,,,,,,,"0|z0lcuo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Dec/20 16:05;davsclaus;Yeah that should be fixed in 3.7, so try SNAPSHOT or wait for the 3.7 release;;;","09/Dec/20 17:07;diemscott;Hi! Thank you for the quick response.

 

I've run a test with the 3.7.0-SNAPSHOT and the result is the same message.;;;","10/Dec/20 06:41;davsclaus;You need to build both camel and camel-spring-boot. I just tried and it works for me.
;;;",,,,,,,,,,,,,,,,,
ClusteredRouteController cannot start clustered routes,CAMEL-15930,13345062,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jweijers,jweijers,09/Dec/20 12:05,14/Dec/20 08:21,13/Jul/23 08:33,14/Dec/20 08:21,3.4.4,3.6.0,,3.7.1,3.8.0,,,,,,,,0,,,,,"The ClusteredRouteController cannot start a clustered route (in Camel 3.4.4, Camel 3.6 and probably other versions of Camel 3).

The problem can be reproduced with example camel-example-spring-boot-clustered-route-controller from the examples project ([https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-clustered-route-controller]).

When an instance is the lead in the cluster and tries to start the routes an exception is thrown:
 java.lang.UnsupportedOperationException: Operation not supported as route clustered is clustered",,davsclaus,jweijers,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15940,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 12 10:38:47 UTC 2020,,,,,,,,,,,"0|z0lclk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Dec/20 09:34;davsclaus;The ClusteredRouteController is experimental (see its annotation on the class level).;;;","12/Dec/20 10:38;davsclaus;Okay so it looks like the problem is that its own startup of routes hits the public API of starting routes, that the route controller would deny the end user to do manually such as via JMX - because a route is under clustering management.;;;",,,,,,,,,,,,,,,,,,
TimeoutException does not trigger Resilience4j circuit breaker,CAMEL-15928,13344853,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Liroyd,Liroyd,08/Dec/20 14:53,23/Dec/20 09:47,13/Jul/23 08:33,23/Dec/20 08:32,3.4.4,,,3.4.6,3.7.1,3.8.0,,,came-core,eip,,,0,,,,,"Currently Timeout exceptions does not trigger circuit breaker. But they should. I don't want to continue spam my server, if it slightly started dying.

I tried to hot-fix in the next way - [^hot_fix.diff]

The idea behind patch is next. Currently we wrap our call with circuit breaker and only after that with time limiter. So, circuit breaker doesn't know anything about time-outs. 

And basically I do opposite - initially wrap call with time limiter and only after that, wrap it with circuit breaker. So circuit breaker will aware about time-out exception and can react properly.

The issue which I have afterward, that, for cases when circuit breaker was open, I started receiving blank 200 OK response.

I tried to fix it by removing recover(fallbackTask) part at all:

 
{code:java}
// Try.ofCallable(task).recover(fallbackTask).andFinally(() -> callback.done(false)).get(); //old code
Try.ofCallable(task).andFinally(() -> callback.done(false)).get(); // new line of code
{code}
And seems like it works fine. But tests are failing, and I'm not sure how exactly it should be fixed. 

Also another fix, which seems like works fine and tests are not failing:

CircuitBreakerFallbackTask

 
{code:java}
} else if (throwable instanceof CallNotPermittedException) {
    // the circuit breaker triggered a call rejected
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_SUCCESSFUL_EXECUTION, false);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_FROM_FALLBACK, false);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_SHORT_CIRCUITED, true);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_REJECTED, true);
    throw RuntimeExchangeException.wrapRuntimeException(throwable); // new line of code
    //return exchange; // old code
{code}
 

 

Please, assist.",,davsclaus,Liroyd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Dec/20 19:02;Liroyd;camel_fix_for_fallback.diff;https://issues.apache.org/jira/secure/attachment/13017392/camel_fix_for_fallback.diff","21/Dec/20 11:09;Liroyd;failed_tests_with_time_out.patch;https://issues.apache.org/jira/secure/attachment/13017465/failed_tests_with_time_out.patch","08/Dec/20 14:22;Liroyd;hot_fix.diff;https://issues.apache.org/jira/secure/attachment/13016698/hot_fix.diff","21/Dec/20 11:10;Liroyd;image-2020-12-21-13-10-40-893.png;https://issues.apache.org/jira/secure/attachment/13017466/image-2020-12-21-13-10-40-893.png","21/Dec/20 11:11;Liroyd;test_errors_stackTrace.txt;https://issues.apache.org/jira/secure/attachment/13017467/test_errors_stackTrace.txt",,,,,5.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 23 09:47:53 UTC 2020,,,,,,,,,,,"0|z0lbbc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Dec/20 06:00;davsclaus;How do you wrap your call with timeout, eg show us what you do;;;","09/Dec/20 06:10;Liroyd;Did you mean, how to reproduce?

Currently I have simple camel route
{code:xml}
<circuitBreaker configurationRef=""{{myName}}"">
       <to uri=""direct:someUri""/>
</circuitBreaker>{code}
In config, I have timeout:
{code:java}
Resilience4jConfigurationDefinition config = new Resilience4jConfigurationDefinition();
config.circuitBreakerRef(cbName)
        .timeoutEnabled(true)
        .timeoutDuration(100)
        .timeoutCancelRunningFuture(true);
{code}
 

If you ment, how did I fix it, then please check attached patch [^hot_fix.diff]

^Note: fix for fallback is not included.^;;;","09/Dec/20 10:17;davsclaus;Okay so you want in case of a timeout, the fallback task to not run? On top of my head a fallback is only run if you have <onFallback> in the route, and you do not have that.

Or do you say that only if there is a timeout exception than skip any kind of fallback and fail the call? ;;;","09/Dec/20 10:38;Liroyd;I don't have fallback for my particular case, but I have routes with fallback in general. And it somehow supposed to work.

What I'm saying, that time-out exception should trigger circuit breaker, regardless of existence of fallback. 

If in my route I have fallback configuration and time-out exception occurred, I would expect next behavior:
 # Circuit breaker counter should be increased (added one more failed call to statistic)
 # Fallback logic should be executed

 ;;;","09/Dec/20 10:41;Liroyd;From the other side, it also should depends on which level fallback is configured. Later on will come up with examples

 ;;;","09/Dec/20 15:59;Liroyd;E.g. Case#1:
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
       <to uri=""direct:route1""/>
       <onFallback>
           <to uri=""route2""/>
       </onFallback>
   </circuitBreaker>
</route>
{code}
Time-out configuration should be applied to both <to uri> and <onFallback> logic. So, if I set 10sec for time-out, it doesn't matter on which step I'm currently on, execution should be interrupted.

E.g. >10 sec on main uri = interrupt.

5 sec on  main uri + >5sec on fallback = interrupt.

Case#2
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
        <to uri=""direct:route#1""/>
   </circuitBreaker>
   <onFallback>
        <to uri=""rout#2""/>
   </onFallback>
</route>
{code}
If time-out exception, onFallback should be still executed, because it's outside of time-out configuration

E.g. Case#3:
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
       <to uri=""direct:route1""/>
   </circuitBreaker>
</route>{code}
Current case from ticket - no fallback, time-out applied to main uri.

Note: I didn't test first two cases, but based on xml definition, they should work.;;;","09/Dec/20 16:07;davsclaus;I would actually not think this is how circuit breakers work. The timeout is on the normal task, the fallback runs indepently and is not under timeout or the likes. The goal of the fallback is to do some simpler task that you can use instead, such as returning a fixed response, or last known good response (from a cache) or something.;;;","09/Dec/20 16:28;Liroyd;Currently we have logic like, go to the system#1, on fallback go to the system#2. Both calls should be wrapped in different circuit breakers. So, fallback in my case could take a while.

Moreover, I would like to have one time-out for operation itself (e.g. 10 sec for this route in total) and separate time-outs for each of its parts. Not sure, how it should be properly configured.;;;","15/Dec/20 16:15;Liroyd;Any suggestions, how fallback issue can be solved? I would gladly provide PR for this, but not sure how to fix it correctly.;;;","18/Dec/20 13:53;Liroyd;Hello, I did a small investigation, and I want to insist that it's a critical bug and not a major improvement:).

 

Regarding initial issues - resilience4J provides ability to select explicitly, which errors should trigger circuit breaker and which should not. 

And you can specify TimeoutException as one of those. And it works perfectly, when using pure resilience4J. If you specifies TimeoutException, it will trigger CB, if no, then no.

Camel-resilience4j also provides ability to select list off exceptions. But it's not possible to select TimeoutException as one for triggering CB. Yes, you can provide it for config, but camel itself will never treat it correctly.

 

*And I found another issue with fallback.* Basically fallback for such camel routes will be executed only in one case - yes, only in case of TimeoutException. Example:

 
{code:java}
<route id=""myROute"">
    <from uri=""direct:myURI""/>
    <circuitBreaker configurationRef=""{{myConfig}}"">
        <to uri=""myExecutionRoute""/>
        <onFallback>
            <bean method=""test"" ref=""myFallbackBean""/>
        </onFallback>
    </circuitBreaker>
</route>
{code}
 

For such configuration, onFallback will be executed only when we receive TimeoutException.

The rootcause for both issue is the same - currently ResilienceProcessor wraps task CB first, and only after that wraps it in TimeLimiter.

 

Regarding fallback - currently it's called like:

 
{code:java}
Try.ofCallable(task).recover(fallbackTask).andFinally(() -> callback.done(false)).get();
{code}
 

_recover_ executes _fallback_ only if - _this.isFailure()_,

_Try.ofCallable(task)_ returns _Failure_ only for TimeoutExceptions. -All other exceptions will be catched by _MethodInfo#MethodInvocation#proceed_ - therefore it will be success for every other exception.- Updated: see my last comment regarding rootcause.

 

I will try to find a solution, but any help would be appreciable.;;;","18/Dec/20 19:59;Liroyd;Please check attached patch: [^camel_fix_for_fallback.diff]

 

*Some explanation for fix:*
 # The idea is the same : wrap in time-out, then wrap in circuit-breaker
 # I had to remove - CircuitBreakerTimeoutTask, because fallback was not triggered for regular exceptions
 # processInCopy - it's just copy-paste, what u had in task
 # throw exception is added to fallback(where we don't have registered any fallback)
 throw RuntimeExchangeException.wrapRuntimeException(throwable);
 because, otherwise for case when CB is OPEN, I would not able to receive target exception as result of route execution
 Note: probably //exchange.setException(throwable); would be enough, but in this case ResilienceRouteRejectedTest is failing, and I decided to not touch it

That's pretty much it.

 

*Cases which tested:*
 # No fallback configured:
{code:java}
<route id=""myRoute"">
    <from uri=""myRouteID""/>
    <circuitBreaker configurationRef=""{{myCB}}"">
        <to uri=""direct:myExecute""/>
    </circuitBreaker>
</route>{code}
 ## Throw exception, which is not in ""recordException"" for CB
 AR=ER - received exception on client, CB is not triggered
 ## Throw exception, which is in ""recordException"" for CB
 AR=ER - received exception on client, CB is triggered 
 AR2=ER2 - if CB is open - get CB open exception right away
 ## Set time-out
 ### If time-out exception is in recorded for CB
 AR=ER CB is triggered
 ### if time-out is not in recorded for CB
 AR=ER CB is not triggered
 # Fallback is configured:
{code:java}
<route id=""myRoute"">
    <from uri=""myRouteID""/>
    <circuitBreaker configurationRef=""{{myCB}}"">
        <to uri=""direct:myExecute""/>
        <onFallback>
            <bean method=""test"" ref=""myFallback""/>
        </onFallback>
    </circuitBreaker>
</route>{code}
 ## Throw exception, which is not in ""recordException"" for CB
 AR=ER - CB is not triggered. Fallback executed
 ## Throw exception, which is in ""recordException"" for CB
 AR=ER - CB is triggered. Fallback is executed
 AR2=ER2 - if CB is open - initial call falls right away without any execution + fallback is executed
 ## Set time-out
 ### If time-out exception is in recorded for CB
 AR=ER CB is triggered + fallback is executed
 ### if time-out is not in recorded for CB
 AR=ER CB is not triggered, fallback is executed

Note: so basically fallback is executed for every case

 

[~davsclaus], please check patch and my explanation.

I really need this fix in 3.4.5. I will be able to create PR on Monday. Just take a look, and say, what do you think. I basically tested all existing cases + change itself is not really huge.;;;","21/Dec/20 11:13;Liroyd;I wanted to write a test, which proofs my patch, and I was surprised, that there are already tests, which actually works. E.g. for fallback ResilienceRouteFallbackTest.
 And now I finally found a rootcause. In my previous comment I wrote:
{quote}All other exceptions will be catched by MethodInfo#MethodInvocation#proceed - therefore it will be success for every other exception.
{quote}
It's not quite correct. All other exceptions will be catched by CircuitBreakerTimeoutTask
{code:java}
  public Exchange get() {
            try {
                return future.call();
            } catch (Exception e) {
                exchange.setException(e);
            }
{code}
And _Try.ofCallable(task)_ will return true.

*The reason, why tests aren't failing,* that almost all of them are executed without time-out configuration, e.g.:
{code:java}
.circuitBreaker().inheritErrorHandler(true).to(""mock:a"").throwException(new IllegalArgumentException(""Forced"")).end().to(""log:result"").to(""mock:result"");
{code}
So, code is not wrapped in CircuitBreakerTimeoutTask, which catches exception:
{code:java}
        if (timeLimiterConfig != null) {
            // timeout handling is more complex with thread-pools
            final CircuitBreakerTimeoutTask timeoutTask = new CircuitBreakerTimeoutTask(task, exchange);
            Supplier<CompletableFuture<Exchange>> futureSupplier;
...
{code}
I basically added time-outs to every test - [^failed_tests_with_time_out.patch], and now, as I expected, 4 of them are failing (actually 5 - SpringResilienceRouteFallbackTest - will also fail -after changing it in spring config):

!image-2020-12-21-13-10-40-893.png!

Stack Trace is attached - [^test_errors_stackTrace.txt]

 

With my patch all tested executed successfully. Hope, the issue is clear now and I am waiting for you comment;;;","21/Dec/20 16:27;Liroyd;Please check [https://github.com/apache/camel/pull/4809] for 3.4.x. If everything is ok, I will create separate for master.;;;","21/Dec/20 17:59;Liroyd;PR for master - https://github.com/apache/camel/pull/4810;;;","23/Dec/20 08:32;davsclaus;Thanks for the detailed analysis and the PRs to fix this on our branches.;;;","23/Dec/20 08:47;Liroyd;You are welcome. Is there any way, how I can get it in 3.4.5?;;;","23/Dec/20 09:47;davsclaus;No 3.4.5 was built before and will be released today;;;",,,
Cannot parse CSV if the last (not required) field is empty when using a tab separator,CAMEL-15920,13344053,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,darioxz,darioxz,03/Dec/20 16:20,07/Dec/20 13:35,13/Jul/23 08:33,07/Dec/20 06:11,3.5.0,,,3.7.0,,,,,camel-bindy,,,,0,,,,,"Parsing a CSV file fails if the following conditions are met:
 * tab separator
 * last field is empty
 * not all fields are required

 

*Example 1*
{code:java}
CSV: ""VOA\t12 abc street\tMelbourne\tVIC\t3000\tAustralia\t\t""
{code}
The last two fields are empty and the CSV *cannot be parsed.*

*Example 2*
{code:java}
CSV: ""VOA\t12 abc street\tMelbourne\tVIC\t3000\tAustralia\t\tNot Empty""
{code}
The last field is not empty and the CSV *can be parsed.*

 *Example 3*
{code:java}
CSV: ""VOA,12 abc street,Melbourne,VIC,3000,Australia,,""
{code}
If the comma separator is used and the last field is empty, the CSV *can be parsed.*

I've just created a test case on current master to demonstrate the bug:

[Camel-Bindy: csv cannot be parsed if (not required) last field is empty and a tab separator is used by darioxz - Pull Request #1 - darioxz/camel (github.com)|https://github.com/darioxz/camel/pull/1]

 ",,darioxz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-03 16:20:28.0,,,,,,,,,,,"0|z0l6ds:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Response message definition does not correctly handle java.io.File as response model,CAMEL-15919,13344043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,eidottermihi,eidottermihi,03/Dec/20 15:34,04/Dec/20 06:10,13/Jul/23 08:33,04/Dec/20 06:10,3.6.0,,,3.7.0,,,,,camel-openapi-java,camel-swagger-java,,,0,,,,,"Currently, specifying ""java.io.File"" class as response model (for example when the API returns a binary document, aka ""Download"") in RestOperationResponseMsgDefinition produces an incorrect Swagger / OAS2 / OAS3 definition:

 
{noformat}
""responses"" : {
  ""200"" : {
    ""description"" : ""Created PDF file"",
    ""schema"" : {
      ""type"" : ""string"",
      ""format"" : ""java.io.File""
    },
  },
  // ....
}


{noformat}
 The correct way to handle this according to Swagger docs v2 (https://swagger.io/docs/specification/2-0/describing-responses/) is:
{noformat}
""responses"" : {
  ""200"" : {
    ""description"" : ""Created PDF file"",
    ""schema"" : {
      ""type"" : ""file""
    },
  },
  // ....
}
{noformat}
 
camel-openapi-java with OAS2 / OAS3 is also affected.
 ",,eidottermihi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-12-03 15:34:28.0,,,,,,,,,,,"0|z0l6bk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Opentelemetry-starter: Spring Boot starter is broken,CAMEL-15902,13342984,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,27/Nov/20 12:21,01/Dec/20 06:53,13/Jul/23 08:33,01/Dec/20 06:53,,,,3.7.0,,,,,camel-spring-boot,,,,0,,,,,"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-opentelemetry-starter: Compilation failure: Compilation failure: 
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-opentelemetry-starter/src/main/java/org/apache/camel/opentelemetry/starter/OpenTelemetryAutoConfiguration.java:[19,30] package io.opentelemetry.trace does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-opentelemetry-starter/src/main/java/org/apache/camel/opentelemetry/starter/OpenTelemetryAutoConfiguration.java:[35,13] cannot find symbol
[ERROR] symbol: class Tracer
[ERROR] location: class org.apache.camel.opentelemetry.starter.OpenTelemetryAutoConfiguration

 

[~rubensvp] can you have a look at https://github.com/apache/camel-spring-boot",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-27 12:21:55.0,,,,,,,,,,,"0|z0kzsg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HazelcastConsumers do not remove their listeners,CAMEL-15899,13342970,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Scriptease,Scriptease,27/Nov/20 10:20,03/Dec/20 13:24,13/Jul/23 08:33,03/Dec/20 13:24,3.4.4,3.5.0,3.6.0,3.7.0,,,,,camel-hazelcast,,,,0,,,,,"The following exception occurs if the camelroute with a hazel cast topic is restarted  

{code:java}
WARNUNG: Error processing exchange for hazelcast consumer on object 'null' in cache 'server.trace.event'.. Exchange[ID-1605875260724-0-338]. Caused by: [java.util.concurrent.RejectedExecutionException - null]
java.util.concurrent.RejectedExecutionException
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:435)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
at org.apache.camel.component.hazelcast.listener.CamelListener.sendExchange(CamelListener.java:48)
at org.apache.camel.component.hazelcast.listener.CamelMessageListener.onMessage(CamelMessageListener.java:34)
at com.hazelcast.topic.impl.TopicService.dispatchEvent(TopicService.java:138)
at com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.run(LocalEventDispatcher.java:64)
at com.hazelcast.util.executor.StripedExecutor$Worker.process(StripedExecutor.java:244)
at com.hazelcast.util.executor.StripedExecutor$Worker.run(StripedExecutor.java:227)
{code}

Solution
Register listeners in doStart and remove them in doStop",,acosentino,Scriptease,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 27 13:09:49 UTC 2020,,,,,,,,,,,"0|z0kzpc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Nov/20 10:23;acosentino;Please report the camel version.;;;","27/Nov/20 10:25;Scriptease;I think all versions are affected including the latest in Github.


I added a pull request:
https://github.com/apache/camel/pull/4694;;;","27/Nov/20 10:29;acosentino;We'll release 3.7.0 as second LTS, the other LTS is 3.4.x, so we'll need a PR on 3.4.x branch only;;;","27/Nov/20 13:09;acosentino;Can you open a PR against camel-3.4.x? It shouldn't be a cherry-pick, I guess there will be conflicts. Thanks.;;;",,,,,,,,,,,,,,,,
Camel Website search is broken,CAMEL-15898,13342954,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,aashnajena,aashnajena,27/Nov/20 08:55,07/Dec/20 08:33,13/Jul/23 08:33,07/Dec/20 08:33,,,,,,,,,website,,,,0,,,,,"I can see NULLs in place of headings, although the content seems to be fine. Blogs, Articles, Books (all Hugo content) etc are rendering fine, but Components and sub project headings are not appearing. Has there been a change is the organization of Antora content? Else this may be a problem from the Algolia side.

!Screenshot from 2020-11-27 14-21-45.png|width=267,height=444!",,aashnajena,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Nov/20 08:52;aashnajena;Screenshot from 2020-11-27 14-21-45.png;https://issues.apache.org/jira/secure/attachment/13016106/Screenshot+from+2020-11-27+14-21-45.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 07 08:33:39 UTC 2020,,,,,,,,,,,"0|z0kzls:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Nov/20 10:08;zregvart;Yeah, I see the same. Really odd, doesn't look there were any changes recently (https://github.com/algolia/docsearch-configs/commits/master/configs/apache_camel.json), and the selectors ({{article hN}} are matched.

The only thing I can remember is that that I've tried to [fix the breadcrumbs data](https://github.com/apache/camel-website/commit/3e8d717038d2fa0f6d1dc37dd20cc4cdbb9a798a), though I don't think that would cause the issue.;;;","01/Dec/20 19:04;zregvart;I've contacted Algolia support. We'll see what they respond.;;;","03/Dec/20 19:35;zregvart;Aah, I think I found the issue, the breadcrumb element was changed from {{div}} to {{nav}} in [this commit|https://github.com/apache/camel-website/commit/f3273d71ce9b93bf58c45e5605ed519055010711#diff-dababcffe93fd7ac62feb772ceed02701e77631d72f52e23e79ae6a3d54b326e]. I'll make the change in the search configuration over at Algolia.;;;","07/Dec/20 08:33;zregvart;Algolia folk merged the PR, the search index now contains lvl0-lvl3 data as can be seen on the live website. Thanks for reporting!;;;",,,,,,,,,,,,,,,,
camel-ahc body for String data,CAMEL-15891,13342522,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,sms0070,sms0070,25/Nov/20 04:57,25/Nov/20 05:43,13/Jul/23 08:33,25/Nov/20 05:07,2.24.2,,,2.25.3,3.7.0,,,,camel-ahc,,,,0,,,,,"the issue is due to a mistake done by async-http-client team.

Commit : [https://github.com/AsyncHttpClient/async-http-client/commit/d47c56e7ee80b76a4cffd4770237239cfea0ffd6#diff-5247ce5d437efdde629533d6239bf0c24358bdf0157fa204050e908c48a8c1f3]

They made the ByteArrayBodyGenerator constructor package level.

 

Due to this change, camel had to adapt and for String type of body, they changed their implementation from ByteArrayBodyGenerator to InputStreamBodyGenerator.

In InputStreamBodyGenerator, the content length is by default set to -1.

 

Since, content length was less than 0, NettyRequestFactory in async-http-client was using Transfer-Encoding header instead of Content-Length header.

 

Solution :

Async-http-client team corrected their mistake in the following commit :

[https://github.com/AsyncHttpClient/async-http-client/commit/4469c30f7d54352865ff321b0de0148f9698c9b5#diff-208f8952b67ba2a28d2cb2d6881485f8fc1b2b5df53a841d4a4a48b2ed8aded0]

 

However, the change was not reverted in camel, and hence, this regression has happened.

The change needs to be reverted in camel as well. This is causing regression when we are migrating from lower camel versions to higher versions.

 

The change was introduced with the following commit.

[https://github.com/apache/camel/commit/684ef5786838e051cece2f510d9dafabdc310d02#diff-4d41a9fe212a88af9bc5cddb7e348f8031f39ceaf2263d7275fc4b6dd09e0867]

 ",,sms0070,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-25 04:57:21.0,,,,,,,,,,,"0|z0kwy8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: URLs for Composite APIs not encoded correctly,CAMEL-15890,13342471,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jeremyross,jeremyross,24/Nov/20 21:21,25/Nov/20 05:10,13/Jul/23 08:33,25/Nov/20 05:10,3.6.0,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"When using composite APIs, URLs are not encoded correctly. E.g., a URL for an upsert in which the Id value contains a space will result in a + for the space. As a result, the value in salesforce will have + instead of space. Since the Id value is in the path portion of the URL, the correct thing to use is ""%20"".",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-24 21:21:50.0,,,,,,,,,,,"0|z0kwmw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: include all related objects in generated DTOs,CAMEL-15884,13342193,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jeremyross,jeremyross,23/Nov/20 18:25,23/Nov/20 20:40,13/Jul/23 08:33,23/Nov/20 20:40,3.6.0,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"Generated DTOs do not have a reference to related objects if the related object does not have at least one external ID field. The logic for this was probably that you can't use a related object in upserts if that related object doesn't have an external Id field. There are two issues with this. 1) you can upsert on the standard `Id` field, and 2) there's nowhere to put the related objects returned in a parent-to-child relationship query. 

e.g. the result from this query

{code}
SELECT Id, RecordType.Name FROM Contact
{code}

will not contain the RecordType object, because RecordType was not in the DTO Java class.",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-23 18:25:24.0,,,,,,,,,,,"0|z0kuxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: Upsert should return an UpsertResult,CAMEL-15882,13342166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jeremyross,jeremyross,23/Nov/20 16:22,23/Nov/20 20:40,13/Jul/23 08:33,23/Nov/20 20:40,3.6.0,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"Currently, upsert is returning a CreateSObjectResult instance, which contains only a subset of the information salesforce returns from an upsert. We need an UpsertSObjectResult class to capture all the information returned from upsert.",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-23 16:22:12.0,,,,,,,,,,,"0|z0kurk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-milo - CamelServerItem replaces name of the node,CAMEL-15871,13341717,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,schernolyas,schernolyas,20/Nov/20 06:18,20/Nov/20 07:21,13/Jul/23 08:33,20/Nov/20 07:21,3.6.0,,,3.7.0,,,,,camel-milo,,,,0,,,,,"Class org.apache.camel.component.milo.server.internal.CamelServerItem replaces name of node. It makes unclear how to get value of OPC/UA node.

See row https://github.com/apache/camel/blob/ece054b8f8a05ffa6ddfb8942a140176a5488943/components/camel-milo/src/main/java/org/apache/camel/component/milo/server/internal/CamelServerItem.java#L58",,schernolyas,,,,,,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-20 06:18:01.0,,,,,,,,,,,"0|z0ks08:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: duplicate enums generated from picklist values ,CAMEL-15856,13340725,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jeremyross,jeremyross,15/Nov/20 20:03,30/Nov/20 10:08,13/Jul/23 08:33,30/Nov/20 10:08,3.6.0,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"In some scenarios, the maven plugin generates the same enum values from different picklist values, e.g.

""A+"" -> A_
""A-"" -> A_

",,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-15 20:03:22.0,,,,,,,,,,,"0|z0klw0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Generates DTOs with illegal Java strings,CAMEL-15855,13340721,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jeremyross,jeremyross,15/Nov/20 19:29,16/Nov/20 21:26,13/Jul/23 08:33,16/Nov/20 21:26,3.6.0,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"Salesforce field labels can contain characters that need to be escaped in the generated DTOs. Currently, DTOs can end up with strings like this:

{code:java}
"" Enable ""Delete From Field History Archive""""
{code}

As a result, DTOs will not compile.",,davsclaus,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 16 21:26:37 UTC 2020,,,,,,,,,,,"0|z0klv4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Nov/20 21:26;davsclaus;Thanks for your great work on the salesforce component;;;",,,,,,,,,,,,,,,,,,,
properties binding: issues binding to map when the key contains a dot,CAMEL-15852,13340507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lb,lb,13/Nov/20 12:23,15/Nov/20 16:54,13/Jul/23 08:33,15/Nov/20 16:54,,,,3.7.0,,,,,camel-core-engine,,,,0,,,,,"I'm trying to bind some properties to an object that has a filed of type Map<String, Object> and it looks like that when the keys for the map contain a dot, the the mapping fails.

As example:

{code:java}
 Map<String, Object> properties = mapOf(
    ""resources[0].name"", ""knative3"",
    ""resources[0].type"", ""endpoint"",
    ""resources[0].metadata[knative.apiVersion]"", ""serving.knative.dev/v1"",
    ""resources[0].metadata[knative.kind]"", ""Service"",
);

CamelContext context = new DefaultCamelContext();
KnativeEnvironment env = KnativeEnvironment.mandatoryLoadFromProperties(context, properties);
List<KnativeResource> res = env.lookup(Knative.Type.endpoint, ""knative3"").collect(Collectors.toList());

assertThat(res).hasSize(1);
assertThat(res).first().satisfies(resource  -> {
    assertThat(resource.getName()).isEqualTo(""knative3"");
    assertThat(resource.getMetadata()).isNotEmpty();
});
{code}

This code fails as resource.getMetadata() return an empty map, if the properties are then changed to:


{code:java}
 Map<String, Object> properties = mapOf(
    ""resources[0].name"", ""knative3"",
    ""resources[0].type"", ""endpoint"",
    ""resources[0].metadata[knative_apiVersion]"", ""serving.knative.dev/v1"",
    ""resources[0].metadata[knative_kind]"", ""Service"",
);
{code}

Then the test succeeds. ",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 13 14:44:11 UTC 2020,,,,,,,,,,,"0|z0kkjk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Nov/20 14:35;davsclaus;Ah yeah dont use dots in keys - didnt you learn that in school ;)

Yeah lets add support for this, should be possible somewhere in the PBS class somewhere ;);;;","13/Nov/20 14:44;lb;Yeah they told me that but you never listen when  you are young :)
I'm in the process to remove almost everything from metadata and have proper types but still need to keep them around for backward compatibility for a while :(;;;",,,,,,,,,,,,,,,,,,
camel-aws2-sns: duplicate copies of configuration objects lead to undefined behavior,CAMEL-15840,13339745,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,10/Nov/20 12:55,06/May/21 07:41,13/Jul/23 08:33,11/Nov/20 16:14,3.4.4,3.6.0,,3.4.5,3.7.0,,,,camel-aws2,,,,0,,,,,"Camel is keeping 2 different instances of the configuration object for the AWS 2 SNS component. Subsequently, changes to the object instances cause both of them to be out of sync leading to undefined behavior depending on each copy is read.

The problem flow is:
 # A copy of the configuration object if created when instantiating the endpoint: [https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L57|https://github.com/apache/camel/blob/master/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L57]
 # The copy object is then set with additional configuration values, such as the topic and topicArn: [https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L63-L66|https://github.com/apache/camel/blob/master/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L63-L66]
 # Then, when trying to set the component properties, the configuration object will be overwritten and the changes on step 2 may be lost: [https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L69]

 

Under some circumstances, such as when using a custom configuration object this causes the code to overwrite the object.

Here's a code snippet of the debug of the content of the parameters Map, used by setProperties to setup the endpoint. The introspection will eventually overwrite the configuration object.

 
{code:java}
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: accessKey, Value: accesskey
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: configuration, Value: #class:org.apache.camel.kafkaconnector.aws.v2.sns.sink.TestSnsConfiguration
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: queueUrl, Value: http://localhost:35886/000000000000/ckcsns-608
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: region, Value: us-east-1
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: secretKey, Value: secretkey
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: subscribeSNStoSQS, Value: true
{code}
 

 

 

 

 

 

 

 

 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16586,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-10 12:55:50.0,,,,,,,,,,,"0|z0kfu8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NATS consumer throws NullPointerException on connection failure,CAMEL-15834,13339480,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,09/Nov/20 09:52,09/Nov/20 10:33,13/Jul/23 08:33,09/Nov/20 10:33,3.4.4,3.6.0,,3.4.5,3.7.0,,,,camel-nats,,,,0,,,,,"Something I observed in camel-quarkus, when the NATS integration test occasionally fails with connection errors, there's also NullPointerException thrown from the consumer doStop().

{code}
[INFO] Caused by: java.lang.NullPointerException
[INFO] 	at org.apache.camel.component.nats.NatsConsumer.doStop(NatsConsumer.java:71)
[INFO] 	at org.apache.camel.support.service.BaseService.stop(BaseService.java:156)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:133)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopAndShutdownService(ServiceHelper.java:198)
[INFO] 	at org.apache.camel.impl.engine.RouteService.stopChildService(RouteService.java:352)
[INFO] 	at org.apache.camel.impl.engine.RouteService.doStop(RouteService.java:240)
[INFO] 	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:86)
{code}",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-09 09:52:15.0,,,,,,,,,,,"0|z0ke7c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws2-sqs: create queue logic is susceptible to TOC/TOU errors,CAMEL-15833,13339472,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,09/Nov/20 09:10,10/Nov/20 10:47,13/Jul/23 08:33,10/Nov/20 10:47,3.4.4,3.6.0,,3.7.0,,,,,camel-aws2,,,,0,,,,,"The AWS v2 SQS component has a time-of-check / time-of-use bug when creating queues. Currently, the code [checks if the queue exists and, if not, creates it|https://github.com/apache/camel/blob/828a99183f08b4ea609a765837c668b9aba21faa/components/camel-aws2-sqs/src/main/java/org/apache/camel/component/aws2/sqs/Sqs2Endpoint.java#L192].

However, if another application or thread creates the queue in between the check and the creation, the component fails and the startup is aborted.

 

IMHO, a better approach would be to - in case of an exception - check if the queue hasn't been created before aborting.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 10 10:47:26 UTC 2020,,,,,,,,,,,"0|z0ke5k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Nov/20 10:47;orpiske;Just verified the issue and it is working as expected after applying the patch.;;;",,,,,,,,,,,,,,,,,,,
[camel-file] fileExist=Move doesn't use FileMoveExistingStrategy  when tempFile is also configured ,CAMEL-15822,13339054,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldemasi,ldemasi,ldemasi,05/Nov/20 16:46,10/Nov/20 17:21,13/Jul/23 08:33,10/Nov/20 17:21,3.6.0,,,3.7.0,,,,,camel-core,camel-ftp,camel-sftp,,0,,,,,"When both fileExist=Move and tempFile are set, GenericFileProducer.doMoveExistingFile is called, while when tempFile is not set FileMoveExistingStrategy.moveExistingFile.

 It seems a leftover from 2.X -> 3.x migration.

As a result, endpoints like that won't work because GenericFileProducer.doMoveExistingFile doesn't support dynamic subdirectory auto-creation:
{code:java}
file://data/file?tempFileName=${file:onlyname}.temp&fileExist=Move&moveExisting=${file:parent}/archive-${date:now:yyyyMMddHHmmssSSS}/${file:onlyname}""
{code}
 

it would be nice to have support for partial dynamic subdir name like this :

 {code}
fileExist=Move&moveExisting=archive-${date:now:yyyyMMddHHmmssSSS}/
{code}

 ",,ldemasi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-05 16:46:22.0,,,,,,,,,,,"0|z0kbko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-jsonb: Artifact  'johnzon-jsonb' is required with default settings.,CAMEL-15819,13339032,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,05/Nov/20 14:55,09/Nov/20 15:21,13/Jul/23 08:33,09/Nov/20 15:21,3.7.0,,,3.7.0,,,,,documentation,,,,0,,,,,"I've created simple reproducer, using spring-boot starter: [https://github.com/JiriOndrusek/camel-jsonb-reproducer]

 

There is only 1 route, which marshals pojo and logs it. Reproducer is working.

 

If you remove dependency to 'johnzon-jsonb' ([https://github.com/JiriOndrusek/camel-jsonb-reproducer/blob/main/pom.xml#L101]), it start failing with:

 
{quote}Caused by: java.lang.ClassNotFoundException: org.apache.johnzon.jsonb.JohnzonProvider
 at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) ~[na:na]
 at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na]
 at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na]
 at javax.json.bind.spi.JsonbProvider.doLoadProvider(JsonbProvider.java:79) ~[geronimo-jsonb_1.0_spec-1.0.jar:1.0]
 ... 54 common frames omitted>
{quote}
 

Problem is caused by the fact, that spi uses jonzon as default provider (see [https://github.com/apache/geronimo-specs/blob/trunk/geronimo-jsonb_1.0_spec/src/main/java/javax/json/bind/spi/JsonbProvider.java#L30])

 

Solution could be for example adding jonzon into camel-jsonb or adding to documentation, that provider implementation has to be provided.",,davsclaus,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 05 15:24:37 UTC 2020,,,,,,,,,,,"0|z0kbfs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/20 15:24;davsclaus;I dont see this as a bug. When you use a spec like jsonb, then you need to bring your own favorite implementation - like johnzon or whatelse is out there.

So instead the documentation of this should mention this. ;;;",,,,,,,,,,,,,,,,,,,
endpoint-dsl should support dynamic uri in Enrich EIP,CAMEL-15815,13338968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ncasaux,ncasaux,05/Nov/20 09:04,04/Dec/20 12:33,13/Jul/23 08:33,04/Dec/20 12:33,3.6.0,,,3.7.0,,,,,came-core,,,,0,,,,,"Hello,

 

I found something which seems unexpected with the enrich processor and Camel 3.6.0.

 If you consider those 2 routes:

  
{code:java}
from(timer(""foo""))
         .setBody(constant(""1""))
         .enrich(""seda://test-${body}"");
 
 from(timer(""bar""))
         .setBody(constant(""2""))
         .enrich(seda(""test-${body}""));{code}
 

In the log, it says:
{code:java}
[mel-1) thread #6 - timer://bar] SedaEndpoint                   INFO  Endpoint seda://test-2 is using shared queue: seda://test-2 with size: 1000
[mel-1) thread #5 - timer://foo] SedaEndpoint                   INFO  Endpoint seda://test-$%7Bbody%7D is using shared queue: seda://test-$%7Bbody%7D with size: 1000 
{code}
 

So the route using the enrich with “EndpointRouteBuilder style” seems to consider the endpoint URI as a “simple” expression (and resolves it), and the other one like a “constant” expression (which is what I expected). In the first case, it means that the endpoint is resolved for every exchange processed.

 

It’s possible to “force” the constant expression using this though:
{code:java}
from(timer(""biz""))
         .setBody(constant(""3""))
         .enrich().constant(seda(""test-${body}""));{code}
 

Regards,

Nicolas",,davsclaus,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 05 09:26:37 UTC 2020,,,,,,,,,,,"0|z0kb1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/20 09:15;davsclaus;We need to do something like we do in toD and wireTap where we have special support for this.

This would be for Enrich and pollEnrich EIP both of them
;;;","05/Nov/20 09:26;ncasaux;From my tests, the issue is not happening with pollEnrich:
{code:java}
from(timer(""foo""))
 .setBody(constant(""1""))
 .pollEnrich(""seda://test1-${body}"");

from(timer(""bar""))
 .setBody(constant(""2""))
 .pollEnrich(seda(""test2-${body}""));{code}
 
{code:java}
[ main] SedaEndpoint INFO Endpoint seda://test1-$%7Bbody%7D is using shared queue: seda://test1-$%7Bbody%7D with size: 1000
[ main] SedaEndpoint INFO Endpoint seda://test2-$%7Bbody%7D is using shared queue: seda://test2-$%7Bbody%7D with size: 1000{code}
 ;;;",,,,,,,,,,,,,,,,,,
report-maven-plugin fails to validate simple expression,CAMEL-15811,13338870,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,mcollovati,mcollovati,04/Nov/20 16:54,05/Nov/20 07:11,13/Jul/23 08:33,05/Nov/20 07:11,3.6.0,,,3.7.0,,,,,tooling,,,,0,,,,,"Starting from camel 3.6, *camel-report-maven-plugin validate goal*  fails to validate simple expressions; on console log I see an error *[null]* for every expression, also simple ones like *${body.id}*.

Debugging a bit I found that error is due to a NPE on the *ExpressionAdapter* created
 in *SimpleExpressionBuilder.bodyOgnlExpression*, and more specifically in the 
 *init* method, that uses *CamelContext* to resolve bean language.


 When running from maven goal execution, at a certain point, init method is called with a null CamelContext reference and this causes the NPE.

Below an extract of the stacktrace

 
{noformat}
 java.lang.NullPointerException
 at org.apache.camel.language.simple.SimpleExpressionBuilder$28.init(SimpleExpressionBuilder.java:761)
 at org.apache.camel.language.simple.ast.SimpleFunctionExpression.createExpression(SimpleFunctionExpression.java:61)
 at org.apache.camel.language.simple.ast.SimpleFunctionStart.doCreateLiteralExpression(SimpleFunctionStart.java:70)
 at org.apache.camel.language.simple.ast.SimpleFunctionStart.createExpression(SimpleFunctionStart.java:60)
 at org.apache.camel.language.simple.SimpleExpressionParser.createExpressions(SimpleExpressionParser.java:165)
 at org.apache.camel.language.simple.SimpleExpressionParser.doParseExpression(SimpleExpressionParser.java:88)
 at org.apache.camel.language.simple.SimpleExpressionParser.parseExpression(SimpleExpressionParser.java:55)
 at org.apache.camel.language.simple.SimpleLanguage.createExpression(SimpleLanguage.java:132)
{noformat}
In 3.5 **init** method was nor overridden by the *ExpressionAdapter* nor invoked in *SimpleFunctionExpression.createExpression*.

 ",,mcollovati,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-04 16:54:10.0,,,,,,,,,,,"0|z0kag0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't call overloaded method using simple expression returning subtype of expected parameter ,CAMEL-15810,13338865,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joshua.smith,joshua.smith,04/Nov/20 16:37,05/Nov/20 11:29,13/Jul/23 08:33,05/Nov/20 11:29,3.4.4,,,3.7.0,,,,,came-core,,,,0,,,,,"When calling an overloaded method, Camel has to evaluate the parameter types to determine which is the correct method to call. For a parameter that is a simple expression, Camel will evaluate the type, but doesn't recognize it can call a method with a subtype of the expected type.

I've included a patch with a test to demonstrate.",,davsclaus,joshua.smith,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Nov/20 16:37;joshua.smith;camel-overloaded-method-inheritance-test.patch;https://issues.apache.org/jira/secure/attachment/13014726/camel-overloaded-method-inheritance-test.patch",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 05 11:29:00 UTC 2020,,,,,,,,,,,"0|z0kaew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/20 11:29;davsclaus;Thanks for reporting and for the test case;;;",,,,,,,,,,,,,,,,,,,
PredicateBuilder doesn't init predicates properly,CAMEL-15809,13338841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jensgr@gmx.net,jensgr@gmx.net,04/Nov/20 14:38,05/Nov/20 05:56,13/Jul/23 08:33,05/Nov/20 05:56,3.6.0,,,3.7.0,,,,,camel-core,,,,0,,,,,The compound predicates created by PredicateBuilder should initialize their contained predicates/expressions.,,jensgr@gmx.net,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-04 14:38:47.0,,,,,,,,,,,"0|z0ka9k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mock: MockEndpoint doesn't init predicates,CAMEL-15808,13338838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jensgr@gmx.net,jensgr@gmx.net,04/Nov/20 14:12,05/Nov/20 05:56,13/Jul/23 08:33,05/Nov/20 05:56,3.6.0,,,3.7.0,,,,,camel-test,,,,0,,,,,"For Predicates added via
{code:java}
mock.expectedMessagesMatches(Perdicates... predicates) {code}
you can end up with NPE because those predicates never get initialized:

 
{code:java}
2020-11-04 15:11:14,244 [main] ERROR org.apache.camel.component.mock.MockEndpoint  - Caught exception on mock://myMock due to: null
java.lang.NullPointerException: null
	at org.apache.camel.support.builder.ExpressionBuilder$55.evaluate(ExpressionBuilder.java:1587) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:35) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:67) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:56) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.PredicateBuilder$2.matches(PredicateBuilder.java:69) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PredicateAssertHelper.doAssertMatches(PredicateAssertHelper.java:50) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:45) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:114) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint$9.assertOnIndex(MockEndpoint.java:813) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint.onExchange(MockEndpoint.java:1566) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint$1.process(MockEndpoint.java:303) ~[camel-mock-3.6.0.jar:3.6.0] {code}
 ",,jensgr@gmx.net,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-04 14:12:44.0,,,,,,,,,,,"0|z0ka8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple expression regression with contains operator in 3.6.0,CAMEL-15807,13338828,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,04/Nov/20 13:29,04/Nov/20 17:53,13/Jul/23 08:33,04/Nov/20 15:54,3.6.0,,,3.7.0,,,,,camel-language,,,,0,,,,,"Hello,

We noticed a regression in simple expressions that was introduced in Camel 3.6.0.

Consider the following routes
{noformat}
from(""timer:foo?repeatCount=1"")
    .setBody(constant(""The answer is 42.""))
    .choice()
        .when(simple(""${body} contains '42'"")).log(""We have an answer"")
        .otherwise().log(""We don't have an answer"");
{noformat}

It prints the ""otherwise"" message in Camel 3.6.0 but shouldn't. It works if the contains operator is {{' 42'}} (prefixed by a space) or is {{'answer'}}

Can you have a look at it? Thank you very much.",,antoine.dessaigne,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 04 17:53:03 UTC 2020,,,,,,,,,,,"0|z0ka6o:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"04/Nov/20 17:53;antoine.dessaigne;Thank you very much [~davsclaus];;;",,,,,,,,,,,,,,,,,,,
missing jar libraries in download zip,CAMEL-15803,13338722,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,emmerson,emmerson,03/Nov/20 21:01,04/Nov/20 06:01,13/Jul/23 08:33,04/Nov/20 06:01,3.6.0,,,3.4.5,3.7.0,,,,build system,,,,0,,,,,"Hi,

 

I downloaded camel 3.6.0 tar.gz file from below link and I found missing some camel libraries like camel-cdi

[https://camel.apache.org/download/]

 

I am working in a secure environment and the only way to have all camel jar files is downloading the tar.gz file (we have no access to any maven repo in internet), can you please amend that in order to start to use camel 3.6.0 in our microservices?

 

Regards,

Emmerson.

 ",,acosentino,emmerson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 04 06:01:58 UTC 2020,,,,,,,,,,,"0|z0k9j4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/20 06:01;acosentino;This has been fixed for 3.7 and 3.4.5. I don't the uploaded package for 3.6.0 can be amended.;;;","04/Nov/20 06:01;acosentino;You can always download the jar from maven central and add it to the exploded tar;;;",,,,,,,,,,,,,,,,,,
DefaultConfigurerResolver always resolves to ExtendedCamelContextConfigurer if name contains CamelContext,CAMEL-15801,13338714,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,mcollovati,mcollovati,03/Nov/20 19:53,03/Nov/20 20:57,13/Jul/23 08:33,03/Nov/20 20:57,3.6.0,,,3.7.0,,,,,camel-core,,,,0,,,,,"*DefaultConfigurerResolver* uses a special fallback for configurer names containing the string *CamelContext*, that tries to resolve a configurer against *ExtendedCamelContext* FQCN, that usually results into a *ExtendedCamelContextConfigurer*.

In some cases this can lead to *ClassCastException* due to an explicit cast to *ExtendedCamelContext* in *ExtendedCamelContextConfigurer.configure*, for example when using *PropertyBindingSupport*.

Trying to to bind a target bean whose FQCN contains *CamelContext* (eg *my.package.ClassNameWithCamelContextInside*) fails with the following exception:
{noformat}
Caused by: java.lang.ClassCastException: class my.package.ClassNameWithCamelContextInside cannot be cast to class org.apache.camel.ExtendedCamelContext (my.package.ClassNameWithCamelContextInside and org.apache.camel.ExtendedCamelContext are in unnamed module of loader 'app')
 at org.apache.camel.impl.ExtendedCamelContextConfigurer.configure(ExtendedCamelContextConfigurer.java:94)
 at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaConfigurer(PropertyBindingSupport.java:847){noformat}
The problem seems to be in the following snippet
{code:java}
if (name.contains(""CamelContext"")) {
 // fallback special for camel context itself as we have an extended configurer
 type = findConfigurer(ExtendedCamelContext.class.getName(), context);
 }{code}",,mcollovati,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-03 19:53:00.0,,,,,,,,,,,"0|z0k9hc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AWS2 S3 component option isIncludeFolders check fails in some cases,CAMEL-15797,13338672,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,filipeportes,filipeportes,03/Nov/20 15:33,30/Sep/21 10:34,13/Jul/23 08:33,03/Nov/20 15:43,3.5.0,3.6.0,,3.7.0,,,,,camel-aws2,,,,0,,,,,"with a recent update aws s3 started to send folder keys with the contentType as ""application/x-directory; charset=UTF-8"" by default

and the current check in the AWS2S3Consumer.java class only checks for: 
{code:java}
""application/x-directory"".equalsIgnoreCase
{code}
on line [https://github.com/apache/camel/blob/master/components/camel-aws2-s3/src/main/java/org/apache/camel/component/aws2/s3/AWS2S3Consumer.java#L221]

with this some keys, specially new ones, are not identified as folders and they are consumed as objects when the `isIncludeFolders` is set to false.",,filipeportes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-03 15:33:56.0,,,,,,,,,,,"0|z0k988:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsEndpoint recreates SSL context for each message,CAMEL-15794,13338587,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jensgr@gmx.net,jensgr@gmx.net,03/Nov/20 08:39,03/Nov/20 18:38,13/Jul/23 08:33,03/Nov/20 18:38,3.6.0,,,3.7.0,,,,,camel-cxfrs,,,,0,performance,,,,"CxfRsEndpoint contains this code in `_invoke*Client_`:

{code} WebClient client = cfb.createWebClient();
((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(client);{code}

This means, a new client is created on every request (ok, because possibly not thread-safe) and then configured. The configuration step includes an `_AbstractSslEndpointConfigurer_` which also recreates the _SSLSocketFactory_ on every call, and *that* includes re-opening and re-reading configured key and trust stores.

Doing this on every request obviously degrades performance significantly.",,davsclaus,jensgr@gmx.net,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 03 18:38:51 UTC 2020,,,,,,,,,,,"0|z0k8pc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Nov/20 18:38;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,
MethodNotFoundException when calling method on OSGi service reference in Blueprint,CAMEL-15793,13338485,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joshua.smith,joshua.smith,02/Nov/20 19:23,03/Nov/20 07:42,13/Jul/23 08:33,03/Nov/20 07:41,3.4.4,3.5.0,3.6.0,3.4.5,3.7.0,,,,karaf,osgi,,,0,,,,,"Camel throws an exception when trying to call a method on an OSGi service reference in Blueprint. For example:

 
{code:java}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
  <reference id=""helloWorldServiceRef"" interface=""com.example.HelloWorldService""/>
  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""simple"">
    <route>
      <from uri=""timer:simple?period=5000""/>
      <setBody>
        <method ref=""helloWorldServiceRef"" method=""greet()""/>
      </setBody>
      <to uri=""log:simplecamel""/>
    </route>
  </camelContext>
</blueprint>
{code}
Here's the exception thrown:
{code:java}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetBody[bean[ref:helloWorldServiceRef method:greet()]] <<< in route: Route(route1)[From[timer:simple?period=5000] -> [SetBody[bea... because of Method with name: greet() not found on bean: com.example.HelloWorldServiceImpl@604598c3 of type: Proxy7236e8f2_c140_49c7_a040_ac2eddfcda95
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:384) ~[?:?]
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:111) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:431) ~[?:?]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:393) ~[?:?]
	at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2606) ~[!/:3.6.0]
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[!/:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2378) ~[!/:3.6.0]
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[!/:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2395) ~[!/:3.6.0]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:241) ~[!/:3.6.0]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:283) ~[!/:3.6.0]
	at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:187) [!/:3.6.0]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) [!/:1.10.2]
	at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) [!/:1.10.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_242]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_242]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_242]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: greet() not found on bean: com.example.HelloWorldServiceImpl@604598c3 of type: Proxy7236e8f2_c140_49c7_a040_ac2eddfcda95
	at org.apache.camel.language.bean.BeanExpression.validateHasMethod(BeanExpression.java:268) ~[?:?]
	at org.apache.camel.language.bean.BeanExpression.init(BeanExpression.java:164) ~[?:?]
	at org.apache.camel.language.bean.BeanLanguage.createExpression(BeanLanguage.java:173) ~[?:?]
	at org.apache.camel.reifier.language.MethodCallExpressionReifier.createExpression(MethodCallExpressionReifier.java:57) ~[?:?]
	at org.apache.camel.reifier.language.ExpressionReifier.createExpression(ExpressionReifier.java:135) ~[?:?]
	at org.apache.camel.reifier.AbstractReifier.createExpression(AbstractReifier.java:113) ~[?:?]
	at org.apache.camel.reifier.SetBodyReifier.createProcessor(SetBodyReifier.java:34) ~[?:?]
	at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:752) ~[?:?]
	at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:495) ~[?:?]
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:382) ~[?:?]
	... 23 more
{code}
This bug was introduced by this change: [https://github.com/apache/camel/commit/47d8ff92de888d923a7f3734080aa5a6d3d5bbcc#diff-d57c2c1fc8e674a5764e3fbe2cdc565dc12ca07541b9d6a2d9345f6c46a3d2e5R97-R107]

The service reference has a class of Proxy7236e8f2_c140_49c7_a040_ac2eddfcda95 (see the stack trace), which is a synthetic class, so the type for the BeanInfo is set to its superclass, which in this case is java.lang.Object.",,joshua.smith,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15623,CAMEL-15435,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-11-02 19:23:41.0,,,,,,,,,,,"0|z0k82o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq - No way to bind AMQP queues to the default exchange,CAMEL-15791,13338444,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,pmontesano,pmontesano,02/Nov/20 15:11,22/Dec/20 08:42,13/Jul/23 08:33,22/Dec/20 08:42,3.1.0,,,3.4.0,,,,,camel-rabbitmq,,,,0,,,,,"When trying to bind an AMQP consumer queue via RabbitMQ to the *default* exchange, the following exception occurs.

This happens when declaring it like ...
* {{<from uri=""rabbitmq:default?queue=foobar""/>}}
* {{<from uri=""rabbitmq:amq.default?queue=foobar""/>}}
* {{<from uri=""rabbitmq:amqp.default?queue=foobar""/>}}

It's always the same exception:

{code:java}
java.io.IOException: null
    at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.ChannelN.queueBind(ChannelN.java:1077) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.recovery.AutorecoveringChannel.queueBind(AutorecoveringChannel.java:393) ~[amqp-client-5.7.3.jar:5.7.3]
    at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindQueue(RabbitMQDeclareSupport.java:135) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangeWithQueue(RabbitMQDeclareSupport.java:55) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangesAndQueuesUsing(RabbitMQDeclareSupport.java:36) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.declareExchangeAndQueue(RabbitMQEndpoint.java:231) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitConsumer.openChannel(RabbitConsumer.java:356) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitConsumer.reconnect(RabbitConsumer.java:325) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitMQConsumer$StartConsumerCallable.call(RabbitMQConsumer.java:223) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at org.apache.camel.component.rabbitmq.RabbitMQConsumer$StartConsumerCallable.call(RabbitMQConsumer.java:203) ~[camel-rabbitmq-3.1.0.jar:3.1.0]
    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
    at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=404, reply-text=NOT_FOUND - no exchange 'default' in vhost '/', class-id=50, method-id=20)
    at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141) ~[amqp-client-5.7.3.jar:5.7.3]
    ... 14 common frames omitted
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=404, reply-text=NOT_FOUND - no exchange 'default' in vhost '/', class-id=50, method-id=20)
    at com.rabbitmq.client.impl.ChannelN.asyncShutdown(ChannelN.java:522) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.ChannelN.processAsync(ChannelN.java:346) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:182) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:114) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQConnection.readFrame(AMQConnection.java:672) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQConnection.access$300(AMQConnection.java:48) ~[amqp-client-5.7.3.jar:5.7.3]
    at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:599) ~[amqp-client-5.7.3.jar:5.7.3]
    ... 1 common frames omitted
{code}",,acosentino,pmontesano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 20 15:43:54 UTC 2020,,,,,,,,,,,"0|z0k7tk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/20 15:21;acosentino;Report the camel version. It's unclear ;;;","02/Nov/20 15:24;pmontesano;Oh, sorry for that ;)
I will just add it.


{code:java}
<dependency>
    <groupId>org.apache.camel.springboot</groupId>
    <artifactId>camel-rabbitmq-starter</artifactId>
    <version>3.1.0</version>
</dependency>
{code}
;;;","02/Nov/20 15:32;acosentino;Please try with one of the release in LTS 3.4.4 is the last one or 3.6.0;;;","02/Nov/20 16:05;pmontesano;Thanks, we will try.;;;","03/Nov/20 07:12;pmontesano;[~acosentino] but nevertheless:
Is it really not possible to bind a queue only to the default exchange with {{3.1.0}}?
Seems like one of the core and practical functions of AMQP/RabbitMQ is not supported?;;;","03/Nov/20 07:18;acosentino;3.1.0 was just a release torwards the LTS release 3.4.0, that's why I'm telling to try with an LTS, because we can eventually fix in the next LTS release 3.4.5 or in 3.7.0 (which should be the second LTS of the year). ;;;","03/Nov/20 07:18;acosentino;So the basic suggestion is to move to an LTS release anyway.;;;","20/Nov/20 15:43;pmontesano;Okay thanks, upgrading to 3.4.4 helped.
Additionally, we had to bind to the queues like this:

{code:xml}
<route id=""fooRoute"">
    <!-- ... -->

    <from uri=""rabbitmq:?queue=foo.queue&amp;skipQueueBind=true""/>

    <!-- ... -->
</route>
{code};;;",,,,,,,,,,,,
Apache Camel Yammer component does not work in 3.x (from 3.1),CAMEL-15788,13338384,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,zlutor,zlutor,02/Nov/20 09:42,02/Nov/20 10:24,13/Jul/23 08:33,02/Nov/20 10:22,3.1.0,,,3.4.5,3.7.0,,,,,,,,0,,,,,"It seems there was some change in Camel 3.1 that broke Yammer: replacing explicit ‘function’ string value with name of ‘featureType’ enum makes Yammer API URLs invalid: e.g. [https://www.yammer.com/api/v1/messages.json] vs [https://www.yammer.com/api/v1/*MESSAGES*.json]

 

Details:
 * line #28 and line #96 in [https://github.com/apache/camel/blame/camel-3.1.x/components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerConfiguration.java]
 * line #44 in [https://github.com/apache/camel/blob/camel-3.1.x/components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerMessageProducer.java]
 * and other places where use of ‘function’ was replaced with name of “functionType” enum values...",,davsclaus,zlutor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 02 10:24:14 UTC 2020,,,,,,,,,,,"0|z0k7g8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/20 10:24;davsclaus;Thanks for reporting and pointing out where in the code the problems are.;;;",,,,,,,,,,,,,,,,,,,
Camel OpenAPI ignores apiVendorExtension option for REST binding,CAMEL-15786,13338310,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Tomasz Seweryński,Tomasz Seweryński,01/Nov/20 17:12,06/Dec/20 13:24,13/Jul/23 08:33,06/Dec/20 13:24,3.4.1,3.6.0,,3.7.0,,,,,camel-openapi-java,,,,0,,,,,"According to [https://camel.apache.org/manual/latest/rest-dsl.html] by default the apiVendorExtension option should be set to false. But even when I set it manually to false, the produced JSON for OpenAPI still contains the x- fields like ""x-camelContextId"", ""x-routeId"" etc.
 I've tried to set this option both in Java using restConfiguration().apiVendorExtension(false) and in application.yml file of my Spring Boot application:
{code:java}
camel:
  rest:
    api-vendor-extension: false{code}
I've checked it on two versions of Camel (3.4.1, 3.6.0), both with the same result.

Part of my pom.xml file:
{code:java}
<dependency>
    <groupId>org.apache.camel.springboot</groupId>
    <artifactId>camel-rest-starter</artifactId>
    <version>3.4.1</version>
</dependency>
<dependency>
    <groupId>org.apache.camel.springboot</groupId>
    <artifactId>camel-openapi-java-starter</artifactId>
    <version>3.4.1</version>
</dependency>
{code}
Could you please check it? I don't want to expose internal implementation details via OpenAPI JSON file.",,davsclaus,Tomasz Seweryński,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,"https://camel.apache.org/manual/latest/rest-dsl.html
https://issues.apache.org/jira/browse/CAMEL-11957",false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 02 05:21:33 UTC 2020,,,,,,,,,,,"0|z0k6zs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/20 05:21;davsclaus;If you have the time then you may want to look in the source code if that feature is missing and then look in the -swagger component how it does it, and copy that over to openapi and submit a PR. We love contributions;;;",,,,,,,,,,,,,,,,,,,
"[Website] suppress warnings for unimplemented camel-quarkus components; upgrade to Antora 3.0.0-alpha.1",CAMEL-15774,13337975,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,djencks,djencks,30/Oct/20 01:33,30/Oct/20 09:18,13/Jul/23 08:33,30/Oct/20 09:18,,,,,,,,,website,,,,0,,,,,"With Antora 3.0.0-alpha.1, include:: instructions can suppress ""asciidoctor: ERROR: atlasmap-component.adoc: line 11: include target not found: ..."" errors by including 

[opts=optional].  This modifies tooling to include this in the generated includes for cq bits, updates the generated files correspondingly, and upgrades the Antora version.",,djencks,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 30 09:18:44 UTC 2020,,,,,,,,,,,"0|z0k4xk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Oct/20 01:48;githubbot;djencks opened a new pull request #495:
URL: https://github.com/apache/camel-website/pull/495


   actual Antora version upgrade.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Oct/20 09:18;githubbot;zregvart merged pull request #495:
URL: https://github.com/apache/camel-website/pull/495


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Oct/20 09:18;githubbot;zregvart commented on pull request #495:
URL: https://github.com/apache/camel-website/pull/495#issuecomment-719439534


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","30/Oct/20 09:18;zregvart;Thanks [~djencks]!;;;",,,,,,,,,,,,,,,,
camel-main - can not use the camel.lra.enabled=true,CAMEL-15768,13337684,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,28/Oct/20 15:09,29/Oct/20 06:07,13/Jul/23 08:33,29/Oct/20 06:07,,,,3.7.0,,,,,camel-main,,,,0,,,,,"I just use the camel-example-main to reproducer this issue
 * add the camel-lra dependency in the pom.xml
 * add _camel.lra.enabled=true_ in the application.properties
 * re-compile and run the example

{noformat}
INFO] Using custom org.apache.camel.example.MyApplication to initiate a CamelContext
[INFO] Starting Camel ...
23:02:19.058 [org.apache.camel.example.MyApplication.main()] INFO  o.a.camel.support.LRUCacheFactory - Detected and using LRUCacheFactory: camel-caffeine-lrucache
23:02:19.161 [org.apache.camel.example.MyApplication.main()] INFO  o.apache.camel.main.BaseMainSupport - Using properties from: classpath:application.properties;optional=true
23:02:19.175 [org.apache.camel.example.MyApplication.main()] INFO  o.apache.camel.main.BaseMainSupport - Loaded additional 1 properties from file: src/main/data/foo.properties
23:02:19.243 [org.apache.camel.example.MyApplication.main()] INFO  o.a.c.i.e.DefaultBeanIntrospection - Invoked: 1 times (overall) [Method: setProperty, Target: org.apache.camel.service.lra.LRASagaService@13db0de, Arguments: [enabled, true]]
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.example.MyApplication
[ERROR] 
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:438)
    at java.lang.Thread.run (Thread.java:748)
Caused by: org.apache.camel.PropertyBindingException: Error binding property (camel.lra.enabled=true) with name: enabled on bean: lra-saga-service with value: true
    at org.apache.camel.main.MainHelper.setPropertiesOnTarget (MainHelper.java:192)
    at org.apache.camel.main.BaseMainSupport.setLraCheckProperties (BaseMainSupport.java:1041)
    at org.apache.camel.main.BaseMainSupport.doConfigureCamelContextFromMainConfiguration (BaseMainSupport.java:795)
    at org.apache.camel.main.BaseMainSupport.autoconfigure (BaseMainSupport.java:435)
    at org.apache.camel.main.BaseMainSupport.postProcessCamelContext (BaseMainSupport.java:522)
    at org.apache.camel.main.MainSupport.initCamelContext (MainSupport.java:320)
    at org.apache.camel.main.Main.doInit (Main.java:106)
    at org.apache.camel.support.service.BaseService.init (BaseService.java:83)
    at org.apache.camel.main.MainSupport.run (MainSupport.java:58)
    at org.apache.camel.main.MainCommandLineSupport.run (MainCommandLineSupport.java:156)
    at org.apache.camel.example.MyApplication.main (MyApplication.java:38)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:438)
    at java.lang.Thread.run (Thread.java:748)

{noformat}

 ",,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15164,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-10-28 15:09:30.0,,,,,,,,,,,"0|z0k34w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - No converter found capable of converting from type [java.lang.String] to type [org.apache.camel.component.http.HttpClientConfigurer],CAMEL-15766,13337428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,santa.85,santa.85,27/Oct/20 13:28,16/Nov/20 15:05,13/Jul/23 08:33,16/Nov/20 15:05,3.6.0,,,3.7.0,,,,,camel-http,camel-spring-boot,,,0,,,,,"When trying to use a custom http-configurer, I believe I am experiencing a regression when upgrading to Camel 3.6.0

I am using spring-boot 2.3.4.RELEASE, and I am declaring my custom configurer bean using:
{code:java}
camel.component.http.http-client-configurer=#httpClientConfig
{code}
When updating to Camel 3.6.0, that configuration results in: 
{code:java}
***************************
APPLICATION FAILED TO START
***************************


Description:


Failed to bind properties under 'camel.component.http.http-client-configurer' to org.apache.camel.component.http.HttpClientConfigurer:


    Property: camel.component.http.http-client-configurer
    Value: httpClientConfig
    Origin: class path resource [application.properties]:1:45
    Reason: No converter found capable of converting from type [java.lang.String] to type [org.apache.camel.component.http.HttpClientConfigurer]


Action:


Update your application's configuration{code}
 

See [https://github.com/santam85/camel-3.6.0-http-configurer-bean] for a reproduction example.",,davsclaus,dmvolod,santa.85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14672,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 15 18:42:53 UTC 2020,,,,,,,,,,,"0|z0k1k0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Oct/20 09:46;dmvolod;The debug of the problem

{code:java}
2020-10-30 10:17:15.122 WARN 528990 --- [ main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apache.camel.component.http.springboot.HttpComponentAutoConfiguration': Unsatisfied dependency expressed through field 'configuration'; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'camel.component.http-org.apache.camel.component.http.springboot.HttpComponentConfiguration': Could not bind properties to 'HttpComponentConfiguration' : prefix=camel.component.http, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'camel.component.http.http-client-configurer' to org.apache.camel.component.http.HttpClientConfigurer
{code}

;;;","13/Nov/20 10:41;davsclaus;Argh spring boot you are a mystery black box. So its hard to get a hook into your binding system.

Writing custom converter from String -> each class is maybe required. And not sure how to get all those type converters automatic registered in spring boot - its annotation magic can be a hell.;;;","13/Nov/20 10:45;dmvolod;[~davsclaus] not sure that's related to conversion. It's related to the modified Customizers logic as it's calling later than Spring requires custom httpClientConfig for binding.;;;","15/Nov/20 18:42;davsclaus;Okay we need to source code generate a converter where we can do the lookup

A prototype
{code}
package org.apache.camel.component.http.springboot;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.CamelContext;
import org.springframework.core.convert.TypeDescriptor;
import org.springframework.core.convert.converter.GenericConverter;

public class DeleteMe implements GenericConverter {

    private final CamelContext camelContext;

    public DeleteMe(CamelContext camelContext) {
        this.camelContext = camelContext;
    }

    @Override
    public Set<ConvertiblePair> getConvertibleTypes() {
        Set<ConvertiblePair> answer = new LinkedHashSet<>();
        answer.add(new ConvertiblePair(String.class, org.apache.camel.component.http.HttpClientConfigurer.class));
        answer.add(new ConvertiblePair(String.class, org.apache.http.conn.HttpClientConnectionManager.class));
        return answer;
    }

    @Override
    public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
        if (source == null) {
            return null;
        }
        String ref = source.toString().substring(1);
        switch (targetType.getName()) {
            case ""org.apache.camel.component.http.HttpClientConfigurer"": return camelContext.getRegistry().lookupByNameAndType(ref, org.apache.camel.component.http.HttpClientConfigurer.class);
            case ""org.apache.http.conn.HttpClientConnectionManager"": return camelContext.getRegistry().lookupByNameAndType(ref, org.apache.http.conn.HttpClientConnectionManager.class);
        }
        return null;
    }

}
{code};;;",,,,,,,,,,,,,,,,
org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'blueprintBundle' could be found,CAMEL-15760,13337245,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joshua.smith,joshua.smith,26/Oct/20 16:36,03/Nov/20 06:03,13/Jul/23 08:33,02/Nov/20 19:56,3.4.4,,,3.4.5,3.7.0,,,,camel-blueprint,,,,0,,,,,"Whenever refreshing a bundle that creates a camel context via blueprint, the warning below appears in the logs:
{code:java}
16:11:44.779 WARN [Blueprint Event Dispatcher: 1] Error occurred while stopping lifecycle strategies. This exception will be ignored.
org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'blueprintBundle' could be found
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:805) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.lookupByType(BlueprintContainerBeanRepository.java:104) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.lookupByType(BlueprintContainerBeanRepository.java:100) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.findByType(BlueprintContainerBeanRepository.java:94) ~[?:?]
 at org.apache.camel.support.DefaultRegistry.findByType(DefaultRegistry.java:203) ~[!/:3.4.4]
 at org.apache.camel.impl.engine.OnCamelContextLifecycleStrategy.onContextStop(OnCamelContextLifecycleStrategy.java:60) ~[!/:3.4.4]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStop(AbstractCamelContext.java:2910) [!/:3.4.4]
 at org.apache.camel.support.service.BaseService.stop(BaseService.java:155) [!/:3.4.4]
 at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:194) [!/:3.4.4]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) [!/:1.10.2]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) [!/:1.10.2]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_242]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_242]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_242]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_242]
 at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]{code}
It appears that the Blueprint container is being destroyed before the camel context, but the camel context tries to access the bundle when stopping. And since the blueprint container is already destroyed, that fails.

Reverting this change fixes the warnings: https://issues.apache.org/jira/browse/CAMEL-14332

Note: Everything appears to work fine when the bundle is started. Still, the warnings are concerning
h3. To reproduce:
 # Create a bundle with this blueprint.xml

{code:java}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""camelContext""/>
</blueprint>
{code}
 # Install in Karaf
 # Refresh the bundle",,joshua.smith,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14332,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 02 21:02:21 UTC 2020,,,,,,,,,,,"0|z0k0fc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/20 21:02;joshua.smith;Thanks [~davsclaus]! Could you backport this to 3.4.x as well?;;;",,,,,,,,,,,,,,,,,,,
Camel-Kafka: Exception java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonNode on Camel-Kafka component,CAMEL-15752,13337050,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,ppatierno,ppatierno,24/Oct/20 17:46,30/Jan/21 05:59,13/Jul/23 08:33,26/Oct/20 14:03,3.6.0,,,3.7.0,,,,,camel-kafka,,,,0,,,,,"Hi,

I have an application using camel-kafka 3.4.4 (which has kafka 2.5.0 as dependency).

When I switch to use camel-kafka 3.6.0 (which has kafka 2.6.0 as dependency), I get the following exception.

 {{020-10-24 19:23:45 ERROR KafkaThread:49 - Uncaught exception in thread 'kafka-producer-network-thread | raw-packets':
{noformat}
 java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonNode
 at org.apache.kafka.common.requests.ApiVersionsRequest$Builder.<clinit>(ApiVersionsRequest.java:36)
 at org.apache.kafka.clients.NetworkClient.handleConnections(NetworkClient.java:910)
 at org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:555)
 at org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:325)
 at org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:240)
 at java.base/java.lang.Thread.run(Thread.java:834)
 Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.JsonNode
 at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
 at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
 at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
 ... 6 more}}{noformat}
Adding the explicit dependency to jackson-databind as following solves the problem
{code:java}
<dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.11.3</version>
</dependency>
{code}
As reference, this is the parent pom.xml in my project where I set camel-kafka version (but even Kafka version, which is used in other modules).

[https://github.com/ppatierno/formula1-telemetry-kafka/blob/master/pom.xml]

and following the pom.xml of the specific application using camel-kafka (where I have to add the jackson-databind reference for fixing the exception).

[https://github.com/ppatierno/formula1-telemetry-kafka/blob/master/f1-telemetry-udp-kafka/pom.xml]

 ",,acosentino,jbonofre,ppatierno,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 30 05:59:47 UTC 2021,,,,,,,,,,,"0|z0jz80:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Oct/20 13:53;acosentino;It's a version problem. In Kafka 2.6.0 the Jackson version is still 2.10.2, but Camel switched to 2.11.3. So we need to declare them explicitly in the POM of camel-kafka and we need to exclude the version from kafka.;;;","30/Jan/21 05:59;jbonofre;We also need fixed vers of Kafka SMX bundles for Camel Kafka feature. I'm doing it.;;;",,,,,,,,,,,,,,,,,,
camel-undertow-spring-security-starter always forbidden,CAMEL-15750,13337033,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,dschulten,dschulten,24/Oct/20 13:35,04/Apr/21 06:52,13/Jul/23 08:33,30/Mar/21 14:37,3.5.0,,,3.10.0,,,,,camel-spring-security,camel-undertow,,,0,,,,,"Example: [https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-undertow-spring-security]

Make sure port 8081 is not in use.

All requests to [http://localhost:8082/hi] get a 403 response, no matter if I send an oauth Token or not. The oauth token itself seems correct, I have decoded it on jwt.io  and it shows that the role is present:
{code:java}
 {
  ""exp"": 1603546060,
  ""iat"": 1603546000,
  ""jti"": ""3392de8c-8309-4187-8b9a-9f8edaefe226"",
  ""iss"": ""http://localhost:8080/auth/realms/master"",
  ""aud"": ""account"",
  ""sub"": ""4612ff79-81a8-4209-a7f7-fd4b963c574e"",
  ""typ"": ""Bearer"",
  ""azp"": ""example-service"",
  ""session_state"": ""693f9c78-2e54-447e-9749-ce6a1288877d"",
  ""acr"": ""1"",
  ""allowed-origins"": [
    ""http://localhost:8082""
  ],
  ""realm_access"": {
    ""roles"": [
      ""role01"",
      ""offline_access"",
      ""uma_authorization""
    ]
  },
  ""resource_access"": {
    ""account"": {
      ""roles"": [
        ""manage-account"",
        ""manage-account-links"",
        ""view-profile""
      ]
    }
  },
  ""scope"": ""email profile"",
  ""email_verified"": false,
  ""preferred_username"": ""user01""
}{code}
 

The reason seems to be that the camel-undertow-spring-security-starter tries to start two Undertow servlets: the Spring Undertow servlet runs on port 8081, and the Camel Undertow servlet on port 8082. Only the Spring servlet has token security, but not the Camel Undertow Servlet.

In the log below you see that the org.springframework.boot.web.embedded.undertow.UndertowWebServer starts on port 8081, and it receives the filter chain with the BearerTokenAuthenticationFilter.

Then the org.apache.camel.component.undertow.DefaultUndertowHost comes up on port 8082. The log message {{Illegal state caused by missing securitProvider but existing allowed roles!}} which is written for every request to _/hi_ also seems to show that no securityProvider is configured on the DefaultUndertowHost which runs on port 8082.
{code:java}
   .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.3.RELEASE)2020-10-24 15:08:26.339  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : Starting Application on DZS20N436 with PID 27932 (C:\Users\Schulten\Documents\projekte\camel-spring-boot-examples-3.5.0\camel-example-spring-boot-undertow-spring-security\target\classes started by Schulten in C:\Users\Schulten\Documents\projekte\camel-spring-boot-examples-3.5.0\camel-example-spring-boot-undertow-spring-security)
2020-10-24 15:08:26.343  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : No active profile set, falling back to default profiles: default
2020-10-24 15:08:28.378  INFO 27932 --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext
2020-10-24 15:08:28.381  INFO 27932 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1954 ms
2020-10-24 15:08:28.770  INFO 27932 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5395ea39, org.springframework.security.web.context.SecurityContextPersistenceFilter@5c41d037, org.springframework.security.web.header.HeaderWriterFilter@6d64b553, org.springframework.security.web.csrf.CsrfFilter@12477988, org.springframework.security.web.authentication.logout.LogoutFilter@29a23c3d, org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter@43b0ade, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ec77191, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@796d3c9f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1517f633, org.springframework.security.web.session.SessionManagementFilter@757529a4, org.springframework.security.web.access.ExceptionTranslationFilter@203dd56b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@522b2631]
2020-10-24 15:08:28.876  INFO 27932 --- [           main] o.apache.camel.support.LRUCacheFactory   : Detected and using LRUCacheFactory: camel-caffeine-lrucache
2020-10-24 15:08:29.309  INFO 27932 --- [           main] io.undertow                              : starting server: Undertow - 2.1.3.Final
2020-10-24 15:08:29.316  INFO 27932 --- [           main] org.xnio                                 : XNIO version 3.8.0.Final
2020-10-24 15:08:29.324  INFO 27932 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.8.0.Final
2020-10-24 15:08:29.419  INFO 27932 --- [           main] org.jboss.threads                        : JBoss Threads version 3.1.0.Final
2020-10-24 15:08:29.472  INFO 27932 --- [           main] o.s.b.w.e.undertow.UndertowWebServer     : Undertow started on port(s) 8081 (http)
2020-10-24 15:08:29.490  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML routes from: classpath:camel/*.xml
2020-10-24 15:08:29.495  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
2020-10-24 15:08:29.497  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
2020-10-24 15:08:29.652  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.5.0 (camel-1) is starting
2020-10-24 15:08:29.655  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2020-10-24 15:08:29.656  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Using HealthCheck: camel-health
2020-10-24 15:08:29.669  INFO 27932 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:8082
2020-10-24 15:08:29.669  INFO 27932 --- [           main] io.undertow                              : starting server: Undertow - 2.1.3.Final
2020-10-24 15:08:29.681  INFO 27932 --- [           main] o.a.c.i.e.InternalRouteStartupManager    : Route: route1 started and consuming from: http://localhost:8082/hi
2020-10-24 15:08:29.687  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Total 1 routes, of which 1 are started
2020-10-24 15:08:29.688  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.5.0 (camel-1) started in 0.035 seconds
2020-10-24 15:08:29.696  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : Started Application in 3.809 seconds (JVM running for 4.35)
2020-10-24 15:10:41.530  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:13:16.234  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:13:53.090  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:15:22.183  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:16:38.260  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!{code}
 ","Windows 10, Java 8",davsclaus,dschulten,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 04 06:52:17 UTC 2021,,,,,,,,,,,"0|z0jz48:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Oct/20 14:51;davsclaus;I would assume you should use the same port number as spring boot, eg in your example 8081.;;;","26/Oct/20 07:42;dschulten;Please note that I am not using my own example, I am using the *official* undertow spring security example.

Unfortunately using the same port does not help.

I changed the port 8082 in the route to 8081 as follows:
{code:java}
from(""undertow:http://localhost:8081/hi?allowedRoles=role02"")
        .transform(simple(""Hello ${in.header."" + SpringSecurityProvider.PRINCIPAL_NAME_HEADER + ""}!""))
        .log(""content: ${body}"");{code}
Both Undertow servlets try to start on the same port, and that fails:
{code:java}
2020-10-26 08:40:36.699 INFO 17448 — [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8081 (http)
 2020-10-26 08:40:36.711 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML routes from: classpath:camel/*.xml
 2020-10-26 08:40:36.712 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
 2020-10-26 08:40:36.712 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
 2020-10-26 08:40:37.029 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : Apache Camel 3.5.0 (camel-1) is starting
 2020-10-26 08:40:37.032 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at [http://camel.apache.org/stream-caching.html]
 2020-10-26 08:40:37.033 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : Using HealthCheck: camel-health
 2020-10-26 08:40:37.049 INFO 17448 — [ main] o.a.c.c.undertow.DefaultUndertowHost : Starting Undertow server on [http://localhost:8081|http://localhost:8081/]
 2020-10-26 08:40:37.049 INFO 17448 — [ main] io.undertow : starting server: Undertow - 2.1.3.Final
 2020-10-26 08:40:37.076 WARN 17448 — [ main] o.a.c.c.undertow.DefaultUndertowHost : Failed to start Undertow server on [http://localhost:8081|http://localhost:8081/], reason: java.net.BindException: Address already in use: bind
{code}
 Since the undertow camel spring security component does not seem to work at all, I am changing the severity back to Major.;;;","28/Oct/20 07:55;dschulten;Apparently the problem arises because the undertow:http endpoint starts its own undertow instance, whereas Spring starts yet another instance. Is it possible to let the route use the Spring undertow instance somehow?;;;","25/Mar/21 13:03;dschulten;The fix only partially solves the problem. If you run the application again and again, you will find that sometimes the following line is missing in the log output:

{{o.a.c.c.undertow.UndertowComponent : Security provider found java.util.ServiceLoader}}

If it is missing, security setup fails and you still get Forbidden with a log output of

{{o.a.c.c.undertow.UndertowConsumer : Illegal state caused by missing securitProvider but existing allowed roles}}

I could narrow it down to the following:

{{UndertowSpringSecurityCustomizer.configure}} must be called before {{UndertowComponent.doInit}} to make security work.

However, in {{CustomizersLifecycleStrategy.onComponentAdd}} we pull a list of {{ComponentCustomizer}} s out of the registry. It contains two Customizers: {{UndertowSpringSecurityCustomizer}} and {{UndertowComponentAutoConfiguration$1}} (= UndertowComponentAutoConfiguration#configureUndertowComponent )

Their order is random. They get sorted by their getOrder attribute, but that is 0 in both cases.

Only if the {{UndertowSpringSecurityCustomizer}} ends up being first in list, security works.

A possible fix appears to be returning a value from {{UndertowSpringSecurityCustomizer.getOrder}} which ensures that it will always be processed before {{UndertowComponentAutoConfiguration$1}}.;;;","25/Mar/21 14:36;davsclaus;You are welcome to create a PR with such a change in the order;;;","30/Mar/21 14:37;davsclaus;I changed the code so the security customizer is run before, by retuning -1 in its getOrder.

Thanks Dietrich for the suggest fix.;;;","04/Apr/21 06:52;dschulten;Just when I was going to provide the PR ;-);;;",,,,,,,,,,,,,
Unable to configure hash symbol as commentMarker for csv data format,CAMEL-15749,13337028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,vzh,vzh,24/Oct/20 11:28,28/Oct/20 16:01,13/Jul/23 08:33,28/Oct/20 16:01,3.6.0,,,3.7.0,,,,,camel-csv,,,,0,,,,,"Hi all,

I tried to run my camel configuration (after update to camel 3.6.0, previously running 3.0.6 without an issue) and got following error:

 
{noformat}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Unmarshal[org.apache.camel.model.dataformat.CsvDataFormat@192613f] <<< in route: Route(route1)[From[direct://test] -> [Unmarshal[org.apache.c... because of Error binding property (commentMarker=#) with name: commentMarker on bean: org.apache.camel.dataformat.csv.CsvDataFormat@42dc5a with value: #
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:384) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:111) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:431) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:393) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2606) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2378) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2395) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:130) ~[camel-spring-3.6.0.jar:3.6.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:167) ~[camel-spring-3.6.0.jar:3.6.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at test.App.main(App.java:17) [classes/:na]
Caused by: org.apache.camel.PropertyBindingException: Error binding property (commentMarker=#) with name: commentMarker on bean: org.apache.camel.dataformat.csv.CsvDataFormat@42dc5a with value: #
	at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaConfigurer(PropertyBindingSupport.java:849) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:609) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doBuildPropertyOgnlPath(PropertyBindingSupport.java:481) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:376) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.access$100(PropertyBindingSupport.java:87) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:1859) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.configureDataFormat(DataFormatReifier.java:262) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.createDataFormat(DataFormatReifier.java:218) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.getDataFormat(DataFormatReifier.java:194) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.getDataFormat(DataFormatReifier.java:154) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.UnmarshalReifier.createProcessor(UnmarshalReifier.java:35) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:752) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:495) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:382) ~[camel-core-engine-3.6.0.jar:3.6.0]
	... 24 common frames omitted
Caused by: org.apache.camel.NoSuchBeanException: No bean could be found in the registry for:  of type: java.lang.Character
	at org.apache.camel.support.CamelContextHelper.mandatoryLookupAndConvert(CamelContextHelper.java:253) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.EndpointHelper.resolveReferenceParameter(EndpointHelper.java:290) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.EndpointHelper.resolveReferenceParameter(EndpointHelper.java:250) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.component.PropertyConfigurerSupport.property(PropertyConfigurerSupport.java:53) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.dataformat.csv.CsvDataFormatConfigurer.configure(CsvDataFormatConfigurer.java:24) ~[camel-csv-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaConfigurer(PropertyBindingSupport.java:847) ~[camel-support-3.6.0.jar:3.6.0]
	... 37 common frames omitted
{noformat}
seems like it is impossible to specify '#' hash symbol as commentMarker or delimiter for csv data format. Reproducible with xml configuration only.

 

config files/sample application attached. I appreciate if you take a look at this

BR

 ",,dmvolod,vzh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/20 11:29;vzh;App.java;https://issues.apache.org/jira/secure/attachment/13014060/App.java","24/Oct/20 11:29;vzh;pom.xml;https://issues.apache.org/jira/secure/attachment/13014062/pom.xml","24/Oct/20 11:29;vzh;test.xml;https://issues.apache.org/jira/secure/attachment/13014061/test.xml",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 26 17:15:32 UTC 2020,,,,,,,,,,,"0|z0jz34:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Oct/20 17:15;dmvolod;The reason of the problem why it happens, hash symbol (#) is a property binding sign a tries to parse value.

For Character it doesn't make sense as it's only one symbol and looks like need to be fixed in core.;;;",,,,,,,,,,,,,,,,,,,
Paho consumer never connects if the broker is not reachable at startup,CAMEL-15748,13337022,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mcollovati,mcollovati,24/Oct/20 08:46,03/Nov/20 13:47,13/Jul/23 08:33,02/Nov/20 05:20,3.4.4,3.5.0,3.6.0,3.4.5,3.7.0,,,,camel-paho,,,,0,,,,,"Having a route with a paho consumer in a route, if the broker is not reachable at startup, camel context fail fast and shuts down.


 This can be avoided by setting the *SupervisingRouteController*, but this way, even if camel context does not fail, the consumer is never able to establish a connection.

The reason is that when *PahoConsumer* starts for the first time, it creates a *MqttClient* and stores it into *client* field; the call to *client.connect* throws an exception due to broker down;

 
{code:java}
 
    @Override
    protected void doStart() throws Exception {
        super.doStart();        connectOptions = PahoEndpoint.createMqttConnectOptions(getEndpoint().getConfiguration());        if (client == null) {
            clientId = getEndpoint().getConfiguration().getClientId();
            if (clientId == null) {
                clientId = ""camel-"" + MqttClient.generateClientId();
            }
            stopClient = true;
            client = new MqttClient(
                    getEndpoint().getConfiguration().getBrokerUrl(),
                    clientId,
                    PahoEndpoint.createMqttClientPersistence(getEndpoint().getConfiguration()));
            LOG.debug(""Connecting client: {} to broker: {}"", clientId, getEndpoint().getConfiguration().getBrokerUrl());
            client.connect(connectOptions);
        }
        
        // other code omitted for brevity
        
        client.subscribe(getEndpoint().getTopic(), getEndpoint().getConfiguration().getQos());{code}
 

after that *doStop* is invoked but the *client* instance is not nullified, because it is not connected

 
{code:java}
    @Override
    protected void doStop() throws Exception {
        super.doStop();        if (stopClient && client != null && client.isConnected()) {
            String topic = getEndpoint().getTopic();
            // only unsubscribe if we are not durable
            if (getEndpoint().getConfiguration().isCleanSession()) {
                LOG.debug(""Unsubscribing client: {} from topic: {}"", clientId, topic);
                client.unsubscribe(topic);
            } else {
                LOG.debug(""Client: {} is durable so will not unsubscribe from topic: {}"", clientId, topic);
            }
            LOG.debug(""Disconnecting client: {} from broker: {}"", clientId, getEndpoint().getConfiguration().getBrokerUrl());
            client.disconnect();
            client = null;
        }
    }
{code}
 

when the supervisor tries to restart the route, *client* instance already exists, but the call to *client.subscribe* fails because the client is not connected.

Perhaps always nullify *client* in *doStop* should resolve the issue; however I have no idea it this solution will impact in other ways.


 A better solution may be to handle automatic reconnect in the consumer, like *RabbitConsumer* does, for example.",,davsclaus,mcollovati,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/20 09:41;mcollovati;PahoConsumerRestartTest.java;https://issues.apache.org/jira/secure/attachment/13014058/PahoConsumerRestartTest.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 01 20:03:53 UTC 2020,,,,,,,,,,,"0|z0jz1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Oct/20 08:53;davsclaus;Can you try testing with setting the value to null.

Supervising route controller is the better way as otherwise having to build in auto reconnection logic in 100+ components each with all kind of their own way is not ideal, vs having camel route controller managing it which can also be consistently managed and monitored.

And btw on cloud systems you have readiness checks where the cloud system will restart / reschedule the app. ;;;","24/Oct/20 09:36;mcollovati;Also noticed two different behaviours in 3.5 (paho 1.2.4)  and 3.6 (paho 1.2.5): in 3.5 *MqttClient.connect* immediately fails if broker is down, whereas in 3.6 it hangs forever.;;;","24/Oct/20 09:41;mcollovati;Thank you for the explanation [~davsclaus].

Nullifying client works for me ; i tested it extending `PahoConsumer` and overriding `doStop` as in the attached test  [^PahoConsumerRestartTest.java];;;","24/Oct/20 18:27;davsclaus;Thanks Marco. I wonder if you want to contribute this as a github PR and include the unit test. You can do this on 3.4.x branch and we can forward patch it on master - although most of the time we prefer master first.;;;","24/Oct/20 18:38;mcollovati;I'll be glad to contribute; I'll open a PR as soon as possible.

 ;;;","25/Oct/20 15:45;davsclaus;Merged to 3.4.x branch *DONE*

TODO: master branch;;;","25/Oct/20 16:30;mcollovati;[~davsclaus] I'm working on a PR for master, but I have a problem with the test.

As mentioned above, with paho 1.2.5 the call to MqttClient.connect hangs indefinitely, regardless the connection timeout settings.

Can this be handled somehow in test code?

The only workaround I found is to set *timeToWait* on MqttClient and reset it to *-1* after connection is established, but I think this is not a good idea
{code:java}
client.setTimeToWait(1000 + getEndpoint().getConfiguration().getConnectionTimeout() * 1000);
client.connect(connectOptions);
client.setTimeToWait(-1);

{code}

Does it make sense to add a `connectTimeToWait` configuration on PahoConfiguration?;;;","26/Oct/20 13:07;davsclaus;Maybe its a bug in paho 1.2.5 - not sure if you can research this / or get in touch with them so they are aware of this;;;","26/Oct/20 21:00;mcollovati;I think the reason of the hang is this change in paho *CommsReceiver*, inside `run` main loop

{code:java}
// paho 1.2.4
if (message != null) {
	// A new message has arrived
	clientState.notifyReceivedMsg(message);
}  
else {
    // fix for bug 719
	if (!clientComms.isConnected()) {
		throw new IOException(""Connection is lost."");
	}
}


// paho 1.2.5
if (message != null) {
	// A new message has arrived
	clientState.notifyReceivedMsg(message);
}  
else {
	// fix for bug 719
	if (!clientComms.isConnected() && !clientComms.isConnecting()) {
        throw new IOException(""Connection is lost."");
	}
}
{code}

During connection attempt *clientComms* is in status connecting; when broker is down a null message is received and, in paho 1.2.4,an exception is immediately thrown because *clientComms* is not connected. In 1.2.5 however the exception is never throw because *clientComms* is in connecting state and this leads to an infinite loop.

The issue 719, mentioned in the comment, is also referred by other issues but none of this are about infinite loops.
I can try to do some additional research on paho issue tracker and to get in touch to understand if this is a bug or an expected behavior, but this may take some time because I can do it only on my spare time.
;;;","31/Oct/20 09:30;mcollovati;Opened an issue on paho java issue tracker: https://github.com/eclipse/paho.mqtt.java/issues/843
Waiting for feedback;;;","01/Nov/20 20:03;mcollovati;Created the PR for master.

The problem was in the test, not in paho client.

When adding a connector to ActiveMQ **BrokerService** the server socket is immediately available,even if *BrokerService.start* is not invoked.
So paho client can establish a connection, but it receives *null* messages do to socket read time out, and this leads to an infinite loop.

Moving *addConnector* immediately before broker start in test does the trick.;;;",,,,,,,,,
xpath uses previous return type definition,CAMEL-15742,13336784,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Holu,Holu,22/Oct/20 18:23,23/Oct/20 07:12,13/Jul/23 08:33,23/Oct/20 07:12,3.6.0,,,3.7.0,,,,,camel-core,,,,0,,,,,"The 3.6.0 version brakes our route tests.

In the code below we have two xpath expressions. Debugging shows, that the second one in split uses Long.class as return type for evaluation which is wrong and split silently fails (No split done).

if you remove 
{code:java}
 .setProperty(""BOOK_COUNT"", xpath( ""//Books/@count"", Long.class))
{code}
test will pass.

Verified by test based on Camel Quarkus :: Examples :: Rest Json

<camel-quarkus.version>1.3.0</camel-quarkus.version>
 <quarkus.version>1.9.0.Final</quarkus.version>
{code:java}
package org.acme.rest.json;
import org.apache.camel.builder.RouteBuilder;
import java.util.concurrent.atomic.AtomicInteger;

public class Routes extends RouteBuilder {

    private AtomicInteger splitCount = new AtomicInteger();

    @Override
    public void configure() throws Exception {
        from(""platform-http:/xpathtest?httpMethodRestrict=POST"")
                .process(exchange -> splitCount.set(0))
                .setProperty(""BOOK_COUNT"", xpath( ""//Books/@count"", Long.class))
                .split(xpath(""//Books/Book""))
                    .process(exchange -> splitCount.getAndIncrement())
                .end()
                .setBody(exchange -> splitCount.get())
                .marshal().json();

    }
}
{code}
*TEST: *
{code:java}
package org.acme.rest.json;import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;@QuarkusTest
public class RestJsonTest {    @Test
    public void xpath() {
        given()
                .body(""<?xml version=\""1.0\"" encoding=\""iso-8859-1\""?>\n"" +
                        ""<Books count=\""2\""><Book Id=\""1\"" ISBN=\""1\""><Titel>First</Titel> </Book>"" +
                        ""<Book Id=\""2\"" ISBN=\""2\""><Titel>SECOND</Titel> </Book>"" +
                        ""</Books>"")
                .header(""Content-Type"", ""application/xml"")
                .when()
                .post(""/xpathtest"")
                .then()
                .statusCode(200)
                .body(is(""2""));
    }}
{code}",,davsclaus,Holu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 23 07:12:38 UTC 2020,,,,,,,,,,,"0|z0jxl4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Oct/20 18:44;davsclaus;Try set Object.class as return type for the 2nd;;;","22/Oct/20 20:10;Holu;[~davsclaus] I did it as a temp fix already, but it's still a bug, isn't it? ;;;","23/Oct/20 07:12;davsclaus;Yes its a little bug which is now fixed. Thanks for reporting and with the sample code;;;",,,,,,,,,,,,,,,,,
NPE when using PostgresAggregationRepository,CAMEL-15723,13336440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,corina.roman,corina.roman,21/Oct/20 09:40,04/Nov/21 01:29,13/Jul/23 08:33,03/Nov/21 08:04,3.4.2,,,3.13.0,,,,,camel-sql,,,,0,,,,,"Hi,

we are getting production errors (NPE) when using a Postgres aggregate repository and Camel code attempts to write to that table (under concurrent use):
{noformat}
org.apache.camel.RuntimeCamelException: java.lang.RuntimeException: Error adding to repository lb_data_uploads with key *** at org.apache.camel.RuntimeCamelException.wrapRuntimeCamelException(RuntimeCamelException.java:52) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:142) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregationRepositoryAdd(AggregateProcessor.java:644) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:598) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:406) at org.apache.camel.processor.aggregate.AggregateProcessor.doInOptimisticLock(AggregateProcessor.java:372) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:362) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:702) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:616) at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.doRun(KafkaConsumer.java:346) at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:222) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:834) Caused by: java.lang.RuntimeException: Error adding to repository lb_data_uploads with key *** at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:176) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:149) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:149) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:137) ... 21 common frames omitted Caused by: java.lang.NullPointerException: null at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:167) ... 25 common frames omitted{noformat}
 

The problematic code seems to be at *JdbcAggregationRepository.java* line 167:
{noformat}
private static final String VERSION_PROPERTY = ""CamelOptimisticLockVersion"";
....
long version = exchange.getProperty(VERSION_PROPERTY, Long.class);
{noformat}
 ","* Apache Camel 3.4.2
 * Spring Boot 2.3.4.RELEASE
 * Postgres database as an aggregate repository",bbonnet,corina.roman,davibo_winnow,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 02 10:08:46 UTC 2021,,,,,,,,,,,"0|z0jvgw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Oct/20 09:55;davsclaus;I think we fixed something related to this. Can you try latest 3.4.x release.;;;","06/Dec/20 17:28;davsclaus;Make sure that the database table has the version coulmn, see the init.sql scripts in src/main/resources;;;","30/Jul/21 11:41;bbonnet;Hi,

we are getting the same issue on a 3.7.5 release. 

java.lang.NullPointerExceptionjava.lang.NullPointerException at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:171)

Incriminated line (171) contains same code as the one reported by [~corina.roman] 
|long version = exchange.getProperty(VERSION_PROPERTY, Long.class);|

Could you please reopen that issue ?

Regards;;;","30/Jul/21 11:49;davsclaus;What are you doing as it smells like the version property gets lost and you hit that NPE.

If you can put a sample project or post more what you do in your route that would help.
Also you can debug to see what goes on in your app;;;","30/Jul/21 13:23;bbonnet;I would rather suspect exchange to be null.

We may have an explanation : we have 2 JdbcAggregationRepositories persisting data into the same pair of tables. We need to fix that and go on investigating.  ;;;","02/Nov/21 10:08;bbonnet;Hi,

We reproduced that issue on a heavy-loaded karaf with camel 3.11.2. This time, our aggregate has its own table. It is configured with optimistickLocking=true


It seems that there is a race condition that occurs with optimisticLock when two exchanges with same correlation Id are processed at the same time and when the aggregator does not already contain an aggregation with that correlation Id.


How it occurs ? 
Take 2 threads Th1 an Th2 having exchange1 and exchange2, with same correlationId key. If the following sequence occurs, you get a NullPointerException at line 171.


Th1 : invokes doAggregation(key, exchange1) on aggregate processor     (AggregateProcessor line 477)
Th1 : invokes get(key) on repo   (AggregateProcessor line 484) => returns null
Th2 : invokes doAggregation(key, echange2) - that is possible since there is no lock
Th2 : invokes get(key) on repo => returns null and exchange CamelOptimisitcLockVersion remains not set  
Th1 : invokes add on repo (JdbcAggregationRepository line 152) => insert OK since no line with that key is ""present""
Th2 : invokes add on repo => one line is present (the one added by Th1), but exchange2.getProp (CamelOptimistickLockversion) is null, which makes that NullPointerException at line 171;;;",,,,,,,,,,,,,,
Camel lumberjack server component not thread safe,CAMEL-15718,13336367,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zbendhiba,ezett,ezett,20/Oct/20 20:11,08/Dec/20 06:15,13/Jul/23 08:33,08/Dec/20 06:15,3.5.0,3.6.0,,3.7.0,,,,,,,,,0,,,,,"I am new to camel. I use a filebeat source that delivers logfile data over the lumberjack v2 batch protocol. As a receiving server I use the camel lumberjack component to further process the data in a camel pipeline.

I realized that the LumberjackSessionHandler of camels lumberjack component is not stateless but is being used by camel for all parallel lumberjack connection requests. Thus, new incoming connections with their own batch windows mess up any ongoing process of the already existing window, e.g. window size settings and counting acknowledges.

Many different combinations of multicast().parallelProcessing().threads(...) with filebeats workers/pipelines showed the same result.

The states of the stateful LumberjackSessionHandler are mixed up and the handling of parallel windows is broken which results in unwanted/unfinished acknowledges. As a result it hangs up the whole communication process to the filebeat source.

The LumberjackSessionHandler is not able to handle multiple threads, but camel uses it as it would be able to. 

How can I tell camel to use separate LumberjackSessionHandlers and processing pipelines for each lumberjack batch request? Or do I misunderstand the concept of how camel uses components?

Sorry, I wasn't able to find a more specific ""camel-lumberjack"" component in the list of issue proposals above so I selected camel-core...","camel 3.5.0, filebeat 7.9.1, jdk 1.8.0_242, Debian 10, Linux 4.19.0-6-amd64",bedla,ezett,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Oct/20 13:18;ezett;filebeat.CAMEL-15718.yml;https://issues.apache.org/jira/secure/attachment/13014200/filebeat.CAMEL-15718.yml",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://stackoverflow.com/questions/64433933/apache-camel-lumberjack-component-not-thread-safe,,,,,,,,,,9223372036854775807,,,Mon Dec 07 16:43:50 UTC 2020,,,,,,,,,,,"0|z0jv0o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/20 20:22;bedla;All session data in LumberjackSessionHandler are stored as field variables and thus shared between different threads/channels.

These variables needs to be moved to Channel attributes - [https://netty.io/4.0/api/io/netty/util/AttributeMap.html]

Like:
{code:java}
ctx.channel().attr(AttributeKey.valueOf(""LumberjackSessionHandler.state"")).set(new LumberjackSessionState());
{code};;;","23/Oct/20 12:50;zbendhiba;Thanks [~bedla] for the analyse.
I'll work on this issue !!;;;","27/Oct/20 08:39;zbendhiba;[~ezett] can you tell me what kind of the unwanted acknowledges, and can you tell how many threads do you run in parallel + characteristics on the machine ? Do you know how much time the channel of client waits before closing the channel ?

[~bedla] : the camel consumer creates a dedicated LumberjackSessionHandler for each channel. Each channel has its own LumberjackSessionHandler dedicated.  The solution you gave, gets it worse, as I can't even run 100 threads with complete acknowledges, while I can do up to 750 with good acknowledges. Is that consumes more time ?

This is why I've done so far:
I've been running multiple threads in parallel to have the same bug. (RHEL 8 with 32GB M)
From 2 to 20 threads executing in parallel this example https://github.com/apache/camel/blob/f7e2147eb059edbb0bf6a5e0d40ced00706a7251/components/camel-lumberjack/src/test/java/org/apache/camel/component/lumberjack/LumberjackComponentTest.java#L58 , I can debug easily and confirm that the ChannelIntializer creates a LumberjackSessionHandler for every channel.
Up to 750 threads executing this example in parallel, I have all the wanted acknowledges.
Between 800 and 1000 threads, I begin to experience that problem : Some acknowledges are not received or are incomplete. But I've never experienced wrong acknowledges, just incomplete or empty.

I'm still investigating. But I'd need help to know more about what you've experienced as behavior.
 ;;;","27/Oct/20 13:17;ezett;Hi Zineb, many thanks for your investigations so far! 
I'm running Debian 10, kernel 4.19.67-2, 16GB, Camel 3.5.0, Filebeat 7.9.1, JDK 1.8.0_242. In my integration test scenario I use 2 parallel threads.

When I use my tests with mocking I can easily process 100k messages without any error. The effect came up on integration tests in combination with filebeat. 
When I set filebeats bulk_max_size=8, flush.timeout=1s (see attached filebeat config), new log messages are packed to bulks windows with the max size of 8 and sent to camel via lumberjack. Sending 10 messages with this configuration will result in two lumberjack bulks: one containing 8 and one 2 messages.

Correct behaviour: The first bulk window of 8 messages is processed in the LumberjackSessionHandler and receives a notifyMessageProcessed call on each processed message in the further channel. Thus, after the last sequence number of 8 it sends only one accumulated acknowledge back to filebeat for the whole bulk, closing the channel and everything is well.

My experience now is that while processing the 8 messages of the first bulk (say camel-thread-8), filebeat also sends the second bulk with 2 messages (camel-thread-2) which is totally fine so far. Unfortunately, this second bulk is processed by the same LumberjackMessageHandler instance which is already processing the first bulk. 
The windowSize and nextAck instance variables of the LumberjackMessageHandler are newly initialized in the middle of an already ongoing process. As a result the handler awaits a  different acknowledged sequence number to complete its bulk communication with filebeat, here 2.

_*Lost acks*_: The camel-thread-8 might be finished with the 8th ack but the LumberjackMessageHandler now awaits the new ack sequence number of 2. The final ack of 8 from the first bulk is never checked again so no accumulated ack is sent to filebeat anymore for the first bulk. The connection stays stalled until it times out.
_*Unwanted acks*_: The camel-thread-8 might just notifyMessageProcessed its second message and as the handler now waits for the new ack sequence number of 2 from camel-thread-2 it acknowledges the finalization of the second bulk back to filebeat - although it was the second acknowledge coming in from the first bulk. 
The second bulk communication with filebeat is finalized with the ""wrong"" acknowledge from the first bulk. The first bulk on the other side can never be finished as 8 will never be checked again.

From the observer perspective both cases show the same effect by inappropriately stalled or hung up lumberjack bulk connections.

""Do you know how much time the channel of client waits before closing the channel ?"" The lumberjack channel immediately finalizes the connection after a suitable ack sequence number was received or  stalles the connection if acks come in that are not expected anymore.;;;","27/Oct/20 14:18;zbendhiba;thanks [~ezett]. I need to do a test with filebeat. I'm not sure but I feel that filebeat will create one channel for the two messages (so the same session), to send the two window.

Maybe configuring more flush time would help.
In this [integration test|https://github.com/apache/camel/blob/master/components/camel-lumberjack/src/test/java/org/apache/camel/component/lumberjack/LumberjackComponentTest.java] , we have a test with one connection sending 2 window. If we remove [this line of code|https://github.com/apache/camel/blob/a25e9911b5a250116292a8f7bf0ca24df75f4376/components/camel-lumberjack/src/test/java/org/apache/camel/component/lumberjack/LumberjackUtil.java#L88], we will have unwanted acknowledges.
;;;","27/Oct/20 15:54;ezett;I used flush.timeout=1s to not wait too long in the debugger for the second window to show up. But I think the solution should rather not be dependent on any value of the flush.timeout as thousands of messages/bulks can arrive at any time. It might be a solution for my described 8-2-test case though... :);;;","27/Oct/20 18:17;zbendhiba;The right problem is withing the same session, if we treat the window in parallel, there is a big mess with the windowSize. 

I'll continue investigating on that one.;;;","30/Oct/20 10:24;zbendhiba;Hello, I've proposed a PR : https://github.com/apache/camel/pull/4540

Each channel/session is thread safe in Netty. However, while using lumberjack component, one single session can process multiple windows in parallel, and that causes mess while updating session data.
My solution to that : for each Lumberjack session, a new window to process has to wait the ACK sent from the previous one, if exists. In that way, we can assure that session data are not changed by another process.     

While doing several tests, I've noticed when using Lumberjack without SSL, messages go too fast. I guess it's due to absence of the additional SSL pipeline. And so client loses some messages.
I've added a pause of 10 milliseconds and it resolves the problem.
I've updated the integration tests to stop pausing between windows and send more windows to the server. I've also added a new integration test for multi threads, to assure that lumberjack is thread safe while processing different sessions.;;;","17/Nov/20 08:41;ezett;Thanks a lot for the fix [~zbendhiba] !

I'm not sure if this fix is able to handle processing mass data, e.g., coming from external filebeat instances:
 # If all threads in a session have finished processing the current batches of data and the last one finally passes phaser.arriveAndDeregister(), the phaser itself terminates permanently. As I understand the phaser, it does not accept any further registration and stops its service from that point on.
 Thus, data arriving afterwards will be treated as without the fix.
 # If a thread passes the phaser.arriveAndDeregister(), all waiting threads at the phaser.arriveAndAwaitAdvance() start running all at once and not one after another.
 As a result the window.size is concurrently messed up again.
 # I don't clearly understand the flush pause during the Ack which might also cause performance reduction?

Is it possible to teach camel to also use the LumberjackSessionHandler multi threaded correctly? This would prevent all the messy behaviour of the handler.

I saw that camel creates a pool of lumberjack handlers but it only uses the first instance for all sessions. Maybe there is an issue of camels pool handling that leads to the observed behaviour?;;;","19/Nov/20 09:55;zbendhiba;Hello [~ezett],  I'll look again at this phaser.arriveAndDeregister(), to see if there's a bug.
There are 2 things: 
# The bug exists because it is multi-threaded. (there is at least the event loop thread who has to in the same thread, so I guess this is why you said there is one thread for all sessions)
* The main problem is that the read method in our Netty Handler handles each of the messages in the window, instead of handling all the window. And in Netty, we can send the ACK only from that method. In the way the camel component is developed today : it is impossible to let the session handle multiple windows in parallel and send right ACKs.
I'm thinking about changing the solution but it needs a little more time.
;;;","07/Dec/20 16:43;zbendhiba;I have[ a new PR | https://github.com/apache/camel/pull/4733] handling windows instead of single messages (inspired by logstash-input-beats)
[~ezett] I did a test with filebeat + camel with flush.timeout: 1s, and all ACKs are received.;;;",,,,,,,,,
Incorrect includes from EIP documentation to Quarkus documentation,CAMEL-15711,13336242,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,20/Oct/20 08:57,20/Oct/20 11:10,13/Jul/23 08:33,20/Oct/20 11:10,3.7.0,,,3.7.0,,,,,documentation,,,,0,,,,,"We seem to be including pages from Camel Quarkus that do not exist in the EIP documentation. We should not be including those, EIPs documentation resides solely in the main Camel repository.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 20 11:10:31 UTC 2020,,,,,,,,,,,"0|z0ju94:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/20 11:10;zregvart;Manually removed the includes, as it seems they were manually added.;;;",,,,,,,,,,,,,,,,,,,
OpenTracingTracer does not activate created span,CAMEL-15710,13336218,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,orange-buffalo,orange-buffalo,20/Oct/20 07:12,10/Dec/20 21:10,13/Jul/23 08:33,23/Oct/20 07:14,3.4.1,,,3.4.5,3.7.0,,,,camel-opentracing,,,,0,,,,,"{{OpenTracingTracer}} does not activate the span it creates in {{onExchangeBegin}} (i.e. does not invoke {{tracer.activateSpan}}). Whenever there is processor invoked down the route, and this processor code is instrumented for OpenTracing (for instance, JDBC calls via {{opentracing-contrib/java-spring-cloud}}), the newly created spans are not aware about a trace being active and start a new trace. This leads to all such spans being detached from the route trace. It is a major issue for Camel routes observability via OpenTracing. ",,acosentino,davsclaus,orange-buffalo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 23 07:14:59 UTC 2020,,,,,,,,,,,"0|z0ju3s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/20 07:14;acosentino;Can you please check with 3.4.4 first? Also can you try with 3.5.0 and the upcoming 3.6.0? Thanks.;;;","20/Oct/20 07:27;davsclaus;And after trying with newer versions, are you able to put together a reproducer / sample app / or provide an attempted fix as a PR for review, that would be great thanks;;;","20/Oct/20 10:14;orange-buffalo;I have checked it on 3.4.4 and 3.5.0, with the same result. Cannot test on 3.6.0 as it is not released yet. I will try to reproduce the problem with an integration test.;;;","22/Oct/20 09:05;orange-buffalo;[https://github.com/apache/camel/pull/4490] is created to provide a reproducing test and a fix suggestion.;;;","23/Oct/20 07:14;davsclaus;Thanks for reporting and the PRs;;;",,,,,,,,,,,,,,,
 UpdateReadmeMojo fails when executed outside the camel tree,CAMEL-15706,13336034,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,lb,lb,19/Oct/20 09:54,20/Oct/20 05:28,13/Jul/23 08:33,20/Oct/20 05:28,3.6.0,,,3.7.0,,,,,tooling,,,,0,,,,,"The UpdateReadmeMojo  fails with NPE when executed outside the camel tree, as example when running for the camel-k specific components.

This is because there's no check on the presence of the camel-core directory here https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/UpdateReadmeMojo.java#L207 

",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 19 14:40:59 UTC 2020,,,,,,,,,,,"0|z0jsyw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Oct/20 14:40;davsclaus;This can be reproduced in camel-k-runtime, by building its components;;;",,,,,,,,,,,,,,,,,,,
camel 2.x - camel-chronicle feature install failed due to xstream-java8 version ,CAMEL-15705,13335989,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,xldai,xldai,19/Oct/20 02:58,21/Oct/20 06:37,13/Jul/23 08:33,21/Oct/20 06:37,2.25.2,,,2.25.3,,,,,osgi,,,,0,,,,,"Start karaf 4.2.9 OSGi container, execute:

karaf@root()> feature:repo-add camel 2.25.2
karaf@root()> feature:install camel-chronicle
{code}
Caused by: java.io.IOException: Error resolving artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.xstream-java8:jar:1.4.11.1_1: [Could not find artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.xstream-java8:jar:1.4.11.1_1 in central (https://repo1.maven.org/maven2/)]
{code}

The bundle ""xstream-java8"" has to be corrected to ""xstream"".",Java 8,davsclaus,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 20 14:52:26 UTC 2020,,,,,,,,,,,"0|z0jsow:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/20 09:32;davsclaus;Can you provide a PR for this;;;","20/Oct/20 14:52;xldai;PR Created: https://github.com/apache/camel/pull/4485;;;",,,,,,,,,,,,,,,,,,
Aggregate route recovery fails to start up,CAMEL-15682,13335231,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davibo_winnow,davibo_winnow,13/Oct/20 13:30,13/Oct/20 14:40,13/Jul/23 08:33,13/Oct/20 14:40,3.4.2,3.5.0,,3.4.5,3.6.0,,,,camel-core,,,,0,,,,,"Hello,

We've recently had an outage in one of our applications built using Apache Camel and specifically using a JDBC-based aggregation on one route.

After an unclean exit, the application continued to fail to start up.

The only way for us to recover from this situation was to erase the contents of the aggregate repository and recover the lost data manually. Until we executed that, the application was completely offline (this error resulted in a failure that exited the whole JVM)

The error we observed during startup:

{code}
org.apache.camel.FailedToStartRouteException: Failed to start route event.aggregator because of null
	at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:125)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:263)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:156)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620)
	at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452)
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:157)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.winnowsolutions.vision.annotation.app.MainApplication.main(MainApplication.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:109)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.Long (java.lang.Integer and java.lang.Long are in module java.base of loader 'bootstrap')
	at org.apache.camel.RuntimeCamelException.wrapRuntimeCamelException(RuntimeCamelException.java:52)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:67)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101)
	at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87)
	at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.impl.engine.RouteService.startChildService(RouteService.java:334)
	at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:184)
	at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123)
	... 34 common frames omitted
Caused by: java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.Long (java.lang.Integer and java.lang.Long are in module java.base of loader 'bootstrap')
	at org.apache.camel.processor.aggregate.AggregateProcessor.restoreTimeoutMapFromAggregationRepository(AggregateProcessor.java:894)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doStart(AggregateProcessor.java:1532)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1459)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:60)
	... 49 common frames omitted
{code}

After some investigation we have identified that the error is sourced from the way Camel is defaulting certain values when recovering the aggregate contents from the repository; specifically:

https://github.com/apache/camel/blob/camel-3.4.2/core/camel-base/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java#L894

{code:java}
long timeout = exchange.hasProperties() ? exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, 0, long.class) : 0;
{code}

This code is problematic if the branch that gets executed is the one where the default {{0}} (Integer) value is attempted to be cast to the target {{long}} variable.

Please correct the defaulting outlined in the code above so that it defaults with the correct (Long) type. ","* Apache Camel 3.4.2
 * Spring Boot 2.3.4.RELEASE
 * Postgres database as an aggregate repository",acosentino,avi5kdon@gmail.com,davibo_winnow,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 13:34:45 UTC 2020,,,,,,,,,,,"0|z0jo0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Oct/20 13:34;acosentino;You're welcome to open a PR against master;;;",,,,,,,,,,,,,,,,,,,
camel-aws2-s3 multipart upload multiplies file by number of parts,CAMEL-15678,13335204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,cynicLT,cynicLT,13/Oct/20 10:45,13/Oct/20 15:59,13/Jul/23 08:33,13/Oct/20 15:59,3.5.0,,,3.4.5,3.6.0,,,,camel-aws2,,,,0,,,,,"Camel AWS2 S3 incorectly defines upload part content on multipart upload:
{{org.apache.camel.component.aws2.s3.AWS2S3Producer:193}}
{code:java}
for (int part = 1; filePosition < contentLength; part++) {
    ... 
    ...
    String etag = getEndpoint().getS3Client().uploadPart(uploadRequest, RequestBody.fromFile(filePayload)).eTag();
 ...

}{code}
 

{{filePayload}} - is whole file to be uploaded. 

In case when file size is bigger than {{partSize}} (which by default is 25MB) - uploaded amount of content to S3 will be {{file.size * number_of_parts}}

 

Fix:
* define {{RequsetBody}} from stream:


{code:java}
InputStream inputStream = FileUtils.openInputStream(file);
IOUtils.skip(inputStream, filePosition);

completedParts.add(
        CompletedPart.builder()
                .partNumber(part)
                .eTag(amazonS3Client.uploadPart(uploadRequest, RequestBody.fromInputStream(inputStream, partSize)).eTag())
                .build()
); {code}",,acosentino,cynicLT,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 12:59:46 UTC 2020,,,,,,,,,,,"0|z0jnuw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Oct/20 10:55;acosentino;Can you create a github pull request? Thanks;;;","13/Oct/20 10:58;acosentino;Otherwise I'll work on this one soon.;;;","13/Oct/20 11:46;cynicLT;Sure. Will provide in a couple of hours.;;;","13/Oct/20 11:49;acosentino;Thanks, please have a look at the localstack and integration tests too :)

 ;;;","13/Oct/20 12:59;cynicLT;https://github.com/apache/camel/pull/4433;;;",,,,,,,,,,,,,,,
openapi-restdsl-generator - redundant content-types with multiple responses,CAMEL-15676,13335146,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mwuersch,mwuersch,13/Oct/20 07:11,13/Oct/20 14:45,13/Jul/23 08:33,13/Oct/20 14:45,,,,3.6.0,,,,,tooling,,,,0,,,,,"openapi-restdsl-generator and accordingly the camel-restdsl-openapi-plugin for maven generate problematic code/xml if there are multiple responses with the same content-type defined for a given path and operation.

Example:

{code:json}
...
""responses"": {
                    ""200"": {
                        ""content"": {
                            ""application/json"": {
                                ...
                            }
                        },
                        ""description"": ""Updated pet.""
                    },
                    ""201"": {
                        ""content"": {
                            ""application/json"": {
                                ...
                            }
                        },
                        ""description"": ""Created pet.""
                    }
                }
...
{code}

will result in:

{code:xml}
<rest>
        <put consumes=""application/json"" produces=""application/json,application/json"" uri=""/pet"">
            <param name=""body"" required=""true"" type=""body""/>
            <to uri=""direct:rest1""/>      
        </put> 
    </rest> 
{code}

The problematic part is the comma-separated list as the value of the produces-attribute, where application/json is listed twice. The Camel route will then, per default, return ""application/json,application/json"" as the content-type.

This invalid content-type causes some problems in third-party tools and frameworks, for example the Citrus testing framework. Although a simple work-around for the example above is to explicitly set the content-type header in the Camel route, I think the current behavior could be easily improved by modifying org.apache.camel.generator.openapi.OperationVisitor to use a set instead of a list for emitting the operationLevelProduces.

This would not fix cases, where there are multiple responses with different content-types, such as ""application/json,text/xml"". But I assume that they are a little bit less common nowadays (at least for us).

I will follow-up with a pull-request.",,davsclaus,mwuersch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 14:45:42 UTC 2020,,,,,,,,,,,"0|z0jni0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Oct/20 14:45;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,
MicroProfileMetricsRoutePolicy may attempt to register duplicate metrics,CAMEL-15675,13335028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,12/Oct/20 14:38,13/Oct/20 07:57,13/Jul/23 08:33,13/Oct/20 07:57,3.4.4,3.5.0,,3.6.0,,,,,,,,,0,,,,,"Relates to an issue raised over at the Camel Quarkus project:

https://github.com/apache/camel-quarkus/issues/1894
",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-10-12 14:38:13.0,,,,,,,,,,,"0|z0jmrs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When the registry does not have any nodes, ServiceCallDefinition will be blocked",CAMEL-15669,13334752,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chillming,chillming,10/Oct/20 01:54,12/Oct/20 07:03,13/Jul/23 08:33,12/Oct/20 07:03,3.5.0,,,3.4.5,3.6.0,,,,camel-core,,,,0,,,,,"module：
camel-cloud 3.5.0

stack：
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)
org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:107)
org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:85)
org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
org.apache.camel.component.resilience4j.ResilienceProcessor$CircuitBreakerTask.call(ResilienceProcessor.java:418)
org.apache.camel.component.resilience4j.ResilienceProcessor$CircuitBreakerTask.call(ResilienceProcessor.java:399)
io.github.resilience4j.circuitbreaker.CircuitBreaker.lambda$decorateCallable$3(CircuitBreaker.java:700)
io.github.resilience4j.circuitbreaker.CircuitBreaker$$Lambda$1027/242448823.call(Unknown Source)

Related codes：
1、org.apache.camel.component.ribbon.cloud.RibbonServiceLoadBalancer#process
when server is null，throw RejectedExecutionException：
throw new RejectedExecutionException(""No active services with name "" + serviceName);

2、org.apache.camel.impl.cloud.DefaultServiceCallProcessor#process
when catch Exception，we need “callback.done(true);” for CountDownLatch
 !image-2020-10-10-09-40-28-603.png! 

test code:
RouteDefinition definition = from(""..."");

CircuitBreakerDefinition circuitBreakerDefinition = definition
        .circuitBreaker()
        .resilience4jConfiguration(resilience4j)......

erviceCallDefinition serviceCallDefinition = processorDefinition
        .serviceCall().name(""test-app/api/test/hello"");
//registry 
ZooKeeperServiceCallServiceDiscoveryConfiguration conf =
        new ZooKeeperServiceCallDiscoveryConfiguration(serviceCallDefinition)
                .nodes(""..."").basePath(""..."").connectionTimeout(""7000"").sessionTimeout(""60000"");
serviceCallDefinition.setServiceDiscoveryConfiguration(conf);
//end
serviceCallDefinition.end();



",,chillming,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Oct/20 01:40;chillming;image-2020-10-10-09-40-28-603.png;https://issues.apache.org/jira/secure/attachment/13013345/image-2020-10-10-09-40-28-603.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 10 05:31:16 UTC 2020,,,,,,,,,,,"0|z0jl2g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Oct/20 05:31;davsclaus;Ah yeah it needs a callback.done(true) after that set exception. You are welcome to provide a patch or a PR to fix this.;;;",,,,,,,,,,,,,,,,,,,
Configurer for UniVocity*Format is missing options from superclass,CAMEL-15666,13334691,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bedla,bedla,bedla,09/Oct/20 17:30,09/Oct/20 18:46,13/Jul/23 08:33,09/Oct/20 18:46,,,,3.6.0,,,,,,,,,0,,,,,"String `className` argument in `PackageDataFormatMojo#doParseJavaClassSource` contains full name including generic types and because of that:
 * Mojo fails on windows build
{code:java}
java.nio.file.InvalidPathException: Illegal char <<> at index 65: org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat<TsvFormat,TsvWriterSettings,TsvWriter,TsvParserSettings,TsvParser,UniVocityTsvDataFormat>.java
{code}

 * Options from classes with generics are excluded on linux build - `Files.isRegularFile` returns false for invalid names in Linux.

I will fix this today, so it can be part of 3.6 release.",,bedla,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 09 18:46:58 UTC 2020,,,,,,,,,,,"0|z0jkow:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/20 18:46;bedla;[dab61fe7e45a4002e7f88ec178244b30d7f8445f|https://github.com/apache/camel/commit/dab61fe7e45a4002e7f88ec178244b30d7f8445f];;;",,,,,,,,,,,,,,,,,,,
OnException and StreamCaching,CAMEL-15665,13334645,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mash-sap,mash-sap,09/Oct/20 12:44,27/Oct/20 15:18,13/Jul/23 08:33,12/Oct/20 06:41,2.25.2,,,3.6.0,,,,,camel-core,,,,0,,,,,"Hi everyone,

 

we are using the Camel-onException error handling and found that the exception-handling is sometimes not executed in case of error. When StreamCaching is enabled in the route and an error happens during TypeConversion, the exception handling is not executed but the process just fails. I attached a scenario to reproduce the problem to this mail (ExceptionHandling.java).

 

Best regards,
Manuel",,acosentino,davsclaus,mash-sap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Oct/20 12:43;mash-sap;sandbox.zip;https://issues.apache.org/jira/secure/attachment/13013313/sandbox.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 27 15:18:17 UTC 2020,,,,,,,,,,,"0|z0jkeo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/20 13:42;davsclaus;I had a look, so before I forget, then we need to consider what the stream caching should behave when the onException path is being routed. As it would essentially attempt to convert again. So it may need to turn this off in case of first error. Or silently let subsequent failures be ignored. To allow the onException routing to continue.;;;","27/Oct/20 14:13;mash-sap;Hi Claus,

thanks for providing a fix. We need to consume this fix in our 2.x codeline. However, the fix contains 3.x coding:
exchange.adapt(ExtendedExchange.class).setRedeliveryExhausted(true);

Is it planned to also fix the problem in the 2.x codeline?

Thanks in advance &
Best regards,
Manuel;;;","27/Oct/20 14:14;acosentino;No, it's not planned for 2.x.;;;","27/Oct/20 15:18;mash-sap;Hi [~acosentino],

thanks for your reply. Do you know if there is a equivalent of the 3.x code that we could use in our 2.x codeline?
(exchange.adapt(ExtendedExchange.class).setRedeliveryExhausted(true))

 

Best regards,
Manuel;;;",,,,,,,,,,,,,,,,
camel-mongodb - Batch insert does not work,CAMEL-15646,13334107,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Oct/20 05:03,14/Oct/20 09:08,13/Jul/23 08:33,14/Oct/20 09:08,,,,3.6.0,,,,,camel-mongodb,,,,0,,,,,"Can somebody help to create a jira for this because I don't have the permission?
Please use below codes to reproduce.

@Named(""ConvertType"")
@Log4j2
public class ConvertType implements Processor {  private static final Logger logger = LoggerFactory.getLogger(ConvertType.class);  @Override
 public void process(Exchange exchange) {
 Document a = new Document(MongoDbConstants.MONGO_ID, ""testInsert1"");
 a.append(""MyId"", 1).toJson();
 Document b = new Document(MongoDbConstants.MONGO_ID, ""testInsert2"");
 b.append(""MyId"", 2).toJson();
 Document c = new Document(MongoDbConstants.MONGO_ID, ""testInsert3"");
 c.append(""MyId"", 3).toJson();
 List<Document> taxGroupList = new ArrayList<Document>();
 taxGroupList.add(a);
 taxGroupList.add(b);
 taxGroupList.add(c);
 exchange.getIn().setBody(taxGroupList);
  // From MongoDbProducer.java#L428
 // https://github.com/apache/camel/blob/af7e383e9fc1d25ce9665f74d33672cc5b507952/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbProducer.java#L428
 Object insert = exchange.getContext().getTypeConverter().tryConvertTo(Document.class, exchange, exchange.getIn().getBody());
 if (insert == null)
 logger.info(Document.class.getTypeName() + "" mismatched with "" + exchange.getIn().getBody().getClass().getTypeName());
 else
 logger.info(Document.class.getTypeName() + "" matched with "" + exchange.getIn().getBody().getClass().getTypeName());
 } }

from(fromKafka)    .process(""ConvertType"");",,chardahe@redhat.com,davsclaus,tenthcup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 14 08:58:44 UTC 2020,,,,,,,,,,,"0|z0jh3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Oct/20 14:46;tenthcup;The issue only happened in Camel Spring boot project. The insert object returns null in the camel java project but not in Camel Spring boot project.

After debugged, I found exchange.getContext() is using org.apache.camel.spring.boot package in the Camel Spring boot project. But in the Camel java project, exchange.getContext() is using org.apache.camel.impl package. 

logger.info(exchange.getContext().getClass().getPackageName());

 

I believed a quick dirty fix is to change 

[https://github.com/apache/camel/blob/af7e383e9fc1d25ce9665f74d33672cc5b507952/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbProducer.java#L428]

 
{code:java}
// code placeholder


Object insert = (new DefaultCamelContext()).getTypeConverter().tryConvertTo(Document.class, exchangexchange, exchange.getIn().getBody());



{code};;;","07/Oct/20 18:36;chardahe@redhat.com;Thanks [~tenthcup] for reporting it, I'll work on this;;;","14/Oct/20 08:58;davsclaus;I am fixing this currently to get this into 3.6;;;",,,,,,,,,,,,,,,,,
camel-salesforce - NullPointerException on route startup,CAMEL-15644,13333924,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Dennis Wiesemann,Dennis Wiesemann,06/Oct/20 12:24,06/Oct/20 18:23,13/Jul/23 08:33,06/Oct/20 18:23,3.4.4,,,3.4.5,3.6.0,,,,camel-salesforce,,,,0,camel-salesforce,salesforce,,,"While using the toD-Tag in combination with the camel-salesforce component a NullPointerException occurs on route startup. It doesn't appears with the to-Tag.

 

Stacktrace:

org.apache.camel.FailedToStartRouteException: Failed to start route isp.route.user.ISPSFO001 because of null
 at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:125) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:263) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:156) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620) ~[!/:3.4.3]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[!/:3.4.3]
 at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:241) ~[!/:3.4.3]
 at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:283) ~[!/:3.4.3]
 at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:187) [!/:3.4.3]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) [!/:1.10.2]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) [!/:1.10.2]
 at java.util.concurrent.FutureTask.run(Unknown Source) [?:?]
 at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) [?:?]
 at java.util.concurrent.FutureTask.run(Unknown Source) [?:?]
 at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) [?:?]
 at java.util.concurrent.FutureTask.run(Unknown Source) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:?]
 at java.lang.Thread.run(Unknown Source) [?:?]
Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: salesforce
 at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:546) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:504) ~[!/:3.4.3]
 at org.apache.camel.processor.SendDynamicProcessor.doStart(SendDynamicProcessor.java:343) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87) ~[!/:3.4.3]
 at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.TryProcessor.doStart(TryProcessor.java:137) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87) ~[!/:3.4.3]
 at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.startChildService(RouteService.java:334) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:184) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123) ~[!/:3.4.3]
 ... 22 more
Caused by: java.lang.NullPointerException
 at org.apache.camel.component.salesforce.SalesforceComponent.doStart(SalesforceComponent.java:341) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3025) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:541) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:504) ~[!/:3.4.3]
 at org.apache.camel.processor.SendDynamicProcessor.doStart(SendDynamicProcessor.java:343) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87) ~[!/:3.4.3]
 at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.TryProcessor.doStart(TryProcessor.java:137) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101) ~[!/:3.4.3]
 at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87) ~[!/:3.4.3]
 at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.support.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78) ~[?:?]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[!/:3.4.3]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.startChildService(RouteService.java:334) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:184) ~[!/:3.4.3]
 at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123) ~[!/:3.4.3]
 ... 22 more",,Dennis Wiesemann,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-10-06 12:24:46.0,,,,,,,,,,,"0|z0jgeo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core - Safe copy message history may lead to ArrayIndexOutOfBoundsException,CAMEL-15628,13330672,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Oct/20 10:20,03/Oct/20 12:15,13/Jul/23 08:33,03/Oct/20 12:15,3.5.0,,,3.6.0,,,,,camel-core,,,,0,,,,,"[ thread #10 - seda://dataQueue] SedaConsumer                   WARN  Error processing exchange. Exchange[]. Caused by: [java.lang.ArrayIndexOutOfBoundsException - Index 27 out of bounds for length 27]
java.lang.ArrayIndexOutOfBoundsException: Index 27 out of bounds for length 27
	at java.util.LinkedList.toArray(LinkedList.java:1057) ~[?:?]
	at java.util.LinkedList.addAll(LinkedList.java:412) ~[?:?]
	at java.util.LinkedList.addAll(LinkedList.java:391) ~[?:?]
	at java.util.LinkedList.<init>(LinkedList.java:123) ~[?:?]
	at org.apache.camel.support.ExchangeHelper.safeCopyProperties(ExchangeHelper.java:932) ~[camel-support-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at org.apache.camel.support.ExchangeHelper.copyExchangeAndSetCamelContext(ExchangeHelper.java:849) ~[camel-support-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at org.apache.camel.support.ExchangeHelper.copyExchangeAndSetCamelContext(ExchangeHelper.java:835) ~[camel-support-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at org.apache.camel.component.seda.SedaConsumer.prepareExchange(SedaConsumer.java:229) ~[camel-seda-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185) [camel-seda-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:130) [camel-seda-3.6.0-SNAPSHOT.jar:3.6.0-SNAPSHOT]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at java.lang.Thread.run(Thread.java:834) [?:?]",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12264,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 03 10:54:06 UTC 2020,,,,,,,,,,,"0|z0j4u8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Oct/20 10:54;davsclaus;This is only if you turn on message history (not by default);;;",,,,,,,,,,,,,,,,,,,
camel-undertow-starter: AutoConfiguration property type error,CAMEL-15624,13330646,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,axsprk,axsprk,03/Oct/20 00:28,07/Oct/20 11:08,13/Jul/23 08:33,07/Oct/20 05:38,3.5.0,,,3.6.0,,,,,camel-spring-boot-starters,camel-undertow,tooling,,0,,,,,"I'm trying to test an rest api with camel-undertow-starter v3.5.0 and want to configure the hostOptions to control the threads referred by this, [https://camel.apache.org/camel-spring-boot/latest/undertow-starter.html]

Here is my configuration as an example,

 
{code:java}
camel.component.undertow.host-options.io-threads=2
camel.component.undertow.host-options.worker-threads=5
{code}
In my STS 4.0, it complains error as java.lang.String type. (screenshot attached)

this property actually doesn't recognised on runtime undertow component.

With some of investigation, I found a clue from the maven tooling. 

Will send a PR if I could fix this.

 

UPDATE: I sent 2 PRs to fix this issue on /camel  and /camel-spring-boot.
 # camel-wordpress in camel PR should be merged in advance,
 # camel-wordpress-starter in camel-spring-boot is referring the module for the source auto generation.

 ",,axsprk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Oct/20 09:45;axsprk;Suppressed_Complex_Type_to_String.png;https://issues.apache.org/jira/secure/attachment/13012459/Suppressed_Complex_Type_to_String.png","03/Oct/20 00:25;axsprk;camel-undertow-starter-autoconfig-error.png;https://issues.apache.org/jira/secure/attachment/13012454/camel-undertow-starter-autoconfig-error.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 03 13:59:08 UTC 2020,,,,,,,,,,,"0|z0j4og:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Oct/20 09:58;axsprk;This is actually source code generation problem.... I found a code where the suppressed the complex types into String in camel-spring-boot-generator-maven-plugin. SpringBootAutoConfigurationMojo.java Line: 686~700. screenshot attached. 

In the comment, it says spring-boot doesn't support complex types.

!Suppressed_Complex_Type_to_String.png!

After I removed the block of codes, and I compiled and fixed the camel-undertow-starter auto config problem successfully.  

And the all properties in host-options are working!!! Fantastic!! 

 

However, it's source generation tools for all camel springboot starters.  When I run all unit test cases I've got another errors in other 4 modules.
 * camel-activemq-starter  :  compile error by generated codes for Long type value
 * camel-debezium-mongodb-starter  : compile error by generated codes for Long type value
 * camel-reactive-streams-starter : compile error in ReactiveStreamsServiceAutoConfiguration.java
 * camel-wordpress-starter : compile error by conflicting class name WordpressComponentConfiguration with camel-wordpress module. 

I'm working on it.... 

 

 ;;;","03/Oct/20 13:59;axsprk;sent 2 PRs to fix this issue. 

Regarding of 4 other module issues.  
 # camel-activemq-starter  :  compile error by generated codes for Long type value
=> actually referring in camel-jms config, some properties declared long type, but java.time.Duration on @UriParam
 # camel-debezium-mongodb-starter  : compile error by generated codes for Long type value
=> in camel-debezium-mongodb, some properties declared long & int type, but java.time.Duration on @UriParam
 # camel-reactive-streams-starter : compile error in ReactiveStreamsServiceAutoConfiguration.java
=> Fixed logic to handle complex type
 # camel-wordpress-starter : compile error by conflicting class name WordpressComponentConfiguration with camel-wordpress module. 
=> This one is conflicted with WordpressComponentConfiguration in camel-wordpress after fixing complex types. 
So, I reviewed camel-wordpress and refactored class name to avoid conflicts and it should be correct name by document.

A function convertDurationToMillisec() added to fix #1 and #2 issue .  ;;;",,,,,,,,,,,,,,,,,,
osgi - Reference methods  not found in blueprint context,CAMEL-15623,13330593,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,valery1811,valery1811,02/Oct/20 15:38,03/Nov/20 07:42,13/Jul/23 08:33,03/Nov/20 07:42,3.4.4,,,3.4.5,3.7.0,,,,karaf,,,,2,,,,,"I have two bundles with blueprint.

blueprint 1 bundle:
{code:java}
<bean id=""impl"" class=""com.example.InterfaceImpl""/>
<service ref=""impl"" interface=""com.example.Interface""/>{code}
blueprint 2 bundle:

 
{code:java}
<reference id=""impl"" interface=""com.example.Interface""/>
<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
     <route>
          <from uri=""timer:s?period=1000""/>
          <bean ref=""impl"" method=""hi"" />
      </route>
</camelContext>
{code}
 

 

and I get exception Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: hi  not found on bean: com.example.InterfaceImpl  of type: Proxy06b9dc80_2890_4f85_8bea_320bc0a4d9cb",,acosentino,davsclaus,valery1811,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15793,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 02 15:52:59 UTC 2020,,,,,,,,,,,"0|z0j4cw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Oct/20 15:41;valery1811;I search in camel-bean [https://github.com/apache/camel/blob/992a6b9685f4db49236e540af2546548cf99a7d3/components/camel-bean/src/main/java/org/apache/camel/component/bean/RegistryBean.java#L177] what proxy not extended com.example.InterfaceImpl;;;","02/Oct/20 15:43;acosentino;Please, don't mark every issue you open as critical. ;;;","02/Oct/20 15:52;davsclaus;I think there is another ticket about something like this.;;;",,,,,,,,,,,,,,,,,
endpoint-dsl - Bean name evaluated as string in sql component,CAMEL-15622,13330587,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,drezir,drezir,02/Oct/20 15:21,12/Oct/20 11:45,13/Jul/23 08:33,12/Oct/20 11:26,3.5.0,,,3.6.0,,,,,camel-endpointdsl,,,,0,,,,,"Hi,

I have this stack:
 * camel spring boot starter
 * camel-sql component
 * camel endpoint DSL

I have this code:
{code:java}
.to(sql(""classpath:sql/zentiva.sql"").dataSource(""zentivaDataSource""))
{code}
If I use instance of DataSource object and set it in .datasource(dataSourceBean()) there is actually a problem that camel is looking in springbootcamelcontext for the name of the result of *dataSourceBean.toString()* which might be like HikariDataSource (null). Lookup for wrong bean name happens in
{code:java}
org.apache.camel.support.CamelContextHelper#mandatoryLookupAndConvert
{code}
Route with bean instance is not working properly. As a workaround, we have to use name of the bean.",,avi5kdon@gmail.com,davsclaus,drezir,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15673,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 12 11:26:06 UTC 2020,,,,,,,,,,,"0|z0j4bk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Oct/20 18:58;avi5kdon@gmail.com;In the camel-sql component, the parameters map holds the key-value pair for ""datasource"" and its configured instance.  But this instance is being treated as ""String"" and being looked up in the registry. I think we can simply use this datasource if it turns out to be an instance of the DataSource class otherwise we can look it up as usual.

 
{code:java}
@Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        DataSource target = null;

        // endpoint options overrule component configured datasource
        DataSource ds = resolveAndRemoveReferenceParameter(parameters, ""dataSource"", DataSource.class);

{code};;;","03/Oct/20 07:55;drezir;What about resolving this issue in lower level in 
{code:java}
org.apache.camel.support.DefaultComponent#resolveAndRemoveReferenceParameter(java.util.Map<java.lang.String,java.lang.Object>, java.lang.String, java.lang.Class<T>)
{code}
There are parameter and also type specified (in this case ""dataSource"" and DataSource.class). The algorithm would just get the parameter and If types match, it would simply return the value from parameters without any transformation. 

Maybe something like this?
{code:java}
public < T extends Object > T resolveAndRemoveReferenceParameter(Map < String, Object > parameters, String key, Class < T > type) {
    if (parameters.containsKey(key) && type.isInstance(parameters.get(key).getClass()) {
        return type.cast(parameters.get(key));
    }
    return resolveAndRemoveReferenceParameter(parameters, key, type, null);
}{code};;;","09/Oct/20 01:25;avi5kdon@gmail.com;[~drezir]: This is even better. This will also address the same problem in other components. 
Are you going to provide a pull request to fix this?;;;","09/Oct/20 04:57;drezir;Sure, I will provide it, probably today but tomorrow at latest;;;","10/Oct/20 17:28;drezir;Proposed fix in https://github.com/apache/camel/pull/4414;;;","12/Oct/20 11:26;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,
Reserved PubSub attributes are unintentionally passed on causing send to fail,CAMEL-15617,13330438,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,alvinkwekel@gmail.com,alvinkwekel@gmail.com,01/Oct/20 20:23,07/Oct/20 04:20,13/Jul/23 08:33,07/Oct/20 04:20,3.5.0,,,3.6.0,,,,,camel-google-pubsub,,,,0,,,,,"When Camel receives a PubSub message with reserved Google PubSub attributes these are set on a Camel header and passed on to any message sender. These reserved attributes are not allowed to be set on an outgoing message so this throws an error.
{code:java}
INVALID_ARGUMENT: The request contains an attribute key that is not valid (key=googclient_deliveryattempt). Attribute keys must be non-empty and must not begin with 'goog' (case-insensitive).{code}
1) We can filter out these reserved attributes before sending.

2) We could also use another Camel header to store the reserved attributes which will not be used when sending.

3) We could also map all attributes to headers and vice versa like we do with other transports. The real issues with this is that PubSub only supports string values as attributes. And we still need to filter out the reserved attributes.

I think we should implement option 1 regardless, to make sure this never cause issues again. Perhaps combine it with option 2 to map to ""googclient_deliveryattempt"" attribute to the ""CamelGooglePubsub.DeliveryAttempt"" header.

I've already prepared a fix based on the proposed solution 1: [https://github.com/apache/camel/pull/4343]

 

 

 ",,alvinkwekel@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-10-01 20:23:06.0,,,,,,,,,,,"0|z0j3eg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Infinispan: Cannot consume events ,CAMEL-15615,13330425,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,01/Oct/20 18:39,12/Oct/20 16:19,13/Jul/23 08:33,12/Oct/20 16:19,,,,3.6.0,,,,,camel-infinispan,,,,0,,,,,"If you try to run a simple route like this one:
{code:java}
from(""infinispan://mycache?hosts=localhost&sync=false&eventTypes=CACHE_ENTRY_CREATED"")     from(""infinispan://mycache?hosts=localhost&sync=false&eventTypes=CACHE_ENTRY_CREATED"")     .log(""Header ${header.CamelInfinispanEventType}"");
{code}
This will fail with the following WARN
{code:java}
2020-10-01 20:39:06,042 [-async-pool-1-2] WARN  HeaderDecoder                  - ISPN004039: Unable to complete reading event from server 127.0.0.1/127.0.0.1:112222020-10-01 20:39:06,042 [-async-pool-1-2] WARN  HeaderDecoder                  - ISPN004039: Unable to complete reading event from server 127.0.0.1/127.0.0.1:11222org.infinispan.client.hotrod.exceptions.HotRodClientException: ISPN004034: Unable to unmarshall bytes 636F6170 at org.infinispan.client.hotrod.marshall.MarshallerUtil.bytes2obj(MarshallerUtil.java:72) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.DataFormat.keyToObj(DataFormat.java:103) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.protocol.Codec21.readCacheEvent(Codec21.java:78) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.transport.netty.HeaderDecoder.decode(HeaderDecoder.java:156) [infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.transport.netty.HintedReplayingDecoder.callDecode(HintedReplayingDecoder.java:94) [infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276) [netty-codec-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286) [netty-handler-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:792) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) [netty-common-4.1.51.Final.jar:4.1.51.Final] at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-common-4.1.51.Final.jar:4.1.51.Final] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_252] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_252] at java.lang.Thread.run(Thread.java:748) [?:1.8.0_252]Caused by: java.lang.IllegalStateException: Unexpected tag : 99 (Field number : 12, Wire type : 3) at org.infinispan.protostream.WrappedMessage.readMessage(WrappedMessage.java:364) ~[protostream-4.3.3.Final.jar:?] at org.infinispan.protostream.ProtobufUtil.fromWrappedByteArray(ProtobufUtil.java:161) ~[protostream-4.3.3.Final.jar:?] at org.infinispan.commons.marshall.ProtoStreamMarshaller.objectFromByteBuffer(ProtoStreamMarshaller.java:45) ~[infinispan-commons-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.commons.marshall.AbstractMarshaller.objectFromByteBuffer(AbstractMarshaller.java:82) ~[infinispan-commons-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.marshall.MarshallerUtil.bytes2obj(MarshallerUtil.java:56) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] ... 24 more
{code}",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 12 16:19:17 UTC 2020,,,,,,,,,,,"0|z0j3bk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/20 10:28;acosentino;This turns out to be related to the encoding of the cache. It's important to define the encoding on the cache configuration, otherwise we'll need this Warning. We need to add some documentation about this. So I'll leave this open.;;;","12/Oct/20 16:19;acosentino;Docs updated with a note.;;;",,,,,,,,,,,,,,,,,,
NPE in CamelXmlTreeParserHelper.parseCamelRouteTree(CamelXmlTreeParserHelper.java:47) when routes are empty,CAMEL-15610,13330371,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,apupier,apupier,01/Oct/20 13:40,02/Oct/20 05:09,13/Jul/23 08:33,02/Oct/20 05:09,3.5.0,,,3.6.0,,,,,tooling,,,,0,,,,,"{noformat}
java.lang.NullPointerException
	at org.apache.camel.parser.helper.CamelXmlTreeParserHelper.parseCamelRouteTree(CamelXmlTreeParserHelper.java:47)
	at org.apache.camel.parser.XmlRouteParser.parseXmlRouteTree(XmlRouteParser.java:99)
	at com.github.cameltooling.lsp.internal.documentsymbol.DocumentSymbolXMLProcessor.getSymbolInformations(DocumentSymbolXMLProcessor.java:56)
{noformat}

minimal test to reproduce:

{noformat}
	@Test
	void minimalTestShowingNPE() throws IOException {
		String textTotest =
				""<camelContext id=\""camel\"" xmlns=\""http://camel.apache.org/schema/spring\"">\r\n"" + 
				""\r\n"" + 
				""    <route id=\""a route\"">\r\n"" + 
				""    </route>\r\n"" + 
				""\r\n""
				+ ""</camelContext>\n"";
		File camelFile = File.createTempFile(""camelFile"", "".xml"");
		Files.write(textTotest.getBytes(), camelFile);
		XmlRouteParser.parseXmlRouteTree(new ByteArrayInputStream(textTotest.getBytes()), """", camelFile.getAbsolutePath());
	}
{noformat}",,apupier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 01 13:40:46 UTC 2020,,,,,,,,,,,"0|z0j2zk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Oct/20 13:40;apupier;looking to provide a PR;;;",,,,,,,,,,,,,,,,,,,
camel-main - Add support for property placeholders in #class factory method parameters,CAMEL-15602,13330206,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Sep/20 16:16,30/Sep/20 17:04,13/Jul/23 08:33,30/Sep/20 16:56,3.4.4,3.5.0,,3.4.5,3.6.0,,,,camel-main,,,,0,,,,,"camel.beans.mongo: '#class:com.mongodb.client.MongoClients#create(""mongodb://mongoadmin:password@mongodb.mongodb:27017"")'

And if we want to use ENV variables for username and password then its currently not possible with

""mongodb://{{env:XXX}}:{{env:YYY}}@mongodb.mongodb:27017""",,davsclaus,kameshsampath,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 30 16:17:32 UTC 2020,,,,,,,,,,,"0|z0j1z4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Sep/20 16:17;davsclaus;Or if you do

username=mongoadmin
password=mongoadmin
mongoServer=mongodb.mongodb
mongoServerPort=27017
connectionBeanDef=#class:com.mongodb.client.MongoClients#create(""mongodb://{{username}}:{{password}}@{{mongoServer}}:{{mongoServerport}}"");;;",,,,,,,,,,,,,,,,,,,
camel 2.x - camel-jacksonxml feature install failed due to stax2 version ,CAMEL-15596,13330070,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xldai,xldai,30/Sep/20 02:03,19/Dec/20 14:11,13/Jul/23 08:33,19/Dec/20 14:11,2.24.2,2.25.2,,2.25.3,,,,,osgi,,,,0,,,,,"Start karaf 4.2.9 OSGi container, execute:

karaf@root()> feature:repo-add camel 2.25.2
karaf@root()> feature:install camel-jacksonxml
{code}
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-jacksonxml; type=karaf.feature; version=""[2.25.2,2.25.2]""; filter:=""(&(osgi.identity=camel-jacksonxml)(type=karaf.feature)(version>=2.25.2)(version<=2.25.2))"" [caused by: Unable to resolve camel-jacksonxml/2.25.2: missing requirement [camel-jacksonxml/2.25.2] osgi.identity; osgi.identity=org.apache.camel.camel-jacksonxml; type=osgi.bundle; version=""[2.25.2,2.25.2]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jacksonxml/2.25.2: missing requirement [org.apache.camel.camel-jacksonxml/2.25.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.dataformat.xml)(version>=2.3.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.dataformat.jackson-dataformat-xml/2.9.10: missing requirement [com.fasterxml.jackson.dataformat.jackson-dataformat-xml/2.9.10] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.codehaus.stax2)(version>=4.2.0)(!(version>=5.0.0)))""]]]
 {code}",,davsclaus,ramu11,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 17 15:06:03 UTC 2020,,,,,,,,,,,"0|z0j14w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Oct/20 03:34;ramu11;[~xldai]  
2.24.2, 2.25.2 is very old.  Please try with camel 3.5;;;","10/Oct/20 03:01;xldai;Yes, for sure the camel-jacksonxml feature works on camel 3.x as the stax2 api is switched to the 4.x there.
But some of the users/customers are still on the Camel 2.25.x or on the way to migrate to Camel 3, even though the EOL of Camel 2 is next year.
If there is a plan for 2.25.3 release, it would be good to be fixed it on the camel-2.25.x branch.;;;","10/Oct/20 05:34;davsclaus;Can you try with karaf 4.2.1, as that is the version camel 2.25.x was tested against. Just to see if it works on older karaf version and its something in karaf change that is causing a problem like this.;;;","10/Oct/20 07:18;xldai;[~davsclaus], the same Error on karaf 4.2.1.
After the jackson was switched to 2.9.10, it requires stax2 api 4.x, that's the problem.;;;","17/Dec/20 15:06;davsclaus;You can manually try to install a newer stax2 version in the karaf shell, and then install that camel feature afterwards;;;",,,,,,,,,,,,,,,
Unable to load XML REST definitions with camel-main xmlRests config property,CAMEL-15581,13329431,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,25/Sep/20 15:18,28/Sep/20 08:32,13/Jul/23 08:33,28/Sep/20 08:32,3.4.3,3.5.0,,3.4.5,3.6.0,,,,camel-main,,,,0,,,,,"I noticed an issue when trying to use the camel-main configuration property camel.main.xml-rests in Camel Quarkus. It results in:

2020-09-25 15:33:25,811 ERROR [org.apa.cam.qua.mai.CamelMainRuntime] (main) Failed to start application: org.apache.camel.RuntimeCamelException: org.apache.camel.xml.io.XmlPullParserException: Expected starting tag '{http://camel.apache.org/schema/spring}routes', read starting tag '{http://camel.apache.org/schema/spring}rests' instead
	at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:66)
	at org.apache.camel.main.DefaultRoutesCollector.collectXmlRestsFromDirectory(DefaultRoutesCollector.java:219)",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-25 15:18:36.0,,,,,,,,,,,"0|z0ix74:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SJMS Batch Consumer startup race condition,CAMEL-15580,13329427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,vrlgohel,bradhgbst,bradhgbst,25/Sep/20 15:10,30/Sep/20 18:17,13/Jul/23 08:33,30/Sep/20 18:17,3.4.3,,,3.4.5,3.6.0,,,,camel-sjms,,,,0,,,,,"There is a race condition between the SJMS Batch Consumer route start thread and the batch consumption loop thread.  When it triggers the batch consumption loop exits early and the SJMS Batch Consumer does not read any JMS messages.

In short:
 * The AtomicBoolean running is used as a flag to shut down the batch consumption loop
 * The batch consumption loop is submitted to another thread and only after that running is changed to true
 * This means sometimes the batch consumption loop sees running as false during startup

The easiest way to reproduce it is to add a sleep into SJMSBatchConsumer$StartConsumerTask#run

 
{code:java}
final List<AtomicBoolean> triggers = new ArrayList<>();
for (int i = 0; i < consumerCount; i++) {
    BatchConsumptionLoop loop = new BatchConsumptionLoop();
    loop.setKeepAliveDelay(keepAliveDelay);
    triggers.add(loop.getCompletionTimeoutTrigger());
    /*
     * Note: Batch consumption loop is submitted to another thread here
     */
    jmsConsumerExecutors.submit(loop);
}

if (completionInterval > 0) {
    // trigger completion based on interval
    timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);
}

if (attempt > 1) {
    LOG.info(""Successfully refreshed connection after {} attempts."", attempt);
}
/*
 * Note: Add this sleep to reproduce the race condition, simulating
 * this thread being pre-empted by other work
 */
Thread.sleep(100);  
LOG.info(""Started {} consumer(s) for {}:{}"", consumerCount, destinationName, completionSize);
/*
 * Note: running is only changed to true here but the batch consumption loop
 * that reads this values was submitted to another thread earlier
 */
running.set(true);
return;
 {code}
 

The batch consumption loop checks the running flag like this:
{code:java}
            private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {
                final boolean usingTimeout = completionTimeout > 0;

                LOG.trace(""BatchConsumptionTask +++ start +++"");

                while (running.get()) { {code}
 

Usually there's a second check that would cause everything to loop again - it may see running as false but see isStarting() as true.
{code:java}
                }while (running.get() || isStarting()); {code}
But with asyncStartListener enabled I think that isStarting() is likely to be false as well.

 

I believe this issue is causing fairly frequent intermittent test failures in our CI environment (jenkins slaves in kubernetes, linux).  But I've been unable to reproduce it on my laptop (windows) without adding the artificial delay on the main thread.  

I've been able to get thread dumps from the CI environment showing the executor waiting for a task instead of executing the batch consumption loop
{code:java}
""Camel (camel-8) thread #125 - SjmsBatchConsumer"" 
   java.lang.Thread.State: WAITING
        at sun.misc.Unsafe.park(Native Method)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)
        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
 {code}
 

Usually they should look like this:
{code:java}
""Camel (camel-8) thread #123 - SjmsBatchConsumer"" 
   java.lang.Thread.State: TIMED_WAITING
        at java.lang.Object.wait(Native Method)
        at org.apache.activemq.FifoMessageDispatchChannel.dequeue(FifoMessageDispatchChannel.java:74)
        at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:486)
        at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:653)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:429)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:383)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:326)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748) {code}
 

I also get tracing logs where the batch consumption tasks starts & ends very quickly.
{code:java}
	Line 4377: 2020-09-24 03:16:41.567 DEBUG||| 4604 --- [artStopListener] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Attempt #1. Starting 1 consumer(s) for myqueue:300
	Line 4415: 2020-09-24 03:16:41.576 TRACE||| 4604 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask +++ start +++
	Line 4416: 2020-09-24 03:16:41.576 TRACE||| 4604 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask +++ end +++
	Line 4435: 2020-09-24 03:16:41.568 INFO ||| 4604 --- [artStopListener] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Started 1 consumer(s) for myqueue:300 {code}
 

Side note: Could the queue name be added to the thread name?  The JMS component consumers do that.

 

 ",,bradhgbst,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Sep/20 15:21;bradhgbst;potentialPatch.txt;https://issues.apache.org/jira/secure/attachment/13012138/potentialPatch.txt",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 30 18:17:38 UTC 2020,,,,,,,,,,,"0|z0ix68:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Sep/20 15:13;bradhgbst;I added this to SjmsBatchConsumerTest to try to reproduce.  I didn't have any luck reproducing on my laptop until I added the Thread.sleep mentioned in the description - a sleep of 10 ms causes it to fail about half the time, higher sleeps fail more often.
{code:java}
@Test
public void testStartupRaceCondition() throws Exception {
    final int routeCount = 10;
    final int consumerCount = 1;

    List<String> queues = new ArrayList<>();

    String queueNamePrefix = getQueueName();

    // setup routeCount routes, each reading from its own queue but all writing to the same mock endpoint
    for (int i = 0; i < routeCount; i++) {
        String queueName = queueNamePrefix + ""_"" + i;
        queues.add(queueName);
        String routeId = ""batchConsumer_"" + i;
        context.addRoutes(new RouteBuilder() {
            public void configure() throws Exception {

                int completionTimeout = 1000;
                int completionSize = 1;

                fromF(""sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy&keepAliveDelay=100&asyncStartListener=true"",
                        queueName, completionTimeout, completionSize, consumerCount)
                        .routeId(routeId).autoStartup(true)
                        .split(body())
                        .to(""mock:split"");
            }
        });
    }

    context.start();

    // expect to receive routeCount messages to the mock endpoint
    MockEndpoint mockSplit = getMockEndpoint(""mock:split"");
    mockSplit.setExpectedMessageCount(routeCount);

    // send one message to all the queues
    queues.forEach(queueName -> template.sendBody(""sjms:queue:"" + queueName, queueName));

    assertMockEndpointsSatisfied();

} {code};;;","25/Sep/20 15:22;bradhgbst;I suspect setting running to true prior to kicking off the batch consumption tasks will solve it.

[^potentialPatch.txt];;;","26/Sep/20 06:57;davsclaus;Yeah that sounds reasonable.;;;","30/Sep/20 18:17;davsclaus;I have backported to 3.4.x branch;;;",,,,,,,,,,,,,,,,
Camel-stringtemplate: Misleading and incorrect implementation of parameter 'allowTemplateFromHeader',CAMEL-15577,13329365,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,25/Sep/20 08:28,29/Sep/20 13:14,13/Jul/23 08:33,29/Sep/20 13:14,3.5.0,,,3.6.0,,,,,camel-stringtemplate,,,,0,,,,,"There is a difference in implementation of parameter `*allowTemplateFromHeader*` in various templating components and missing implementation in stringtemplate component.

 Description from documentation (of ""*allowTemplateFromHeader*""):
{quote}Whether to allow to use resource template from header or not (default false). Enabling this allows to specify dynamic templates via message header. However this can be seen as a potential security vulnerability if the header is coming from a malicious user, so use this with care.
{quote}
Common sense says that with this parameter I can send template via header.

Which is implemented for example in velocity component (see [https://github.com/apache/camel/blob/master/components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java#L185])

In stringtemplate component there is only functionality about providing own variable map (see [https://github.com/apache/camel/blob/master/components/camel-stringtemplate/src/main/java/org/apache/camel/component/stringtemplate/StringTemplateEndpoint.java#L104]) - the same functionality in velocity is called 'supplementalContext'

 In stringtemplate documentation is a described usage of this custom context map:
{quote}You can define the custom context map by setting the message header ""*CamelStringTemplateVariableMap*"" just like the below code. 
{quote}
Errors:
 # -parameter ""*CamelStringTemplateVariableMap*"" is applied only when ""*allowTemplateFromHeader*"" is set to true-
 # there is no way of providing template via header.

 

Fix should
 # -remove dependency between ""*CamelStringTemplateVariableMap*"" and ""*allowTemplateFromHeader*""-
 # -add a new parameter to allow definition of template via header-  Fix problem with template via header based on other templating components (e.g. velocity)

 ",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-25 08:28:48.0,,,,,,,,,,,"0|z0iwsg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect HTTP Method retrieved by camel-tracing,CAMEL-15576,13329236,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ncasaux,ncasaux,24/Sep/20 15:28,09/Oct/20 05:23,13/Jul/23 08:33,09/Oct/20 05:23,3.5.0,,,3.6.0,,,,,,,,,0,help-wanted,tracing,,,"Hello,

The HTTP method is not correctly retrieved by component camel-tracing when, from the Camel route, the HTTP method is set using something else than a String (like HttpMethods.POST for example)

Info from Claus:
{quote}Ah I can see the little bug

[https://github.com/apache/camel/blob/master/components/camel-tracing/src/main/java/org/apache/camel/tracing/decorators/AbstractHttpSpanDecorator.java#L33]

This one checks only if its a string type, but you use a constant or enum etc.
{quote}",,avi5kdon@gmail.com,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 25 08:28:44 UTC 2020,,,,,,,,,,,"0|z0ivzs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Sep/20 16:05;avi5kdon@gmail.com;Hi [~ncasaux], Please let me know if you are going to work on this otherwise I'll try and have a look;;;","25/Sep/20 08:28;ncasaux;Hi [~avi5kdon@gmail.com]

I never commited anything on Camel. For the moment I prefer to report issues ! :);;;",,,,,,,,,,,,,,,,,,
Sensitive keys are logged in auto-configuration summary,CAMEL-15563,13328656,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aoakley,aoakley,22/Sep/20 00:19,22/Sep/20 05:08,13/Jul/23 08:33,22/Sep/20 05:08,3.3.0,3.5.0,,3.4.4,3.6.0,,,,camel-main,,,,0,,,,,"Hello

Using camel 3.3.0 in a quarkus app, on startup we get a log statement like this:


{code:java}
Sep 22, 2020 12:08:35 AM org.apache.camel.main.BaseMainSupport autoconfigure
INFO: Auto-configuration summary:
Sep 22, 2020 12:08:36 AM org.apache.camel.main.BaseMainSupport lambda$autoconfigure$0
INFO: camel.component.activemq.password=password
Sep 22, 2020 12:08:36 AM org.apache.camel.main.BaseMainSupport lambda$autoconfigure$0
INFO: camel.component.activemq.username=username
{code}
We would expect to see, based on BaseMainSupport.java the following:
{code:java}
INFO: camel.component.activemq.password=xxxxxx
{code}
When I debug this I see the following on BaseMainSupport.autoconfigure(CamelContext camelContext) (line 536):

 


!image-2020-09-21-19-16-25-858.png!

 

We can work around by disabling the auto-configuration summary or disabling the logger for BaseMainSupport.

 ",,aoakley,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15565,,,,,"22/Sep/20 00:16;aoakley;image-2020-09-21-19-16-25-858.png;https://issues.apache.org/jira/secure/attachment/13011874/image-2020-09-21-19-16-25-858.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 22 04:58:06 UTC 2020,,,,,,,,,,,"0|z0isf4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Sep/20 04:58;davsclaus;Yeah I have reproduced the issue, and its indeed a little bug;;;",,,,,,,,,,,,,,,,,,,
"Validation returns wrong ""Unknown option"" in Properties file when there is a space before the `=`",CAMEL-15559,13328517,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,21/Sep/20 09:28,21/Sep/20 10:03,13/Jul/23 08:33,21/Sep/20 10:03,3.5.0,,,3.6.0,,,,,tooling,,,,0,,,,,"for instance:
{noformat}camel.main.xml-routes = classpath:routes/my-routes.xml{noformat}

reports a validation error although
{noformat}camel.main.xml-routes= classpath:routes/my-routes.xml{noformat} is working fine",,apupier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Sep/20 09:27;apupier;Screenshot from 2020-09-21 11-27-00.png;https://issues.apache.org/jira/secure/attachment/13011836/Screenshot+from+2020-09-21+11-27-00.png","21/Sep/20 09:27;apupier;Screenshot from 2020-09-21 11-27-08.png;https://issues.apache.org/jira/secure/attachment/13011837/Screenshot+from+2020-09-21+11-27-08.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-21 09:28:35.0,,,,,,,,,,,"0|z0irk8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pollEnrich timeout issue,CAMEL-15558,13328495,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ncasaux,ncasaux,21/Sep/20 08:42,09/Oct/20 13:58,13/Jul/23 08:33,08/Oct/20 05:28,3.4.3,3.5.0,,3.4.5,3.6.0,,,,camel-core,,,,0,,,,,"Hello !

 I’m trying to use this simple route with Camel 3.4.3 and springboot :
{code:java}
 from(""timer:hello?repeatCount=1&delay=1000"").routeId(""hello"")
         .to(""log:1"")
         .pollEnrich(""file:d:\\temp?noop=true&fileName=dummy.csv"",5000)
         .to(""log:2"");{code}
 I run it without the file dummy.csv, to test the timeout option.

 The timeout functionality does not seem to work, as you can see in the log, there’s no delay between log1 and log2:

 
{code:java}
 2020-09-19 11:39:30.099  INFO 186564 --- [- timer://hello] 1                                        : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2020-09-19 11:39:30.107  INFO 186564 --- [- timer://hello] o.a.camel.component.file.FileEndpoint    : Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2020-09-19 11:39:30.107  INFO 186564 --- [- timer://hello] o.a.camel.component.file.FileEndpoint    : Using default memory based idempotent repository with cache max size: 1000
2020-09-19 11:39:30.208  INFO 186564 --- [- timer://hello] 2                                        : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
{code}
 

 However, with Camel 2.24.3  It seems to work as expected as we can see the 5 sec delay between log1 and log2:

 
{code:java}
 2020-09-19 11:38:50.242  INFO 151696 --- [- timer://hello] 1                                        : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2020-09-19 11:38:50.244  INFO 151696 --- [- timer://hello] o.a.camel.processor.interceptor.Tracer   : ID-ITEM-S74991-1600508328077-0-1 >>> (hello) log://1 --> pollEnrich[constant{file:d:\temp?noop=true&fileName=dummy.csv}] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-ITEM-S74991-1600508328077-0-1, firedTime=Sat Sep 19 11:38:50 CEST 2020}, BodyType:null, Body:[Body is null]
2020-09-19 11:38:50.259  INFO 151696 --- [- timer://hello] o.a.camel.component.file.FileEndpoint    : Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2020-09-19 11:38:50.259  INFO 151696 --- [- timer://hello] o.a.camel.component.file.FileEndpoint    : Using default memory based idempotent repository with cache max size: 1000
2020-09-19 11:38:55.355  INFO 151696 --- [- timer://hello] o.a.camel.processor.interceptor.Tracer   : ID-ITEM-S74991-1600508328077-0-1 >>> (hello) pollEnrich[constant{file:d:\temp?noop=true&fileName=dummy.csv}] --> log://2 <<< Pattern:InOnly, Headers:{breadcrumbId=ID-ITEM-S74991-1600508328077-0-1, CamelToEndpoint=file://d:%5Ctemp?fileName=dummy.csv&noop=true, firedTime=Sat Sep 19 11:38:50 CEST 2020}, BodyType:null, Body:[Body is null]
2020-09-19 11:38:55.355  INFO 151696 --- [- timer://hello] 2                                        : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
{code}
 ",,chardahe@redhat.com,ncasaux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 21 10:29:10 UTC 2020,,,,,,,,,,,"0|z0irfc:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"21/Sep/20 10:29;chardahe@redhat.com;Thanks [~ncasaux] for reporting it, I'll work on this;;;",,,,,,,,,,,,,,,,,,,
Multicast parallel processing with timeout: Stream Cache file not deleted if CachedOutputStream created before timeout and writing to CachedOutputStream happens after timeout,CAMEL-15557,13328402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,forsthofer,forsthofer,20/Sep/20 10:54,22/Sep/20 03:35,13/Jul/23 08:33,21/Sep/20 04:39,2.25.2,3.4.3,,2.25.3,3.4.4,3.6.0,,,camel-core,,,,0,,,,,"If you have a route with a Multicast with parallel processing and a timeout and a sub-route in the multicast which is creating an OutputStreamCache before the timeout and is writing to the OutputStreamCache after the timeout then the created file is never deleted from the file system.

 

Similar situation as described in https://issues.apache.org/jira/browse/CAMEL-15532. The difference to https://issues.apache.org/jira/browse/CAMEL-15532 is that the OutputStreamCache is created before the timeout; in CAMEL-15532 the OutputStreamCache was created after the timeout and also the writing to the OutputStreamCache happened after the timeout.

With our current concept to determine the UnitOfWork which removes via the onDone event the created file, we can only determine the described situation and throw an exception. See provided patch.",,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,2020-09-20 10:54:43.0,,,,,,,Patch Available,,,,"0|z0iquo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong URI with http dsl and query parameters,CAMEL-15547,13328114,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,mcollovati,mcollovati,17/Sep/20 18:48,19/Sep/20 06:56,13/Jul/23 08:33,19/Sep/20 06:56,3.4.3,3.5.0,,3.4.4,3.6.0,,,,camel-endpointdsl,,,,0,,,,,"When declaring an http endpoint for an URL with a query string using endpoint dsl the target URL is incorrect due to appended value to the last parameter.


 Consider the following route snippet:
{noformat}
...
.to(http(""myhost/mypath?param1=a&param2=b"").httpMethod(""GET""))
...
{noformat}
 

The endpoint URI computed by *AbstractEndpointBuilder* is: {{myhost/mypath?param1=a&param2=b?httpMethod=GET (spot the double question mark) }}and this leads to a wrong http request to {{[http://myhost/mypath?param1=a&param2=b%3FhttpMethod%3DGET]}}.

If the query string is removed from the URI and provided as *Exchange.HTTP_QUERY* header the final HTTP URL is correct.

 

The same route without endpoint dsl works fine
{noformat}
…
to(""http://myhost/mypath?param1=a&param2=b&httpMethod=GET"")
…
{noformat}
 

The problem may be in the following code in *AbstractEndpointBuilder.computeUri*, where a query string computed with endpoint parameters
 is added to the target path without checking for the presence of a question mark.
{code:java}
String query = URISupport.createQueryString(params, encode);
answer = new NormalizedUri(targetScheme + ""://"" + targetPath + ""?"" + query);

{code}
I don't know if this is the desired behavior and potential query string part of URIs should be provided in other ways (eg as header) or if it is a bug.

 

Here is a test to replicate the problem
{code:java}

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new EndpointRouteBuilder() {
            @Override
            public void configure() throws Exception {

                restConfiguration().port(9999);
                rest().get(""path/xyz"")
                    .to(""log:myLogger?level=INFO&showAll=true"")
                    .to(""mock:result"");
                from(direct(""test""))
                    .to(http(""localhost:9999/path/xyz?param1=1&param1=2"").httpMethod(""GET""));
                from(direct(""test2""))
                    .to(""http://localhost:9999/path/xyz?param1=1&param2=2&httpMethod=GET"");
            }
        };
    }

    // Test passes
    @Test
    public void testRoute() throws InterruptedException {
        MockEndpoint mockEndpoint = getMockEndpoint(""mock:result"");

        mockEndpoint.expectedHeaderReceived(""param1"", ""1"");
        mockEndpoint.expectedHeaderReceived(""param2"", ""2"");

        template.sendBody(""direct:test2"", null);
        mockEndpoint.assertIsSatisfied();
    }

    // Test fails with
    // java.lang.AssertionError: mock://result Header with name param1 for message: 0. Expected: <1> but was: <[1, 2%3FhttpMethod%3DGET]>
    // Expected :<1>
    // Actual   :<[1, 2%3FhttpMethod%3DGET]>    
    @Test
    public void testEndpointDslRoute() throws InterruptedException {
        MockEndpoint mockEndpoint = getMockEndpoint(""mock:result"");
        mockEndpoint.expectedHeaderReceived(""param1"", ""1"");
        mockEndpoint.expectedHeaderReceived(""param2"", ""2"");

        template.sendBody(""direct:test"", null);
        mockEndpoint.assertIsSatisfied();
    }


{code}",,chardahe@redhat.com,mcollovati,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 17 18:51:37 UTC 2020,,,,,,,,,,,"0|z0ip2o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Sep/20 18:51;chardahe@redhat.com;Thanks [~mcollovati] for reporting it, I'll work on this;;;",,,,,,,,,,,,,,,,,,,
Camel-telegram wrongly parse chatId from headers,CAMEL-15534,13327681,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jstejska,jstejska,15/Sep/20 13:41,17/Sep/20 06:04,13/Jul/23 08:33,17/Sep/20 06:04,3.5.0,,,3.4.4,3.6.0,,,,camel-telegram,,,,0,,,,,"There is an issue when I create KafkaStreams app which get messages sent from telegram, transform it and sent back to telegram, camel-telegram cannot parse chatId from header - [https://gist.github.com/Frawless/564623a3fffb258a036f424e09402dc5]

 

The problem is on this line I think - [https://github.com/apache/camel/blob/camel-3.5.0/components/camel-telegram/src/main/java/org/apache/camel/component/telegram/TelegramProducer.java#L83]  I have tried to remove the cast and instead of it use String.valueOf()and it's working fine for me. However, I am not sure if this suitable solution (maybe there is something better already implemented in camel).",I used camel-telegram inside camel-kafka-connector and with Strimzi together on oc3.11.,jstejska,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 15 13:44:40 UTC 2020,,,,,,,,,,,"0|z0imf4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/20 13:44;orpiske;Cross-referencing the issue on CKC: https://github.com/apache/camel-kafka-connector/issues/463 ;;;",,,,,,,,,,,,,,,,,,,
Multicast parallel processing with timeout: Stream Cache file not deleted,CAMEL-15532,13327477,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,forsthofer,forsthofer,14/Sep/20 15:49,15/Sep/20 05:36,13/Jul/23 08:33,15/Sep/20 05:36,2.25.2,3.4.3,3.5.0,2.25.3,3.4.4,3.6.0,,,camel-core,,,,0,,,,,If you have a route with a Multicast with parallel processing and a timeout and a sub-route in the multicast which is creating a StreamCache after the timeout then the created stream cache file is never deleted from the file system.,,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-14 15:49:00.0,,,,,,,Patch Available,,,,"0|z0il60:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AWS2 S3 Component unclosed stream issue with includeFolders property,CAMEL-15530,13327301,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,filipe.portes,filipe.portes,13/Sep/20 18:02,14/Sep/20 05:58,13/Jul/23 08:33,14/Sep/20 05:58,3.5.0,,,3.4.4,3.6.0,,,,camel-aws2,,,,0,easyfix,pull-request-available,,,"When using Camel aws2-s3 component and the `includeFolders` option as false, some `ResponseInputStream` objects are left unclosed and are causing the aws sdk connection pool to get full.  

example of Route: 
{code:java}
from(""aws2-s3://{{aws.s3.sftpBucket}}?amazonS3Client=#amazonS3&delay=1000""
    + ""&includeFolders=false"")
    .to(""file:/tmp/?fileName=${header.CamelAwsS3Key}""){code}
this results in the exception appearing in the logs after some seconds: 
{code:java}
Caused by: [software.amazon.awssdk.core.exception.SdkClientException - Unable to execute HTTP request: Timeout waiting for connection from pool]software.amazon.awssdk.core.exception.SdkClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)
	at software.amazon.awssdk.core.exception.SdkClientException.create(SdkClientException.java:43)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.utils.RetryableStageHelper.setLastException(RetryableStageHelper.java:199)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:66)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:34)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26)
	at software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:189)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:121)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:147)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:101)
	at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)
	at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:55)
	at software.amazon.awssdk.services.s3.DefaultS3Client.listObjects(DefaultS3Client.java:4792)
	at org.apache.camel.component.aws2.s3.AWS2S3Consumer.poll(AWS2S3Consumer.java:138)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:190)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:107)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting for connection from pool
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:316)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1.get(PoolingHttpClientConnectionManager.java:282)
	at jdk.internal.reflect.GeneratedMethodAccessor305.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at software.amazon.awssdk.http.apache.internal.conn.ClientConnectionRequestFactory$Handler.invoke(ClientConnectionRequestFactory.java:83)
	at com.sun.proxy.$Proxy137.get(Unknown Source)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:190)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at software.amazon.awssdk.http.apache.internal.impl.ApacheSdkHttpClient.execute(ApacheSdkHttpClient.java:72)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.execute(ApacheHttpClient.java:232)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.access$500(ApacheHttpClient.java:98)
	at software.amazon.awssdk.http.apache.ApacheHttpClient$1.call(ApacheHttpClient.java:213)
{code}
 

The issue doesn't repeat when the `includeFolders` is kept as true.",,filipe.portes,,,,,,,,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 13 18:23:05 UTC 2020,,,,,,,,,,,"0|z0ik2w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Sep/20 18:23;filipe.portes;PR: [https://github.com/apache/camel/pull/4209];;;",,,,,,,,,,,,,,,,,,,
Project generated with camel-archetype-api-component cannot be compiled,CAMEL-15528,13327241,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bedla,bedla,bedla,12/Sep/20 19:36,15/Sep/20 12:02,13/Jul/23 08:33,14/Sep/20 15:05,3.5.0,,,3.6.0,,,,,camel-archetypes,,,,0,,,,,It is broken by CAMEL-15210 and CAMEL-15478 ( 4df55c268b6f8755f6dafd81a4df825c902c61b5 ),,bedla,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-12 19:36:33.0,,,,,,,,,,,"0|z0ijpk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS2-S3:  Consume Gzip file from S3 not working. ,CAMEL-15526,13327219,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,edingha,edingha,12/Sep/20 13:42,25/Sep/20 18:09,13/Jul/23 08:33,25/Sep/20 18:09,3.4.2,,,3.4.5,3.6.0,,,,,,,,0,,,,,"Hi,

When consuming Gzip file from S3 using AWS2-S3 component, file not downlaoding properly;

Same code working for AWS-S3, after upgrading to AWS2-S3, this code not working.

 

Task:
 1. Download ""myfile.csv.gzip"" file from S3.

2. GUnzip file and send to processor.
 3. Processor will send file to http end point using multipart upload.

Here is the code used.

 

{{}}

{{from(""aws2-s3://mybucket?amazonS3Client=#amazonS3Client&deleteAfterRead=false&delay=5000&synchronous=true&includeBody=true&autocloseBody=false&prefix=myfile.csv.gz"")}}

{\{ .unmarshal().gzipDeflater()}}

{\{ .process(@Override public void process(Exchange exchange) throws Exception {}}

{{ MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();
 String filename = exchange.getIn().getHeader(AWS2S3Constants.KEY, String.class);
 String body = exchange.getIn().getBody(String.class);
 ContentBody cd = new InputStreamBody(new ByteArrayInputStream(body.getBytes()), ContentType.MULTIPART_FORM_DATA, ""temp.csv"");
 multipartEntityBuilder.addPart(""file"", cd);
 System.out.println(cd);
 exchange.getOut().setBody(multipartEntityBuilder.build());)
 .to(""direct:httproute"");}}

{{}}

Stack Trace:
{panel:title=Stack Trace}


[main] WARN software.amazon.awssdk.profiles.internal.ProfileFileReader - Ignoring profile 'plugins' on line 6 because it did not start with 'profile ' and it was not 'default'.
[main] INFO org.apache.camel.support.LRUCacheFactory - Detected and using LRUCacheFactory: camel-caffeine-lrucache
[main] INFO org.apache.camel.component.http.HttpComponent - Created ClientConnectionManager org.apache.http.impl.conn.PoolingHttpClientConnectionManager@1b73be9f
[main] INFO org.apache.camel.component.http.HttpComponent - Created ClientConnectionManager org.apache.http.impl.conn.PoolingHttpClientConnectionManager@35a9782c
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.2 (camel-1) is starting
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Using HealthCheck: camel-health
[main] INFO org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route1 started and consuming from: aws2-s3://mybucket
[main] INFO org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route2 started and consuming from: direct://httproute
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Total 3 routes, of which 3 are started
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.2 (camel-1) started in 1.496 seconds
[Camel (camel-1) thread #1 - aws2-s3://mybucket] INFO consuming - Consumer Fired!
[Camel (camel-1) thread #1 - aws2-s3://mybucket] INFO route1 - Replay Message Sent to file:s3out input_2020-07-01-07-20-31-796_0.csv.gz
[Camel (camel-1) thread #1 - aws2-s3://mybucket] ERROR org.apache.camel.processor.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: ID-DGHANTA-Mac-1599955541230-0-1 on ExchangeId: ID-DGHANTA-Mac-1599955541230-0-1). Exhausted after delivery attempt: 1 caught: java.util.zip.ZipException: Not in GZIP format

Message History (complete message history is disabled)
---------------------------------------------------------------------------------------------------------------------------------------
RouteId ProcessorId Processor Elapsed (ms)
[route1 ] [route1 ] [from[aws2-s3://mybucket?amazonS3Client=%23] [ 250]
 ...
[route1 ] [unmarshal1 ] [unmarshal[org.apache.camel.model.dataformat.GzipDataFormat@d41f816] ] [ 0]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------

java.util.zip.ZipException: Not in GZIP format
 at java.util.zip.GZIPInputStream.readHeader(GZIPInputStream.java:165)
 at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:79)
 at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:91)
 at org.apache.camel.dataformat.deflater.GzipDeflaterDataFormat.unmarshal(GzipDeflaterDataFormat.java:62)
 at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:64)
 at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)
 at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)
 at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
 at org.apache.camel.component.aws2.s3.AWS2S3Consumer.processBatch(AWS2S3Consumer.java:200)
 at org.apache.camel.component.aws2.s3.AWS2S3Consumer.poll(AWS2S3Consumer.java:113)
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 at java.lang.Thread.run(Thread.java:748)
{panel}
Regards,

Dinesh

{{}}","camel Aws2-s3

 ",edingha,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 13 00:22:05 UTC 2020,,,,,,,,,,,"0|z0ijko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Sep/20 00:22;edingha;Updated Stack trace.;;;",,,,,,,,,,,,,,,,,,,
camel-archetype-java: main class on pom file different than actual main class,CAMEL-15525,13327185,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,orpiske,orpiske,orpiske,12/Sep/20 07:13,12/Sep/20 22:06,13/Jul/23 08:33,12/Sep/20 09:34,3.4.3,3.5.0,,3.4.4,3.6.0,,,,camel-archetypes,,,,0,,,,,"When you generate a project using the command below, the main class on the pom file does not match the actual pom file generated. 

{code:java}
mvn archetype:generate -B -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-java -DarchetypeVersion=3.4.3 -DgroupId=camel-passo-a-passo -DartifactId=primeiro-app-camel -Dversion=1.0.0-SNAPSHOT -Dpackage=primeiro.app.camel
{code}


On the pom.xml: 

{code:java}
<configuration>
          <logClasspath>true</logClasspath>
          <mainClass>primeiro.app.camel.MainApp</mainClass>
</configuration>
{code}


On the project: 

{code:java}
find src -iname '*.java'
src/main/java/primeiro/app/camel/MainApp.java
src/main/java/primeiro/app/camel/MyRouteBuilder.java
{code}



",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 12 09:34:20 UTC 2020,,,,,,,,,,,"0|z0ijd4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/20 09:34;orpiske;Fix verified locally. Should be available on the next releases.;;;",,,,,,,,,,,,,,,,,,,
InfluxDB connection bean creation fails,CAMEL-15521,13326954,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,ppatierno,ppatierno,10/Sep/20 20:15,11/Sep/20 05:58,13/Jul/23 08:33,11/Sep/20 05:58,3.4.3,,,3.4.4,3.6.0,,,,camel-influxdb,,,,0,,,,,"Hi,

I am using Apache Camel 3.4.3 for creating a route involving InfluxDB.

While trying to create the connection bean with the following code:

{{InfluxDB influxDB = InfluxDBFactory.connect(""http://localhost:8086"");}}
{{influxDB.query(new Query(""CREATE DATABASE "" + ""drivers"", ""drivers""));}}

{{CamelContext camelContext = new DefaultCamelContext();}}
{{camelContext.getRegistry().bind(""connectionBean"", influxDB);}}

I get the following exception on the first line while trying to connect to the InfluxDB server:

WARNING: An illegal reflective access operation has occurredWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by retrofit2.Platform (file:/home/ppatiern/.m2/repository/com/squareup/retrofit2/retrofit/2.8.1/retrofit-2.8.1.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)WARNING: Please consider reporting this to the maintainers of retrofit2.PlatformWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future releaseException in thread ""main"" java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt) at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt:40) at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:146) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:120) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:187) at org.influxdb.InfluxDBFactory.connect(InfluxDBFactory.java:30) at io.ppatierno.formula1.F1KafkaInfluxDBApp.main(F1KafkaInfluxDBApp.java:17)Caused by: java.lang.ClassNotFoundException: kotlin.jvm.internal.Intrinsics at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522) ... 8 more

 ",,acosentino,davsclaus,ppatierno,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 11 05:41:26 UTC 2020,,,,,,,,,,,"0|z0ihxs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/20 04:44;davsclaus;I think that is a WARNING from Java 11 itself. 

Do you see something more, that is an exception causing the app/camel to fail to start/run ?
And how do you run this;;;","11/Sep/20 05:41;acosentino;The warning is related to this [https://github.com/square/retrofit/issues/3341]

But the error is related to logging-interceptor library, we may need to downgrade to 3.x and avoid using 4.x;;;",,,,,,,,,,,,,,,,,,
camel-bean: Do not use reflection on the annotation proxy in BeanAnnotationExpressionFactory,CAMEL-15506,13326311,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,aldettinger,aldettinger,aldettinger,07/Sep/20 13:55,07/Sep/20 15:25,13/Jul/23 08:33,07/Sep/20 15:25,3.5.0,,,3.6.0,,,,,,,,,0,,,,,Do not use reflection on the annotation proxy in BeanAnnotationExpressionFactory. This is JVM implementation detail and some VMs (like SubstrateVM) may not implement it.,,aldettinger,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-07 13:55:59.0,,,,,,,,,,,"0|z0idzk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure-storage-blob: wrong syntax in the component json,CAMEL-15500,13325873,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,orpiske,orpiske,03/Sep/20 08:21,03/Sep/20 17:16,13/Jul/23 08:33,03/Sep/20 15:30,3.4.3,3.5.0,,3.4.4,3.6.0,,,,camel-azure,,,,0,,,,,"This is a related issue to CAMEL-15499, but this one applies to the camel-azure-storage-blob component. The syntax on the component json uses {{""syntax"": ""azure-storage-blob:containerName""}}  but it looks like it should use something like {{""syntax"": ""azure-storage-blob:/accountName/containerName""}}.",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-03 08:21:36.0,,,,,,,,,,,"0|z0iba8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-azure-storage-queue: wrong syntax in the component json,CAMEL-15499,13325872,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,orpiske,orpiske,03/Sep/20 08:17,04/Sep/20 07:18,13/Jul/23 08:33,04/Sep/20 07:18,3.4.3,3.5.0,,3.6.0,,,,,camel-azure,,,,0,,,,,"This is related to the Camel Kafka Connector [issue 409|https://github.com/apache/camel-kafka-connector/issues/409]. Which causes the connector to fail to properly create the URI for the azure-storage-queue connector.

 

It seems to me that this is the cause for the wrong URI:

- [azure-storage-queue.json|https://github.com/apache/camel/blob/master/components/camel-azure-storage-queue/src/generated/resources/org/apache/camel/component/azure/storage/queue/azure-storage-queue.json#L17] from master (3.5)
- [azure-storage-queue.json|https://github.com/apache/camel/blob/camel-3.4.x/components/camel-azure-storage-queue/src/generated/resources/org/apache/camel/component/azure/storage/queue/azure-storage-queue.json#L17] from camel-3.4.x

Since this is fed into the [AbstractCamelCatalog.doAsEndpointUri|https://github.com/apache/camel/blob/camel-3.4.x/core/camel-core-catalog/src/main/java/org/apache/camel/catalog/impl/AbstractCamelCatalog.java#L695] which is called - at one point - as part of the [TaskHelper.buildUrl|[https://github.com/apache/camel-kafka-connector/blob/master/core/src/main/java/org/apache/camel/kafkaconnector/utils/TaskHelper.java#L42]|https://github.com/apache/camel-kafka-connector/blob/master/core/src/main/java/org/apache/camel/kafkaconnector/utils/TaskHelper.java#L42]

 

I think the format of the syntax in that json file should be {{azure-storage-queue:/accountName/queueName}}.

 

 ",,acosentino,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 04 05:48:07 UTC 2020,,,,,,,,,,,"0|z0iba0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Sep/20 05:48;acosentino;I still need to finish this one, the other CAMEL-15500 is done.;;;",,,,,,,,,,,,,,,,,,,
DefaultVertxHttpBinding ignores exchange content-type request header,CAMEL-15495,13325750,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,02/Sep/20 14:22,08/Sep/20 07:13,13/Jul/23 08:33,08/Sep/20 07:13,3.5.0,,,3.6.0,,,,,,,,,0,,,,,"I made a mistake in the DefaultVertxHttpBinding implementation in that if the content-type exchange header is set, it gets stripped by the HeaderFilterStrategy, and is never set on the Vert.x HttpRequest object.

The workaround until a fix is available would be to extend DefaultVertxHttpBinding and override populateRequestHeaders so that content-type can be set properly.

",,chardahe@redhat.com,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-02 14:22:43.0,,,,,,,,,,,"0|z0iaiw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Cdi throws NPE when attempting to inject an array property using Microprofile Config,CAMEL-15493,13325507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kentfung,kentfung,01/Sep/20 11:24,04/Sep/20 04:25,13/Jul/23 08:33,04/Sep/20 04:25,3.4.3,,,3.4.4,3.6.0,,,,camel-cdi,,,,0,,,,,"Microprofile Configuration supports CDI injection of properties as lists or arrays and can cause the Camel Cdi extension to throw a NPE during container startup:

 
{noformat}
Caused by: org.apache.webbeans.exception.WebBeansException: java.lang.NullPointerException
 at org.apache.webbeans.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:371)
 at org.apache.webbeans.event.NotificationManager.invokeObserverMethod(NotificationManager.java:819)
 at org.apache.webbeans.event.NotificationManager.fireEvent(NotificationManager.java:715)
 ... 53 more
 Caused by: java.lang.NullPointerException
 at org.apache.camel.cdi.CdiCamelExtension.lambda$shouldDeployDefaultCamelContext$9(CdiCamelExtension.java:320)
 at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
 at java.util.HashMap$KeySpliterator.tryAdvance(HashMap.java:1569)
 at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
 at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
 at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
 at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
 at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)
 at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)
 at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
 at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)
 at org.apache.camel.cdi.CdiCamelExtension.shouldDeployDefaultCamelContext(CdiCamelExtension.java:325)
 at org.apache.camel.cdi.CdiCamelExtension.afterBeanDiscovery(CdiCamelExtension.java:276)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.apache.webbeans.event.ObserverMethodImpl.invoke(ObserverMethodImpl.java:404)
 at org.apache.webbeans.event.ContainerEventObserverMethodImpl.invoke(ContainerEventObserverMethodImpl.java:85)
 at org.apache.webbeans.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:365)
 ... 55 more{noformat}
 

This occurs when CdiCamelExtension.shouldDeployDefaultCamelContext encounters a bean for an array type because the Class.getPackage method returns null for arrays:
{code:java}
private boolean shouldDeployDefaultCamelContext(Set<Bean<?>> beans) {

 return beans.stream()
 // Is there a Camel bean with the @Default qualifier?
 // Excluding internal components...
 .filter(bean -> !bean.getBeanClass().getPackage().equals(getClass().getPackage()))
{code}
 

Switching around the equals check should fix it.

 ","JDK 1.8, Tomee 8.0.4 microprofile",acosentino,kentfung,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 03 15:04:20 UTC 2020,,,,,,,,,,,"0|z0i914:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Sep/20 12:18;acosentino;Contributions are welcome [~kentfung] :);;;","03/Sep/20 15:04;kentfung;Hello [~acosentino], I've submitted a PR.

 ;;;",,,,,,,,,,,,,,,,,,
"Can't build -P enable-schemagen,release,apt with jdk 11",CAMEL-15490,13325428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,tcunning,tcunning,01/Sep/20 02:43,03/Sep/20 04:40,13/Jul/23 08:33,03/Sep/20 04:40,3.5.0,,,3.6.0,,,,,build system,,,,0,,,,,"[WARNING] The requested profile ""enable-schemagen"" could not be activated because it does not exist.
[WARNING] The requested profile ""apt"" could not be activated because it does not exist.
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-format-plugin: MavenReportException: Error while generating Javadoc: 
[ERROR] Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in [https://docs.oracle.com/javase/8/docs/api/] are in the unnamed module.
[ERROR] 
[ERROR] Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages
[ERROR] 
[ERROR] Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-format-plugin: MavenReportException: Error while generating Javadoc: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in [https://docs.oracle.com/javase/8/docs/api/] are in the unnamed module.

Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages

Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.

    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.plugin.MojoExecutionException: MavenReportException: Error while generating Javadoc: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in [https://docs.oracle.com/javase/8/docs/api/] are in the unnamed module.

Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages

Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.

    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.failOnError (AbstractJavadocMojo.java:6814)
    at org.apache.maven.plugins.javadoc.JavadocJar.doExecute (JavadocJar.java:203)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.execute (AbstractJavadocMojo.java:1935)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.reporting.MavenReportException: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in [https://docs.oracle.com/javase/8/docs/api/] are in the unnamed module.

Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages

Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.

    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.doExecuteJavadocCommandLine (AbstractJavadocMojo.java:5861)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.executeJavadocCommandLine (AbstractJavadocMojo.java:5737)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.executeReport (AbstractJavadocMojo.java:2176)
    at org.apache.maven.plugins.javadoc.JavadocJar.doExecute (JavadocJar.java:199)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.execute (AbstractJavadocMojo.java:1935)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] [http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException][ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <args> -rf :camel-format-plugin[Pipeline] }",,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-09-01 02:43:31.0,,,,,,,,,,,"0|z0i8jk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Persistence Aggregator not compatible with Oracle-Java Data Type ,CAMEL-15489,13325426,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,sahil.aset,sahil.aset,01/Sep/20 02:31,22/Sep/20 04:29,13/Jul/23 08:33,03/Sep/20 04:23,3.4.3,,,3.4.4,3.6.0,,,,camel-sql,,,,0,help-wanted,,,,"Camel-sql : JdbcAggregationRepository uses the underlying jdbcTemplate and calls the queryForMap operation and on the VERSION column it type case it to the LONG by Default without checking if the Java Data Type is different or not. With Oracle and Java, it get bbvy default converted into the BIGDECIMAL and hence type case doesnt work with Object, can only work with Primitive data types. 

 

Exception Stacktrace: 

 

java.lang.ClassCastException: java.math.BigDecimal cannot be cast to java.lang.Longjava.lang.ClassCastException: java.math.BigDecimal cannot be cast to java.lang.Long at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$4.doInTransaction(JdbcAggregationRepository.java:334) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$4.doInTransaction(JdbcAggregationRepository.java:325) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.get(JdbcAggregationRepository.java:325) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.get(JdbcAggregationRepository.java:319) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:483) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:406) at org.apache.camel.processor.aggregate.AggregateProcessor.doInOptimisticLock(AggregateProcessor.java:372) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:362) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:702) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:616) at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:128) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:736) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:696) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:674) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:318) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1189) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1179) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1076) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)",,chardahe@redhat.com,davsclaus,sahil.aset,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15564,,,,,,,"01/Sep/20 02:33;sahil.aset;Code Snippet.png;https://issues.apache.org/jira/secure/attachment/13010801/Code+Snippet.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 03 04:23:02 UTC 2020,,,,,,,,,,,"0|z0i8j4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Sep/20 08:27;davsclaus;Thanks for reporting, do you want to attempt to work on a PR with a fix?

You can get the value as an Object and then check if its big decimal or not and then handle it accordingly.;;;","02/Sep/20 13:10;chardahe@redhat.com;I'm working on it, Thanks!!;;;","03/Sep/20 04:23;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,
camel-test-spring - Mocking of Camel Endpoints breaks because adding 3rd party dependency with spring boot,CAMEL-15486,13325312,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,erard22,erard22,31/Aug/20 09:41,10/Sep/20 08:46,13/Jul/23 08:33,10/Sep/20 08:45,3.4.3,,,3.6.0,,,,,camel-test,,,,0,,,,,"As soon you add the dependency 
{code:java}
<dependency>            
    <groupId>org.springframework.cloud</groupId>            
    <artifactId>spring-cloud-contract-wiremock</artifactId>               
    <version>2.2.3.RELEASE</version>            
    <scope>test</scope>        
</dependency>{code}
to your project, the mocking of the endpoints breaks.

I've created a simple example to reproduce the issue: 

[https://github.com/erard22/spring-boot-camel-bug-demo]

 
{code:java}
@Component
public class SimpleCamelRoute extends RouteBuilder {

    @Override
    public void configure() {

        from(""direct:processMessage"")
                .to(""file:output"");
    }
}
{code}
{code:java}
@CamelSpringBootTest
@SpringBootTest(classes = DemoApplication.class)
@ContextConfiguration
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@MockEndpoints(""file:*"")
class SimpleCamelRouteTest {

    @Autowired
    private CamelContext camelContext;

    @Produce(""direct:processMessage"")
    private ProducerTemplate producer;

    @EndpointInject(""mock://file:output"")
    private MockEndpoint mockCamel;

    @Test
    void processMessage_successful() throws Exception {
        mockCamel.expectedBodiesReceived(""foo"");
        producer.sendBodyAndHeaders(""foo"", Collections.emptyMap());
        mockCamel.assertIsSatisfied();
    }
}
{code}
{code:java}
java.lang.AssertionError: mock://file:output Received message count. Expected: <1> but was: <0>
Expected :<1>
Actual   :<0>
{code}
 ",,davsclaus,erard22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 10 08:46:10 UTC 2020,,,,,,,,,,,"0|z0i7tk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Aug/20 10:17;davsclaus;Try without that dirties context and otherwise thinker with the test. And what does that spring dependency do, maybe it does something that causes the restart to fail and in line of this camel too;;;","31/Aug/20 10:59;erard22;Indeed, the line {{Starting CamelContext with name [camelContext]}} is missing in the output. I'll have a closer look.;;;","07/Sep/20 11:48;erard22;So, found out what the problem is.

The Wiremock dependency has the class {{WireMockTestExecutionListener}} that does load the application context in the {{TestExecutionListener#beforeTestClass}} method that is executed earlier than the method {{CamelSpringBootExecutionListener#prepareTestInstance()}}. Means when this code is executed the camel context is already started: 
{code:java}
// we are customizing the Camel context with
// CamelAnnotationsHandler so we do not want to start it
// automatically, which would happen when SpringCamelContext
// is added to Spring ApplicationContext, so we set the flag
// not to start it just yet
SpringCamelContext.setNoStart(true);
System.setProperty(""skipStartingCamelContext"", ""true"");
{code}
 

I see two solutions: 
 # Implement \{{beforeTestClass }}as well and move this code there
 # Check if the context is already started and stop it in that case.

 ;;;","07/Sep/20 18:45;davsclaus;You are welcome to work on #1 and provide a PR against master branch, thanks.;;;","09/Sep/20 08:03;erard22;will do;;;","10/Sep/20 08:46;davsclaus;Thanks Michael for the reporting and the PR;;;",,,,,,,,,,,,,,
Spring Boot Swagger Example - API specification generation fails,CAMEL-15473,13324801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,franz.lanzendorfer,franz.lanzendorfer,27/Aug/20 09:39,28/Aug/20 07:58,13/Jul/23 08:33,28/Aug/20 06:06,,,,3.4.4,3.5.0,,,,camel-spring-boot,,,,0,,,,,"Hi! I'm currently looking through your examples for Camel Spring Boot integration and am having an issue with [Camel SB Examples :: REST DSL and Swagger|https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-rest-swagger]. As opposed to the other example where an API specification should be generated I can get this example to run, however when I try to access the API specification ([http://localhost:8080/api/api-doc)] I get the following exception:

{{org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[]}}
{{ at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:47) ~[camel-api-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.support.DefaultExchange.setException(DefaultExchange.java:425) ~[camel-support-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:70) ~[camel-support-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.component.rest.RestApiProducer.process(RestApiProducer.java:39) ~[camel-rest-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) ~[camel-base-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) ~[camel-support-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:214) ~[camel-http-common-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:80) ~[camel-http-common-3.4.3.jar:3.4.3]}}
{{ at javax.servlet.http.HttpServlet.service(HttpServlet.java:584) ~[jakarta.servlet-api-4.0.4.jar:4.0.4]}}
{{ at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.8.RELEASE.jar:5.2.8.RELEASE]}}
{{ at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99) ~[undertow-servlet-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.server.Connectors.executeRootHandler(Connectors.java:370) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) ~[undertow-core-2.1.3.Final.jar:2.1.3.Final]}}
{{ at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) ~[jboss-threads-3.1.0.Final.jar:3.1.0.Final]}}
{{ at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019) ~[jboss-threads-3.1.0.Final.jar:3.1.0.Final]}}
{{ at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558) ~[jboss-threads-3.1.0.Final.jar:3.1.0.Final]}}
{{ at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1449) ~[jboss-threads-3.1.0.Final.jar:3.1.0.Final]}}
{{ at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]}}
{{Caused by: java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.introspect.AnnotatedMember.getType(Lcom/fasterxml/jackson/databind/type/TypeBindings;)Lcom/fasterxml/jackson/databind/JavaType;}}
{{ at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:425) ~[swagger-core-1.5.24.jar:1.5.24]}}
{{ at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:203) ~[swagger-core-1.5.24.jar:1.5.24]}}
{{ at io.swagger.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:103) ~[swagger-core-1.5.24.jar:1.5.24]}}
{{ at io.swagger.converter.ModelConverters.read(ModelConverters.java:76) ~[swagger-core-1.5.24.jar:1.5.24]}}
{{ at io.swagger.converter.ModelConverters.read(ModelConverters.java:67) ~[swagger-core-1.5.24.jar:1.5.24]}}
{{ at org.apache.camel.swagger.RestModelConverters.readClass(RestModelConverters.java:33) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.swagger.RestSwaggerReader.appendModels(RestSwaggerReader.java:755) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.swagger.RestSwaggerReader.parse(RestSwaggerReader.java:225) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.swagger.RestSwaggerReader.read(RestSwaggerReader.java:111) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:240) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.swagger.RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) ~[camel-swagger-java-3.4.3.jar:3.4.3]}}
{{ at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:67) ~[camel-support-3.4.3.jar:3.4.3]}}
{{ ... 57 common frames omitted}}

 

My research led me to the following issue threads:

[https://github.com/jersey/jersey/issues/3783] and

[https://github.com/FasterXML/jackson-databind/issues/1865]

 

Is there any way for me to get this example running, maybe by importing another version of the Jackson dependency?

 

Kind Regards,

Franz J. Lanzendorfer",,acosentino,franz.lanzendorfer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 28 07:58:24 UTC 2020,,,,,,,,,,,"0|z0i4o8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/20 10:07;acosentino;Swagger Java used under the hood is 1.5.24, which in turn is using Jackson 2.9, while 3.4.3 is based on Jackson 2.10, I'll try to have a look.;;;","27/Aug/20 16:15;acosentino;[https://github.com/apache/camel-spring-boot-examples/blob/master/camel-example-spring-boot-rest-swagger/pom.xml]

Please set the jackson dependencies in dependencyManagement as in this pom.

It works on master and I'll backport on 3.4.x;;;","28/Aug/20 07:58;franz.lanzendorfer;Hi Andrea, it works now with the new dependencies. Thank you for your help, have a great weekend!;;;",,,,,,,,,,,,,,,,,
FTP Reconnect not successful,CAMEL-15460,13324389,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,lholthof,lholthof,25/Aug/20 06:37,26/Aug/20 05:18,13/Jul/23 08:33,25/Aug/20 11:41,3.4.3,,,3.4.4,3.5.0,,,,camel-ftp,,,,0,,,,,"This is a follow-up of issue CAMEL-15299.

During [reconnect|https://github.com/apache/camel/blob/master/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java#L1015] currently the expectation is that NOOP command throws an exception in case the client is not connected to the server anymore, but it might also just return false when not successful. During debugging I found that there is still a pending command (eg. retrieve of a file) which should be read before the NOOP, otherwise the NOOP response is not read correctly.

Will prepare a PR.",,davsclaus,lholthof,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15464,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 26 05:17:42 UTC 2020,,,,,,,,,,,"0|z0i254:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Aug/20 07:25;davsclaus;Sounds good;;;","25/Aug/20 11:41;davsclaus;Thanks for reporting and the PR;;;","26/Aug/20 05:17;davsclaus;Had to revert some parts of this as it breaks the tests of camel-ftp. Please next time run all tests of camel-ftp before providing PR.;;;",,,,,,,,,,,,,,,,,
camel-micrometer: NullPointer exception triggered by MicrometerExchangeEventNotifier,CAMEL-15457,13324232,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eandre,eandre,24/Aug/20 09:43,24/Aug/20 17:43,13/Jul/23 08:33,24/Aug/20 17:43,3.5.0,,,3.5.0,,,,,camel-micrometer,,,,0,,,,,"A recent [comit|[https://github.com/apache/camel/pull/3976]] causes NullPointer exceptions in some circumstances, though they are caught and logged as ""WARN"".

Output from the test testCamelRouteEvents() in MicrometerExchangeEventNotifierTest in master branch:
{code:java}
11:44:32.741 [main] WARN org.apache.camel.support.EventHelper - Error notifying event ID-devbox-1598261669122-0-1 exchange Exchange[ID-devbox-1598261669122-0-1] sending to: direct://in. This exception will be ignored.11:44:32.741 [main] WARN org.apache.camel.support.EventHelper - Error notifying event ID-devbox-1598261669122-0-1 exchange Exchange[ID-devbox-1598261669122-0-1] sending to: direct://in. This exception will be ignored.java.lang.NullPointerException: null at java.util.Objects.requireNonNull(Objects.java:221) ~[?:?] at io.micrometer.core.instrument.ImmutableTag.<init>(ImmutableTag.java:35) ~[micrometer-core-1.5.4.jar:1.5.4] at io.micrometer.core.instrument.Tag.of(Tag.java:29) ~[micrometer-core-1.5.4.jar:1.5.4] at io.micrometer.core.instrument.Tags.of(Tags.java:254) ~[micrometer-core-1.5.4.jar:1.5.4] at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifierNamingStrategy.getInflightExchangesTags(MicrometerExchangeEventNotifierNamingStrategy.java:58) ~[classes/:?] at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifier.handleExchangeEvent(MicrometerExchangeEventNotifier.java:80) ~[classes/:?] at org.apache.camel.component.micrometer.eventnotifier.MicrometerExchangeEventNotifier.notify(MicrometerExchangeEventNotifier.java:65) ~[classes/:?] at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:1236) ~[classes/:?] at org.apache.camel.support.EventHelper.notifyExchangeSending(EventHelper.java:700) ~[classes/:?]
{code}

The problem is that the MicrometerExchangeEventNotifier tries to build/update a metric on inflight exchanges in a route based on an ExchangeEvent with no associated fromRoute/fromRouteId. Events such as ""ExchangeSendingEvent"", as is created in the test, is an example of such an ExchangeEvent.

 ",,davsclaus,eandre,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15255,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 24 17:43:20 UTC 2020,,,,,,,,,,,"0|z0i168:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Aug/20 09:55;davsclaus;What version of Camel do you use?;;;","24/Aug/20 10:02;davsclaus;Thanks found out its only related to upcoming 3.5 release.;;;","24/Aug/20 14:11;eandre;Hi! I see you implemented a fix and resolved the issue, thank you for the prompt effort! Unfortionatly, the fix is somewhat incompatible with prometheus it seems:
{code:java}
Prometheus requires that all meters with the same name have the same set of tag keys. There is already an existing meter named 'CamelExchangesInflight' containing tag keys [camelContext, serviceName]. The meter you are attempting to register has keys [camelContext, routeId, serviceName].
{code}
 

My suggestion is to add/move the check you introduced in the MicrometerExchangeEventNotifierNamingStrategy to the method handleExchangeEvent() in MicrometerExchangeEventNotifier. That way we don't create the inflight metric at all in cases where no fromRouteId() can be extracted, which isn't really usefull in my opinion any way. Could be an idea to check for the precense of fromEndpoint as well, as this can also potentially return null. Something like this:


{code:java}
    private void handleExchangeEvent(ExchangeEvent exchangeEvent) {
        Exchange exchange = exchangeEvent.getExchange();
        if (exchange.getFromRouteId() != null && exchange.getFromEndpoint() != null) {
            String name = namingStrategy.getInflightExchangesName(exchange, exchange.getFromEndpoint());
            Tags tags = namingStrategy.getInflightExchangesTags(exchangeEvent, exchange.getFromEndpoint());
            Gauge.builder(name, () -> getInflightExchangesInRoute(exchangeEvent))
                .tags(tags)
                .register(getMeterRegistry());
        }
    }
{code};;;","24/Aug/20 14:14;davsclaus;Can you provide a PR with your suggested fix thanks;;;","24/Aug/20 14:18;eandre;Yes, I will provide no later than by the end of tomorrow.;;;","24/Aug/20 17:43;davsclaus;Thanks for the fast PR with the fix;;;",,,,,,,,,,,,,,
EndpointDSL breaks expressions in query parameters,CAMEL-15455,13324203,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vdobos,vdobos,24/Aug/20 08:22,25/Aug/20 08:03,13/Jul/23 08:33,25/Aug/20 08:03,3.4.3,,,3.4.4,3.5.0,,,,camel-endpointdsl,,,,0,,,,,"Expressions in parameters are destroyed by url-encoding during url creation in AbstractEndpointBuilder (using little non-sensical example to make reproduction setup easier).

For example:
{code:java}
.toD(seda(""someName"").size(""${header.size}"")){code}
will be translated by AbstractEndpointBuilder#computeUri (which uses URISupport#createQueryString) to

_seda://someName?size=%24%7Bheader.size%7D_

This will, of course, throw exception on endpoint creation.

For some reason, thrown exception is url-decoded, so parameter names will look OK, even when they are broken (this makes the error more difficult to spot)
{code:java}
...
java.lang.String to the required type: int with value ${header.size} due to org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Integer with value ${header.size} due to java.lang.NumberFormatException: For input string: ""${header.size}""
...


{code}
Enclosing expressions in RAW(..), fixes the issue, it is however quite suboptimal.

Following workaround will work:
{code:java}
.toD(seda(""someName"").size(""RAW(${header.size})"")){code}
 ",,davsclaus,vdobos,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 24 17:40:36 UTC 2020,,,,,,,,,,,"0|z0i0zs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Aug/20 15:17;davsclaus;So this is more about toD being dynamic and you are using simple expressions for those parameters. A regular to would not accept ${header.xxx} in the size parameter. And therefore we may not have noticed this before.;;;","24/Aug/20 17:09;vdobos;Yes, it is about using expression in parameters in toD (originally noticed this because I have requestTimeout in jms-component dependant on few runtime parameters)
From what I found in my limited debugging time, when getUrl() is called on AbstractEndpointBuilder, url query parameters are assembled url-encoded (default behaviour of URISupport#createQueryString), which then makes SendDynamicProcessor not evaluate the parameter values as expressions when creating/retrieving dynamic endpoint.
 When passing plain string in toD, it is not be url-encoded before expressions are evaluated.;;;","24/Aug/20 17:40;davsclaus;Yeah that is a good observation, so we may want to allow the endpoint dsl to build with encoded and non encoding depending on the EIP pattern. As others would depend on current behaviour. And then check if those options are using simple expressions, eg ${ } or $simple{ } style which is what you used in your example.;;;",,,,,,,,,,,,,,,,,
camel-cluster - Adding a new route after camel is started should start the route if leader,CAMEL-15454,13324199,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Aug/20 07:39,24/Aug/20 07:58,13/Jul/23 08:33,24/Aug/20 07:58,,,,3.5.0,,,,,camel-core,,,,0,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15450,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-24 07:39:41.0,,,,,,,,,,,"0|z0i0yw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClusteredRoutePolicyFactory throw NullPointerException when adding a route to CamelContext that has been started,CAMEL-15450,13324130,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,491739727@qq.com,491739727@qq.com,23/Aug/20 06:26,24/Aug/20 07:39,13/Jul/23 08:33,23/Aug/20 18:45,2.25.2,,,3.5.0,,,,,came-core,,,,0,,,,,"Hello,

I recently found that when using ClusteredRoutePolicyFactory , adding a route to a CamelContext that has been started gives an error.

 

follow is exceptionn stak
{code:java}
org.apache.camel.FailedToCreateRouteException: Failed to create route ns1/1: Route(ns1/1)[[From[timer:pocTimer?period=10s]] -> [SetHeader... because of java.lang.RuntimeException: java.lang.NullPointerExceptionorg.apache.camel.FailedToCreateRouteException: Failed to create route ns1/1: Route(ns1/1)[[From[timer:pocTimer?period=10s]] -> [SetHeader... because of java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:217) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1139) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3736) at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:1071) at com.netease.cloud.nsf.server.DefaultServer.onAdd(DefaultServer.java:65) at com.netease.cloud.nsf.resource.DefaultResourceManager.lambda$compareAndNotify$0(DefaultResourceManager.java:51) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.camel.RuntimeCamelException: java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicyFactory.createRoutePolicy(ClusteredRoutePolicyFactory.java:65) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1304) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:212) ... 8 moreCaused by: java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicy.setCamelContext(ClusteredRoutePolicy.java:140) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.forNamespace(ClusteredRoutePolicy.java:350) at org.apache.camel.impl.cluster.ClusteredRoutePolicyFactory.createRoutePolicy(ClusteredRoutePolicyFactory.java:63) ... 10 moreCaused by: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicy.onCamelContextStarted(ClusteredRoutePolicy.java:285) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.access$800(ClusteredRoutePolicy.java:49) at org.apache.camel.impl.cluster.ClusteredRoutePolicy$CamelContextStartupListener.onCamelContextStarted(ClusteredRoutePolicy.java:338) at org.apache.camel.impl.cluster.ClusteredRoutePolicy$CamelContextStartupListener.onCamelContextStarted(ClusteredRoutePolicy.java:323) at org.apache.camel.impl.DefaultCamelContext.addStartupListener(DefaultCamelContext.java:1565) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.setCamelContext(ClusteredRoutePolicy.java:136) ... 12 more
{code}
 

 

then i locate the cause:

ClusteredRoutePolicyFactory will call  ClusteredRoutePolicy.forNamespace

ClusteredRoutePolicy.forNamespace rely on ClusteredRoutePolicy.setCamelContext

SetCamelContext will determine if the CamelContext has been started, and if so, the following logic will be executed
{code:java}
private void onCamelContextStarted() {
    LOGGER.debug(""Apply cluster policy (stopped-routes='{}', started-routes='{}')"",
        stoppedRoutes.stream().map(Route::getId).collect(Collectors.joining("","")),
        startedRoutes.stream().map(Route::getId).collect(Collectors.joining("",""))
    );

    clusterView.addEventListener(leadershipEventListener);
}
{code}
But at this point the clusterView is still not initialized.It will be initialized when the ClusteredRoutePolicy.start() is called.

 ",,491739727@qq.com,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15454,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-23 06:26:41.0,,,,,,,,,,,"0|z0i0jk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - BulkAPI createBatchQuery swallows error,CAMEL-15449,13324077,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,mgenereu,mgenereu,22/Aug/20 14:57,29/Aug/20 12:50,13/Jul/23 08:33,29/Aug/20 12:50,3.4.3,,,3.4.4,3.5.0,,,,camel-salesforce,,,,0,,,,,"I'm not quite sure what exception handling looks like when it's getting passed around but this callback code is swallowing the exception:

[https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/DefaultBulkApiClient.java#L318-L327]

Exception coming into this callback was (paraphrasing) ""Salesforce didn't like one of the parameters to the REST API"" and then this code tries to unmarshal the response and throws an unmarshalling error.

Workaround for now is to fix the API error so this code can unmarshal successfully.

 

 ",,davsclaus,mgenereu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 24 16:44:35 UTC 2020,,,,,,,,,,,"0|z0i07s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Aug/20 08:03;davsclaus;Yeah I think instead of catching only SalesforceException it should be Exception / Throwable to ensure the callback is invoked. Wonder if you would be able to work on a potential fix, and maybe test it on your system.

We love contributions
https://camel.apache.org/community/support/;;;","24/Aug/20 16:44;mgenereu;Is the original developer available in case I have questions of intent?

 ;;;",,,,,,,,,,,,,,,,,,
component lifecycle is differen when endpoints are created using endpointdsl ,CAMEL-15445,13323958,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,21/Aug/20 13:41,23/Aug/20 08:04,13/Jul/23 08:33,23/Aug/20 08:04,,,,3.4.4,3.5.0,,,,camel-core,,,,0,,,,,"While working on a camel-quarkus [issue|https://github.com/apache/camel-quarkus/issues/1553] I've found that the order on which onInit and createEndpoint ar inveked is not the same when endpoint are defined using endpointds vs standard uri.

in case of endpoint dsl:
1. createEndpoint
2. onInit

in case of endpoint url:
1. onInit
2. createEndpoint


",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-21 13:41:58.0,,,,,,,,,,,"0|z0hzhc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-azure-storage-blob: If the AppendFile does not exist, it will be created but it will not append to the end of the content",CAMEL-15436,13323753,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,20/Aug/20 13:41,21/Aug/20 09:32,13/Jul/23 08:33,21/Aug/20 09:32,3.4.3,,,3.4.4,3.5.0,,,,camel-azure,,,,0,,,,,"Currently, if you have {{createAppendBlob=true}}, the component will create the file every-time and won't ignore it if the file exists, hence it should ignore the file creation if it exists in the storgage blob account. Same goes for {{createPageBlob=true}}",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-20 13:41:40.0,,,,,,,,,,,"0|z0hy7s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel-Website] Grouping Azure components does not work for all Azure components ,CAMEL-15432,13323698,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,omarsmak,omarsmak,omarsmak,20/Aug/20 08:25,20/Aug/20 09:51,13/Jul/23 08:33,20/Aug/20 08:40,,,,,,,,,website,,,,0,,,,,"While I was looking at our components reference [documentation|https://camel.apache.org/components/latest/index.html], I have noticed Azure Event Hubs is not grouped under *Azure* category

FYI [~Aemie]",,acosentino,Aemie,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 20 09:51:01 UTC 2020,,,,,,,,,,,"0|z0hxvs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Aug/20 08:31;Aemie;I can group it under Azure, it requires the addition of small components within its documentation.;;;","20/Aug/20 08:36;omarsmak;oh so is just missing this metadata {{:group: Azure}}? I will add it shortly now :);;;","20/Aug/20 08:37;acosentino;Yes, exactly;;;","20/Aug/20 08:40;omarsmak;I have added the group metadata in here: https://raw.githubusercontent.com/apache/camel/master/components/camel-azure-eventhubs/src/main/docs/azure-eventhubs-component.adoc 

Thank you for the tip;;;","20/Aug/20 09:51;Aemie;[~omarsmak] yea, that's the only thing required to do!;;;",,,,,,,,,,,,,,,
camel-main should not package test resource configurer config,CAMEL-15426,13323530,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,19/Aug/20 09:58,22/Aug/20 07:13,13/Jul/23 08:33,22/Aug/20 07:13,3.5.0,,,3.5.0,,,,,camel-main,,,,0,,,,,"camel main has two test resources:

src/test/resources/META-INF/services/org/apache/camel/configurer/MySecondBar
src/test/resources/META-INF/services/org/apache/camel/configurer/MySecondFoo

These seem to end up being packaged in the camel-main JAR:

{code}
jar tvf camel-main-3.5.0-SNAPSHOT.jar | grep MySecond  
   108 Wed Jan 22 15:10:16 GMT 2020 META-INF/services/org/apache/camel/configurer/MySecondBar
   108 Wed Jan 22 15:10:16 GMT 2020 META-INF/services/org/apache/camel/configurer/MySecondFoo
{code}",,davsclaus,jamesnetherton,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Aug/20 14:11;davsclaus;0001-CAMEL-15394-Fixed-maven-tooling-to-not-copy-test-sco.patch;https://issues.apache.org/jira/secure/attachment/13010086/0001-CAMEL-15394-Fixed-maven-tooling-to-not-copy-test-sco.patch",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 21 15:24:53 UTC 2020,,,,,,,,,,,"0|z0hwug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Aug/20 13:36;davsclaus;Yeah I have a fix for this on something I work on , but its part of other stuff that is not ready for merging so stay tuned for a few days.;;;","21/Aug/20 15:24;lb;Patch applied: https://github.com/apache/camel/pull/4115;;;",,,,,,,,,,,,,,,,,,
camel-salesforce: SalesforceLoginConfig seems to be leaking the password,CAMEL-15425,13323523,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,orpiske,orpiske,19/Aug/20 09:12,19/Aug/20 16:33,13/Jul/23 08:33,19/Aug/20 16:33,3.4.3,3.5.0,,3.4.4,3.5.0,,,,camel-salesforce,,,,0,,,,,"It seems that the [toString|https://github.com/apache/camel/blob/camel-3.4.3/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceLoginConfig.java#L236] method of SalesforceLoginConfig leaks the user password. I am not sure if there is some masking that happens behind the scenes, but out of precaution I am reporting this one. Also happens on master.

 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 09:13:07 UTC 2020,,,,,,,,,,,"0|z0hwsw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Aug/20 09:13;orpiske;I'll send a PR for this one as well.;;;",,,,,,,,,,,,,,,,,,,
camel-box: addFolderCollaboration may throw an NPE,CAMEL-15424,13323513,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,orpiske,orpiske,19/Aug/20 08:25,19/Aug/20 16:34,13/Jul/23 08:33,19/Aug/20 16:34,3.4.3,3.5.0,,3.4.4,3.5.0,,,,camel-box,,,,0,,,,,"The [code|https://github.com/apache/camel/blob/26392dfd37f7bd079a11bb48defb587d827df5b5/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxCollaborationsManager.java#L89] is de-referencing the collaborator before checking whether it is null, which can cause an NPE.

 

It can also happen on [3.4.3|https://github.com/apache/camel/blob/camel-3.4.3/components/camel-box/camel-box-api/src/main/java/org/apache/camel/component/box/api/BoxCollaborationsManager.java#L94].

 

 
{code:java}
Caused by: java.lang.NullPointerException
 at org.apache.camel.component.box.api.BoxCollaborationsManager.addFolderCollaboration(BoxCollaborationsManager.java:90)
 at org.apache.camel.component.box.BoxCollaborationsManagerTest.lambda$testAddFolderCollaborationNullFolderId$1(BoxCollaborationsManagerTest.java:37)
 at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:55)
 ... 66 more{code}
 

 

 

 

 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 08:26:08 UTC 2020,,,,,,,,,,,"0|z0hwqo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Aug/20 08:26;orpiske;I have the patch and reproducer ready. I'll send a PR soon.;;;",,,,,,,,,,,,,,,,,,,
camel-http dynamic aware removes Exchange.HTTP_QUERY header if Exchange.HTTP_PATH header not specified,CAMEL-15420,13323028,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ArtemSt,ArtemSt,17/Aug/20 10:37,26/Aug/20 06:50,13/Jul/23 08:33,23/Aug/20 16:35,2.24.3,3.4.3,,2.25.3,3.4.4,3.5.0,,,camel-http-common,,,,0,,,,,"If http path specified in endpoint uri instead of Exchange.HTTP_PATH header than dynamic aware ignores Exchange.HTTP_QUERY and set it as null.

Sending message to route
{code:java}
from(""direct:dynamicAware"")
 .setHeader(Exchange.HTTP_PATH, constant(""dynamicAware""))
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort());{code}
will return exchange with getIn().getHeader(Exchange.HTTP_QUERY) equal to ""par1=val1&par2=val2"".

But, sending message to route 
{code:java}
from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");{code}
removes header Exchange.HTTP_QUERY from result.

 

Here is full code of test: (also attached as a .java file)
{code:java}
public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {

 private HttpServer localServer;

 @BeforeEach
 @Override
 public void setUp() throws Exception {
 localServer = ServerBootstrap.bootstrap().
 setHttpProcessor(getBasicHttpProcessor()).
 setConnectionReuseStrategy(getConnectionReuseStrategy()).
 setResponseFactory(getHttpResponseFactory()).
 setExpectationVerifier(getHttpExpectationVerifier()).
 setSslContext(getSSLContext()).
 registerHandler(""/dynamicAware"", new BasicValidationHandler(GET.name(), null, null, null)).
 create();
 localServer.start();

 super.setUp();
 }

 @AfterEach
 @Override
 public void tearDown() throws Exception {
 super.tearDown();

 if (localServer != null) {
 localServer.stop();
 }
 }

 @Override
 protected RoutesBuilder createRouteBuilder() throws Exception {
 return new RouteBuilder() {
 @Override
 public void configure() throws Exception {
 from(""direct:dynamicAware"")
 .setHeader(Exchange.HTTP_PATH, constant(""dynamicAware""))
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort());
 from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");
 }
 };
 }
 @Test
 public void testDynamicAwareHeaders() throws Exception {
 Exchange e = fluentTemplate.to(""direct:dynamicAware"").send();
 assertNotNull(e.getIn().getHeader(Exchange.HTTP_QUERY));

 e = fluentTemplate.to(""direct:dynamicAwareWithoutPathHeader"").send();
 assertNotNull(e.getIn().getHeader(Exchange.HTTP_QUERY));

 }
}{code}",,ArtemSt,bedla,chardahe@redhat.com,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Aug/20 10:33;ArtemSt;HttpSendDynamicAwareHeadersTest.java;https://issues.apache.org/jira/secure/attachment/13009963/HttpSendDynamicAwareHeadersTest.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 23 20:15:27 UTC 2020,,,,,,,,,,,"0|z0htqw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Aug/20 15:38;chardahe@redhat.com;[~ArtemSt], Thanks for reporting it and providing the test case,

I'm working on it;;;","18/Aug/20 19:30;chardahe@redhat.com;[~ArtemSt], Did you refer the doc [https://camel.apache.org/components/latest/http-component.html] ? 

It says,""URI parameters. Will override existing URI parameters set directly on the endpoint.""

I hope it answers the query.

 ;;;","18/Aug/20 19:53;ArtemSt;[~chardahe@redhat.com], thanks for your replay. Yes, I saw the docs, but I do not have a query parameters in my URI's, only path. I did not realize if I had a path specified in my URI I cant use a HTTP_QUERY header. Is it a correct behavior?;;;","18/Aug/20 20:23;ArtemSt;[~chardahe@redhat.com], also, if you change attached test to use .to() and not .toD() the test works fine. Should not it be a same behavior for .to and .toD?

To be clear, in this route Exchange.HTTP_QUERY header will be removed:
{code:java}
from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");{code}
But in this route Exchange.HTTP_QUERY header will contain ""par1=val1&par2=val2"" value:
{code:java}
from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .to(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");{code}
 ;;;","19/Aug/20 16:35;chardahe@redhat.com;Thanks [~ArtemSt], I verified the same, I agree it should be the same behavior.

I'll raise PR for it.;;;","23/Aug/20 16:35;davsclaus;Thanks for reporting and the PR;;;","23/Aug/20 16:51;ArtemSt;[~davsclaus], is it possible to have this fix in 2.24.xx version? Should it be a new push request in 2.24 branch?

 ;;;","23/Aug/20 20:15;bedla;2.24.x is EOL and there is no planned release for this branch. You can open backport PR against branch camel-2.25.x if it helps you.;;;",,,,,,,,,,,,
camel-website build instructions: yarn format not found,CAMEL-15419,13322909,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,amdmdi,amdmdi,16/Aug/20 05:57,09/Dec/20 17:44,13/Jul/23 08:33,09/Dec/20 17:44,,,,,,,,,website,,,,0,,,,,"In camel-website README.md (under Build the website content) we are told to use *yarn format* command to format the code, but this command is not defined :


 {{$ yarn format}}
 {{yarn run v1.22.0}}
 {{error Command ""format"" not found.}}
 {{info Visit [https://yarnpkg.com/en/docs/cli/run] for documentation about this command.}}",,amdmdi,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 09 17:44:01 UTC 2020,,,,,,,,,,,"0|z0ht0g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Aug/20 19:57;githubbot;ARUNMANNURU opened a new pull request #463:
URL: https://github.com/apache/camel-website/pull/463


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","16/Aug/20 20:02;githubbot;ARUNMANNURU closed pull request #463:
URL: https://github.com/apache/camel-website/pull/463


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","17/Aug/20 22:40;zregvart;I see, thanks for raising this issue. yarn {{format}} script is supported only on the Antora UI theme, to invoke it one must be in the {{antora-ui-camel}} directory.;;;","21/Aug/20 18:32;githubbot;amdmdi opened a new pull request #470:
URL: https://github.com/apache/camel-website/pull/470


   ""yarn format"" is supported only in antora-ui-camel dir
   
   As per Zoran's suggestion in JIRA: ""yarn format script is supported only on the Antora UI theme, to invoke it one must be in the antora-ui-camel directory.""


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/20 17:59;githubbot;zregvart commented on pull request #470:
URL: https://github.com/apache/camel-website/pull/470#issuecomment-678672117


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","22/Aug/20 17:59;githubbot;zregvart merged pull request #470:
URL: https://github.com/apache/camel-website/pull/470


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","09/Dec/20 17:44;zregvart;We improved the build process and the documentation in the README.;;;",,,,,,,,,,,,,
REST endpoint has inconsistent URL Encoding ,CAMEL-15410,13322572,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kris.boutilier@gmail.com,kris.boutilier@gmail.com,13/Aug/20 16:07,30/Mar/21 11:14,13/Jul/23 08:33,30/Mar/21 11:14,3.4.2,,,3.10.0,,,,,rest,,,,0,,,,,"When passing query parameters to a REST producer the encoding behavior is inconsistent. Consider the following:
{code:java}
.to(""rest:get:bw-web-api/v1/objects/employees?host=agresso&companyId=RD&select=personId,personName&disconnect=true"")
{code}
The resulting request payload, as observed with Wireshark, is:
{code:java}
GET /bw-web-api/v1/objects/employees?companyId=RD&disconnect=true&select=personId%252CpersonName HTTP/1.1\r\n{code}
Note that the comma has been double-encoded resulting in transmission of %252C instead of the expected %2C.

If instead the problem string is passed as a parameter via a header, the comma is correctly encoded:
{code:java}
.setHeader(""select"", simple(""personId,personName""))
.to(""rest:get:bw-web-api/v1/objects/employees?host=agresso&companyId=RD&select={select}&disconnect=true"") {code}
 ",,davsclaus,jeremyross,kris.boutilier@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 30 11:14:30 UTC 2021,,,,,,,,,,,"0|z0hqxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Aug/20 16:25;kris.boutilier@gmail.com;It's not immediately clear if it's related to the above, but I'm also having issues with + vs %20 encoding of spaces when passed in via headers and, because the target server is pedantic, requests that use application/x-www-form-urlencoded style encoding are failing.

For example, this:
{code:java}
.setHeader(""filter"", simple(""date(time/date) ge 2020-06-01 and personId eq 'R10019'""))
.to(""rest:get:bw-web-api/v1/objects/timesheets?host=agresso&companyId=RD&select={select}&filter={filter}&onWorkFlow=true&noWorkflow=true"") 
{code}
results in a payload of:
{code:java}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29+ge+2020-06-01+and+personId+eq+%27R10019%27&noWorkflow=true&onWorkFlow=true&select=personId%2Cperiod%2Ctime%28*%29 HTTP/1.1\r\n{code}
however the server is expecting to see this encoding:
{code:java}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29%20ge%202020-06-01%20and%20personId%20eq%20%27R10019%27&onWorkflow=true&noWorkflow=true&select=personId%2Cperiod%2Ctime%28*%29 HTTP/1.1\r\n{code}
 ;;;","25/Mar/21 12:26;davsclaus;Yeah its a PITA that spaces was encoded into + sign in Camel's creation. 

And I recall we had issues with some HTTP servers that expected + for spaces instead of %20.
However for correctness it would be better to use %20 (maybe have a global configuration in Camel to turn old style back on);;;","25/Mar/21 12:39;davsclaus;What camel component do you use as the http client, is that camel-http, camel-netty-http, or something else?;;;","25/Mar/21 12:53;davsclaus;Here is a beginning of an unit test
https://github.com/apache/camel/commit/d7f3ad44922d638b4b3fb5b370bee7103d5dbb65

Would be good to add wireshark capture or similar and check the actual HTTP content being sent.;;;","25/Mar/21 14:57;davsclaus;With a HTTP echo server I get

{code}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29+ge+2020-06-01+and+personId+eq+%27R10019%27&select=personId%2CpersonName HTTP/1.1""
{code}

So the plus sign is still there;;;","25/Mar/21 18:15;davsclaus;The plus sign is now fixed to be %20

{code}
""GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29%20ge%202020-06-01%20and%20personId%20eq%20%27R10019%27&select=personId%2CpersonName HTTP/1.1""
{code};;;","26/Mar/21 14:27;jeremyross;Spaces should be encoded to ""%20"" in the path, and ""+"" in the query and fragment. So,

Before ""?"": %20
After ""?"": +

First two answers [here|https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20] are pretty good.;;;","30/Mar/21 10:17;davsclaus;Hi Jeremy

I didnt spot your comment. There is a post on dev mailing list.

Yes URL encoding is sadly yet another thing in IT that is ambiguous and can cause problems.

The rule about + is for HTML forms, with content-type: application/x-www-form-urlencoded
https://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#h-17.13.4.1

The percent encoding with %20 as space is something all HTTP servers is capable of doing, so using %20 in URLs is safe.

The special + rule is only for HTTP and something that potentially servers may struggle with. It may be that they only decode + as space, if there is a HTTP header with:

Content-Type: application/x-www-form-urlencoded

And Camel would not send that by default. Also if you use HTTP POST with content in the message body, and query parameters also in the URI that has spaces, then what Content-Type should you use? ie. if the HTTP POST body is json data.


For non HTTP components then decimal encoding space as %20 makes it consistent

sql:my-database?select%20from%20myorders

vs

sql:my-database?select+from+myorders

And especially if the query ends up with + to be used as plus, eg
For example if you could so something ala (yes its not correct SQL)

sql:my-database?update ages set age = age + 2

Then it would be encoded as

sql:my-database?update+ages+set+age+%3D+age+%2B+2

And in pure decimal it would be

sql:my-database?update%20ages%20set%20age%20%3D%20age%20%2B%202

When you see % decimail encoding then you know its encoded, but if you do not and see a plus sign you may think its the math operator

to(""foo:bar?beer=2+3"")




;;;","30/Mar/21 10:36;davsclaus;I do think it may be better to make this configurable and keep the old behavior as default (so Camel stays the same).
And then allow to turn on to use %20 as spaces for the HTTP components so this can be used for HTTP servers that has problems.;;;","30/Mar/21 11:12;davsclaus;Okay we are as before with using plus signs for spaces.;;;","30/Mar/21 11:14;davsclaus;Lets leave it as this.

Adding support for plus as space for all the http components is tedious work. We can look at this later if more Camel end users hit this problem with HTTP servers.;;;",,,,,,,,,
Merge operation in camel-olingo2 sets all entity properties to null,CAMEL-15407,13322536,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,christophd,christophd,christophd,13/Aug/20 12:33,19/Aug/20 07:35,13/Jul/23 08:33,19/Aug/20 07:35,3.x,,,3.5.0,,,,,camel-olingo2,,,,0,,,,,"The merge operation in OData V2 can be used to update individual fields on an entity. The operation should perform an incremental update without replacing all the contents of an entry. In particular the request updates only the properties indicated in the request body, and leaves untouched any other property not mentioned in its current state.

When the camel-olingo2 component performs the merge operation all fields are updated - also the not mentioned properties. Those fields not mentioned in the request body are set to null by default.

This behavior is controlled by the EntityProvider write property called ""isDataBasedPropertySerialization"". By default this setting is set to false resulting in non present fields to be set to null by default. For merge operations this setting should be enabled by default in order to just update the mentioned fields in the request body.",,christophd,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15406,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 18 11:22:32 UTC 2020,,,,,,,,,,,"0|z0hqpk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Aug/20 12:49;davsclaus;Are you working on a PR;;;","18/Aug/20 11:22;christophd;[~davsclaus] yes you can assign to me if you want;;;",,,,,,,,,,,,,,,,,,
rest component - Endpoint DSL for multi valued has null as prefix,CAMEL-15400,13322247,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/20 11:31,12/Aug/20 12:02,13/Jul/23 08:33,12/Aug/20 12:02,3.4.2,,,3.4.4,3.5.0,,,,,,,,0,,,,,"Reported on user forum
http://camel.465427.n5.nabble.com/Camel-Rest-Endpoint-DSL-prefix-the-string-quot-null-quot-to-query-parameters-key-td5878225.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 12 12:02:28 UTC 2020,,,,,,,,,,,"0|z0hoy8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Aug/20 11:40;davsclaus;src/generated/java/org/apache/camel/builder/endpoint/dsl/CryptoCmsEndpointBuilderFactory.java:            doSetMultiValueProperty(""recipient"", ""null"" + key, value);
src/generated/java/org/apache/camel/builder/endpoint/dsl/JpaEndpointBuilderFactory.java:            doSetMultiValueProperty(""parameters"", ""null"" + key, value);
src/generated/java/org/apache/camel/builder/endpoint/dsl/RestEndpointBuilderFactory.java:            doSetMultiValueProperty(""queryParameters"", ""null"" + key, value);;;;","12/Aug/20 12:02;davsclaus;Fixed for rest, jpa and crypto-cms;;;",,,,,,,,,,,,,,,,,,
PropertyBindingSupport - Root object has issue with list and source code generated configurer,CAMEL-15394,13322065,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Aug/20 15:35,23/Aug/20 18:51,13/Jul/23 08:33,23/Aug/20 18:51,3.4.2,,,3.5.0,,,,,,,,,0,,,,,,,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15422,,,,,,,,,CAMEL-15160,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 04:12:55 UTC 2020,,,,,,,,,,,"0|z0hnts:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Aug/20 15:36;davsclaus;There is potential an issue with setting options via configurer and using list types

Camel K needs this
{code}
SourcesCofiguration conf = new SourcesCofiguration();

PropertyBindingSupport.build()
            .withCamelContext(context)
            .withTarget(conf)
            .withProperties(properties)
            .withRemoveParameters(false)
            .withOptionPrefix(""camel.k."")
            .withConfigurer(configurer)
            .bind()
{code}

{code}
camel.k.sources[0].name = timer
camel.k.sources[0].language = yaml
camel.k.sources[0].location = file:/etc/camel/sources/timer/timer.yaml
camel.k.sources[0].type = template
{code}

Creating this ticket to look into this to get this fixed in camel-core;;;","13/Aug/20 08:55;lb;I've created a repo to have a reproducer for the issue: https://github.com/lburgazzoli/camel-property-biding. 

When running it, it show:

{code}
[main] INFO org.apache.camel.impl.engine.DefaultBeanIntrospection - Stopping BeanIntrospection which was invoked: 3 times
{code}

This means that the configurer is not kicking it to set the properties and this happens because the configurer have no support for subscription operator so when the configure method is invoked with keys like sources[0], that key does not fall into any of the switch/case options.

Wonder if we should have dedicated methods or support for such pattern.
;;;","14/Aug/20 15:23;davsclaus;Yeah lets work on making this possible - we dont want reflection. 

Added your project as a reproducer in camel-main;;;","15/Aug/20 05:48;davsclaus;I think we can reduce the code path by creating a reflection configurer we use when there is no source code generated / explicit configurer provided, then the code path can be the same, instead of doing something else depending on a configurer is null or not null.;;;","17/Aug/20 10:29;davsclaus;Okay its a bit more tricky, working on this from a different angel;;;","18/Aug/20 09:32;davsclaus;Have some half ugly code that works, that enhancned the configurer itself to support OGNL and list/map/array. Since this logic is a bit duplicate of property binding support that uses reflection based, then it would be great if we could somehow merge this logic and make it work for both configurer vs reflection. ;;;","19/Aug/20 04:12;davsclaus;TODO: autowired to work with configurer *DONE*
TODO: OGNL walk reworked *DONE*
TODO: PropertyConfigurerSupport to be back to as before *DONE*
TODO: option prefix *DONE*
TODO: Auto create middle objects via configurer *DONE*
TODO: OGNL walk reflection map/list/array create new instance if necessary *DONE*
TODO: Can we turn reflection into a cheating configurer implementation that does reflection under the hood to have same code path as a real configurer *WONT DO*
TODO: The problem with # ref values that does lookup for non string types problem *DONE*;;;",,,,,,,,,,,,,
camel-aws2-sqs: amazonAWSHost is not set,CAMEL-15391,13321940,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,11/Aug/20 06:36,11/Aug/20 15:29,13/Jul/23 08:33,11/Aug/20 14:22,3.4.2,,,3.4.4,3.5.0,,,,camel-aws2,,,,0,,,,," 

I noticed that the option amazonAWSHost is not set for the aws2-sqs component. Even though it is set, looking at the logs I have this: 

 
{code:java}
2020-08-10 17:56:40,399 [ool-38-thread-1] DEBUG software.amazon.awssdk.http.apache.internal.net.SdkSslSocket - created: sqs.us-east-1.amazonaws.com/52.46.157.96:443
2020-08-10 17:56:40,493 [22-d77deac8917f] WARN org.apache.kafka.clients.NetworkClient - [Consumer clientId=consumer-bfaf2b64-f5ce-4d5c-8d22-d77deac8917f-4, groupId=bfaf2b64-f5ce-4d5c-8d22-d77deac8917f] Connection to node 0 (localhost/127.0.0.1:39079) could not be established. Broker may not be available.
2020-08-10 17:56:40,539 [cf-e03742d0c9b1] WARN org.apache.kafka.clients.NetworkClient - [Consumer clientId=consumer-7e6786ce-c9ba-47a0-b0cf-e03742d0c9b1-8, groupId=7e6786ce-c9ba-47a0-b0cf-e03742d0c9b1] Connection to node 0 (localhost/127.0.0.1:45741) could not be established. Broker may not be available.
2020-08-10 17:56:40,598 [ool-38-thread-1] DEBUG software.amazon.awssdk.http.apache.internal.net.SdkSslSocket - shutting down output of sqs.us-east-1.amazonaws.com/52.46.157.96:443
2020-08-10 17:56:40,598 [ool-38-thread-1] DEBUG software.amazon.awssdk.http.apache.internal.net.SdkSslSocket - shutting down input of sqs.us-east-1.amazonaws.com/52.46.157.96:443
2020-08-10 17:56:40,599 [ool-38-thread-1] DEBUG software.amazon.awssdk.http.apache.internal.net.SdkSslSocket - closing sqs.us-east-1.amazonaws.com/52.46.157.96:443
{code}
 

 

This is slightly similar to CAMEL-14002.",,davsclaus,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 11 14:22:41 UTC 2020,,,,,,,,,,,"0|z0hn20:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Aug/20 06:37;orpiske;I know where the problem is and I will send a proposed fix for it soon.;;;","11/Aug/20 14:22;davsclaus;Backported to 3.4.x branch too;;;",,,,,,,,,,,,,,,,,,
Can't set Salesforce packages via application properties.,CAMEL-15387,13321599,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mgenereu,mgenereu,07/Aug/20 23:05,09/Aug/20 21:41,13/Jul/23 08:33,09/Aug/20 19:45,3.4.2,,,3.4.3,3.5.0,,,,camel-salesforce,,,,0,,,,,"When assign the following line in application.properties, the property doesn't get set.
{code:java}
camel.component.salesforce.packages=com.companyname.camel.salesforce.dto
{code}
The line that sets it is ([in generated file|https://github.com/apache/camel/blob/9554181c81c8cfc0e02a408a7b2fbe4427904e5c/components/camel-salesforce/camel-salesforce-component/src/generated/java/org/apache/camel/component/salesforce/SalesforceComponentConfigurer.java#L129])
{code:java}
case ""packages"": target.setPackages(property(camelContext, java.lang.String[].class, value)); return true;
{code}
There's no converter from String to String[].  If the generated code tried to use String to String, the setter for packages will properly split on commas.

I don't know the right way to fix this.  Should there be a converter or should the generated code know to just assign it as a String since a setter is available?

 ",,mgenereu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 09 21:41:10 UTC 2020,,,,,,,,,,,"0|z0hkyw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Aug/20 21:41;mgenereu;Very cool.  Thank you!;;;",,,,,,,,,,,,,,,,,,,
Camel 3 Velocity warns about deprecated configuration keys,CAMEL-15383,13321446,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,tapiiron,tapiiron,07/Aug/20 06:04,07/Aug/20 06:24,13/Jul/23 08:33,07/Aug/20 06:12,3.4.2,,,3.5.0,,,,,camel-velocity,,,,0,,,,,"When using velocity component seems like camel is using deprecated values for some configuration keys:

org.apache.velocity.engine-core - 2.1.0 | configuration key 'class.resource.loader.class' has been deprecated in favor of 'resource.loader.class.class'
org.apache.velocity.engine-core - 2.1.0 | configuration key 'resource.loader' has been deprecated in favor of 'resource.loaders'
org.apache.velocity.engine-core - 2.1.0 | configuration key 'class.resource.loader.description' has been deprecated in favor of 'resource.loader.class.description'

This generates WARNing logs when using the component.","OpenJDK 11, Camel 3.4.2, karaf container and camel-velocity",acosentino,tapiiron,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 07 06:24:04 UTC 2020,,,,,,,,,,,"0|z0hk0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/20 06:12;acosentino; This has been already fixed on 3.5.x [https://github.com/apache/camel/commit/bd9a160d845dbc15ce67c9f846d42ca937d68b37#diff-27ed1404ba21a15203d4a720549f8cee];;;","07/Aug/20 06:15;tapiiron;will this fix be backported to LTS 3.4 release?;;;","07/Aug/20 06:24;acosentino;No, because changing the key name will break backwards compatibility;;;",,,,,,,,,,,,,,,,,
Opentelemetry injection/extraction doesn't work,CAMEL-15382,13321419,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,rubensvp,rubensvp,07/Aug/20 01:53,07/Aug/20 04:20,13/Jul/23 08:33,07/Aug/20 04:20,,,,3.5.0,,,,,,,,,0,,,,,"Context propagation for opentelemetry doesn't work as expected. When I have two services in different processes, the context is not propagated.",,rubensvp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-07 01:53:17.0,,,,,,,,,,,"0|z0hjuw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File gets locked When using camel-flatpack delimited parser,CAMEL-15378,13321206,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,shaipan,shaipan,06/Aug/20 01:58,06/Aug/20 04:31,13/Jul/23 08:33,06/Aug/20 04:31,3.4.2,,,3.4.3,3.5.0,,,,camel-flatpack,,,,0,,,,,"When using Faltpack endpoint for delimited file parsing, the file gets locked and doesn't move to .done or .error folder if we configure it to do that. ",,shaipan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-06 01:58:59.0,,,,,,,,,,,"0|z0hik8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing classes for opentracing camel-spring-boot,CAMEL-15372,13321010,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,rubensvp,rubensvp,05/Aug/20 05:00,05/Aug/20 05:33,13/Jul/23 08:33,05/Aug/20 05:33,,,,3.5.0,,,,,,,,,0,,,,,"It seems like after a regeneration (1), opentracing clases were deleted.

If I try to compile the Camel sprint boot opentracing example from:apache/camel-spring-boot-examples repository the following errors arise:

 camel-spring-boot-examples/camel-example-spring-boot-opentracing/service1/src/main/java/sample/camel/Service1Application.java:[30,2] cannot find symbol
 [ERROR] symbol: class CamelOpenTracing

 

1) [https://github.com/apache/camel-spring-boot/commit/acbdd17f997b7b70a9877ca7de2ce09153866168]",,rubensvp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-08-05 05:00:55.0,,,,,,,,,,,"0|z0hhdk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer: All but last value of query parameter with multiple values are lost,CAMEL-15370,13320948,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,k5,k5,04/Aug/20 20:04,07/Aug/20 13:13,13/Jul/23 08:33,07/Aug/20 13:12,3.3.0,,,3.4.3,3.5.0,,,,came-cxf,,,,1,,,,,"If using a query parameter name multiple times, only the last value is actually used.

 

e.g.  .to(""cxfrs:[http://example.com/]"") with Exchange value Exchange.HTTP_QUERY id=1&id=2 will call to example.com with id=2

 

As far as i can tell the problem is caused by CxfRsProducer::getQueryParametersFromQueryString. In the method all query paramters are inserted in a map, and only the last use of a parameter name is preserved.

 

One solution would be to insert the values directy into the client field, skipping the Map.

 ",,chardahe@redhat.com,davsclaus,ffang,k5,mail@bernhardunger.de,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Aug/20 19:24;k5;CAMEL-15370.patch;https://issues.apache.org/jira/secure/attachment/13009137/CAMEL-15370.patch","05/Aug/20 20:50;chardahe@redhat.com;CAMEL-15370_Chandra.patch;https://issues.apache.org/jira/secure/attachment/13009144/CAMEL-15370_Chandra.patch","06/Aug/20 11:17;k5;camel_map_with_list (2).patch;https://issues.apache.org/jira/secure/attachment/13009191/camel_map_with_list+%282%29.patch",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 07 13:13:29 UTC 2020,,,,,,,,,,,"0|z0hh0g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Aug/20 05:47;davsclaus;Okay sounds good, would you be able to provide a fix as a PR;;;","05/Aug/20 19:27;k5;Hi [~davsclaus],

i added a patch with a testcase and the changes to CxfRSProducer. I could write a version that has less changes to the class, but i think the version in the patch is more consistent.

It is my first patch here, so it might not hold up to your standards.

Regards, Frank;;;","05/Aug/20 20:44;chardahe@redhat.com;Hi Frank, 

 

I have modified existing method where I'm checking if that query param is already present at map if yes then I'm adding all the values by & and while calling client I'm splitting it and calling for all the values. Refer CAMEL-15370_Chandra.patch;;;","05/Aug/20 21:05;k5;Hi Chandrakant, this implementation will cause problems if the value contains an & (or %26 escaped)

See this failing testcase: 
{code:java}
   @Test
    public void testProducerWithQueryParametersWithMultipleValues2() {
        Exchange exchange = template.send(""cxfrs://http://localhost:"" + getPort2() + ""/"" + getClass().getSimpleName() + ""/testQuery?httpClientAPI=true&synchronous=true"", new Processor() {
                public void process(Exchange exchange) throws Exception {
                    exchange.setPattern(ExchangePattern.InOut);
                    Message inMessage = exchange.getIn();
                    // set the Http method
                    inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
                    inMessage.setHeader(Exchange.HTTP_QUERY, ""id=1%262"");
                    inMessage.setBody(null);                
                }
            
            });
     
        // get the response message 
        String response = exchange.getOut().getBody(String.class);
        assertNotNull(response, ""The response should not be null"");
        assertEquals(""id=1%262"", response, ""The response value is wrong"");
    }
{code}
 

You also cause an npe if the value is null in the map.

 

I dont't really see a valid implemenation that leverages a csv syntax in the values of the Map, that doesn't cause incompatiblity issues for users that provide the Map with CxfConstatns.CAMEL_CXF_RS_QUERY_MAP.

 ;;;","06/Aug/20 09:57;chardahe@redhat.com;Hi Frank, 

Thanks for pointing it, I forgot to check for NPE

Can we introduce any other identifier to join the values instead of $ or any such special character, for which there is no possibility to be as a value?;;;","06/Aug/20 10:37;mail@bernhardunger.de;Hi Chandrakant,

Spring MVC ist using a ""MultiValueMap"" to solve this problem. See [https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/MultiValueMap.html]

Also available from google commons is com.google.common.collect.HashMultimap

These maps simply allowing multiple identical keys.

I think this could be a possibility for fixing the problem.

We implemented a workarround so far:
{code:java}
private HashMultimap<String, String> createParamsMultimap(String queryString, String charset)
			throws UnsupportedEncodingException {
		HashMultimap<String, String> queryMap = HashMultimap.create();


		for (String param : queryString.split(""&"")) {
			String[] pair = param.split(""="", 2);
			if (pair.length == 2) {
				String name = URLDecoder.decode(pair[0], charset);
				String value = URLDecoder.decode(pair[1], charset);
				queryMap.put(name, value);
			}
			else {
				throw new IllegalArgumentException(""Invalid parameter, expected to be a pair but was "" + param);
			}
		}

		return queryMap;
	}
{code}
Disadvantage indeed is, that we must implement a new Map Interface, otherwise we would break Camels API.

{code:java}
// New implementation
static class MyMultiMap implements Map<String, String> {
...
//All other Methods throwing an UnsupportedOperationException
@Override
		public Set<Entry<String, String>> entrySet() {
			return mulitmap.entries();
		}
{code}
In process Method:

{code:java}
@Override
	public void process(Exchange exchange) throws Exception {
		String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);

		// create multimap of parameters, preserving multiple params of the same name
		HashMultimap<String, String> queryMap =
				createParamsMultimap(queryString, ExchangeHelper.getCharsetName(exchange));

		// wrap it to hide the multimap als a conventional map
		MyMultiMap myMultiMap = new MyMultiMap(queryMap);

		// set override parameter for cxf query map
		exchange.getMessage().setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, myMultiMap);
//further implementations....
{code}


Maybe you find a cleaner backward compatible way for the fix?

Kind regards

Bernhard;;;","06/Aug/20 11:09;k5;Hi [~chardahe@redhat.com]

 

as i already tried to state, i don't see a version working that leverages some kind of ""csv"" syntax in the values that doesn't have a significant risk to break for some consumer.

 

I appended a different version that uses a Map<String,List<String>> internally. WebClient seems to supports List<String> directly as parameter, and expands it as expected.

I dont see incompatiblities if the map contained only String. But will introduce some further sideeffects/improvements like map with Map<String,Integer> will also work (it causes classcast error in the current version).

But i still prefer my original patch that removes the usage of map for the querystring.

 

Regards Frank

 

 ;;;","06/Aug/20 15:53;ffang;Hi Guys,

Thanks all for the discussion and patches!

I prefer [~k5]'s original fix since it's straightforward with testcase.

[~k5], could you please send a git PR(pull request), so that your name can be available in the git commit history. Also please revise your testcase a little bit to include the case that value could have escaped %26.

Thanks all again!
Freeman;;;","06/Aug/20 22:02;k5;Hi Freeman,

 

i created a PR

 

Regards Frank;;;","07/Aug/20 13:13;ffang;patch applied on behalf of [~k5] with thanks!

Thanks all again for the discussion here!

Freeman;;;",,,,,,,,,,
camel-aws2-kinesis: IndexOutOfBoundsException when polling,CAMEL-15369,13320866,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,04/Aug/20 13:44,05/Aug/20 13:03,13/Jul/23 08:33,05/Aug/20 13:03,3.4.2,,,3.4.3,3.5.0,,,,camel-aws2,,,,0,,,,,"This is the similar to the issue I reported on CAMEL-15358 but this one is for the Camel AWS 2 component:

 
{code:java}
2020-08-04 15:40:15,298 [c-kin-stream-54] WARN org.apache.camel.component.aws2.kinesis.Kinesis2Consumer - Consumer Consumer[aws2-kinesis://ckc-kin-stream-54] failed polling endpoint: aws2-kinesis://ckc-kin-stream-54. Will try again at next poll. Caused by: [java.lang.IndexOutOfBoundsException - Index 0 out of bounds for length 0]
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
 at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64) ~[?:?]
 at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70) ~[?:?]
 at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248) ~[?:?]
 at java.util.Objects.checkIndex(Objects.java:372) ~[?:?]
 at java.util.ArrayList.get(ArrayList.java:459) ~[?:?]
 at java.util.Collections$UnmodifiableList.get(Collections.java:1310) ~[?:?]
 at org.apache.camel.component.aws2.kinesis.Kinesis2Consumer.getShardItertor(Kinesis2Consumer.java:132) ~[camel-aws2-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.component.aws2.kinesis.Kinesis2Consumer.poll(Kinesis2Consumer.java:55) ~[camel-aws2-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-support-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106) [camel-support-3.4.2.jar:3.4.2]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
 at java.lang.Thread.run(Thread.java:834) [?:?]{code}",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 04 13:45:54 UTC 2020,,,,,,,,,,,"0|z0hgi8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Aug/20 13:45;orpiske;I will send a PR with a proposed fix for this one. We need to do the same as in CAMEL-15358.;;;",,,,,,,,,,,,,,,,,,,
HTML validation issues,CAMEL-15360,13320270,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,30/Jul/20 19:57,02/Aug/20 15:18,13/Jul/23 08:33,02/Aug/20 15:18,,,,,,,,,website,,,,0,,,,,"Seems that changes in CAMEL-15185 caused HTML [validation issues|https://ci-builds.apache.org/job/Camel/job/Camel.website/job/master/7/consoleFull]:

{code}
  1:5444  error  Element <figure> is not permitted as content in <dl>  element-permitted-content
  1:5628  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:5671  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:5698  error  <img> is missing required alt attribute               WCAG/H37
  1:5766  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:5793  error  <img> is missing required alt attribute               WCAG/H37
  1:6107  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:6146  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6169  error  <img> is missing required alt attribute               WCAG/H37
  1:6237  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6260  error  <img> is missing required alt attribute               WCAG/H37
  1:6887  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:6931  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6959  error  <img> is missing required alt attribute               WCAG/H37
  1:7027  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7055  error  <img> is missing required alt attribute               WCAG/H37
  1:7593  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:7633  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7657  error  <img> is missing required alt attribute               WCAG/H37
  1:7725  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7749  error  <img> is missing required alt attribute               WCAG/H37
  1:9296  error  Duplicate ID ""social-media""                           no-dup-id
{code}

",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,CAMEL-15185,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 02 15:18:03 UTC 2020,,,,,,,,,,,"0|z0hcug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Jul/20 01:23;githubbot;zregvart opened a new pull request #443:
URL: https://github.com/apache/camel-website/pull/443


   This greatly simplifies the footer design and fixes HTML issues
   identified by `check:html` script.
   
   We're now using Unicode full width plus symbol so we don't need the SVG
   icons for show/hide menu.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 03:23;githubbot;AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463385398



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Is this meant to be changed as `footer .footer input[type=""checkbox""]:checked` as it's the same as the stated class as above and thus the preview is failing for the same?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 03:24;githubbot;AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463385398



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Is this meant to be changed as `footer .footer input[type=""checkbox""]:checked` as it's defined as the same as class as above and thus the preview is failing for the same?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 08:18;githubbot;zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463471405



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Yeah I noticed a quirk artefact in Chrome so I fixed it last minute without running the builds/checks, should be okay now.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 09:49;githubbot;AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463515027



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       This line of code isn't required with the above suggestions I made.

##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);
+    content: '\FF0B';
+    position: absolute;
     display: block;
+    height: 1.75rem;
+    width: 1.75rem;
+    line-height: 1.75rem;
+    font-size: 1.75rem;
+    transition: 0.2s;
   }
 
-  input[type=""checkbox""] ~ label img.hide-menu,
-  input[type=""checkbox""] ~ div.footer-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked + label img.show-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked ~ label img.hide-menu,
-  input[type=""checkbox""]:checked ~ div.footer-menu {
-    display: block;
+  footer .footer input[type=""checkbox""]:checked::before {
+    transform: rotate(45deg);

Review comment:
       `transform: rotate(90deg);` 
   This is 'cause even on clicking it rotates to a plus sign instead of a cross. To make it cross, the following code achieves it.

##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;

Review comment:
       In addition to this, there is an outline around the box, to prevent this following code achieves it: 
   ````
   -webkit-appearance: none;
   -moz-appearance: none;
   -o-appearance: none;
   appearance: none;
   outline: 0;




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 09:50;githubbot;AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463515027



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       Background color required with the above suggestions I made.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 09:51;githubbot;AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667038339


   ![outline-checkbox](https://user-images.githubusercontent.com/44139348/89023549-60e24d00-d341-11ea-98b5-d5a3215504b1.png)
   @zregvart I found something odd about the checkbox outline so, with the following changes I suggested, the outline is removed.
   
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 20:50;githubbot;zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463830149



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);
+    content: '\FF0B';
+    position: absolute;
     display: block;
+    height: 1.75rem;
+    width: 1.75rem;
+    line-height: 1.75rem;
+    font-size: 1.75rem;
+    transition: 0.2s;
   }
 
-  input[type=""checkbox""] ~ label img.hide-menu,
-  input[type=""checkbox""] ~ div.footer-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked + label img.show-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked ~ label img.hide-menu,
-  input[type=""checkbox""]:checked ~ div.footer-menu {
-    display: block;
+  footer .footer input[type=""checkbox""]:checked::before {
+    transform: rotate(45deg);

Review comment:
       This is caused by both `input` and `::before` being rotated by 45deg. I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 20:52;githubbot;zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463831461



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;

Review comment:
       `appearance` is a [experimental](https://developer.mozilla.org/en-US/docs/Web/CSS/appearance) [feature](https://caniuse.com/#feat=css-appearance)we can't rely on it for website to render on most devices. I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 20:52;githubbot;zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463831967



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","31/Jul/20 20:55;githubbot;zregvart commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667352436


   > @zregvart I found something odd about the checkbox outline so, with the following changes I suggested, the outline is removed.
   
   This is the input showing beneath the content made with `:before`. I've implemented a different solution in the latest changes. We should not remove outline, it helps folk what navigate using the keyboard. That being said I found no way to have the checkbox focused, in the right place with keyboard navigation and not visible at the same time in the latest changes; so we don't have keyboard focus indication (outline) in the latest changes for the plus sign or for the section headings (`dt`).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/20 10:39;githubbot;AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463949285



##########
File path: layouts/partials/footer.html
##########
@@ -6,66 +6,50 @@
     </div>
     <footer>
         <div class=""footer"">
+            <figure class=""logo"">
+                <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
+                    aria-label=""white silhouette of a camel in front of a sand dune"">
+            </figure>
+            <input id=""footer-toggle-overview"" type=""checkbox"" title=""Show/Hide Overview section"" />
             <dl>
-                <figure class=""logo"">
-                    <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
-                        aria-label=""white silhouette of a camel in front of a sand dune"">
-                </figure>
-                <dt>Overview</dt>
-                <input type=""checkbox"" id=""show-overview""/>
-                <label for=""show-overview""><img class=""show-menu"" src=""/_/img/show-footer-menu.svg""></label>
-                <label for=""show-overview""><img class=""hide-menu"" src=""/_/img/hide-footer-menu.svg""></label>
-                <div class=""footer-menu"">
-                    <dd><a href=""/blog/"">Blog</a></dd>
-                    <dd><a href=""/docs/"">Documentation</a></dd>
-                    <dd><a href=""/community/support/"">Community</a></dd>
-                    <dd><a href=""/blog/"">Download</a></dd>
-                </div>
+                <dt><label for=""footer-toggle-overview"">Overview</label><label for=""footer-toggle-overview"">&#65291;</label></dt>

Review comment:
       `<label for=""footer-toggle-overview"">&#65291;</label>`* is better included with a separate unique **id** to distinguish as it appears for desktop screen as well and the same case for each label with `&#65291;` in content.
   - `<label for=""footer-toggle-overview"" id=""expand"">&#65291;</label>`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/20 10:41;githubbot;AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667511491


   @zregvart yes, I observed that it's better just the **+** is included now within the desktop version (> 1024px) as well so best we include separate id for those labels and change **display** property as per that.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/20 18:07;githubbot;zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463985824



##########
File path: layouts/partials/footer.html
##########
@@ -6,66 +6,50 @@
     </div>
     <footer>
         <div class=""footer"">
+            <figure class=""logo"">
+                <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
+                    aria-label=""white silhouette of a camel in front of a sand dune"">
+            </figure>
+            <input id=""footer-toggle-overview"" type=""checkbox"" title=""Show/Hide Overview section"" />
             <dl>
-                <figure class=""logo"">
-                    <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
-                        aria-label=""white silhouette of a camel in front of a sand dune"">
-                </figure>
-                <dt>Overview</dt>
-                <input type=""checkbox"" id=""show-overview""/>
-                <label for=""show-overview""><img class=""show-menu"" src=""/_/img/show-footer-menu.svg""></label>
-                <label for=""show-overview""><img class=""hide-menu"" src=""/_/img/hide-footer-menu.svg""></label>
-                <div class=""footer-menu"">
-                    <dd><a href=""/blog/"">Blog</a></dd>
-                    <dd><a href=""/docs/"">Documentation</a></dd>
-                    <dd><a href=""/community/support/"">Community</a></dd>
-                    <dd><a href=""/blog/"">Download</a></dd>
-                </div>
+                <dt><label for=""footer-toggle-overview"">Overview</label><label for=""footer-toggle-overview"">&#65291;</label></dt>

Review comment:
       Yeah I was preoccupied with mobile version that I forgot to check the desktop one. Not sure if assigning `id`s here would be the correct approach. Assigning same `id` to more than one element is not valid HTML. I've set the `display: none` via CSS selector: `footer .footer dl dt label:nth-child(2)`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","01/Aug/20 18:07;githubbot;zregvart commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667567919


   @AemieJ I think this is now okay to get merged, thanks for reviewing, can you check the latest version when the preview is built?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Aug/20 10:11;githubbot;AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667654630


   LGTM. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Aug/20 12:01;githubbot;oscerd merged pull request #443:
URL: https://github.com/apache/camel-website/pull/443


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","02/Aug/20 15:18;zregvart;Thanks [~Aemie], the footer redesign changes are live now!;;;",,
camel-aws-kinesis: IndexOutOfBoundsException when polling,CAMEL-15358,13320208,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,orpiske,orpiske,orpiske,30/Jul/20 14:29,02/Aug/20 08:05,13/Jul/23 08:33,02/Aug/20 08:05,3.4.2,,,3.4.3,3.5.0,,,,camel-aws,,,,0,,,,,"I noticed that sometimes Camel Kafka Connector prints this exception on the logs during AWS Kinesis tests. It seems to be related to trying to poll a stream when it is already removed.

 
{code:java}
2020-07-30 10:13:38,222 [/ckc-kin-stream] WARN org.apache.camel.component.aws.kinesis.KinesisConsumer - Consumer Consumer[aws-kinesis://ckc-kin-stream] failed polling endpoint: aws-kinesis://ckc-kin-stream. Will try again at next poll. Caused by: [java.lang.IndexOutOfBoundsException - Index 0 out of bounds for length 0]
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
 at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64) ~[?:?]
 at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70) ~[?:?]
 at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248) ~[?:?]
 at java.util.Objects.checkIndex(Objects.java:372) ~[?:?]
 at java.util.ArrayList.get(ArrayList.java:458) ~[?:?]
 at org.apache.camel.component.aws.kinesis.KinesisConsumer.getShardItertor(KinesisConsumer.java:132) ~[camel-aws-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.component.aws.kinesis.KinesisConsumer.poll(KinesisConsumer.java:55) ~[camel-aws-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-support-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106) [camel-support-3.4.2.jar:3.4.2]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
 at java.lang.Thread.run(Thread.java:834) [?:?]{code}",,acosentino,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 15:13:31 UTC 2020,,,,,,,,,,,"0|z0hcgo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Jul/20 14:29;orpiske;I'll send a PR fixing this issue.;;;","30/Jul/20 15:06;acosentino;Can you check on aws2-kinesis too? :-);;;","30/Jul/20 15:09;orpiske;[~acosentino] yes I can :)

 If that's OK with you, I will do it in 2 steps: I will fix this one, send a PR, then I will implement the same test on the connector for AWS2-kinesis and will try to reproduce and fix it.;;;","30/Jul/20 15:13;acosentino;Sounds good :-) thanks!;;;",,,,,,,,,,,,,,,,
"unacceptable_type,longstr error if we set  'arg.queue.x-single-active-consumer=true in rabbitmq endpoint url",CAMEL-15355,13320170,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,devansharora68@gmail.com,devansharora68@gmail.com,30/Jul/20 11:35,30/Jul/20 13:39,13/Jul/23 08:33,30/Jul/20 13:18,3.4.0,,,3.4.3,3.5.0,,,,camel-rabbitmq,,,,0,,,,,"We are using camel-rabbitmq to create a single-active-consumer.
 to create a single active consumer we need to give a queue arg in endpoint uri as
 *&arg.queue.x-single-active-consumer=true*

We get error below error if we set this argument

Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - invalid arg 'x-single-active-consumer' for queue 'testQ4' in vhost 'vh1': {*unacceptable_type,longstr*}, class-id=50, method-id=10)",,acosentino,davsclaus,devansharora68@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,https://camel.apache.org/components/latest/rabbitmq-component.html#_query_parameters_64_parameters,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 13:39:38 UTC 2020,,,,,,,,,,,"0|z0hc88:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Jul/20 11:46;acosentino;Please read the documentation correctly. You need to pass the args through the args parameter.

Like this example: [https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/integration/RabbitMQInOutIntTest.java#L82];;;","30/Jul/20 11:53;devansharora68@gmail.com;[~acosentino] 
i tried using it like 
&args=arg.queue.x-single-active-consumer=true



getting NPE
Caused by: java.lang.NullPointerException: nullaused by: java.lang.NullPointerException: null at org.apache.camel.util.PropertiesHelper.extractProperties(PropertiesHelper.java:33) ~[camel-util-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.getExchangeArgs(RabbitMQEndpoint.java:825) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.resolvedExchangeArguments(RabbitMQDeclareSupport.java:101) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangeWithQueue(RabbitMQDeclareSupport.java:49) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangesAndQueuesUsing(RabbitMQDeclareSupport.java:36) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.declareExchangeAndQueue(RabbitMQEndpoint.java:244) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitConsumer.openChannel(RabbitConsumer.java:353) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitConsumer.<init>(RabbitConsumer.java:59) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.createConsumer(RabbitMQConsumer.java:127) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.createConsumers(RabbitMQConsumer.java:99) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.doStart(RabbitMQConsumer.java:179) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3025) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:348) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:275) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:180) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43) ~[camel-spring-boot-3.4.0.jar:3.4.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.0.jar:3.4.0];;;","30/Jul/20 11:57;devansharora68@gmail.com;Also as mentioned in camel-rabbitmq document
 [https://camel.apache.org/components/latest/rabbitmq-component.html#_query_parameters_64_parameters]

using queueargs parameter gives below error

*Unknown parameters=[\\{queueargs=arg.queue.x-single-active-consumer=true}]*

 ;;;","30/Jul/20 12:01;davsclaus;Whats the endpoint uri for your camel rabbitmq endpoint you use, can you paste it here;;;","30/Jul/20 12:07;devansharora68@gmail.com;[~davsclaus] 
my endpoint uri is like

rabbitmq://localhost:5672/mydirectdelayed?queue=testQ4&routingKey=testKey&username=me&password=mypwd&threadPoolSize=1&concurrentConsumers=1&autoDelete=false&vhost=myvhost&arg.queue.x-single-active-consumer=true&arg.exchange.x-delayed-type=direct&exchangeType=x-delayed-message;;;","30/Jul/20 12:53;devansharora68@gmail.com;[~davsclaus] [~acosentino] 
do we need a change in 

org.apache.camel.component.rabbitmq.*RabbitMQDeclareSupport.formatSpecialQueueArguments*

to parse this argument to Boolean for rabbitmq api to take this as boolean and not as longstr;;;","30/Jul/20 13:05;davsclaus;Yeah sadly it seems rabbitmq have put that burden on end-users. We can't frankly not always know if its supposed to be number, text or boolean etc for any arbitrary argument.;;;","30/Jul/20 13:13;devansharora68@gmail.com;previously we were using camel-rabbitmq 2.24.x, then we could configure arguments like

*public class QueueArgsSACConfigurer implements ArgsConfigurer {*
 *@Override*

*public void configurArgs(Map<String, Object> map) \{ map.put(""x-max-priority"", 3); map.put(""x-single-active-consumer"", true); }*
 *}*
 and in endpoint url we could add this bean definition 
 it used to work fine then.
 but in camel-rabbitmq 3.x ArgsConfigurer was deprecated.
and we then we switched to endpoint url based args and found this prblm;;;","30/Jul/20 13:20;davsclaus;If you use java code, you can do something as workaround

RabbitMQEndpoint e = context.getEndpoint(""xxx"", RabbitMQEndpoint.class);
e.getArgs().put(""x-single ..."", true"");

And then

from(e).to(""foo"")


eg you get the endpoint, and then put on the args with the boolean value, and then use the endpoint instance in the route dsl;;;","30/Jul/20 13:32;devansharora68@gmail.com;[~davsclaus] 
yes we are using java code. i tried this workaround like

RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class);RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class); e.getArgs().put(""arg.queue.x-single-active-consumer"", true); e.getArgs().put(""arg.exchange.x-delayed-type"", ""direct""); from(e).startupOrder(4).log(""${body}"").routeId(""fourthorderROute"");

and

RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class);RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class); e.getArgs().put(""x-single-active-consumer"", true); e.getArgs().put(""x-delayed-type"", ""direct""); from(e).startupOrder(4).log(""${body}"").routeId(""fourthorderROute"");


the consumer is getting started, but without single active consumer feature.
seems it is not taking up the arguments;;;","30/Jul/20 13:37;davsclaus;I think it should be ""queue.x-single-active-consumer"" as key;;;","30/Jul/20 13:37;davsclaus;And exchange. as prefix for the exchange args, see the source in the endpoint code;;;","30/Jul/20 13:39;devansharora68@gmail.com;thanks [~davsclaus] it works with queue. and exchange.;;;",,,,,,,
SJMS Batch Consumer error recovery,CAMEL-15350,13319967,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bradhgbst,bradhgbst,29/Jul/20 11:53,06/Aug/20 04:39,13/Jul/23 08:33,05/Aug/20 05:46,3.4.1,,,3.4.3,3.5.0,,,,camel-sjms,,,,0,,,,,"If the SJMS-Batch consumption loop encounters anything other than a javax.jms.IllegalStateException ([https://github.com/apache/camel/blob/master/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java#L330]) then it logs a warning and stops consuming messages ([https://github.com/apache/camel/blob/master/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java#L348)].

Example log after message broker is shut down:
{code:java}
 2020-07-29 10:33:32.060 WARN ||| 34468 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Connection refused: no further information: localhost/127.0.0.1:5672]

javax.jms.JMSException: Connection refused: no further information: localhost/127.0.0.1:5672
    at org.apache.qpid.jms.provider.ProviderException.toJMSException(ProviderException.java:34)
    at org.apache.qpid.jms.exceptions.JmsExceptionSupport.create(JmsExceptionSupport.java:80)
    at org.apache.qpid.jms.exceptions.JmsExceptionSupport.create(JmsExceptionSupport.java:112)
    at org.apache.qpid.jms.JmsConnection.pull(JmsConnection.java:915)
    at org.apache.qpid.jms.JmsConnection.pull(JmsConnection.java:899)
    at org.apache.qpid.jms.JmsMessageConsumer.performPullIfRequired(JmsMessageConsumer.java:732)
    at org.apache.qpid.jms.JmsMessageConsumer.dequeue(JmsMessageConsumer.java:332)
    at org.apache.qpid.jms.JmsMessageConsumer.receive(JmsMessageConsumer.java:213)
    at org.springframework.jms.connection.CachedMessageConsumer.receive(CachedMessageConsumer.java:86)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:427)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:381)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:326)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.qpid.jms.provider.exceptions.ProviderIOException: Connection refused: no further information: localhost/127.0.0.1:5672{code}
{{}}

It is not obvious from this log message that the route is now broken and will not receive any more messages. The route state is still ""Started"".

 

 

Expected Behaviour: The batch consumer can recover after errors (including a broker restart or failover) and continue to consume messages once the broker is available again.

 

A simple change is to catch any exception instead of only javax.jms.IllegalStateException.

 

 ",,bradhgbst,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Aug/20 13:31;bradhgbst;CAMEL-15350-patch.txt;https://issues.apache.org/jira/secure/attachment/13009043/CAMEL-15350-patch.txt","06/Aug/20 04:37;bradhgbst;CAMEL-15350-reproducer-patch.txt;https://issues.apache.org/jira/secure/attachment/13009166/CAMEL-15350-reproducer-patch.txt",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 06 04:39:58 UTC 2020,,,,,,,,,,,"0|z0hazc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Aug/20 07:07;davsclaus;Are you able to work an a fix and submit a PR?;;;","03/Aug/20 07:16;bradhgbst;Yes hopefully this week.  Is there a planned release date for 3.4.3?;;;","04/Aug/20 12:59;bradhgbst;Hi [~davsclaus] ,

You were too fast for me.  I have tested out the simple fix but unfortunately it is too simple.

First, I saw no change in behaviour.  I had to set ""keepAliveDelay"" on the endpoint otherwise it just rethrows the exception anyway - a bit of a trap for new players.  After setting keepAliveDelay to a positive value it did retry, but only once.  The reason is that it fails on the createSession call which is outside the try/catch block that was changed, so again it just logs a warning and stops doing anything else.  

My test case is to restart the message broker.

It does work OK if the message broker is restarted and ready in time for the first retry (before keepAliveDelay is exceeded).  It is possible Spring's SingleConnectionFactory is helping out here, allowing createSession to recover the connection under the covers.

Regards, Brad

 

Interesting bits of the log below:

First error 
{code:java}
WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.IllegalStateException - The Consumer is closed]"" 

org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:426) at {code}
Second error (first and only retry).  After this there is nothing.
{code:java}
WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect] javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect at  

org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:318) at {code}
 

This is the full log from just prior to stopping activemq.
{code:java}
2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask running2020-08-04 22:36:51.364 INFO ||| 62704 --- [0.1:61616@64353] o.s.j.c.CachingConnectionFactory         : Encountered a JMSException - resetting the underlying JMS Connection
javax.jms.JMSException: java.io.EOFException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) at org.apache.activemq.ActiveMQConnection.onAsyncException(ActiveMQConnection.java:1960) at org.apache.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:1979) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.ResponseCorrelator.onException(ResponseCorrelator.java:126) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:173) at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:345) at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:219) at java.lang.Thread.run(Thread.java:748)Caused by: java.io.EOFException: null at java.io.DataInputStream.readInt(DataInputStream.java:392) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240)Caused by: java.io.EOFException: null
 at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ... 1 common frames omitted
2020-08-04 22:36:51.366 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:51.366 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask running2020-08-04 22:36:51.368 WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.IllegalStateException - The Consumer is closed]
javax.jms.IllegalStateException: The Consumer is closed at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:879) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:640) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:426) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:380) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:325) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)
2020-08-04 22:36:51.369 WARN ||| 62704 --- [0.1:61616@64353] o.s.j.c.CachingConnectionFactory         : Could not close shared JMS Connection
javax.jms.JMSException: Disposed due to prior exception at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1421) at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:688) at org.springframework.jms.connection.SingleConnectionFactory.closeConnection(SingleConnectionFactory.java:501) at org.springframework.jms.connection.SingleConnectionFactory.resetConnection(SingleConnectionFactory.java:389) at org.springframework.jms.connection.CachingConnectionFactory.resetConnection(CachingConnectionFactory.java:205) at org.springframework.jms.connection.SingleConnectionFactory.onException(SingleConnectionFactory.java:367) at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:721) at org.apache.activemq.ActiveMQConnection$5.run(ActiveMQConnection.java:1967) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.activemq.transport.TransportDisposedIOException: Disposed due to prior exception at org.apache.activemq.transport.ResponseCorrelator.onException(ResponseCorrelator.java:125) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114)Caused by: org.apache.activemq.transport.TransportDisposedIOException: Disposed due to prior exception
 at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:173) at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:345) at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:219) ... 1 common frames omittedCaused by: java.io.EOFException: null at java.io.DataInputStream.readInt(DataInputStream.java:392)Caused by: java.io.EOFException: null
 at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ... 1 common frames omitted
2020-08-04 22:36:53.944 WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect]
javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:374) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:304) at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:244) at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:409) at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:349) at org.springframework.jms.connection.SingleConnectionFactory.getConnection(SingleConnectionFactory.java:327) at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:649) at com.sun.proxy.$Proxy131.createSession(Unknown Source) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:318) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: java.net.ConnectException: Connection refused: connect at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)Caused by: java.net.ConnectException: Connection refused: connect
 at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) at java.net.Socket.connect(Socket.java:607) at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:525) at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:488) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:169) at org.apache.activemq.transport.InactivityMonitor.start(InactivityMonitor.java:52) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:354) ... 13 common frames omitted {code}
 

 

 ;;;","04/Aug/20 13:36;bradhgbst;This patch on 3.4.x is what I am thinking - just move where the session is created.  I can create a PR and maybe add a test case, hopefully tomorrow.

[^CAMEL-15350-patch.txt]

 ;;;","04/Aug/20 13:41;bradhgbst;Also would you consider a change to the default keepAliveDelay of -1, which effectively disables the retry?  The comments imply that it is like that for backwards compatibility so that it can shut down / exit on failure, but I don't quite follow how anything would notice the shutdown.;;;","04/Aug/20 19:36;davsclaus;Thanks Brad, yeah that is a better patch. I have applied it to master and 3.4 branches.;;;","04/Aug/20 19:48;davsclaus;Yeah it seems that there are 2 options for controlling this

- recoveryInterval
- keepAliveDelay

The first is during startup only, and the latter is during consuming. Ideally there would just have been one option that has automatic refresh (like camel-jms has).

So yeah we can make the keepAlive have same value as the recovery, eg 5000 in Camel 3.5 onwards. We can't change a default value in a patch release like 3.4.3

;;;","04/Aug/20 23:18;bradhgbst;Thanks. Yes that makes sense.;;;","05/Aug/20 05:46;davsclaus;changed the default in camel 3.5;;;","06/Aug/20 04:39;bradhgbst;For whatever it is worth, here's a reproducer unit test.  It currently fails even with the fix because the consumer never gets a new connection from the connection factory. 

[^CAMEL-15350-reproducer-patch.txt]

The fix does work with Spring's CachingConnectionFactory as it is able to recover a broken connection.  

 ;;;",,,,,,,,,,
camel-xmpp can't consume direct message chats,CAMEL-15349,13319966,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,vindiagram,vindiagram,29/Jul/20 11:44,31/Jul/20 05:32,13/Jul/23 08:33,31/Jul/20 05:32,3.4.2,,,3.4.3,3.5.0,,,,camel-xmpp,,,,0,,,,,"camel-xmpp routes consuming private chats from participants with a domain throws  org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':'

from(""xmpp://herp@localhost:5222/derp@localhost?password=herp"").to(""stream:out"");

SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp@localhost:herp': org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:130) at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:2898) at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3225) at org.apache.camel.impl.engine.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3159) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3069) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3095) at org.apache.camel.impl.engine.AbstractCamelContext.startRouteService(AbstractCamelContext.java:2942) at org.apache.camel.impl.DefaultModel.start(DefaultModel.java:358) at org.apache.camel.impl.DefaultModel.startRoute(DefaultModel.java:330) at org.apache.camel.impl.DefaultModel.startRouteDefinitions(DefaultModel.java:323) at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:88) at org.apache.camel.impl.AbstractModelCamelContext.addRouteDefinitions(AbstractModelCamelContext.java:111) at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:486) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:426) at org.apache.camel.impl.engine.AbstractCamelContext.lambda$addRoutes$0(AbstractCamelContext.java:1119) at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2460) at org.apache.camel.impl.engine.AbstractCamelContext.addRoutes(AbstractCamelContext.java:1119) at a.test.main(test.java:32)Caused by: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp@localhost:herp': org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:675) at org.apache.camel.component.xmpp.XmppConsumer.doStart(XmppConsumer.java:94) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ... 17 moreCaused by: org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.jxmpp.stringprep.simple.SimpleXmppStringprep.localprep(SimpleXmppStringprep.java:74) at org.jxmpp.stringprep.XmppStringPrepUtil.localprep(XmppStringPrepUtil.java:62) at org.jxmpp.jid.parts.Localpart.from(Localpart.java:165) at org.jxmpp.jid.impl.LocalAndDomainpartJid.<init>(LocalAndDomainpartJid.java:46) at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:673) ... 19 more


camel-xmpp routes consuming private chats from participant without a domain throws org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string

 

from(""xmpp://herp@localhost:5222/derp?password=herp"").to(""stream:out"");

SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp:herp': org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:130) at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:2898) at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3225) at org.apache.camel.impl.engine.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3159) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3069) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3095) at org.apache.camel.impl.engine.AbstractCamelContext.startRouteService(AbstractCamelContext.java:2942) at org.apache.camel.impl.DefaultModel.start(DefaultModel.java:358) at org.apache.camel.impl.DefaultModel.startRoute(DefaultModel.java:330) at org.apache.camel.impl.DefaultModel.startRouteDefinitions(DefaultModel.java:323) at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:88) at org.apache.camel.impl.AbstractModelCamelContext.addRouteDefinitions(AbstractModelCamelContext.java:111) at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:486) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:426) at org.apache.camel.impl.engine.AbstractCamelContext.lambda$addRoutes$0(AbstractCamelContext.java:1119) at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2460) at org.apache.camel.impl.engine.AbstractCamelContext.addRoutes(AbstractCamelContext.java:1119) at a.test.main(test.java:32)Caused by: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp:herp': org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:675) at org.apache.camel.component.xmpp.XmppConsumer.doStart(XmppConsumer.java:94) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ... 17 moreCaused by: org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.jxmpp.stringprep.XmppStringPrepUtil.throwIfEmptyString(XmppStringPrepUtil.java:131) at org.jxmpp.stringprep.XmppStringPrepUtil.localprep(XmppStringPrepUtil.java:57) at org.jxmpp.jid.parts.Localpart.from(Localpart.java:165) at org.jxmpp.jid.impl.LocalAndDomainpartJid.<init>(LocalAndDomainpartJid.java:46) at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:673) ... 19 more",,davsclaus,vindiagram,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 30 14:36:05 UTC 2020,,,,,,,,,,,"0|z0haz4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/20 11:56;davsclaus;You are welcome to see if you can fix this and provide a PR;;;","30/Jul/20 14:36;vindiagram;Created a pull request with the fix located at [https://github.com/apache/camel/pull/4058];;;",,,,,,,,,,,,,,,,,,
cxfEndpoint blueprint namespace handler - problem with QName vs String,CAMEL-15348,13319930,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,rastislav.papp,rastislav.papp,29/Jul/20 08:42,29/Jul/20 17:51,13/Jul/23 08:33,29/Jul/20 14:31,3.4.1,,,3.4.3,3.5.0,,,,camel-cxf,karaf,osgi,,0,,,,,"When trying to create a {{cxfEndpoint}} in blueprint xml, using cxfEndpoint element from namespace {{http://camel.apache.org/schema/blueprint/cxf}} there is a problem with {{endpointName}} and {{serviceName}} parameters. This:
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:cxf=""http://camel.apache.org/schema/blueprint/cxf"">

    <cxf:cxfEndpoint id=""fooEndpoint""
                     address=""${endpoint.url}""
                     serviceClass=""com.foo.MyService""
                     endpointName=""foo:MyService""
                     continuationTimeout=""0""
                     xmlns:foo=""http://abc.def"">
        ...
    </cxf:cxfEndpoint>

</blueprint>
{code}
throws an exception:
{code}
Caused by: org.osgi.service.blueprint.container.ComponentDefinitionException: Error setting property: PropertyDescriptor <name: endpointName, getter: null, setter: [class org.apache.camel.component.cxf.CxfEndpoint.setEndpointName(class java.lang.String)]
	at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:818) ~[?:?]
...
Caused by: java.lang.Exception: Unable to convert value {http://abc.def}MyService to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:187) ~[?:?]
{code}

I suspect the problem is with a {{org.apache.camel.component.cxf.CxfEndpoint#setEndpointName}} and {{org.apache.camel.component.cxf.CxfEndpoint#setServiceName}} methods - which previously accepted {{QName}}, but now accept {{String}}, and this change was not reflected in {{org.apache.camel.component.cxf.blueprint.EndpointDefinitionParser}}

I'm attaching a project to reproduce the behavior -  [^camel-reproducer-blueprint-cxf.zip] ","Karaf 4.2.9
Camel 3.4.1
CXF 3.3.6",acosentino,rastislav.papp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jul/20 08:41;rastislav.papp;camel-reproducer-blueprint-cxf.zip;https://issues.apache.org/jira/secure/attachment/13008650/camel-reproducer-blueprint-cxf.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 10:47:45 UTC 2020,,,,,,,,,,,"0|z0har4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/20 10:12;acosentino;Yes, I think so.

Can you open a PR fixing this on that side? [https://github.com/apache/camel-karaf/blob/master/components/camel-cxf-blueprint/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java];;;","29/Jul/20 10:47;rastislav.papp;I've done so - https://github.com/apache/camel-karaf/pull/13;;;",,,,,,,,,,,,,,,,,,
Camel-aws2-s3: moveAfterRead true bucket not created,CAMEL-15347,13319927,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,rbaumgar,rbaumgar,29/Jul/20 08:21,30/Jul/20 06:21,13/Jul/23 08:33,30/Jul/20 06:21,3.3.0,,,3.5.0,,,,,,,,,0,,,,,"If I set moveAfterRead=true and camel.source.endpoint.destinationBucket=camel-backup and camel-backup does not exist -> error!
 even camel.source.endpoint.autoCreateBucket=true (default)!

We need to do check for creation and existence in the consumer doStart",,rbaumgar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-29 08:21:46.0,,,,,,,,,,,"0|z0haqg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShutdownStrategy - Inflight count is reporting wrong with 2x the actual number,CAMEL-15344,13319721,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Jul/20 10:04,29/Jul/20 06:52,13/Jul/23 08:33,29/Jul/20 06:52,,,,3.4.3,3.5.0,,,,camel-core,,,,0,,,,,"During graceful shutdown then the inflight counter can report 4 when there is only 2

12:03:48.593 [Camel (camel-1) thread #5 - ShutdownTask] INFO  o.a.c.i.e.DefaultShutdownStrategy - Waiting as there are still 4 inflight and pending exchanges to complete, timeout in 42 seconds. Inflights per route: [route1 = 4]",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 05:59:38 UTC 2020,,,,,,,,,,,"0|z0h9go:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/20 05:59;davsclaus;Ah okay so its a bug in the Delay EIP as part of the routing engine refactorings for 3.x;;;",,,,,,,,,,,,,,,,,,,
camel-main - Graceful shutdown from ctrl + c SIGTERM is not working correctly,CAMEL-15343,13319702,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Jul/20 08:29,02/May/22 13:03,13/Jul/23 08:33,28/Jul/20 10:41,3.4.2,,,3.4.3,3.5.0,,,,camel-main,,,,0,,,,,"Its a more general problem where the shutdown of Camel is not done graceful.

See also CAMEL-15307",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15307,CAMEL-18012,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-28 08:29:35.0,,,,,,,,,,,"0|z0h9cg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce - Wrong Channel Name for Standard Platform Events,CAMEL-15338,13319241,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Yullia.buzlukova,Yullia.buzlukova,24/Jul/20 23:23,29/Jul/20 07:32,13/Jul/23 08:33,28/Jul/20 06:11,3.4.2,,,3.4.3,3.5.0,,,,camel-salesforce,,,,0,,,,,"For channels starting with ""/event/"" ""__e"" suffix is always added to the channel name in [SubscriptionHelper|https://github.com/apache/camel/blob/camel-3.4.x/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L542].

 

However, according to salesforce documentation [_API names of standard platform events, such as AssetTokenEvent, don't include a suffix_|https://developer.salesforce.com/docs/atlas.en-us.platform_events.meta/platform_events/platform_events_define_ui.htm].

 

As a result, camel salesforce component cannot subscribe to Standard Event channels. 

*Suggestion*: not to add ""__e"" suffix to all events, but leave it to endpoint configuration.

 
|| ||EndPoint||Channel Name returned by SubscriptionHelper||Result||
|*Current Approach*|salesforce:/event/LoginEventStream?replayId=-1|/event/LoginEventStream__e|""subscription"":""/event/LoginEventStream__e""
 ""error"":""{color:#de350b}403:denied_by_security_policy:create_denied{color}""
 ""successful"":false|
| |salesforce:/event/CustomEvent?replayId=-1|/event/CustomEvent__e|""subscription"":""/event/CustomEvent__e"",
 ""successful"":true|
| |salesforce:/event/CustomEvent__e?replayId=-1|/event/CustomEvent__e|""subscription"":""/event/CustomEvent__e"",
 ""successful"":true|
|*Suggested Approach*|salesforce:/event/LoginEventStream?replayId=-1|/event/LoginEventStream|""subscription"":""/event/LoginEventStream""
 ""successful"":true|
| |salesforce:/event/CustomEvent__e?replayId=-1|/event/CustomEvent__e|""subscription"":""/event/CustomEvent__e"",
 ""successful"":true|

 

To receive the result described in the suggested approach, I removed channel suffix hardcoding from SubscriptionHelper.getChannelName
{noformat}
static String getChannelName(final String topicName) {
    final StringBuilder channelName = new StringBuilder();
    if (topicName.charAt(0) != '/') {
        channelName.append('/');
    }

    if (topicName.indexOf('/', 1) > 0) {
        channelName.append(topicName);
    } else {
        channelName.append(""topic/"");
        channelName.append(topicName);
    }
    
    /*
     * suffix hardcoding for event channels is removed
     */

    return channelName.toString();
}{noformat}
 

[Pull request|https://github.com/apache/camel/pull/4045]",,Yullia.buzlukova,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-24 23:23:52.0,,,,,,,,,,,"0|z0h6i0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong information for supported platforms in FAQ of website,CAMEL-15336,13319156,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,apupier,apupier,24/Jul/20 11:20,24/Jul/20 12:57,13/Jul/23 08:33,24/Jul/20 12:57,,,,3.4.3,3.5.0,,,,website,,,,0,,,,,"on https://camel.apache.org/manual/latest/faq/what-platforms-are-supported.html , it is indicated that ""any platform supporting JDK6"" are supported. This not true for latest Camel versions.

proposal:

- provide a table with ranges of Camel with JDK
- point to CI jobs to let users check what is tested exactly",,acosentino,apupier,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 24 12:56:45 UTC 2020,,,,,,,,,,,"0|z0h5z4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jul/20 12:56;acosentino;[https://camel.apache.org/manual/latest/faq/what-platforms-are-supported.html];;;",,,,,,,,,,,,,,,,,,,
Azure storage blob IT fails due unsupported mark/reset with FileInputStream that being introduced Azure SDK 12.7.0,CAMEL-15327,13318713,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,22/Jul/20 13:05,22/Jul/20 14:59,13/Jul/23 08:33,22/Jul/20 14:59,,,,3.5.0,,,,,camel-azure,,,,0,,,,,"Due to the introduction of stream rest on the flux operations on Azure SDK v12.7.0 as shows here: https://github.com/Azure/azure-sdk-for-java/pull/11677/files/4f66bb4e972fefde9f5fd860bf63289d87604725#diff-74786ac8dc9aacd16c785f1fa02dc2a7R254, hence we need to wrap any inputStream that does not support mark/reset with {{BufferedInputStream}}  ",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-22 13:05:37.0,,,,,,,,,,,"0|z0h38w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-slack: incorrect handling of error responses,CAMEL-15326,13318703,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,orpiske,orpiske,22/Jul/20 12:36,28/Jul/20 06:53,13/Jul/23 08:33,28/Jul/20 06:53,3.4.2,,,3.4.3,3.5.0,,,,camel-slack,,,,0,,,,,"The consumer on the camel-slack component is not checking for error responses coming from the Slack API. Under some circumstances this can be problematic and hide messages that would be helpful for the user to diagnose problems on his/her setup of the app/bot account. 

One example that causes this problem is when the user creates a bot and does not give the bot the channels:read scope/permission. In this case the component throws a NullPointerException because it looks for an element on the json response that does not exist. 

 

It seems it can also happen when trying to read the channel messages without the channels:history scope, although, in this case the component does not throw any exception.

 

 

 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Jul/20 12:36;orpiske;log-when-channels-read-is-missing.txt;https://issues.apache.org/jira/secure/attachment/13008165/log-when-channels-read-is-missing.txt",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 22 12:37:14 UTC 2020,,,,,,,,,,,"0|z0h36o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jul/20 12:37;orpiske;I have a fix in progress for this issue and I will send a PR for review.;;;",,,,,,,,,,,,,,,,,,,
Camel-as2 can fail on jdk8 because of java.lang.NoSuchMethodError: java.nio.CharBuffer,CAMEL-15324,13318674,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,22/Jul/20 11:06,29/Jul/20 10:58,13/Jul/23 08:33,29/Jul/20 10:58,3.4.1,,,3.4.2,3.5.0,,,,camel-as2,,,,0,,,,,"There is an error in camel-as2, which can be seen during execution of client on jdk8.
Here is an exception:

{quote}Exception in thread ""AS2Hdlr-41811"" java.lang.NoSuchMethodError: java.nio.CharBuffer.clear()Ljava/nio/CharBuffer;
	at org.apache.camel.component.as2.api.io.AS2SessionInputBuffer.appendDecoded(AS2SessionInputBuffer.java:331)
	at org.apache.camel.component.as2.api.io.AS2SessionInputBuffer.lineFromReadBuffer(AS2SessionInputBuffer.java:311)
	at org.apache.camel.component.as2.api.io.AS2SessionInputBuffer.readLine(AS2SessionInputBuffer.java:216){quote}

Error was simulated during implementation of camel-quarkus extension for as2.",,acosentino,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 22 11:10:06 UTC 2020,,,,,,,,,,,"0|z0h308:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jul/20 11:10;acosentino;This is fixed in 3.4.2 but we need to cast the CharBuffer to Buffer, to avoid this situation. 3.4.1 was built with JDK11, that's why you see this error.;;;",,,,,,,,,,,,,,,,,,,
Camel Zipkin does not set correct span kind,CAMEL-15316,13318309,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,samrat.dhillon,samrat.dhillon,20/Jul/20 18:01,21/Jul/20 16:12,13/Jul/23 08:33,21/Jul/20 16:12,3.4.1,,,3.4.3,3.5.0,,,,camel-zipkin,,,,0,,,,,"Camel Zipkin does not set correct span kind for components such as jms, kafka, amqp etc. For these components the Span kind should be either Consumer or Producer. However camel zipkin sets Server or Client span kind for all components. 

This is not just a cosmetic issue as the span kind determines what tracing headers are injected by brave library. E.g. Span kind Producer will inject b3 header which is comes from brave.propagation.B3SingleFormat.writeB3SingleFormatWithoutParentId(TraceContext). In case of JMS this becomes important for co-relation to work with a non camel application as X-B3-TraceId, X-B3-SpanId, X-B3-ParentSpanId & X-B3-Spampled are not valid JMS headers. Camel escapes the hyphens when these headers are written as JMS messages, but this is a non standard implementation. For co-relation to work using brave, these headers have to be written using b3 single format and this is determine by Span Kind.",,samrat.dhillon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-20 18:01:09.0,,,,,,,,,,,"0|z0h0rc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Pulsar: Error when verifying/creating namespace,CAMEL-15315,13318226,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jcadam42,jcadam42,20/Jul/20 10:42,23/Jul/20 16:03,13/Jul/23 08:33,23/Jul/20 16:03,3.4.0,,,3.4.3,3.5.0,,,,camel-pulsar,,,,0,,,,,"When starting a spring-based Camel application, The following error is observed:

 

 
{code:java}
2020-07-19 21:33:08.236 ERROR 128775 — [ main] o.a.c.c.pulsar.utils.AutoConfiguration : java.lang.IllegalArgumentException: Invalid namespace format. namespace: default

{code}
 

Believe the error is being caused by a bug in the AutoConfiguration class, specifically the ensureNameSpace method: 

 

 
{code:java}
private void ensureNameSpace(String tenant, String namespace) throws PulsarAdminException {
  List<String> namespaces = this.pulsarAdmin.namespaces().getNamespaces(tenant);

  if (!namespaces.contains(namespace)){

      this.pulsarAdmin.namespaces().createNamespace(namespace, this.clusters);

  }

}
{code}
 

 

The problem would appear to be that pulsarAdmin.namespaces().getNamespaces(tenant) returns a list of fully qualified namespaces (e.g., ""default/public"") whereas, the if check is comparing just the namespace alone (e.g. ""public"") against the fully qualified list. Naturally, this fails, and it then tries to create the namespace (which already exists), feeding it in the wrong format, causing the error to be thrown.","CentOS 8

Running Pulsar 2.6.0 in a docker container

Spring Boot 2.3.1.RELEASE

Camel version 3.4.0",davsclaus,jcadam42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 22 15:42:22 UTC 2020,,,,,,,,,,,"0|z0h08w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jul/20 07:49;davsclaus;Are you able to work on a fix as a PR?;;;","22/Jul/20 15:42;jcadam42;Yea, I can do that.;;;",,,,,,,,,,,,,,,,,,
DefaultTracer traceBeforeRoute not calling dumpTrace,CAMEL-15311,13317599,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,davsclaus,davsclaus,19/Jul/20 07:53,22/Jul/20 07:45,13/Jul/23 08:33,22/Jul/20 07:45,,,,3.4.3,3.5.0,,,,camel-core,,,,0,,,,,"In Camel 3.4.0 I am trying to customize the Tracing to use DEBUG level instead of INFO.
For this, I created my own class extending org.apache.camel.impl.engine.DefaultTracer  and overriding method dumpTrace.
But dumpTrace is not being called in all cases, in particular, method traceBeforeRoute  is not calling it, instead logging directly with INFO level.


Best regards,
Alex soto",,davsclaus,lexsoto,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 21 15:12:07 UTC 2020,,,,,,,,,,,"0|z0gwdk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jul/20 14:31;lexsoto;I am working on PR for this.;;;","21/Jul/20 15:12;lexsoto;https://github.com/apache/camel/pull/4027;;;",,,,,,,,,,,,,,,,,,
camel-spring - Graceful shutdown is not working anymore ,CAMEL-15307,13317339,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,OHolzma,OHolzma,17/Jul/20 07:08,28/Jul/20 10:41,13/Jul/23 08:33,28/Jul/20 10:41,3.3.0,3.4.0,3.4.1,3.4.3,3.5.0,,,,camel-spring,,,,0,,,,,"We are using {{org.apache.camel.spring.Main}} to run our Camel applications within a spring context. After updating from Camel 2.24.3 to 3.4.1 the gracefull shutdown is not working anymore.

When calling {{Strg+C}} in a windows shell (or stopping a service wrapper) the camel context is not stopped/closed and the jvm simply stops after logging this:
{code:java}
2020-07-17 08:49:17,559 [ad #7 - CamelHangupInterceptor] INFO  DefaultMainShutdownStrategy    - Received hang up - stopping the main instance.
2020-07-17 08:49:17,559 [pache.camel.spring.Main.main()] DEBUG MainSupport                    - Stopping Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@15512f1a
{code}
In Camel 2.25.1 gracefull shutdown also works fine.

Also using Camel version 3.4.0 or 3.3.0 didn't solve the issue.

I debugged the behaviour and found that, when keeping the {{CamelHangupInterceptor}} thread from {{org.apache.camel.main.DefaultMainShutdownStrategy}} running after the {{shutdown}} call, the Camel context is stopped correctly. But when the {{CamelHangupInterceptor}} thread ends also the JVM is stopping.","Windows 10

openJDK 1.8, Oracle JDK 1.8",davsclaus,OHolzma,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15343,,,,,"20/Jul/20 08:41;OHolzma;camel-context.xml;https://issues.apache.org/jira/secure/attachment/13007994/camel-context.xml",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 28 10:41:37 UTC 2020,,,,,,,,,,,"0|z0gurs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jul/20 08:50;davsclaus;Can you attach a sample project as reproducer, or maybe post on github, also can you try a non windows OS;;;","20/Jul/20 08:40;OHolzma;You can easily test this with the archetype {{camel-archetype-spring}}.

After generating a test project with this archetype I added a delay of 20 seconds to the route and started Camel with {{mvn camel:run}}

With Camel 3.4.1 the files are not getting processed when killing the JVM with {{Strg-C}} when the files are read. The JVM stops immediately without writing the file to the target folder.

When doing the same with Camel 2.24.3 the shutdown waits until the consumed file is processed. The consumed file is copied to the target folder in the end.

I don't have the possibility to test on non windows OS.;;;","28/Jul/20 09:48;davsclaus;Okay this was a bit more tricky as the logging library also has its own JVM shutdown hook which can cause the logging to stop and you dont see any activity.

;;;","28/Jul/20 10:41;davsclaus;Fixed by CAMEL-15343;;;",,,,,,,,,,,,,,,,
FTP endpoints will silently not delete/move file on disconnect,CAMEL-15299,13316622,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,lholthof,lholthof,14/Jul/20 06:50,16/Jul/20 13:32,13/Jul/23 08:33,16/Jul/20 13:32,2.17.4,,,3.4.2,3.5.0,,,,camel-ftp,,,,0,,,,,"If an FTP endpoint is configured to delete or move files after successful processing, it will fail to do so in case the processing takes a long time and the FTP server closes the connection during the (successful) processing. There is no log message about that (not even on debug level).",,acosentino,lholthof,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 15 20:48:58 UTC 2020,,,,,,,,,,,"0|z0gqdc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jul/20 06:51;acosentino;Please try with a newer version, 2.17.x is really old and we won't release that branch anymore. The latest 2.x version is 2.25.1;;;","15/Jul/20 20:48;lholthof;This issue is still present in current snapshot. I will create a pull request for it.;;;",,,,,,,,,,,,,,,,,,
Camel-Spring-Boot: No CamelContext defined yet so cannot inject into bean: org.apache.camel.impl.health.DefaultHealthCheckRegistry,CAMEL-15298,13316493,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pascalschumacher,pascalschumacher,13/Jul/20 16:10,17/Aug/20 20:22,13/Jul/23 08:33,27/Jul/20 05:04,3.4.0,,,3.4.3,3.5.0,,,,camel-spring-boot,,,,1,,,,,"Since updating from Camel 3.3.0 to Camel 3.4.0, the following warning is logged during start-up:

{code}
WARN 15204 — [ main] o.a.c.i.e.DefaultCamelBeanPostProcessor: No CamelContext defined yet so cannot inject into bean: org.apache.camel.impl.health.DefaultHealthCheckRegistry
{code}

Otherwise everything is working fine (as far as I can tell).

We are using Spring Boot 2.3.1.

This may have a similar cause as https://issues.apache.org/jira/browse/CAMEL-12975 had.",,Christensen,davsclaus,orange-buffalo,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Jul/20 06:48;orange-buffalo;camel-warning.zip;https://issues.apache.org/jira/secure/attachment/13007759/camel-warning.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 17 20:22:14 UTC 2020,,,,,,,,,,,"0|z0gpko:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jul/20 06:48;orange-buffalo;Please see [^camel-warning.zip] for the reproducer. ;;;","17/Aug/20 17:04;Christensen;I had hoped this issue was the reason I lost the Camel tab in Hawtio after migrating from Camel 2.5.1 to 3.4.2. Using Spring Boot 2.3.1. After moving to the new Camel 3.4.3 I am no longer seeing the WARN message listed here, however I still don't see the Camel tab in Hawtio. Still searching for other reports online...;;;","17/Aug/20 19:02;davsclaus;You need to enable JMX, which you can do by adding camel-management to the classpath;;;","17/Aug/20 20:22;Christensen;Mange tak!;;;",,,,,,,,,,,,,,,,
camel-pgevent - Issue with URI verification,CAMEL-15297,13316381,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,TwilgihtAngelo,TwilgihtAngelo,13/Jul/20 05:14,06/Aug/20 07:11,13/Jul/23 08:33,06/Aug/20 06:44,,,,3.4.3,3.5.0,,,,,,,,0,,,,,"PostgreSQL allows you make database name with ""-"" sign f.e. ""my-database"". According to regexes in [https://github.com/apache/camel/blob/master/components/camel-pgevent/src/main/java/org/apache/camel/component/pgevent/PgEventEndpoint.java] is impossible to use such names in camel-pgevent components. Now it throws IllegalArgumentException.",,acosentino,chardahe@redhat.com,TwilgihtAngelo,zbendhiba,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Aug/20 18:33;TwilgihtAngelo;image-2020-08-04-21-33-03-212.png;https://issues.apache.org/jira/secure/attachment/13009056/image-2020-08-04-21-33-03-212.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 06 07:11:34 UTC 2020,,,,,,,,,,,"0|z0govs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jul/20 12:52;chardahe@redhat.com;Hi [~TwilgihtAngelo],

Thanks for reporting this, I'm working on this;;;","14/Jul/20 16:30;chardahe@redhat.com;Hi [~TwilgihtAngelo], is a database name with hyphen valid in PostgreSQL? Would you mind pointing a doc for reference?;;;","16/Jul/20 05:49;TwilgihtAngelo;Hi. Yeah sure. [https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS] According to 4.1.1 pg allows you make names with letters, numbers and specsymbols $ -. But, if you use double quotes your name can contains any character.;;;","04/Aug/20 15:21;zbendhiba;[~TwilgihtAngelo] : when I read it, it is not the ""-"" but the underscore ""_"".  (which works fine by the way)

SQL identifiers and key words must begin with a letter ({{a}}-{{z}}, but also letters with diacritical marks and non-Latin letters) or an underscore ({{_}}). Subsequent characters in an identifier or key word can be letters, underscores, digits ({{0}}-{{9}}), or dollar signs ({{$}}).

Can  you point the sentence where it is mentioned in the doc ?;;;","04/Aug/20 18:34;TwilgihtAngelo;Sure: Quoted identifiers can containt anycharacter except zero code character !image-2020-08-04-21-33-03-212.png!;;;","05/Aug/20 07:57;zbendhiba;Ok I'm working on that issue;;;","05/Aug/20 15:29;zbendhiba;This is the PR https://github.com/apache/camel/pull/4073;;;","05/Aug/20 16:10;acosentino;I think this is a bug, so we need to backport to 3.4.x too;;;","06/Aug/20 07:11;TwilgihtAngelo; Many thanks!;;;",,,,,,,,,,,
camel-cxfrs - CxfRsProducer leaks Header when Exchange.HTTP_METHOD is set,CAMEL-15290,13316100,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jensgr@gmx.net,jensgr@gmx.net,10/Jul/20 08:58,29/Jan/21 09:42,13/Jul/23 08:33,18/Dec/20 07:17,3.4.0,,,3.7.1,3.8.0,,,,camel-cxfrs,,,,0,,,,,"If you send a message to a CxfRsProducer that has the header Exchange.HTTP_METHOD set, the HTTP message sent will contain the header

{code}org.apache.cxf.request.method=GET{code}

for example.

This header should not be present in the message since it is internal to the endpoint.",,davsclaus,jensgr@gmx.net,,,,,,,,,,,,,,,,,,,,CAMEL-16110,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 18 07:14:20 UTC 2020,,,,,,,,,,,"0|z0gn54:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Dec/20 20:17;davsclaus;This is standard as part of cxf and camel header mappings;;;","18/Dec/20 07:14;davsclaus;Ah yeah if you send to some external REST server then we should not have camel cxfrs to leak headers with org.apache.cxf as prefix;;;",,,,,,,,,,,,,,,,,,
Broken image / invalid anchors,CAMEL-15285,13315868,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,ahus1,ahus1,09/Jul/20 11:20,09/Jul/20 14:15,13/Jul/23 08:33,09/Jul/20 13:48,,,,3.5.0,,,,,documentation,,,,0,,,,,"There are some places with broken images and rendered anchors that this issue will fix. 

Examples: 

[https://camel.apache.org/components/latest/eips/durable-subscriber.html]

!image-2020-07-09-13-19-16-643.png!

[https://camel.apache.org/components/latest/apns-component.html]

 

!image-2020-07-09-13-19-58-881.png!  ",,ahus1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Jul/20 11:19;ahus1;image-2020-07-09-13-19-16-643.png;https://issues.apache.org/jira/secure/attachment/13007366/image-2020-07-09-13-19-16-643.png","09/Jul/20 11:19;ahus1;image-2020-07-09-13-19-58-881.png;https://issues.apache.org/jira/secure/attachment/13007365/image-2020-07-09-13-19-58-881.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 09 11:34:38 UTC 2020,,,,,,,Patch Available,,,,"0|z0glpk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jul/20 11:34;ahus1;pull request available on GitHub;;;",,,,,,,,,,,,,,,,,,,
Wrong validation error reported for uri with netty component using env placeholder,CAMEL-15282,13315658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,apupier,apupier,08/Jul/20 15:17,19/Jul/20 09:13,13/Jul/23 08:33,19/Jul/20 08:49,3.4.0,,,3.4.3,3.5.0,,,,camel-catalog,,,,0,,,,,"{noformat}
netty-http:http://quarkus-ml.{{env:NAMESPACE}}.svc.cluster.local/samples
{noformat}

the error reported is:
{noformat}
port    Invalid integer value: NAMESPACE}}.svc.cluster.local
{noformat}


",,acosentino,amdmdi,apupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 19 09:13:26 UTC 2020,,,,,,,,,,,"0|z0gkfk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Jul/20 15:20;apupier;provided a test to emphasize it: https://github.com/apupier/camel/commit/7766189c28078cbdc965533c397f9b246e0c55bc;;;","17/Jul/20 18:02;amdmdi;I think this method {{AbstractCamelCatalog#validateEndpointProperties}} checks if the URI matches *{{netty-http:protocol:host:port/path}}* ;  it does not resolve property placeholders before parsing the URI 

is this really a bug ? since the following test is passing :
{code:java}
    @Test
    public void testEndpointUriWithEnv() throws Exception {
        String uri = ""netty-http:http://quarkus-ml.{{env:HOSTNAME}}.svc.cluster.local:42/samples"";
        NettyHttpEndpoint endpoint = context.getEndpoint(uri, NettyHttpEndpoint.class);
        String host = endpoint.getConfiguration().getHost();
        int port = endpoint.getConfiguration().getPort();
        
        assertEquals(""quarkus-ml.""+System.getenv(""HOSTNAME"")+"".svc.cluster.local"", host);
        assertEquals(42, port);
    }
{code};;;","17/Jul/20 19:06;apupier;it is a bug, especially because the mentioned test is passing.
At runtime it works but the validation is reporting an error. Then it is a false-positive.;;;","19/Jul/20 08:27;davsclaus;The parser cannot validate this reliable as the ENV variable can be any kind of test.

;;;","19/Jul/20 09:13;acosentino;3.4.2 has been cut before this fix, so it will be available in 3.4.3;;;",,,,,,,,,,,,,,,
GeoLocationProvider may not get initialized properly,CAMEL-15276,13315415,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,07/Jul/20 14:08,16/Jul/20 17:07,13/Jul/23 08:33,16/Jul/20 12:13,3.4.0,,,3.5.0,,,,,camel-weather,,,,0,,,,,"WeatherConfiguration is constructed like this

{code}
    public WeatherConfiguration(WeatherComponent component) {
        this.component = notNull(component, ""component"");
        weatherQuery = new WeatherQuery(this);
        FreeGeoIpGeoLocationProvider geoLocationProvider = new FreeGeoIpGeoLocationProvider(component, geolocationAccessKey);
        weatherQuery.setGeoLocationProvider(geoLocationProvider);
    }
{code}

at which point the geolocationAccessKey may be unknown.

There is perhaps also some confusion here ...

{code}
    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        WeatherConfiguration configuration = new WeatherConfiguration(this);
        configuration.setGeolocationAccessKey(geolocationAccessKey);
        configuration.setGeolocationRequestHostIP(geolocationRequestHostIP);

        WeatherEndpoint endpoint = new WeatherEndpoint(uri, this, configuration);
        setProperties(endpoint, parameters);

        if (httpClient == null) {
            httpClient = HttpClients.createDefault();
        }

        return endpoint;
    }
{code}

which seems to set the geolocationAccessKey on the configuration from what is explicitly defined on the component.

A geolocationAccessKey defined on the endpoint Uri does not find its way to the GeoLocationProvider which is then used by WeatherQuery, which then leads to ...

{code}
            camelctx.addRoutes(new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    from(""weather:foo?geolocationRequestHostIP=redhat.com&geolocationAccessKey="" + GEOLOCATION_ACCESS_KEY + ""&appid="" + OPENWEATHER_APP_ID)
                    .to(""mock:result"");
                }
            });
{code}

{code}
Caused by: java.lang.IllegalStateException: The geolocation service requires a mandatory geolocationAccessKey
	at org.apache.camel.component.weather.geolocation.FreeGeoIpGeoLocationProvider.getCurrentGeoLocation(FreeGeoIpGeoLocationProvider.java:43)
	at org.apache.camel.component.weather.WeatherQuery.getCurrentGeoLocation(WeatherQuery.java:150)
	at org.apache.camel.component.weather.WeatherQuery.getQuery(WeatherQuery.java:58)
	at org.apache.camel.component.weather.WeatherQuery.getQuery(WeatherQuery.java:38)
	at org.apache.camel.component.weather.WeatherConfiguration.getQuery(WeatherConfiguration.java:212)
	at org.apache.camel.component.weather.WeatherEndpoint.createConsumer(WeatherEndpoint.java:43)
{code}

 ",,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-07 14:08:25.0,,,,,,,,,,,"0|z0giyo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-jira: JSONObject[""name""] not found when connecting to latest JIRA/Jira-cloud",CAMEL-15272,13314906,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mmelko,mmelko,mmelko,03/Jul/20 14:23,02/Oct/20 07:45,13/Jul/23 08:33,03/Jul/20 15:46,3.4.0,,,3.4.1,3.5.0,,,,camel-jira,,,,0,,,,,"Camel-Jira connector doesn't work with latest jira/jira-cloud due to old client version:

{code}

Caused by: com.atlassian.jira.rest.client.api.RestClientException: org.codehaus.jettison.json.JSONException: JSONObject[""name""] not found.
 at com.atlassian.jira.rest.client.internal.async.DelegatingPromise.claim(DelegatingPromise.java:45) ~[jira-rest-java-client-core-5.1.6.jar:na]
 at org.apache.camel.component.jira.consumer.AbstractJiraConsumer.getIssues(AbstractJiraConsumer.java:55) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.AbstractJiraConsumer.getIssues(AbstractJiraConsumer.java:45) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.NewCommentsConsumer.getComments(NewCommentsConsumer.java:74) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.NewCommentsConsumer.doStart(NewCommentsConsumer.java:66) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3025) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:348) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:275) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:180) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43) ~[camel-spring-boot-3.4.0.jar:3.4.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.0.jar:3.4.0]
 ... 16 common frames omitted

{code}

 

Upgrade to 5.2.1 fixes this. PR on the way.",,mmelko,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-03 14:23:15.0,,,,,,,,,,,"0|z0gftk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StaticEndpointBuilders - The static methods should be public,CAMEL-15265,13314471,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Jul/20 12:45,04/Jul/20 09:05,13/Jul/23 08:33,04/Jul/20 09:05,3.4.0,,,3.4.1,3.5.0,,,,camel-core,,,,0,,,,,"I was hoping to use the new StaticEndpointBuilders to configure and possibly share for my routes and producer templates in Camel 3.4.0. However, I noticed all of the static methods are package private. Is that by design?",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-07-01 12:45:22.0,,,,,,,,,,,"0|z0gda0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZooKeeperCuratorHelper: wrong argument order when creating a new ExponentialBackoffRetry,CAMEL-15262,13314374,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,amdmdi,amdmdi,30/Jun/20 20:49,03/Jul/20 13:46,13/Jul/23 08:33,03/Jul/20 13:46,3.4.0,,,3.4.1,3.5.0,,,,camel-zookeeper,,,,0,,,,,"The constructor args {{maxRetries}}  (reconnectMaxRetries) and {{maxSleepMs}} (reconnectMaxSleepTime) are reversed when creating a new {{ExponentialBackoffRetry}} in {{ZooKeeperCuratorHelper.createCurator}} :

{code::title=ZooKeeperCuratorHelper.java}
if (retryPolicy == null) {
    retryPolicy = new ExponentialBackoffRetry(
        (int)configuration.getReconnectBaseSleepTimeUnit().toMillis(configuration.getReconnectBaseSleepTime()),
        (int)configuration.getReconnectMaxSleepTimeUnit().toMillis(configuration.getReconnectMaxSleepTime()),
        configuration.getReconnectMaxRetries());
}
{code}


[CuratorFramework API javadoc|https://curator.apache.org/apidocs/org/apache/curator/retry/ExponentialBackoffRetry.html]:
{code:java}
ExponentialBackoffRetry(int baseSleepTimeMs, int maxRetries, int maxSleepMs) 
{code}

",,amdmdi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-30 20:49:05.0,,,,,,,,,,,"0|z0gcog:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenTracing - camel tracer appears not to activate spans in global tracer,CAMEL-15260,13314285,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mcrmfc,mcrmfc,30/Jun/20 11:48,29/Jul/20 17:44,13/Jul/23 08:33,20/Jul/20 06:54,3.4.1,,,3.4.2,3.5.0,,,,camel-opentracing,,,,0,,,,,"When using Camel's opentracing implementation alongside other tracers e.g. anything from https://github.com/opentracing-contrib traces do not link up nicely.

It appears that although Camel has the *_ActiveSpanManager_* which correctly tracks the span stack locally the implementation doesn't activate spans in the global tracer.

This means that when viewing spans you get broken traces for events in the same distributed transaction e.g.

{code}
        from(""direct:personInJsonToDb"")
                .unmarshal(jsonDataFormat)
                .bean(DatabaseClient.class, ""insert"");
{code}

You can see 2 root traces in the attached image.

It's possible to workaround this by intercepting and activating 'manually' but that doesn't seem correct.

I think we should be activating in the global tracer when we activate locally.
",,acosentino,mcrmfc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Jun/20 11:47;mcrmfc;Screenshot from 2020-06-30 12-45-08.png;https://issues.apache.org/jira/secure/attachment/13006748/Screenshot+from+2020-06-30+12-45-08.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 30 12:11:39 UTC 2020,,,,,,,,,,,"0|z0gc4o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Jun/20 12:06;acosentino;Can you create a PR for camel-3.4.x too? Thanks.;;;","30/Jun/20 12:11;mcrmfc;Yep sure - will do, thanks [~acosentino];;;",,,,,,,,,,,,,,,,,,
camel-cdi - MandatoryJtaTransactionPolicy and NeverJtaTransactionPolicy miss to call the runnable work,CAMEL-15251,13313821,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,28/Jun/20 06:14,28/Jun/20 09:19,13/Jul/23 08:33,28/Jun/20 09:19,2.25.1,3.3.0,3.4.0,3.4.1,3.5.0,,,,camel-cdi,,,,0,,,,,"The MandatoryJtaTransactionPolicy missed to call
{code:java}
runWithTransaction(runnable, false);
{code}

The NeverJtaTransactionPolicy missed to call
{code:java}
runnable.run();
{code}
",,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-28 06:14:40.0,,,,,,,,,,,"0|z0g99k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Old misfire is triggered in a Karaf environement,CAMEL-15243,13313416,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,nizar.ben.mansour@gmail.com,nizar.ben.mansour@gmail.com,25/Jun/20 10:10,25/Jun/20 13:54,13/Jul/23 08:33,25/Jun/20 13:54,2.16.0,,,2.23.4,,,,,camel-quartz2,,,,0,,,,,"I'm having a karaf application (4.0.2)in which i have multiple blueprint projects.Each of them have multiple quartz2 job.

Each time i install the application,Quartz add new rows in the qrtz_triggers table.

The sched_name takes the name of the bundle and append a counter.

 

!image-2020-06-25-12-07-34-075.png!

Each time i install a new version of my application it creates a new rows with the same mecanism(bundleName+Counter).

Now suppose i have a misfire say for example for MyBundle-23.After many installation there is a risk that the new created row in qrtz_triggers will be same as MyBundle-23 and thus triggering an old misfire.

 

 ",,acosentino,nizar.ben.mansour@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Jun/20 10:07;nizar.ben.mansour@gmail.com;image-2020-06-25-12-07-34-075.png;https://issues.apache.org/jira/secure/attachment/13006417/image-2020-06-25-12-07-34-075.png","25/Jun/20 13:53;nizar.ben.mansour@gmail.com;image-2020-06-25-15-53-30-855.png;https://issues.apache.org/jira/secure/attachment/13006434/image-2020-06-25-15-53-30-855.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 13:53:37 UTC 2020,,,,,,,,,,,"0|z0g6rs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jun/20 11:55;acosentino;It's a really old version and we don't plan to release it anymore, can you try with a new version?;;;","25/Jun/20 13:53;nizar.ben.mansour@gmail.com;Hello 

I can confirm that the bug is fixed on the 2.23.4 version.In fact the algorithm have been changed in setting the sched_name .

The old algorithm was using an antomicInteger NEXT_COUNTER to be appened to the bundle name.

For the new one,each new installation of the bundle it delete the previous qrtz_triggers rows and create new one.

Besides,the schedularName (sched_name ) is now a concatination of the bundleName+ContextID (see attached picture).

 

!image-2020-06-25-15-53-30-855.png!;;;",,,,,,,,,,,,,,,,,,
camel-velocity header option does not conform to documentation,CAMEL-15239,13313278,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,bocamel,bocamel,24/Jun/20 15:33,25/Jun/20 05:33,13/Jul/23 08:33,25/Jun/20 05:33,3.4.0,,,3.4.1,3.5.0,,,,camel-velocity,,,,0,,,,,"The example given in the documentation does not work in 3.4.0:

from(""direct:in""). setHeader(""CamelVelocityResourceUri"").constant(""path/to/my/template.vm""). to(""velocity:dummy"");

One has to use the allowTemplateFromHeader in the endpoint:

from(""direct:in""). setHeader(""CamelVelocityResourceUri"").constant(""path/to/my/template.vm""). to(""velocity:dummy?allowTemplateFromHeader=true"");

 

 ",,acosentino,bocamel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 24 15:36:19 UTC 2020,,,,,,,,,,,"0|z0g5x4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jun/20 15:36;acosentino;This should be true for other templating components.;;;",,,,,,,,,,,,,,,,,,,
camel-salesforce - CometDReplayExtension does not keep replayId for each message/channel,CAMEL-15233,13313113,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,edgarc,edgarc,23/Jun/20 21:43,19/Jul/20 08:55,13/Jul/23 08:33,19/Jul/20 08:55,,,,2.25.2,3.4.2,3.5.0,,,camel-salesforce,,,,0,,,,,"CometDReplayExtension class try to read the replayId from the message by doing 
{code}
final Object value = message.get(EXTENSION_NAME);
{code}
However, the replayId (based on this [https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/using_streaming_api_durability.htm]) is actually within data -> event -> replayId.

 By doing the following (the same thing the salesforce consumer does https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceConsumer.java#L250)

{code}
final Map<String, Object> data = (Map<String, Object>) message.get(""data"");
final Map<String, Object> event = (Map<String, Object>) data.get(""event"");

final Object value = event.get(""replayId"");
{code}
I was able to properly fetch the replayId from the message.

 Since the current version does not do this properly, If the component loses the connection and has to subscribe again it will use the replayid value from the endpoint which it will be outdated if any message was read before the connection failure.

",,acosentino,davsclaus,edgarc,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13170,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 06 01:13:44 UTC 2020,,,,,,,,,,,"0|z0g4wo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jun/20 07:25;davsclaus;There are a number of tickets reported for camel-salesforce. Maybe you can look at the others and see if some also report about this replayId bug. I think I have seen this reported before. As it would be good to get as much detail as possible.;;;","24/Jun/20 07:25;davsclaus;And can you tell us which Camel version you are using?;;;","24/Jun/20 14:11;edgarc;I looked into open bugs for camel-saleforce and I found one that might be related to this (I've linked it to this card). However that card is unresolved.

I'm using version 2.25.1. But looking in version 3.4.0 I can see the CometDReplayExtension class has not been changed.;;;","01/Jul/20 23:33;edgarc;Hi guys, I've tried fixing the issue myself here https://github.com/apache/camel/compare/master...edgarc-ciandt:master. Would you guys mind taking a look and code reviewing it ?

I have deleted the CometDReplayExtension class and used another implementation of it from https://github.com/forcedotcom/EMP-Connector/blob/master/src/main/java/com/salesforce/emp/connector/ReplayExtension.java

I have also created some unit tests to cover it.

Another question. I would need to have this fixed on 2.25, do you guys think it's possible or the fix will probably be applied to the latest version only ?;;;","02/Jul/20 05:10;davsclaus;Hi Edgar

Yes this looks great. And since this is an internal change only and fixes/improves this then I can see us backport this to 2.25.x.
The source from salesforce is BSD-3 which we can accept

For the unit test can you find another way with the reflection to avoid using log4j util, as logging library.
And when ready can you create a PR.
;;;","02/Jul/20 15:23;edgarc;I have drafted the PR https://github.com/apache/camel/pull/3969;;;","03/Jul/20 08:57;acosentino;Can you create the PR for 2.25.x too? It cannot be cherry-picked from master, I guess.;;;","03/Jul/20 13:33;davsclaus;Yes a PR for 2.25.x would be apprecated as it cannot be cherry-picked. 

I backported to 3.4.x;;;","06/Jul/20 01:13;edgarc;PR for 2.25.x created https://github.com/apache/camel/pull/3975;;;",,,,,,,,,,,
RabbitMqSpanDecorator - Invalid Parent Span Id when EXCHANGE_NAME header not set,CAMEL-15230,13313017,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,mcrmfc,mcrmfc,23/Jun/20 10:19,29/Jul/20 14:37,13/Jul/23 08:33,29/Jul/20 14:34,3.4.0,,,3.4.3,3.5.0,,,,camel-opentracing,,,,0,,,,,"It seems like there is no strict requirement for _*rabbitmq.EXCHANGE_NAME*_ header to set by a producer e.g. the following code ""works"":
{code:java}
from(""direct:foo"")
   .to(""bar.exchange?queue=bar.queue&autoDelete=false"")
   .end()
{code}
However in this instance a span will be created with *+null+* as the operation name.

Such spans will be ignored by the collector e.g. Jaeger, which results in subsequent spans having missing parents and ""invalid parent span id"" warnings appearing.

Doing the following prevents this.
{code:java}
from(""direct:foo"") 
  .setHeader(""rabbitmq.EXCHANGE_NAME"").simple(""bar.exchange"")
  .to(""bar.exchange?queue=bar.queue&autoDelete=false"")
  .end()
{code}
It seems like we don't necessarily need the overridden _*[getDestination|https://github.com/apache/camel/blob/master/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/RabbitmqSpanDecorator.java#L39]*_ method in the _*[RabbitMqSpanDecorator|https://github.com/apache/camel/blob/master/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/RabbitmqSpanDecorator.java]*_ and could fall through to the base implementation?

Happy to raise a PR but thought I would collect thoughts in case I had missed some subtlety. 

 

 

 

 

 ",,davsclaus,mcrmfc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 14:18:46 UTC 2020,,,,,,,,,,,"0|z0g4bc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jun/20 14:18;davsclaus;Yeah that seems correct, if the header is null, then grab from the endpoint uri.

You are welcome to work on a PR;;;",,,,,,,,,,,,,,,,,,,
autoDiscoverObjectMapper is not propagated to JacksonDataFormat,CAMEL-15229,13312962,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,orange-buffalo,orange-buffalo,23/Jun/20 05:04,23/Jun/20 07:19,13/Jul/23 08:33,23/Jun/20 07:19,3.3.0,,,3.4.1,3.5.0,,,,camel-jackson,,,,0,,,,,"When {{autoDiscoverObjectMapper}} is set on {{JsonDataFormat}} definition, it is not propagated to {{JacksonDataFormat}}. Looking at the code in {{JsonDataFormatReifier}} I was not able to see this property in the list of populated properties.

 

Please see attachment for the reproducer project. {{ObjectMapperTest}} demonstrates the issue. In the route builder we set:
{code:java}
json.setAutoDiscoverObjectMapper(""true""); {code}
but it has no affect, indicated by an exception on Java Time deserialization and a message in logs:
{noformat}
o.a.c.c.jackson.JacksonDataFormat        : The option autoDiscoverObjectMapper is set to false, Camel won't search in the registry
...
Exhausted after delivery attempt: 1 caught: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.time.LocalDate` (no Creators, like default construct, exist): no String-argument constructor/factory method to deserialize from String value ('2077-01-01') {noformat}
 ",,davsclaus,orange-buffalo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jun/20 05:00;orange-buffalo;camel-object-mapper.zip;https://issues.apache.org/jira/secure/attachment/13006234/camel-object-mapper.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 23 07:19:10 UTC 2020,,,,,,,,,,,"0|z0g3z4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/20 07:19;davsclaus;Thanks for reporting and the test case;;;",,,,,,,,,,,,,,,,,,,
camel-cassandraql: cannot use a custom resultSetConversionStrategy,CAMEL-15219,13312522,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,orpiske,orpiske,19/Jun/20 16:56,27/Jul/20 09:31,13/Jul/23 08:33,21/Jun/20 07:16,3.3.0,,,3.4.1,3.5.0,,,,,,,,0,,,,,"According to the [documentation|https://camel.apache.org/components/latest/cql-component.html], it should be possible to use a custom ResultSetConversionStrategy on the camel-cassandraql component. 

However, it seems it is not accepted in all cases and ends up failing to create the custom conversion. For example, using #bean:org.my.package.MyStrategy causes a failure similar to this:


{quote}Caused by: java.lang.IllegalArgumentException: Unknown conversion strategy #bean:org.apache.camel.kafkaconnector.cassandra.clients.dao.TestResultSetConversionStrategy
	at org.apache.camel.component.cassandra.ResultSetConversionStrategies.fromName(ResultSetConversionStrategies.java:112) ~[camel-cassandraql-3.3.0.jar:3.3.0]
	at org.apache.camel.component.cassandra.CassandraComponent.createEndpoint(CassandraComponent.java:82) ~[camel-cassandraql-3.3.0.jar:3.3.0]
	at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:237) ~[camel-support-3.3.0.jar:3.3.0]{quote}

Looking at the current code on master, this does seem to be that the code on  
[CassandraComponent.java|https://github.com/apache/camel/blob/961ca457e3e8120c4a9acdbe570669784bf3b12c/components/camel-cassandraql/src/main/java/org/apache/camel/component/cassandra/CassandraComponent.java#L82] and, more importantly, [ResultSetConversionStrategies.java|https://github.com/apache/camel/blob/961ca457e3e8120c4a9acdbe570669784bf3b12c/components/camel-cassandraql/src/main/java/org/apache/camel/component/cassandra/ResultSetConversionStrategies.java#L97] do not behave like stated on the documentation (ie.: _""... Anything else, if resultSetConversionStrategy is a custom implementation of the ResultSetConversionStrategy ...""_).





",,davsclaus,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 22 12:49:28 UTC 2020,,,,,,,,,,,"0|z0g1a8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jun/20 07:16;davsclaus;Thanks for reporting and spotting where the bug was in the code;;;","22/Jun/20 12:49;orpiske;[~davsclaus] thanks for the quick fix as well. Just wanted to report that I tried the patch w/ the test I am working for the Camel Kafka Connector and it worked as expected.;;;",,,,,,,,,,,,,,,,,,
[regression]Duration values are no more part of the validation,CAMEL-15214,13312215,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,apupier,apupier,18/Jun/20 12:21,19/Jun/20 05:30,13/Jul/23 08:33,19/Jun/20 05:30,3.4.0,,,3.4.1,3.5.0,,,,tooling,,,,0,,,,,"in Camel Catlog, there is a new type ""duration"" (for timer delay parameters for instance).

it was previously using type ""integer"".
The validation has not been adjusted fo rthis new type. Consequently, the delay value is no more validated.

For instance, ""timer:timerName?delay=p"" is no more reporting a validation error.

technical:
the ""time pattern"" was validated for the integer type: https://github.com/apache/camel/blob/b665e5cf4b47f9b074bea40c86a5133f0db00454/core/camel-core-catalog/src/main/java/org/apache/camel/catalog/impl/AbstractCamelCatalog.java#L1276-L1284",,apupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 19 05:30:12 UTC 2020,,,,,,,,,,,"0|z0fze0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jun/20 05:30;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,
RestDefinition relies on Class.getCanonicalName instead of Class.getName for in/out types,CAMEL-15199,13311809,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,16/Jun/20 20:06,03/Nov/20 07:55,13/Jul/23 08:33,19/Jun/20 06:42,,,,3.5.0,,,,,camel-core-engine,,,,0,,,,,"RestDefinition [relies|https://github.com/apache/camel/blob/3380f7f616b08976627c13a5c232bfc105ace3ae/core/camel-core-engine/src/main/java/org/apache/camel/model/rest/RestDefinition.java#L456-L476] on Class.getCanonicalName instead of Class.getName for in/out types.

This work as long as the type is not an inner class getCanonicalName does not return a name that can be used to load a class.

As example

{code:java}
package my.example;

public class MyRoutes extends org.apache.camel.builder.RouteBuilder {
    @Override
    public void configure() throws Exception {
        rest()
            .post(""/order"")
                .type(MyOrder.class)
                .consumes(""application/json"")
                .produces(""application/json"")
                .bindingMode(RestBindingMode.json)
                .route()
                    .log(""${body}"");
    }

    public static class MyOrder {
        public String id;
    }
}
{code}

Then camel would set my.example.MyRoutes.MyOrder as in type but that's wrong and the subsequent attemp to load the class by name, will fail as it should be my.example.MyRoutes$MyOrder (which is what Class.getName would return).",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15745,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 17 08:23:24 UTC 2020,,,,,,,,,,,"0|z0fww0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jun/20 20:31;lb;[~davsclaus] beside the issue why do we use a Class a parameter for type/outType, then we set it as a string and finally we dynamic load it ? I guess it has to do with XML ;;;","17/Jun/20 07:49;davsclaus;Yes its for XML DSL. Where the information is stored as the string.

And in Java DSL then by using Class we can make it type safe and shorter/nicer, instead of having to type the FQN classname.
We could in the definition allow to store the type as Class as well as @XmlTransient (we do this in some other places). Then we dont need to load it if using Java DSL.;;;","17/Jun/20 07:49;davsclaus;And btw its not nice to have your model as inlined classes but I guess its the Camel K, put everything into a single file ;);;;","17/Jun/20 08:23;lb;Yeah, this example is for demonstration purpose and of course from a camel-k issue :) but it is not too uncommon (at least to me) to have nested classes as part of other models;;;",,,,,,,,,,,,,,,,
camel-netty - RequestTimeout seems not working as expected,CAMEL-15195,13311470,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,davsclaus,davsclaus,15/Jun/20 11:31,18/Jun/20 11:17,13/Jul/23 08:33,18/Jun/20 11:17,3.3.0,3.4.0,,3.4.1,3.5.0,,,,camel-netty,,,,0,,,,,"Reported on user forum
https://camel.465427.n5.nabble.com/Camel-netty-requestTimeout-doesn-t-work-properly-td5870725.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14363,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-15 11:31:48.0,,,,,,,,,,,"0|z0futk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default Salesforce httpClient no longer initilized in time,CAMEL-15194,13311468,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,15/Jun/20 11:13,15/Jun/20 15:23,13/Jul/23 08:33,15/Jun/20 15:23,3.3.0,,,3.4.0,,,,,camel-salesforce,,,,0,,,,,"In Camel-3.3.0 there seems to have been a change with Salesforce such that the component's httpClient is no longer initialized before the endpoint is created. This is perhaps a fundamental lifecycle issue that leads to NPE in my Salesforce tests.

In 3.1.0 the httpClient is available when the endpoint is created [here|https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java#L260]

{code}
Caused by: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected Error processing createJob: ""null""
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.process(BulkApiProcessor.java:111)
	at org.apache.camel.component.salesforce.SalesforceProducer.process(SalesforceProducer.java:129)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:66)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:212)
	at org.apache.camel.processor.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:110)
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:107)
	at org.apache.camel.impl.engine.DefaultProducerCache.send(DefaultProducerCache.java:185)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:390)
	... 150 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase.getRequest(AbstractClientBase.java:158)
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase.getRequest(AbstractClientBase.java:154)
	at org.apache.camel.component.salesforce.internal.client.DefaultBulkApiClient.createJob(DefaultBulkApiClient.java:87)
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.processCreateJob(BulkApiProcessor.java:122)
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.process(BulkApiProcessor.java:64)
	... 166 more

{code}",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15117,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 15:23:59 UTC 2020,,,,,,,,,,,"0|z0fut4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/20 11:21;davsclaus;Where are your salesforce tests?;;;","15/Jun/20 15:23;tdiesler;Fixed in 3.4.0;;;",,,,,,,,,,,,,,,,,,
Aggregation throws StackOverflowError when completionOnNewCorrelationGroup  is set,CAMEL-15189,13311368,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,grigoni,grigoni,15/Jun/20 00:12,16/Jun/20 04:58,13/Jul/23 08:33,15/Jun/20 07:41,3.0.1,,,3.4.0,,,,,camel-core-engine,,,,0,,,,,"When AggregationStrategy with canPreComplete is enabled and aggregate route is configured with .completionOnNewCorrelationGroup() StackOverflowError is thrown when a certain load is created (usually around 1000 items)

I have found this using Camel 3.0.1, a unit test can be found here
https://github.com/grigoni/camel/tree/camel-3.0.x-aggrStackOverflowError

test class: org.apache.camel.processor.aggregator.AggregateCompletionOnNewCorrelationGroupWithCanPreCompleteTest
",,davsclaus,grigoni,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 16 04:58:25 UTC 2020,,,,,,,,,,,"0|z0fu6w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/20 07:41;davsclaus;This has already been fixed, the test passes.;;;","15/Jun/20 07:49;davsclaus;Thanks for reporting and the unit test, which has been added
https://github.com/apache/camel/commit/769a3018c640ae074f4e772e8ebb696c3e044834;;;","16/Jun/20 04:58;grigoni;great, thanks a lot for the support!;;;",,,,,,,,,,,,,,,,,
jsonpath does not reset StreamCache on CBR predicate,CAMEL-15187,13311359,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jam01,jam01,14/Jun/20 20:47,17/Jun/20 05:18,13/Jul/23 08:33,17/Jun/20 05:18,3.3.0,,,3.4.1,3.5.0,,,,camel-jsonpath,,,,0,,,,,"When using jsonpath as a predicate in a CBR the StreamCache is not reset and therefore the content is lost. I found a Jira comment which suggests it shouldn't be the case, but alas the cache breaks.

I'm adding a test and fix PR shortly...",,davsclaus,jam01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 07:02:15 UTC 2020,,,,,,,,,,,"0|z0fu4w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/20 07:02;davsclaus;TODO: Backport to 3.4.x branch;;;",,,,,,,,,,,,,,,,,,,
Rename headers CamelAzureStorageBlobAppendBlobCreated and CamelAzureStorageBlobPageBlockCreated  ,CAMEL-15181,13311174,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,12/Jun/20 17:15,12/Jun/20 17:25,13/Jul/23 08:33,12/Jun/20 17:25,3.3.0,,,3.4.0,,,,,,,,,0,,,,,"Currently we have these headers:
{code:java}
CamelAzureStorageBlobAppendBlobCreated 
CamelAzureStorageBlobPageBlockCreated  
{code}
being set to `false` by default. However this is bit confusing to the user, hence these new headers would make sense instead of the above ones being set to false
{code}
CamelAzureStorageBlobCreateAppendBlob
CamelAzureStorageBlobCreatePageBlob
{code}",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-12 17:15:31.0,,,,,,,,,,,"0|z0fszs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restdsl-openapi-plugin NPE on optional field parameter.explode,CAMEL-15180,13311034,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jam01,jam01,12/Jun/20 02:49,12/Jun/20 05:00,13/Jul/23 08:33,12/Jun/20 05:00,3.3.0,,,3.4.0,,,,,camel-rest-openapi,,,,0,,,,,"Hey all, wanted to give the plugin a spin as we look to migrate some services from mule to camel and couldn't get the plugin to work for a simple project. -Checked out plugin code and the tests are failing. I'll try to dig in and see what I can figure out but though I'd create an ticket for this.-

-Here's the report from maven:-
 -[INFO] — maven-invoker-plugin:3.2.1:verify (integration-test) @ camel-restdsl-openapi-plugin —-
 -[INFO] --------------------------------------------------
 -[INFO] Build Summary:-
 -[INFO] Passed: 5, Failed: 6, Errors: 0, Skipped: 0-
 -[INFO] --------------------------------------------------
 -[ERROR] The following builds failed:-
 -[ERROR] * customized-v3/pom.xml-
 -[ERROR] * simple-dto-v3/pom.xml-
 -[ERROR] * simple-xml-dto-v3/pom.xml-
 -[ERROR] * customized/pom.xml-
 -[ERROR] * simple-dto/pom.xml-
 -[ERROR] * simple-xml-dto/pom.xml-
----
Edit:

The failing integration tests were an error on my part when running the tests locally. However I found the cause for the original issue I was having where the plugin was not generating routes. I used the OpenAPI available here [https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/petstore-expanded.yaml] The generator failed to parse it correctly because one of its parameters is of type `form` but does not explicitly set `explode` to anything so it results in a NPE. The spec states that `form` defaults to `true`",,davsclaus,jam01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 12 05:00:42 UTC 2020,,,,,,,,,,,"0|z0fs4o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jun/20 04:44;davsclaus;Are you able to work on a fix as a PR?;;;","12/Jun/20 04:49;jam01;Already done :)

https://github.com/apache/camel/pull/3906;;;","12/Jun/20 05:00;davsclaus;Awesome thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,
need to set SpringBus to CxfRsSpringEndpoint,CAMEL-15174,13310684,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,10/Jun/20 14:51,10/Jun/20 15:21,13/Jul/23 08:33,10/Jun/20 15:21,2.25.1,,,2.25.2,,,,,came-cxf,,,,0,,,,,so configuration in spring file could be picked up by camel-cxfrs endpoint,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Jun/20 14:48;ffang;image-2020-06-10-10-48-13-208.png;https://issues.apache.org/jira/secure/attachment/13005419/image-2020-06-10-10-48-13-208.png","10/Jun/20 14:48;ffang;image-2020-06-10-10-48-16-586.png;https://issues.apache.org/jira/secure/attachment/13005418/image-2020-06-10-10-48-16-586.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-10 14:51:13.0,,,,,,,,,,,"0|z0fpzc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sitemap.xml doesn't include all sitemaps,CAMEL-15154,13309929,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,07/Jun/20 10:22,07/Jun/20 13:53,13/Jul/23 08:33,07/Jun/20 13:53,,,,,,,,,website,,,,0,,,,,"Hugo and Antora both create the sitemap.xml, since we run Hugo last the Hugo's version overwrites the combined Antora sitemap.xml. I think the solution would be to configure Hugo to generate the sitemap under a different file name and reference that file from the sitemap.xml built by Antora that already contains references to other sitemaps generated by Antora.",,githubbot,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jun 07 13:53:37 UTC 2020,,,,,,,,,,,"0|z0flbk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jun/20 13:24;githubbot;zregvart opened a new pull request #384:
URL: https://github.com/apache/camel-website/pull/384


   This configures Hugo to output the sitemap in `sitemap-website.xml` and
   adds a build step to add it to the sitemap index in `sitemap.xml`
   already generated by Antora. With this the `sitemap.xml` should contain
   pointers to all relevant sitemap files.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Jun/20 13:52;githubbot;zregvart merged pull request #384:
URL: https://github.com/apache/camel-website/pull/384


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;;;","07/Jun/20 13:53;zregvart;Should be fixed, I'll double check the Google search console that we point to the correct sitemap.xml file.;;;",,,,,,,,,,,,,,,,,
Cannot use placeholders on RedeliveryPolicy enums,CAMEL-15151,13309563,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gnodet,bradhgbst,bradhgbst,05/Jun/20 00:09,05/Jun/20 06:15,13/Jul/23 08:33,05/Jun/20 06:15,3.3.0,,,3.4.0,,,,,camel-core,,,,0,,,,,"<redeliveryPolicy retryAttemptedLogLevel=""{{{{placeholder}}}}""/> does not work due to IllegalArgumentException: no enum constant org.apache.camel.LoggingLevel.{{{{placeholder}}}}.

 

 ",,bradhgbst,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 05 04:09:59 UTC 2020,,,,,,,,,,,"0|z0fj2g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Jun/20 00:09;bradhgbst;Proposed Solution:

Change ExceptionPolicy#createRedeliveryPolicy to use CamelContext#parseText prior to calling LoggingLevel.valueOf

https://github.com/apache/camel/blob/master/core/camel-base/src/main/java/org/apache/camel/processor/errorhandler/ExceptionPolicy.java

 ;;;","05/Jun/20 04:09;gnodet;Created a PR at https://github.com/apache/camel/pull/3888;;;",,,,,,,,,,,,,,,,,,
Invalid UTF8 character in iec60870-server.json,CAMEL-15149,13309181,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,03/Jun/20 12:17,03/Jul/20 15:43,13/Jul/23 08:33,03/Jul/20 15:43,3.3.0,3.4.0,,3.4.1,3.5.0,,,,,,,,0,,,,,"{code}
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:java (default) on project wildfly-camel-catalog: An exception occured while executing the Java class. Invalid UTF-8 middle byte 0x5c
[ERROR]  at [Source: (File); line: 6, column: 103]


[tdiesler@MacBook3 wildfly-camel]$ cat /Users/tdiesler/git/wildfly-camel/catalog/target/camel-catalog/org/apache/camel/catalog/components/iec60870-server.json
{
  ""component"": {
    ""kind"": ""component"",
    ""name"": ""iec60870-server"",
    ""title"": ""IEC 60870 Server"",
    ""description"": ""IEC 60870 supervisory control and data acquisition (SCADA) server using NeoSCADA?\u0084? implementation."",
    ""deprecated"": false,
    ""firstVersion"": ""2.20.0"",
    ""label"": ""iot"",
    ""javaType"": ""org.apache.camel.component.iec60870.server.ServerComponent"",
{code}",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 03 13:45:19 UTC 2020,,,,,,,,,,,"0|z0fgpk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jul/20 07:56;tdiesler;This does not seem to be fixed in the camel-catalog binary
{code:java}
[tdiesler@MacBook3 target]$ cp ~/.m2/repository/org/apache/camel/camel-catalog/3.4.0/camel-catalog-3.4.0.jar .
[tdiesler@MacBook3 target]$ tar xzf camel-catalog-3.4.0.jar 
[tdiesler@MacBook3 target]$ cat org/apache/camel/catalog/components/iec60870-server.json | grep SCADA
    ""description"": ""IEC 60870 supervisory control and data acquisition (SCADA) server using NeoSCADA?\u0084? implementation."",
{code};;;","03/Jul/20 13:45;davsclaus;Fixed already in 3.5, checking 3.4.x;;;",,,,,,,,,,,,,,,,,,
camel-main - Fluent configuration of rest are not working,CAMEL-15148,13309167,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,03/Jun/20 11:24,16/Jun/20 08:12,13/Jul/23 08:33,16/Jun/20 08:12,,,,3.5.0,,,,,camel-main,,,,0,,,,,"Looks like if you configure via java fluent builder ala

main configure rest with XXX with YYY

then its not taken in use, according to looking at the source code.

The same for some of the other for CBs",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-06-03 11:24:28.0,,,,,,,,,,,"0|z0fgmg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-debezium: the source code generation shouldn't create time as fraction based ,CAMEL-15138,13308464,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,30/May/20 08:29,03/Jun/20 17:07,13/Jul/23 08:33,03/Jun/20 17:07,3.4.0,,,3.4.0,,,,,camel-debezium,,,,0,,,,,"Per the modification being added in CAMEL-15136. Currently the code generation will create a time based duration as fraction based which is not supported by Camel, e.g: 0.5s should be back to 500ms and so on. A detailed discussion about this is in CAMEL-15137",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15137,CAMEL-15130,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-30 08:29:03.0,,,,,,,,,,,"0|z0fcaw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-debezium - Source code generated for configurations needs to consider durations instead of long for time related fields,CAMEL-15136,13308311,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,29/May/20 12:10,29/May/20 14:08,13/Jul/23 08:33,29/May/20 14:08,,,,3.4.0,,,,,camel-debezium,,,,0,,,,,"Due to CAMEL-14878, DBZ source code generation still generate duration fields, eg. time based, as long. Hence, it will make sense to make the code generator aware of these fields and generate them as `duration` if possible or mark the type in the annotations. ",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-29 12:10:52.0,,,,,,,,,,,"0|z0fbcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot-generator-maven-plugin is not able to parse default duration value into long field type,CAMEL-15135,13308293,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,omarsmak,omarsmak,29/May/20 10:01,29/May/20 12:02,13/Jul/23 08:33,29/May/20 12:02,,,,3.4.0,,,,,tooling,,,,0,,,,,"If we have the following in the component configuration:
{code:java}
    @UriParam(javaType = ""java.time.Duration"", defaultValue = ""10s"")
    private Long writeTimeoutMillis = 100L;
 {code}
Here the field is long, but the javaType being overiden to {{java.time.Duration}} with default value {{10s}}. And then will be converted to {{Duration}} in the generated configurer.
However in the spring boot maven plugin, when it generates the spring boot starter component configuration,  the logic is not fully adopted, for example, it will take the default value of {{10s}} and it will assign it to the long type field, e.g:
{code}
private Long writeTimeoutMillis = 10sL;
{code}
Which as result it will produce compilation errors. ",,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15130,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 29 12:02:52 UTC 2020,,,,,,,,,,,"0|z0fb8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/20 12:02;omarsmak;https://github.com/apache/camel-spring-boot/commit/60b3958c65884de16d3a39a558ff4ca129192865;;;",,,,,,,,,,,,,,,,,,,
camel-debezium - Source code generated for configurations needs to consider durations instead of long for time related fields,CAMEL-15130,13308236,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,davsclaus,davsclaus,29/May/20 06:01,30/May/20 08:29,13/Jul/23 08:33,29/May/20 12:07,3.4.0,,,3.4.0,,,,,tooling,,,,0,,,,,"    /**
     * Maximum number of milliseconds to wait for records to flush and partition
     * offset data to be committed to offset storage before cancelling the
     * process and restoring the offset data to be committed in a future
     * attempt. The default is 5 seconds.
     */
    private Long offsetCommitTimeoutMs = 5sL;
    /**
     * Interval at which to try committing offsets. The default is 1 minute.
     */
    private Long offsetFlushIntervalMs = 60sL;
",,davsclaus,gnodet,omarsmak,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14878,CAMEL-15135,CAMEL-15138,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 29 12:29:29 UTC 2020,,,,,,,,,,,"0|z0faw8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/20 06:01;davsclaus;[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-debezium-mongodb-starter: Compilation failure: Compilation failure:
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[87,43] ';' expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[87,45] <identifier> expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[91,44] ';' expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[91,46] <identifier> expected
[ERROR] -> [Help 1];;;","29/May/20 06:02;davsclaus;So we need for the debezium tooling to detect its a ""duration"" type and then use String as the type;;;","29/May/20 10:05;omarsmak;Apparently is producible, I have created this bug report https://issues.apache.org/jira/browse/CAMEL-15135, when you have a default value e.g `10s` and we have the type of `long`, it will give this issues. 

Regarding Debezium, yeah the source code generator needs to adopt to the duration as not it will produce long fields.;;;","29/May/20 11:44;gnodet;https://github.com/apache/camel-spring-boot/commit/60b3958c65884de16d3a39a558ff4ca129192865;;;","29/May/20 11:57;omarsmak;[~gnodet] I think the fix would be for this bug https://issues.apache.org/jira/browse/CAMEL-15135 , isn't? Actually on this ticket scope, there are still autogenerated properties from debezium that are long for durations which I am currently working on it;;;","29/May/20 12:02;omarsmak;Tested now, indeed it fixes CAMEL-15135, if you don't mind [~gnodet], I will assign you on the other ticket and re-assign this to me since is I am working on it now :) ;;;","29/May/20 12:07;omarsmak;Nevermind, I will just create another Jira for the DBZ long -> duration fields, sorry for the noise ;;;","29/May/20 12:19;gnodet;[~omarsmak] not sure what you have in mind, could you be more precise ? 

I think we have several possibilities regarding to those fields, but from a user POV, I think we want to support the extended syntax `5s`, so the only way to deal with those is to use a String field and let the converter do the work later.;;;","29/May/20 12:29;omarsmak;[~gnodet] I mean the generated config for debezium connectors, for example in camel-debezium-mysql, are still generated like this:
{code}
    @UriParam(label = LABEL_NAME, defaultValue = ""500"")
    private long pollIntervalMs = 500;
{code}

As result, isn't yet known for these fields you can use extended syntax, e.g `0.5s`. I am working on this now on CAMEL-15136, so the generated config something like this:
{code}
@UriParam(label = LABEL_NAME, defaultValue = ""0.5s"", javaType = ""java.time.Duration"")
    private long pollIntervalMs = 500;
{code}
In order for the converter to pick these fields as well. I hope it makes sense now
;;;",,,,,,,,,,,
Camel-Undertow: throwExceptionOnFailure suppress all exception that not related to HttpStatusCode,CAMEL-15129,13308035,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,uzuruk,uzuruk,28/May/20 13:03,05/Jun/20 14:17,13/Jul/23 08:33,05/Jun/20 14:17,3.3.0,,,3.4.0,,,,,camel-undertow,,,,0,,,,,If option throwExceptionOnFailure=true then UndertowClientCallback suppresses all exceptions that are not even related to HttpStatusCode (failed responses from the remote server).,,chardahe@redhat.com,davsclaus,uzuruk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 05 07:07:55 UTC 2020,,,,,,,,,,,"0|z0f9ns:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/20 18:43;davsclaus;Can you point out in the code where you think something is wrong;;;","04/Jun/20 07:38;uzuruk;I think the mistake in line 186 of [UndertowClientCallback|[https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java]] - the condition is redundant.
 ;;;","05/Jun/20 06:05;chardahe@redhat.com;Hi [~uzuruk],

if *throwExceptionOnFailure=true* then it'll throw HttpOperationFailedException in case of failed responses from the remote server

[https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L235]

, can you please provide a test scenario for any other exception?;;;","05/Jun/20 07:03;uzuruk;Sorry guys, i made mistake in description. On  *throwExceptionOnFailure=false* all exceptions in UndertowClientCallback  will be suppressed. As example, if in [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L279]

will be thrown  IOException, then it will be supressed in  [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L291] because the [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L187] has not be executed;;;","05/Jun/20 07:07;chardahe@redhat.com;Thanks [~uzuruk], for the clarification,I'm looking into it;;;",,,,,,,,,,,,,,,
Interchanged use of HeaderFilterStrategy methods in camel-kafka,CAMEL-15121,13307728,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,sburkard,sburkard,27/May/20 12:52,28/May/20 04:02,13/Jul/23 08:33,28/May/20 04:02,3.3.0,,,3.4.0,,,,,camel-kafka,,,,0,,,,,"While trying to create a custom HeaderFilterStrategy for camel-kafka I noticed that the two methods of the strategy are used interchanged.
 * The {{KafkaConsumer}} calls {{applyFilterToCamelHeaders}}
 * The {{KafkaProducer}} calls {{applyFilterToExternalHeaders}}

According to the [HeaderFilterStrategy Interface|https://github.com/apache/camel/blob/b9a3117f19dd19abd2ea8b789c42c3e86fe4c488/core/camel-api/src/main/java/org/apache/camel/spi/HeaderFilterStrategy.java], it should be the other way round.

I guess this bug is there since the beginning of the component (therefore affects all released versions).

I have submitted the [pull request 3864|https://github.com/apache/camel/pull/3864] to fix this.

As easy as the code is to fix, this is sort of a breaking change for all existing (intentionally wrong) custom HeaderFilterStrategies for camel-kafka.",,sburkard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-27 12:52:20.0,,,,,,,,,,,"0|z0f7tc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Consuming a subscribed message during shutdown causes NPE,CAMEL-15117,13307643,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,orpiske,orpiske,27/May/20 07:56,15/Jun/20 15:23,13/Jul/23 08:33,28/May/20 10:36,,,,3.4.0,,,,,camel-salesforce,,,,1,,,,,"It seems that, sporadically, the code may throw an NPE.

 

I am speculating*because I cannot confirm entirely due to the sporadic nature of the issue, but by looking at the logs and the behavior, it seems that the onMessage handler for subscriptions can still be called during the shutdown.

 
{quote}2020-05-27 09:19:21,017 [orceConnector-0] INFO org.apache.camel.impl.engine.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: CONNECTED -> DISCONNECTING
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Sending messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19}]
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Sent disconnect \{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19}
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Waiting 60000ms for [DISCONNECTED]
2020-05-27 09:19:21,147 [nt@4ae82baa-204] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19, successful=true}]09:19:21,147 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Processing \{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19, successful=true}
2020-05-27 09:19:21,147 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: DISCONNECTING -> TERMINATING
2020-05-27 09:19:21,147 [nt@4ae82baa-203] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/connect, id=17, successful=true}]27 09:19:21,147 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Processing \{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/connect, id=17, successful=true}
2020-05-27 09:19:21,148 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: TERMINATING -> DISCONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,148 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Waited 129/60000ms for [DISCONNECTED], state is DISCONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State not updated: DISCONNECTED -> CONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,169 [nt@4ae82baa-209] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}]td.client.BayeuxClient.67a9cb3f - Processing \{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}7 09:19:21,169 [nt@4ae82baa-209] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper - [CHANNEL:META_SUBSCRIBE]: \{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}mel.component.salesforce.internal.streaming.SubscriptionHelper - Subscribed to channel /topic/CamelKafkaConnectorTopic
2020-05-27 09:19:21,169 [nt@4ae82baa-209] INFO org.cometd.bayeux.client.ClientSession - Exception while invoking listener org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7@62e79206
java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7.onMessage(SubscriptionHelper.java:458) ~[camel-salesforce-3.3.0.jar:3.3.0]
 at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyOnMessage(AbstractClientSession.java:583) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyMessageListeners(AbstractClientSession.java:568) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession.notifyListeners(AbstractClientSession.java:308) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession.lambda$receive$4(AbstractClientSession.java:269) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.bayeux.Promise$2.succeed(Promise.java:103) [bayeux-api-4.0.4.jar:4.0.4]
 ...
{quote}",,orpiske,valdar,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15194,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 27 07:57:45 UTC 2020,,,,,,,,,,,"0|z0f7ag:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/May/20 07:57;orpiske;I will send a PR with a proposed fix for this.;;;",,,,,,,,,,,,,,,,,,,
camel-as2 component failed to parse entity content for encrypted or compressed data,CAMEL-15111,13307407,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,yasserzamani,mrsafi,mrsafi,26/May/20 10:32,30/Jan/23 08:59,13/Jul/23 08:33,23/Dec/22 11:27,3.3.0,,,3.18.5,3.20.1,3.21.0,4.0.0,4.0-M1,,,,,8,AS2,"encrypted,",receive,server,"AS2 component can receive only messages that has the following content-type: 
 * application/edifact
 * application/edi-x12
 * application/edi-consent

in case of a PLAIN interchange it works fine, however when i try to receive an ENCRYPTED/SIGNED/COMPRESSED messages camel don't recognize the content type of the interchange.

Here is the message sent by my trading partner : 


{code:java}
AS2-From: ESALINK
AS2-To: YSF2
AS2-Version: 1.2
Date: Mon, 25 May 2020 22:04:47 GMT
Disposition-Notification-Options: signed-receipt-protocol=optional,pkcs7-signature;signed-receipt-micalg=optional,md5
Disposition-Notification-To: ediint-sync-mdn
EDIINT-Features: multiple-attachments
Message-ID: <20200525220447.3200.111@DESKTOP-OT6I4JG>
Subject: message from YSF
Content-Type: multipart/signed; protocol=""application/pkcs7-signature""; micalg=md5; boundary=""------15ECC40FF5D299411590444287BC801""
--------15ECC40FF5D299411590444287BC801
Content-Transfer-Encoding: binary
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/pkcs7-mime; smime-type=compressed-data; name=""smime.p7m""0€*†H†÷
		 €0€0*†H†÷
	0€	*†H†÷
 €$€‚îxrÎÏ+IÍ+Ñ
)JÌ+NK-ÒuÍKÎOÉÌK- RHÊÌK,ªäår†*qÉ,.È/Î,ÉÌÏ³RH,)ILÎÈjµVHËÌIÍKÌMµU*ÎÍÌMÕ+0ÏUBh©,Hª/(ÈÉLNiÖ/ÈN.6×)µVëÐ-ª±MÍ+KÍÉ/HMÑMI,I´VÀ4'—Ë ‰©€S«Í£í;/#;ó‚&¦D P,#ƒaãqƒ&ÆÃ@¦Aã*ƒÆ%†ÜœlÌ¡,lÂLnA†ü¼ ‡0›Ð§É©†|< vaÖ€Ä¢ÌbC1ŸK˜×=5/µ(³BÁ½(¿´ÀPÆ@
$Î-,ìšö»0¨RR#
ŠR‹‹

øA²ÌÂ‰E%@}F†Úšpr2ŠÉ""€""W€•;¤CŒN™¬—œŸr,/\5##+K#ƒYOú¿¥Šw6ßíiJ(»œqÉj­ã±_bE§fýÖas®XµxÚ'Ï™|
ý;ûÄNN7ßÕÆs{é|ƒ|wïkž<×\ý>- ú!ûFƒ™>{Ÿ™Yîúa:ÙúÊšÚÞná°|zu†- è=îwÅ—VßøW§ÿùëãÎ þg¥nš
«½n°tzwË{Lb]0Kÿ¿ÅÛ
{code}

camel will send an MDN containing this message: 


{code:java}
Failed to parse entity content{code}",,davsclaus,joao.r.miranda,krisbash,mrsafi,pswid,yasserzamani,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Sep/21 14:26;krisbash;image-2021-09-20-16-26-35-053.png;https://issues.apache.org/jira/secure/attachment/13033884/image-2021-09-20-16-26-35-053.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 23 11:27:43 UTC 2022,,,,,,,,,,,"0|z0f5u8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Sep/21 14:28;krisbash;We have very similar problem. We want to send message to our AS2 Camel Server. When we use binary encoding or encryption algorithm we have result as below: 

!image-2021-09-20-16-26-35-053.png!

Base64 encoding with no encryption works.

Any ideas?;;;","18/Mar/22 17:57;joao.r.miranda;Hello! 
I'm having the same problem here using camel 3.11.3.

Basically, the camel-as2 supports messages encrypted/signed/compressed with content-transfer-encoding: base64 but does not support if they are binary.
content-transfer-encoding: binary
 

It fails with:
Failed to parse entity content;;;","21/Mar/22 09:04;davsclaus;Use to JIRA vote to help show tickets that are popular for community users;;;","02/Sep/22 15:46;davsclaus;Community users is welcome to help with this;;;","18/Dec/22 07:30;yasserzamani;I wish working on and fixing this issue as a contribution to Camel. Could you please assign it to me? as I've already started its analysis.;;;","23/Dec/22 10:00;yasserzamani;Done and the corresponding PR is automatically linked to this Jira issue.

Actually it was a bug not a new feature. Camel should not force ascii charset if it's not specified in the http request. Camel does this to find multipart boundaries and bang, it reaches Malformed exception on binary contents!

 

[~mrsafi] [~joao.r.miranda] [~krisbash] are you maybe able to pull this specific module, build and test against it? I've comprehensively unit tested all 8 possibilities for encrypt, sign and compress, but your confirmation makes me happier :);;;","23/Dec/22 11:27;davsclaus;Thanks for the PR, you are welcome to keep improving camel-as2 and other parts of Camel;;;",,,,,,,,,,,,,
DefaultNettyHttpBinding header binding mismatch,CAMEL-15101,13306746,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,22/May/20 10:50,22/May/20 11:10,13/Jul/23 08:33,22/May/20 11:10,,,,3.4.0,,,,,camel-netty-http,,,,0,,,,,"When Camel headers are populated from Netty HttpRequest if the scheme of the URL in the request is ""https"" and the port is not specified (e.g. ""https://example.com"") the Exchange.HTTP_PORT is set to 80 instead of 443.
If the absolute URL is present on the Netty HttpRequest, i.e. when used as proxy, the Exchange.HTTP_URL gets set to the concatenation of the consumer URL and the producer URL.",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-22 10:50:16.0,,,,,,,,,,,"0|z0f1rk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-3x-upgrade-guide-3_4.adoc malformed,CAMEL-15098,13306726,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,zregvart,zregvart,22/May/20 09:42,22/May/20 10:32,13/Jul/23 08:33,22/May/20 10:32,3.4.0,,,3.4.0,,,,,documentation,,,,0,,,,,Seems that docs/user-manual/modules/ROOT/pages/camel-3x-upgrade-guide-3_4.adoc was malformed by merge conflict.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-22 09:42:59.0,,,,,,,,,,,"0|z0f1n4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
toD doesn't resolve ${headers} if they come from a propertyPlaceholders,CAMEL-15087,13305863,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andreufontb,andreufontb,19/May/20 09:28,22/May/20 18:34,13/Jul/23 08:33,22/May/20 18:34,3.1.0,3.2.0,3.3.0,3.4.0,,,,,camel-core,,,,0,,,,,"From camel 3.1 and up, I have detected that <doD/> doesn't resolve variables in propertyPlaceholders.

For example:

if i have an etc/uri.properties with:
{code:java}
example=http://${headers.url}{code}
 

And in camel Context xml:

 
{code:java}
...
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">

   <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>

   <route id=""test"">
     <from uri=""timer:hello?period=3000""/>

     <setHeader name=""url""><constant>www.google.es</constant></setHeader>

     <log message=""{{example}}""/>
     <!-- It logs: http://www.google.es/ -->

     <toD uri=""example""/>
     <!-- It resolves:  http://${headers.url} instead of http://www.google.es/ -->
  </route>
 </camelContext>
{code}

  
  
 {{But if i do a kind of a workarround like this, it works:}}


{code:java}
...
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">

   <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>

   <route id=""test"">
     <from uri=""timer:hello?period=3000""/>

     <setHeader name=""url""><constant>www.google.es</constant></setHeader>

     <setHeader name=""workarround""><simple>{{example}}</simple></setHeader>
     <toD uri=""${headers.workarround}""/>
     <!-- It now resolves:  http://www.google.es -->
  </route>
 </camelContext>
{code}
 ",,andreufontb,chardahe@redhat.com,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 22 18:34:08 UTC 2020,,,,,,,,,,,"0|z0ewbc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/May/20 08:57;chardahe@redhat.com;Hi, I'm working on this;;;","21/May/20 06:08;chardahe@redhat.com;[~andreufontb], isn't it  <toD uri=""\{{example}}""/> ??

 ;;;","21/May/20 16:39;andreufontb;Sorry, I had problems writing an example in Jira it autoremoved some characters, I just discovered it has a codeblock funcion:

In response of your question, it is:
{code:java}
<toD uri=""{{example}}""/>
{code}
 

To give more clarity, here is a full rewrite of the example I have post the first time:

In a etc/uri.properties file:
{code:java}
example=http://${headers.url}
{code}
In camel context xml:
{code:java}
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">
  <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>
  <route id=""test"">
    <from uri=""timer:hello?period=3000""/>

    <setHeader name=""url""><constant>www.google.es</constant></setHeader>

    <log message=""{{example}}""/>
    <!-- it logs: http://www.google.es -->
    <toD uri=""{{example}}""/>
    <!-- It resolves:  http://${headers.url} -->

  </route>
</camelContext>
{code}
A way to workarround the issue, is making a camel context like this:
{code:java}
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">
  <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>
  <route id=""test"">
    <from uri=""timer:hello?period=3000""/>

    <setHeader name=""url""><constant>www.google.es</constant></setHeader>

    <log message=""{{example}}""/>
    <!-- it logs: http://www.google.es -->

    <setHeader name=""workarround""><simple>{{example}}</simple></setHeader>
    <toD uri=""${headers.workarround}""/>
    <!-- It resolves:  http://www.google.es -->

 </route>
</camelContext>
{code}
Sorry for the poor fisrst message, It was my first time :P

 ;;;","21/May/20 20:17;chardahe@redhat.com;Thanks for the correction :)

Does it log [http://[www.google.es|http://[www.google.es/]  or  {{{{example}}}}, 
  <log message=""\{{example}}""/>
    <!-- it logs: http://www.google.es -->
in 3.1 there are some changes[1] have been done for property resolution inside definitions

I'm using 3.1 and it's logging {{{{example}}}}

[1] https://issues.apache.org/jira/browse/CAMEL-14445;;;","22/May/20 18:34;davsclaus;Thanks Andreu for reporting and Chandrakant for looking into this.;;;",,,,,,,,,,,,,,,
camel-bean - Bean parameters with bean. prefix in uri seems not working correctly,CAMEL-15082,13305693,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/May/20 14:24,18/May/20 17:47,13/Jul/23 08:33,18/May/20 17:46,,,,3.4.0,,,,,camel-core,,,,0,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 18 17:47:22 UTC 2020,,,,,,,,,,,"0|z0ev9c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/May/20 17:47;davsclaus;This now also supports different bean scopes - singleton, prototype, request etc so the options are set either once or per usage etc.;;;",,,,,,,,,,,,,,,,,,,
camel-management - BeanIntrospection may cause stackoverflow,CAMEL-15066,13305131,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/May/20 07:41,15/May/20 07:48,13/Jul/23 08:33,15/May/20 07:48,,,,3.4.0,,,,,jmx,,,,0,,,,,"See CAMEL-15053

This dont normally happen now as bean introspection is eager created. But nevertheless we should fix the code so the stackoverflow wont happen.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15053,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-15 07:41:24.0,,,,,,,,,,,"0|z0ersg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Messages no more received from Google Pubsub,CAMEL-15064,13305054,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,jpmat,jpmat,14/May/20 21:31,26/Aug/20 13:08,13/Jul/23 08:33,18/May/20 11:14,3.2.0,,,3.4.0,,,,,camel-google-pubsub,,,,0,,,,,"With Camel 3.2.0, my route does not receive the messages from Google Pubsub. The exact same route works well if I downgrade to 3.1.0.

I've created following test case to reproduce easily the issue:
{code:java}
@Component
public class SimplePubsubRouteBuilder extends RouteBuilder {
  @Override
  public void configure() throws Exception {
    from(""google-pubsub://project-id:subs-name"")
      .to(""log:myLog?showHeaders=true"");
  }
}{code}
Result with *Camel 3.2.0*: nothing happens, no errors even with DEBUG log
 level.

Result with *Camel 3.1.0*: error 404 as expected since Pubsub subscription
 path is invalid.

I've tried to fix the issue myself with no success. But by tracing with debugger, I think the issue is because of bad version of Guava library.","* macOS 10.15.4
 * OpenJDK 11.0.6 2020-01-14
 * I've been able to reproduce the issue on Ubuntu 16, same JDK",acosentino,jpmat,omarsmak,rvenk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 26 13:08:01 UTC 2020,,,,,,,,,,,"0|z0erbc:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"18/Jul/20 20:44;rvenk;This issue still seems to persist with camel 3.4.1 When I don't pass GOOGLE_APPLICATION_CREDENTIALS, it silently comes up without any errors, whereas, with Camel 3.1.0, it errors out as expected;;;","20/Jul/20 08:57;omarsmak;Hi [~rvenk], is pretty weird indeed, I have tested here on my end and I get the following in the logs if I don't pass `GOOGLE_APPLICATION_CREDENTIALS`:
{code}
2020-07-20 10:52:56,365 [ngupInterceptor] INFO  DefaultMainShutdownStrategy    - Received hang up - stopping the main instance.
2020-07-20 10:52:56,366 [main           ] INFO  AbstractCamelContext           - Apache Camel 3.4.1 (camel-1) is shutting down
2020-07-20 10:52:56,365 [nsumer[testSub]] ERROR GooglePubsubConsumer           - Failure getting messages from PubSub
java.lang.IllegalStateException: Expected the service InnerService [FAILED] to be RUNNING, but the service has FAILED
	at com.google.common.util.concurrent.AbstractService.checkCurrentState(AbstractService.java:366) ~[guava-28.2-jre.jar:?]
	at com.google.common.util.concurrent.AbstractService.awaitRunning(AbstractService.java:302) ~[guava-28.2-jre.jar:?]
	at com.google.api.core.AbstractApiService.awaitRunning(AbstractApiService.java:96) ~[api-common-1.8.1.jar:?]
	at org.apache.camel.component.google.pubsub.GooglePubsubConsumer$SubscriberWrapper.asynchronousPull(GooglePubsubConsumer.java:131) [camel-google-pubsub-3.4.1.jar:3.4.1]
	at org.apache.camel.component.google.pubsub.GooglePubsubConsumer$SubscriberWrapper.run(GooglePubsubConsumer.java:115) [camel-google-pubsub-3.4.1.jar:3.4.1]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_222]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_222]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_222]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_222]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_222]
Caused by: java.lang.IllegalStateException: java.io.IOException: The Application Default Credentials are not available. They are available if running in Google Compute Engine. Otherwise, the environment variable GOOGLE_APPLICATION_CREDENTIALS must be defined pointing to a file defining the credentials. See https://developers.google.com/accounts/docs/application-default-credentials for more information.
	at com.google.cloud.pubsub.v1.Subscriber.doStart(Subscriber.java:265) ~[google-cloud-pubsub-1.102.0.jar:1.102.0]
	at com.google.api.core.AbstractApiService$InnerService.doStart(AbstractApiService.java:148) ~[api-common-1.8.1.jar:?]
	at com.google.common.util.concurrent.AbstractService.startAsync(AbstractService.java:248) ~[guava-28.2-jre.jar:?]
	at com.google.api.core.AbstractApiService.startAsync(AbstractApiService.java:120) ~[api-common-1.8.1.jar:?]
	at com.google.cloud.pubsub.v1.Subscriber.startAsync(Subscriber.java:254) ~[google-cloud-pubsub-1.102.0.jar:1.102.0]
	... 7 more
{code}
I could think of the logger perhaps. Is it possible if you can attach the logs from your end to check this out?
;;;","20/Jul/20 11:11;rvenk;Here are the logs from 3.1 and 3.4 and a test groovy script. The groovy version details are

{{Groovy Version: 3.0.4 JVM: 11.0.6 Vendor: Azul Systems, Inc. OS: Mac OS X}};;;","20/Jul/20 11:14;rvenk;Camel 3.4
{code:java}
06:03:59.267 [Camel Thread #0 - LRUCacheFactory] DEBUG org.apache.camel.component.caffeine.lrucache.CaffeineLRUCacheFactory - Warming up LRUCache ...
06:03:59.267 [main] INFO org.apache.camel.support.LRUCacheFactory - Detected and using LRUCacheFactory: camel-caffeine-lrucache
06:03:59.456 [Camel Thread #0 - LRUCacheFactory] DEBUG org.apache.camel.component.caffeine.lrucache.CaffeineLRUCacheFactory - Warming up LRUCache complete in 194 millis
06:03:59.463 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Setting up management with factory: org.apache.camel.impl.engine.DefaultManagementStrategyFactory@62d59d60
06:03:59.486 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Found HealthCheckRegistry: org.apache.camel.impl.health.DefaultHealthCheckRegistry via: META-INF/services/org/apache/camel/health-check-registry
06:03:59.496 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Detected and using HealthCheckRegistry: org.apache.camel.impl.health.DefaultHealthCheckRegistry@6d2d04ef
06:03:59.546 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Loading file META-INF/services/org/apache/camel/TypeConverterLoader to retrieve list of type converters, from url: jar:file:/Users/ramesh/.groovy/grapes/org.apache.camel/camel-support/jars/camel-support-3.4.0.jar!/META-INF/services/org/apache/camel/TypeConverterLoader
06:03:59.552 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Loading file META-INF/services/org/apache/camel/TypeConverterLoader to retrieve list of type converters, from url: jar:file:/Users/ramesh/.groovy/grapes/org.apache.camel/camel-base/jars/camel-base-3.4.0.jar!/META-INF/services/org/apache/camel/TypeConverterLoader
06:03:59.555 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Loading file META-INF/services/org/apache/camel/TypeConverterLoader to retrieve list of type converters, from url: jar:file:/Users/ramesh/.groovy/grapes/org.apache.camel/camel-file/jars/camel-file-3.4.0.jar!/META-INF/services/org/apache/camel/TypeConverterLoader
06:03:59.559 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Loading file META-INF/services/org/apache/camel/TypeConverterLoader to retrieve list of type converters, from url: jar:file:/Users/ramesh/.groovy/grapes/org.apache.camel/camel-xml-jaxp/jars/camel-xml-jaxp-3.4.0.jar!/META-INF/services/org/apache/camel/TypeConverterLoader
06:03:59.563 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.stream.StreamCacheConverterLoader
06:03:59.567 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.stream.StreamCacheConverterLoader loading converters
06:03:59.576 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.CamelConverterLoader
06:03:59.579 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.CamelConverterLoader loading converters
06:03:59.581 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.CollectionConverterLoader
06:03:59.584 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.CollectionConverterLoader loading converters
06:03:59.589 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.DateTimeConverterLoader
06:03:59.591 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.DateTimeConverterLoader loading converters
06:03:59.596 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.DurationConverterLoader
06:03:59.599 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.DurationConverterLoader loading converters
06:03:59.601 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.IOConverterLoader
06:03:59.605 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.IOConverterLoader loading converters
06:03:59.623 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.NIOConverterLoader
06:03:59.626 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.NIOConverterLoader loading converters
06:03:59.631 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.ObjectConverterLoader
06:03:59.633 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.ObjectConverterLoader loading converters
06:03:59.645 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.SQLConverterLoader
06:03:59.646 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.SQLConverterLoader loading converters
06:03:59.647 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.impl.converter.UriTypeConverterLoader
06:03:59.648 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.impl.converter.UriTypeConverterLoader loading converters
06:03:59.649 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.component.file.GenericFileConverterLoader
06:03:59.653 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.component.file.GenericFileConverterLoader loading converters
06:03:59.662 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.jaxp.DomConverterLoader
06:03:59.666 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.jaxp.DomConverterLoader loading converters
06:03:59.668 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.jaxp.StaxConverterLoader
06:03:59.672 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.jaxp.StaxConverterLoader loading converters
06:03:59.678 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.jaxp.StreamSourceConverterLoader
06:03:59.679 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.jaxp.StreamSourceConverterLoader loading converters
06:03:59.680 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.converter.jaxp.XmlConverterLoader
06:03:59.685 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.converter.jaxp.XmlConverterLoader loading converters
06:03:59.713 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - Resolving TypeConverterLoader: org.apache.camel.util.xml.StreamSourceConverterLoader
06:03:59.715 [main] DEBUG org.apache.camel.impl.converter.BaseTypeConverterRegistry - TypeConverterLoader: org.apache.camel.util.xml.StreamSourceConverterLoader loading converters
06:03:59.724 [main] DEBUG org.apache.camel.impl.converter.DefaultTypeConverter - Loaded 197 type converters in 0.178 seconds
06:04:00.330 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Adding routes from builder: Routes: []
06:04:00.489 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Found RestRegistryFactory: org.apache.camel.component.rest.DefaultRestRegistryFactory via: META-INF/services/org/apache/camel/rest-registry-factory
06:04:00.489 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Detected and using RestRegistryFactory: org.apache.camel.component.rest.DefaultRestRegistryFactory@2121d0ed
06:04:00.507 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Found PropertiesComponent: org.apache.camel.component.properties.PropertiesComponent via: META-INF/services/org/apache/camel/properties-component-factory
06:04:00.524 [main] DEBUG org.apache.camel.impl.engine.BaseServiceResolver - Detected and using PropertiesComponent: org.apache.camel.component.properties.PropertiesComponent@1ee1c0cc
06:04:00.532 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Language with name simple in registry. Found: null
06:04:00.533 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Language with name simple-language in registry. Found: null
06:04:00.670 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Using ComponentResolver: org.apache.camel.impl.engine.DefaultComponentResolver@705a793a to resolve component with name: google-pubsub
06:04:00.670 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Component with name google-pubsub in registry. Found: null
06:04:00.670 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Component with name google-pubsub-component in registry. Found: null
06:04:00.681 [main] DEBUG org.apache.camel.impl.engine.DefaultComponentResolver - Found component: google-pubsub via type: org.apache.camel.component.google.pubsub.GooglePubsubComponent via: META-INF/services/org/apache/camel/component/google-pubsub
06:04:00.837 [main] DEBUG org.apache.camel.impl.engine.DefaultConfigurerResolver - Found configurer: google-pubsub-component via type: org.apache.camel.component.google.pubsub.GooglePubsubComponentConfigurer via: META-INF/services/org/apache/camel/configurer/google-pubsub-component
06:04:00.841 [main] DEBUG org.apache.camel.impl.engine.DefaultConfigurerResolver - Found configurer: google-pubsub-endpoint via type: org.apache.camel.component.google.pubsub.GooglePubsubEndpointConfigurer via: META-INF/services/org/apache/camel/configurer/google-pubsub-endpoint
06:04:00.846 [main] DEBUG org.apache.camel.support.DefaultComponent - Creating endpoint uri=[google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO], path=[GCP-PROJECT-NAME:transaction-test-subscriber]
06:04:00.872 [main] DEBUG org.apache.camel.impl.converter.CoreTypeConverterRegistry - Promoting fallback type converter as a known type converter to convert from: org.apache.camel.component.google.pubsub.GooglePubsubConstants.AckMode to: java.lang.String for the fallback converter: org.apache.camel.impl.converter.EnumTypeConverter@63e148cb
06:04:00.882 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO converted to endpoint: google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO by component: org.apache.camel.component.google.pubsub.GooglePubsubComponent@1bc4ec31
06:04:00.898 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Using ComponentResolver: org.apache.camel.impl.engine.DefaultComponentResolver@705a793a to resolve component with name: log
06:04:00.898 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Component with name log in registry. Found: null
06:04:00.898 [main] DEBUG org.apache.camel.support.ResolverHelper - Lookup Component with name log-component in registry. Found: null
06:04:00.902 [main] DEBUG org.apache.camel.impl.engine.DefaultComponentResolver - Found component: log via type: org.apache.camel.component.log.LogComponent via: META-INF/services/org/apache/camel/component/log
06:04:00.906 [main] DEBUG org.apache.camel.impl.engine.DefaultConfigurerResolver - Found configurer: log-component via type: org.apache.camel.component.log.LogComponentConfigurer via: META-INF/services/org/apache/camel/configurer/log-component
06:04:00.910 [main] DEBUG org.apache.camel.impl.engine.DefaultConfigurerResolver - Found configurer: log-endpoint via type: org.apache.camel.component.log.LogEndpointConfigurer via: META-INF/services/org/apache/camel/configurer/log-endpoint
06:04:00.910 [main] DEBUG org.apache.camel.support.DefaultComponent - Creating endpoint uri=[log://input?showAll=true], path=[input]
06:04:00.926 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - log://input?showAll=true converted to endpoint: log://input?showAll=true by component: org.apache.camel.component.log.LogComponent@69e0f16
06:04:01.026 [main] DEBUG org.apache.camel.reifier.LogReifier - LogName is not configured, using route id as logName: route1
06:04:01.047 [main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.0 (camel-1) is starting
06:04:01.047 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Using ClassResolver=org.apache.camel.impl.engine.DefaultClassResolver@6a6b4536, PackageScanClassResolver=org.apache.camel.impl.engine.DefaultPackageScanClassResolver@5582249c, ApplicationContextClassLoader=null, RouteController=org.apache.camel.impl.engine.DefaultRouteController@19801b8d
06:04:01.049 [main] INFO org.apache.camel.impl.engine.AbstractCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
06:04:01.049 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Using HeadersMapFactory: org.apache.camel.impl.engine.DefaultHeadersMapFactory@f6776e2
06:04:01.049 [main] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Using ReactiveExecutor: org.apache.camel.impl.engine.DefaultReactiveExecutor@79e1f733
06:04:01.049 [main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Using HealthCheck: camel-health
06:04:01.052 [main] DEBUG org.apache.camel.impl.engine.InternalRouteStartupManager - Warming up route id: route1 having autoStartup=true
06:04:01.071 [main] DEBUG org.apache.camel.support.DefaultProducer - Starting producer: Producer[log://input?showAll=true]
06:04:01.072 [main] DEBUG org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route1 >>> Route[google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO -> null]
06:04:01.072 [main] DEBUG org.apache.camel.impl.engine.InternalRouteStartupManager - Starting consumer (order: 1000) on route: route1
06:04:01.073 [main] DEBUG org.apache.camel.support.DefaultConsumer - Init consumer: Consumer[google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO]
06:04:01.073 [main] DEBUG org.apache.camel.support.DefaultConsumer - Starting consumer: Consumer[google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO]
06:04:01.073 [main] INFO org.apache.camel.component.google.pubsub.GooglePubsubConsumer - Starting Google PubSub consumer for GCP-PROJECT-NAME/transaction-test-subscriber
06:04:01.078 [main] DEBUG org.apache.camel.impl.engine.BaseExecutorServiceManager - Created new ThreadPool for source: google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO with name: GooglePubsubConsumer[transaction-test-subscriber]. -> org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@11306ed7[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0][GooglePubsubConsumer[transaction-test-subscriber]]
06:04:01.295 [Camel (camel-1) thread #1 - GooglePubsubConsumer[transaction-test-subscriber]] DEBUG org.apache.camel.component.google.pubsub.GooglePubsubConsumer - Subscribing to projects/GCP-PROJECT-NAME/subscriptions/transaction-test-subscriber
06:04:01.299 [main] INFO org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route1 started and consuming from: google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber
06:04:01.316 [main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Total 1 routes, of which 1 are started
06:04:01.317 [main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.0 (camel-1) started in 0.270 seconds{code};;;","20/Jul/20 11:15;rvenk; 
{code:java}
@Grapes([
 @Grab(group='org.apache.camel', module='camel-core', version='3.1.0'),
 @Grab(group='org.apache.camel', module='camel-google-pubsub', version='3.1.0'),
 @Grab(group='org.slf4j', module='slf4j-api', version='1.7.30'),
 @Grab(group='ch.qos.logback', module='logback-classic', version='1.2.3'),
])
import org.apache.camel.CamelContext
import org.apache.camel.impl.DefaultCamelContext
import org.apache.camel.builder.RouteBuilder
import org.apache.camel.Exchange
import org.apache.camel.Message
import org.apache.camel.Processor
main()
def main() {
 println ""downloaded camel dependencies""
 CamelContext context = new DefaultCamelContext()
 context.addRoutes(new ReadFromQueueWithPubsub())
 context.start()
 addShutdownHook { context.stop() }
 synchronized(this){ this.wait() }
}

class ReadFromQueueWithPubsub extends RouteBuilder {
@Override
 void configure() {
 from(""google-pubsub://GCP-PROJECT-NAME:transaction-test-subscriber?ackMode=AUTO"")
 .to(""log:input?showAll=true"")
 .log(""Done"")
}
}

class Work {
 Integer runCommand(String body) {
 println ""RUNNING COMMAND with ${body}""
 Process cmd = ""/bin/bash /Users/ramesh/Code/groovy/emulate-long-running.sh"".execute()
 String text = cmd.text
 return cmd.exitValue()
 }
String useHeaders(Exchange ex) {
 Message msg = ex.getIn()
 String body = msg.getBody(String.class)
 def msgAttribs = msg.getHeader(""CamelGooglePubsub.Attributes"", HashMap.class)
 def ack = msg.getHeader(""CamelGooglePubsub.MsgAckId"", String.class)
 println ""Body = ${body}; Ack = ${ack}""
 return body
 }
}
{code}
 

 ;;;","20/Jul/20 11:17;rvenk;Sorry, I couldn't edit my comment - Please replace the Grapes version for camel to 3.4.0 - I was testing it again with 3.1.0 to reconfirm that it worked;;;","20/Jul/20 11:26;omarsmak;Sorry [~rvenk], I still can't reproduce the issue, in case I don't pass `GOOGLE_APPLICATION_CREDENTIALS` env, camel route will show an error and will shutdown the route as I'd expect it but I don't see the same in your logs unfortunately. 
Another idea to reproduce this issue, can you please use this maven project https://github.com/omarsmak/camel-talk-examples/tree/master/camel-main-timer as a start to replicate the issue and attach the maven project once you succeed on replicating it? 

Thanks;;;","21/Jul/20 11:23;rvenk;I was able to use your repo, modify the code slightly and it works correctly as designed. However, when I copy the code to a groovy script with all the {{@Grab}} dependencies, it does not work. So it looks like there's some issue when running it via groovy, and not related to this JIRA;;;","21/Jul/20 11:58;omarsmak;Thanks [~rvenk] for troubleshooting. Would be great if you can file another JIRA in relation to groovy script and your findings.
Thanks;;;","22/Jul/20 11:39;rvenk;Thank you so much for your help. As per your suggestion, I have filed https://issues.apache.org/jira/browse/CAMEL-15325 with all the details.;;;","26/Aug/20 11:53;rvenk;[~omarsmak] My apologies - I came back to this on Camel 3.4.3 on Java 11 and this still seems to be an open issue. When I attempt to consume a pubsub message, it just waits there silently. It seems like it's not connecting to Google pubsub at all. Here is the attached POM and the test code;;;","26/Aug/20 11:59;rvenk;Sorry - the attachment didnt go through. Here is the gist

https://gist.github.com/rameshvenk/041f18695721ef97a1cd4f5bec87ac7e;;;","26/Aug/20 12:06;omarsmak;Hey [~rvenk] out of curiosity, does it work in Java8? If yes, please create a JIRA ticket highlighting this issue occurs in Java 11 only so we can take care of it;;;","26/Aug/20 12:14;acosentino;Camel 3.4.3 is based on Spring Boot 2.3.2, try by using it, instead of 2.2.9;;;","26/Aug/20 12:45;rvenk;I changed my pom to Spring v2.3.2.RELEASE as follows

{code:xml}
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
{code}
I tested it on Java 8 by commenting this out from my pom and using Jdk as follows

{noformat}
% java -version
openjdk version ""1.8.0_262""
OpenJDK Runtime Environment (Zulu 8.48.0.51-CA-macosx) (build 1.8.0_262-b19)
OpenJDK 64-Bit Server VM (Zulu 8.48.0.51-CA-macosx) (build 25.262-b19, mixed mode)
%
{noformat}

{code:xml}
<!--	<properties>-->
<!--		<java.version>11</java.version>-->
<!--	</properties>-->
{code}
It fails to function on 2.3.2 with both Java 8 and Java 11

;;;","26/Aug/20 12:49;acosentino;I think your POM is incorrect, try to follow the camel-spring-boot example

 

https://github.com/apache/camel-spring-boot-examples/blob/master/camel-example-spring-boot/pom.xml;;;","26/Aug/20 13:08;rvenk;I generated this POM via [https://start.spring.io|https://start.spring.io/] - I will, of course, try what you suggested and report back. Also, if you feel that this Jira is inappropriate to continue discussions, I can also subscribe to the camel mailing lists and continue there.;;;",,,
Nullpointer Exception in Camel Salesforce,CAMEL-15063,13304980,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,orpiske,orpiske,14/May/20 15:56,02/Jul/20 08:42,13/Jul/23 08:33,16/May/20 06:32,3.2.0,,,3.4.0,,,,,camel-salesforce,,,,0,,,,,"While working on an integration test for the Camel Kafka Connector, which uses 3.2.0, I found what appears to be a problem in Camel Salesforce.

 
{code:java}
2020-05-14 17:22:48,758 [ool-68-thread-1] ERROR org.apache.camel.impl.engine.AbstractCamelContext - Error starting CamelContext (camel-1) due to exception thrown: null
java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.createClient(SubscriptionHelper.java:343) ~[camel-salesforce-3.2.0.jar:3.2.0]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.doStart(SubscriptionHelper.java:111) ~[camel-salesforce-3.2.0.jar:3.2.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.2.0.jar:3.2.0]
 at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[camel-api-3.2.0.jar:3.2.0]
 at org.apache.camel.component.salesforce.SalesforceConsumer.doStart(SalesforceConsumer.java:320) ~[camel-salesforce-3.2.0.jar:3.2.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3056) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3394) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3325) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3230) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRoutes(AbstractCamelContext.java:2992) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2790) ~[camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2643) [camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2606) [camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) [camel-api-3.2.0.jar:3.2.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2448) [camel-base-3.2.0.jar:3.2.0]
 at org.apache.camel.main.Main.doStart(Main.java:118) [camel-main-3.2.0.jar:3.2.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) [camel-api-3.2.0.jar:3.2.0]
 at org.apache.camel.main.MainSupport.run(MainSupport.java:83) [camel-main-3.2.0.jar:3.2.0]
 at org.apache.camel.kafkaconnector.utils.CamelMainSupport$CamelContextStarter.run(CamelMainSupport.java:224) [classes/:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_252]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_252]{code}
 

The problem seems to be related to the following set of conditions.
 # A SalesforceHTTPClient is not defined: [https://github.com/apache/camel/blob/release/3.2.0/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java#L328]
 # Therefore, the default Jetty one would be created: [https://github.com/apache/camel/blob/release/3.2.0/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java#L335]
 # Subsequently, the ServiceHelper performs the initialization of the SubscriptionHelper: [https://github.com/apache/camel/blob/release/3.2.0/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java#L371]
 # This, eventually, would call the doStart() method of the SubscriptionHelper: [https://github.com/apache/camel/blob/399f352a2e1a25d6a8af78d0ff7048c60c659522/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L108]
 # Which would try to create the Bayeux client: [https://github.com/apache/camel/blob/399f352a2e1a25d6a8af78d0ff7048c60c659522/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L111]
 # However, to do so, it tries uses the shared that Jetty HTTP client: [https://github.com/apache/camel/blob/399f352a2e1a25d6a8af78d0ff7048c60c659522/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java#L340]

 

The problem is that it tries to use the http client from the SalesforceEndpointConfig instance and, in no point between steps 1 and 6, it seems to have set the instanced created on the step 1 to the instance of that class.

 

 

 

 

 

 ",,orpiske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14927,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-14 15:56:13.0,,,,,,,,,,,"0|z0equw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot express multiple binding parameters in an URI of RabbitMQ,CAMEL-15062,13304913,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Eduard.Rindt,Eduard.Rindt,14/May/20 10:53,15/May/20 09:12,13/Jul/23 08:33,15/May/20 09:12,3.0.1,3.2.0,,3.4.0,,,,,camel-rabbitmq,,,,0,,,,,"As a Camel client, I need to define binding parameters in an URI that describes a from point of a Camel path. The way suggested by the documentation is not working.

Following is an example of the URI of a RabbitMQ that fails to set binding parameters:
{{rabbitmq://rabbitmq.dev.mycompany.net/myExchange?username=guest&password=guest&queue=myQueue&exchangeType=headers&vhost=all&autoAck=false&autoDelete=false&automaticRecoveryEnabled=true&args=arg.binding.country=CZ&args=arg.binding.type=myMessageType&args=arg.binding.x-match=all}}.

A short look into the code uncovers that the {{RabbitMQEndpointConfigurer}} expects the related 'args' (multi)value be stored in a map, but the URI scanner always encodes multivalues into a list with a (sub)name and a related value kept together in a single string. In turn, the whole 'args' parameter is ignored.","Camel 3.2.0 (orginally 3.0.1)
Spring Boot 1.3.5RELEASE
FasterXML Jackson 2.6.6
Eclipse Jetty 9.2.16.v20160414",acosentino,davsclaus,Eduard.Rindt,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15065,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 14 13:20:22 UTC 2020,,,,,,,,,,,"0|z0eqg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/May/20 11:39;acosentino;You shold do something like
{code:java}
        HashMap<String, Object> args = new HashMap<>();
        args.put(..)
        args.put(..)
        args.put(..)
{code}
Then bind you map to the registry (with name for example 'args' ) and use that in your endpoint with the bean notation 
{code:java}
rabbitmq://rabbitmq.dev.mycompany.net/myExchange?username=guest&password=guest&queue=myQueue&exchangeType=headers&vhost=all&autoAck=false&autoDelete=false&automaticRecoveryEnabled=true&args=#args
{code};;;","14/May/20 11:40;acosentino;[https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/integration/RabbitMQInOutIntTest.java#L80];;;","14/May/20 13:20;davsclaus;I wonder if we can make args multi-valued then you can set it more than once in the uri - a few other options are that.;;;",,,,,,,,,,,,,,,,,
Rest DSL generated controller error when dispatching request,CAMEL-15058,13304725,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,DenisIstomin,DenisIstomin,DenisIstomin,13/May/20 17:01,15/May/20 08:54,13/Jul/23 08:33,15/May/20 08:54,3.3.0,,,3.4.0,,,,,tooling,,,,0,,,,,"# Create spring boot project via maven archetype
 # Generate RestController using camel-restdsl-openapi:generate
 # Send request

Generated conroller has code:

{{String path = request.getRequestURI(){color:#cc7832};{color}}}

{{request.getServletContext().getRequestDispatcher({color:#6a8759}""/camel/"" {color}+ path).forward(request{color:#cc7832}, {color}response){color:#cc7832};{color}}}

 

when path starts with ""/"", concatenated string becomes ""/camel//path""",,davsclaus,DenisIstomin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 14 14:22:12 UTC 2020,,,,,,,,,,,"0|z0epa8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/May/20 13:21;davsclaus;There are unit test failures now according to CI. Can you take a look
https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/;;;","14/May/20 14:22;DenisIstomin;[~davsclaus] thanks, my fault, I'll fix it;;;",,,,,,,,,,,,,,,,,,
camel-telegream - NullPointerException with telegram webhook,CAMEL-15057,13304681,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zhfeng,zhfeng,zhfeng,13/May/20 14:02,14/May/20 08:01,13/Jul/23 08:33,14/May/20 08:01,3.2.0,,,3.4.0,,,,,camel-telegram,camel-webhook,,,0,,,,,"This issue comes across [camel-quarkus issue #1200 |https://github.com/apache/camel-quarkus/issues/1200]. The following router

{code:java}
from(""webhook:telegram:bots"")
    .log(""${body}"");
{code}
which is added before the camel context is started. So the doStart() in the TelegramEndpoint is deferred and that causes the WebHookEndpoint invokes the registerWebhook() throws NPE.
It could be considered to move the codes to the doInit() which seems safer as this can also happens outside quarkus etc
",,davsclaus,zhfeng,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 14 08:01:24 UTC 2020,,,,,,,,,,,"0|z0ep0g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/May/20 08:01;davsclaus;Thanks for reporting, the PR and testing my PR. Good we found a solution.;;;",,,,,,,,,,,,,,,,,,,
Camel GIT component does not check out the branch specified in branchName when cloning,CAMEL-15051,13304190,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,bocamel,bocamel,11/May/20 19:12,12/May/20 15:48,13/Jul/23 08:33,12/May/20 13:02,3.2.0,,,3.4.0,,,,,camel-git,,,,0,,,,,"When cloning a repository from a server (tested with GitHub) with the following Camel endpoint/options:

git:///F:\localpath?operation=clone&remotePath=[https://github.com/xxxxxxxx/cust-ir.git&username=xxxxxxxx&password=yyyyyyyy&remoteName=origin&branchName=branch_uat&synchronous=true]

The remote repository was correctly cloned to the localpath, but the branch specified is not created locally and not checked out.  The localpath working copy is the master branch.  Since Camel GIT does not have a checkout command, one would have to manually checkout the branch thus defeat the purpose of using the component.",This was tested on Windows 10 Pro with Camel 3.2.0 (Spring Boot 2.2.6) against GitHub.,acosentino,bocamel,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 12 15:48:46 UTC 2020,,,,,,,,,,,"0|z0elzk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/May/20 12:47;acosentino;The operation of clone can be followed by a checkout operation in a subsequent .to() step.

1) operation=clone

2) operation=checkout with a specified branchName;;;","12/May/20 13:02;acosentino;Anyway in Camel 3.4.0 (when available) if you specifiy the branchName and clone operation the branch will be set.;;;","12/May/20 15:48;bocamel;Andrea, first thank you very much for investigating this matter and for suggesting to use the ""checkout"" operation which is not mentioned in the latest Camel GIT doc [https://camel.apache.org/components/latest/git-component.html]).

I tried the ""checkout"" operation which did not work as expected.  Let's say the repo that was cloned has two branches: master and branch_uat, and the master branch is behind the branch_uat.  When the clone is done, the master branch is checked out and the origin/branch_uat is ""hidden"" in the local repository.  After running the checkout operation, a local branch branch_uat is created by Camel GIT but it is based on the master branch (thus behind the origin/branch_uat).  Even if I do another pull operation on the branch_uat, it still does not advance the branch_uat to the origin/branch_uat.  So I am essentially stuck with the master branch.

I will try any other workaround that you may suggest, but also look forward to the permanent fix in 3.4.0.

Thanks!;;;",,,,,,,,,,,,,,,,,
MojoFailureException after creating a new component using archetype then build it straight away,CAMEL-15043,13303979,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,alvinma,alvinma,11/May/20 01:22,12/Jul/20 13:06,13/Jul/23 08:33,25/May/20 07:57,3.2.0,,,3.4.0,,,,,tooling,,,,0,archetype,help-wanted,,," 

Intention: To create my own Camel component.

 

Steps:
 # Run `mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-component -DarchetypeVersion=3.2.0 -DgroupId=org.apache.camel -DartifactId=camel-mycomponent -Dname=MyComponent -Dscheme=mycomponent -Dpackage=org.apache.camel.component.mycomponent` and it'll create `camel-mycomponent` directory. Then open the `pom.xml` and delete the `OSGi` part because I don't need it.
 # Under `camel-mycomponent` run `mvn clean install`

 

Result:

Got error
{noformat}
[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.2.0:generate-component (generate) on project camel-mycomponent: Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo: Could not find component java type -> [Help 1] {noformat}
 

Expected: Build successfully with a jar output.","OS -> Mac OS 10.15.4

Maven -> 3.6.3

Java -> 1.8.0_241",acosentino,alvinma,amdmdi,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/May/20 01:22;alvinma;Screen Shot 2020-05-11 at 1.17.18 PM.png;https://issues.apache.org/jira/secure/attachment/13002565/Screen+Shot+2020-05-11+at+1.17.18+PM.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 12 13:04:21 UTC 2020,,,,,,,,,,,"0|z0ekoo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/May/20 14:13;davsclaus;Thanks for reporting. Yeah we should get the maven archetypes fixed if they have problems. And also remove the osgi bits and make them use java 11 by default.

Contributions is welcome;;;","21/May/20 15:16;acosentino;Fixed archetypes:
 * blueprint
 * cdi
 * java
 * java8
 * main

We have still troubles with the component and the api-component. Also I believe we can have a single java archetype.;;;","22/May/20 19:39;acosentino;I removed the archetype-web

So now we have 
 * blueprint
 * cdi
 * java
 * java8
 * main
 * spring
 * spring-boot

 

I still have some troubles with component, api-component and dataformat, because of the following error
{code:java}
[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.4.0-SNAPSHOT:generate-component (generate) on project daje: Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo: Could not find component java type -> [Help 1]
{code}
This is because at compile time we still don't have those information.

[~davsclaus] FYI;;;","24/May/20 15:35;davsclaus;Lets just drop java8 so we have one normal for java;;;","24/May/20 15:35;davsclaus;Also I think we can drop spring, as spring-boot is the default choice for spring users now.;;;","24/May/20 18:59;davsclaus;component, api-component and dataformat *DONE*;;;","25/May/20 07:57;davsclaus;Okay lets keep spring as its for XML DSL. And then drop java8 *DONE*;;;","11/Jul/20 12:35;amdmdi;Hi,
I'am having a similar issue with the *camel-archetype-api-component* archetype.
The generated component fails to build due to missing Junit5 dependencies:

{code:java}
$ mvn archetype:generate \
 -DarchetypeGroupId=org.apache.camel.archetypes \
 -DarchetypeArtifactId=camel-archetype-api-component \
 -DarchetypeVersion=3.4.0 \
 -DgroupId=org.acme \
 -DartifactId=camel-dummy-api \
 -Dversion=1.0.0 \
 -Dname=""DummyApiComponent"" \
 -Dscheme=dummy
$ cd camel-dummy-api/
$ mvn clean pacakge
...
[INFO] Reactor Summary for Camel DummyApiComponent Component Parent 1.0.0:
 [INFO] 
 [INFO] Camel DummyApiComponent Component Parent ........... SUCCESS [ 1.041 s]
 [INFO] Camel DummyApiComponent Component API .............. SUCCESS [ 2.946 s]
 [INFO] Camel DummyApiComponent Component .................. FAILURE [ 2.343 s]
 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD FAILURE
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 6.465 s
 [INFO] Finished at: 2020-07-11T12:17:59Z
 [INFO] ------------------------------------------------------------------------
 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile (default-testCompile) on project camel-dummy-api: Compilation failure: Compilation failure: 
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[11,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[12,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[19,36] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[19,1] static import only from classes and interfaces
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[11,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[12,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[19,36] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[19,1] static import only from classes and interfaces
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[32,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[33,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[43,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[44,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[58,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[59,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[32,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[33,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[43,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[44,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[58,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[59,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] -> [Help 1]
 [ERROR] 
 [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
 [ERROR] Re-run Maven using the -X switch to enable full debug logging.
 [ERROR] 
 [ERROR] For more information about the errors and possible solutions, please read the following articles:
 [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
 [ERROR] 
 [ERROR] After correcting the problems, you can resume the build with the command
 [ERROR] mvn <args> -rf :camel-dummy-api
{code};;;","12/Jul/20 13:04;amdmdi;I created PR [#3995|https://github.com/apache/camel/pull/3995] and [#3996|https://github.com/apache/camel/pull/3996] to fix the remaining issue i found;;;",,,,,,,,,,,
splunk-hec component only accepts local domains,CAMEL-15031,13303621,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,basis42,basis42,08/May/20 11:56,09/May/20 05:51,13/Jul/23 08:33,09/May/20 05:51,3.3.0,,,3.3.0,,,,,camel-splunk-hec,,,,0,,,,,"As of now the splunk-hec component accepts only local domains and not FQHNs. A FQHN is at least needed when you're talking to Splunks SAS offer, but might come in handy in other cases.

See [https://github.com/apache/camel/pull/3811] for a possible fix.

 

 ",,basis42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 08 11:57:13 UTC 2020,,,,,,,,,,,"0|z0eihk:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"08/May/20 11:57;basis42;I will file a PR on github to fix this.;;;",,,,,,,,,,,,,,,,,,,
KafkaEndpoint Sourced Headers are Overwritten By Default Propagation,CAMEL-15027,13303383,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,louisburton,louisburton,07/May/20 12:45,09/May/20 05:50,13/Jul/23 08:33,09/May/20 05:50,3.2.0,,,3.3.0,,,,,camel-kafka,,,,0,,,,,"https://issues.apache.org/jira/browse/CAMEL-11935
 [https://github.com/apache/camel/blob/camel-3.2.0/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java#L172-L176]

The KafkaEndpoint now populates Camel Message header values based on the Kafka record attributes. These are values specific to the Kafka record read from the poll.

https://issues.apache.org/jira/browse/CAMEL-12503
 The KafkaConsumer and KafkaProducer support propagation of Camel Headers to Kafka.

When combining these two behaviours, this means that we set the '{{kafka.'}} headers originally from the record, we produce these headers onto any subsequent Kafka messages. If {{camel-kafka}} then reads this message, it will overwrite the correct KafkaEndpoint set values for record specific information such as Topic name and timestamp, overwriting with the header values it had propagated from a prior Kafka record.

Ultimately, {{camel-kafka}} sets incorrect message headers if reading a Kafka record produced by {{camel-kafka}} from a Kafka input previously.",,davsclaus,louisburton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat May 09 05:50:35 UTC 2020,,,,,,,,,,,"0|z0eh0o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/May/20 07:46;davsclaus;Can you provide an unit test or sample project that demonstrates/reproduces this issue, or a sample Camel route as it helps better to understand the problem and use as test for ensuring its fixed;;;","08/May/20 23:38;louisburton;[~davsclaus] thanks for coming back to me.
I've added a couple of tests and a suggested fix in a PR as mentioned: [https://github.com/apache/camel/pull/3813];;;","09/May/20 05:50;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,
Camel throws exception on HHTP response Content-Type header with additional info,CAMEL-15026,13303372,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,bslaterdk,bslaterdk,07/May/20 11:48,08/May/20 07:25,13/Jul/23 08:33,08/May/20 07:25,2.21.0,,,2.21.1,,,,,camel-http4,,,,0,,,,,"Camel throws an TypeConversionException when receiving a HTTP response, where the Content-Type header includes extended information, e.g. version info.

org.apache.http.headers - [CID=879adbb4-d406-40e7-8529-5a20427157bf] - http-outgoing-0 << HTTP/1.1 400 Bad Request
org.apache.http.headers - [CID=879adbb4-d406-40e7-8529-5a20427157bf] - http-outgoing-0 << *Content-Type: application/json; charset=utf-8; v=1.0*
...

org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due utf-8; v=1.0
....
Caused by: java.io.UnsupportedEncodingException: utf-8; v=1.0
 at sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71)

The exception throw is TypeConversionException and the response to the caller of route will get a 404 error back, even though the original response code was 400.

It appears that Camel doesn't handle the ; v=1.0 part of the content-type header.",,bedla,bslaterdk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 07 23:39:04 UTC 2020,,,,,,,,,,,"0|z0egy8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/May/20 12:34;bedla;I believe this is fixed with CAMEL-12424 in 2.21.1. Can you try to upgrade?;;;","07/May/20 23:39;bslaterdk;I've tried with version 2.21.1, 2.21.5 (and 2.23.2.fuse-760030-redhat-00001 as we use Redhat Fuse), but I get exactly the same exception. 
 All my camel dependencies were updated to the mentioned version not only core and http4.

 

Is there a way where I can overwrite or register a modified TypeConverter, without recompiling Camel HTTP4, as a temporary workaround ?;;;",,,,,,,,,,,,,,,,,,
camel-restdsl-openapi-plugin: fix 'modelWithXml' parameter propagation,CAMEL-15025,13303345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,buhhunyx,buhhunyx,07/May/20 10:10,08/May/20 07:46,13/Jul/23 08:33,08/May/20 07:46,3.2.0,,,3.3.0,,,,,tooling,,,,0,,,,,pass correct value to swagger-codegen-maven-plugin and set default value to 'false' for backward compatibility,,buhhunyx,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-07 10:10:26.0,,,,,,,,,,,"0|z0egs8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Opentracing doesn't work with Kafka Component,CAMEL-15022,13303177,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,gnunn,gnunn,06/May/20 17:44,13/Jul/20 10:19,13/Jul/23 08:33,13/Jul/20 10:19,2.23.4,,,2.25.2,3.4.2,3.5.0,,,camel-opentracing,,,,0,,,,,"In Kafka the headers are stored as byte arrays rather then string. OpenTracing with Jaeger inserts a string header uber-trace-id which works. However when it tries to read it as a string when the message is consumed it presumably does a toString which doesn't return the actual string since the header is returned as a byte array.

This can be worked around by using a KafkaHeaderDeserializer as per here:

https://github.com/gnunn1/seating/blob/master/seat-listener/src/main/java/com/redhat/demo/HeaderDeserializer.java

Note you need to deserialize the kafka.TOPIC as well since the KafkaSpanDecorator tries to cast the header as a string which fails the header is returned as byte array.

https://github.com/apache/camel/blob/camel-2.23.x/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java#L49


 ",,davsclaus,gnunn,lucamaf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 17:52:39 UTC 2020,,,,,,,,,,,"0|z0eg1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/May/20 17:47;davsclaus;Thanks are you able to work on a fix. It should be on master branch for Camel 3.x. Then we can look at whether we can backport this to 2.25.x branch aftetwards.;;;","06/May/20 17:52;gnunn;Unfortunately I'm not familiar enough with the camel-opentracing architecture to put together a proper fix.;;;",,,,,,,,,,,,,,,,,,
Can't use custom scheduler in polling consumer,CAMEL-15017,13303045,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lbenvenu,lbenvenu,06/May/20 07:41,06/May/20 17:43,13/Jul/23 08:33,06/May/20 17:43,2.25.1,,,3.3.0,,,,,came-core,,,,0,,,,,"Hi,

I came across this error while trying to use a Quartz scheduler with a JPA component but I guess it applies to all the endpoints extending {{ScheduledPollEndpoint}}.

If I use
{code:java}
from(""jpa://myEntity?scheduler=quartz2&scheduler.cron=0+*+*+?+*+*+*"")
   /* ... */
{code}
I receive the following error:
{code:java}
org.apache.camel.FailedToCreateConsumerException: Failed to create Consumer for endpoint: jpa://myEntity?scheduler=quartz2&scheduler.cron=0+*+*+%3F+*+*+*. Reason: There are 1 scheduler parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{cron=0 * * ? * * *}]
at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:433) ~[camel-core-2.25.1.jar:2.25.1]
	at org.apache.camel.component.jpa.JpaConsumer.doStart(JpaConsumer.java:530) ~[camel-jpa-2.25.1.jar:2.25.1]
{code}
This happens because the scheduler is an instance of {{DefaultScheduledPollConsumerScheduler}}. After some debugging I found out that when {{ScheduledPollEndpoint#configureScheduledPollConsumerProperties}} is called, {{schedulerName}} is always null ({{Endpoint.configureProperties}} is invoked before setting endpoint properties using reflection).

The only workaround I've found so far is to write a custom component and force the scheduler on the endpoint:
{code:java}
public class MyJpaComponent extends JpaComponent {

    @Override
    protected Endpoint createEndpoint(String uri, String path, Map<String, Object> options) throws Exception {
        JpaEndpoint endpoint = (JpaEndpoint) super.createEndpoint(uri, path, options);
        endpoint.setScheduler(""quartz2"");
        return endpoint;
    }

}
{code}
Thanks,

lorenzo",,davsclaus,lbenvenu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 17:42:59 UTC 2020,,,,,,,,,,,"0|z0ef8w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/May/20 07:43;davsclaus;Can you try and test with Camel 3.2.x release.;;;","06/May/20 09:36;lbenvenu;I'm struggling to make my application work with Camel 3.2.0. Bumping the version caused some dependency issues; once I fixed those, I started receiving an error:

{code}
Caused by: javax.persistence.PersistenceException: No Persistence provider for EntityManager named camel
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:85) ~[javax.persistence-api-2.2.jar:2.2]
	at org.springframework.orm.jpa.LocalEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalEntityManagerFactoryBean.java:96) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.apache.camel.component.jpa.JpaEndpoint.createEntityManagerFactory(JpaEndpoint.java:539) ~[camel-jpa-3.2.0.jar:3.2.0] error.
{code}

It looks like {{EntityManagerFactory}} is not properly injected in the JPA component. When the JPA endpoint is created using {{JpaEndpoint(String uri, JpaComponent component)}} constructor, in Camel 2.25.1 {{component.getEntityManagerFactory()}} returns the Spring auto-configured {{EntityManagerFactory}}, in Camel 3.2.0 it returns null and this causes Camel to try to create a new {{EntityManagerFactory}}. 

Thanks,

lorenzo;;;","06/May/20 12:16;davsclaus;When the JPA component starts in 3.2 it logs that it auto discover this EMF (its start method).

If it cannot find one it logs at DEBUG otherwise at INFO
LOG.debug(""Could not find a single EntityManagerFactory in registry as there was {} instances."", map.size());

What do you see?;;;","06/May/20 12:27;davsclaus;It works in 3.x
https://github.com/apache/camel/commit/50e8b4c0c55df9bf164e94e4a474ef298106240e;;;","06/May/20 13:09;lbenvenu;{code}
2020-05-06T14:31:33.964+0200  INFO 17321 --- [  restartedMain] o.a.camel.component.jpa.JpaComponent     : Using EntityManagerFactory found in registry with id [entityManagerFactory] org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@13645b9b
{code}

But I see the {{JpaComponent#doStart}} method, which loads the {{entityManagerFactory}} from the context in case it's null, is called after the {{JpaComponent#createEndpoint}} method; so when the {{JpaEndpoint}} constructor is invoked {{component.getEntityManagerFactory()}} returns null.;;;","06/May/20 17:42;davsclaus;yeah we have improved jpa component in camel 3.3 where this works.;;;",,,,,,,,,,,,,,
Camel-Http: Endpoint parameters proxyHost and proxyPort are ignored,CAMEL-15012,13302829,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,ralfsteppacher,ralfsteppacher,05/May/20 08:56,07/Aug/20 07:14,13/Jul/23 08:33,07/Aug/20 07:14,3.1.0,,,3.4.3,3.5.0,,,,camel-http,,,,0,,,,,"The {{proxyHost}} and {{proxyPort}} query parameters are ignored by the camel-http compoment. They probably should be handled in {{org.apache.camel.component.http.HttpComponent#configureHttpProxy}}. Right now that method only handles {{proxyAuthHost}} and {{proxyAuthPort}}.

 

Using those query parameters seems to be the workaround, too, as {{org.apache.camel.component.http.ProxyHttpClientConfigurer}} makes no distinction between authentication and non-authenticating proxies.

 

Relates to CAMEL-10216.",,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-05 08:56:16.0,,,,,,,,,,,"0|z0edwo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use pooled connection incorrectly initialized in ActiveMQComponentConfiguration,CAMEL-15009,13302764,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,semmellitis,semmellitis,04/May/20 23:02,05/May/20 07:47,13/Jul/23 08:33,05/May/20 07:47,3.2.0,,,3.3.0,,,,,camel-spring-boot-starters,,,,0,activemq-camel,,,,"In ActiveMQComponentConfiguration the documentation states that 'usePooledConnection' is _true_ by default, while the property is initialized to _false_ ",,davsclaus,semmellitis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 05 07:47:38 UTC 2020,,,,,,,,,,,"0|z0edi8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/May/20 07:47;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,
PropertyBindingSupport fails for anonymous classes,CAMEL-15003,13302591,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,04/May/20 07:48,05/May/20 07:49,13/Jul/23 08:33,05/May/20 07:49,,,,3.3.0,,,,,camel-core,,,,0,,,,,"The PropertyBindingSupport::autowireSingletonPropertiesFromRegistry uses Class::getSimpleName to determine the name of a component configurer but in case of a component created using an anonymous class i.e. to override some behaviors, PropertyBindingSupport will fails as  Class::getSimpleName returns an empty string.  ",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-05-04 07:48:51.0,,,,,,,,,,,"0|z0ecfs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel 3 log showCaughtException is not working,CAMEL-14999,13302427,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bedla,laurentchabot,laurentchabot,02/May/20 12:06,02/May/20 18:50,13/Jul/23 08:33,02/May/20 18:50,3.0.0,3.1.0,3.2.0,3.3.0,,,,,,,,,0,,,,,"Take this simple case:
{code:java}
CamelContext ctx = new DefaultCamelContext();
ctx.addRoutes(new RouteBuilder() {
    @Override
    public void configure() throws Exception {
        from(""direct:input"")
            .doTry()
            .throwException(new Exception(""Something wrong""))
            .doCatch(Exception.class)
            .end()
            .to(""log:error?level=WARN&showCaughtException=true"");
    }
});
ctx.start();
ctx.createProducerTemplate().sendBody(""direct:input"", null);
{code}

In Camel 2.x (tested with 2.24.1 and 2.25.1), we get the expected log:
{noformat}
13:58:06,685 | WARN  | main             | error                            | Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null], CaughtExceptionType: java.lang.Exception, CaughtExceptionMessage: Something wrong]
{noformat}
But in Camel 3.x (tested with 3.0.0, 3.1.0 and 3.2.0), the caught exception is not shown:
{noformat}
13:55:19,904 | WARN  | main             | error                            | Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
{noformat}
However, with {{showAll=true}}, the caught exception is correctly shown:
{noformat}
13:58:41,258 | WARN  | main             | error                            | Exchange[Id: ID-EBEBRPCLDV0019-1588420721258-0-1, ExchangePattern: InOnly, Properties: {CamelExceptionCaught=java.lang.Exception: Something wrong, CamelToEndpoint=log://error?level=WARN&showAll=true}, Headers: {}, BodyType: null, Body: [Body is null], CaughtExceptionType: java.lang.Exception, CaughtExceptionMessage: Something wrong, StackTrace: java.lang.Exception: Something wrong
	at LogTest$1.configure(LogTest.java:16)
	[...]
{noformat}

I went through the different migration guides but couldn't find anything about this.

This is really blocking for our Camel 3.x migration; any workaround is welcome! (preferably through endpoint parameters)",,bedla,laurentchabot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat May 02 18:50:14 UTC 2020,,,,,,,,,,,"0|z0ebfc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/May/20 15:18;laurentchabot;This part of the logic of {{LogComponent}} seems flawed somehow:
{code:java}
        // first, try to pick up the ExchangeFormatter from the registry
        ExchangeFormatter logFormatter = getCamelContext().getRegistry().lookupByNameAndType(""logFormatter"", ExchangeFormatter.class);
        if (logFormatter != null) {
            setProperties(logFormatter, parameters);
        } else if (exchangeFormatter != null) {
            // do not set properties, the exchangeFormatter is explicitly set, therefore the
            // user would have set its properties explicitly too
            logFormatter = exchangeFormatter;
        }
{code}

If I explicitly bind a {{DefaultExchangeFormatter}} instance named {{logFormatter}} in the registry, then the {{if}} condition is met, {{setProperties}} is called, and things work as expected.

But this shouldn't be needed, right? Why isn't this the default behavior?;;;","02/May/20 18:50;bedla;Fixed in [master@ffb362e|https://github.com/apache/camel/commit/ffb362eac47541d2df07247657f8d8de8e8cf591] (+[master@1ded844|https://github.com/apache/camel/commit/1ded84449802a23ab93b3dfd93812db8b83d6fc0]);;;",,,,,,,,,,,,,,,,,,
Stack overflow error during aggregation when using completionSize,CAMEL-14996,13302327,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michael992,michael992,01/May/20 17:03,04/May/20 15:48,13/Jul/23 08:33,04/May/20 15:38,3.2.0,,,3.3.0,,,,,camel-core,,,,0,,,,,"I get stack overflow exception when i do aggregation with *small* completionSize *only*
I have about 50000 lines to process if i use .completionSize(1000) it's fine but if i do .completionSize(10) i got java.lang.StackOverflowError

{code:java}
from(""direct:iSplitSomethingBefore"")
                .routeId(""myRouteId"")

                .aggregate(header(FILE_NAME_ONLY), new GroupedBodyAggregationStrategy())
                .eagerCheckCompletion()
                .completionSize(10) // Only when i use small number
                .completionPredicate(exchangeProperty(SPLIT_COMPLETE))
                // Some code....
;
{code}

{code:java}
java.lang.StackOverflowError: null
	at java.base/java.lang.ClassLoader.defineClass1(Native Method) ~[na:na]
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1016) ~[na:na]
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:800) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:698) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:621) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:579) ~[na:na]
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na]
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na]
	at ch.qos.logback.classic.spi.PackagingDataCalculator.populateFrames(PackagingDataCalculator.java:74) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.spi.PackagingDataCalculator.calculate(PackagingDataCalculator.java:58) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.spi.ThrowableProxy.calculatePackagingData(ThrowableProxy.java:142) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:122) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:419) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.Logger.filterAndLog_0_Or3Plus(Logger.java:383) ~[logback-classic-1.2.3.jar:na]
	at ch.qos.logback.classic.Logger.warn(Logger.java:692) ~[logback-classic-1.2.3.jar:na]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:150) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:401) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:323) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:426) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:365) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) ~[camel-base-3.2.0.jar:3.2.0]
....
{code}

",,chardahe@redhat.com,davsclaus,michael992,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15008,,,,,"02/May/20 19:58;michael992;stackoverflow.zip;https://issues.apache.org/jira/secure/attachment/13001898/stackoverflow.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 04 15:48:45 UTC 2020,,,,,,,,,,,"0|z0eat4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/May/20 17:09;chardahe@redhat.com;Hi,

Thanks for reporting, I'll look into it;;;","02/May/20 07:04;davsclaus;Thanks for reporting, so you have a file with 50000 lines or something and then you aggregate that with a completion size of 10? But you refer to a split completion. So do you have a splitter beforehand?

In other words can you maybe put together a small sample unit test or project that reproduces this and attach as zip to this JIRA or put on github etc.;;;","02/May/20 19:58;michael992;[^stackoverflow.zip]  [~davsclaus][~chardahe@redhat.com] Reproducible test;;;","03/May/20 08:04;davsclaus;Thanks for reporting, as a workaround you can enable parallel processing on the splitter.;;;","04/May/20 07:23;davsclaus;Okay so this is a combo of splitter and aggregator (but main issue are in splitter/multicast processor) that under certain situations causes to reuse the same thread for splitting all the content but the stackframe doesnt not collapse and it grows and you hit max 1024 and the jvm cant cope with this.

The parallel processing option causes the splitter to not reuse the same main thread and therefore does not have this problem.;;;","04/May/20 07:54;michael992;Thanks for investigating so is it a defect or i just have to increase my jvm option or using parallel option ?;;;","04/May/20 07:58;davsclaus;Use parallel, then the splitted messages may be out of order as the default thread pool has 10 worker threads. You can configure this to 1 worker thread, then its not out of order - if you must process the rows one by one in the exact order of your input file.;;;","04/May/20 15:28;davsclaus;Okay have a fix via CAMEL-15008 thanks for reporting Michael and providing the sample reproducer. Running your sample now works for me.;;;","04/May/20 15:48;michael992;Ok [~davsclaus] thanks you for your great work !;;;",,,,,,,,,,,
camel-undertow-spring-security: test rewrites meta-inf/services which causes failures with built artifact,CAMEL-14988,13302030,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,30/Apr/20 08:52,30/Apr/20 12:00,13/Jul/23 08:33,30/Apr/20 12:00,,,,3.3.0,,,,,camel-undertow,,,,0,,,,,"There is an issue with junit tests.
Tests creates file in meta-inf/services and deletes it afterwards.
# this is not needed, as this file already exist
# more important, built artifact doesn't contain this file and can not work properly",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-30 08:52:50.0,,,,,,,,,,,"0|z0e8z4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-undertow: if securityProvider is not present, but allowedRoles are not empty, access has to be denied",CAMEL-14987,13302021,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,30/Apr/20 08:26,30/Apr/20 12:02,13/Jul/23 08:33,30/Apr/20 12:02,3.2.0,,,3.3.0,,,,,camel-undertow,,,,0,,,,,"Due to some configuration errors, securityProvider can not be present in time of security handling. 
In that case, if allowedRoles are defined, access has to be forbidden.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-30 08:26:01.0,,,,,,,,,,,"0|z0e8x4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-undertow-spring-security: don't allow access to resource if no token is provided and add logging ,CAMEL-14986,13302011,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,30/Apr/20 07:24,30/Apr/20 12:02,13/Jul/23 08:33,30/Apr/20 12:02,3.2.0,,,3.3.0,,,,,camel-undertow,,,,0,,,,,"In case that spring-security configuration is wrong, security provider allows access to resource if there is no authentication token - has to be fixed.
It would be nice to have some debug logs from authentication method of provider.",,jondruse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-30 07:24:00.0,,,,,,,,,,,"0|z0e8uw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sqs2EndpointBuilder is not respecting delay - polling continuously ,CAMEL-14984,13301948,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Burgess,Burgess,29/Apr/20 23:59,01/May/20 04:54,13/Jul/23 08:33,01/May/20 04:54,3.2.0,,,3.3.0,,,,,camel-aws2,,,,0,,,,,"The `aws2Sqs`consumer is  not respecting the delay value and continuously polls every 500ms regardless of its setting in both the EndpointDSL and normal route builder string.

Example: 
{code:java}
// build.gradle
dependencies {
    implementation 'org.apache.camel:camel-endpointdsl:3.2.0'
    implementation 'org.apache.camel.springboot:camel-aws2-sqs-starter:3.2.0'
    ...
}
// EncodeQueueRoute.java
...
@Component
public class EncodeQueueRoute extends EndpointRouteBuilder {
    @Override
    public void configure() {
        from(aws2Sqs(""queueName"")
                .useFixedDelay(true)
                .delay(5000)
        ).to(file(""data/output""));
    }
} 
{code}
I have tried both the EndpointDSL as well as normal Route builder,
with useFixedDelay explicitly passed and without (it defaults to
true).

 

Original Mailing List Thread: https://camel.465427.n5.nabble.com/Sqs2EndpointBuilder-is-not-respecting-delay-polling-continuously-td5865730.html","Spring Boot 2.2.6

org.apache.camel:camel-endpointdsl:3.2.0
org.apache.camel.springboot:camel-aws2-sqs-starter:3.2.0",acosentino,Burgess,chardahe@redhat.com,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14982,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 30 13:45:13 UTC 2020,,,,,,,,,,,"0|z0e8gw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Apr/20 12:18;chardahe@redhat.com;Hi Brice, 
Thanks for reporting. I would look into it
 * [|https://issues.apache.org/jira/secure/AddComment!default.jspa?id=13301708];;;","30/Apr/20 12:31;acosentino;This seems to be related to CAMEL-14982;;;","30/Apr/20 13:38;acosentino;It's a different problem, the SQS2 consumer instantiate a scheduler and set it. The defaultSchedulerPollconsumer uses delay 500 and initialDelay 1000 and its value are not updated.;;;","30/Apr/20 13:43;acosentino;[~chardahe@redhat.com] please have a look here [https://github.com/apache/camel/blob/master/components/camel-aws2-sqs/src/main/java/org/apache/camel/component/aws2/sqs/Sqs2Endpoint.java#L107]

 

If you don't have time, I already have a possible fix.;;;","30/Apr/20 13:45;chardahe@redhat.com;Hi Andrea,

Thanks, I'll look into it;;;",,,,,,,,,,,,,,,
Endpoint DSL - File never consumed using delay,CAMEL-14982,13301772,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,michael992,michael992,29/Apr/20 10:44,02/May/20 06:44,13/Jul/23 08:33,30/Apr/20 19:54,3.2.0,,,3.3.0,,,,,camel-core,,,,0,,,,,"Is not about *camel-file-watch* but *camel-file* it doesn't appear in components list...

# When using file component with delay option the files will never be consummated if timeUnit != milliseconds 
# +Il also see that using delay with string (.delay(""2s"")) is not accepted anymore i got an exception even if the method still accept string...+

Some code

{code:java}
org.apache.camel.FailedToCreateRouteException: Failed to create route input-directory-route: Route(input-directory-route)[From[file:D:/2411/_data/l... because of Failed to resolve endpoint: file:D:/2411/_data/load/input?delay=2s&move=D%3A%2F2411%2F_data%2Fload%2Fsuccess&moveFailed=D%3A%2F2411%2F_data%2Fload%2Ffailure due to: Error binding property (delay=2s) with name: delay on bean: file:D:/2411/_data/load/input?delay=2s&move=D%3A%2F2411%2F_data%2Fload%2Fsuccess&moveFailed=D%3A%2F2411%2F_data%2Fload%2Ffailure with value: 2s
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:123) ~[camel-core-engine-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:353) ~[camel-core-engine-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:327) ~[camel-core-engine-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2598) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2431) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2448) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.2.0.jar:3.2.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:157) ~[camel-spring-3.2.0.jar:3.2.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:897) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]
	at fr.aphp.referential.load.LoadMain.main(LoadMain.java:9) ~[classes/:na]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:D:/2411/_data/load/input?delay=2s&move=D%3A%2F2411%2F_data%2Fload%2Fsuccess&moveFailed=D%3A%2F2411%2F_data%2Fload%2Ffailure due to: Error binding property (delay=2s) with name: delay on bean: file:D:/2411/_data/load/input?delay=2s&move=D%3A%2F2411%2F_data%2Fload%2Fsuccess&moveFailed=D%3A%2F2411%2F_data%2Fload%2Ffailure with value: 2s
	at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:971) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:893) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.builder.endpoint.AbstractEndpointBuilder.resolve(AbstractEndpointBuilder.java:55) ~[camel-endpointdsl-3.2.0.jar:3.2.0]
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:257) ~[camel-core-engine-3.2.0.jar:3.2.0]
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117) ~[camel-core-engine-3.2.0.jar:3.2.0]
	... 24 common frames omitted
Caused by: org.apache.camel.PropertyBindingException: Error binding property (delay=2s) with name: delay on bean: file:D:/2411/_data/load/input?delay=2s&move=D%3A%2F2411%2F_data%2Fload%2Fsuccess&moveFailed=D%3A%2F2411%2F_data%2Fload%2Ffailure with value: 2s
	at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:555) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.PropertyBindingSupport.access$000(PropertyBindingSupport.java:71) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:255) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.DefaultEndpoint.setProperties(DefaultEndpoint.java:433) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.DefaultEndpoint.configureProperties(DefaultEndpoint.java:401) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.ScheduledPollEndpoint.configureProperties(ScheduledPollEndpoint.java:111) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:449) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:68) ~[camel-file-3.2.0.jar:3.2.0]
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:38) ~[camel-file-3.2.0.jar:3.2.0]
	at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:148) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:952) ~[camel-base-3.2.0.jar:3.2.0]
	... 28 common frames omitted
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: long with value 2s due to org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Long with value 2s due to java.lang.NumberFormatException: For input string: ""2s""
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.createTypeConversionException(CoreTypeConverterRegistry.java:563) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:251) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:164) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:119) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.support.component.PropertyConfigurerSupport.property(PropertyConfigurerSupport.java:73) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.component.file.FileEndpointConfigurer.configure(FileEndpointConfigurer.java:52) ~[camel-file-3.2.0.jar:3.2.0]
	at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:550) ~[camel-support-3.2.0.jar:3.2.0]
	... 38 common frames omitted
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Long with value 2s due to java.lang.NumberFormatException: For input string: ""2s""
	at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:103) ~[camel-support-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:360) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:234) ~[camel-base-3.2.0.jar:3.2.0]
	... 43 common frames omitted
Caused by: java.lang.NumberFormatException: For input string: ""2s""
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:na]
	at java.base/java.lang.Long.parseLong(Long.java:692) ~[na:na]
	at java.base/java.lang.Long.valueOf(Long.java:1144) ~[na:na]
	at org.apache.camel.converter.ObjectConverter.toLong(ObjectConverter.java:177) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.converter.ObjectConverterLoader.lambda$registerConverters$17(ObjectConverterLoader.java:63) ~[camel-base-3.2.0.jar:3.2.0]
	at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:99) ~[camel-support-3.2.0.jar:3.2.0]
	... 45 common frames omitted
{code}


{code:java}
  @Override
  public void configure() throws Exception {
        from(fileEndpoint(""myDir""))
                // route...
        ;
    }

   private EndpointConsumerBuilder fileEndpoint(String directory) {
        return file(directory)
                .delay(2)
                .timeUnit(TimeUnit.SECONDS);
    }
{code}
",,acosentino,davsclaus,michael992,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14984,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 01 08:59:19 UTC 2020,,,,,,,,,,,"0|z0e7ds:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Apr/20 11:05;davsclaus;Read the upgrade guide about the 2s thingy

;;;","29/Apr/20 11:10;michael992;Ok thanks what's about the second point ?;;;","29/Apr/20 11:12;davsclaus;Yeah we need to fix that, a PR with an unit test that reproduces this in core/camel-endpointdsl would be nice.;;;","29/Apr/20 11:13;davsclaus;And btw the string parameters are also for property placeholders, eg delay(""{{myDelayKey}}"") 

;;;","29/Apr/20 11:14;acosentino;We changed the behavior in 3.2.0 and you have to specify them in milliseconds, in 3.3.0 we are planning to reintroduce the normal notation. [~gnodet] is working on it.;;;","29/Apr/20 11:19;michael992;Ok thanks;;;","29/Apr/20 15:02;davsclaus;Created an unit test where I cannot reproduce this on master
https://github.com/apache/camel/commit/6c41abb76e01ea5a04beaf324e5427cfe0bfb529;;;","30/Apr/20 06:11;michael992;[~davsclaus] -maybe i miss something but your test doesn't reproduce my code since your'e using .initialDelay(0).-

-I test with .initialDelay(0) and yes it's work but i must this one by default ? Is in the documentation ? thanks-

A ok i understand what happening here it's because .timeUnit() have effect on both ! and since initialDelay have default value 1000 it will start to poll in 1000s. So ok but is it a good thing ?;;;","30/Apr/20 06:57;davsclaus;Ah not really with the initial delay thingy;;;","30/Apr/20 07:28;davsclaus;Reopen to not forget about the initial delay. Lets change it to be -1 or something internally so we know its the default, and then we can hardcode it to be 1 second;;;","30/Apr/20 12:24;michael992;It doesn't satisfy the requirement because the default delay before the next pool is 500 so in the case you want something like:
.timeUnit(TimeUnit.SECONDS) and .initialDelay(20) you will get poll every 500s it still not good i think.

Instead you can just take care about .timeUnit() only if value was provided by user (not the default one) for one of them eg
if i do something like .delay(2).timeUnit(TimeUnit.SECONDS) this will not affect initialDelay() with default 1000ms

The question is how you will know if is user value or default one ? don't know about clean way to do that;;;","30/Apr/20 19:54;davsclaus;Okay so the defaults now adjusts if you change the time unit so it stays at their level. A general fix in camel-core so it applies to all scheduled components;;;","30/Apr/20 20:43;michael992;Yeah maybe something in this way if it's not too complicated;;;","01/May/20 08:59;michael992;Thanks for the fix [~davsclaus]

Just one thing i checked the code and this look weird for me


{code:java}
 if (delay <= 0) {
            // compute the default delay that are millis to use current time unit
            currentDelay = timeUnit.convert(DEFAULT_DELAY, TimeUnit.MILLISECONDS);
            if (currentDelay <= 0) { // This is not necessary i think
                // delay must be at least 1
                currentDelay = 1;
            }

 if (delay < 0) {
                // compute the default delay that are millis to use current time unit
                long value = timeUnit.convert(DEFAULT_DELAY, TimeUnit.MILLISECONDS);
                if (value <= 0) { // This is not necessary i think
                    // delay must be at least 1
                    value = 1;
}
{code}

How currentDelay or value could be less than 0 in this cases ?
;;;",,,,,,
camel-kafka - SerializationException - consumer keeps leaving and rejoining the group,CAMEL-14980,13301708,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cless91,cless91,29/Apr/20 05:23,22/Mar/21 08:39,13/Jul/23 08:33,22/Mar/21 08:24,3.2.0,,,3.9.0,,,,,camel-kafka,,,,3,,,,,"Hello everyone,

 

I found out i few days ago that if a `SerializationException` is thrown when the consumer tries to poll messages, it will keep leaving and joining the consumer-group indefinitely and without any informative log.
 The exception cannot either be handled by any camel exception handler.

After some searching in the code i found out the culprit:
{code:java}
// org.apache.camel.component.kafka.KafkaConsumer (ligns 406-415):
catch (KafkaException e) {
  // some kind of error in kafka, it may happen during
  // unsubscribing or during normal processing
  if (unsubscribing){             
    getExceptionHandler().handleException(""Error unsubscribing "" + threadId + "" from kafka topic "" + topicName, e);   
  }else {
    LOG.debug(""KafkaException consuming {} from topic {} causedby {}. Will attempt to re-connect on next run"", threadId, topicName, e.getMessage());
    reConnect = true;
  }
}
{code}
 

`SerializationException` extends from `KafkaException`, but it is definitely not a recoverable exception.

It logs with debug level, which makes it hard to track, there are SO many things logging in debug.

It it cannot be handled by any camel exception handling mechanism.

I think it would be better to either:
 - change that catch so that it pinpoints the subclasses of `KafkaException` that are actually recoverable from rejoining (maybe `WakeupException` and a couple others)
 - add a `catch` block for `SerializationException` and maybe `ConfigException` and `OAuthBearerConfigException` before, with a log error andallow the user to handle those exceptions
 - remove that catch block entirely and let users handle any KafkaException however they see fit.

Thank you",,bedla,cless91,davsclaus,maroos,ramu11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/May/20 15:22;cless91;camel-kafka-errors.txt;https://issues.apache.org/jira/secure/attachment/13002010/camel-kafka-errors.txt","04/May/20 16:29;cless91;poc_camel_kafka.tar.gz;https://issues.apache.org/jira/secure/attachment/13002012/poc_camel_kafka.tar.gz",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 22 08:39:17 UTC 2021,,,,,,,,,,,"0|z0e6zk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Apr/20 03:39;ramu11;[~cless91] Thanks for reporting.   It would be good to have multiple catch blocks to understand better about the error. I would look into it;;;","02/May/20 07:07;davsclaus;The serialization error is that due to a posion message in kafka, that you cannot deseerialize? And is it the key or the value? And can you maybe post the stacktrace or some more details of this exception?;;;","04/May/20 15:13;cless91;Hi.

Indeed the serialization error is due to an avro message that the consumer cannot deserialize and it is the value.

Here are the logs from Camel :

 
{code:java}
2020-05-04 16:55:18.768  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-1, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Member consumer-1-3ce58863-302b-4be3-9b86-43a963ffe327 sending LeaveGroup request to coordinator localhost:9092 (id: 2147483646 rack: null)
2020-05-04 16:55:18.866  INFO 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [http://localhost:9092]
	
	[...]

2020-05-04 16:55:18.925  WARN 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.ConsumerConfig    : The configuration 'sasl.kerberos.principal.to.local.rules' was supplied but isn't a known config.
2020-05-04 16:55:18.925  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 2.3.1
2020-05-04 16:55:18.925  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: 18a913733fb71c01
2020-05-04 16:55:18.925  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1588604118925
2020-05-04 16:55:18.927  INFO 13972 --- [umer[cont_hist]] o.a.camel.component.kafka.KafkaConsumer  : Reconnecting cont_hist-Thread 0 to topic cont_hist after 5000 ms
2020-05-04 16:55:23.928  INFO 13972 --- [umer[cont_hist]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing cont_hist-Thread 0 to topic cont_hist
2020-05-04 16:55:23.928  INFO 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.KafkaConsumer     : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Subscribed to topic(s): cont_hist
2020-05-04 16:55:23.934  INFO 13972 --- [umer[cont_hist]] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Cluster ID: RN9Osn1cTTONG3zaT0LtOg
2020-05-04 16:55:23.936  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)
2020-05-04 16:55:23.937  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Revoking previously assigned partitions []
2020-05-04 16:55:23.937  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] (Re-)joining group
2020-05-04 16:55:23.943  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] (Re-)joining group
2020-05-04 16:55:23.949  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Successfully joined group with generation 3
2020-05-04 16:55:23.949  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Setting newly assigned partitions: cont_hist-0
2020-05-04 16:55:23.954  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Setting offset for partition cont_hist-0 to the committed offset FetchPosition{offset=2, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=localhost:9092 (id: 1 rack: null), epoch=0}}
2020-05-04 16:55:23.978  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-2, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Member consumer-2-54cba12d-1a38-4a5d-8b50-26f2a6b3868a sending LeaveGroup request to coordinator localhost:9092 (id: 2147483646 rack: null)
2020-05-04 16:55:23.998  INFO 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true
	auto.commit.interval.ms = 5000
	auto.offset.reset = latest
	bootstrap.servers = [http://localhost:9092]
	
	[...]

2020-05-04 16:55:24.014  WARN 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.ConsumerConfig    : The configuration 'sasl.kerberos.principal.to.local.rules' was supplied but isn't a known config.
2020-05-04 16:55:24.014  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 2.3.1
2020-05-04 16:55:24.014  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: 18a913733fb71c01
2020-05-04 16:55:24.015  INFO 13972 --- [umer[cont_hist]] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1588604124014
2020-05-04 16:55:24.015  INFO 13972 --- [umer[cont_hist]] o.a.camel.component.kafka.KafkaConsumer  : Reconnecting cont_hist-Thread 0 to topic cont_hist after 5000 ms
2020-05-04 16:55:29.015  INFO 13972 --- [umer[cont_hist]] o.a.camel.component.kafka.KafkaConsumer  : Subscribing cont_hist-Thread 0 to topic cont_hist
2020-05-04 16:55:29.016  INFO 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.KafkaConsumer     : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Subscribed to topic(s): cont_hist
2020-05-04 16:55:29.032  INFO 13972 --- [umer[cont_hist]] org.apache.kafka.clients.Metadata        : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Cluster ID: RN9Osn1cTTONG3zaT0LtOg
2020-05-04 16:55:29.032  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Discovered group coordinator localhost:9092 (id: 2147483646 rack: null)
2020-05-04 16:55:29.033  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Revoking previously assigned partitions []
2020-05-04 16:55:29.034  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] (Re-)joining group
2020-05-04 16:55:29.039  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] (Re-)joining group
2020-05-04 16:55:29.048  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Successfully joined group with generation 5
2020-05-04 16:55:29.048  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Setting newly assigned partitions: cont_hist-0
2020-05-04 16:55:29.050  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.ConsumerCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Setting offset for partition cont_hist-0 to the committed offset FetchPosition{offset=2, offsetEpoch=Optional.empty, currentLeader=LeaderAndEpoch{leader=localhost:9092 (id: 1 rack: null), epoch=0}}
2020-05-04 16:55:29.066  INFO 13972 --- [umer[cont_hist]] o.a.k.c.c.internals.AbstractCoordinator  : [Consumer clientId=consumer-3, groupId=6dde7e33-87c6-4ea7-a173-49e903d549e6] Member consumer-3-3da59636-0a83-4abc-9293-a7e456d65574 sending LeaveGroup request to coordinator localhost:9092 (id: 2147483646 rack: null)
2020-05-04 16:55:29.090  INFO 13972 --- [umer[cont_hist]] o.a.k.clients.consumer.ConsumerConfig    : ConsumerConfig values: 
	allow.auto.create.topics = true{code}
 

 

There are no stack trace, it just keep leaving and joining the group.

But here is the message when i place a breakpoint in org.apache.camel.component.kafka.KafkaConsumer, lign 409, then in the debugger, evaluate `e.printStackTrace` :
{code:java}
org.apache.kafka.common.errors.SerializationException: Error deserializing key/value for partition cont_hist-0 at offset 4. If needed, please seek past the record to continue consumption.
 Caused by: org.apache.kafka.common.errors.SerializationException: Error deserializing Avro message for id 2
 Caused by: org.apache.kafka.common.errors.SerializationException: Could not find class fr.ing.payment.cardeventnotifier.secure3d.generated.avro.PocContHist2 specified in writer's schema whilst finding reader's schema for a SpecificRecord.{code}
In my re-creation of the error, I deliberately changed the name of the schema avro of the producer.

Another case: when i send garbage through the console-producer. Here is what i get when i evaluate `e.printStackTrace()` on the breakpoint:

 
{code:java}
org.apache.kafka.common.errors.SerializationException: Error deserializing key/value for partition cont_hist-0 at offset 5. If needed, please seek past the record to continue consumption.
 Caused by: org.apache.kafka.common.errors.SerializationException: Error deserializing Avro message for id -1
 Caused by: org.apache.kafka.common.errors.SerializationException: Unknown magic byte!{code}
In any case, this error is not printed, the consumer doesn't fail, the exception cannot be handled by an exceptionHandler, and the consumer leaves and joins the group indefinitely without any informative message.

Is that enough or do you need any other information ?

EDIT:
 I added a .txt file with some logs.

EDIT2:
 I added a executable example if necessary;;;","05/May/20 06:10;ramu11;Thanks for the logs and example. i will look in to it;;;","29/Jun/20 03:15;ramu11;we can get rid of these type of issues by implementing deadletterqueue for kafka .

we can implement a failure-strategy  similar to kafka-connect

failure-strategy  : Specify the failure strategy to apply when a message produced from a record is nacked. Values can be fail (default), ignore, or dead-letter-queue

Type: string

supports 3 strategies:

fail - fail the application, no more records will be processed. (default) The offset of the record that has not been processed correctly is not committed.

ignore - the failure is logged, but the processing continue. The offset of the record that has not been processed correctly is committed.

dead-letter-queue - the offset of the record that has not been processed correctly is committed, but the record is written to a (Kafka) dead letter topic.

The strategy is selected using the failure-strategy attribute.

In the case of dead-letter-queue, you can configure the following attributes:

dead-letter-queue.topic: the topic to use to write the records not processed correctly, default is dead-letter-topic-$channel, with $channel being the name of the channel.

dead-letter-queue.key.serializer: the serializer used to write the record key on the dead letter queue. By default, it deduces the serializer from the key deserializer.

dead-letter-queue.value.serializer: the serializer used to write the record value on the dead letter queue. By default, it deduces the serializer from the value deserializer.

The record written on the dead letter queue contains the dead-letter-reason header with the nack reason (message from the exception passed to the nack method). It may also contain the dead-letter-cause with the message from the cause, if any.

your comments welcome;;;","15/Oct/20 22:39;bedla;I think something like failture strategy is overcomplicating things. It is IMO not needed as Camel already have similar strategies implemented as errorHandler and user can use that with `bridgeErrorHandler=true`.

First step is fixing that catch block. Reconnect should be attempted only for instances of `RetriableException`. All other types of `KafkaException` should be delegated to `ExceptionHandler`. There is another user with same problem https://stackoverflow.com/questions/64366380/apache-camel-kafka-bridgeerrorhandler-not-working;;;","16/Oct/20 05:16;cless91;That's also my thought, and something i put in my original post;;;","05/Dec/20 14:13;davsclaus;There is a new camel-kafka-vertx in 3.7 that rely on vertx-kafka client which should have more roboustness out of the box;;;","15/Dec/20 23:28;maroos;I hit a very similar problem with that `catch` block under different conditions.

If I provide invalid credentials (so not a recoverable situation) then SaslAuthenticationException is thrown by 'consumer.poll` and hits this problematic `catch` clause. Reconnect is attempted, fails again and we get into an infinite loop situation.

The big problem is that there is no way for the application to know about this problem. I'd like to write a custom Spring Boot Health Indicator that would return Health.down() in such a situation, but I don't see it possible as no information about the problem bubbles outside of that infinite loop.

Attempting to reconnect only for RetriableExceptions sounds reasonable, other error situations should be handed back to Camel and made visible.

 ;;;","20/Mar/21 15:34;davsclaus;Introducing a pluggable interface so you can configure a custom behaviour.

The default will retry for RetriableException and other exceptions will be delegated to ExceptionHandler.

There is a PR to review
https://github.com/apache/camel/pull/5248;;;","20/Mar/21 16:51;davsclaus;[~cless91] thanks for the reproducer - With the PR then the serialize exception causes Camel to not retry and you can bridge to Camel's error handler (or not). And the kafka consumer is closed and terminated. 

I assume that in any kind of polling exception we should make camel-kafka consumer be able to do

1) retry poll again (may fail forever, eg poison message)
2) fail and terminate (consumer is stopped/died - not sure if this is an ideal use-case)
3) if bridge error handler, then let camel error handler handle it, but keep consumer up to pickup next message

And for all of this you can decide what to do per exception - so let some retry, and all others do 2 or 3.
;;;","21/Mar/21 17:07;davsclaus;The PR has been updated to be more smart and offer more control for the user to decide.

;;;","22/Mar/21 08:34;cless91;Oh, thank you for the correction.
 I thought about opening a PR when i first discovered it, but refrained from it, especially after someone was assigned to it.
I was waiting for some reply like ""ok your potential solutions may work, go ahead, start a PR and we will go from there"", or ""the solution Y might work better, would you mind starting a PR with an implementation of Y ?"".
 Next time, i will be more brave and post that PR.

I was writing off Camel since, as i was working with Kafka at work pretty much all the time, but i will give it another try with 3.9.0;;;","22/Mar/21 08:39;davsclaus;Thanks Joseph, you are surely welcome to provide feedback on Camel 3.9 onwards. We plan to do more work on camel-kafka in upcoming releases for more features and also of course bugs and more hardening.

The PR also improved stopping the camel kafka consumer in a more graceful manner when it was in this ""error state"".;;;",,,,,,
Enricher does not reset stream cache for aggregator,CAMEL-14972,13301217,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,forsthofer,forsthofer,27/Apr/20 10:17,28/Apr/20 05:20,13/Jul/23 08:33,28/Apr/20 05:20,,,,3.3.0,,,,,camel-core,,,,0,,,,,If the enricher receives a stream cache as original body then the stream is consumed by the enrich endpoint. Therefore the stream cache must be reset before it is forwarded to the aggregator.,,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,2020-04-27 10:17:08.0,,,,,,,,,,,"0|z0e3yo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to start route [A] because of duplicate id detected: [B],CAMEL-14969,13301061,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mindiga,mindiga,26/Apr/20 09:03,30/Apr/20 07:27,13/Jul/23 08:33,30/Apr/20 07:27,3.2.0,,,3.3.0,,,,,camel-spring-boot,,,,0,,,,,"When loading rest definitions via ""xml-rests"" path defined in property
{quote}{color:#403294}camel.springboot.xml-rests = classpath:folder-camel/folder-rest/*.xml{color}
{quote}
The camel 3.2 fails with error 
{quote}{color:#de350b}Failed to start route first-test-get-id because of duplicate id detected: first-test-to-id. Please correct ids to be unique among all your routes.{color}
{quote}
My rest XML file is defined as

{{<?xml version=""1.0"" encoding=""UTF-8""?><?xml version=""1.0"" encoding=""UTF-8""?>}}
 {{<rests xmlns=""http://camel.apache.org/schema/spring"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""}}
 \{{ xsi:schemaLocation=""}}
 {{    [http://camel.apache.org/schema/spring] [https://camel.apache.org/schema/spring/camel-spring-3.2.0.xsd]}}
 \{{    "">}}
 \{{ <rest id=""id1"" path=""/test"">}}
 \{{ <get id=""id2"" uri=""/folderuri"">}}
 {color:#de350b}{\{ <to id=""id3"" uri=""log:test-log-rest"" />}}{color}
 \{{ </get>}}
 \{{ </rest>}}
 {{</rests>}}

However, when I envelope TO tag in the ROUTE tag, the issue gets resolved

{{<rest id=""id1"" path=""/test"">}}
 {{<get id=""id2"" uri=""/folderuri"">}}
 {{{color:#4c9aff}<route id=""id4"">{color}}}
 {{{color:#de350b}<to id=""id3"" uri=""log:test-log-rest"" />{color}}}
 {{{color:#4c9aff}</route>{color}}}
 {{</get>}}
 {{</rest>}}

 

 ",,davsclaus,mindiga,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Apr/20 15:06;mindiga;CAMEL-14969-Eclipse-Project.zip;https://issues.apache.org/jira/secure/attachment/13001333/CAMEL-14969-Eclipse-Project.zip","26/Apr/20 09:10;mindiga;eclipse1_compare_by_ref.PNG;https://issues.apache.org/jira/secure/attachment/13001206/eclipse1_compare_by_ref.PNG","26/Apr/20 09:10;mindiga;eclipse2_causes_duplicate.PNG;https://issues.apache.org/jira/secure/attachment/13001207/eclipse2_causes_duplicate.PNG","26/Apr/20 09:10;mindiga;eclipse3-two-routes.PNG;https://issues.apache.org/jira/secure/attachment/13001208/eclipse3-two-routes.PNG","26/Apr/20 09:10;mindiga;eclipse4-comparison-conflict.PNG;https://issues.apache.org/jira/secure/attachment/13001204/eclipse4-comparison-conflict.PNG","26/Apr/20 09:10;mindiga;eclipse5-comparison-conflict.PNG;https://issues.apache.org/jira/secure/attachment/13001205/eclipse5-comparison-conflict.PNG","26/Apr/20 09:29;mindiga;trace_log1.zip;https://issues.apache.org/jira/secure/attachment/13001211/trace_log1.zip","26/Apr/20 09:29;mindiga;trace_log2.zip;https://issues.apache.org/jira/secure/attachment/13001210/trace_log2.zip",,8.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 30 07:27:24 UTC 2020,,,,,,,,,,,"0|z0e300:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Apr/20 09:09;mindiga;After investigating the issue found out that it is due to the *{color:#4c9aff}""RouteDefinitionHelper.validateUniqueIds""{color}* method comparing RouteDefinition objects by using == sign and RouteDefinition does not implement *{color:#4c9aff}""equals""{color}* method to compare route URI but leaves it to the basic object reference comparison. This causes that when REST endpoint URI is added to the list of routes of clashes with the endpoint route provided in route XML. ;;;","26/Apr/20 09:15;mindiga;Route Definitions are compared by reference instead of URI

!eclipse1_compare_by_ref.PNG!

And this causes duplicates in the routes list

!eclipse2_causes_duplicate.PNG!

Which results in multiple routes with the same URI

!eclipse3-two-routes.PNG!

Which than fails validation on having duplicate ROUTES and multiple subscribers routers on the same endpoint

!eclipse4-comparison-conflict.PNG!

And throws exception

!eclipse5-comparison-conflict.PNG!

 

 

 

 ;;;","26/Apr/20 09:20;mindiga;Stack traces of the debug points are below

1. RouteDefinition object does not implement ""equals"" method
{noformat}
RouteDefinition(Object).equals(Object) line: 156 RouteDefinition(Object).equals(Object) line: 156 ArrayList<E>.remove(Object) line: 622 DefaultModel.removeRouteDefinition(RouteDefinition) line: 108 DefaultModel.removeRouteDefinitions(Collection<RouteDefinition>) line: 94 DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 79 SpringCamelContext(DefaultCamelContext).addRouteDefinitions(Collection<RouteDefinition>) line: 126 CamelContextFactoryBean(AbstractCamelContextFactoryBean<T>).setupRoutes() line: 476 CamelContextFactoryBean.start() line: 367 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
2. And because of that when rest endpoint route is created, it is the duplicate of the actual route
{noformat}
DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 81 DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 81 SpringCamelContext(DefaultCamelContext).addRouteDefinitions(Collection<RouteDefinition>) line: 126 CamelContextFactoryBean(AbstractCamelContextFactoryBean<T>).setupRoutes() line: 476 CamelContextFactoryBean.start() line: 367 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
3. Which then fails duplicate Id validation
{noformat}
RouteDefinitionHelper.validateUniqueIds(RouteDefinition, List<RouteDefinition>) line: 267 RouteDefinitionHelper.validateUniqueIds(RouteDefinition, List<RouteDefinition>) line: 267 SpringCamelContext(DefaultCamelContext).startRouteDefinitions(List<RouteDefinition>) line: 342 SpringCamelContext(DefaultCamelContext).startRouteDefinitions() line: 327 SpringCamelContext(AbstractCamelContext).doInit() line: 2598 SpringCamelContext(BaseService).init() line: 83 SpringCamelContext(AbstractCamelContext).init() line: 2431 SpringCamelContext(BaseService).start() line: 111 SpringCamelContext(AbstractCamelContext).start() line: 2448 SpringCamelContext.start() line: 121 CamelContextFactoryBean.start() line: 373 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
 ;;;","26/Apr/20 09:26;mindiga;Might be conceptually similar to [CAMEL-13651], but it is a different bug.

https://issues.apache.org/jira/browse/CAMEL-13651;;;","26/Apr/20 09:29;mindiga;When I remove ""id"" attribute I get different exceptions

<rest path=""/test"">
<get uri=""/folderuri"">
<to uri=""log:test-nexus-rest"" />
</get>
</rest>

org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed: http://0.0.0.0:8080/test/folderpath?httpMethodRestrict=GET%2COPTIONS;;;","26/Apr/20 09:30;mindiga;Trace level log included below

[^trace_log1.zip] [^trace_log2.zip];;;","27/Apr/20 02:54;mindiga;My assessment is that for the REST endpoint Camel Spring is automatically creating producer and consumer route with the same name and as REST XML discovered resources are discovered first, then Camel Context end up creating them again from the routes definition created during the XML rest import.

If Camel Context XML is importing the same routes through the restContextRef tag, then this issue does not occur, as rest definitions and endpoints are created after the Camel Context is initialised.

Happy to provide more details if needed, but you should first go through the attached logs and images and please pay attention to the variable watch list on the images and debug stack trace that points out to the code lines and variable values to prove that route definitions list ends up having two route definitions for the single XML entry.;;;","27/Apr/20 07:14;davsclaus;Are you able to attach a zip file with a sample project that reproduces this, its easier for us to use to work on this. ;;;","27/Apr/20 15:09;mindiga;Hi [~davsclaus], attached is the test project in Eclipse that will reproduce the issue. [^CAMEL-14969-Eclipse-Project.zip]

In the file named ""src/main/resources/nenad-rest/nenad-rest.xml"" you will find 4 rest definitions.

Two that will fail and two that will work. You can uncomment them to test this.;;;","27/Apr/20 15:12;mindiga;Project test parameters are
{noformat}
main-class:    com.nenad.test.CAMEL14969
jvm-arguments: -Xms256m -Xmx512m --add-opens java.base/sun.nio.ch=ALL-UNNAMED 
maven command: mvn clean install spring-boot:run
test-url:      http://0.0.0.0:8080/test/nenad{noformat};;;","27/Apr/20 15:17;mindiga;Here are the two failing and two working rest definitions from the project [^CAMEL-14969-Eclipse-Project.zip]

 
{noformat}

<?xml version=""1.0"" encoding=""UTF-8""?><?xml version=""1.0"" encoding=""UTF-8""?>
<rests xmlns=""http://camel.apache.org/schema/spring"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 xsi:schemaLocation=""
    http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.2.0.xsd
    "">
 <!-- fail1 -->
 <!-- rest path=""/test"">
 <get uri=""/nenad"">
 <to uri=""direct:test_nenad"" />
 </get>
 </rest-->
 <!-- fail2 -->
 <rest id=""d1"" path=""/test"">
 <get id=""d2"" uri=""/nenad"">
 <to id=""d3"" uri=""direct:test_nenad"" />
 </get>
 </rest>
 <!-- works1 -->
 <!--rest path=""/test"">
 <get uri=""/nenad"">
 <route id=""test_nenad_rest_get_route_id"">
 <to uri=""direct:test_nenad"" />
 </route>
 </get>
 </rest-->
 <!-- works2 -->
 <!--rest id=""d1"" path=""/test"">
 <get id=""d2"" uri=""/nenad"">
 <route id=""test_nenad_rest_get_route_id"">
 <to id=""d3"" uri=""direct:test_nenad"" />
 </route>
 </get>
 </rest-->
</rests>{noformat}
 ;;;","28/Apr/20 00:16;mindiga;Added workaround links on the stackoverflow, so workaround can be accessed in the meantime

{color:#00875a}*Failed to start route A because of duplicate id detected: B*{color}

[https://stackoverflow.com/questions/61438807/failed-to-start-route-a-because-of-duplicate-id-detected-b]

{color:#00875a}*Failed to start route A because of Multiple consumers for the same endpoint is not allowed: E*{color}

[https://stackoverflow.com/questions/61439993/failed-to-start-route-a-because-of-multiple-consumers-for-the-same-endpoint-is]

 ;;;","28/Apr/20 21:11;mindiga;Hi [~davsclaus], my take is that this is the primary reason that for years Camel had issues with running multiple Camel Contexts in the same JVM. Because Route Definition objects are compared by reference instead of URI, and each Context with have its own autonumbering, you would be much more likely to detect duplicates this way, which would cause phantom errors. Hence route definition comparison has to include Camel Context ID and URI ID in addition to the Route Definition ID, instead of using only Java Object ID as it is done currently. Changing this would require significant framework changes, so I opted to report this as an issue, instead of fixing it myself.;;;","29/Apr/20 15:07;davsclaus;multiple camel contexts dont share route definitions. 

This is related to having rest xml and routes xml files loaded indepdently and rests are converted into routes;;;","29/Apr/20 21:59;mindiga;Thanks for looking at this [~davsclaus], appreciate your knowledgable insight. Warm Regards;;;","30/Apr/20 06:20;davsclaus;Okay so its because you are mixing spring xml with spring-boot, with the 

@ImportResource( { ""classpath:camel-context.xml""})

If you dont do this then it works;;;","30/Apr/20 07:04;davsclaus;Okay have a fix in the works, so when you mix spring boot and xml dsl via those <beans> xml files.;;;","30/Apr/20 07:27;davsclaus;Thanks for the detailed reported and the attached test-case;;;",,
camel-restdsl-openapi-plugin not working with yaml,CAMEL-14965,13300799,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pradeep.kalvakolu,pradeep.kalvakolu,24/Apr/20 12:42,28/Apr/20 14:29,13/Jul/23 08:33,28/Apr/20 14:29,,,,3.3.0,,,,,tooling,,,,0,help-wanted,,,,"Hi,


I am trying to generate rest DSL router and model files using yaml file with the camel-restdsl-openapi-plugin, But I am getting below error,


Caused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'openapi': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false') at [Source: (FileInputStream); line: 1, column: 9]        at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)        at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:722)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(UTF8StreamJsonParser.java:3556)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2651)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:856)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:753)        at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4231)        at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2692)        at org.apache.camel.maven.generator.openapi.AbstractGenerateMojo.readOpenApiDoc(AbstractGenerateMojo.java:277)        at org.apache.camel.maven.generator.openapi.GenerateMojo.execute(GenerateMojo.java:60)        ... 23 more


Below is my plugin in pom

<plugin>               

<groupId>org.apache.camel</groupId>               

<artifactId>camel-restdsl-openapi-plugin</artifactId>               

<version>${camel.version}</version>               

<configuration>                    <specificationUri>${project.basedir}/src/spec/openapi.yaml</specificationUri>                </configuration>           

</plugin>            

 

It seems like it is expecting json format even though I have specified yaml file.


When I send openapi.json instead of yaml file it is successfully generating the files.


so do we need to mention anything in the plugin so that it recognizes the yaml file.

 

Thanks,

Pradeep",,davsclaus,pradeep.kalvakolu,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14966,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 28 14:29:21 UTC 2020,,,,,,,,,,,"0|z0e1ds:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Apr/20 12:46;davsclaus;What version of Camel do you use? ;;;","24/Apr/20 12:47;pradeep.kalvakolu;3.1.0;;;","24/Apr/20 12:59;davsclaus;Thanks can you try with Camel 3.2.0 release ;;;","24/Apr/20 13:03;pradeep.kalvakolu;I am having same issue with Camel 3.2.0 as well.;;;","24/Apr/20 13:33;davsclaus;That tool is a copy of the old swagger plugin that supports both json and yaml so I am actually not aware of whether we have yaml support in this too. But as yaml can be transformed to json then it should be doable. ;;;","27/Apr/20 13:07;pradeep.kalvakolu;So is it possible to confirm if the yaml support exists with this plugin. If it doesn't exists, is it possible to include it, may be, in the next version.;;;","28/Apr/20 13:20;davsclaus;Yeah I think it would be doable by adding the yaml parser that we have in swagger and use it in this module too.;;;","28/Apr/20 13:25;pradeep.kalvakolu;Ok great. When can we expect this change, any idea?;;;","28/Apr/20 14:29;davsclaus;Okay found out the issue and have it fixed for next release;;;",,,,,,,,,,,
Camel Karaf feature does reference wrong bundle,CAMEL-14960,13300759,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,roland.hauser@bechtle.ch,roland.hauser@bechtle.ch,24/Apr/20 09:42,24/Apr/20 09:47,13/Jul/23 08:33,24/Apr/20 09:45,3.2.0,,,3.3.0,,,,,camel-core,,,,0,,,,,"The Karaf feature.xml does still references ""org.apache.camel:camel-commands-core"" but it should be now ""org.apache.camel.karaf:camel-commands-core"". This breaks the build of our Karaf-based microservices.",,acosentino,davsclaus,roland.hauser@bechtle.ch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 24 09:47:10 UTC 2020,,,,,,,,,,,"0|z0e14w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Apr/20 09:44;davsclaus;I think this is a duplicate ticket that has been reported before;;;","24/Apr/20 09:45;acosentino;This has been already fixed for 3.3.0;;;","24/Apr/20 09:47;acosentino;You can add

 
<bundleReplacements>
<bundle mode=""maven"" originalUri=""mvn:org.apache.camel/camel-commands-core/3.2.0"" replacement=""mvn:org.apache.camel.karaf/camel-commands-core/3.2.0""/>
</bundleReplacements>
 
in etc/org.apache.karaf.features.xml;;;",,,,,,,,,,,,,,,,,
"ExpressionBuilder.headerExpression(""name"", class) results in ClassNotFoundException",CAMEL-14937,13299919,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jensgr@gmx.net,jensgr@gmx.net,21/Apr/20 08:51,22/Apr/20 12:46,13/Jul/23 08:33,22/Apr/20 12:46,3.2.0,,,3.3.0,,,,,came-core,,,,0,,,,,"{{ public static <T> Expression headerExpression(final String headerName, final Class<T> type) {}}
{{     return headerExpression(simpleExpression(headerName), constantExpression(type));}}
{{ }}}

 

and

 

{{ public static Expression headerExpression(final Expression headerName, final Expression typeName)}}
{{}}{{}}

tries to resolve the type via

{{String text = typeName.evaluate(exchange, String.class);}}

which results in the String ""class xxx.yyy.type"". Trying to resolve that as a class obviously is bound to fail. I'm not sure whether the type converter should be changed here or the headerExpression code is wrong.

 

This worked in 3.1.0, btw.",,davsclaus,jensgr@gmx.net,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Apr/20 08:28;jensgr@gmx.net;camel-header-expression.diff;https://issues.apache.org/jira/secure/attachment/13000807/camel-header-expression.diff",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 22 12:29:03 UTC 2020,,,,,,,,,,,"0|z0dvy8:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"22/Apr/20 04:54;davsclaus;Can you attach a reproducer or some more source code that better points out what the problem is. The code you have so far is a bit unclear.;;;","22/Apr/20 06:02;jensgr@gmx.net;I don't have a rproducer at the ready but the main problem is that

typeName.evaluate(exchange, String.class) with typeName being e.g. a constantExpression(String.class) results in the string ""class java.lang.String"".

When that gets fed into the class resolver, it fails.

So either the class resolver needs to handle that case (probably not the correct solution), or the type converter needs to make sure to convert to ""java.lang.String"", or the headerExpression code needs to use the passed in class parameter directly instead of converting to class name and back to class.;;;","22/Apr/20 08:28;jensgr@gmx.net;Here's a simple test case and a possible fix.;;;","22/Apr/20 11:59;davsclaus;Thanks we will take a look at this;;;","22/Apr/20 12:29;davsclaus;Yeah Jens this looks good thanks for the patch. Running tests before merging.;;;",,,,,,,,,,,,,,,
"controlbus stats - JMX is disabled, cannot get stats",CAMEL-14930,13299381,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,emmerson,emmerson,18/Apr/20 16:29,20/Apr/20 07:34,13/Jul/23 08:33,18/Apr/20 17:56,3.2.0,,,3.3.0,,,,,jmx,,,,0,,,,,"I have a Camel CDI project using 3.2 and I trying use controlbus to get stats from some routes using Java DSL:

 
{code:java}
.toD(""controlbus:route?routeId=${exchangeProperty.routesIds[${exchangeProperty.CamelLoopIndex}]}&action=stats"");{code}
 

The starting logs are telling me JMX is enabled
{code:java}
[ main] DefaultManagementStrategy INFO JMX is enabled{code}
 

But when I run the route I have an error message saying JMX is dissabled.
{code:java}
[ XNIO-1 task-1] ControlBusProducer INFO ControlBus task done [stats route mngt-endpoint-stats] with result -> JMX is disabled, cannot get stats{code}
 ","java version ""1.8.0_181""
Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)",acosentino,emmerson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 20 07:34:34 UTC 2020,,,,,,,,,,,"0|z0dsnk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Apr/20 16:32;acosentino;Did you add the camel-management dependency to your Pom?;;;","18/Apr/20 16:33;acosentino;It's documented in the migration guide.;;;","18/Apr/20 17:48;emmerson;I didn't, but is working after add that dependency, many thanks.

Would you mind update the official documentation to reflect that?

https://camel.apache.org/manual/latest/jmx.html

 ;;;","18/Apr/20 17:49;emmerson;This is a project from the scratch, that is the reason I didn't read the migration guide.

Thanks again :);;;","18/Apr/20 19:07;acosentino;Sure thing! Thanks for spotting this.;;;","20/Apr/20 07:34;acosentino;Added the documentation;;;",,,,,,,,,,,,,,
Unable to configure box component with configuration properties,CAMEL-14928,13299148,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jamesnetherton,jamesnetherton,17/Apr/20 14:14,05/May/20 08:47,13/Jul/23 08:33,05/May/20 08:47,3.2.0,,,3.3.0,,,,,camel-box,,,,0,,,,,"If I set properties:

camel.component.box.authenticationType = STANDARD_AUTHENTICATION
camel.component.box.userName = user
camel.component.box.userPassword = password
camel.component.box.clientId = foo
camel.component.box.clientSecret = bar

I get exception:

Caused by: java.lang.IllegalArgumentException: Unable to connect, Box component configuration is missing
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:92)

I wonder if [this|https://github.com/apache/camel/blob/master/components/camel-box/camel-box-component/src/main/java/org/apache/camel/component/box/BoxComponent.java#L89-L90] should call {{getConfiguration()}} instead of referencing the {{@Metadata}} annotated configuration field?",,davsclaus,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 05 08:47:06 UTC 2020,,,,,,,,,,,"0|z0drk0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/May/20 08:47;davsclaus;Yeah that was wrong, fixing;;;",,,,,,,,,,,,,,,,,,,
Salesforce component doesn't work due to Null HttpClient,CAMEL-14927,13299105,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbonofre,jbonofre,17/Apr/20 11:36,15/May/20 05:02,13/Jul/23 08:33,05/May/20 08:56,3.2.0,,,3.4.0,,,,,camel-salesforce,,,,0,,,,,"camel-salesforce component doesn't work in 3.2.0 release.

A NPE can happen in the SalesforceComponent (line 260) as httpClient is not initialized.",,acosentino,davsclaus,hemangajmera,jbonofre,jeremyross,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15063,,CAMEL-15047,,,,,"11/May/20 04:06;jeremyross;camel-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/13002581/camel-stacktrace.txt",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 12 18:22:44 UTC 2020,,,,,,,,,,,"0|z0drag:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/May/20 04:07;jeremyross;[~davsclaus] I'm still seeing this in 3.3.0-SNAPSHOT, which I think may be the same as this issue. [^camel-stacktrace.txt];;;","11/May/20 14:04;davsclaus;Ah thanks, can you try 3.4.0-SNAPSHOT just pushed some fixes;;;","11/May/20 14:19;jeremyross;[~davsclaus] I'm not seeing 3.4.0-SNAPSHOT in the snapshot repo or git. ;;;","11/May/20 14:21;acosentino;It's not moved to 3.4.0-SNAPSHOT, until we release 3.3.0 officialy;;;","11/May/20 14:34;jeremyross;[~davsclaus] I'm building the salesforce component from master and, as of last night, I'm still getting this exception. ;;;","11/May/20 14:42;davsclaus;You can also build from source locally;;;","11/May/20 14:47;jeremyross;[~davsclaus] I am building locally. That's what I meant when I said I'm building the salesforce component from master (branch). Should this be sufficient to get the fix? Or do I need to build more than the salesforce component?;;;","11/May/20 14:50;davsclaus;I would built it all, or at least the core JARs also.;;;","12/May/20 18:18;jeremyross;[~davsclaus] Fix looks good. Any chance this can make it in 3.3.0?;;;","12/May/20 18:22;davsclaus;Thanks for testing, now 3.3 is not a LTS release so not patches, wait for 3.4.0 to be released next month;;;",,,,,,,,,,
Cannot enable cors on platform-http,CAMEL-14922,13298835,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ppalaga,nferraro,nferraro,16/Apr/20 14:18,05/May/20 08:24,13/Jul/23 08:33,05/May/20 08:24,3.2.0,,,3.3.0,,,,,camel-platform-http,,,,0,,,,,"I've tried to enable cors via properties using `camel.context.rest-configuration.enable-cors=true` (but it should also happen via DSL configuration), but the platform-http component adds a parameter to the URI that is not recognized downstream: `optionsEnabled=true`.

I've tested it with both the vertx and the quarkus implementation, both fail with the following exception:
{code}
[2] Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: platform-http:///timeline?httpMethodRestrict=GET%2COPTIONS&optionsEnabled=true due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{optionsEnabled=true}]
[2] 	at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:358)
[2] 	at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:261)
[2] 	at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:780)
[2] 	... 26 more
{code}",,davsclaus,nferraro,ppalaga,,,,"ppalaga commented on pull request #3752: CAMEL-14922: Cannot enable cors on platform-http
URL: https://github.com/apache/camel/pull/3752
 
 
   https://issues.apache.org/jira/browse/CAMEL-14922
   
   This is fixing the immediate issue reported in CAMEL-14922. However it does not solve the problem that the platform-http component offers no real support for CORS beyond enabling the OPTIONS method handling.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 15:07;githubbot;600","davsclaus commented on pull request #3752: CAMEL-14922: Cannot enable cors on platform-http
URL: https://github.com/apache/camel/pull/3752
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 18:52;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 16 15:17:26 UTC 2020,,,,,,,,,,,"0|z0dpmg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Apr/20 14:29;davsclaus;Hmm that options is part of various HTTP components like jetty, undertow, servlet from Camel. But I guess platform-http is a different kind when none of those from Camel are in use.;;;","16/Apr/20 14:30;davsclaus;The parameter btw is used for allowing HTTP OPTIONS verb or not (default off);;;","16/Apr/20 15:17;ppalaga;The PR https://github.com/apache/camel/pull/3752 is fixing the immediate issue reported here, but it does not solve the problem that the platform-http component offers no real support for CORS beyond enabling the OPTIONS method handling. Plz file a separate issue for that, if necessary.;;;",,,,,,,,,,,,,,,,,
PahoEndpointBuilder not working,CAMEL-14921,13298812,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,eicki,eicki,16/Apr/20 13:19,17/Apr/20 12:58,13/Jul/23 08:33,17/Apr/20 06:01,3.2.0,,,3.3.0,,,,,camel-paho,,,,0,,,,,"I'm struggling with the PahoEndpointBuilder in both 3.2.0 and current 3.3.0-SNAPSHOT.
For testing purposes I have a simple route:

{code}
PahoEndpointBuilder endpointBuilder = paho (topic).brokerUrl (brokerUrl).userName (userName).password (password);
from (endpointBuilder).log (""${body}"");
{code}

The startup of the application fails with the following exception causes:
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: paho:myTestTopicMandant9?brokerUrl=tcp%3A%2F%2Flocalhost%3A1883&password=xxxxxx&userName=test due to: Failed to resolve endpoint: paho:myTestTopicMandant9?brokerUrl=tcp%3A%2F%2Flocalhost%3A1883&password=xxxxxx&userName=test due to: There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{brokerUrl=tcp://localhost:1883, password=test123, userName=test}]
	at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:971)
	at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:893)
	at org.apache.camel.builder.endpoint.AbstractEndpointBuilder.resolve(AbstractEndpointBuilder.java:55)
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:257)
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117)
	... 43 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: paho:myTestTopicMandant9?brokerUrl=tcp%3A%2F%2Flocalhost%3A1883&password=xxxxxx&userName=test due to: There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{brokerUrl=tcp://localhost:1883, password=test123, userName=test}]
	at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:351)
	at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:169)
	at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:952)
{code}

Curiously if I add a single line of code inbetween that creates the endpoint out of the builder it all works:
{code}
PahoEndpointBuilder endpointBuilder = paho (topic).brokerUrl (brokerUrl).userName (userName).password (password);
endpoint (endpointBuilder.getUri ());
from (endpointBuilder).log (""${body}"");
{code}
",,davsclaus,eicki,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 17 12:58:33 UTC 2020,,,,,,,,,,,"0|z0dphc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Apr/20 19:10;davsclaus;[~gnodet] it seems code at 
https://github.com/apache/camel/blob/e7120bbca852e784062f4f7c4c03b1508ebced0d/core/camel-base/src/main/java/org/apache/camel/impl/engine/AbstractCamelContext.java#L599

Was changed from calling init on the component to build. And that causes an issue. We need to move the configurer resolving from init to build phase;;;","17/Apr/20 08:56;gnodet;[~eicki] I can't reproduce the problem.  I've tried various things, but all succeeds (i.e. they fail when starting the consumer, but the endpoint creation works correctly).  Can you provide a full test please ?;;;","17/Apr/20 08:58;davsclaus;I have fixed the problem, its as I point out, that the component was not initialized to have its configurer setup and then it cannot set nested configurations. I moved this logic to doBuild instead;;;","17/Apr/20 12:58;eicki;Verified current 3.3.0-SNAPSHOT, it works now. Thanks.;;;",,,,,,,,,,,,,,,,
Trying to create directory (FtpOperations.buildDirectory) without starting directory in ftps URI,CAMEL-14915,13298645,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jinfengnarvar,jinfengnarvar,15/Apr/20 19:38,28/Apr/20 12:03,13/Jul/23 08:33,28/Apr/20 12:03,2.24.0,,,3.3.0,,,,,camel-ftp,,,,0,,,,,"Hi,

I setup a route using this FTPS URI:
{noformat}
ftps://filetransfer.bpost.be/?bridgeErrorHandler=true&connectTimeout=60000&delay=600000&disconnect=true&idempotent=true&idempotentKey=......&idempotentRepository=%23gfpIdempotentRepository&ignoreFileNotFoundOrPermissionError=true&localWorkDirectory=%2Ftmp%2F895c3952-e3f7-401f-b38f-055fcdf44301&maxMessagesPerPoll=0&move=archive&passiveMode=true&password=xxxxxx
{noformat}
You can see we didn't specify starting directory which we assume it would be defaulted to ""/"", but actually inside the code it gets defaulted to """" empty.

Upon debugging, I see this behavior from camel [FtpConsumer.doStart()|https://github.com/apache/camel/blob/master/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpConsumer.java#L77]:
{code:java}
                try {
                    connectIfNecessary();
                    operations.buildDirectory(endpoint.getConfiguration().getDirectory(), true);
                } catch (GenericFileOperationFailedException e) {
                    // log a WARN as we want to start the consumer.
                    LOG.warn(""Error auto creating directory: "" + endpoint.getConfiguration().getDirectory() + "" due "" + e.getMessage() + "". This exception is ignored."", e);
                }
{code}
Now my ftp URI doesn't have starting directory, (which is optional according to [https://camel.apache.org/components/latest/ftps-component.html]), so the `getDirector()` here returns """" empty string. And then inside [FtpOperations.buildDirectory()|https://github.com/apache/camel/blob/master/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java#L359]:
{code:java}
            try {
                // maybe the full directory already exists
                success = client.changeWorkingDirectory(directory);
                if (!success) {
                    log.trace(""Trying to build remote directory: {}"", directory);
                    success = client.makeDirectory(directory);
                    if (!success) {
                        // we are here if the server side doesn't create
                        // intermediate folders so create the folder one by one
                        success = buildDirectoryChunks(directory);
                    }
                }

                return success;
            } finally {
{code}
It tries first to enter the """" directory, which failed. Then it tried to makeDirectory(""""), which failed as well, after a very long timeout.

 

Of course we can use ""autoCreate=false"" to turn this behavior off. But my question is why do we want to try to autoCreate a directory when the directory string is actually """" empty?",mac/linux,davsclaus,dmvolod,jinfengnarvar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 18 10:28:13 UTC 2020,,,,,,,,,,,"0|z0dog8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Apr/20 10:42;davsclaus;Yeah lets improved this to detect the empty dir and skip attempting to create one;;;","17/Apr/20 13:38;jinfengnarvar;Seems like the problem is worse than I reported initially. I worked around the initial `buildDirectory()` failure and long timeout by using `autoCreate=false`, that got the route created and started successfully. But later, file retrieval always met with 

{noformat}
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 125 Data connection already open; transfer starting.\r
  Read timed out. Code: 125
  \tat org.apache.camel.component.file.remote.FtpOperations.listFiles(FtpOperations.java:886)
  \tat org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy.acquireExclusiveReadLock(FtpChangedExclusiveReadLockStrategy.java:95)
  \tat org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:64)
  \tat org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:37)
  \tat org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:362)
  \tat org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:133)
  \tat org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:223)
  \tat org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:187)
  \tat org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
  \tat org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
  \tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
  \tat java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
  \tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
  \tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
  \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
  \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
  \tat java.lang.Thread.run(Thread.java:748)
  Caused by: java.net.SocketTimeoutException: Read timed out
  \tat java.net.SocketInputStream.socketRead0(Native Method)
  \tat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
  \tat java.net.SocketInputStream.read(SocketInputStream.java:171)
  \tat java.net.SocketInputStream.read(SocketInputStream.java:141)
  \tat sun.security.ssl.InputRecord.readFully(InputRecord.java:465)
  \tat sun.security.ssl.InputRecord.read(InputRecord.java:503)
  \tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975)
  \tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1367)
  \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1395)
  \tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1379)
  \tat org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:646)
  \tat org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:785)
  \tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3409)
  \tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3339)
  \tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:3016)
  \tat org.apache.camel.component.file.remote.FtpOperations.listFiles(FtpOperations.java:878)
  \t... 16 more
{noformat}

I finally worked around the problem by changing my ftp uri to:

{noformat}
ftps://filetransfer.bpost.be//
{noformat}
Notice the extra / there? Everything now worked fine. But that seems very strange and extra burden on camel user to take care of this default (missing) starting directory situation.;;;","18/Apr/20 10:28;dmvolod;[~jinfengnarvar], yes, looks like you are right.

We should set 'directory' to \ if it's not set explicitly;;;",,,,,,,,,,,,,,,,,
camel-jackson: remove dependency on jackson-module-jaxb-annotations,CAMEL-14914,13298577,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,15/Apr/20 13:57,17/Apr/20 10:26,13/Jul/23 08:33,17/Apr/20 10:26,,,,3.3.0,,,,,camel-jackson,,,,0,,,,,"The camel-jackson dataformat has an explicit [dependency|https://github.com/apache/camel/blob/master/components/camel-jackson/pom.xml#L52-L55] on jackson-module-jaxb-annotations but for pure json processing it make sense to remove it.

Users can still add it back if they need it.

",,lb,,,,,,"lburgazzoli commented on pull request #3758: CAMEL-14914: camel-jackson: remove dependency on jackson-module-jaxb-annotations
URL: https://github.com/apache/camel/pull/3758
 
 
   [ ] Make sure there is a [JIRA issue](https://issues.apache.org/jira/browse/CAMEL) filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.
   [ ] Each commit in the pull request should have a meaningful subject line and body.
   [ ] If you're unsure, you can format the pull request title like `[CAMEL-XXX] Fixes bug in camel-file component`, where you replace `CAMEL-XXX` with the appropriate JIRA issue.
   [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.
   [ ] Run `mvn clean install -Psourcecheck` in your module with source check enabled to make sure basic checks pass and there are no checkstyle violations. A more thorough check will be performed on your pull request automatically.
   Below are the contribution guidelines:
   https://github.com/apache/camel/blob/master/CONTRIBUTING.md
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 09:39;githubbot;600","lburgazzoli commented on pull request #3758: CAMEL-14914: camel-jackson: remove dependency on jackson-module-jaxb-annotations
URL: https://github.com/apache/camel/pull/3758
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;17/Apr/20 10:26;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-15 13:57:49.0,,,,,,,,,,,"0|z0do14:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
user manual index page should not list entire contents of another component.,CAMEL-14906,13298440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,djencks,djencks,15/Apr/20 03:16,15/Apr/20 22:25,13/Jul/23 08:33,15/Apr/20 22:25,3.2.0,,,,,,,,website,,,,0,,,,,"The index page for the user manual is unusable and semantically wrong.  It should not list contents of another component. It might be reasonable to have a single link to the components component, but even that seems unnecessary to me since there are already lots of links in the nav pane and component explorer.",,djencks,,,,,,"djencks commented on pull request #3750: Fixes CAMEL-14906: point to components docs, don't list it all
URL: https://github.com/apache/camel/pull/3750
 
 
   Remove the exhaustive list of components contents from user manual index page, replacing by a link.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Apr/20 20:56;githubbot;600","djencks commented on pull request #3750: Fixes CAMEL-14906: point to components docs, don't list it all
URL: https://github.com/apache/camel/pull/3750
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Apr/20 22:22;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 15 22:25:25 UTC 2020,,,,,,,,,,,"0|z0dn6o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Apr/20 22:25;djencks;PR merged;;;",,,,,,,,,,,,,,,,,,,
Camel-Website: Build is broken ,CAMEL-14895,13298326,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,acosentino,acosentino,14/Apr/20 16:00,14/Apr/20 19:27,13/Jul/23 08:33,14/Apr/20 19:25,,,,3.3.0,,,,,website,,,,0,,,,,"error: antora.yml not found in [https://github.com/apache/camel.git] [ref: remotes/origin/master]

[https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel.website/job/master/72/console]",,acosentino,djencks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 14 19:27:27 UTC 2020,,,,,,,,,,,"0|z0dmhc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Apr/20 16:06;djencks;This is caused by the xref processor not understanding recent playbook syntax.  Dan did something to make the xref processor relate better to recent Antora code, but it's not working for me, or apparently, the automated build.  There are other problems with the xref processor as well, hopefully I can get this straightened out quickly.;;;","14/Apr/20 19:10;acosentino;This has been fixed by Zoran;;;","14/Apr/20 19:17;djencks;How? Where's the link to the change?;;;","14/Apr/20 19:18;djencks;Please indicate what the change is.;;;","14/Apr/20 19:20;acosentino;https://github.com/apache/camel-website/commit/b5e9327046d08108a9e637ece40b6c0ee0839a2f;;;","14/Apr/20 19:24;djencks;Great, thanks!;;;","14/Apr/20 19:27;djencks;BTW, I get ""NPE"" exceptions from xref-validator unless I modify the code, I wonder why you don't.

I had to change lines 9-11 in generate-report.js to

    if (originData.editUrlPattern) {
      origin = [
        `worktree: ${originData.editUrlPattern.slice(7, originData.editUrlPattern.length - 3)}`,

which is wrong but works.;;;",,,,,,,,,,,,,
Race condition using toD,CAMEL-14891,13298200,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,atreffer,atreffer,14/Apr/20 07:31,15/Apr/20 09:46,13/Jul/23 08:33,15/Apr/20 09:46,3.2.0,,,3.3.0,,,,,camel-metrics,,,,0,,,,,"I'm not sure which components are affected by this. I noticed this with the metrics component but it might be a general issue. Consider these two stack traces:

 

{{{{""Camel (camel-1) thread #7 - my-thread-1""}}}}
{{ \{{ at org.apache.camel.component.metrics.MetricsComponent.doInit(MetricsComponent.java:137)}}}}
{{ \{{ at org.apache.camel.support.service.BaseService.init(BaseService.java:83)}}}}
{{ \{{ at org.apache.camel.support.service.BaseService.start(BaseService.java:111)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3056)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:537)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:500)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:831)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:769)}}}}
{{ \{{ at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:72)}}}}
{{ \{{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:114)}}}}
{{ \{{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:92)}}}}
{{ \{{ at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:289)}}}}
{{ \{{ at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:157)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)}}}}
{{ \{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)}}}}
{{ \{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask$$Lambda$742.2026232778.done}}}}
{{ \{{ at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:88)}}}}
{{ \{{ at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)}}}}
{{ \{{ at java.util.concurrent.FutureTask.run(FutureTask.java:266)}}}}
{{ \{{ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)}}}}
{{ \{{ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)}}}}
{{ \{{ at java.lang.Thread.run(Thread.java:748)}}}}{{{{""Camel (camel-1) thread #8 - my-thread-2""}}}}
{{ \{{ at org.apache.camel.component.metrics.MetricsComponent.createEndpoint(MetricsComponent.java:60)}}}}
{{ \{{ at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:233)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:842)}}}}
{{ \{{ at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:769)}}}}
{{ \{{ at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:72)}}}}
{{ \{{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:114)}}}}
{{ \{{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:92)}}}}
{{ \{{ at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:289)}}}}
{{ \{{ at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:157)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)}}}}
{{ \{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)}}}}
{{ \{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398)}}}}
{{ \{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask$$Lambda$742.2026232778.done}}}}
{{ \{{ at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:88)}}}}
{{ \{{ at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)}}}}
{{ \{{ at java.util.concurrent.FutureTask.run(FutureTask.java:266)}}}}
{{ \{{ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)}}}}
{{ \{{ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)}}}}
{{ \{{ at java.lang.Thread.run(Thread.java:748)}}}}

 

As you can see, thread #8 tries to create an endpoint from the metrics component while thread #7 is still initializing it. This causes endpoinds to be created from uninitialized components.

 

Both threads are working on the same node in the same route, which is defined using the DSL:

{{.toD(""metrics:counter:request.${headers.product}-xcount?increment=1"")}}",,atreffer,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 15 08:54:00 UTC 2020,,,,,,,,,,,"0|z0dlp4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Apr/20 08:54;davsclaus;Ah yeah we can initialize the component as part of toD initialization. ;;;",,,,,,,,,,,,,,,,,,,
Camel-Osgi-Activator: tests are failing,CAMEL-14877,13297294,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,acosentino,acosentino,09/Apr/20 07:56,10/Apr/20 07:54,13/Jul/23 08:33,10/Apr/20 07:54,,,,3.3.0,,,,,karaf,,,,0,,,,,"{code:java}
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
[ERROR] Tests run: 9, Failures: 3, Errors: 6, Skipped: 0, Time elapsed: 18.538 s <<< FAILURE! - in org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.05 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.004 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.007 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.053 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.007 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.011 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.072 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.006 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.01 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded
[ERROR]   Run 1: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[ERROR]   Run 2: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[ERROR]   Run 3: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[INFO] 
[ERROR] Errors: 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved
[ERROR]   Run 1: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[ERROR]   Run 2: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[ERROR]   Run 3: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[INFO] 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved
[ERROR]   Run 1: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[ERROR]   Run 2: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[ERROR]   Run 3: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[INFO] 
[INFO] 
[ERROR] Tests run: 3, Failures: 1, Errors: 2, Skipped: 0

{code}",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-09 07:56:35.0,,,,,,,,,,,"0|z0dg3c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-test - Disabling JMX is not working,CAMEL-14870,13297103,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Apr/20 15:02,08/Apr/20 19:49,13/Jul/23 08:33,08/Apr/20 19:49,3.2.0,,,3.3.0,,,,,camel-test,,,,0,,,,,"If you do

    @Override
    protected boolean useJmx() {
        return false;
    }

Then JMX is in use anyway",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-08 15:02:14.0,,,,,,,,,,,"0|z0deww:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-telegram - missing the direct dependency of com.fasterxml.jackson.core:jackson-core,CAMEL-14865,13296857,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,zhfeng,zhfeng,zhfeng,07/Apr/20 15:32,08/Apr/20 08:26,13/Jul/23 08:33,08/Apr/20 08:26,2.25.0,3.2.0,,2.25.1,3.3.0,,,,camel-telegram,,,,0,,,,,"The camel-telegram should have the dependency of ""com.fasterxml.jackson.core:jackson-core"" directly since it uses the JsonParser in [UnixTimestampDeserializer.java|https://github.com/apache/camel/blob/master/components/camel-telegram/src/main/java/org/apache/camel/component/telegram/model/UnixTimestampDeserializer.java#L22]

 ",,zhfeng,,,,,,"zhfeng commented on pull request #3717: CAMEL-14865: camel-telegram - Add the jackson-core dependency
URL: https://github.com/apache/camel/pull/3717
 
 
   https://issues.apache.org/jira/browse/CAMEL-14865
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 17:20;githubbot;600","zhfeng commented on pull request #3718: CAMEL-14865: camel-telegram - Add the jackson-core dependency
URL: https://github.com/apache/camel/pull/3718
 
 
   https://issues.apache.org/jira/browse/CAMEL-14865
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 17:20;githubbot;600","davsclaus commented on pull request #3718: CAMEL-14865: camel-telegram - Add the jackson-core dependency
URL: https://github.com/apache/camel/pull/3718
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 04:23;githubbot;600","zhfeng commented on pull request #3717: CAMEL-14865: camel-telegram - Add the jackson-core dependency for 2.x
URL: https://github.com/apache/camel/pull/3717
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 08:04;githubbot;600","zhfeng commented on pull request #3720: CAMEL-14865: camel-telegram - Add the jackson-core dependency
URL: https://github.com/apache/camel/pull/3720
 
 
   https://issues.apache.org/jira/browse/CAMEL-14865
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 08:18;githubbot;600","davsclaus commented on pull request #3720: CAMEL-14865: camel-telegram - Add the jackson-core dependency for 2.25.x
URL: https://github.com/apache/camel/pull/3720
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 08:25;githubbot;600",,0,3600,,,0,3600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-07 15:32:59.0,,,,,,,,,,,"0|z0dde8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE happens in google pubsub component,CAMEL-14861,13296819,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,taraktikos,taraktikos,07/Apr/20 13:01,08/Apr/20 04:26,13/Jul/23 08:33,08/Apr/20 04:26,3.1.0,3.2.0,,3.3.0,,,,,camel-google-pubsub,,,,0,pull-request-available,,,,"During initializing GooglePubsubConsumer subscribers is always null. This lead to silent NPE in 

asynchronousPull method  on line  subscribers.add(subscriber);",,taraktikos,,,,,,"davsclaus commented on pull request #3716: [CAMEL-14861] fixed bug in GooglePubsubConsumer by initialized subscribers
URL: https://github.com/apache/camel/pull/3716
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;08/Apr/20 04:24;githubbot;600",,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-07 13:01:42.0,,,,,,,,,,,"0|z0dd5k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoint DSL does create endpoints with different uri causing problems,CAMEL-14859,13296734,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,graben,graben,07/Apr/20 05:29,07/Apr/20 07:44,13/Jul/23 08:33,07/Apr/20 07:44,3.2.0,,,3.3.0,,,,,camel-endpointdsl,,,,0,,,,,"Camel normally creates endpoints with uris containing ""//"" after normalizing. Endpoint DSL is actually missing such behavior causing several following problems like JmsConsumer thread naming or wrong injected endpoints.",,davsclaus,graben,,,,,"graben commented on pull request #3715: CAMEL-14859: Fix input uri for NormalizedUri
URL: https://github.com/apache/camel/pull/3715
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 07:34;githubbot;600","davsclaus commented on pull request #3715: CAMEL-14859: Fix input uri for NormalizedUri
URL: https://github.com/apache/camel/pull/3715
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Apr/20 07:43;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,CAMEL-14852,,,,,"07/Apr/20 05:29;graben;TestClass.java;https://issues.apache.org/jira/secure/attachment/12999196/TestClass.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 07:44:04 UTC 2020,,,,,,,,,,,"0|z0dcmo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Apr/20 07:44;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,
Camel Irc components Fails to rejoin the channels,CAMEL-14854,13296633,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,tmahajan,tmahajan,06/Apr/20 19:05,19/Jun/20 12:51,13/Jul/23 08:33,19/Jun/20 12:51,3.0.0,,,3.5.0,,,,,camel-irc,,,,0,help-wanted,,,,"Camel IRC fails to rejoin the channel. We have a module where we are sending updates via camel irc and it stores the producers and connection in cache, but if due to some reason connection get reset or irc server get restarted then all the messages starts to fail as we are not retrying on making new connection.

 

Here is the piece of code where we are checking if connection.isactive or not. If not we should try to establish a connection, due to this all messages are going to dlq.

IrcProducer.java

if (!connection.isConnected()) {
 throw new RuntimeCamelException(""Lost connection to "" + connection.getHost());
}

 ",,acosentino,davsclaus,tmahajan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 07:22:07 UTC 2020,,,,,,,,,,,"0|z0dc0g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Apr/20 19:08;acosentino;Please report the camel version.;;;","06/Apr/20 19:09;acosentino;I don't think this is critical.;;;","07/Apr/20 07:15;davsclaus;Help is wanted to look into the code and see if we that code can be improved to re-connect if not connected.;;;","07/Apr/20 07:22;tmahajan;[~acosentino] The camel version is 3.0.0. ;;;",,,,,,,,,,,,,,,,
camel-jacksonxml classpath conflict,CAMEL-14853,13296566,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,MaartenTutak,MaartenTutak,06/Apr/20 16:54,07/Apr/20 07:20,13/Jul/23 08:33,07/Apr/20 07:20,3.1.0,,,3.3.0,,,,,camel-jacksonxml,,,,0,,,,,"Hi. I'm using Spring Boot (2.2.4.RELEASE) with Camel (3.1.0) and I've come across the following error. I should note that i'm having a hard time reproducing this issue.
{noformat}
***************************
APPLICATION FAILED TO START
***************************

Description:

An attempt was made to call a method that does not exist. The attempt was made from the following location:

    com.ctc.wstx.evt.CompactStartElement.getAttributes(CompactStartElement.java:94)

The following method did not exist:

    'org.codehaus.stax2.ri.EmptyIterator org.codehaus.stax2.ri.EmptyIterator.getInstance()'

The method's class, org.codehaus.stax2.ri.EmptyIterator, is available from the following locations:

    jar:file:/app/libs/stax2-api-4.2.jar!/org/codehaus/stax2/ri/EmptyIterator.class

It was loaded from the following location:

    file:/app/libs/stax2-api-4.2.jar


Action:

Correct the classpath of your application so that it contains a single, compatible version of org.codehaus.stax2.ri.EmptyIterator
{noformat}
I was wondering if this is related to the fact that [camel-jacksonxml|https://github.com/apache/camel/blob/camel-3.1.0/components/camel-jacksonxml/pom.xml] introduces both _*org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1*_ and _*com.fasterxml.woodstox:woodstox-core:jar:6.0.3*_ on the classpath , as seen below.
{noformat}
INFO] +- org.apache.camel.springboot:camel-jacksonxml-starter:jar:3.1.0:compile
[INFO] |  \- org.apache.camel:camel-jacksonxml:jar:3.1.0:compile
[INFO] |     +- org.apache.camel:camel-support:jar:3.1.0:compile
[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.10.2:compile
[INFO] |     |  +- org.codehaus.woodstox:stax2-api:jar:4.2:compile
[INFO] |     |  \- com.fasterxml.woodstox:woodstox-core:jar:6.0.3:compile
[INFO] |     +- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.10.2:compile
[INFO] |     \- org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1:compile
{noformat}
It's unclear to me why camel-jacksonxml has a dependency on woodstox-core-asl while woodstox-core is already available, albeit transitively.",,acosentino,MaartenTutak,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 07:19:32 UTC 2020,,,,,,,,,,,"0|z0dbug:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Apr/20 06:39;acosentino;This is the starter with 3.3.0-SNAPSHOT
{code:java}
[INFO] org.apache.camel.springboot:camel-jacksonxml-starter:jar:3.3.0-SNAPSHOT
.
.
.
[INFO] +- org.apache.camel:camel-jacksonxml:jar:3.3.0-SNAPSHOT:compile
[INFO] |  +- org.apache.camel:camel-support:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-api:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-management-api:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-util:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.30:compile
[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.10.3:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.10.3:compile
[INFO] |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.10.3:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.10.3:compile
[INFO] |  |  +- org.codehaus.woodstox:stax2-api:jar:4.2:compile
[INFO] |  |  \- com.fasterxml.woodstox:woodstox-core:jar:6.1.1:compile
[INFO] |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.10.3:compile
[INFO] |     \- jakarta.activation:jakarta.activation-api:jar:1.2.2:compile
{code}
and there is no woodstox-core-asl. Can you please try with 3.2.0?;;;","07/Apr/20 07:19;MaartenTutak;It's still present in [3.2.0|https://github.com/apache/camel/blob/camel-3.2.0/components/camel-jacksonxml/pom.xml]. However, this seems to have been fixed 3 days ago in commit [be8f41135252fdf3eb7a3d51831f108c43c3bc3f|https://github.com/apache/camel/commit/be8f41135252fdf3eb7a3d51831f108c43c3bc3f] by [~davsclaus].
I'll mark this as fixed in 3.3.0.;;;",,,,,,,,,,,,,,,,,,
Endpoint DSL does not support resolvePropertyPlaceholder anymore,CAMEL-14852,13296561,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,graben,graben,06/Apr/20 16:24,07/Apr/20 11:19,13/Jul/23 08:33,07/Apr/20 09:01,3.2.0,,,3.3.0,,,,,camel-endpointdsl,,,,0,,,,,Introduction of {{NormalizedUri}} feature make property resolving not working anymore.,,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14859,,,,,,,"06/Apr/20 16:25;graben;TestClass.java;https://issues.apache.org/jira/secure/attachment/12999074/TestClass.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 07 11:19:39 UTC 2020,,,,,,,,,,,"0|z0dbtc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Apr/20 16:29;graben;Test case does work with Camel 3.1 logging under category {{foo}}. Logging under {{{{test}}}} with 3.2.


{noformat}
2020-04-06T18:22:04,040 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:04,056 INFO  [main            ] CamelTestSupport                 - Testing: test(TestClass)
2020-04-06T18:22:04,056 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:04,477 INFO  [main            ] DefaultManagementStrategy        - JMX is enabled
2020-04-06T18:22:04,712 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is starting
2020-04-06T18:22:04,962 INFO  [main            ] AbstractCamelContext             - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Route: route1 started and consuming from: direct:test
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Total 1 routes, of which 1 are started
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) started in 0.344 seconds
2020-04-06T18:22:05,087 INFO  [main            ] {{test}}                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: test]
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - Testing done: test(de.graf.camel.metadata.TestClass)
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - Took: 0.046 seconds (46 millis)
2020-04-06T18:22:05,118 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:05,118 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is shutting down
2020-04-06T18:22:05,118 INFO  [main            ] DefaultShutdownStrategy          - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2020-04-06T18:22:05,134 INFO  [0 - ShutdownTask] DefaultShutdownStrategy          - Route: route1 shutdown complete, was consuming from: direct:test
2020-04-06T18:22:05,149 INFO  [main            ] DefaultShutdownStrategy          - Graceful shutdown of 1 routes completed in 0 seconds
2020-04-06T18:22:05,165 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) uptime 0.453 seconds
2020-04-06T18:22:05,181 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is shutdown in 0.063 seconds
{noformat}

;;;","07/Apr/20 07:44;davsclaus;I assume your PR also fixed this problem?;;;","07/Apr/20 08:22;graben;No, the problem is that NormalizedUri does set normalize boolean flag to true in [AbstractCamelContext.java#L893|https://github.com/apache/camel/blob/950268a43f12a13a9b5a2005ac9056cf402304b5/core/camel-base/src/main/java/org/apache/camel/impl/engine/AbstractCamelContext.java#L893]. This causes a ""wrong"" interpretation in if statement at [AbstractCamelContext.java#L906|https://github.com/apache/camel/blob/950268a43f12a13a9b5a2005ac9056cf402304b5/core/camel-base/src/main/java/org/apache/camel/impl/engine/AbstractCamelContext.java#L906];;;","07/Apr/20 08:56;davsclaus;Okay have a fix in the works;;;","07/Apr/20 09:11;graben;Perfect. My first idea was to solve it in AbstractEndpointBuilder, too like I did for [CAMEL-14859].;;;","07/Apr/20 11:06;graben;@[~davsclaus]: Patch looks nice. The test class might miss an *i* in its name. :);;;","07/Apr/20 11:19;davsclaus;Thanks renamed the class;;;",,,,,,,,,,,,,
"no main manifest attribute, in camel-jasypt-3.0.1.jar",CAMEL-14842,13296091,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,vjaiswal,vjaiswal,03/Apr/20 18:10,04/Apr/20 08:08,13/Jul/23 08:33,04/Apr/20 08:07,3.0.1,,,3.3.0,,,,,camel-jasypt,,,,0,,,,,"While running  java -jar get the error:

no main manifest attribute, in camel-jasypt-3.0.1.jar",Windows 10,vjaiswal,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-03 18:10:13.0,,,,,,,,,,,"0|z0d9g8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wrong weld version in camel-spring-boot used in examples, forbidding to launch 2 examples",CAMEL-14840,13296032,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,apupier,apupier,03/Apr/20 13:53,03/Apr/20 14:18,13/Jul/23 08:33,03/Apr/20 14:18,3.1.0,,,3.3.0,,,,,camel-spring-boot,,,,0,,,,,"3.0.5.RELEASE is used but it doesn't seem to exist.

What is used in main Camel repo is 3.0.5.Final https://github.com/apache/camel/blob/557b53cd3fa3b1961fa055b3b670e11eca6408cb/parent/pom.xml#L539

the version is part of camel-maven-plugin so it is not executed during a normal build. The examples need to be effectively launched to notice it. (so I guess they are not in normal build neither in QE side).",,apupier,davsclaus,,,,,"apupier commented on pull request #40: CAMEL-14840 - fix weld3 version
URL: https://github.com/apache/camel-spring-boot/pull/40
 
 
   Signed-off-by: Aurélien Pupier <apupier@redhat.com>
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Apr/20 14:08;githubbot;600","davsclaus commented on pull request #40: CAMEL-14840 - fix weld3 version
URL: https://github.com/apache/camel-spring-boot/pull/40
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;03/Apr/20 14:17;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 03 14:18:04 UTC 2020,,,,,,,,,,,"0|z0d934:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Apr/20 14:00;davsclaus;Hmm why is weld part of SB examples they are opposite. Where are those examplles?;;;","03/Apr/20 14:01;apupier;erro when executing zipkin exampel for instance:

{noformat}
Failed to execute goal org.apache.camel:camel-maven-plugin:3.1.0:run (default-cli) on project camel-example-spring-boot-zipkin-client: Execution default-cli of goal org.apache.camel:camel-maven-plugin:3.1.0:run failed: Plugin org.apache.camel:camel-maven-plugin:3.1.0 or one of its dependencies could not be resolved: Could not find artifact org.jboss.weld.se:weld-se-shaded:jar:3.0.5.RELEASE in central (https://repo.maven.apache.org/maven2) -> [Help 1]
{noformat};;;","03/Apr/20 14:03;apupier;examples can be found using this search https://github.com/apache/camel-spring-boot/search?q=weld3&unscoped_q=weld3;;;","03/Apr/20 14:18;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,
maven camel:run fails about OSGi blueprint for standalone mode,CAMEL-14838,13296011,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Apr/20 11:08,05/May/20 15:29,13/Jul/23 08:33,03/Apr/20 14:12,3.2.0,,,3.3.0,,,,,tooling,,,,0,,,,,"The camel-example-main-tiny

❯ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ----------< org.apache.camel.example:camel-example-main-tiny >----------
[INFO] Building Camel :: Example :: Main :: Tiny 3.2.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- camel-maven-plugin:3.2.0-SNAPSHOT:run (default-cli) @ camel-example-main-tiny ---
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true
[INFO] Using custom org.apache.camel.example.MyApplication to initiate a CamelContext
[INFO] Classpath:
[INFO]   /Users/davsclaus/workspace/camel-examples/examples/camel-example-main-tiny/target/classes/
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-main/3.2.0-SNAPSHOT/camel-main-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-api/3.2.0-SNAPSHOT/camel-api-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-base/3.2.0-SNAPSHOT/camel-base-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-core-engine/3.2.0-SNAPSHOT/camel-core-engine-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-management-api/3.2.0-SNAPSHOT/camel-management-api-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-support/3.2.0-SNAPSHOT/camel-support-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-util/3.2.0-SNAPSHOT/camel-util-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-core-languages/3.2.0-SNAPSHOT/camel-core-languages-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-bean/3.2.0-SNAPSHOT/camel-bean-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-timer/3.2.0-SNAPSHOT/camel-timer-3.2.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar
[INFO]   /Users/davsclaus/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar
[INFO]   /Users/davsclaus/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.032 s
[INFO] Finished at: 2020-04-03T13:07:41+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:3.2.0-SNAPSHOT:run (default-cli) on project camel-example-main-tiny: Cannot run OSGi Blueprint Main because camel-blueprint-main JAR is not available on classpath -> [Help 1]",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,CAMEL-15014,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-04-03 11:08:48.0,,,,,,,,,,,"0|z0d8yg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bugfix for Bindy-Component,CAMEL-14825,13295519,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,greulich,greulich,01/Apr/20 11:48,02/Apr/20 08:41,13/Jul/23 08:33,01/Apr/20 14:54,3.1.0,,,3.2.0,,,,,camel-bindy,,,,0,pull-request-available,,,,"Hi, 

unfortunately there is a bug in the code I donated for the Unicode support for the bindy component for fixed length files, which is not so obvious: The indexOf(..) method of Unicode Helper is returning the wrong index if the char searched for s also available as char with combining char. Sorry for that...

Additionally I turned the the default value for countGrapheme in the FixedLengthRecord annoation, since it is more likely, that the way chars are counted is compatible to XMLSchema.

See also: https://issues.apache.org/jira/browse/CAMEL-14521

Pull request: [https://github.com/apache/camel/pull/3702]

Michael","JDK: openjdk-8-jdk Version 8u242-b08-0ubuntu3~18.04 on Ubuntu 18.04 amd64

The ICU4J library was used for processing Unicode correctly: See dependencies in POM",davsclaus,greulich,,,,,,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 02 08:41:18 UTC 2020,,,,,,,,,,,"0|z0d5x4:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"01/Apr/20 13:19;greulich;There are failed PR builds [https://github.com/apache/camel/runs/551773301], despite ""mvn clean install -Psourcecheck"" runs without error. The messages it gives are the same the master branch gives. So nothting to do for me, right?;;;","01/Apr/20 14:54;davsclaus;Thanks for the PR;;;","02/Apr/20 08:23;greulich;Wow, that is fast...

Will it be backported to 3.1. since it is a relevant bugfix for it?;;;","02/Apr/20 08:41;davsclaus;No we dont do backports on non LTS releases.
https://camel.apache.org/blog/LTS-Release-Schedule/;;;",,,,,,,,,,,,,,,,
Support to disable the stream caching in camel-servlet from the camel context - once more,CAMEL-14823,13295494,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vojtechfried,vojtechfried,01/Apr/20 10:20,26/Sep/21 15:31,13/Jul/23 08:33,24/Sep/21 20:39,2.25.0,3.1.0,,3.11.3,3.12.0,3.7.6,,,camel-servlet,,,,0,,,,,"Current camel-servlet doesn't support to disable the stream caching from the camel context, it just check the exchange property for it. The cloned CAMEL-8821 Jira tried to fix it, but the fix does not work. As the last comment there says, readRequestBodyFromServletRequest calls a wrong method (""readResponse..."" instead of ""readRequest..."", only the latter contains the fix). Either those two methods could be merged into one (with the body of ""readRequest..."") or readRequestBodyFromServletRequest  should call ""readRequest..."".",,davsclaus,vojtechfried,,,,,,,,,,,,,,,,,,,,,CAMEL-8821,,,,,CAMEL-17004,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 24 20:40:20 UTC 2021,,,,,,,,,,,"0|z0d5rk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Apr/20 10:36;davsclaus;Reported on user forum
https://camel.465427.n5.nabble.com/stream-caching-not-configurable-for-rest-consumer-tp5862335.html;;;","24/Sep/21 20:40;davsclaus;This caused a stream closed exception when using camel-serlvet for some users, so lets backport this;;;",,,,,,,,,,,,,,,,,,
Incorrect phase for camel-package-maven-plugin in upgrade guide,CAMEL-14818,13295258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jimothy,jimothy,31/Mar/20 13:14,19/Jun/20 12:29,13/Jul/23 08:33,19/Jun/20 12:29,3.1.0,,,3.4.0,,,,,documentation,,,,0,,,,,"[https://camel.apache.org/manual/latest/camel-3x-upgrade-guide.html]

As documented, the generated sources for type converter loaders will be created *after* compiling. This means that the type converter loaders will not be available to unit tests, etc. 

This will go unnoticed if you (or your IDE) previously compiled the source code, thus run the generator. But in a CI environment, the problem is obvious, particularly if you have unit tests that use type converters.

You can also test with `rm -rf src/generated; mvn install`.

The solution is to change the phase from `process-classes` to `pre-compile`. ",,davsclaus,jimothy,,,,,"jimothyGator commented on pull request #3697: [CAMEL-14818] fixes documentation for Camel Package Maven plugin
URL: https://github.com/apache/camel/pull/3697
 
 
   sources for type converter loaders were generated too late in the Maven
   build cycle. The result is that the source would be generated after the
   compile, test compile, and test phases, so they would not be available
   to unit tests.
   
   The fix is to run the maven plugin in the `pre-compile` phase rather
   than `process-classes`.
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;31/Mar/20 13:16;githubbot;600",,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 19 12:29:34 UTC 2020,,,,,,,,,,,"0|z0d4bc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jun/20 12:29;davsclaus;There is a camel-component-package-plugin in Camel 3.4 you can use, and dont have to setup a phase;;;",,,,,,,,,,,,,,,,,,,
Property camel.springboot.java-routes-exclude-pattern not working correctly,CAMEL-14806,13294783,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mnardelli,mnardelli,28/Mar/20 21:38,04/Apr/20 18:07,13/Jul/23 08:33,04/Apr/20 18:07,3.1.0,,,3.3.0,,,,,camel-spring-boot,,,,0,,,,,"Hi,

I believe that the property camel.springboot.java-routes-exclude-pattern is not being applied correctly. Given two classes Route1 and Route2 (both annotated with spring boot's Component annotation) and the pattern ""***/Route2**"", I would expect to see only Route1 being picked up and started, but I see both routes being started when I run the application. It seems that only Route1 component can be excluded if the pattern matches that class. 

 

The reason for that seems to be in the class  org.apache.camel.spring.boot.SpringBootRoutesCollector. It receives the exclude pattern as a parameter in the method collectRoutesFromRegistry, but at some point replaces it with the value of the property CamelTestSpringExcludeRoutes. The original pattern can only be matched against the first component route registered in spring boot Application Context.

 

I have attached a sample application showing the situation. If I am misunderstanding something, please let me know.

 

Thanks!",,davsclaus,mnardelli,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Mar/20 21:37;mnardelli;demo.zip;https://issues.apache.org/jira/secure/attachment/12998121/demo.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 04 18:07:58 UTC 2020,,,,,,,,,,,"0|z0d1e8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Apr/20 18:07;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,
Quick Look Up- The search results do not appear properly,CAMEL-14797,13294153,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,psingh1999587,psingh1999587,26/Mar/20 09:34,01/Apr/20 09:00,13/Jul/23 08:33,01/Apr/20 09:00,,,,,,,,,website,,,,0,,,,,"The search results of 'Quick Look up' in documentation section does not yield search results properly.

Here an extra arrow appears and also when we click that, it looks messed up. 

When we click the arrow near the search result which appeared, the whole search result disappears and then does not even appear if we write it again in the Quick Look up search bar.
!image-2020-03-26-15-00-38-202.png|width=1130,height=636!",,psingh1999587,zregvart,,,,,"psingh587 commented on pull request #286: CAMEL-14797: Fixes The Quick Look Up issue
URL: https://github.com/apache/camel-website/pull/286
 
 
   -This PR, I have tried to solve the issue related to Quick Look Up Search Result appearance. An extra arrow used to appear. 
   In this I have removed the appearance of arrows when anything is typed in the search box which eradicates the issue of the messy toggle. And the arrows restore to its original place once the text in the search box is NIL. 
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Mar/20 08:03;githubbot;600","zregvart commented on pull request #286: CAMEL-14797: Fixes The Quick Look Up issue
URL: https://github.com/apache/camel-website/pull/286
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;01/Apr/20 09:00;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,"26/Mar/20 09:30;psingh1999587;image-2020-03-26-15-00-38-202.png;https://issues.apache.org/jira/secure/attachment/12997869/image-2020-03-26-15-00-38-202.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 01 09:00:39 UTC 2020,,,,,,,,,,,"0|z0cxi8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Mar/20 10:22;zregvart;Yeah when did not have modules within the ""components"" Antora component and now we do, so there's extra markup that the [quick search JavaScript|https://github.com/apache/camel-website/blob/master/antora-ui-camel/src/js/05-nav-search.js] doesn't toggle.;;;","29/Mar/20 08:04;psingh1999587;[~zregvart] 
 Created the PR #286 for this;;;","01/Apr/20 09:00;zregvart;Thanks to [~psingh1999587] for the pull request.;;;",,,,,,,,,,,,,,,,,
ClassNotFoundException for onException(Class) in Java DSL in OSGi,CAMEL-14792,13293875,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,25/Mar/20 17:02,26/Mar/20 07:13,13/Jul/23 08:33,26/Mar/20 07:13,,,,2.25.1,,,,,,,,,0,,,,,"With CAMEL-13468, {{OnExceptionDefinition.java}} lost {{exceptionClasses}} field and actual exception classes where converted in Java DSL into String objects - resolved later when exception processor was created.

This could (and actually did) cause problems in OSGi, when route was defined from different bundle (which had correct {{Import-Package}} headers generated by maven-bundle-plugin) than the bundle with actual route.

I have a fix that both keeps class names (for marshalling purpose) and actual classes (for OSGi).",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-13468,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 06:59:05 UTC 2020,,,,,,,,,,,"0|z0cwg0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Mar/20 06:08;ggrzybek;Because the initial reason I've created this issue is some exotic OSGi use case (helper methods to construct routes in one bundle, actual route constructed in another one), and because in Camel 3 exception names are used additionally in {{org.apache.camel.processor.errorhandler.ExceptionPolicy}} (names only, no classes), I'm fixing this problem only in 2.25.x.;;;","26/Mar/20 06:59;ggrzybek;Fixed [here|https://github.com/apache/camel/commit/70e2ca3913226b4c532d80dbd2577d7d440439de] in camel-2.25.x branch.;;;",,,,,,,,,,,,,,,,,,
camel-rabbitmq - Automatic recovery of temporary reply queue is not handled correctly,CAMEL-14789,13293806,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,rszczesiak,rszczesiak,25/Mar/20 12:47,26/Mar/20 14:03,13/Jul/23 08:33,26/Mar/20 14:03,2.25.0,,,2.25.1,3.1.1,3.2.0,,,camel-rabbitmq,,,,0,,,,,"When Remote Procedure Call (RPC) communication pattern is used RabbitMQ Camel component creates server-named auto-deleted temporary reply queue. Next, the queue is bound to the exchange with routing key equal to queue name. Likewise, ReplyManager's replyTo field is set with the value of the queue name. Reply queue created in this manner is then reused for subsequent RPC requests and message property rabbitmq.REPLY_TO is copied from the value stored previously by ReplyManager.

When some network error suddenly appears causing connection failure, RabbitMQ's automatic recovery kicks in and tries to recover affected entities (assuming the connection was created with automatic recovery enabled, which is default.). As temporary quueues are auto-deleted, during recovery process a new temporary queue is created which has a new name that differs from the original one and here is where the problem begins.

Creation of the new temporary queue is NOT detected by ReplyManager and therefore replyTo property is NOT updated. Also, routing key no longer matches queue name. This causes a problem when some implementations of RabbitMQ client, like. Spring AMQP, are used server-site. RPC service receives our request, processes it, and replies to default exchange with routing key equal to rabbitmq.REPLY_TO sent in our request. RPC service provider perceives no problem as response is sent successfully but RabbitMQ Camel Component keeps awaiting for the response to arrive to the original temporary queue which no longer exists due to connection failure and recovery. Eventually, Camel throws ExchangeTimedOutException.

Example:
 # After automatic recovery, a RPC request is sent to example-exchange with rabitmq.REPLY_TO=amq.gen-0lLvpnj4ZMlkhxZIcCPVpA
 # After 20 seconds org.apache.camel.ExchangeTimedOutException is thrown:

{code:java}
The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-hostname-1583401848872-0-1690397 not received on destination: amq.gen-0lLvpnj4ZMlkhxZIcCPVpA. Exchange[ID-hostname-1583401848872-0-1690391]{code}
 # Using RabbitMQ Management WebApp (rabbitmqctl) we check example-exchange's bindings and see that routing key amq.gen-0lLvpnj4ZMlkhxZIcCPVpA now corresponds to queue amq.gen-zaRCP-p-JbXeSzJmzSp83g

*Proposed solution* is to add QueueRecoveryListener to notify when temporary queue name changes due to recovery. On event, replyTo field will be updated with the new temporary queue name and the queue will be rebound to the exchange so that routing key matches queue name again. The change will be made to org.apache.camel.component.rabbitmq.reply#createListenerContainer.

Attached patch also contains integration test.","* RabbitMQ server 3.8.3
 * Erlang 22.3",acosentino,rszczesiak,,,,,"rszczesiak commented on pull request #3684: CAMEL-14789 FIX: camel-rabbitmq - Automatic recovery of temporary reply queue
URL: https://github.com/apache/camel/pull/3684
 
 
   - Add QueueRecoveryListener to update replyTo and rebind the new temporary queue
   - Add integration test using RabbitMQ Management HTTP API
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 11:10;githubbot;600","oscerd commented on pull request #3684: CAMEL-14789 FIX: camel-rabbitmq - Automatic recovery of temporary reply queue
URL: https://github.com/apache/camel/pull/3684
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 13:37;githubbot;600","rszczesiak commented on pull request #3685: CAMEL-14789: camel-rabbitmq - Automatic recovery of temporary reply queue
URL: https://github.com/apache/camel/pull/3685
 
 
   - Add QueueRecoveryListener to update replyTo and rebind the new temporary queue
   - Add integration test using RabbitMQ Management HTTP API
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 13:42;githubbot;600","oscerd commented on pull request #3685: CAMEL-14789: camel-rabbitmq - Automatic recovery of temporary reply queue
URL: https://github.com/apache/camel/pull/3685
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 14:03;githubbot;600",,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,"25/Mar/20 12:59;rszczesiak;0001-CAMEL-14789-FIX-Automatic-recovery-of-temporary-repl.patch;https://issues.apache.org/jira/secure/attachment/12997671/0001-CAMEL-14789-FIX-Automatic-recovery-of-temporary-repl.patch",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 11:32:35 UTC 2020,,,,,,,Patch Available,,,,"0|z0cw0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Mar/20 14:07;acosentino;Can you please create a PR on Github? It's usually easier to review, also you should do this against master and then we can backport on older branches.;;;","26/Mar/20 11:24;rszczesiak;Thank you for your response. I made my changes to base upon master branch and created a Pull Request against it.

I hope you will find my contribution valuable.;;;","26/Mar/20 11:32;acosentino;Thanks for your time. I'll merge your fix.;;;",,,,,,,,,,,,,,,,,
Unable to Start Jetty server in OSGi environment,CAMEL-14788,13293792,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pedrocatalao,pedrocatalao,25/Mar/20 12:00,26/Mar/20 02:04,13/Jul/23 08:33,25/Mar/20 18:50,2.24.3,,,2.25.1,3.2.0,,,,camel-jetty,,,,0,,,,,"When deploying a spring XML via Karaf containing the Jetty component such as:
{code:java}
<route id=""9de65790-5809-11ea-aafe-874a8d3d85de"">
 <from uri=""jetty:http://0.0.0.0:9000/test""/>
 <to uri=""activemq:ID_5e5520ab59931d2df0000203_test_9de65790-5809-11ea-aafe-874a8d3d85de""/>
 </route>
 <route id=""88ecf240-57d2-11ea-be9a-2d059f74df24"">
 <from uri=""activemq:ID_5e5520ab59931d2df0000203_test_9de65790-5809-11ea-aafe-874a8d3d85de""/>
 <to uri=""foobar""/>
 </route>{code}
 

Got this exception:
{code:java}
java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/MultiPartFormDataCompliancejava.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/MultiPartFormDataCompliance at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.server.MultiPartFormDataCompliance not found by org.eclipse.jetty.server [251] {code}
  

While investigating found that Camel *{color:#172b4d}2.24.3{color}* uses Jetty *{color:#172b4d}9.4.12.v20180830{color}* which is affected by this issue: [https://github.com/eclipse/jetty.project/issues/4350]

 

This has been fixed in Jetty >= *{color:#172b4d}9.4.25{color}* by rolling back the explicit exclusion of {color:#ff0000}MultiPartInputStreamParser{color}

 ",,davsclaus,pedrocatalao,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 02:03:46 UTC 2020,,,,,,,,,,,"0|z0cvxs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Mar/20 18:28;davsclaus;When you run with Karaf then the Jetty server/version is provided by Karaf. So you should upgrade it there.;;;","25/Mar/20 18:41;davsclaus;Not sure how we can hack this in older releases. Jetty is really bad, 9.4.22 and 9.4.27 is incompatible. There is a change in some error handler throws exception that is not compilable :(

[ERROR] /Users/davsclaus/workspace/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[1233,28] error: handle(String,Request,HttpServletRequest,HttpServletResponse) in <anonymous org.apache.camel.component.jetty.JettyHttpComponent$1> cannot override handle(String,Request,HttpServletRequest,HttpServletResponse) in ErrorHandler
[ERROR]   overridden method does not throw ServletException

;;;","25/Mar/20 18:47;davsclaus;Add OSGi workaround for older versions of Jetty;;;","26/Mar/20 02:03;pedrocatalao;Hi [~cibsen@e-ma.net], thanks for looking into it. I'm not sure if I understand what you mean.

When I add Jetty directly to Karaf, I still get the exact same error :\
{code:java}
[INFO] Feature camel-jetty9/2.24.3 is defined as a boot feature
[INFO] adding maven artifact: mvn:org.eclipse.jetty/jetty-server/9.4.25.v20191220{code}
{code:java}
243 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Http Utility
245 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: IO Utility
254 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Server Core
258 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Utilities{code}
 

Shall I pinpoint {color:#0747a6}camel-jetty{color}'s version to a version prior to the issue or can you think of a better way to tackle this?

 

Thanks,

Pedro;;;",,,,,,,,,,,,,,,,
Camel-website: build is broken again,CAMEL-14782,13293641,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,acosentino,acosentino,24/Mar/20 21:17,26/Mar/20 21:42,13/Jul/23 08:33,26/Mar/20 21:42,,,,3.2.0,,,,,website,,,,0,,,,,"The build is broken. It seems on the 2.x side. I think this is related to the latest commit by David.

 

Can you have a look, [~david_jencks@yahoo.com]?",,acosentino,djencks,,,,,,,,,,,,,,,,0,4800,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 21:42:27 UTC 2020,,,,,,,,,,,"0|z0cv0g:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Mar/20 21:33;djencks;How do I find evidence of what is broken? 

 

How did you find my yahoo.com email :)?;;;","24/Mar/20 21:38;acosentino;[https://builds.apache.org/blue/organizations/jenkins/Camel.website/detail/PR-266/1/pipeline]

 

Your email is listed in jira.. I don't know why;;;","24/Mar/20 21:38;acosentino;And it'sassociated to your account;;;","24/Mar/20 21:58;djencks;I think I forgot to update the production playbook with the new source locations.  PR soon.;;;","24/Mar/20 23:02;djencks;Two of the 2.x broken links are because there are json files with no associated component.adoc files. They are

components/camel-reactor/target/classes/reactor.json

components/camel-cm-sms/target/classes/org/apache/camel/component/cm/cm-sms.json

or, in the catalog,

platforms/camel-catalog/target/classes/org/apache/camel/catalog/others/reactor.json

platforms/camel-catalog/target/classes/org/apache/camel/catalog/components/cm-sms.json

 

This suggests that running the master tooling on the 2.x branch may not be without problems.

I'm going to manually delete the corresponding index entries.;;;","26/Mar/20 21:42;djencks;All problems I know about are fixed.;;;",,,,,,,,,,,,,,
camel-undertow: UndertowSecurityProvider SPI API misses a method to change HttpHandler,CAMEL-14780,13293564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,24/Mar/20 14:07,25/Mar/20 18:27,13/Jul/23 08:33,25/Mar/20 18:27,3.2.0,,,3.2.0,,,,,camel-undertow,,,,0,,,,,"During refactor of camel-elytron to implement UndertowSecurityProvider I've noticed that API does not allow to change of the HttpHandler during endpoint registration. This ""hook"" for security provider is required for camel-elytron. 

(Change could be done without breaking back compatibility or compilation for existing implementations.)
",,jondruse,,,,,,"JiriOndrusek commented on pull request #3677: CAMEL-14780 camel-undertow: Enhance SPI API for HttpHandler change
URL: https://github.com/apache/camel/pull/3677
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-14780
   
   Change adds method co change httpHandler into SPI API.
   Extension of API is back compatible with previous version of API.
   Added JUnit test validating htppHandler 'hook' and test for usage of security parameters defined on component.
   
   [ ] Make sure there is a [JIRA issue](https://issues.apache.org/jira/browse/CAMEL) filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.
   [ ] Each commit in the pull request should have a meaningful subject line and body.
   [ ] If you're unsure, you can format the pull request title like `[CAMEL-XXX] Fixes bug in camel-file component`, where you replace `CAMEL-XXX` with the appropriate JIRA issue.
   [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.
   [ ] Run `mvn clean install -Psourcecheck` in your module with source check enabled to make sure basic checks pass and there are no checkstyle violations. A more thorough check will be performed on your pull request automatically.
   Below are the contribution guidelines:
   https://github.com/apache/camel/blob/master/CONTRIBUTING.md
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Mar/20 10:12;githubbot;600","davsclaus commented on pull request #3677: CAMEL-14780 camel-undertow: Enhance SPI API for HttpHandler change
URL: https://github.com/apache/camel/pull/3677
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;25/Mar/20 13:12;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-03-24 14:07:17.0,,,,,,,,,,,"0|z0cujc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Website: .htaccess redirects,CAMEL-14768,13293163,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,acosentino,acosentino,22/Mar/20 12:18,22/Mar/20 22:34,13/Jul/23 08:33,22/Mar/20 22:34,,,,3.2.0,,,,,,,,,0,,,,,"in the website we have an htaccess file for redirecting from the old website, we moved a bunch of stuff in the last days, David, can you please double check the links are correct? The EIP ones are wrong for sure.",,acosentino,djencks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 22 22:34:23 UTC 2020,,,,,,,,,,,"0|z0cs1s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/20 22:34;djencks;Resolved with PR https://github.com/apache/camel-website/pull/259;;;",,,,,,,,,,,,,,,,,,,
Camel-website: Build is broken,CAMEL-14767,13293162,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,acosentino,acosentino,22/Mar/20 12:03,23/Mar/20 11:24,13/Jul/23 08:33,23/Mar/20 11:24,,,,3.2.0,,,,,,,,,0,,,,,"*11:04:10*  $ link-checker --disable-external --mkdocs --allow-hash-href public*11:05:07*  page not found from components/latest/eips/enterprise-integration-patterns.html to components/latest/eips/_attachments/Hohpe_EIP_camel_20150622.zip*11:05:07*  page not found from components/latest/eips/enterprise-integration-patterns.html to components/latest/eips/_attachments/Hohpe_EIP_camel_OpenOffice.zip*11:05:07*  page not found from community/articles/index.html to manual/latest/enterprise-integration-patterns.html
 

David, can you please have a look, this looks to be related to your last commits",,acosentino,djencks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 22 17:31:21 UTC 2020,,,,,,,,,,,"0|z0cs1k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/20 12:05;acosentino;[https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel.website/job/master/708/console];;;","22/Mar/20 14:40;acosentino;I fixed this.;;;","22/Mar/20 15:29;djencks;Since the attachments actually exist, wouldn't it be better to move them and have correct links?;;;","22/Mar/20 15:32;acosentino;I don't it's critical. If you have time to reintroduce those links, you're welcome to do it;;;","22/Mar/20 17:31;djencks;Lets move the attachments to fix the links.;;;",,,,,,,,,,,,,,,
header menus missing from antora site,CAMEL-14764,13293123,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,djencks,djencks,djencks,21/Mar/20 20:40,22/Mar/20 22:35,13/Jul/23 08:33,22/Mar/20 22:35,3.1.0,,,3.2.0,,,,,website,,,,0,,,,,"menu.js registered on the Antora command line seems to have stopped working at some point.

It's pretty easy to make this functionality into a helper in the ui bundle, and it can be simplified quite a bit.",,djencks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 22 22:35:31 UTC 2020,,,,,,,,,,,"0|z0crsw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Mar/20 23:58;djencks;Merged PR after approval.;;;","22/Mar/20 17:33;djencks;Everything I tried yesterday worked but today running Antora directly from the command line misses toml.;;;","22/Mar/20 22:35;djencks;My difficulty seems to be a yarn vs npm issue, not a problem with camel.;;;",,,,,,,,,,,,,,,,,
JPAMessageIdRepository Not Releasing Connections for contains() method,CAMEL-14761,13293091,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mzabielski,mzabielski,21/Mar/20 11:40,21/Mar/20 12:34,13/Jul/23 08:33,21/Mar/20 12:34,3.1.0,,,3.2.0,,,,,camel-jpa,,,,0,,,,,"When using the JpaMessageIdRepository for an idempotent repo (or inProgressRepo) for file processing it holds onto connections on contains() method.  Other methods add(), remove(), etc. were fixed in CAMEL-11630.

 

Proposed fix: adjust contains() method in the same manner as other methods",,mzabielski,,,,,,"kosciej commented on pull request #3662: CAMEL-14761 JPAMessageIdRepository.contains() release db connection fix
URL: https://github.com/apache/camel/pull/3662
 
 
   Fix for: [CAMEL-14761](https://issues.apache.org/jira/browse/CAMEL-14761)
   
   Issue: When using the JpaMessageIdRepository for an idempotent repo (or inProgressRepo) for file processing it holds onto connections on contains() method.  Other methods add(), remove(), etc. were fixed in CAMEL-11630.
   
   PR: code fixed in the same way as it was fixed for methods add(), remove(), etc. in: [CAMEL-11630](https://issues.apache.org/jira/browse/CAMEL-11630), [PR](https://github.com/apache/camel/pull/1883)
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/20 12:00;githubbot;600","davsclaus commented on pull request #3662: CAMEL-14761 JPAMessageIdRepository.contains() release db connection fix
URL: https://github.com/apache/camel/pull/3662
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;21/Mar/20 12:34;githubbot;600",,,,,,0,1200,,,0,1200,,,,CAMEL-11630,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 21 12:01:05 UTC 2020,,,,,,,,,,,"0|z0crls:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Mar/20 12:01;mzabielski;PR: [https://github.com/apache/camel/pull/3662];;;",,,,,,,,,,,,,,,,,,,
Some pages dont have navbar menu items,CAMEL-14759,13293079,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,psingh1999587,psingh1999587,21/Mar/20 08:42,24/Mar/20 10:55,13/Jul/23 08:33,23/Mar/20 00:27,,,,,,,,,website,,,,0,,,,,"As I was skimming through the website, I found that some pages under ""documentation"" ,don't have menu-items in the navbar and hence the navbar-burger does not yield anything on being clicked on smaller resolutions.

 

!image-2020-03-21-14-11-49-451.png!",,psingh1999587,siyubu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Mar/20 08:41;psingh1999587;image-2020-03-21-14-11-49-451.png;https://issues.apache.org/jira/secure/attachment/12997307/image-2020-03-21-14-11-49-451.png","22/Mar/20 15:15;siyubu;image.png;https://issues.apache.org/jira/secure/attachment/12997366/image.png","24/Mar/20 10:55;siyubu;no toolbar nor nav.JPG;https://issues.apache.org/jira/secure/attachment/12997540/no+toolbar+nor+nav.JPG","24/Mar/20 10:55;siyubu;with toolbar and nav.JPG;https://issues.apache.org/jira/secure/attachment/12997539/with+toolbar+and+nav.JPG",,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 24 10:55:00 UTC 2020,,,,,,,,,,,"0|z0crj4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/20 16:32;siyubu;How to start working on this issue ;;;","22/Mar/20 19:31;siyubu;Does this issue have a branch that I may fork;;;","23/Mar/20 00:27;psingh1999587;[~siyubu] 
Hey,
I think this problem has been fixed now. Earlier, the camel-website build was broken, but now when you see it on the website, this issue has been resolved so I am closing this issue.;;;","24/Mar/20 10:29;siyubu;But there still some page that don't have toolbar and right page navigation bar. I was wondering if you can't open issue for that and allow me to work on it as my Outreach contribution 

 

SSS

ghggdhjgjhfgjhjkdhyruehuieri !image-2020-03-24-12-25-07-266.png!

!image-2020-03-24-12-28-24-824.png!;;;","24/Mar/20 10:33;siyubu;I am sorry for the writing near images.  It was by mistake ;;;","24/Mar/20 10:55;siyubu;While Navigating I saw pages that don't have toolbars and right navigation
bar such as Support and User stories from community. I was wondering if it
possible to open that issue for me and I work on it as my Outreach
contribution
*Solange Iyubu*

Student

Carnegie Mellon University in Africa

Tel: +250 785 562 715



;;;",,,,,,,,,,,,,,
Unmarshal TAR w/ error handling in Camel 3.x,CAMEL-14752,13292972,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,omarsmak,omarsmak,20/Mar/20 16:24,23/Mar/20 11:16,13/Jul/23 08:33,23/Mar/20 11:16,3.0.0,,,3.2.0,,,,,camel-tarfile,,,,0,,,,,,,omarsmak,,,,,,"omarsmak commented on pull request #3664: CAMEL-14752: Throw an exception on corrupted tarfiles
URL: https://github.com/apache/camel/pull/3664
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/20 11:14;githubbot;600","omarsmak commented on pull request #3664: CAMEL-14752: Throw an exception on corrupted tarfiles
URL: https://github.com/apache/camel/pull/3664
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Mar/20 11:16;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,CAMEL-14748,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-03-20 16:24:27.0,,,,,,,,,,,"0|z0cqvc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AWS2: Error configuring AWS2 endpoints behind proxy server,CAMEL-14749,13292884,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,saravanakumar,saravanakumar,saravanakumar,20/Mar/20 10:07,20/Mar/20 12:37,13/Jul/23 08:33,20/Mar/20 12:37,,,,3.1.1,3.2.0,,,,camel-aws2,,,,0,,,,,"Getting errors when providing proxy configurations as endpoint URI options.
{code}
Caused by: java.lang.IllegalArgumentException: Proxy endpoint path is not supported.
    at software.amazon.awssdk.utils.Validate.isTrue (Validate.java:76)
    at software.amazon.awssdk.http.apache.ProxyConfiguration$DefaultClientProxyConfigurationBuilder.endpoint (ProxyConfiguration.java:313)
    at org.apache.camel.component.aws2.sqs.Sqs2Endpoint.createClient (Sqs2Endpoint.java:340)
    at org.apache.camel.component.aws2.sqs.Sqs2Endpoint.getClient (Sqs2Endpoint.java:316)
    at org.apache.camel.component.aws2.sqs.Sqs2Endpoint.doInit (Sqs2Endpoint.java:132) {code}
 ",,acosentino,saravanakumar,,,,,"saravanakumar1987 commented on pull request #3655: CAMEL-14749: Camel-AWS2: Error configuring AWS2 endpoints behind prox…
URL: https://github.com/apache/camel/pull/3655
 
 
   …y server
   
   Please review the PR for [CAMEL-14749](https://issues.apache.org/jira/browse/CAMEL-14749)
   
   Thanks,
   Saravanakumar
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 10:31;githubbot;600","oscerd commented on pull request #3655: CAMEL-14749: Camel-AWS2: Error configuring AWS2 endpoints behind prox…
URL: https://github.com/apache/camel/pull/3655
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 10:36;githubbot;600","saravanakumar1987 commented on pull request #3656: CAMEL-14749: Fixed proxy config issue in 3.1.x branch
URL: https://github.com/apache/camel/pull/3656
 
 
   Raised as per review comments in [PR](https://github.com/apache/camel/pull/3655)
   
   Thanks,
   Saravanakumar
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 11:49;githubbot;600","oscerd commented on pull request #3656: CAMEL-14749: Fixed proxy config issue in 3.1.x branch
URL: https://github.com/apache/camel/pull/3656
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 12:37;githubbot;600",,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 12:34:39 UTC 2020,,,,,,,,,,,"0|z0cqc0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Mar/20 10:56;acosentino;This needs to be fixed on 3.1.x too, for the existing components. Please, if you have time, open a PR.;;;","20/Mar/20 12:34;saravanakumar;Thank you Andrea. It is now fixed in 3.1.x too.;;;",,,,,,,,,,,,,,,,,,
Unmarshal ZIP w/ error handling in Camel 3.x,CAMEL-14748,13292860,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,omarsmak,catshout,catshout,20/Mar/20 07:49,26/Mar/21 11:44,13/Jul/23 08:33,20/Mar/20 16:07,3.0.1,,,3.2.0,,,,,camel-zipfile,,,,0,,,,,"I've following route
 
 
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
 <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
   <route>
     <from uri=""file:/var/files/in?include=.*\.zip"" />
     <unmarshal>
       <zipfile />
     </unmarshal>
     <log message=""body: ${in.body}"" />
     <to uri=""file:/var/files/out"" />
   </route>
 </camelContext>
</blueprint>{code}
 
When I'm sending a corrupted ZIP file to this route I'd expect a Camel runtime error. This won't happen, I'm only getting an empty body.",,catshout,davsclaus,dmvolod,omarsmak,,,"omarsmak commented on pull request #3657: CAMEL-14748: Throw an error with corrupt zip file
URL: https://github.com/apache/camel/pull/3657
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 15:50;githubbot;600","omarsmak commented on pull request #3657: CAMEL-14748: Throw an error with corrupt zip file
URL: https://github.com/apache/camel/pull/3657
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 16:07;githubbot;600",,,,,,0,1200,,,0,1200,,,CAMEL-16410,,,,,,,,CAMEL-14752,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 16:23:56 UTC 2020,,,,,,,,,,,"0|z0cq6o:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Mar/20 08:49;omarsmak;Is it possible to provide an example for the corrupted zip file in order to re-produce it?;;;","20/Mar/20 09:08;dmvolod;Oh, [~omarsmak] looks like corrupted zip file is any non-zip file, for example text, data, etc.;;;","20/Mar/20 09:11;omarsmak;Thanks [~dmvolod], missed that! Will give a test ;;;","20/Mar/20 10:35;omarsmak;Reproduce it, will work on a solution for this;;;","20/Mar/20 16:18;davsclaus;Can we check camel-tarfile also as it may have the same, as its similar to this component;;;","20/Mar/20 16:23;omarsmak;Yeah, it may as well have the same issue, will create a new ticket for the tarfile and fix it;;;",,,,,,,,,,,,,,
"camel-rest-swagger java.lang.IllegalArgumentException when Swagger specification don't have ""scheme"" object and get this specification by ""file;"" resource",CAMEL-14746,13292723,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dmvolod,lukymiv,lukymiv,19/Mar/20 15:00,20/Mar/20 08:58,13/Jul/23 08:33,20/Mar/20 08:58,2.25.0,,,3.2.0,,,,,camel-rest-swagger,,,,0,,,,,"*camelContext*

 

_<?xml version=""1.0"" encoding=""UTF-8""?>_
 _<beans xmlns=""http://www.springframework.org/schema/beans""_
 _xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""_
 _xsi:schemaLocation=""http://camel.apache.org/schema/spring [http://camel.apache.org/schema/spring/camel-spring.xsd] [http://www.springframework.org/schema/beans] [http://www.springframework.org/schema/beans/spring-beans.xsd]"">_
 _<camelContext id=""mytestroute"" xmlns=""http://camel.apache.org/schema/spring"" >_
 _<route>_
 _<from uri=""direct:swaggerIn""/>_
 _<to uri=""swagger*:file*:/C:/Users/wunsh/IdeaProjects/camel/components/camel-rest-swagger/src/test/resources/swagger1.json#downloadUsingGET""/>_
 _<to uri=""mock:swaggerOut""/>_
 _</route>_
 _</camelContext>_

_<bean id=""swagger"" class=""org.apache.camel.component.rest.swagger.RestSwaggerComponent"">_
 _<property name=""componentName"" value=""http"" />_
 _</bean>_
 _</beans>_

 

*Swagger.json*

 

_{_
 _""swagger"": ""2.0"",_
 _""info"": {_
 _""description"": ""Api Documentation"",_
 _""version"": ""1.0"",_
 _""title"": ""Api Documentation"",_
 _""termsOfService"": ""urn:tos"",_
 _""contact"": {},_
 _""license"": {_
 _""name"": ""Apache 2.0"",_
 _""url"": ""http://www.apache.org/licenses/LICENSE-2.0""_
 _}_
 _},_
 _""host"": ""localhost:8182"",_
 _""basePath"": ""/manager"",_
 _""tags"": [_
 _{_
 _""name"": ""Logs"",_
 _""description"": ""API for logs""_
 _}_
 _],_
 _""paths"": {_
 _""/api/log/download"": {_
 _""get"": {_
 _""tags"": [_
 _""Работа с логами""_
 _],_
 _""summary"": ""Export"",_
 _""operationId"": ""downloadUsingGET"",_
 _""produces"": [_
 _""*/*""_
 _],_
 _""responses"": {_
 _""200"": {_
 _""description"": ""OK""_
 _},_
 _""401"": {_
 _""description"": ""Unauthorized""_
 _},_
 _""403"": {_
 ""description"": ""Forbidden""
 },
 ""404"":

{ ""description"": ""Not Found"" }

},
 ""deprecated"": false
 }
 }
 }
 }

 

*Error*

 

{color:#de350b}Caused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: swagger://[file:/C:/Users/wunsh/IdeaProjects/camel/components/camel-rest-swagger/src/test/resources/swagger1.json%23downloadUsingGET|file:///C:/Users/wunsh/IdeaProjects/camel/components/camel-rest-swagger/src/test/resources/swagger1.json%23downloadUsingGET]. Reason: java.lang.IllegalArgumentException: The endpoint is not of type: class org.apache.camel.component.http.HttpEndpoint but is: org.apache.camel.component.file.FileEndpointCaused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: swagger://[file:/C:/Users/wunsh/IdeaProjects/camel/components/camel-rest-swagger/src/test/resources/swagger1.json%23downloadUsingGET|file:///C:/Users/wunsh/IdeaProjects/camel/components/camel-rest-swagger/src/test/resources/swagger1.json%23downloadUsingGET]. Reason: java.lang.IllegalArgumentException: The endpoint is not of type: class org.apache.camel.component.http.HttpEndpoint but is: org.apache.camel.component.file.FileEndpoint{color}

 

{color:#172b4d}When I get the same swagger specification through the resource ""http:"" everything is ok{color}

 

 ",,dmvolod,lukymiv,,,,,"dmvolod commented on pull request #3654: CAMEL-14746: Additional specificationScheme validation
URL: https://github.com/apache/camel/pull/3654
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 07:50;githubbot;600","dmvolod commented on pull request #3654: CAMEL-14746: Additional specificationScheme validation
URL: https://github.com/apache/camel/pull/3654
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Mar/20 08:27;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 08:58:33 UTC 2020,,,,,,,,,,,"0|z0cpc8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Mar/20 05:49;dmvolod;[~lukymiv] thanks for reporting, we will fix it in the future.

As workaround, you just need to define
{code:json}
  ""schemes"": [
    ""http""
  ],
{code}
inside your swagger json;;;","20/Mar/20 08:17;lukymiv;{color:#172b4d}OK, thanks, I did it. {color}

 

{color:#172b4d}You will not tell whether it is possible to somehow get the swagger HTTP specification by a request from a resource that requires authorization? {color}

{color:#172b4d}Now when I start the route I get an error:{color}

 

{color:#de350b}Caused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: rest-swagger://http://192.168.58.241:8181/manager/v2/api-docs%23getUsingGET?componentName=http-swagger. Reason: java.lang.IllegalArgumentException: The given Swagger specification could not be loaded from `http://192.168.58.241:8181/manager/v2/api-docs`. Tried loading using Camel's resource resolution and using Swagger's own resource resolution. Swagger tends to swallow exceptions while parsing, try specifying Java system property `debugParser` (e.g. `-DdebugParser=true`), the exception that occured when loading using Camel's resource loader follows at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:578) at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:168){color};;;","20/Mar/20 08:58;dmvolod;{color:#172b4d}Yes, the supported components (http, netty, etc.) are able to set auth options.{color}

{color:#172b4d}Please ask questions on gitter channel first.  {color};;;",,,,,,,,,,,,,,,,,
Navbar hamburger doesn't fit within the visible screen. ,CAMEL-14745,13292722,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Aemie,Aemie,19/Mar/20 14:47,30/Mar/20 13:27,13/Jul/23 08:33,30/Mar/20 13:27,,,,,,,,,,,,,0,,,,,"For particular webpages, within a smaller screen width, due to a few links or tables or text, the entire webpage doesn't fit within the screen. 

 

I have created the PR for the following pages as it is resolved: 
 * frontpage
 * support page
 * downloads 
 * GSOC page
 * Contributing page
 * Apache CAMEL 2020 Release Schedule page",,Aemie,zregvart,,,,,"AemieJ commented on pull request #241: CAMEL-14745: Navbar doesn't fit the screen resolved for few pages
URL: https://github.com/apache/camel-website/pull/241
 
 
   * It was observed that certain webpages under smaller screen width, the entire webpage doesn't fit the screen and the user needs to scroll through the screen to access the navbar. It is observed in several webpages. 
   
   * Currently, I have resolved this issue for **DOWNLOADS**, **FRONTPAGE**, **SUPPORT** pages, and the navbar and all its content fit within the screen for any width.
   
   ### ISSUE OBSERVED IN DOWNLOADS PAGE AS THE TABLE WAS CREATING THE ISSUE.
   
   ![Download page issue](https://user-images.githubusercontent.com/44139348/77082745-8752bc00-6a22-11ea-8b80-3f8b75181dcd.png)
   
   ### SOLUTION TO RESOLVE THE ISSUE BY WRAPPING THE TABLE UNDER THE TABLE-WRAPPER
   
   ![Issue resolved using table-wrapper for Download page](https://user-images.githubusercontent.com/44139348/77083197-211a6900-6a23-11ea-82c4-10d4cd39789b.png)
   
   
   
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Mar/20 15:20;githubbot;600","AemieJ commented on pull request #241: CAMEL-14745: Navbar doesn't fit the screen resolved for few pages
URL: https://github.com/apache/camel-website/pull/241
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 14:29;githubbot;600","AemieJ commented on pull request #274: CAMEL-14745: make changes to create a  responsive mobile design
URL: https://github.com/apache/camel-website/pull/274
 
 
   * The purpose of the PR is to create all the pages within the website responsive irrespective of the screen width.
   * It was observed that certain webpages under smaller screen width, the entire webpage doesn't fit the screen and the user needs to scroll through the screen to access the navbar. It is observed in several webpages.
   * Currently, I have resolved this issue for
   
   1. Downloads page
   2. Projects section all page
   3. Blog page and all the articles within it
   4. Front-page
   5. Community page
   6. User manual pages
   7. EIP
   8. Migration and upgrade guide
   
   ### ISSUE 
   ![issue](https://user-images.githubusercontent.com/44139348/77669157-6a7e3180-6faa-11ea-9936-40ec0288d515.png)
   
   ### SOLUTION
   ![solution](https://user-images.githubusercontent.com/44139348/77669192-7538c680-6faa-11ea-9961-9995ad9c6fc5.png)
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Mar/20 16:11;githubbot;600","zregvart commented on pull request #274: CAMEL-14745: make changes to create a  responsive mobile design
URL: https://github.com/apache/camel-website/pull/274
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Mar/20 13:25;githubbot;600",,,,0,2400,,,0,2400,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 13:27:11 UTC 2020,,,,,,,,,,,"0|z0cpc0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Mar/20 14:48;Aemie;I have already started working on the issue and will create a PR for this.;;;","30/Mar/20 13:27;zregvart;Thanks to [~Aemie] for the pull request;;;",,,,,,,,,,,,,,,,,,
camel-salesforce : lazy-login,CAMEL-14744,13292718,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,MaartenTutak,MaartenTutak,19/Mar/20 14:24,16/Apr/20 18:53,13/Jul/23 08:33,16/Apr/20 18:53,3.1.0,,,3.3.0,,,,,camel-salesforce,,,,0,,,,,"I'm using org.apache.camel.springboot:camel-salesforce-starter:3.1.0

Configuration *camel.component.salesforce.lazy-login* only seems to work when it's used in combination with *camel.component.salesforce.lazy-start-producer*.

When used on it's own, method 
 *_org.apache.camel.component.salesforce.internal.client.AbstractClientBase#start()_*
 will call method
 _*org.apache.camel.component.salesforce.internal.SalesforceSession#login()*_
 without an appropriate guard statement. 

Is this intended behaviour?",,davsclaus,MaartenTutak,zregvart,,,,"MaartenTutak commented on pull request #3726: CAMEL-14744: fix camel-salesforce lazy-login
URL: https://github.com/apache/camel/pull/3726
 
 
   This PR is an attempt to fix the lazy-login bug in the camel-salesforce component, which was logged in [CAMEL-14744](https://issues.apache.org/jira/browse/CAMEL-14744).
   
   I would like some feedback on the chosen approach :
   1. Passing around SalesforceLoginConfig instead of a boolean value indicating lazyLogin
   2. ""JIT"" login in the SalesforceProducer#process method
   
   This fix was tested against an actual Salesforce instance, via the DefaultRestClient implementation. I am unable to verify the other ApiClient implementations and things like the SubscriptionHelper, AbstractSalesforceMojo.
   
   - [x] Make sure there is a [JIRA issue](https://issues.apache.org/jira/browse/CAMEL) filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.
   - [x] Each commit in the pull request should have a meaningful subject line and body.
   - [x] If you're unsure, you can format the pull request title like `[CAMEL-XXX] Fixes bug in camel-file component`, where you replace `CAMEL-XXX` with the appropriate JIRA issue.
   - [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.
   - [x] Run `mvn clean install -Psourcecheck` in your module with source check enabled to make sure basic checks pass and there are no checkstyle violations. A more thorough check will be performed on your pull request automatically.
   Below are the contribution guidelines:
   https://github.com/apache/camel/blob/master/CONTRIBUTING.md
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Apr/20 07:57;githubbot;600","davsclaus commented on pull request #3726: CAMEL-14744: fix camel-salesforce lazy-login
URL: https://github.com/apache/camel/pull/3726
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;16/Apr/20 18:52;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 16 18:53:23 UTC 2020,,,,,,,,,,,"0|z0cpb4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Mar/20 09:06;zregvart;[~MaartenTutak] not sure if that was intended. If think {{lazy-login}} should be also considered in all cases. Sounds like you're already have an idea of what needs to change, perhaps you can create a pull request for the change?;;;","25/Mar/20 13:33;MaartenTutak;[~zregvart], sure, I can give it a try.;;;","04/Apr/20 18:09;davsclaus;Maarten, how is it going?;;;","05/Apr/20 22:17;MaartenTutak;[~davsclaus], I have a draft ready but I'd like to do some testing before making a PR.
I hope to do that somewhere next week.;;;","16/Apr/20 18:53;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,
spring-boot - Error binding property in servlet-starter,CAMEL-14740,13292662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,Deymus,Deymus,19/Mar/20 09:39,03/Jun/20 09:53,13/Jul/23 08:33,31/Mar/20 08:00,,,,3.2.0,,,,,camel-servlet,,,,0,starter,,,,"Hi,
I have this dependencies
{code:java}
// Camel
implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.1.0'
implementation 'org.apache.camel.springboot:camel-jackson-starter:3.1.0'
implementation 'org.apache.camel.springboot:camel-jacksonxml-starter:3.1.0'
implementation 'org.apache.camel.springboot:camel-activemq-starter:3.1.0'
implementation 'org.apache.camel.springboot:camel-servlet-starter:3.1.0'
implementation 'org.apache.camel.springboot:camel-rest-starter:3.1.0' {code}
My application.properties
{code:java}
camel.component.servlet.mapping.enabled=true
camel.component.servlet.mapping.context-path=/rest/*

camel.rest.component=servlet
camel.rest.binding-mode=json{code}
When i run application i see this stacktrace
{code:java}
 Exception in thread ""CamelMainRunController"" java.lang.RuntimeException: org.apache.camel.PropertyBindingException: Error binding property (camel.component.servlet.mapping.enabled=true) with name: mapping.enabled on bean: org.apache.camel.component.servlet.ServletComponent@62562970 with value: true
	at org.apache.camel.spring.boot.CamelSpringBootApplicationController.run(CamelSpringBootApplicationController.java:90)
	at org.apache.camel.spring.boot.CamelMainRunController$DaemonTask.run(CamelMainRunController.java:53)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.camel.PropertyBindingException: Error binding property (camel.component.servlet.mapping.enabled=true) with name: mapping.enabled on bean: org.apache.camel.component.servlet.ServletComponent@62562970 with value: true
	at org.apache.camel.main.BaseMainSupport.setPropertiesOnTarget(BaseMainSupport.java:176)
	at org.apache.camel.main.BaseMainSupport.autoConfigurationFromProperties(BaseMainSupport.java:993)
	at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:545)
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:587)
	at org.apache.camel.main.BaseMainSupport.initCamelContext(BaseMainSupport.java:423)
	at org.apache.camel.main.Main.doInit(Main.java:109)
	at org.apache.camel.support.service.ServiceSupport.init(ServiceSupport.java:83)
	at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:112)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:82)
	at org.apache.camel.spring.boot.CamelSpringBootApplicationController.run(CamelSpringBootApplicationController.java:85)
	... 2 more
{code}
It always throw error on any first servlet property in configuration but all servlet properties binds correctly and works.",,bigghe,davsclaus,Deymus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 03 09:53:44 UTC 2020,,,,,,,,,,,"0|z0coyo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Mar/20 09:45;davsclaus;Should be fixed in Camel 3.2, but can you verify with SNAPSHOT, you can build from source or try the apache snapshot repo;;;","03/Jun/20 09:53;bigghe;Hi guys,

I'm trying to test this but I cannot invoke any rest api with context's configuration via application.properties. 

I have
 * spring-boot 2.2.7.RELEASE
 * camel 3.3.0

application.properties
{code:java}
camel.component.servlet.mapping.enabled=true
camel.component.servlet.mapping.context-path=/rest/*camel.rest.component=servlet
camel.rest.binding-mode=json
{code}
 
 a simple route
{code:java}
rest().get(""/api"")
    	.to(""direct:hello"");
{code}
and I got nothing in [http://localhost:8080/rest/api].

But if I put the servlet registration as java code
{code:java}
    @Bean
    public ServletRegistrationBean camelServletRegistrationBean() {
      ServletRegistrationBean registration = new ServletRegistrationBean(new CamelHttpTransportServlet(), ""/rest/*"");
      registration.setName(""CamelServlet"");
      return registration;
    }
{code}
then it works.

I don't know if this must go in another issue, so let me know.

Thanks!;;;",,,,,,,,,,,,,,,,,,
RouteContext missing for RedeliveryErrorHandler,CAMEL-14739,13292651,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,uncl,uncl,19/Mar/20 09:08,25/Mar/20 10:04,13/Jul/23 08:33,25/Mar/20 10:04,3.1.0,,,3.1.1,3.2.0,,,,came-core,,,,1,,,,,"The RedeliveryErrorHandler needs the RouteContext to determine which onException rule to use.

The RouteContext is set at the start of a route, when leaving a route the RouteContext should be set to the route that called it. However it is apparently null, which means that if an error happens at that point it cannot use the onException rules that have been set.

In 3.0 the RouteContext was a stack so it kept track of all the routes that it passed, meaning automatically returned to the parent RouteContext value.",,davsclaus,gnodet,jpraet,uncl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Mar/20 16:06;uncl;camel-error-test.zip;https://issues.apache.org/jira/secure/attachment/12997137/camel-error-test.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 10:04:40 UTC 2020,,,,,,,,,,,"0|z0cow8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Mar/20 09:47;davsclaus;The route context is removed onwards. So if you have some sample project with error handling that now works differently, then put together a sample project and attach as zip or on github. And also try with 3.2 SNAPSHOT ;;;","19/Mar/20 09:48;gnodet;[~uncl] do you have a simple route setup to make it easier to test ?

As [~davsclaus] indicated, the RouteContext has been removed in 3.2-SNAPSHOT, but there should still be the stack of {{Route}}s in the {{UnitOfWork}}.;;;","19/Mar/20 16:08;uncl;I've added an example with 3 rest operations to show the different cases, it took some extra time since the condition for which the bug happens is apparently not after a route call, but only after a route call that directs to another route call.;;;","25/Mar/20 06:57;davsclaus;Thanks for the sample project. 

Reproduced and we see this WARN

2020-03-25 07:55:46.758  WARN 2123 --- [nio-8080-exec-4] o.a.c.p.e.RedeliveryErrorHandler         : Cannot determine current route from Exchange with id: ID-davsclaus-pro-local-1585119287866-0-3, will fallback and use first error handler.
;;;","25/Mar/20 06:57;davsclaus;❯ curl http://localhost:8080/camel/api/hello
""Hello world""%                                                                                                                            ❯ curl http://localhost:8080/camel/api/helloError
""general exception was properly handled""%                                                                                                 ❯ curl http://localhost:8080/camel/api/helloBug
""random processing (should not be exposed)""%;;;","25/Mar/20 09:12;davsclaus;Okay pushed an unit test to camel-core so we can use that to track down the bug
https://github.com/apache/camel/commit/c75ab25edb27e99565faf9891e2766f438392b5d;;;","25/Mar/20 10:04;davsclaus;Thanks for reporting, and the sample project.;;;",,,,,,,,,,,,,
Spring-boot closes datasource before the last inflight messages are processed,CAMEL-14737,13292646,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ngmip,ngmip,19/Mar/20 08:33,08/May/20 11:38,13/Jul/23 08:33,07/May/20 14:11,3.0.1,3.1.0,,3.3.0,,,,,camel-spring-boot,camel-sql,,,0,,,,,"As reported on Stack Overflow ([https://stackoverflow.com/questions/60654265/springboot-camel-datasource-already-closed-on-graceful-shutdown])

I created a simple spring-boot application that fetches logs (camel-ftp) extract some data line by line and insert them in a database (camel-sql).
When I stop the application (gracefully) spring shortly closes the datasource but there is still an inflight exchange and I get ""datasource already closed"" errors.

 

I was looking for a way to tell spring to not close the datasource until all inflight exchanges are processed (or timed out ?)","Windows 10 x64

adopt open jdk 11

spring-boot 2.2.5-RELEASE

postgresql 12",davsclaus,ngmip,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 08 11:38:37 UTC 2020,,,,,,,,,,,"0|z0cov4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Apr/20 18:10;davsclaus;I wonder if you can provide a sample project that demonstrates this? Maybe add a project on github, or attach a .zip file to this JIRA. It help us alot when we have something that easy demonstrate a problem, we can use to track down and implement a fix.;;;","06/Apr/20 14:59;ngmip;Here's a github project [https://github.com/ngmip/camel-14737]
Hope the readme is clear enough to reproduce the issue.;;;","07/May/20 12:30;davsclaus;Yeah its spring boot / spring and its dreaded lifecycle. ;;;","07/May/20 12:37;davsclaus;Okay how are you graceful shutting down the application?

It depends on which signal it gets. 

If I use ctrl + c in the shell via mvn spring-boot:run or java -jar it tends to cause this problem you have.
But kill -INT <pid> shuts it down nicely.;;;","07/May/20 13:07;davsclaus;Okay so it looks like there is 2 shutdown hooks triggered

- camel
- spring

So spring is shutting down those datasources and whatnot (via SpringContextShutdownHook) that does not respect Camel stopping first;;;","07/May/20 13:24;ngmip;So far, I only tested it inside the IDE (IntelliJ IDEA) pressing the ""stop""/""exit"" button in debug/run mode which is I believe same as ctrl+c (sigterm)

Other springboot applications I have developped so far react to this ""stop buttons"" nicely doing a graceful shutdown, that's why I reported the behavior.

I also I believe that the signal issued on a ""stop"" command for a a systemd service (debian) is a SIGTERM

SIGINT can be a workaround but I feel that SIGTERM should have the same behavior.;;;","07/May/20 14:08;davsclaus;It smells like its the h2 database that detects the shutdown hook and closes automatic, so you can fix this by usign

    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE
;;;","08/May/20 06:34;ngmip;I originally faced the problem with a postgres database and used h2 in this sample projet to simlpify it.

I'm not aware of a similar ""close_on_exist"" feature in postgresql connection parameters.;;;","08/May/20 11:33;davsclaus;Well I improved some stuff anyway so try with 3.3.0 when its released.;;;","08/May/20 11:38;ngmip;Awesome Thanks !;;;",,,,,,,,,,
Properties of class Map does not work with Spring Boot,CAMEL-14733,13292348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hemangajmera,hemangajmera,18/Mar/20 05:32,20/Mar/20 13:47,13/Jul/23 08:33,18/Mar/20 10:15,3.1.0,,,3.2.0,,,,,camel-spring-boot-starters,,,,0,,,,,"We were migrating the salesforce component code from version 2.24.2 to version 3.1.0. However we are getting error 


{code}
Caused by: org.apache.camel.PropertyBindingException: Error binding property (camel.component.salesforce.httpclientproperties.requestbuffersize=65536) with name: httpclientproperties.requestbuffersize on bean: org.apache.camel.component.salesforce.SalesforceComponent@497cd25 with value: 65536
{code}


Earlier also there was issue with Map properties, which was raised in CAMEL-13770 and it was fixed by commit https://github.com/apache/camel/commit/2566504f56212b87ff5532a181cb85dfc00f2286

This seems to be new issue.",Camel 3.1.0,acosentino,davsclaus,hemangajmera,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/Mar/20 10:13;davsclaus;Screenshot 2020-03-18 at 11.13.08.png;https://issues.apache.org/jira/secure/attachment/12997011/Screenshot+2020-03-18+at+11.13.08.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 13:47:31 UTC 2020,,,,,,,,,,,"0|z0cn0w:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Mar/20 07:55;hemangajmera;The code base uploaded in CAMEL-13766 can be used to reproduce this error;;;","18/Mar/20 07:57;hemangajmera;[~cibsen@e-ma.net], Can you please look into this issue, since you have fixed CAMEL-13770.;;;","18/Mar/20 08:41;davsclaus;Try with master branch for Camel 3.2.0 release;;;","18/Mar/20 10:15;davsclaus;Works with 3.2, see screenshot;;;","18/Mar/20 10:47;hemangajmera;can you please share the apache repo url from where I can use the snapshot jar. That way I dont have to download and built the entire source code.;;;","19/Mar/20 05:47;davsclaus;apache snapshot maven repo
http://repository.apache.org/snapshots/
;;;","19/Mar/20 10:18;hemangajmera;I am not sure how the entire build works on master branch, but there is no version 3.2.0-SNAPSHOT for salesforce starter component at https://repository.apache.org/content/groups/snapshots/org/apache/camel/springboot/camel-salesforce-starter/
;;;","19/Mar/20 10:23;acosentino;Build the code by yourself. First build camel branch master, then build camel-spring-boot master.;;;","20/Mar/20 13:32;hemangajmera;After 1 day of execution, I finally got build error. 


{code}
[ERROR] Failed to execute goal on project camel-kudu: Could not resolve dependencies for project org.apache.camel:camel-kudu:jar:3.2.0-SNAPSHOT: Failure to find org.apache.kudu:kudu-binary:jar:windows-x86_64:1.10.0 in https://repo1.maven.org/maven2/ was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]
{code}
;;;","20/Mar/20 13:40;acosentino;It doesn't exist for Windows [https://repo1.maven.org/maven2/org/apache/kudu/kudu-binary/1.10.0/];;;","20/Mar/20 13:44;hemangajmera;I dont have any OS to work with :(

I am still curious on why jenkins is not generated all snapshot jar.;;;","20/Mar/20 13:47;acosentino;We can't do the deploy phase actually. We first need to build Camel as snapshot and the we may need to run the Spring Boot build with the latest snapshot and do the deploy, actually we don't have a pipeline for this. ;;;",,,,,,,,
camel-swagger-java Semantic error. Methods in rest service with id have the same operationId,CAMEL-14724,13291968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,lukymiv,lukymiv,16/Mar/20 13:12,16/Mar/20 19:02,13/Jul/23 08:33,16/Mar/20 19:02,3.1.0,,,3.2.0,,,,,camel-swagger,,,,0,,,,,"In camel-swagger-java, for this service

 

<rest id=""4f777f7b-f2fd-4107-8271-a50640d4525c"" path=""/path"" produces=""application/json"">
 <get id=""026ea872-e2f8-4772-8d10-6482b8549f11"" 
 produces=""application/json"" uri=""/get"">
 <description/>
 <responseMessage message=""OK"" code=""200"" />
 <to uri=""direct-vm://restLink""/>
 </get>
 <get id=""247f814f-5970-4cc1-975d-374195ff9b42"" 
 produces=""application/json"" uri=""/get2"">
 <description/>
 <responseMessage message=""OK"" code=""200"" />
 <to uri=""direct-vm://restLink""/>
 </get>
 </rest>

 
 I get next swagger.json, which does not pass validation because 
h4. Semantic error at paths./path/get2.get.operationId

Operations must have unique operationIds.
  
  

{ ""swagger"" : ""2.0"", ""info"" :

{ ""version"" : ""1.0"", ""title"" : ""REST API"" }

, ""host"" : ""[0.0.0.0:9090|http://0.0.0.0:9090/]"", ""basePath"" : ""/fesb-rest"", ""tags"" : [ \{ ""name"" : ""path"" } ], ""schemes"" : [ ""http"", ""https"" ], ""paths"" : { ""/path/get"" : { ""get"" : { ""tags"" : [ ""path"" ], ""summary"" : """", ""operationId"" : ""{color:#ff0000}4f777f7b-f2fd-4107-8271-a50640d4525c{color}{color:#000000}"", ""produces"" : [ ""application/json"" ], ""responses"" : \{ ""200"" : { ""description"" : ""OK"" } } } }, ""/path/get2"" : { ""get"" : { ""tags"" : [ ""path"" ], ""summary"" : """", ""operationId"" : ""{color}{color:#ff0000}4f777f7b-f2fd-4107-8271-a50640d4525c{color}{color:#000000}"", ""produces"" : [ ""application/json"" ], ""responses"" : \{ ""200"" : { ""description"" : ""OK"" } } } } } }{color}
  
  I need the id of the methods and not the service to be used, while the service id should remain
  I looked at the code and found the following in the class *RestSwaggerReader.* 

 

String operationId = (String)Optional.ofNullable(rest.getId()).orElse(routeId);
 op.operationId(operationId); ",,davsclaus,lukymiv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 16 19:02:04 UTC 2020,,,,,,,,,,,"0|z0ckog:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/20 19:02;davsclaus;Also fixed for openapi;;;",,,,,,,,,,,,,,,,,,,
Warning message spawned by the telegram component,CAMEL-14722,13291926,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,lb,lb,16/Mar/20 09:11,16/Mar/20 10:07,13/Jul/23 08:33,16/Mar/20 10:07,3.1.0,,,3.1.1,3.2.0,,,,camel-telegram,,,,0,,,,,"When using the telegram component, I see the following message spawned ont he console every now and then:

{code} 
WARN  [org.apa.cam.com.tel.ser.TelegramServiceRestBotAPIAdapter] (Camel (camel-1) thread #0 - telegram://bots) Received body for GET https://api.telegram.org/...
{code}

",,acosentino,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 16 09:17:32 UTC 2020,,,,,,,,,,,"0|z0ckf4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/20 09:17;acosentino;I'll set this as trace.;;;",,,,,,,,,,,,,,,,,,,
Salesforce report consumer throws IllegalArgumentException,CAMEL-14703,13291307,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jpeterson@ccihealth.org,jpeterson@ccihealth.org,12/Mar/20 12:25,05/May/20 09:00,13/Jul/23 08:33,05/May/20 09:00,3.0.1,,,3.3.0,,,,,camel-salesforce,,,,0,,,,,"When synchronously running a report and returning the results, an {{IllegalArgumentException}} is thrown due to a dataCell  containing an {{escapedValue}} as a key.  In the {{SummaryValue.class}} in the \{{setAny}} method the name of the key is checked and throws an error if its other than {{value}}.

I'm assuming instead of throwing an error this should bypass any key with name other than {{value}}.

Attached is a screenshot of a breakpoint where the error is thrown, the report's key:value pair run through workbench, and the stacktrace.",,davsclaus,jpeterson@ccihealth.org,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Mar/20 12:16;jpeterson@ccihealth.org;error_in_breakpoint.PNG;https://issues.apache.org/jira/secure/attachment/12996545/error_in_breakpoint.PNG","12/Mar/20 12:21;jpeterson@ccihealth.org;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12996543/stacktrace.txt","12/Mar/20 12:16;jpeterson@ccihealth.org;workbench_report_results.PNG;https://issues.apache.org/jira/secure/attachment/12996544/workbench_report_results.PNG",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 05 09:00:41 UTC 2020,,,,,,,,,,,"0|z0cglk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Mar/20 12:32;davsclaus;Thanks for reporting, you are welcome to dive into the code and provide a PR with an attempted fix for the master branch;;;","05/May/20 09:00;davsclaus;Thanks yeah lets ignore those field names;;;",,,,,,,,,,,,,,,,,,
NPE when using reference to parameter in openapi-rest-dsl-generator,CAMEL-14691,13290842,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,10/Mar/20 15:36,10/Mar/20 22:49,13/Jul/23 08:33,10/Mar/20 22:49,3.1.0,,,3.2.0,,,,,tooling,,,,0,,,,,"When using reference parameters with {{openapi-rest-dsl-generator}}, such as in this example:

{code}
{
    ""openapi"": ""3.0.2"",
    ""info"": {
        ""title"": ""Test API"",
        ""version"": ""1.0.0"",
        ""description"": ""A brand new API with no content.  Go nuts!""
    },
    ""paths"": {
        ""/test/{myparam}"": {
            ""get"": {
                ""parameters"": [
                    {
                        ""$ref"": ""#/components/parameters/MyParam""
                    }
                ],
                ""responses"": {
                    ""200"": {
                        ""description"": ""response""
                    }
                },
                ""operationId"": ""op""
            }
        }
    },
    ""components"": {
        ""parameters"": {
            ""MyParam"": {
                ""name"": ""myparam"",
                ""in"": ""path"",
                ""required"": true
            }
        }
    }
}
{code}

NullPointerException is raised:

{code}
Caused by: java.lang.NullPointerException
    at org.apache.camel.generator.openapi.OperationVisitor.emit (OperationVisitor.java:77)
    at org.apache.camel.generator.openapi.OperationVisitor.lambda$visit$1 (OperationVisitor.java:194)
    at java.util.ArrayList.forEach (ArrayList.java:1257)
    at org.apache.camel.generator.openapi.OperationVisitor.visit (OperationVisitor.java:193)
    at java.util.LinkedHashMap.forEach (LinkedHashMap.java:684)
    at org.apache.camel.generator.openapi.PathVisitor.visit (PathVisitor.java:57)
    at java.util.ArrayList.forEach (ArrayList.java:1257)
    at org.apache.camel.generator.openapi.RestDslXmlGenerator.generate (RestDslXmlGenerator.java:59)
    at org.apache.camel.maven.generator.openapi.GenerateXmlMojo.execute (GenerateXmlMojo.java:116)
{code}",,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-03-10 15:36:30.0,,,,,,,,,,,"0|z0cdq8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The search div partially overlaps the search bar,CAMEL-14688,13290659,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,psingh1999587,psingh1999587,09/Mar/20 22:22,11/Mar/20 06:33,13/Jul/23 08:33,11/Mar/20 06:33,,,,,,,,,website,,,,0,help-wanted,,,,"To produce this:-
 # go to the [https://camel.apache.org/]
 # type something in the search bar
  you will find that it is partially overlapping the search bar.",,psingh1999587,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"09/Mar/20 22:21;psingh1999587;WhatsApp Image 2020-03-10 at 03.46.11.jpeg;https://issues.apache.org/jira/secure/attachment/12996227/WhatsApp+Image+2020-03-10+at+03.46.11.jpeg",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-03-09 22:22:00.0,,,,,,,,,,,"0|z0cclk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Searched result div should be scrollable,CAMEL-14667,13290036,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,AghaSaad04,AghaSaad04,06/Mar/20 10:56,09/Mar/20 17:49,13/Jul/23 08:33,09/Mar/20 17:49,,,,,,,,,website,,,,0,,,,,"Steps to produce the issue:

> Type anything in the search field.
 > The resultant div will have search results. But It is not scrollable and the user will not be able to see all the results.

Screenshot:

!image-2020-03-06-15-58-25-810.png|width=259,height=459!

Possible Solution:

> To add height and overflow-y properties to the resultant div will fix the issue. 

Other possible and efficient solutions are welcome :)",,AghaSaad04,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Mar/20 10:52;AghaSaad04;image-2020-03-06-15-47-36-422.png;https://issues.apache.org/jira/secure/attachment/12995841/image-2020-03-06-15-47-36-422.png","06/Mar/20 11:03;AghaSaad04;image-2020-03-06-15-58-25-810.png;https://issues.apache.org/jira/secure/attachment/12995842/image-2020-03-06-15-58-25-810.png",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 17:49:50 UTC 2020,,,,,,,,,,,"0|z0c8r4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/20 10:58;AghaSaad04;So the possible solution for the above issue is adding the fixed height and scrollbar to the resultant div.
Reviews are welcome :)
P.S: I am working on this.;;;","06/Mar/20 12:12;zregvart;Thanks for creating this issue and working on it, we love contributions :);;;","07/Mar/20 11:44;AghaSaad04;Hi, [~zregvart] I wanted to ask whether the solutions to the issues opened by me would also be considered as contributions for the Outreachy? Thanks;;;","09/Mar/20 12:18;zregvart;[~AghaSaad04] I don't see why not.;;;","09/Mar/20 17:49;zregvart;Thanks to [~AghaSaad04] for the pull request!;;;",,,,,,,,,,,,,,,
Search results push the website's Navbar,CAMEL-14666,13290031,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,AghaSaad04,AghaSaad04,06/Mar/20 10:43,19/Mar/20 18:38,13/Jul/23 08:33,19/Mar/20 18:38,,,,,,,,,website,,,,0,help-wanted,,,,"To produce the bug follow these steps:


> Go to [https://camel.apache.org/]
> Try to search for anything.
> The search result will push the navbar to left.

Screenshot:
!image-2020-03-06-15-35-11-524.png|width=571,height=263!",,AghaSaad04,Akintan Lape,psingh1999587,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Mar/20 10:40;AghaSaad04;image-2020-03-06-15-35-11-524.png;https://issues.apache.org/jira/secure/attachment/12995835/image-2020-03-06-15-35-11-524.png",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 17 17:36:10 UTC 2020,,,,,,,,,,,"0|z0c8q0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/20 10:48;AghaSaad04;The issue is related to the search results as I have mentioned. The possible solution would be to add z-index and position properties. I am working on it :) ;;;","06/Mar/20 12:10;zregvart;Thank you for reporting the issue and working on the fix [~AghaSaad04]!;;;","09/Mar/20 08:18;psingh1999587;[~AghaSaad04] i am noob. could u please tell me which file in the folder contains the js of this? i would like to try my hand on it.
would be grateful :)

 ;;;","17/Mar/20 17:36;Akintan Lape;Hello, I am an outreachy applicant and i am ery interested in working on this issue . Can I?;;;",,,,,,,,,,,,,,,,
camel-core - Thread stuck if exception is thrown in handle(Predicate) with onException,CAMEL-14659,13289749,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sbo13,sbo13,05/Mar/20 09:11,05/Mar/20 11:03,13/Jul/23 08:33,05/Mar/20 11:03,3.1.0,,,3.2.0,,,,,,,,,0,,,,,"If an exception is thrown from the predicate of the .handled() method of an onException block the thread gets stuck and the producerTemplate is waiting infinitely for a response.

 

I attached a small project reproducing the issue","jdk 11

macOs 10

camel version 3.1.0",davsclaus,sbo13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Mar/20 09:10;sbo13;camel-deadlock.tgz;https://issues.apache.org/jira/secure/attachment/12995699/camel-deadlock.tgz",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 05 11:03:24 UTC 2020,,,,,,,,,,,"0|z0c6zc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Mar/20 11:03;davsclaus;Thanks for reporting and providing the example;;;",,,,,,,,,,,,,,,,,,,
Property placeholder not resolved in Log EIP,CAMEL-14651,13289447,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,04/Mar/20 07:25,04/Mar/20 09:40,13/Jul/23 08:33,04/Mar/20 09:40,3.1.0,,,3.2.0,,,,,,,,,0,,,,,"I have a simple groovy script like:

{code:java}
@Grab(group='org.slf4j', module='slf4j-simple', version='1.7.30')
@Grab(group='org.apache.camel', module='camel-main', version='3.1.0')
@Grab(group='org.apache.camel', module='camel-timer', version='3.1.0')

import org.apache.camel.builder.RouteBuilder
import org.apache.camel.main.Main

def main = new Main()
main.addInitialProperty('camel.context.name', 'test-ctx')
main.addInitialProperty('message', 'test')
main.addRoutesBuilder(new RouteBuilder() {
    @Override
    void configure() {
        from('timer:{{message}}')
            .log('{{message}}');
    }
})

main.run()
{code}

Which is supposed to print test every second but what it does is to literally print {{message}} :

{code}
[main] INFO org.apache.camel.support.LRUCacheFactory - Detected and using LURCacheFactory: camel-caffeine-lrucache
[main] INFO org.apache.camel.main.BaseMainSupport - Using properties from classpath:application.properties;optional=true
[main] INFO org.apache.camel.main.BaseMainSupport - Auto-configuration summary:
[main] INFO org.apache.camel.main.BaseMainSupport - 	camel.context.name=test-ctx
[main] INFO org.apache.camel.main.DefaultRoutesCollector - Loading additional Camel XML routes from: classpath:camel/*.xml
[main] INFO org.apache.camel.main.DefaultRoutesCollector - Loading additional Camel XML rests from: classpath:camel-rest/*.xml
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.1.0 (CamelContext: test-ctx) is starting
[main] INFO org.apache.camel.impl.engine.DefaultManagementStrategy - JMX is disabled
[main] INFO org.apache.camel.impl.engine.HeadersMapFactoryResolver - Detected and using HeadersMapFactory: camel-headersmap
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Route: route1 started and consuming from: timer://test
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Total 1 routes, of which 1 are started
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.1.0 (CamelContext: test-ctx) started in 0.099 seconds
[Camel (test-ctx) thread #2 - timer://test] INFO route1 - {{message}}
[Camel (test-ctx) thread #2 - timer://test] INFO route1 - {{message}}
{code}

Logs show that initial properties are taken into account as both the contex name and the name of the timer are set according to the properties whereas the Log EIP does not work as expected.",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 08:44:08 UTC 2020,,,,,,,,,,,"0|z0c548:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/20 08:34;davsclaus;You can use 

.log(""${properties:message}"");

 ;;;","04/Mar/20 08:44;davsclaus;Okay have a fix ;;;",,,,,,,,,,,,,,,,,,
Cannot parse catalog/components/kafka.json,CAMEL-14649,13289291,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,03/Mar/20 16:23,04/Mar/20 10:08,13/Jul/23 08:33,03/Mar/20 17:40,3.1.0,,,3.1.1,3.2.0,,,,,,,,0,,,,,"{code}
Failed to process: ./target/camel-catalog/org/apache/camel/catalog/components/kafka.json

com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 middle byte 0x5c
 at [Source: (File); line: 79, column: 766]
	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)
	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3573)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3580)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(UTF8StreamJsonParser.java:3385)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2489)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:267)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:68)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:15)
	at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4254)
	at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2745)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:166)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:1)
	at java.nio.file.Files.walkFileTree(Files.java:2670)
	at java.nio.file.Files.walkFileTree(Files.java:2742)
	at org.wildfly.camel.catalog.CatalogCreator.collectAvailable(CatalogCreator.java:161)
	at org.wildfly.camel.catalog.CatalogCreator.collect(CatalogCreator.java:137)
	at org.wildfly.camel.test.catalog.CatalogCreatorTest.createCatalog(CatalogCreatorTest.java:37)
{code}

At that particular location, I see

{code}
adding a small amount of artificial delay�\u0080\u0094that is
{code}

Also shows with yammer.json",,acosentino,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 10:08:40 UTC 2020,,,,,,,,,,,"0|z0c4fc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Mar/20 16:25;tdiesler;CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2959;;;","03/Mar/20 17:39;acosentino;What are you see in yammer instead?;;;","03/Mar/20 17:40;acosentino;kafka one is fixed.;;;","04/Mar/20 09:01;tdiesler;yammer.json fails with 

{code}
com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 middle byte 0x5c
 at [Source: (File); line: 37, column: 617]
	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)
	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3573)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3580)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(UTF8StreamJsonParser.java:3385)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2489)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:267)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:68)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:15)
	at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4254)
	at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2745)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:168)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:1)
	at java.nio.file.Files.walkFileTree(Files.java:2670)
	at java.nio.file.Files.walkFileTree(Files.java:2742)
	at org.wildfly.camel.catalog.CatalogCreator.collectAvailable(CatalogCreator.java:160)
	at org.wildfly.camel.catalog.CatalogCreator.collect(CatalogCreator.java:136)
	at org.wildfly.camel.test.catalog.CatalogCreatorTest.createCatalog(CatalogCreatorTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)

{code};;;","04/Mar/20 09:27;acosentino;working on yammer.;;;","04/Mar/20 10:08;acosentino;It should be fixed on yammer too;;;",,,,,,,,,,,,,,
Wrong rest mapping on camel-undertow,CAMEL-14645,13288923,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nferraro,nferraro,02/Mar/20 15:45,05/Mar/20 15:48,13/Jul/23 08:33,05/Mar/20 15:48,,,,3.2.0,,,,,camel-undertow,,,,0,,,,,"The order in which routes are declared changes the behavior of the integration.

 

E.g.

{code:java}
rest()
  .get(""/{pippo}"")
  .route()
  .setBody().simple(""Route with name: ${header.pippo}"")
  .setHeader(""Content-Type"", constant(""text/plain""));


rest()
  .get(""/"")
  .route()
  .setBody().constant(""Route without name"")
  .setHeader(""Content-Type"", constant(""text/plain""));
{code}

When calling it with:
{code}
curl http://service:8080/
{code}

The first route replies (""Route with name: ...""), but the second was supposed to.

This same example works with jetty and netty-http.

As workaround for undertow, if the order of the two routes is reversed, it works correctly.
But when you create a route from a given openapi.json file, the order is given and you're not supposed to change it.",,davsclaus,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 05 11:54:26 UTC 2020,,,,,,,,,,,"0|z0c2vs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Mar/20 11:54;davsclaus;Yeah sadly undertow has some custom code and dont rely on RestConsumerContextPathMatcher which is the logic for matching paths. This needs a bit of work to fix;;;",,,,,,,,,,,,,,,,,,,
Configuring brokerurl leads to duplication in camel-activemq and spring-boot ,CAMEL-14643,13288844,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,preben,preben,02/Mar/20 11:08,06/May/20 17:41,13/Jul/23 08:33,06/May/20 17:41,3.0.1,3.1.0,,3.3.0,,,,,camel-activemq,camel-spring-boot,,,0,,,,,"When upgrading from camel 3.0.0 to 3.x.x the spring.activemq.broker-url is no longer used when configuring the camel-activemq component. 
It seems that you now have to specify both the spring property (for the SB health check to work) and the camel.componnt.activemq.broker-u-r-l for the component to work when picking up configuration properties.
There is an example here [https://github.com/pax95/failover-test] 
when you omit the camel.component.activemq.broker-u-r-l the component picks up the default localhost broker and not the spring boot one specified by spring.activemq.broker-url
Maybe there there are some SB bean conditionals missing ?  ",,davsclaus,preben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 17:08:17 UTC 2020,,,,,,,,,,,"0|z0c2e8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/20 10:28;davsclaus;You need to turn on allow to use autowired CF as its mistakenly disabled on SB

 

camel:
 springboot:
 shutdown-timeout: 2
 component:
 activemq:
 allow-auto-wired-connection-factory: true
 health:
 check:
 routes:
 enabled: true;;;","06/Mar/20 10:34;davsclaus;This has been fixed in Camel 3.2 so the default is now true, so when you upgrade to this release you can remove that option;;;","05/May/20 12:32;preben;[~davsclaus] Just upgraded to 3.2.0 and SB 2.2.6.RELEASE  on the app. 
It seems that the allow-auto-wired-connection-factory set to true doesn't work on 3.2.0 as it did on 3.1.0.
Now SB picks up the right CF (seen on the actuator endpoint), but Camel sticks to the default 'localhost:61616' ->
Failed to connect to [tcp://localhost:61616] 
Some other changes on 3.2 might have changed to affect the behaviour.

The effect can be seen on the example project by upgrading Camel and SB.;;;","05/May/20 13:33;davsclaus;Update your github project so its easier for us to reproduce please.

And add instructions if needed how to run/test etc;;;","06/May/20 09:28;preben;upgraded the example to 3.2.0 to show the error.
Run the app by invoking mvn clean package spring-boot:run
Console output will show that camel tries to connect to the default broker url localhost:61616. Where it should have been foo:61617 or bar:61617

2020-05-06 11:18:02.715 WARN 30558 --- [ActiveMQ Task-1] o.a.a.t.failover.FailoverTransport : Failed to connect to [tcp://localhost:61616] after: 10 attempt(s) continuing to retry.

When invoking the health endpoint on [http://localhost:8080/actuator/health]
The SB cf seems to have picked up the right configured CF
2020-05-06 11:24:19.636 ERROR 33231 --- [nio-8080-exec-1] o.a.a.t.failover.FailoverTransport : Failed to Lookup INetAddress for URI[ssl://bar:61617] : {}

I was trying to grog a unittest, but I didn't really find some good examples of how to setup a broker in failover mode in a unittest. Sorry :(;;;","06/May/20 17:08;davsclaus;Thanks I have a potential fix in the works.

If you dont use the spring boot CF then it works fine with Camel

camel:
  springboot:
    shutdown-timeout: 2
  component:
    activemq:
      broker-url: failover:(ssl://foo:61617,ssl://bar:61617)
      allow-auto-wired-connection-factory: true

But then its not a SB CF;;;",,,,,,,,,,,,,,
"Safe copy of exchange will not copy attachments on in message, unless headers are set",CAMEL-14633,13288463,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,oklimberg,oklimberg,29/Feb/20 19:17,02/Mar/20 10:36,13/Jul/23 08:33,02/Mar/20 10:36,2.25.0,,,2.25.1,,,,,camel-core,,,,0,,,,,"If sending an exchange with attachments on the 'in' message but without headers to a seda endpoint with parameter waitForTaskToComplete set to never, the attachments will not be copied.",,oklimberg,,,,,,"oklimberg commented on pull request #3603: CAMEL-14633
URL: https://github.com/apache/camel/pull/3603
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Feb/20 19:25;githubbot;600",,,,,,,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-29 19:17:54.0,,,,,,,,,,,"0|z0c140:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optimization of  DefaultExchangeFormatter leeds to crapy log output,CAMEL-14632,13288454,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,graben,graben,29/Feb/20 15:29,02/Mar/20 08:53,13/Jul/23 08:33,02/Mar/20 08:53,3.1.0,,,3.2.0,,,,,camel-core,,,,0,,,,,"The changes to DefaultExchangeFormatter from issue CAMEL-14354 have an ""ugly"" side effect. If using multiline logging and StringBuffer is less than 10000 chars you'll get a String logged with lots of ###REPLACE_ME###.

Reproduce with test case  [^Camel14632Test.java] and see log output
e.g.:

{noformat}
2020-02-29T16:25:58,966 INFO  [main            ] test                             - Exchange[###REPLACE_ME###  Id: ID-PC47376-1582989958950-0-1###REPLACE_ME###  ExchangePattern: InOnly###REPLACE_ME###  Properties: {CamelToEndpoint=log://test?multiline=true&showAll=true}###REPLACE_ME###  Headers: {}###REPLACE_ME###  BodyType: String###REPLACE_ME###  Body: test]
{noformat}
",,graben,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14354,,,,,,,,,"29/Feb/20 15:29;graben;Camel14632Test.java;https://issues.apache.org/jira/secure/attachment/12995032/Camel14632Test.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 29 15:33:08 UTC 2020,,,,,,,,,,,"0|z0c120:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Feb/20 15:33;graben;Hi [~davsclaus],

issue created with test case as requested. ;)

Regards,
Benjamin;;;",,,,,,,,,,,,,,,,,,,
Install of camel-jackson on Karaf 4.2.7 w/ Camel 3.1.0 causes an error (same worked with Karaf 4.2.7 w/ Camel 3.0.1),CAMEL-14629,13288336,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,catshout,catshout,28/Feb/20 16:35,27/Mar/20 20:28,13/Jul/23 08:33,27/Mar/20 20:28,3.1.0,,,3.2.0,,,,,camel-jackson,,,,0,,,,,"I tried to upgrade from Karaf 4.2.7 w/ Camel 3.0.1 towards Karaf 4.2.7 w/ Camel 3.1.0. Same behaviour also with Karaf 4.2.8 w/ Camel 3.1.0
 
While executing these commands
 
 
{code:java}
karaf@root()>  feature:repo-add hawtio 2.9.1
Adding feature url mvn:io.hawt/hawtio-karaf/2.9.1/xml/features
karaf@root()>  feature:repo-add activemq 5.15.11
Adding feature url mvn:org.apache.activemq/activemq-karaf/5.15.11/xml/features
karaf@root()>  feature:repo-add camel 3.1.0
Adding feature url mvn:org.apache.camel.karaf/apache-camel/3.1.0/xml/features
karaf@root()>  feature:install webconsole hawtio activemq-broker-noweb camel camel-jms jms camel-http camel-jetty camel-swagger-java camel-ftp camel-jackson camel-jsonpath camel-zipfile camel-velocity camel-groovy  {code}
 
I'm getting the following error
 
 
{code:java}
org.apache.felix.resolver.reason.ReasonException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-jackson; type=karaf.feature; version=""[3.1.0,3.1.0]""; filter:=""(&(osgi.identity=camel-jackson)(type=karaf.feature)(version>=3.1.0)(version<=3.1.0))"" [caused by: Unable to resolve camel-jackson/3.1.0: missing requirement [camel-jackson/3.1.0] osgi.identity; osgi.identity=org.apache.camel.camel-jackson; type=osgi.bundle; version=""[3.1.0,3.1.0]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=  javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""]]] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:392) at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:378) at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:332) at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:257) at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:393) at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve camel-jackson/3.1.0: missing requirement [camel-jackson/3.1.0] osgi.identity; osgi.identity=org.apache.camel.camel-jackson; type=osgi.bundle; version=""[3.1.0,3.1.0]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""]] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 12 more Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 13 more Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))"" at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 14 more{code}
 ",,acosentino,catshout,davsclaus,jamesnetherton,jbonofre,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 24 16:34:36 UTC 2020,,,,,,,,,,,"0|z0c0bs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Feb/20 17:04;jbonofre;Gonna fix that. Some other features are affected as well with JDK 9+.;;;","28/Feb/20 17:37;catshout;Add-On ..

I was using Java 8
 
{code:java}
$ java -version
openjdk version ""1.8.0_222""
OpenJDK Runtime Environment (build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode){code};;;","28/Feb/20 17:42;jbonofre;Thanks for the update. So, the camel feature is just bad ;) Let me fix that. I think the dependency has changed in the codebase, and we don't define range in the bundle, so it fails. Easy fix ;);;;","28/Feb/20 19:21;acosentino;What's wrong with the feature? The verify on camel works correctly;;;","29/Feb/20 05:46;jbonofre;[~acosentino] I think it depends of the JAXB version present in the runtime. The verify probably works because another feature provide JAXB. Let me fix that.;;;","06/Mar/20 06:58;catshout;[~jbonofre], [~acosentino], do you have a forecast when this issue would be fixed? Many thanks in advance.;;;","06/Mar/20 07:07;jbonofre;[~catshout] I'm back on this issue. I will create a PR.;;;","17/Mar/20 12:29;jamesnetherton;Any progress on this? Other features depending on camel-jackson will also likely fail e.g camel-mongo.;;;","23/Mar/20 08:30;catshout;[~jbonofre] do you have any news in between? Client is still waiting for a solution .. many thanks in advance.

Gerald;;;","24/Mar/20 12:30;davsclaus;Yeah either we make camel import jaxb 2.2,3 so it can use that older version. Or karaf comes installed with 2.3 as well.;;;","24/Mar/20 15:05;davsclaus;Okay so we have made the camel bundles themselves that import jaxb support 2.2 ... 3 so they can install. But 3rd party bundles like jackson that requires 2.3 onwards requires fixes in karaf itself.;;;","24/Mar/20 16:34;catshout;Great [~davsclaus]. Many thanks, will wait for the next fix release than.;;;",,,,,,,,
RouteCoverage in Test throws Exception for TransactedDefinition,CAMEL-14624,13288129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,graben,graben,27/Feb/20 19:01,02/Mar/20 10:36,13/Jul/23 08:33,02/Mar/20 10:36,3.1.0,,,3.2.0,,,,,camel-spring,camel-test,,,0,,,,,"Camel 3.1 adds method setOuput() to TransactedDefinition without a corresponding getter this causes JAXB to fail.

",,acosentino,davsclaus,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Feb/20 19:41;graben;Camel14624Test.java;https://issues.apache.org/jira/secure/attachment/12994980/Camel14624Test.java",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 28 19:41:36 UTC 2020,,,,,,,,,,,"0|z0bz34:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Feb/20 19:08;graben;Hi [~gnodet],

the commit https://github.com/apache/camel/commit/3a4bfe51dbde6bd3bacf26da6b77d075cbaab5c2 might cause more problems even in other classes than only TransactedDefinition .

Regards
Benjamin;;;","27/Feb/20 19:21;acosentino;How jaxb fails? Can you please add details on what you see? The description is not complete;;;","27/Feb/20 19:54;graben;Hi [~acosentino]

sorry, exception is in German

{noformat}
Caused by: com.sun.xml.bind.api.AccessorException: Die Eigenschaft enthält einen Setter ""public void org.apache.camel.model.TransactedDefinition.setOutputs(java.util.List)"", jedoch keinen Getter. Für das Marshalling müssen Sie Getter definieren.
{noformat}

Simple translation, JAXB marshaling needs getter but no getter defined!
;;;","27/Feb/20 21:30;davsclaus;We need a reproducer like a sample project or some unit test or something that reproduces this.  ;;;","28/Feb/20 19:41;graben;Hi [~davsclaus],

Test case as requested.  [^Camel14624Test.java] 

Regards
Benjamin;;;",,,,,,,,,,,,,,,
Camel-spring-boot-starters have unnecessary JAX-B and JAX-WS dependencies on Java 11,CAMEL-14621,13288043,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,27/Feb/20 13:05,28/Feb/20 21:14,13/Jul/23 08:33,28/Feb/20 21:14,3.1.0,,,3.2.0,,,,,camel-spring-boot-starters,,,,0,,,,,"In Version 3.1.0 every camel-spring-boot-starter has (a lot) of unnecessary JAX-B and JAX-WS dependencies when used with Java 11. E.g.:

{noformat}
[INFO] +- org.apache.camel.springboot:camel-micrometer-starter:jar:3.1.0:compile
[INFO] |  +- org.apache.camel:camel-micrometer:jar:3.1.0:compile
[INFO] |  +- org.apache.camel.springboot:camel-spring-boot-starter:jar:3.1.0:compile
[INFO] |  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile
[INFO] |  +- javax.xml.ws:jaxws-api:jar:2.3.1:compile
[INFO] |  +- jakarta.xml.bind:jakarta.xml.bind-api:jar:2.3.2:compile
[INFO] |  |  \- jakarta.activation:jakarta.activation-api:jar:1.2.1:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-ws-metadata_2.0_spec:jar:1.1.3:compile
[INFO] |  +- com.sun.xml.messaging.saaj:saaj-impl:jar:1.5.1:compile
[INFO] |  |  +- jakarta.xml.soap:jakarta.xml.soap-api:jar:1.4.1:compile
[INFO] |  |  \- org.jvnet.mimepull:mimepull:jar:1.9.12:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile
[INFO] |  +- org.jboss.spec.javax.rmi:jboss-rmi-api_1.0_spec:jar:1.0.6.Final:compile
[INFO] |  +- org.glassfish.jaxb:jaxb-runtime:jar:2.3.2:compile
[INFO] |  |  +- org.glassfish.jaxb:txw2:jar:2.3.2:compile
[INFO] |  |  +- com.sun.istack:istack-commons-runtime:jar:3.0.8:compile
[INFO] |  |  +- org.jvnet.staxex:stax-ex:jar:1.8.1:compile
[INFO] |  |  \- com.sun.xml.fastinfoset:FastInfoset:jar:1.2.16:compile
[INFO] |  \- javax.xml.soap:javax.xml.soap-api:jar:1.4.0:compile
{noformat}

It is the same for other starters.

I think the cause is that the Java9+ profile of the camel-spring-boot/pom.xml (see: https://github.com/apache/camel-spring-boot/blob/5c8d1e30fe8df62382a264def38c9d827bd8cfb9/pom.xml#L765) which is an ancestor of every camel-spring-boot-stater adds the JAX-WS and JAX-B dependencies.

This wasn't the case in Camel 3.0.1/3.0.0/2.24.0.
",,davidkarlsen,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 28 07:22:24 UTC 2020,,,,,,,,,,,"0|z0byk0:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"27/Feb/20 21:32;davsclaus;Yeah jaxb should only be needed via camel-xml-jaxb dependency that brings in those. And camel-spring requires this afair. So I think those java9+ profile can be removed. I think we did that in the core camel repo.;;;","27/Feb/20 23:25;davidkarlsen;+1.
That's a bit of exclude-pain going on in my pom's.
Also - I think it's good to move to jakarta.* based dependencies rather than javax.* etc - since the community seems to go in that direction.;;;","28/Feb/20 07:22;davsclaus;Yep there is no jdk9 build profile anymore on main repo, so this one should be removed on camel-spring-boot
<id>jdk9+-build</id>;;;",,,,,,,,,,,,,,,,,
camel kafka starter for spring does not consider camel.component.kafka.brokers property,CAMEL-14615,13287516,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,valdar,Giemza,Giemza,25/Feb/20 14:35,26/Feb/20 12:39,13/Jul/23 08:33,26/Feb/20 12:39,3.0.1,,,3.2.0,,,,,camel-kafka,,,,0,,,,,"When using camel-kafka-starter with Spring, I am declaring the bokers list in the application properties (_camel.component.kafka.brokers=localhost:9092_) and want to connect to kafka as a producer with

_.to(""kafka:files"")_.

However I get the following error: Caused by: 

java.lang.IllegalArgumentException: URL to the Kafka brokers must be configured with the brokers option on either the component or endpoint.

It only works if I configure the broker via the query parameter:

.to({color:#008000}""kafka:files?brokers=127.0.0.1:9092""{color})

Sample projects have been created to reproduce the bug:

[https://github.com/deradam/camel-kafka-java]

[https://github.com/deradam/camel-kafka] (kotlin version)",,davsclaus,Giemza,valdar,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14568,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 26 12:39:36 UTC 2020,,,,,,,,,,,"0|z0bvaw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Feb/20 15:12;valdar;[~Giemza] I have created a PR that solves the issue https://github.com/deradam/camel-kafka-java/pull/1 still not sure if it can be regarded only as a workaround. Still investigating.;;;","25/Feb/20 15:29;Giemza;[~valdar] your change works! Thanks a lot for that.

Still I am wondering why there are two settings for the brokers list and what the difference is

_camel.component.kafka.brokers_ vs. _camel.component.kafka.configuration.brokers_

Might also be confusing for other newcomers.;;;","25/Feb/20 15:39;davsclaus;Try with 3.1.0 release;;;","25/Feb/20 17:20;davsclaus;Okay so its SB auto configuration that pickup that brokers option directly on the component. That should be removed so the option is configured on the configuration, like the other options.;;;","26/Feb/20 12:39;valdar;This has been addressed here https://github.com/apache/camel/pull/3600 by removing one of the 2 options, this should reflect on the documentation as well when 3.2.0 will be released.;;;",,,,,,,,,,,,,,,
Camel Kafka feature cannot be install on HPUX and Solaris arch,CAMEL-14601,13286507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,20/Feb/20 15:36,20/Feb/20 17:18,13/Jul/23 08:33,20/Feb/20 16:51,,,,3.0.2,3.1.1,3.2.0,,,karaf,,,,0,,,,,"Suppressed: org.osgi.framework.BundleException: Unable to resolve org.xerial.snappy.snappy-java [241](R 241.0): missing requirement [org.xerial.snappy.snappy-java [241](R 241.0)] osgi.native; (|(&(osgi.native.osname~=win32)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=win32)(osgi.native.processor~=x64))(&(osgi.native.osname~=win32)(osgi.native.processor~=amd64))(&(osgi.native.osname~=win32)(osgi.native.processor~=x86))(&(osgi.native.osname~=macosx)(osgi.native.processor~=x86))(&(osgi.native.osname~=macosx)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x64))(&(osgi.native.osname~=linux)(osgi.native.processor~=amd64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x86))(&(osgi.native.osname~=linux)(osgi.native.processor~=aarch64))(&(osgi.native.osname~=linux)(osgi.native.processor~=arm))(&(osgi.native.osname~=linux)(osgi.native.processor~=arm_le))(&(osgi.native.osname~=linux)(osgi.native.processor~=ppc64le))(&(osgi.native.osname~=linux)(osgi.native.processor~=s390x))(&(osgi.native.osname~=aix)(osgi.native.processor~=ppc))(&(osgi.native.osname~=aix)(osgi.native.processor~=ppc64))(&(osgi.native.osname~=sunos)(osgi.native.processor~=x86))(&(osgi.native.osname~=sunos)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=sunos)(osgi.native.processor~=sparc))) Unresolved requirements: [[org.xerial.snappy.snappy-java [241](R 241.0)] osgi.native; (|(&(osgi.native.osname~=win32)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=win32)(osgi.native.processor~=x64))(&(osgi.native.osname~=win32)(osgi.native.processor~=amd64))(&(osgi.native.osname~=win32)(osgi.native.processor~=x86))(&(osgi.native.osname~=macosx)(osgi.native.processor~=x86))(&(osgi.native.osname~=macosx)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x64))(&(osgi.native.osname~=linux)(osgi.native.processor~=amd64))(&(osgi.native.osname~=linux)(osgi.native.processor~=x86))(&(osgi.native.osname~=linux)(osgi.native.processor~=aarch64))(&(osgi.native.osname~=linux)(osgi.native.processor~=arm))(&(osgi.native.osname~=linux)(osgi.native.processor~=arm_le))(&(osgi.native.osname~=linux)(osgi.native.processor~=ppc64le))(&(osgi.native.osname~=linux)(osgi.native.processor~=s390x))(&(osgi.native.osname~=aix)(osgi.native.processor~=ppc))(&(osgi.native.osname~=aix)(osgi.native.processor~=ppc64))(&(osgi.native.osname~=sunos)(osgi.native.processor~=x86))(&(osgi.native.osname~=sunos)(osgi.native.processor~=x86-64))(&(osgi.native.osname~=sunos)(osgi.native.processor~=sparc)))]",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-20 15:36:23.0,,,,,,,,,,,"0|z0bpb4:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerServicePool - Memory leak,CAMEL-14594,13286311,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/20 19:27,19/Feb/20 22:00,13/Jul/23 08:33,19/Feb/20 22:00,,,,3.1.0,,,,,,,,,0,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14591,,CAMEL-14579,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-19 19:27:48.0,,,,,,,,,,,"0|z0bo3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eager type converter creation breaks WildFly integration,CAMEL-14593,13286265,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tdiesler,tdiesler,tdiesler,19/Feb/20 15:54,19/Feb/20 19:30,13/Jul/23 08:33,19/Feb/20 19:30,3.1.0,,,3.1.0,,,,,,,,,0,,,,,"Below we have a callback to the wildfly-camel integration that registers additional PackageScanClassResolvers, which are able scan stuff on a modules classpath.

 
{code:java}
        // Call all registered trackers with this context
        // Note, this may use a partially constructed object
        CamelContextTracker.notifyContextCreated(this);
{code}

Doing this after creating the type converters, results in camel not seeing converters from the deployment module. Other stuff may also be missing.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2951",,tdiesler,,,,,,"tdiesler commented on pull request #3590: [CAMEL-14593] Eager type converter creation breaks WildFly integration
URL: https://github.com/apache/camel/pull/3590
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Feb/20 16:12;githubbot;600","davsclaus commented on pull request #3590: [CAMEL-14593] Eager type converter creation breaks WildFly integration
URL: https://github.com/apache/camel/pull/3590
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Feb/20 19:21;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-19 15:54:00.0,,,,,,,,,,,"0|z0bntc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient List EIP - MemoryLeak,CAMEL-14591,13286197,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,19/Feb/20 09:51,19/Feb/20 19:27,13/Jul/23 08:33,19/Feb/20 19:27,3.1.0,,,3.1.0,,,,,camel-core,,,,0,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14579,CAMEL-13564,CAMEL-14594,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 19 19:27:28 UTC 2020,,,,,,,,,,,"0|z0bne8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Feb/20 10:55;davsclaus;There is also a thread pool that the recipinent list uses for timeout handling, that potentially is not shutdown, and created even if timeout is not in use. *DONE*;;;","19/Feb/20 12:08;davsclaus;Okay so the memory leak is fine grained error handling with recipient list which is also what we expected. Turning this off makes the leak go away. ;;;","19/Feb/20 13:15;davsclaus;Okay have a potential solution, need additional testing before pushing;;;","19/Feb/20 13:32;davsclaus;Argh danm there was some new issues so have to look into finding a better solution;;;","19/Feb/20 15:34;davsclaus;Okay working on a better solution which looks promising;;;","19/Feb/20 19:27;davsclaus;Okay fixed the error handler builder leak, but there is actually another issue in the ProducerServicePool;;;",,,,,,,,,,,,,,
camel-core - Disable cache on some EIPs seems to not be working correlction,CAMEL-14586,13285927,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Feb/20 09:11,18/Feb/20 10:22,13/Jul/23 08:33,18/Feb/20 10:22,3.1.0,,,3.1.0,,,,,camel-core,,,,0,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14579,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-18 09:11:57.0,,,,,,,,,,,"0|z0blq8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-mail: MemoryLeak when sending mails using recipient list or dynamic to,CAMEL-14579,13285713,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pascalschumacher,pascalschumacher,17/Feb/20 08:50,21/Feb/20 06:55,13/Jul/23 08:33,20/Feb/20 05:14,3.0.1,,,3.1.0,,,,,camel-mail,,,,0,,,,,"In Camel 3.0.1 there seems to be a memory leak when you use camel-mail to send mails with a recipient list (see attached screenshot CamelMail_RecipientList_MemoryLeak_3.0.1.PNG).

Code to reproduce:

{code:java}
public class SendMailDynamicToMemoryLeakTest extends CamelTestSupport {

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""scheduler:start?delay=1"")
                    .setBody(constant(""Hello""))
                    .setHeader(""smtpFrom"", method(UUID.class, ""randomUUID""))
                    .recipientList(simple(""smtp://localhost:1234?to=test@test.com&mail.smtp.from=${header.smtpFrom}"")).cacheSize(-1).end();
//                    .toD(""smtp://localhost:1234?to=test@test.com&mail.smtp.from=${header.smtpFrom}"");
            }
        };
    }

    @Test
    public void test() throws Exception {
        Thread.sleep(100_000_000L);
    }
}
{code}

{code:xml}
<dependency>
    <groupId>com.bitmechanic</groupId>
    <artifactId>dumbster</artifactId>
    <version>1.9.0.2</version>
</dependency>
{code}

{code:java}
public class TestMailServer {

    public static void main(String[] args) throws Exception {
        ServerOptions serverOptions = new ServerOptions();
        serverOptions.port = 1234;
        SmtpServerFactory.startServer(serverOptions);
    }
}
{code}

To make reproduction easier I pushed everything to https://github.com/PascalSchumacher/CamelSendMailMemoryLeak

Run the TestMailServer class, then run SendMailDynamicToMemoryLeakTest.

Using Camel 3.1.0-SNAPSHOT to run the test shows the same behavior.

Using Camel 2.24.2 there is no memory leak.

---

The original code is using toD (see commented out code in the test case above) instead of a recipient list. For dynamic to there seems to be a slower memory leak in Camel 3.0.1 (not completely sure, a lot of objects get garbage collected, but overall object count seems to slowly increase.)

Using Camel 2.24.2 there is no memory leak.

Using Camel 3.1.0-SNAPSHOT with dynamic to there seems to be a memory leak, see the attached screenshot CamelMail_DyamicTo_MemoryLeak-3.1.0-SNAPSHOT.PNG.

I am not sure if the recipientList/toD behavior is limited to camel-mail or if it would occur for other components too. I could not replicate the behavior with camel-http, but this component uses optimized dynamic to and this may prevent the occurrence of a memory leak.",,davsclaus,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14594,,CAMEL-14586,CAMEL-14591,CAMEL-14595,,,"17/Feb/20 08:27;pascalschumacher;CamelMail_DyamicTo_MemoryLeak-3.1.0-SNAPSHOT.PNG;https://issues.apache.org/jira/secure/attachment/12993645/CamelMail_DyamicTo_MemoryLeak-3.1.0-SNAPSHOT.PNG","17/Feb/20 08:27;pascalschumacher;CamelMail_RecipientList_MemoryLeak_3.0.1.PNG;https://issues.apache.org/jira/secure/attachment/12993644/CamelMail_RecipientList_MemoryLeak_3.0.1.PNG","18/Feb/20 22:09;pascalschumacher;CamelMail_RecipientList_MemoryLeak_3.1.0-SNAPSHOT-2020-02-18.16.PNG;https://issues.apache.org/jira/secure/attachment/12993830/CamelMail_RecipientList_MemoryLeak_3.1.0-SNAPSHOT-2020-02-18.16.PNG",,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 21 06:55:00 UTC 2020,,,,,,,,,,,"0|z0bkeo:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"17/Feb/20 10:29;davsclaus;Use a header with the dynamic recipient and a static to then there is only a single endpoint.

This is expected as you create a new endpoint per combination. The endpoint stays in the cache until its evicted. And for that you need to configure cache size, and use the caffeinece cache map that has eviction.;;;","17/Feb/20 12:42;pascalschumacher;Hi Claus,

thank you very much for the quick response.

>Use a header with the dynamic recipient and a static to then there is only a single endpoint.

How do I do this?

> This is expected as you create a new endpoint per combination. The endpoint stays in the cache until its evicted. And for that you need to configure cache size, and use the caffeinece cache map that has eviction.

Not sure if I understand you correctly.

Camel-caffeine-lrucache and Caffeine are already on classpath and I can see Caffeine classes being used in the profile results. Do I have to configure anything else (I did not find anything related to this in the Camel 3 migration guide)?

I thought Camel caches were limited by default (I saw multiple places in the code were caches are limited to 1000 entries, but 21.000 MailEndpoints are created before running out of memory)? What exactly do I have to configure to limit the cache?


Not sure if you read the second part (maybe I should have created two issues):

{code:java}
.setHeader(""smtpFrom"", method(UUID.class, ""randomUUID""))
.toD(""smtp://localhost:1234?to=test@test.com&mail.smtp.from=${header.smtpFrom}"");
{code}

was working for years in Camel 2.x. It seems broken in 3.0.1 and definitely broken in 3.1.0-SNAPSHOT.

Thanks,
Pascal;;;","17/Feb/20 15:58;bedla;{quote}>Use a header with the dynamic recipient and a static to then there is only a single endpoint.

How do I do this?
{quote}
{code:java}
//...
.setHeader(""from"", method(UUID.class, ""randomUUID""))
.to(""smtp://localhost:1234?to=test@test.com"") // You dont need dynamic endpoint here for ""mail.smtp.from"", ""from"" header takes precedence
//...{code};;;","17/Feb/20 18:55;pascalschumacher;[~bedla] Thanks, but actually I need it. ""mail.smtp.form"" sets the Java Mail session property ( this feature seems to be undocumented in the new camel documentation, but was described in the old one as mail.XXX (see: https://people.apache.org/~dkulp/camel/mail.html); sadly these can not be set with a header) which is different from the ""from"" address. We use both ""from"" and ""mail.smtp.form"". ""The ""from"" address is just a static mail address, but ""mail.smtp.from"" contains a unique address for the return path which is then used to identify undeliverable emails.
 

I should be able to workaround this issue by implementing and configuring a custom javaMailSender, but this was not necessary in Camel 2.x and I think the same problem would occur with other components.;;;","17/Feb/20 19:02;davsclaus;In Camel 2.x the mail endpoint is not singleton and therefore a new endpoint is created per usage and its not reused
https://github.com/apache/camel/blob/camel-2.x/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailEndpoint.java#L132;;;","18/Feb/20 09:04;davsclaus;Okay we can likely make camel-mail dynamic when you have headers with mail.xx for java mail properties, and then we would have to create a prototype scoped java mail sender if its not using the default values (as it needs to create a new mail session).;;;","18/Feb/20 09:12;davsclaus;And there may also be a bug with the disable cache with -1 - created another ticket about that;;;","18/Feb/20 10:23;davsclaus;Okay the cacheSize(-1) has been fixed on master branch. You are welcome to try this again with a new fresh build.;;;","18/Feb/20 22:11;pascalschumacher;Thank you very much for looking into this. It is much appreciated.

I retested with your fix for ""CAMEL-14586 camel-core - Disable cache on some EIPs seems to not be working"".

For:

{code:java}
.recipientList(simple(""smtp://localhost:1234?to=test@test.com&mail.smtp.from=${header.smtpFrom}"")).cacheSize(-1).end();
{code}

The MailEndpoint leak is fixed, but the RedeliveryPolicy leak remains (see the attached CamelMail_RecipientList_MemoryLeak_3.1.0-SNAPSHOT-2020-02-18.16.PNG screenshot).

For dynamic to the behavior is the same as before, but I guess that is as expected.

By the way: I was able to work around this issue by implementing a custom JavaMailSender.;;;","19/Feb/20 08:26;davsclaus;Dynamic to also has a cacheSize which you can set to -1 to disable it like recipient list.

About the RedeliveryPolicy then I will investigate. Thanks for spotting this.;;;","19/Feb/20 09:52;davsclaus;Have reproduced the issue with recipient list EIP and created a new ticket for it;;;","19/Feb/20 13:17;davsclaus;Pascal, I likely have a fix and have tested it with your sample project, and the GC can go down to low again. But it would be good if you could run a test too, when I have pushed the changes.

This should work with and without setting cacheSize(-1) or not on both EIPs (toD support it too).

So when I have pushed then I will commented again and if you could test asap then that would be great as we want to build the release asap after verification.;;;","19/Feb/20 19:49;pascalschumacher;Sure I can retest either later today or tomorrow. Just let me know when to do it.;;;","19/Feb/20 20:06;davsclaus;Okay working on the producer cache leak. However all the others has been fixed, so if you run with -1 as cache size then there should be no leak for both recipient list or toD.

;;;","19/Feb/20 22:02;davsclaus;Okay the leaks has been fixed now.

Pascal, you are welcome to re-test.

About mail.smtp.from then we can look at adding support for headers so you can use a static endpoint but the headers can then provide dynamic values where we then re-create a mail sender.;;;","19/Feb/20 22:11;pascalschumacher;>Okay working on the producer cache leak. However all the others has been fixed, so if you run with -1 as cache size then there should be no leak for both recipient list or toD.

Yes, there is no memory leak for

{code:java}
   .toD(""smtp://localhost:1234?to=test@test.com&mail.smtp.from=${header.smtpFrom}"", -1)
{code}

anymore. Thanks!

Mails are sent, but a lot of NullPointerExceptions occur:

{noformat}
22:55:32.779 [Camel (camel-1) thread #1 - scheduler://start] ERROR org.apache.camel.processor.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: ID-Redhawk-THINK-1582149325759-0-332 on ExchangeId: ID-Redhawk-THINK-1582149325759-0-332). Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException

Message History (complete message history is disabled)
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [from[scheduler://start?delay=1]                                               ] [         0]
	...
[route1            ] [toD1              ] [smtp://localhost:xxxxxx@test.com&mail.smtp.from=${header.smtpFrom}            ] [         0]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.lang.NullPointerException: null
	at org.apache.camel.impl.engine.DefaultProducerCache.lambda$doInAsyncProducer$4(DefaultProducerCache.java:318)
	at org.apache.camel.processor.SendDynamicProcessor$1.done(SendDynamicProcessor.java:195)
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:73)
	at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:183)
	at org.apache.camel.impl.engine.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:309)
	at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:168)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:396)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:153)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
	at org.apache.camel.component.scheduler.SchedulerConsumer.sendTimerExchange(SchedulerConsumer.java:58)
	at org.apache.camel.component.scheduler.SchedulerConsumer.poll(SchedulerConsumer.java:43)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
22:55:32.779 [Camel (camel-1) thread #1 - scheduler://start] WARN org.apache.camel.component.scheduler.SchedulerConsumer - Error processing exchange. Exchange[ID-Redhawk-THINK-1582149325759-0-332]. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.impl.engine.DefaultProducerCache.lambda$doInAsyncProducer$4(DefaultProducerCache.java:318)
	at org.apache.camel.processor.SendDynamicProcessor$1.done(SendDynamicProcessor.java:195)
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:73)
	at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:183)
	at org.apache.camel.impl.engine.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:309)
	at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:168)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:396)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:153)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
	at org.apache.camel.component.scheduler.SchedulerConsumer.sendTimerExchange(SchedulerConsumer.java:58)
	at org.apache.camel.component.scheduler.SchedulerConsumer.poll(SchedulerConsumer.java:43)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
22:55:32.779 [Camel (camel-1) thread #1 - scheduler://start] WARN org.apache.camel.component.scheduler.SchedulerConsumer - Error processing exchange. Exchange[ID-Redhawk-THINK-1582149325759-0-332]. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.impl.engine.DefaultProducerCache.lambda$doInAsyncProducer$4(DefaultProducerCache.java:318)
	at org.apache.camel.processor.SendDynamicProcessor$1.done(SendDynamicProcessor.java:195)
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:73)
	at org.apache.camel.processor.SendDynamicProcessor.lambda$process$0(SendDynamicProcessor.java:183)
	at org.apache.camel.impl.engine.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:309)
	at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:168)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:396)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:153)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
	at org.apache.camel.component.scheduler.SchedulerConsumer.sendTimerExchange(SchedulerConsumer.java:58)
	at org.apache.camel.component.scheduler.SchedulerConsumer.poll(SchedulerConsumer.java:43)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
{noformat}


 ;;;","19/Feb/20 22:52;pascalschumacher;>Okay the leaks has been fixed now.

Yes, with latest master the memory leak has also been fixed for recipient list with enabled caching and for dynamic to with enabled caching.

However dynamic to with disabled cache still causes a NullPointerException (see above for details).;;;","20/Feb/20 05:14;davsclaus;Okay fixed the NPE. Can you test again with a new build?;;;","20/Feb/20 05:21;davsclaus;Btw the toD with -1 cache size was the only combo i didnt try yesterday evening.;;;","21/Feb/20 06:55;pascalschumacher;Everything is fine now. Great Work! Thank you very much!;;;"
QuartzEndpoint returns no trigger parameters,CAMEL-14577,13285692,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Holu,Holu,17/Feb/20 07:40,17/Feb/20 09:00,13/Jul/23 08:33,17/Feb/20 09:00,3.0.1,,,3.1.0,,,,,camel-quartz,,,,0,,,,,"In my route I have to evaluate configuration of cron parameters at runtime. With Camel 2.x it worked, but in camel 3 QuartzEndpoint.getTriggerParameters returns empty map.

In Example below it should contain timeZone parameter, but is empty.
{code:java}
public class MyRoute extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        String cron = String.format(""quartz://job?cron=0+%s+%s+?+*+*&trigger.timeZone=%s&trigger.misfireInstruction=2"", 59, 23, ""Europe/Berlin"");

        from(cron).routeId(""cron"").log(""running ${body}"").id(""cronlog"");  

      from(""timer://foo?fixedRate=true&period=300s&delay=1s"")
                .routeId(""start"")
                .process(exchange -> {
                    QuartzEndpoint endPoint =
getContext().getEndpoint(cron, QuartzEndpoint.class);
                    Map<String, Object> triggers =
endPoint.getTriggerParameters();
                    exchange.getIn().setBody(triggers.get(""timeZone""));
                })
                .log(""running ${body}"").id(""timerlog"");
    }
}
{code}",,davsclaus,Holu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 17 09:00:11 UTC 2020,,,,,,,,,,,"0|z0bka0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Feb/20 09:00;davsclaus;Thanks for the route test case;;;",,,,,,,,,,,,,,,,,,,
Camel-Blueprint fails on JDK8 with NPE,CAMEL-14561,13285150,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,acosentino,acosentino,13/Feb/20 18:23,14/Feb/20 15:14,13/Jul/23 08:33,14/Feb/20 15:14,,,,3.1.0,,,,,camel-blueprint,,,,0,,,,,"{code:java}
17:59:47.865 ERROR [fileinstall-/home/oscerd/playground/apache-karaf-4.2.7/deploy] Unable to start container for blueprint bundle camel-context.xml/0.0.0org.osgi.service.blueprint.container.ComponentDefinitionException: Failed to create the JAXB binder : javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException	 - with linked exception:[java.lang.NullPointerException]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:252) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parse(CamelNamespaceHandler.java:204) ~[?:?]	at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1369) ~[!/:1.10.2]	at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:427) ~[!/:1.10.2]	at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:331) ~[!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:371) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:298) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:311) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:280) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:266) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [!/:1.10.2]	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1260) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1233) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.doProcess(DirectoryWatcher.java:520) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:365) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:316) [!/:3.6.4]Caused by: javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException		at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:202) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:129) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.find(ContextFinder.java:318) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:478) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:435) ~[?:1.8.0_201]	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:38) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:678) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:250) ~[?:?]	... 26 moreCaused by: java.lang.NullPointerException	at javax.xml.bind.ContextFinder.handleClassCastException(ContextFinder.java:114) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:187) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:129) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.find(ContextFinder.java:318) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:478) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:435) ~[?:1.8.0_201]	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:38) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:678) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:250) ~[?:?]	... 26 more17:59:47.871 DEBUG [fileinstall-/home/oscerd/playground/apache-karaf-4.2.7/deploy] Sending blueprint container event BlueprintEvent[type=FAILURE, exception=Failed to create the JAXB binder : javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException
{code}
With a simple blueprint.xml. With JDK11 this is ok.

 ",,acosentino,davsclaus,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 14 15:01:01 UTC 2020,,,,,,,,,,,"0|z0bgxk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Feb/20 06:58;davsclaus;So its JAXBContext that seems to load an implementation that is not an instanceof JAXBContext and then when it attempts to report this, then it has a NPE in its own code, because getClassloader returns null.

So its some OSGi classloading hell on Karaf that is causing this. 

I wonder if we could generate the ObjectFactory classes instead of using jaxb.index files and rely on JAXB itself. But its a big change as you would need to add annotations to refer to the factory classes in the model.

This is also only on JDK8 and Karaf. And JDK8 will become dropped in the future.

For Camel 3.1.0 we can release with a known issue and then see if we can find a fix for 3.1.1.;;;","14/Feb/20 15:01;gnodet;The problem is caused by {{camel-xml-jaxb}} having an import package on {{javax.xml.bind}} with a range {{[2.3.0,3.00)}}, while Karaf system bundle exports the package in version 2.2.
To work around the problem, the camel features install its own jaxb-api bundle, but it does not work as the {{JAXBContext}} interface used by the internal jaxb implementation from the JDK does not use the one that is wired to camel (hence the {{ClassCastException}}).
;;;",,,,,,,,,,,,,,,,,,
resilience4j doesn't catch configuration from spring boot,CAMEL-14548,13284993,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,13/Feb/20 06:58,13/Feb/20 17:38,13/Jul/23 08:33,13/Feb/20 17:38,3.0.1,,,3.1.0,,,,,,,,,0,,,,,"Configuring the resilience4j component with spring boot like in the example [https://github.com/apache/camel-spring-boot/blob/master/examples/camel-example-spring-boot-resilience4j/client/src/main/java/sample/camel/ClientRoute.java] doesn't work correctly.
{code:java}
.circuitBreaker() 
// see application.properties how resilience is configured 
.to(""http://localhost:9090/service1"")
{code}
 

The configuration in application.properties is not taken into account.",,cgiera,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 13 15:25:53 UTC 2020,,,,,,,,,,,"0|z0bfyo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Feb/20 15:25;davsclaus;Yeah reproduced on master. Works for the camel-main client but not for SB;;;",,,,,,,,,,,,,,,,,,,
Wrong message in some cases in org.apache.camel.PropertyBindingException,CAMEL-14534,13284592,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,11/Feb/20 14:08,11/Feb/20 16:01,13/Jul/23 08:33,11/Feb/20 16:01,,,,3.1.0,,,,,,,,,0,,,,,"In some cases `org.apache.camel.PropertyBindingException` logs a wrong message see:
{code:bash}
org.apache.camel.PropertyBindingException: Error binding property (camel.component.sjms2..connectionfactory.brokerurl=tcp://localhost:61616) with name: connectionfactory.brokerurl on bean: org.apache.camel.component.sjms2.Sjms2Component@601eed8b with value: tcp://localhost:61616
	at org.apache.camel.main.BaseMainSupport.setPropertiesOnTarget(BaseMainSupport.java:175) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.autoConfigurationFromProperties(BaseMainSupport.java:929) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:545) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.initCamelContext(BaseMainSupport.java:422) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.Main.doInit(Main.java:108) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.support.service.ServiceSupport.init(ServiceSupport.java:80) ~[camel-api-3.0.1.jar:3.0.1]
	at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:108) ~[camel-api-3.0.1.jar:3.0.1]
	at org.apache.camel.main.MainSupport.run(MainSupport.java:77) ~[camel-main-3.0.1.jar:3.0.1]
{code}

specifically the double dots {{..}} in {{camel.component.sjms2..connectionfactory.brokerurl}} that can be very confusing.",,valdar,,,,,,"valdar commented on pull request #3569: Fix CAMEL-14534: Wrong message in some cases in org.apache.camel.Prop…
URL: https://github.com/apache/camel/pull/3569
 
 
   …ertyBindingException.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/20 15:14;githubbot;600","valdar commented on pull request #3569: Fix CAMEL-14534: Wrong message in some cases in org.apache.camel.Prop…
URL: https://github.com/apache/camel/pull/3569
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;11/Feb/20 16:00;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-02-11 14:08:47.0,,,,,,,,,,,"0|z0bdhk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp: fileExist=Append and tempPrefix options do not work together,CAMEL-14533,13284561,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kalusn,kalusn,11/Feb/20 12:20,03/Aug/20 08:00,13/Jul/23 08:33,03/Aug/20 08:00,2.22.2,2.24.2,3.0.1,2.25.2,3.4.3,3.5.0,,,camel-ftp,,,,0,,,,,"If you both have fileExist=Append and tempPrefix=<something> options on a sftp to-endpoint, the de facto behaviour of the route is as if it was configured with fileExist=Override.

When you think about how fileExist and tempPrefix works, this bug actually makes sense. The temporary prefix makes it so that a ""new"" file is written every time, and therefore fileExist=Append is just working like it does when there isn't an existing file to append to.

I think there are a couple of possible solutions to this problem:
 * Document this behaviour in the camel documentation, and let the user be responsible for knowing that these two options are incompatible
 * Throw an exception when building the route if these two mutually exclusive options are used on the same route
 * Make fileExist=Append and tempPrefix=<something> be compatible, by making the 'mv' operation after writing the temporary file merge the two files, instead of replacing it
 * Some other brilliant solution that the camel maintainers will see, that has escaped me

*Recreate the issue*

Define and start up the following route:
{code:java}
from(""timer://loltimer?delay=5000&period=5000"")
 .setHeader(""CamelFileName"", constant(""foo.txt""))
 .setBody(constant(""Davs""))
 .to(""sftp://mysftpserver:22/fileappendtest?username=myusername&password=mypassword&fileExist=Append&tempPrefix=.uploading"");{code}
Then you can observe the folder on the sftp-server, and see that the file size never increases, but the files Last-Modified timestamp gets renewed every five seconds.

If you remove the ""tempPrefix=.uploading"" option from the sftp uri it works like it should, and the file size increases every 5 seconds.",,davsclaus,kalusn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 03 07:42:29 UTC 2020,,,,,,,,,,,"0|z0bdao:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Feb/20 13:13;davsclaus;You are welcome to work on a PR with the option to throw an exception.;;;","11/Feb/20 13:46;kalusn;Ok, I'll give it a go.;;;","03/Aug/20 07:42;davsclaus;The file component throws an exception so lets do the same for ftp;;;",,,,,,,,,,,,,,,,,
Pipeline inconsistency due to mutable processors list,CAMEL-14529,13284312,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zregvart,zregvart,10/Feb/20 13:34,22/Mar/21 18:07,13/Jul/23 08:33,10/Feb/20 14:32,3.0.0,,,3.1.0,,,,,camel-core,,,,0,,,,,"The {{org.apache.camel.processor.Pipeline}} eagerly computes the {{size}} of the pipeline and converts the Processors to AsyncProcessors in construction. It also allows access to the {{processors}} field via {{List<Processor> getProcessors}} method, through which the list of processors in a pipeline can be mutated without recalculating the {{size}} or converting any added Processors to AsyncProcessors, leading to inconsistency.

e.g. if I have code like:
{code:java}
Pipeline pipeline = Pipeline.newInstance(context, processor1, processor2);
pipeline.getProcessors().add(processor3);
{code}
{{processor3}} will never be executed.

I see two possible solutions:
# disallow {{processors}} list mutation, or
# don't eagerly compute size and convert Processors to AsyncProcessors on demand",,davsclaus,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 10 15:04:03 UTC 2020,,,,,,,,,,,"0|z0bbrc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Feb/20 13:41;davsclaus;getProcessors is intended for read-only - not for mutation. so its #1 and its mostly used for testing. And its use can be replaced with org.apache.camel.Navigate, so we can remove the method and use Navigate instead. ;;;","10/Feb/20 14:32;davsclaus;Use next instead as documented in the upgrade guide;;;","10/Feb/20 15:04;zregvart;Thanks [~davsclaus]!;;;",,,,,,,,,,,,,,,,,
is it not possible to use //CHECSTYLE:OFF for checks like LineLength ,CAMEL-14526,13284014,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,valdar,valdar,valdar,07/Feb/20 21:13,07/Feb/20 21:44,13/Jul/23 08:33,07/Feb/20 21:44,,,,,,,,,,,,,0,,,,,The issue is well described here: https://github.com/checkstyle/checkstyle/issues/5575,,valdar,,,,,,"valdar commented on pull request #3553: Fixed CAMEL-14526: is it not possible to use //CHECSTYLE:OFF for chec…
URL: https://github.com/apache/camel/pull/3553
 
 
   …ks like LineLength.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Feb/20 21:18;githubbot;600","valdar commented on pull request #3553: Fixed CAMEL-14526: is it not possible to use //CHECSTYLE:OFF for chec…
URL: https://github.com/apache/camel/pull/3553
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Feb/20 21:44;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 07 21:19:19 UTC 2020,,,,,,,,,,,"0|z0b9ww:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Feb/20 21:19;valdar;PR provided https://github.com/apache/camel/pull/3553;;;",,,,,,,,,,,,,,,,,,,
NullPointerException with @BeanInject,CAMEL-14510,13283710,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,r.schoen@topdesk.com,r.schoen@topdesk.com,06/Feb/20 14:17,06/Feb/20 21:07,13/Jul/23 08:33,06/Feb/20 21:07,3.0.1,,,3.0.2,3.1.0,,,,came-core,,,,0,,,,,"When testing if I can use Camel 3, I’m getting a NullPointerException when trying to start Camel.

Part of the stacktrace:

Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'route.dlc.ErrorRoutes': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: route.dlc.ErrorRoutes; nested exception is java.lang.NullPointerException

Caused by: java.lang.NullPointerException
 at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionBeanValue(CamelPostProcessorHelper.java:292)
 at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFieldBean(DefaultCamelBeanPostProcessor.java:234)
 at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:192)
 at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)
 at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:184)
 at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:95)
 at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:162)
 ... 30 more",,davsclaus,r.schoen@topdesk.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Feb/20 14:17;r.schoen@topdesk.com;camel-issue.zip;https://issues.apache.org/jira/secure/attachment/12992779/camel-issue.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 06 20:32:29 UTC 2020,,,,,,,,,,,"0|z0b81c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Feb/20 14:19;r.schoen@topdesk.com;I added a test-case showing the error. Just execute ""./gradlew run"" to run it.;;;","06/Feb/20 14:19;r.schoen@topdesk.com;I added a null-check in the method getInjectionBeanValue of the CamelPostProcessorHelper and that seemed to solve it:

if (camelContext != null && type.isAssignableFrom(camelContext.getClass())) {
   return camelContext;
};;;","06/Feb/20 20:32;davsclaus;Thanks I have reproduced and have a fix;;;",,,,,,,,,,,,,,,,,
came-ftp - streamDownload=true and stepwise=true for larger files could cause deadlock,CAMEL-14506,13283663,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,06/Feb/20 10:00,23/Mar/21 12:48,13/Jul/23 08:33,10/Feb/20 15:53,3.1.0,,,3.1.0,,,,,camel-ftp,,,,0,,,,,"If downloading files of size bigger then about 0,5 MB (differs on other parameters) with option streamDownload=true and stepwise=true (default values), operation could freeze (on my local environment it freezes with 100% certainty), because retrieved inputstream has to be closed before calling other commands .
See https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html#retrieveFileStream(java.lang.String)
{quote}To finalize the file transfer you must call completePendingCommand and check its return value to verify success. If this is not done, subsequent commands may behave unexpectedly.{quote}

Problem happens if retrieval of file is immediately followed by change of directory.

I can imagine fix, which doesn't make change of directory, if is not necessary and it would be nice to add note to documentation, that streamDownload and stepWise options together could cause unexpected behavior for larger filespossibly (possible freeze of component)",,davsclaus,jondruse,,,,,"JiriOndrusek commented on pull request #3560: CAMEL-14506 came-ftp - streamDownload and stepwise could cause deadlock
URL: https://github.com/apache/camel/pull/3560
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-14506
   
   Stepwise and stream download are not supported together. 
   Combination of these two parameters in ftp component is strictly forbidden (could cause freeze). IllegalArgumentException is now thrown when this options are used together.
   
   A new test covering this change is introduced: FtpSimpleConsumeStreamingStepwiseTrueTest
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/20 11:55;githubbot;600","davsclaus commented on pull request #3560: CAMEL-14506 came-ftp - streamDownload and stepwise could cause deadlock
URL: https://github.com/apache/camel/pull/3560
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Feb/20 15:51;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,CAMEL-12472,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 06 10:20:53 UTC 2020,,,,,,,,,,,"0|z0b7qw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Feb/20 10:05;davsclaus;Add a note in the docs about that stepwise is not support for stream download;;;","06/Feb/20 10:19;jondruse;[~davsclaus] 
should I also disable stepwise function in stream download  (which would force behavior to be correct, but also will be unclear for user)
Better approach would be to throw an error if stepwise is true during stream download.
Or just the doc update.  What do you think?;;;","06/Feb/20 10:20;davsclaus;Yeah throw an exception and also update the docs;;;",,,,,,,,,,,,,,,,,
camel-package-maven-plugin:generate fails with NPE for component outside the camel source tree,CAMEL-14503,13283575,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,05/Feb/20 21:04,06/Feb/20 14:40,13/Jul/23 08:33,06/Feb/20 13:59,,,,3.1.0,,,,,tooling,,,,0,,,,,"The mojo camel-package-maven-plugin:generate assumes that components are all belonging to the camel source tree so when it is applied to external components, it fails with NPE here: https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/EndpointSchemaGeneratorMojo.java#L1230-L1231

",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,CAMEL-14511,,,,,,,,CAMEL-14509,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 06 13:59:55 UTC 2020,,,,,,,,,,,"0|z0b77c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Feb/20 21:06;lb;/cc [~gnodet];;;","06/Feb/20 10:10;davsclaus;Ah yeah then you need to find camel-core from via classpath / jarurl. We do that in some of the other maven tools;;;","06/Feb/20 10:15;davsclaus;There is some code here in 2.x that finds camel-core JAR from classpath and can load resources from within
https://github.com/apache/camel/blob/camel-2.x/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageDataFormatMojo.java#L140

We would need to do something like this for 3rd party;;;","06/Feb/20 10:18;lb;Not sure if camel-core is really needed maybe we just need to assume that if we do not find camel-core we are not in the camel repo so we should follow a different path;;;","06/Feb/20 11:34;davsclaus;A component inheirts some options that are on default endpoint which the plugin then cannot find;;;","06/Feb/20 11:38;davsclaus;We may want to create a new mojo that 3rd party can use, as it cannot do endpointdsl, componentdsl, and other bits. But should just do

- PackageJandexMojo
- TypeConverterLoaderGeneratorMojo
- SpiGeneratorMojo
- EndpointSchemaGeneratorMojo
- PrepareComponentMojo
- ValidateComponentMojo;;;","06/Feb/20 11:45;davsclaus;There is now a new plugin goal named ""generate-component"" that 3rd party component developers should use.;;;","06/Feb/20 11:48;davsclaus;Okay we now have that generate-component goal instead, we can then use it to turn on a flag on the endpoint mojo so it knows its not camel itself, and can act differently. 

For those standard options we could copy over the javadoc description instead of loading from source, then we dont need any trick to find the camel-core source code (eg to download -sources JAR);;;","06/Feb/20 11:49;davsclaus;Luca btw where do you use this plugin? Do we have a nice place to try it? Isnt there a component in camel-k-runtime ?;;;","06/Feb/20 11:54;lb;yes there is a component in camel-k named camel-knative.

I think that we should not prevent external components to generate the endpointdsl and componentdsl, maybe camel-core should include a resource that lists common properties;;;","06/Feb/20 12:07;davsclaus;Its not on the radar for now to have endpoint or component dsl for 3rd party components. The camel-knative should be move here when its stable.;;;","06/Feb/20 12:15;lb;Well, I did some work some weeks ago to make it possible, for sure they will not be part of the aggregate class that exposes all the methods but you should be able to use it through static imports;;;","06/Feb/20 12:55;davsclaus;Okay hacked the maven plugin and can now generate the metadata, then knative component has a missing javadoc on the component level.
And when testing it fails as it thinks there is a type converter it should load. Looking into that;;;","06/Feb/20 12:57;lb;yeah I have a branch with the fixes https://github.com/lburgazzoli/apache-camel-k-runtime/tree/github-227
or better, till yesterday :);;;","06/Feb/20 13:59;davsclaus;There is the new generate-component plugin to use, and then you need to add the src/generated to the JAR via that other plugin. But its in the PR for camel-k-runtime.;;;",,,,,
camel 2: mvn camel:run fails on spring projects,CAMEL-14493,13283436,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,05/Feb/20 10:33,05/Feb/20 12:10,13/Jul/23 08:33,05/Feb/20 12:10,2.25.0,,,2.25.1,,,,,,,,,0,,,,,"java.lang.ClassNotFoundException: org.apache.camel.spring.Main
 at java.net.URLClassLoader.findClass (URLClassLoader.java:382)
 at java.lang.ClassLoader.loadClass (ClassLoader.java:418)
 at java.lang.ClassLoader.loadClass (ClassLoader.java:351)
 at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:498)
 at java.lang.Thread.run (Thread.java:748)

 

Thanks @cmonmous for reporting the issue !",,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 05 12:10:12 UTC 2020,,,,,,,,,,,"0|z0b6cg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Feb/20 12:10;jpoth;[https://github.com/apache/camel/pull/3546];;;",,,,,,,,,,,,,,,,,,,
EtcdKeysEndpoint cannot be cast to AbstractEtcdPollingEndpoint,CAMEL-14492,13283433,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,05/Feb/20 10:24,12/Feb/20 11:22,13/Jul/23 08:33,12/Feb/20 11:22,3.x,,,3.1.0,,,,,camel-etcd,,,,0,,,,,"{code:java}
Caused by: org.apache.camel.PropertyBindingException: Error binding property (uris=http://192.168.178.30:23379,http://192.168.178.30:40001) with name: uris on bean: etcd://keys?uris=http%3A%2F%2F192.168.178.30%3A23379%2Chttp%3A%2F%2F192.168.178.30%3A40001 with value: http://192.168.178.30:23379,http://192.168.178.30:40001
 at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:502)
 at org.apache.camel.support.PropertyBindingSupport.access$000(PropertyBindingSupport.java:62)
 at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:250)
 at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:513)
 at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:482)
 at org.apache.camel.component.etcd.EtcdComponent.createEndpoint(EtcdComponent.java:153)
 at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:245)
 at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:756)
 ... 168 more
Caused by: java.lang.ClassCastException: org.apache.camel.component.etcd.EtcdKeysEndpoint cannot be cast to org.apache.camel.component.etcd.AbstractEtcdPollingEndpoint
 at org.apache.camel.component.etcd.AbstractEtcdPollingEndpointConfigurer.doConfigure(AbstractEtcdPollingEndpointConfigurer.java:28)
 at org.apache.camel.component.etcd.AbstractEtcdPollingEndpointConfigurer.configure(AbstractEtcdPollingEndpointConfigurer.java:19)
 at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:497)
 ... 175 more

{code}
 

Shows with this test: https://github.com/wildfly-extras/wildfly-camel/blob/master/itests/standalone/docker/src/test/java/org/wildfly/camel/test/etcd/EtcdIntegrationTest.java",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 11 13:58:42 UTC 2020,,,,,,,,,,,"0|z0b6bs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Feb/20 13:58;davsclaus;Ah yeah camel-etcd is abit wrong with its structure;;;",,,,,,,,,,,,,,,,,,,
camel-salesforce - Duplicate Properties between Relationship Name and Child Relationship Name,CAMEL-14480,13283024,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,djorgji,djorgji,03/Feb/20 17:52,16/Nov/20 21:26,13/Jul/23 08:33,16/Nov/20 21:26,3.0.1,,,3.7.0,,,,,camel-salesforce,,,,0,,,,,"When two SObjects have a one-to-one relationship and one of the objects in that relationship does not have a plural form the resulting DTO has duplicate properties causing compilation to fail. Similarly when the SObject with no plural form has a hierarchical child parent relationship with itself.

 

EX: *Equipment__c_* _has a relationship with *Yard_Slot*__*_c*__, were they both lookup to each other for a 1-to-1 relationship. *Yard_Slot_*_*_c.java_* _DTO has duplicate properties because both its Relationship **and its Child Relationship are named *Equipment*_*_r*.

 

EX2: *Equipment__c_* _has a parent/child relationship with itself causing both the Parent and Child relationship names to be *Equipment*_*_r.*

 

**Salesforce allows and handles both these scenarios properly, however the resulting DTO classes do not compile because of the duplicate properties and duplicate getters.

 

An easy fix would be to always append the suffix *List* on child relationship properties in DTO.",,djorgji,jeremyross,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 15 17:14:26 UTC 2020,,,,,,,,,,,"0|z0b43k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/20 17:14;jeremyross;PR forthcoming.;;;",,,,,,,,,,,,,,,,,,,
Camel-Blueprint: Endpoint parameters not recognized,CAMEL-14462,13282345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acosentino,acosentino,30/Jan/20 09:43,11/Feb/20 13:00,13/Jul/23 08:33,11/Feb/20 13:00,,,,3.1.0,,,,,camel-aws,camel-blueprint,,,0,,,,,"I was testing aws-translate in camel-blueprint with a stupid route like this one:
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">  
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""aws-translate"">
    <route id=""aws"">      
      <from uri=""timer:name?repeatCount=5"" />      
      <to uri=""aws-translate:test?accessKey=RAW(xxxx)&amp;secretKey=RAW(xxxx)&amp;region=eu-west-1""/>
      <log message=""Receiving body ${body}"" />    
    </route>
</camelContext>
</blueprint>{code}
In the component we have a check for having a client or accessKey and secretKey set, the error I'm getting is the following
{code:java}
org.apache.camel.FailedToCreateRouteException: Failed to create route aws at: >>> To[aws-translate:test?accessKey=RAW(xxxx)&secretKey=RAW(xxxx)&region=eu-west-1] <<< in route: Route(aws)[From[timer:name?repeatCount=5] -> [To[aws-transla... because of Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxxx)&region=eu-west-1&secretKey=xxxxxx due to: Amazon translate client or accessKey and secretKey must be specified
{code}
Then I tried to remove the check and use a modified version of the component, at that point, the options are completely not recognized.
{code:java}
[To[aws-transla... because of Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxxx)&region=eu-west-1&secretKey=xxxxxx due to: Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxx)&region=eu-west-1&secretKey=xxxxxx due to: There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{accessKey=xxxx, region=eu-west-1, secretKey=xxxx}]

{code}
It looks like there is something wrong while building the configuration and setting the properties on endpoint.

cc [~davsclaus] [~gnodet]

I tested only with camel-aws components, but it may be with others too",,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 11 11:53:09 UTC 2020,,,,,,,,,,,"0|z0azwo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Feb/20 10:03;davsclaus;On karaf 4.2.8 with camel 3.1 then this blueprint xml file works for me
{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">  

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
    <route id=""hello"">      
      <from uri=""timer:foo?period=1s""/>      
      <log message=""Hello world""/>    
    </route>
</camelContext>
</blueprint>
{code};;;","11/Feb/20 11:53;davsclaus;Okay working on how configurers are loaded so we can make it via a resolver like components, languges etc which then allows OSGi to do something custom;;;",,,,,,,,,,,,,,,,,,
Groovy language: NoClassDefFoundError in OSGi environment,CAMEL-14457,13282183,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alex.soto,alex.soto,29/Jan/20 13:29,06/Feb/20 21:20,13/Jul/23 08:33,06/Feb/20 21:20,3.0.0,3.0.1,,3.0.2,3.1.0,,,,camel-groovy,,,,0,,,,,"With Camel 3.0.1, I am experiencing this error:
  
{quote}{{java.lang.RuntimeException: java.lang.NoClassDefFoundError: groovy/lang/Script}}
 \{{ at org.codehaus.groovy.control.CompilationUnit.convertUncaughtExceptionToCompilationError(CompilationUnit.java:1107)}}
 \{{ at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:1087)}}
 \{{ at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:634)}}
 \{{ at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:612)}}
 \{{ at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:589)}}
 \{{ at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:401)}}
 \{{ at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89)}}
 \{{ at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:341)}}
 \{{ at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:338)}}
 \{{ at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147)}}
 \{{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:336)}}
 \{{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:320)}}
 \{{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:262)}}
 \{{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:272)}}
 \{{ at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:73)}}{{…}}
{quote}
 
  
 I am running Camel in Karaf OSGi environment with _camel-groovy_ feature installed.  In old Camel 2.X, I had to install features _camel-script,_ and _camel-script-groovy,_ but they are no longer available.
  
 {color:#000000}Adding:{color}
{quote}DynamicImport-Package:  groovy.**, org.codehaus.groovy.**{quote}
Fixes the issue.
  ",Apache Karaf 4.2.8,alex.soto,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 29 14:16:32 UTC 2020,,,,,,,,,,,"0|z0aywo:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jan/20 13:53;davsclaus;That dynamic import is that on your own custom bundle, or did you patch camel-groovy ?;;;","29/Jan/20 14:02;alex.soto;I added the dynamic import to my custom bundle, which contain the Camel routes. However, this is a work-around, as I think it should in the Groovy bundle itself.;;;","29/Jan/20 14:06;davsclaus;Yeah for OSGi that camel-groovy should be able to load any class because of scripting. So you are welcome to provide a PR with the fix in the camel-groovy/pom.xml;;;","29/Jan/20 14:16;alex.soto;I am not sure if it should be *any* class, perhaps just the Groovy classes, dynamically importing all classes at this level may cause other problems. Probably better for [~jbonofre] to look into this.;;;",,,,,,,,,,,,,,,,
camel-master - RAW() parameter value in delegated URI gets encoded,CAMEL-14456,13282124,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,tadayosi,tadayosi,tadayosi,29/Jan/20 07:59,30/Jan/20 00:26,13/Jul/23 08:33,30/Jan/20 00:26,2.25.0,3.0.0,,3.1.0,,,,,,,,,0,,,,,"Given the following endpoint URI:
{code}
master:test:dummy://path?foo=hello}+world&bar=RAW(hello}+world)
{code}
the value of parameter {{bar}} gets {{hello%7D+world}} instead of {{hello\}+world}}.",,tadayosi,,,,,,"tadayosi commented on pull request #3527: CAMEL-14456: camel-master - RAW() parameter value in delegated URI gets encoded
URL: https://github.com/apache/camel/pull/3527
 
 
   https://issues.apache.org/jira/browse/CAMEL-14456
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 08:08;githubbot;600","tadayosi commented on pull request #3527: CAMEL-14456: camel-master - RAW() parameter value in delegated URI gets encoded
URL: https://github.com/apache/camel/pull/3527
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/20 00:24;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-29 07:59:48.0,,,,,,,,,,,"0|z0ayjk:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ensure Camel Rest Swagger example work again,CAMEL-14453,13282060,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,28/Jan/20 21:39,31/Jan/20 21:21,13/Jul/23 08:33,31/Jan/20 21:21,,,,2.25.1,3.1.0,,,,examples,,,,0,,,,,"example
camel-example-spring-boot-rest-swagger-simple on Camel 3.x
camel-example-rest-swagger on Camel 2.x 
broken due to the changes on petstore.swagger.io server. Like change from http to https, and available Pet ID changed on the server",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-28 21:39:11.0,,,,,,,,,,,"0|z0ay5c:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to configure font or page size on PDF endpoints,CAMEL-14452,13282033,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,28/Jan/20 19:16,31/Jan/20 08:25,13/Jul/23 08:33,31/Jan/20 08:25,3.1.0,,,3.1.0,,,,,,,,,0,,,,,"This could be related to CAMEL-14284.

If you try to set the font or pageSize options on a PDF endpoint then you get an NPE. E.g

pdf:create?fontSize=6&pageSize=PAGE_SIZE_A5&font=courier

Probably due to PdfEndpointConfigurer expecting the type to be either PDFont or PDRectangle when its actually trying to deal with a String.",,jamesnetherton,,,,,,"jamesnetherton commented on pull request #3534: CAMEL-14452: Use String for pageSize and font on PDF URI params
URL: https://github.com/apache/camel/pull/3534
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/20 08:26;githubbot;600","jamesnetherton commented on pull request #3534: CAMEL-14452: Use String for pageSize and font on PDF URI params
URL: https://github.com/apache/camel/pull/3534
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/20 21:52;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-28 19:16:46.0,,,,,,,,,,,"0|z0axzc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-main: duration properties are ignored,CAMEL-14449,13281899,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,28/Jan/20 10:03,28/Jan/20 11:22,13/Jul/23 08:33,28/Jan/20 11:22,3.0.0,,,3.0.2,3.1.0,,,,camel-main,,,,0,,,,,"camel-main can be configured to shut down after  after a specific amount of time or number of messages but at this is done before properties are bound to the main's configuration object (MainConfigurationProperties), it is not possible to configure such behaviour through propertiees i.e. the camel.main.duration-max-messages is ignored.",,lb,,,,,,"lburgazzoli commented on pull request #3525: CAMEL-14449: camel-main: duration properties are ignored
URL: https://github.com/apache/camel/pull/3525
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/20 10:33;githubbot;600","lburgazzoli commented on pull request #3526: CAMEL-14449: camel-main: duration properties are ignored
URL: https://github.com/apache/camel/pull/3526
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/20 10:53;githubbot;600","lburgazzoli commented on pull request #3526: CAMEL-14449: camel-main: duration properties are ignored
URL: https://github.com/apache/camel/pull/3526
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;28/Jan/20 11:21;githubbot;600",,,,,0,1800,,,0,1800,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-28 10:03:46.0,,,,,,,,,,,"0|z0ax5k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenApi V3: ensure all variables are parsed for Server Url,CAMEL-14447,13281801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,27/Jan/20 20:49,31/Jan/20 21:23,13/Jul/23 08:33,31/Jan/20 21:23,3.1.0,,,3.1.0,,,,,,,,,0,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-27 20:49:30.0,,,,,,,,,,,"0|z0awjs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scheduler no longer shared between routes using the same scheduler name,CAMEL-14442,13281612,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pascalschumacher,pascalschumacher,26/Jan/20 21:24,28/Jan/20 17:47,13/Jul/23 08:33,28/Jan/20 07:52,3.0.1,,,3.0.2,3.1.0,,,,camel-scheduler,,,,0,,,,,"Using Camel 3.0.1 the scheduler/scheduler-thread is no longer shared between routes using the same scheduler name.

Using this test:

{code:java}
public class MultipleRoutesSameSchedulerTest extends CamelTestSupport {

    @Override
    protected RouteBuilder[] createRouteBuilders() throws Exception {
        return new RouteBuilder[] {
            new RouteBuilder() {
                public void configure() {
                    from(""scheduler:test?delay=1s"").log(""test1"");
                }
            },
            new RouteBuilder() {
                public void configure() {
                    from(""scheduler:test?delay=2s"").log(""test2"");
                }
            },
        };
    }

    @Test
    public void test() throws Exception {
        getMockEndpoint(""mock:test"").expectedMessageCount(1);

        assertMockEndpointsSatisfied(100, TimeUnit.SECONDS);
    }
}
{code}

Camel 2.23.0 uses the same thread:

{code}
22:05:04.698 [Camel (camel-1) thread #1 - scheduler://test] INFO route1 - test1
22:05:05.697 [Camel (camel-1) thread #1 - scheduler://test] INFO route2 - test2
{code}

Camel 3.0.1 uses two different threads:

{code}
22:03:02.488 [Camel (camel-1) thread #1 - scheduler://test] INFO route1 - test1
22:03:02.308 [Camel (camel-1) thread #2 - scheduler://test] INFO route2 - test2
{code}

Latest documentation claims that only one scheduler/scheduler-thread will be used:

{quote}
scheduler:name[?options]

Where name is the name of the scheduler, which is created and shared across endpoints. So if you use the same name for all your scheduler endpoints, only one scheduler thread pool and thread will be used...
{quote}

Am I missing something?
",,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 28 17:47:57 UTC 2020,,,,,,,,,,,"0|z0avds:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"28/Jan/20 17:47;pascalschumacher;Thank you very much for the quick fix! :-);;;",,,,,,,,,,,,,,,,,,,
Stomp connections are not established when the queues have additional features,CAMEL-14441,13281585,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,onlybytes,onlybytes,26/Jan/20 10:43,27/Jan/20 09:02,13/Jul/23 08:33,27/Jan/20 09:02,3.0.0,,,3.1.0,,,,,camel-stomp,,,,0,,,,,"Stomp connections are not established when queues are configured with additional features

Assume a queue created with additional features like x-dead-letter-exchange, x-dead-letter-routing-key, x-message-ttl, and so on..

At present, only the {{destination}} and {{id}} attributes are set in Stomp frames while subscribing to a destination. Because of this:
 # Message Broker throws an exception while subscribing to an existing queue
{{operation queue.declare caused a channel exception precondition_failed: inequivalent arg 'xxx-xxx-xxx' for queue 'yyy' in vhost '/': received none but current is the value 'zzz-zzz' of type 'longstr'}}
 # Message broker creates a plain temporary queue while subscribing to an exchange
{{The additional parameters are all skipped}}

 ",,onlybytes,,,,,,"onlybytes commented on pull request #3516: CAMEL-14441: Stomp connections are not established when the queues have additional features
URL: https://github.com/apache/camel/pull/3516
 
 
   Stomp connections are not established when queues are configured with additional features
   
   Assume a queue created with additional features like x-dead-letter-exchange, x-dead-letter-routing-key, x-message-ttl, and so on..
   
   At present, only the destination and id attributes are set in Stomp frames while subscribing to a destination
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;26/Jan/20 13:17;githubbot;600","oscerd commented on pull request #3516: CAMEL-14441: Stomp connections are not established when the queues have additional features
URL: https://github.com/apache/camel/pull/3516
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;27/Jan/20 09:01;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-26 10:43:33.0,,,,,,,,,,,"0|z0av7s:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-openapi-java: OasInfo may miss parent pointer,CAMEL-14439,13281488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,24/Jan/20 20:57,24/Jan/20 20:58,13/Jul/23 08:33,24/Jan/20 20:58,,,,3.1.0,,,,,,,,,0,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-24 20:57:52.0,,,,,,,,,,,"0|z0aum8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Memory leak when toD is used with cacheSize < 0 in Camel 2.x ,CAMEL-14432,13281327,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ldemasi,ldemasi,ldemasi,24/Jan/20 03:14,24/Jan/20 10:30,13/Jul/23 08:33,24/Jan/20 08:19,2.24.3,,,2.25.1,,,,,came-core,,,,0,,,,,"Only Camel 2.X is affected by this issue. 

When toD EIP is used and producer cache is disabled, producers' stop method is not invoked after the exchange is sent. This could lead to a memory leak for some components.

To reproduce this issue, configure the salesforce credentials in application.properties and start the camel route of the attached reproducer.

run the following commad:

{{PID=$(ps aux | grep CamelSalesforceExample | grep -v grep | awk '\{print $2}'); jcmd ${PID} GC.run; jmap -histo ${PID} | grep DefaultRest}}

 

The route invokes the producer endpoint 5 times, 5 DefaultRestClient objects are still remained in the heap

 

The bug is in the implementation of toD (camel-core) and only happens when producer cache is disabled (cacheSize < 0).
The logic behind ""dynamic to EIP"" is implemented in SendDynamicProcessor class. When the producer cache is disabled, SendDynamicProcessor instantiate an EmptyProducerCache class, a subclass of ProducerCache that mimic the behavior of his parent creating a new producer in acquireProducer method and stopping and disposing the producer in releaseProducer method.
After resolving the dynamic uri, SendDynamicProcessor sends the exchange to the endpoint using ProducerCache.doInAsyncProducer
that in its implementation is not using acquireProducer and releaseProducer methods to create and dispose the producer. As a consequence of this, a new producer is created and started but not stopped, producer get unreferenced and garbage-collected while in started state and so DefaultRestClient is not removed from SaleforceSession.

A possible workaround is to enable producer cache, setting cacheSize with a value greater than 0, in this way ProducerCache will use an LRUCache that stops the producer when an eviction occurs. 

 ",,ldemasi,,,,,,"luigidemasi commented on pull request #3510: CAMEL-14432: Memory leak when toD is used with cacheSize < 0
URL: https://github.com/apache/camel/pull/3510
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jan/20 03:22;githubbot;600","davsclaus commented on pull request #3510: CAMEL-14432: Memory leak when toD is used with cacheSize < 0
URL: https://github.com/apache/camel/pull/3510
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;24/Jan/20 05:03;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,"24/Jan/20 02:42;ldemasi;camel-salesforce-upstream.zip;https://issues.apache.org/jira/secure/attachment/12991707/camel-salesforce-upstream.zip",,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-24 03:14:05.0,,,,,,,,,,,"0|z0atmg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - HTTP responses over 4 MB fail,CAMEL-14424,13280982,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jeremyross,jeremyross,22/Jan/20 14:57,23/Jan/20 05:30,13/Jul/23 08:33,23/Jan/20 05:29,3.0.0,,,3.0.2,3.1.0,,,,camel-salesforce,,,,0,,,,,"It appears that any HTTP response from salesforce over 4 MB fails. Responses over 4 MB will be quite common when dealing with file attachments. Pull request to follow.

 
{noformat}
Stacktrace: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected error {200:OK} executing {GET:https://emuedu.my.salesforce.com/services/data/v45.0/sobjects/ContentVersion/0682E00000XXXXXXXX/VersionData}
  at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:201)
  at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:196)
  at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:188)
  at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:441)
  at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:421)
  at org.eclipse.jetty.client.HttpReceiver.responseContent(HttpReceiver.java:347)
  at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.content(HttpReceiverOverHTTP.java:283)
  at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1788)
  at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1518)
  at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:172)
  at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:135)
  at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73)
  at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133)
  at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155)
  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
  at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.onFillable(SslConnection.java:427)
  at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:321)
  at org.eclipse.jetty.io.ssl.SslConnection$2.succeeded(SslConnection.java:159)
  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
  at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117)
  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
  at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:781)
  at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:917)
  at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Buffering capacity 4194304 exceeded
  at org.eclipse.jetty.client.util.BufferingResponseListener.onContent(BufferingResponseListener.java:124)
  at org.eclipse.jetty.client.api.Response$Listener$Adapter.onContent(Response.java:248)
  at org.eclipse.jetty.client.ResponseNotifier.notifyContent(ResponseNotifier.java:133)
  at org.eclipse.jetty.client.ResponseNotifier.notifyContent(ResponseNotifier.java:125)
  at org.eclipse.jetty.client.HttpReceiver.responseContent(HttpReceiver.java:337)
  ... 23 more{noformat}",,jeremyross,,,,,,"jeremyross commented on pull request #3505: CAMEL-14424: HTTP responses over 4 MB fail
URL: https://github.com/apache/camel/pull/3505
 
 
   This commit allows the user to overwrite the default http client max content length of 4 MB.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;22/Jan/20 15:25;githubbot;600","davsclaus commented on pull request #3505: CAMEL-14424: HTTP responses over 4 MB fail
URL: https://github.com/apache/camel/pull/3505
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;23/Jan/20 05:26;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-22 14:57:10.0,,,,,,,,,,,"0|z0ari0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support `KafkaOffsetBackingStore` in camel-debezim,CAMEL-14420,13280797,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,omarsmak,omarsmak,omarsmak,21/Jan/20 15:56,30/Jan/20 06:30,13/Jul/23 08:33,29/Jan/20 14:08,3.0.0,,,3.1.0,,,,,camel-debezium,,,,1,,,,,"Currently, when set {{offsetStorage}} to {{org.apache.kafka.connect.storage. KafkaOffsetBackingStore}} and {{offsetTopic}}, the engine fails with the following error: 
{code} 
org.apache.kafka.common.config.ConfigException: Missing required configuration ""bootstrap.servers"" which has no default value.
    at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:476) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:466) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:108) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:142) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.clients.admin.AdminClientConfig.<init>(AdminClientConfig.java:196) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.clients.admin.AdminClient.create(AdminClient.java:65) ~[kafka-clients-2.3.1.jar:na]
    at org.apache.kafka.connect.util.TopicAdmin.<init>(TopicAdmin.java:169) ~[connect-runtime-2.3.1.jar:na]
    at org.apache.kafka.connect.storage.KafkaOffsetBackingStore$1.run(KafkaOffsetBackingStore.java:98) ~[connect-runtime-2.3.1.jar:na]
    at org.apache.kafka.connect.util.KafkaBasedLog.start(KafkaBasedLog.java:128) ~[connect-runtime-2.3.1.jar:na]
    at org.apache.kafka.connect.storage.KafkaOffsetBackingStore.start(KafkaOffsetBackingStore.java:109) ~[connect-runtime-2.3.1.jar:na]
    at io.debezium.embedded.EmbeddedEngine.run(EmbeddedEngine.java:733) ~[debezium-embedded-0.10.0.Final.jar:0.10.0.Final]
    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
    at java.base/java.lang.Thread.run(Thread.java:830) ~[na:na]
{code}
The reason is that, {{org.apache.kafka.connect.storage. KafkaOffsetBackingStore}} is using bootstrap servers set via Kafka Connect configs, hence we need to see how we can go around this.",,alexeyshockov,omarsmak,,,,,"omarsmak commented on pull request #3530: CAMEL-14420: Support additional properties on Debezium components
URL: https://github.com/apache/camel/pull/3530
 
 
   Per title. Similar to [camel-kafka](https://github.com/apache/camel/pull/3468), users can set additional properties using prefix `additionalProperties.`. E.g: 
   `debezium-mysql:test?offsetStorage=test&additionalProperties.schema.url=localhost:1246`
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 13:52;githubbot;600","omarsmak commented on pull request #3530: CAMEL-14420: Support additional properties on Debezium components
URL: https://github.com/apache/camel/pull/3530
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;29/Jan/20 14:07;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 30 06:30:23 UTC 2020,,,,,,,,,,,"0|z0aqcw:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jan/20 08:25;alexeyshockov;I created an issue for Debezium to expose this setting: [https://issues.redhat.com/browse/DBZ-1731];;;","22/Jan/20 09:27;omarsmak;Hi [~alexeyshockov], I don't think this is an issue with Debezium. We just don't pipeline these configurations to debezium, indeed debezium does accept these configurations and it works perfectly after that. To fix this, we can do something like what we did in camel-kafka, where we added an additional parameters {{advance}} that handles any extra configurations that are not exposed by default. ;;;","22/Jan/20 09:38;alexeyshockov;[~omarsmak], thanks a lot! I didn't know that it's possible.

It would be super helpful, I think. The file offset store (the only option for now) doesn't fit well in a cloud environment, it makes not much sense to use it if you have Kafka anyway.;;;","29/Jan/20 14:18;omarsmak;Hello [~alexeyshockov],

From Camel 3.1, we have added an additional property called {{additionalProperties}} which captures any settings with prefix {{additionalProperties.}}, thus it allows users to set additional properties that are not covered by the standard debezium/camel configurations, which is in your case is {{bootstrap.servers}}. Therefore, you just need to set it in debezium URI like this: {{debezium-mysql:test?....&additionalProperties.bootstrap.servers=kafka1,kafka2..}}

{{Regards,}}

Omar;;;","30/Jan/20 06:30;alexeyshockov;[~omarsmak], thank you!;;;",,,,,,,,,,,,,,,
Enrich EIP - Should wrap in UoW,CAMEL-14419,13280565,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Jan/20 14:09,20/Jan/20 15:29,13/Jul/23 08:33,20/Jan/20 15:29,3.0.0,,,3.1.0,,,,,camel-core,,,,0,,,,,As part of core optimization then discovered this bug. However its only affected due to some optimization and wont be a problem on 3.0.x so far.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-14354,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-20 14:09:58.0,,,,,,,,,,,"0|z0aoxc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3.0.1 Release Missing Artifacts on Maven Central,CAMEL-14413,13280164,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,dscalzi-lmco,dscalzi-lmco,17/Jan/20 15:20,18/Jan/20 10:57,13/Jul/23 08:33,18/Jan/20 10:57,3.0.1,,,,,,,,,,,,0,,,,,"Several components are missing jars and metadata for the 3.0.1 release. The ones I'm specifically referencing (and missing) are:
 *  org.apache.camel:camel-core
 * org.apache.camel:camel-main
 * org.apache.camel:camel-aws-ddb
 * org.apache.camel:camel-gson

Ex. 

[https://repo.maven.apache.org/maven2/org/apache/camel/camel-core/3.0.1/camel-core-3.0.1.pom]

[https://repo.maven.apache.org/maven2/org/apache/camel/camel-core/3.0.1/camel-core-3.0.1.jar]

 

As far as I can tell this is supposed to be a released version. [https://camel.apache.org/download/]",,acosentino,dscalzi-lmco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 18 10:57:59 UTC 2020,,,,,,,,,,,"0|z0amg8:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jan/20 15:26;acosentino;this is a sonatype problem. Use the apache repository for the moment. This is not our fault.;;;","17/Jan/20 15:30;dscalzi-lmco;Will do, thanks;;;","18/Jan/20 10:57;acosentino;This should be now resolved.;;;","18/Jan/20 10:57;acosentino;Re-open eventually please :);;;",,,,,,,,,,,,,,,,
Maven central now requires HTTPS,CAMEL-14412,13280114,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,17/Jan/20 10:51,06/Feb/20 20:58,13/Jul/23 08:33,17/Jan/20 11:42,,,,2.25.0,3.0.2,3.1.0,,,,,,,0,,,,,"We need to switch to https

[https://support.sonatype.com/hc/en-us/articles/360041287334]",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-17 10:51:35.0,,,,,,,,,,,"0|z0am54:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Spring-Boot: The project doesn't compile,CAMEL-14410,13279788,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnodet,acosentino,acosentino,16/Jan/20 09:40,20/Jan/20 09:32,13/Jul/23 08:33,20/Jan/20 09:32,,,,,,,,,camel-spring-boot,,,,0,,,,,"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-spring-boot-generator-maven-plugin: Compilation failure: Compilation failure: 
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/AbstractSpringBootGenerator.java:[47,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/AbstractSpringBootGenerator.java:[47,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[48,40] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[58,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[59,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[60,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[61,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[62,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[93,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[93,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[94,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[94,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[95,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[95,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[96,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[96,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[97,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[97,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[98,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[98,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[99,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[99,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[789,63] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[789,88] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[994,42] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[994,18] cannot find symbol
[ERROR] symbol: class Property
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1010,37] cannot find symbol
[ERROR] symbol: class GenericType
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1035,13] cannot find symbol
[ERROR] symbol: class GenericType
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1087,42] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1087,66] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1110,13] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1247,91] cannot find symbol
[ERROR] symbol: class Annotation
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1877,37] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[2079,39] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/PrepareCatalogSpringBootMojo.java:[40,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/PrepareCatalogSpringBootMojo.java:[40,1] static import only from classes and interfaces
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR] mvn <goals> -rf :camel-spring-boot-generator-maven-plugin",,acosentino,davsclaus,gnodet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 17 12:02:21 UTC 2020,,,,,,,,,,,"0|z0akig:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jan/20 16:04;acosentino;So I think we can switch directly to 3.1.0-SNAPSHOT, without a dev profile.

[~gnodet] [~cibsen@e-ma.net] [~lburgazzoli] does this sound good to everybody?;;;","16/Jan/20 17:38;davsclaus;+1;;;","16/Jan/20 20:06;gnodet;+1;;;","17/Jan/20 12:02;acosentino;[~gnodet] can you give a look so we can switch easily? thanks;;;",,,,,,,,,,,,,,,,
websocket-jsr356 consumer fails when endpoint URI parameters are provided,CAMEL-14396,13279120,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,13/Jan/20 16:24,15/Jan/20 09:40,13/Jul/23 08:33,15/Jan/20 09:40,,,,3.0.2,3.1.0,,,,,,,,0,,,,,"If you try to configure the websocket-jsr356 consumer like {{websocket-jsr356:///test?sessionCount=10}}, then the WebSocket endpoint is attempted to be configured on the entire path string including the query params. Hence it's not reachable from a client.",,jamesnetherton,,,,,,"jamesnetherton commented on pull request #3481: CAMEL-14396: websocket-jsr356 consumer fails when endpoint URI parameters are provided
URL: https://github.com/apache/camel/pull/3481
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;14/Jan/20 15:33;githubbot;600","jamesnetherton commented on pull request #3481: CAMEL-14396: websocket-jsr356 consumer fails when endpoint URI parameters are provided
URL: https://github.com/apache/camel/pull/3481
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;15/Jan/20 09:25;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-13 16:24:07.0,,,,,,,,,,,"0|z0ageg:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
websocket-jsr356 producer hangs,CAMEL-14390,13278746,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jamesnetherton,jamesnetherton,jamesnetherton,10/Jan/20 16:04,13/Jan/20 10:09,13/Jul/23 08:33,13/Jan/20 10:09,3.0.0,3.0.1,3.1.0,3.0.2,3.1.0,,,,,,,,0,,,,,"The websocket-jsr356 producer does not seem to work at all in 3.x. It hangs and no response ever seems to be returned.

It's simple to reproduce by removing the @ignore from the {{ensureServerModeSendsProperly}} test case.",,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-10 16:04:21.0,,,,,,,,,,,"0|z0ae3k:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Null pointer exception when restart client in SubscriptionHelper,CAMEL-14387,13278631,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,jbdefard,jbdefard,10/Jan/20 07:30,11/Jan/20 14:20,13/Jul/23 08:33,10/Jan/20 12:23,3.0.0,3.0.0.RC3,,3.1.0,,,,,camel-salesforce,,,,0,,,,,"When attempt to restart Cometd client, the component throw NPE:

2019-11-21 13:11:47.200 INFO 1 --- [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Restarting on unexpected disconnect from Salesforce...
2019-11-21 13:11:47.200 DEBUG 1 --- [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Waiting to disconnect...
2019-11-21 13:11:52.201 DEBUG 1 --- [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Pausing for 0 msecs before restart attempt
2019-11-21 13:11:52.201 INFO 1 --- [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.internal.SalesforceSession : Login at Salesforce loginUrl: https://login.salesforce.com/services/oauth2/token
2019-11-21 13:11:52.328 ERROR 1 --- [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: \{errors:[{""errorCode"":""unknown_error"",""message"":""Login error code:[unknown_error] description:[retry your request]"",""fields"":null}],statusCode:400}

org.apache.camel.component.salesforce.api.SalesforceException: \{errors:[{""errorCode"":""unknown_error"",""message"":""Login error code:[unknown_error] description:[retry your request]"",""fields"":null}],statusCode:400}
 at org.apache.camel.component.salesforce.internal.SalesforceSession.parseLoginResponse(SalesforceSession.java:279) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:130) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.createClient(SubscriptionHelper.java:353) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.doStart(SubscriptionHelper.java:112) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:277) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at java.base/java.lang.Thread.run(Unknown Source) ~[na:na]

2019-11-21 13:11:52.331 WARN 1 --- [SalesforceHttpClient@3991fe6d-14724] o.e.jetty.util.thread.QueuedThreadPool :

java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:284) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at java.base/java.lang.Thread.run(Unknown Source) ~[na:na]

 

When restart in restartClient the client instance is null and (line 284)

if (client.isHandshook()) {
    LOG.info(""Successfully restarted!"");

raise NPE.

probably the patch:

if (client != null && client.isHandshook()) { ....

fix this.

 

When error occur Salesforce subscription never restart. We must restart services.

 ",,jbdefard,,,,,,"jbdefard commented on pull request #3473: CAMEL-14387 - fix NPE when client error
URL: https://github.com/apache/camel/pull/3473
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jan/20 07:47;githubbot;600","omarsmak commented on pull request #3473: CAMEL-14387 - fix NPE when client error
URL: https://github.com/apache/camel/pull/3473
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;10/Jan/20 12:21;githubbot;600",,,,,,0,1200,,,0,1200,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 10 07:49:08 UTC 2020,,,,,,,,,,,"0|z0ade0:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jan/20 07:49;jbdefard;I have created a PR :

https://github.com/apache/camel/pull/3473;;;",,,,,,,,,,,,,,,,,,,
Camel-2-x netty4 requestTimeout doesn't work as expected,CAMEL-14373,13277948,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,07/Jan/20 14:58,08/Jan/20 03:49,13/Jul/23 08:33,08/Jan/20 03:49,2.24.2,,,2.25.0,,,,,camel-netty4,,,,0,,,,,"Define netty endpoint with requestTimeout property.

Receive message with this endpoint without delay (timeout is not applied).
But Timeout is removed from endpoint (see https://github.com/apache/camel/blob/master/components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java#L155)
Receive second message - delayed - no request timeout is applied.",,jondruse,,,,,,,,,,,,,,,,,,,,,,CAMEL-14363,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 07 15:07:18 UTC 2020,,,,,,,,,,,"0|z0a9hs:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jan/20 15:07;jondruse;PR: https://github.com/apache/camel/pull/3466;;;",,,,,,,,,,,,,,,,,,,
Validator component fails with java.lang.IllegalArgumentException: protocol = http host = null,CAMEL-14372,13277935,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,akardapolov,akardapolov,07/Jan/20 14:09,17/May/21 08:30,13/Jul/23 08:33,11/Jan/20 15:11,2.18.0,3.0.0,,2.25.0,3.0.2,3.1.0,,,camel-validator,,,,0,,,,,"When using the Validator component with the http protocol the component throw an IllegalArgumentException.

To reproduce the issue run (for example):

{{.toD(""validator:http://foo.com/apps/func/schemas/part/myap/dummy-schema.xsd"")}}

Error:

IllegalArgumentException: protocol = http host = null error (see full stack trace in IllegalArgumentException_StackTrace.txt)

 

Find out the root cause: Calling the FileUtil.compactPath from resolveResource method in org/apache/camel/component/validator/DefaultLSResourceResolver.java 

 

Test case and output in attachments.

 

Thanks,

Alex.

 

 ",,akardapolov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-16622,,,,,"07/Jan/20 14:05;akardapolov;FileUtilTest.output;https://issues.apache.org/jira/secure/attachment/12990103/FileUtilTest.output","07/Jan/20 14:05;akardapolov;IllegalArgumentException_StackTrace.txt;https://issues.apache.org/jira/secure/attachment/12990101/IllegalArgumentException_StackTrace.txt",,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 11 14:55:40 UTC 2020,,,,,,,,,,,"0|z0a9ew:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jan/20 14:55;davsclaus;Thanks I could not reproduce this on 3.1, but we have done some work since.
Looking at fixing file util to not compact http urls.;;;",,,,,,,,,,,,,,,,,,,
can't gracefully shutdown a camel-undertow consumer endpoint,CAMEL-14368,13277781,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,06/Jan/20 20:53,06/Feb/20 20:58,13/Jul/23 08:33,08/Jan/20 15:17,,,,2.25.0,3.1.0,,,,,,,,0,,,,,"For example if we have a camel-undertow consumer endpoint like
{code}
               <route id=""counter-route"">
                        <from uri=""undertow:http://0.0.0.0:8080/srv/count""/>
                        <process ref=""counterProcessor""/>
                </route>
{code}
and the the counterProcessor is like
{code}
public class CounterProcessor implements Processor {
        private static final transient Logger LOG = LoggerFactory.getLogger(CounterProcessor.class);

        public void process(Exchange exchange) throws Exception {
                Long count = 0L;
                if (exchange.getIn().getHeader(""count"", Long.class) != null) {
                        count = exchange.getIn().getHeader(""count"", Long.class);
                }
                String cid = exchange.getIn().getHeader(""cid"", String.class);
                Long delay = 0L;
                if (exchange.getIn().getHeader(""delay"", Long.class) != null) {
                        delay = exchange.getIn().getHeader(""delay"", Long.class);
                }

                Long c = count + 1;

                LOG.info(""count before delay {} {}"", cid, c);
                Thread.sleep(delay == null ? 0 : delay);
                LOG.info(""count after delay {} {}"", cid, c);

                exchange.getOut().setBody(UuidBean.uuid() + "" "" + c);
        }
}
{code}

If we send http request with url like
{code}
http://localhost:8080/srv/count?count=5&cid=42&delay=20000
{code}
This suppose to return in 20 sec. If we use ""kill -15 process_id_camel_route"",  we should wait and see this camel route gracefully shutdown and let the flight exchange finish. But it's not this case now, while with camel-jetty, it works as expected.
",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 06 20:55:04 UTC 2020,,,,,,,,,,,"0|z0a8go:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Jan/20 20:55;ffang;I believe UndertowConsumer should be Suspendable to fix this.;;;",,,,,,,,,,,,,,,,,,,
JUnit declared in compile scope,CAMEL-14366,13277716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,zregvart,zregvart,06/Jan/20 14:32,06/Jan/20 14:33,13/Jul/23 08:33,06/Jan/20 14:33,,,,3.1.0,,,,,camel-fhir,,,,0,,,,,JUnit dependency is transitively inherited in {{compile}} scope in the FHIR component.,,zregvart,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-06 14:32:25.0,,,,,,,,,,,"0|z0a828:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel netty requestTimeout doesn't work as expected,CAMEL-14363,13277667,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jondruse,jondruse,jondruse,06/Jan/20 09:52,09/May/22 07:57,13/Jul/23 08:33,07/Jan/20 15:16,3.0.0,,,3.0.1,3.1.0,,,,camel-netty,,,,0,,,,,"Define netty endpoint with requestTimeout property.

Receive message with this endpoint without delay (timeout is not applied).
But Timeout is removed from endpoint (see https://github.com/apache/camel/blob/master/components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java#L155)
Receive second message - delayed - no request timeout is applied.",,jondruse,,,,,,"JiriOndrusek commented on pull request #3460: [CAMEL-14363] Camel netty requestTimeout doesn't work as expected
URL: https://github.com/apache/camel/pull/3460
 
 
   Issue: https://issues.apache.org/jira/browse/CAMEL-14363
   
   Removed removal of requestTimeout after first successfully received message + JUnit test.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;06/Jan/20 10:09;githubbot;600","oscerd commented on pull request #3460: [CAMEL-14363] Camel netty requestTimeout doesn't work as expected
URL: https://github.com/apache/camel/pull/3460
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;07/Jan/20 10:16;githubbot;600",,,,,,0,1200,,,0,1200,,,CAMEL-14373,,,,,,CAMEL-15195,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,2020-01-06 09:52:30.0,,,,,,,,,,,"0|z0a7rc:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-main: xml routes discovery does not work outside the classpath,CAMEL-14350,13277237,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lb,lb,02/Jan/20 16:36,03/Jan/20 08:54,13/Jul/23 08:33,03/Jan/20 08:54,3.0.0,,,3.0.1,3.1.0,,,,camel-core,camel-main,,,0,,,,,"assuming that the xml-routes option on camel main is set to something like:

{code}
file:path/to/soures/camel-*.xml
{code}

then camel main is unable to locate the xml routes in the target path. 

The documentation states that ""Files can be loaded from either classpath or file by prefixing with classpath: or file:"" but looking at the code, seems that the DefaultPackageScanResourceResolver which is what DefaultRoutesCollector leverage under the hoods, takes into account class path only resources.

To reproduce it, add the following tests to MainXmlTest

{code:java}
@Test
public void testMainRoutesCollectorScanDir() throws Exception {
    doTestMain(""file:src/test/resources/org/apache/camel/main/xml/camel-*.xml"");
}

@Test
public void testMainRoutesCollectorScanClasspath() throws Exception {
    doTestMain(""classpath:org/apache/camel/main/xml/camel-*.xml"");
}
{code}


",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 03 08:13:27 UTC 2020,,,,,,,,,,,"0|z0a540:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jan/20 07:39;davsclaus;Okay so wildcards are currently not supported for file prefix;;;","03/Jan/20 08:01;lb;Looks like wildcards do not work also for classpath prefix;;;","03/Jan/20 08:13;davsclaus;Yeah you cannot use a prefix, its classpath by default, fixing that too;;;",,,,,,,,,,,,,,,,,
